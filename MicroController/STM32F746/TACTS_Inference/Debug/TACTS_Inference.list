
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000157b8  080136c0  080136c0  000236c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028e78  08028e78  000410c4  2**0
                  CONTENTS
  4 .ARM          00000008  08028e78  08028e78  00038e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028e80  08028e80  000410c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028e80  08028e80  00038e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028e84  08028e84  00038e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010c4  20000000  08028e88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a298  200010e0  08029f4c  000410e0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  2000b378  08029f4c  0004b378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000410c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f338  00000000  00000000  000410f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce4  00000000  00000000  0006042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00064110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  000653e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a14b  00000000  00000000  00066500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4b3  00000000  00000000  0009064b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb815  00000000  00000000  000abafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000644c  00000000  00000000  001a7364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ad7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ad87c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200010e0 	.word	0x200010e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013694 	.word	0x08013694

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200010e4 	.word	0x200010e4
 800020c:	08013694 	.word	0x08013694

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a8 	b.w	8001010 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83a 	bl	8000d40 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_f2lz>:
 8000cd8:	ee07 0a90 	vmov	s15, r0
 8000cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce4:	d401      	bmi.n	8000cea <__aeabi_f2lz+0x12>
 8000ce6:	f000 b80b 	b.w	8000d00 <__aeabi_f2ulz>
 8000cea:	eef1 7a67 	vneg.f32	s15, s15
 8000cee:	b508      	push	{r3, lr}
 8000cf0:	ee17 0a90 	vmov	r0, s15
 8000cf4:	f000 f804 	bl	8000d00 <__aeabi_f2ulz>
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfe:	bd08      	pop	{r3, pc}

08000d00 <__aeabi_f2ulz>:
 8000d00:	b5d0      	push	{r4, r6, r7, lr}
 8000d02:	f7ff fc51 	bl	80005a8 <__aeabi_f2d>
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__aeabi_f2ulz+0x38>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fca3 	bl	8000658 <__aeabi_dmul>
 8000d12:	f000 f97f 	bl	8001014 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc24 	bl	8000564 <__aeabi_ui2d>
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <__aeabi_f2ulz+0x3c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f7ff fc9a 	bl	8000658 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff fadc 	bl	80002e8 <__aeabi_dsub>
 8000d30:	f000 f970 	bl	8001014 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <__udivmoddi4>:
 8000d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d44:	9d08      	ldr	r5, [sp, #32]
 8000d46:	4604      	mov	r4, r0
 8000d48:	468e      	mov	lr, r1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d14d      	bne.n	8000dea <__udivmoddi4+0xaa>
 8000d4e:	428a      	cmp	r2, r1
 8000d50:	4694      	mov	ip, r2
 8000d52:	d969      	bls.n	8000e28 <__udivmoddi4+0xe8>
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	b152      	cbz	r2, 8000d70 <__udivmoddi4+0x30>
 8000d5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d5e:	f1c2 0120 	rsb	r1, r2, #32
 8000d62:	fa20 f101 	lsr.w	r1, r0, r1
 8000d66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000d6e:	4094      	lsls	r4, r2
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	0c21      	lsrs	r1, r4, #16
 8000d76:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7a:	fa1f f78c 	uxth.w	r7, ip
 8000d7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000d82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d86:	fb06 f107 	mul.w	r1, r6, r7
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d90a      	bls.n	8000da4 <__udivmoddi4+0x64>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 811f 	bcs.w	8000fd8 <__udivmoddi4+0x298>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 811c 	bls.w	8000fd8 <__udivmoddi4+0x298>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 f707 	mul.w	r7, r0, r7
 8000db8:	42a7      	cmp	r7, r4
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x92>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc4:	f080 810a 	bcs.w	8000fdc <__udivmoddi4+0x29c>
 8000dc8:	42a7      	cmp	r7, r4
 8000dca:	f240 8107 	bls.w	8000fdc <__udivmoddi4+0x29c>
 8000dce:	4464      	add	r4, ip
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	1be4      	subs	r4, r4, r7
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa4>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0xc2>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	f000 80ef 	beq.w	8000fd2 <__udivmoddi4+0x292>
 8000df4:	2600      	movs	r6, #0
 8000df6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	fab3 f683 	clz	r6, r3
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d14a      	bne.n	8000ea0 <__udivmoddi4+0x160>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d302      	bcc.n	8000e14 <__udivmoddi4+0xd4>
 8000e0e:	4282      	cmp	r2, r0
 8000e10:	f200 80f9 	bhi.w	8001006 <__udivmoddi4+0x2c6>
 8000e14:	1a84      	subs	r4, r0, r2
 8000e16:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e0      	beq.n	8000de4 <__udivmoddi4+0xa4>
 8000e22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e26:	e7dd      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000e28:	b902      	cbnz	r2, 8000e2c <__udivmoddi4+0xec>
 8000e2a:	deff      	udf	#255	; 0xff
 8000e2c:	fab2 f282 	clz	r2, r2
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f040 8092 	bne.w	8000f5a <__udivmoddi4+0x21a>
 8000e36:	eba1 010c 	sub.w	r1, r1, ip
 8000e3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3e:	fa1f fe8c 	uxth.w	lr, ip
 8000e42:	2601      	movs	r6, #1
 8000e44:	0c20      	lsrs	r0, r4, #16
 8000e46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000e4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e52:	fb0e f003 	mul.w	r0, lr, r3
 8000e56:	4288      	cmp	r0, r1
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x12c>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x12a>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f200 80cb 	bhi.w	8001000 <__udivmoddi4+0x2c0>
 8000e6a:	4643      	mov	r3, r8
 8000e6c:	1a09      	subs	r1, r1, r0
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e74:	fb07 1110 	mls	r1, r7, r0, r1
 8000e78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x156>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x154>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f200 80bb 	bhi.w	800100a <__udivmoddi4+0x2ca>
 8000e94:	4608      	mov	r0, r1
 8000e96:	eba4 040e 	sub.w	r4, r4, lr
 8000e9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e9e:	e79c      	b.n	8000dda <__udivmoddi4+0x9a>
 8000ea0:	f1c6 0720 	rsb	r7, r6, #32
 8000ea4:	40b3      	lsls	r3, r6
 8000ea6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eaa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eae:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000eb6:	431c      	orrs	r4, r3
 8000eb8:	40f9      	lsrs	r1, r7
 8000eba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ebe:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ec6:	0c20      	lsrs	r0, r4, #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed8:	4288      	cmp	r0, r1
 8000eda:	fa02 f206 	lsl.w	r2, r2, r6
 8000ede:	d90b      	bls.n	8000ef8 <__udivmoddi4+0x1b8>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee8:	f080 8088 	bcs.w	8000ffc <__udivmoddi4+0x2bc>
 8000eec:	4288      	cmp	r0, r1
 8000eee:	f240 8085 	bls.w	8000ffc <__udivmoddi4+0x2bc>
 8000ef2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	1a09      	subs	r1, r1, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f00:	fb09 1110 	mls	r1, r9, r0, r1
 8000f04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f0c:	458e      	cmp	lr, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1e2>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f18:	d26c      	bcs.n	8000ff4 <__udivmoddi4+0x2b4>
 8000f1a:	458e      	cmp	lr, r1
 8000f1c:	d96a      	bls.n	8000ff4 <__udivmoddi4+0x2b4>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f26:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2a:	eba1 010e 	sub.w	r1, r1, lr
 8000f2e:	42a1      	cmp	r1, r4
 8000f30:	46c8      	mov	r8, r9
 8000f32:	46a6      	mov	lr, r4
 8000f34:	d356      	bcc.n	8000fe4 <__udivmoddi4+0x2a4>
 8000f36:	d053      	beq.n	8000fe0 <__udivmoddi4+0x2a0>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x212>
 8000f3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000f3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000f42:	fa01 f707 	lsl.w	r7, r1, r7
 8000f46:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4a:	40f1      	lsrs	r1, r6
 8000f4c:	431f      	orrs	r7, r3
 8000f4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	f1c2 0320 	rsb	r3, r2, #32
 8000f5e:	40d8      	lsrs	r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa21 f303 	lsr.w	r3, r1, r3
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	4301      	orrs	r1, r0
 8000f6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f70:	fa1f fe8c 	uxth.w	lr, ip
 8000f74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f78:	fb07 3610 	mls	r6, r7, r0, r3
 8000f7c:	0c0b      	lsrs	r3, r1, #16
 8000f7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f82:	fb00 f60e 	mul.w	r6, r0, lr
 8000f86:	429e      	cmp	r6, r3
 8000f88:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x260>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f96:	d22f      	bcs.n	8000ff8 <__udivmoddi4+0x2b8>
 8000f98:	429e      	cmp	r6, r3
 8000f9a:	d92d      	bls.n	8000ff8 <__udivmoddi4+0x2b8>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1b9b      	subs	r3, r3, r6
 8000fa2:	b289      	uxth	r1, r1
 8000fa4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa8:	fb07 3316 	mls	r3, r7, r6, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x28a>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc0:	d216      	bcs.n	8000ff0 <__udivmoddi4+0x2b0>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d914      	bls.n	8000ff0 <__udivmoddi4+0x2b0>
 8000fc6:	3e02      	subs	r6, #2
 8000fc8:	4461      	add	r1, ip
 8000fca:	1ac9      	subs	r1, r1, r3
 8000fcc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd0:	e738      	b.n	8000e44 <__udivmoddi4+0x104>
 8000fd2:	462e      	mov	r6, r5
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	e705      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000fd8:	4606      	mov	r6, r0
 8000fda:	e6e3      	b.n	8000da4 <__udivmoddi4+0x64>
 8000fdc:	4618      	mov	r0, r3
 8000fde:	e6f8      	b.n	8000dd2 <__udivmoddi4+0x92>
 8000fe0:	454b      	cmp	r3, r9
 8000fe2:	d2a9      	bcs.n	8000f38 <__udivmoddi4+0x1f8>
 8000fe4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fec:	3801      	subs	r0, #1
 8000fee:	e7a3      	b.n	8000f38 <__udivmoddi4+0x1f8>
 8000ff0:	4646      	mov	r6, r8
 8000ff2:	e7ea      	b.n	8000fca <__udivmoddi4+0x28a>
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	e794      	b.n	8000f22 <__udivmoddi4+0x1e2>
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	e7d1      	b.n	8000fa0 <__udivmoddi4+0x260>
 8000ffc:	46d0      	mov	r8, sl
 8000ffe:	e77b      	b.n	8000ef8 <__udivmoddi4+0x1b8>
 8001000:	3b02      	subs	r3, #2
 8001002:	4461      	add	r1, ip
 8001004:	e732      	b.n	8000e6c <__udivmoddi4+0x12c>
 8001006:	4630      	mov	r0, r6
 8001008:	e709      	b.n	8000e1e <__udivmoddi4+0xde>
 800100a:	4464      	add	r4, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e742      	b.n	8000e96 <__udivmoddi4+0x156>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <__aeabi_d2uiz>:
 8001014:	004a      	lsls	r2, r1, #1
 8001016:	d211      	bcs.n	800103c <__aeabi_d2uiz+0x28>
 8001018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800101c:	d211      	bcs.n	8001042 <__aeabi_d2uiz+0x2e>
 800101e:	d50d      	bpl.n	800103c <__aeabi_d2uiz+0x28>
 8001020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001028:	d40e      	bmi.n	8001048 <__aeabi_d2uiz+0x34>
 800102a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800102e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001036:	fa23 f002 	lsr.w	r0, r3, r2
 800103a:	4770      	bx	lr
 800103c:	f04f 0000 	mov.w	r0, #0
 8001040:	4770      	bx	lr
 8001042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001046:	d102      	bne.n	800104e <__aeabi_d2uiz+0x3a>
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr

08001054 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <aiInit+0x64>)
 800105c:	603b      	str	r3, [r7, #0]
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4815      	ldr	r0, [pc, #84]	; (80010bc <aiInit+0x68>)
 8001066:	f00b f865 	bl	800c134 <ai_twoline_create_and_init>
 800106a:	4603      	mov	r3, r0
 800106c:	607b      	str	r3, [r7, #4]
    if (err.type != AI_ERROR_NONE) {
 800106e:	793b      	ldrb	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8001074:	4912      	ldr	r1, [pc, #72]	; (80010c0 <aiInit+0x6c>)
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <aiInit+0x70>)
 8001078:	f00e fe3a 	bl	800fcf0 <siprintf>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	4910      	ldr	r1, [pc, #64]	; (80010c4 <aiInit+0x70>)
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <aiInit+0x74>)
 8001086:	f004 fd5b 	bl	8005b40 <HAL_UART_Transmit>
    }

#if NUM_SENSOR == 24
    ai_input = ai_twoline_inputs_get(allLine, NULL);
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <aiInit+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00b f8c3 	bl	800c21c <ai_twoline_inputs_get>
 8001096:	4603      	mov	r3, r0
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <aiInit+0x78>)
 800109a:	6013      	str	r3, [r2, #0]
    ai_output = ai_twoline_outputs_get(allLine, NULL);
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <aiInit+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00b f8d4 	bl	800c250 <ai_twoline_outputs_get>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <aiInit+0x7c>)
 80010ac:	6013      	str	r3, [r2, #0]

#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20001100 	.word	0x20001100
 80010bc:	200010fc 	.word	0x200010fc
 80010c0:	080136c0 	.word	0x080136c0
 80010c4:	20008c7c 	.word	0x20008c7c
 80010c8:	20008bf4 	.word	0x20008bf4
 80010cc:	200017f0 	.word	0x200017f0
 80010d0:	200017f4 	.word	0x200017f4

080010d4 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <aiRun+0x5c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <aiRun+0x60>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	605a      	str	r2, [r3, #4]

#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <aiRun+0x64>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <aiRun+0x5c>)
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <aiRun+0x60>)
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00b f8fe 	bl	800c2fc <ai_twoline_run>
 8001100:	60f8      	str	r0, [r7, #12]
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d00d      	beq.n	8001124 <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <aiRun+0x68>)
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <aiRun+0x6c>)
 800110c:	f00e fdf0 	bl	800fcf0 <siprintf>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	490a      	ldr	r1, [pc, #40]	; (8001140 <aiRun+0x6c>)
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <aiRun+0x70>)
 800111a:	f004 fd11 	bl	8005b40 <HAL_UART_Transmit>
        return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e000      	b.n	8001126 <aiRun+0x52>
    };
    return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200017f0 	.word	0x200017f0
 8001134:	200017f4 	.word	0x200017f4
 8001138:	200010fc 	.word	0x200010fc
 800113c:	080136d0 	.word	0x080136d0
 8001140:	20008c7c 	.word	0x20008c7c
 8001144:	20008bf4 	.word	0x20008bf4

08001148 <CalculateStats>:
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

#define throwSomenumber 20

void CalculateStats(int sensorIndex) {
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 8001162:	4a49      	ldr	r2, [pc, #292]	; (8001288 <CalculateStats+0x140>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e014      	b.n	800119c <CalculateStats+0x54>
 8001172:	4946      	ldr	r1, [pc, #280]	; (800128c <CalculateStats+0x144>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800117a:	fb03 f202 	mul.w	r2, r3, r2
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ed97 7a07 	vldr	s14, [r7, #28]
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	edc7 7a07 	vstr	s15, [r7, #28]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbe6      	blt.n	8001172 <CalculateStats+0x2a>
    mean = sum / count;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80011b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80011ba:	4a35      	ldr	r2, [pc, #212]	; (8001290 <CalculateStats+0x148>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	e031      	b.n	8001230 <CalculateStats+0xe8>
 80011cc:	492f      	ldr	r1, [pc, #188]	; (800128c <CalculateStats+0x144>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011d4:	fb03 f202 	mul.w	r2, r3, r2
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	ee17 0a90 	vmov	r0, s15
 80011f0:	f7ff f9da 	bl	80005a8 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001280 <CalculateStats+0x138>
 80011fc:	ec43 2b10 	vmov	d0, r2, r3
 8001200:	f010 feee 	bl	8011fe0 <pow>
 8001204:	ec55 4b10 	vmov	r4, r5, d0
 8001208:	69b8      	ldr	r0, [r7, #24]
 800120a:	f7ff f9cd 	bl	80005a8 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7ff f869 	bl	80002ec <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fcf1 	bl	8000c08 <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	3301      	adds	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbc9      	blt.n	80011cc <CalculateStats+0x84>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001242:	ed97 7a06 	vldr	s14, [r7, #24]
 8001246:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800124a:	ee16 0a90 	vmov	r0, s13
 800124e:	f7ff f9ab 	bl	80005a8 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	ec43 2b10 	vmov	d0, r2, r3
 800125a:	f010 ff31 	bl	80120c0 <sqrt>
 800125e:	ec53 2b10 	vmov	r2, r3, d0
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fccf 	bl	8000c08 <__aeabi_d2f>
 800126a:	4602      	mov	r2, r0
 800126c:	4909      	ldr	r1, [pc, #36]	; (8001294 <CalculateStats+0x14c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bdb0      	pop	{r4, r5, r7, pc}
 800127e:	bf00      	nop
 8001280:	00000000 	.word	0x00000000
 8001284:	40000000 	.word	0x40000000
 8001288:	20008938 	.word	0x20008938
 800128c:	200017f8 	.word	0x200017f8
 8001290:	20008878 	.word	0x20008878
 8001294:	200088d8 	.word	0x200088d8

08001298 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b0a6      	sub	sp, #152	; 0x98
 800129c:	af04      	add	r7, sp, #16
    char msg[128];
    for (int i = 0; i < NUM_SENSOR; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012a4:	e033      	b.n	800130e <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80012a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80012aa:	f7ff ff4d 	bl	8001148 <CalculateStats>
        sprintf(msg, "Sensor %d - Avg: %.2f, StdDev: %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]);
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <TransmitStats+0x88>)
 80012b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f974 	bl	80005a8 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <TransmitStats+0x8c>)
 80012c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f969 	bl	80005a8 <__aeabi_f2d>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	1d38      	adds	r0, r7, #4
 80012dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012e0:	e9cd 4500 	strd	r4, r5, [sp]
 80012e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80012e8:	490f      	ldr	r1, [pc, #60]	; (8001328 <TransmitStats+0x90>)
 80012ea:	f00e fd01 	bl	800fcf0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe ff97 	bl	8000224 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	1d39      	adds	r1, r7, #4
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <TransmitStats+0x94>)
 8001300:	f004 fc1e 	bl	8005b40 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001308:	3301      	adds	r3, #1
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800130e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001312:	2b17      	cmp	r3, #23
 8001314:	ddc7      	ble.n	80012a6 <TransmitStats+0xe>
    }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3788      	adds	r7, #136	; 0x88
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	20008878 	.word	0x20008878
 8001324:	200088d8 	.word	0x200088d8
 8001328:	080136e0 	.word	0x080136e0
 800132c:	20008bf4 	.word	0x20008bf4

08001330 <ResetSensorData>:

void ResetSensorData() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	e014      	b.n	8001366 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <ResetSensorData+0x48>)
 8001348:	4413      	add	r3, r2
 800134a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00d ff6b 	bl	800f22c <memset>
        readingCount[i] = 0;
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <ResetSensorData+0x4c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2100      	movs	r1, #0
 800135c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b17      	cmp	r3, #23
 800136a:	dde7      	ble.n	800133c <ResetSensorData+0xc>
    }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200017f8 	.word	0x200017f8
 800137c:	20008938 	.word	0x20008938

08001380 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_I2C1_Init+0x74>)
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <MX_I2C1_Init+0x78>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_I2C1_Init+0x74>)
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <MX_I2C1_Init+0x7c>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_I2C1_Init+0x74>)
 8001398:	2201      	movs	r2, #1
 800139a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013bc:	f001 ff76 	bl	80032ac <HAL_I2C_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013c6:	f000 ff53 	bl	8002270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013ce:	f003 f9c7 	bl	8004760 <HAL_I2CEx_ConfigAnalogFilter>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013d8:	f000 ff4a 	bl	8002270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013dc:	2100      	movs	r1, #0
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_I2C1_Init+0x74>)
 80013e0:	f003 fa09 	bl	80047f6 <HAL_I2CEx_ConfigDigitalFilter>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ea:	f000 ff41 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20008998 	.word	0x20008998
 80013f8:	40005400 	.word	0x40005400
 80013fc:	6000030d 	.word	0x6000030d

08001400 <Kalman_Init>:
KalmanFilter filters[NUM_SENSOR];
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6178      	str	r0, [r7, #20]
 8001408:	ed87 0a04 	vstr	s0, [r7, #16]
 800140c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001410:	ed87 1a02 	vstr	s2, [r7, #8]
 8001414:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	601a      	str	r2, [r3, #0]
    kf->R = R;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a02 	vldr	s14, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edd3 6a02 	vldr	s13, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	ed93 7a02 	vldr	s14, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	ed93 7a03 	vldr	s14, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 6a04 	vldr	s13, [r3, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001490:	ed97 6a00 	vldr	s12, [r7]
 8001494:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	ee07 3a90 	vmov	s15, r3
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e0:	f3bf 8f4f 	dsb	sy
}
 80014e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e6:	f3bf 8f6f 	isb	sy
}
 80014ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <SCB_EnableICache+0x48>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014f4:	f3bf 8f4f 	dsb	sy
}
 80014f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fa:	f3bf 8f6f 	isb	sy
}
 80014fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <SCB_EnableICache+0x48>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <SCB_EnableICache+0x48>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800150c:	f3bf 8f4f 	dsb	sy
}
 8001510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001512:	f3bf 8f6f 	isb	sy
}
 8001516:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SCB_EnableDCache+0x84>)
 8001530:	2200      	movs	r2, #0
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001536:	f3bf 8f4f 	dsb	sy
}
 800153a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <SCB_EnableDCache+0x84>)
 800153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001542:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	0b5b      	lsrs	r3, r3, #13
 8001548:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800154c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001556:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001560:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001566:	4911      	ldr	r1, [pc, #68]	; (80015ac <SCB_EnableDCache+0x84>)
 8001568:	4313      	orrs	r3, r2
 800156a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	60ba      	str	r2, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1ef      	bne.n	8001558 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e5a      	subs	r2, r3, #1
 800157c:	60fa      	str	r2, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e5      	bne.n	800154e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001582:	f3bf 8f4f 	dsb	sy
}
 8001586:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <SCB_EnableDCache+0x84>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <SCB_EnableDCache+0x84>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <ProcessCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ProcessCommand(uint8_t *command)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 80015b8:	4929      	ldr	r1, [pc, #164]	; (8001660 <ProcessCommand+0xb0>)
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7fe fe28 	bl	8000210 <strcmp>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10b      	bne.n	80015de <ProcessCommand+0x2e>
 80015c6:	4927      	ldr	r1, [pc, #156]	; (8001664 <ProcessCommand+0xb4>)
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <ProcessCommand+0xb8>)
 80015ca:	f00e fb91 	bl	800fcf0 <siprintf>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	2364      	movs	r3, #100	; 0x64
 80015d4:	4924      	ldr	r1, [pc, #144]	; (8001668 <ProcessCommand+0xb8>)
 80015d6:	4825      	ldr	r0, [pc, #148]	; (800166c <ProcessCommand+0xbc>)
 80015d8:	f004 fab2 	bl	8005b40 <HAL_UART_Transmit>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
    else if (strcmp((char*)command, "infer") == 0) {InferenceCommand();}
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
}
 80015dc:	e03c      	b.n	8001658 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "sensor") == 0) {SensorCommand();}
 80015de:	4924      	ldr	r1, [pc, #144]	; (8001670 <ProcessCommand+0xc0>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe fe15 	bl	8000210 <strcmp>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <ProcessCommand+0x42>
 80015ec:	f000 f84c 	bl	8001688 <SensorCommand>
}
 80015f0:	e032      	b.n	8001658 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
 80015f2:	4920      	ldr	r1, [pc, #128]	; (8001674 <ProcessCommand+0xc4>)
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe fe0b 	bl	8000210 <strcmp>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <ProcessCommand+0x56>
 8001600:	f000 f94a 	bl	8001898 <SetSensorCommand>
}
 8001604:	e028      	b.n	8001658 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
 8001606:	491c      	ldr	r1, [pc, #112]	; (8001678 <ProcessCommand+0xc8>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe fe01 	bl	8000210 <strcmp>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <ProcessCommand+0x6a>
 8001614:	f000 fba6 	bl	8001d64 <CalibrationCommand>
}
 8001618:	e01e      	b.n	8001658 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 800161a:	4918      	ldr	r1, [pc, #96]	; (800167c <ProcessCommand+0xcc>)
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fdf7 	bl	8000210 <strcmp>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <ProcessCommand+0x7e>
 8001628:	f000 faa8 	bl	8001b7c <AvgStdCommand>
}
 800162c:	e014      	b.n	8001658 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "infer") == 0) {InferenceCommand();}
 800162e:	4914      	ldr	r1, [pc, #80]	; (8001680 <ProcessCommand+0xd0>)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7fe fded 	bl	8000210 <strcmp>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <ProcessCommand+0x92>
 800163c:	f000 fb9c 	bl	8001d78 <InferenceCommand>
}
 8001640:	e00a      	b.n	8001658 <ProcessCommand+0xa8>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 8001642:	4910      	ldr	r1, [pc, #64]	; (8001684 <ProcessCommand+0xd4>)
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <ProcessCommand+0xb8>)
 8001646:	f00e fb53 	bl	800fcf0 <siprintf>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	4905      	ldr	r1, [pc, #20]	; (8001668 <ProcessCommand+0xb8>)
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <ProcessCommand+0xbc>)
 8001654:	f004 fa74 	bl	8005b40 <HAL_UART_Transmit>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	08013708 	.word	0x08013708
 8001664:	08013710 	.word	0x08013710
 8001668:	20008c7c 	.word	0x20008c7c
 800166c:	20008bf4 	.word	0x20008bf4
 8001670:	08013718 	.word	0x08013718
 8001674:	08013720 	.word	0x08013720
 8001678:	0801372c 	.word	0x0801372c
 800167c:	08013734 	.word	0x08013734
 8001680:	08013738 	.word	0x08013738
 8001684:	08013740 	.word	0x08013740

08001688 <SensorCommand>:

void SensorCommand()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

	ResetAllDevices();
 800168e:	f001 f89b 	bl	80027c8 <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001692:	4973      	ldr	r1, [pc, #460]	; (8001860 <SensorCommand+0x1d8>)
 8001694:	4873      	ldr	r0, [pc, #460]	; (8001864 <SensorCommand+0x1dc>)
 8001696:	f00e fb2b 	bl	800fcf0 <siprintf>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	2364      	movs	r3, #100	; 0x64
 80016a0:	4970      	ldr	r1, [pc, #448]	; (8001864 <SensorCommand+0x1dc>)
 80016a2:	4871      	ldr	r0, [pc, #452]	; (8001868 <SensorCommand+0x1e0>)
 80016a4:	f004 fa4c 	bl	8005b40 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for(int count =0; count < NUM_READINGS; count++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	e0ca      	b.n	8001844 <SensorCommand+0x1bc>
    	uint8_t sensorCount = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 80016b2:	f001 f983 	bl	80029bc <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e09d      	b.n	80017fa <SensorCommand+0x172>
			uint8_t q = i / 12;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4a6a      	ldr	r2, [pc, #424]	; (800186c <SensorCommand+0x1e4>)
 80016c2:	fb82 1203 	smull	r1, r2, r2, r3
 80016c6:	1052      	asrs	r2, r2, #1
 80016c8:	17db      	asrs	r3, r3, #31
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	71fb      	strb	r3, [r7, #7]
			uint8_t r = i % 12;
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4b66      	ldr	r3, [pc, #408]	; (800186c <SensorCommand+0x1e4>)
 80016d2:	fb83 1302 	smull	r1, r3, r3, r2
 80016d6:	1059      	asrs	r1, r3, #1
 80016d8:	17d3      	asrs	r3, r2, #31
 80016da:	1ac9      	subs	r1, r1, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	440b      	add	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	1ad1      	subs	r1, r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	71bb      	strb	r3, [r7, #6]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	79ba      	ldrb	r2, [r7, #6]
 80016f2:	2a07      	cmp	r2, #7
 80016f4:	bf8c      	ite	hi
 80016f6:	2201      	movhi	r2, #1
 80016f8:	2200      	movls	r2, #0
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4413      	add	r3, r2
 80016fe:	717b      	strb	r3, [r7, #5]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d903      	bls.n	800170e <SensorCommand+0x86>
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	3b08      	subs	r3, #8
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e000      	b.n	8001710 <SensorCommand+0x88>
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	713b      	strb	r3, [r7, #4]
			ResetDevicesExcept(active_device);
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	4618      	mov	r0, r3
 8001716:	f001 f883 	bl	8002820 <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 800171a:	793a      	ldrb	r2, [r7, #4]
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f001 f8af 	bl	8002884 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <SensorCommand+0x1e8>)
 8001732:	4413      	add	r3, r2
 8001734:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <SensorCommand+0x1ec>)
 8001736:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001738:	4b4e      	ldr	r3, [pc, #312]	; (8001874 <SensorCommand+0x1ec>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	494e      	ldr	r1, [pc, #312]	; (8001878 <SensorCommand+0x1f0>)
 800173e:	4618      	mov	r0, r3
 8001740:	f006 ff9f 	bl	8008682 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <SensorCommand+0x1f0>)
 8001746:	7e1b      	ldrb	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d144      	bne.n	80017d6 <SensorCommand+0x14e>
			  if (RangingData.RangeMilliMeter < 80) {
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <SensorCommand+0x1f0>)
 800174e:	891b      	ldrh	r3, [r3, #8]
 8001750:	2b4f      	cmp	r3, #79	; 0x4f
 8001752:	d84f      	bhi.n	80017f4 <SensorCommand+0x16c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4a47      	ldr	r2, [pc, #284]	; (800187c <SensorCommand+0x1f4>)
 8001760:	4413      	add	r3, r2
 8001762:	4a45      	ldr	r2, [pc, #276]	; (8001878 <SensorCommand+0x1f0>)
 8001764:	8912      	ldrh	r2, [r2, #8]
 8001766:	ee07 2a90 	vmov	s15, r2
 800176a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe62 	bl	800143c <Kalman_Estimate>
 8001778:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f7fe ff13 	bl	80005a8 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	493e      	ldr	r1, [pc, #248]	; (8001880 <SensorCommand+0x1f8>)
 8001788:	4836      	ldr	r0, [pc, #216]	; (8001864 <SensorCommand+0x1dc>)
 800178a:	f00e fab1 	bl	800fcf0 <siprintf>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001796:	4933      	ldr	r1, [pc, #204]	; (8001864 <SensorCommand+0x1dc>)
 8001798:	4833      	ldr	r0, [pc, #204]	; (8001868 <SensorCommand+0x1e0>)
 800179a:	f004 f9d1 	bl	8005b40 <HAL_UART_Transmit>
				  sensorValues[i][readingCount[i]] = filteredValue;
 800179e:	4a39      	ldr	r2, [pc, #228]	; (8001884 <SensorCommand+0x1fc>)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	4938      	ldr	r1, [pc, #224]	; (8001888 <SensorCommand+0x200>)
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017ae:	fb00 f202 	mul.w	r2, r0, r2
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	601a      	str	r2, [r3, #0]
				  readingCount[i]++;
 80017bc:	4a31      	ldr	r2, [pc, #196]	; (8001884 <SensorCommand+0x1fc>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	492f      	ldr	r1, [pc, #188]	; (8001884 <SensorCommand+0x1fc>)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 80017ce:	7efb      	ldrb	r3, [r7, #27]
 80017d0:	3301      	adds	r3, #1
 80017d2:	76fb      	strb	r3, [r7, #27]
 80017d4:	e00e      	b.n	80017f4 <SensorCommand+0x16c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <SensorCommand+0x1f0>)
 80017d8:	7e1b      	ldrb	r3, [r3, #24]
 80017da:	461a      	mov	r2, r3
 80017dc:	492b      	ldr	r1, [pc, #172]	; (800188c <SensorCommand+0x204>)
 80017de:	4821      	ldr	r0, [pc, #132]	; (8001864 <SensorCommand+0x1dc>)
 80017e0:	f00e fa86 	bl	800fcf0 <siprintf>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ec:	491d      	ldr	r1, [pc, #116]	; (8001864 <SensorCommand+0x1dc>)
 80017ee:	481e      	ldr	r0, [pc, #120]	; (8001868 <SensorCommand+0x1e0>)
 80017f0:	f004 f9a6 	bl	8005b40 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b17      	cmp	r3, #23
 80017fe:	f77f af5e 	ble.w	80016be <SensorCommand+0x36>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		endTime = HAL_GetTick();
 8001802:	f001 f8db 	bl	80029bc <HAL_GetTick>
 8001806:	60f8      	str	r0, [r7, #12]
		diffTime = endTime - startTime;
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", diffTime), 100);
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	491f      	ldr	r1, [pc, #124]	; (8001890 <SensorCommand+0x208>)
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <SensorCommand+0x1dc>)
 8001816:	f00e fa6b 	bl	800fcf0 <siprintf>
 800181a:	4603      	mov	r3, r0
 800181c:	b29a      	uxth	r2, r3
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	4910      	ldr	r1, [pc, #64]	; (8001864 <SensorCommand+0x1dc>)
 8001822:	4811      	ldr	r0, [pc, #68]	; (8001868 <SensorCommand+0x1e0>)
 8001824:	f004 f98c 	bl	8005b40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001828:	491a      	ldr	r1, [pc, #104]	; (8001894 <SensorCommand+0x20c>)
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <SensorCommand+0x1dc>)
 800182c:	f00e fa60 	bl	800fcf0 <siprintf>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	2364      	movs	r3, #100	; 0x64
 8001836:	490b      	ldr	r1, [pc, #44]	; (8001864 <SensorCommand+0x1dc>)
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <SensorCommand+0x1e0>)
 800183a:	f004 f981 	bl	8005b40 <HAL_UART_Transmit>
    for(int count =0; count < NUM_READINGS; count++){
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800184a:	f6ff af30 	blt.w	80016ae <SensorCommand+0x26>

    }
    TransmitStats();
 800184e:	f7ff fd23 	bl	8001298 <TransmitStats>
    ResetSensorData();
 8001852:	f7ff fd6d 	bl	8001330 <ResetSensorData>
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08013760 	.word	0x08013760
 8001864:	20008c7c 	.word	0x20008c7c
 8001868:	20008bf4 	.word	0x20008bf4
 800186c:	2aaaaaab 	.word	0x2aaaaaab
 8001870:	20008d1c 	.word	0x20008d1c
 8001874:	2000b29c 	.word	0x2000b29c
 8001878:	20008d00 	.word	0x20008d00
 800187c:	200089ec 	.word	0x200089ec
 8001880:	08013770 	.word	0x08013770
 8001884:	20008938 	.word	0x20008938
 8001888:	200017f8 	.word	0x200017f8
 800188c:	08013778 	.word	0x08013778
 8001890:	0801377c 	.word	0x0801377c
 8001894:	08013784 	.word	0x08013784

08001898 <SetSensorCommand>:

void SetSensorCommand(){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 800189e:	49a2      	ldr	r1, [pc, #648]	; (8001b28 <SetSensorCommand+0x290>)
 80018a0:	48a2      	ldr	r0, [pc, #648]	; (8001b2c <SetSensorCommand+0x294>)
 80018a2:	f00e fa25 	bl	800fcf0 <siprintf>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	499f      	ldr	r1, [pc, #636]	; (8001b2c <SetSensorCommand+0x294>)
 80018ae:	48a0      	ldr	r0, [pc, #640]	; (8001b30 <SetSensorCommand+0x298>)
 80018b0:	f004 f946 	bl	8005b40 <HAL_UART_Transmit>

	ResetAllDevices();
 80018b4:	f000 ff88 	bl	80027c8 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	e12b      	b.n	8001b16 <SetSensorCommand+0x27e>
  	    uint8_t q = i / 12;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a9c      	ldr	r2, [pc, #624]	; (8001b34 <SetSensorCommand+0x29c>)
 80018c2:	fb82 1203 	smull	r1, r2, r2, r3
 80018c6:	1052      	asrs	r2, r2, #1
 80018c8:	17db      	asrs	r3, r3, #31
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4b98      	ldr	r3, [pc, #608]	; (8001b34 <SetSensorCommand+0x29c>)
 80018d2:	fb83 1302 	smull	r1, r3, r3, r2
 80018d6:	1059      	asrs	r1, r3, #1
 80018d8:	17d3      	asrs	r3, r2, #31
 80018da:	1ac9      	subs	r1, r1, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	440b      	add	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	1ad1      	subs	r1, r2, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	78ba      	ldrb	r2, [r7, #2]
 80018f2:	2a07      	cmp	r2, #7
 80018f4:	bf8c      	ite	hi
 80018f6:	2201      	movhi	r2, #1
 80018f8:	2200      	movls	r2, #0
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	4413      	add	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001900:	78bb      	ldrb	r3, [r7, #2]
 8001902:	2b07      	cmp	r3, #7
 8001904:	d903      	bls.n	800190e <SetSensorCommand+0x76>
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	3b08      	subs	r3, #8
 800190a:	b2db      	uxtb	r3, r3
 800190c:	e000      	b.n	8001910 <SetSensorCommand+0x78>
 800190e:	78bb      	ldrb	r3, [r7, #2]
 8001910:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8001912:	787b      	ldrb	r3, [r7, #1]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 ff83 	bl	8002820 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 800191a:	783a      	ldrb	r2, [r7, #0]
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 ffaf 	bl	8002884 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	4a81      	ldr	r2, [pc, #516]	; (8001b38 <SetSensorCommand+0x2a0>)
 8001932:	4413      	add	r3, r2
 8001934:	4a81      	ldr	r2, [pc, #516]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001936:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <SetSensorCommand+0x2a4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a80      	ldr	r2, [pc, #512]	; (8001b40 <SetSensorCommand+0x2a8>)
 800193e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8001942:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2252      	movs	r2, #82	; 0x52
 8001948:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 800194c:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <SetSensorCommand+0x2a4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f005 fccf 	bl	80072f4 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8001956:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f005 f9e4 	bl	8006d28 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8001960:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fb43 	bl	8006ff0 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800196a:	4b74      	ldr	r3, [pc, #464]	; (8001b3c <SetSensorCommand+0x2a4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fd5d 	bl	8007430 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 8001976:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	4a72      	ldr	r2, [pc, #456]	; (8001b44 <SetSensorCommand+0x2ac>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <SetSensorCommand+0x2b0>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	f006 fe62 	bl	8008654 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	4a6d      	ldr	r2, [pc, #436]	; (8001b4c <SetSensorCommand+0x2b4>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	7819      	ldrb	r1, [r3, #0]
 800199c:	4a6c      	ldr	r2, [pc, #432]	; (8001b50 <SetSensorCommand+0x2b8>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	f005 ffbf 	bl	8007928 <VL53L0X_SetRefCalibration>


  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80019aa:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <SetSensorCommand+0x2a4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 ffd0 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80019b8:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <SetSensorCommand+0x2a4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 ffc9 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <SetSensorCommand+0x2a4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f641 1299 	movw	r2, #6553	; 0x1999
 80019ce:	2101      	movs	r1, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 f871 	bl	8007ab8 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80019d6:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <SetSensorCommand+0x2a4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f006 f869 	bl	8007ab8 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80019e6:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <SetSensorCommand+0x2a4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f005 fd7c 	bl	80074ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <SetSensorCommand+0x2a4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2212      	movs	r2, #18
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fd9b 	bl	8007538 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <SetSensorCommand+0x2a4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	220e      	movs	r2, #14
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fd94 	bl	8007538 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기�??
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <SetSensorCommand+0x2bc>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <SetSensorCommand+0x2c0>)
 8001a20:	edd2 7a00 	vldr	s15, [r2]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <SetSensorCommand+0x2c4>)
 8001a26:	ed92 7a00 	vldr	s14, [r2]
 8001a2a:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <SetSensorCommand+0x2c8>)
 8001a2c:	edd2 6a00 	vldr	s13, [r2]
 8001a30:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8001b64 <SetSensorCommand+0x2cc>
 8001a34:	eeb0 1a66 	vmov.f32	s2, s13
 8001a38:	eef0 0a47 	vmov.f32	s1, s14
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fcdd 	bl	8001400 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4947      	ldr	r1, [pc, #284]	; (8001b68 <SetSensorCommand+0x2d0>)
 8001a4a:	4838      	ldr	r0, [pc, #224]	; (8001b2c <SetSensorCommand+0x294>)
 8001a4c:	f00e f950 	bl	800fcf0 <siprintf>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	4935      	ldr	r1, [pc, #212]	; (8001b2c <SetSensorCommand+0x294>)
 8001a58:	4835      	ldr	r0, [pc, #212]	; (8001b30 <SetSensorCommand+0x298>)
 8001a5a:	f004 f871 	bl	8005b40 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 8001a5e:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <SetSensorCommand+0x2ac>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4940      	ldr	r1, [pc, #256]	; (8001b6c <SetSensorCommand+0x2d4>)
 8001a6a:	4830      	ldr	r0, [pc, #192]	; (8001b2c <SetSensorCommand+0x294>)
 8001a6c:	f00e f940 	bl	800fcf0 <siprintf>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	492d      	ldr	r1, [pc, #180]	; (8001b2c <SetSensorCommand+0x294>)
 8001a78:	482d      	ldr	r0, [pc, #180]	; (8001b30 <SetSensorCommand+0x298>)
 8001a7a:	f004 f861 	bl	8005b40 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 8001a7e:	4a32      	ldr	r2, [pc, #200]	; (8001b48 <SetSensorCommand+0x2b0>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4939      	ldr	r1, [pc, #228]	; (8001b70 <SetSensorCommand+0x2d8>)
 8001a8a:	4828      	ldr	r0, [pc, #160]	; (8001b2c <SetSensorCommand+0x294>)
 8001a8c:	f00e f930 	bl	800fcf0 <siprintf>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <SetSensorCommand+0x294>)
 8001a98:	4825      	ldr	r0, [pc, #148]	; (8001b30 <SetSensorCommand+0x298>)
 8001a9a:	f004 f851 	bl	8005b40 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 8001a9e:	4a2b      	ldr	r2, [pc, #172]	; (8001b4c <SetSensorCommand+0x2b4>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4931      	ldr	r1, [pc, #196]	; (8001b70 <SetSensorCommand+0x2d8>)
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <SetSensorCommand+0x294>)
 8001aac:	f00e f920 	bl	800fcf0 <siprintf>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	491d      	ldr	r1, [pc, #116]	; (8001b2c <SetSensorCommand+0x294>)
 8001ab8:	481d      	ldr	r0, [pc, #116]	; (8001b30 <SetSensorCommand+0x298>)
 8001aba:	f004 f841 	bl	8005b40 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <SetSensorCommand+0x2b8>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	492a      	ldr	r1, [pc, #168]	; (8001b74 <SetSensorCommand+0x2dc>)
 8001aca:	4818      	ldr	r0, [pc, #96]	; (8001b2c <SetSensorCommand+0x294>)
 8001acc:	f00e f910 	bl	800fcf0 <siprintf>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	4915      	ldr	r1, [pc, #84]	; (8001b2c <SetSensorCommand+0x294>)
 8001ad8:	4815      	ldr	r0, [pc, #84]	; (8001b30 <SetSensorCommand+0x298>)
 8001ada:	f004 f831 	bl	8005b40 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <SetSensorCommand+0x29c>)
 8001ae2:	fb83 2301 	smull	r2, r3, r3, r1
 8001ae6:	105a      	asrs	r2, r3, #1
 8001ae8:	17cb      	asrs	r3, r1, #31
 8001aea:	1ad2      	subs	r2, r2, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	1aca      	subs	r2, r1, r3
 8001af6:	2a0b      	cmp	r2, #11
 8001af8:	d10a      	bne.n	8001b10 <SetSensorCommand+0x278>
 8001afa:	491f      	ldr	r1, [pc, #124]	; (8001b78 <SetSensorCommand+0x2e0>)
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <SetSensorCommand+0x294>)
 8001afe:	f00e f8f7 	bl	800fcf0 <siprintf>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	2364      	movs	r3, #100	; 0x64
 8001b08:	4908      	ldr	r1, [pc, #32]	; (8001b2c <SetSensorCommand+0x294>)
 8001b0a:	4809      	ldr	r0, [pc, #36]	; (8001b30 <SetSensorCommand+0x298>)
 8001b0c:	f004 f818 	bl	8005b40 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b17      	cmp	r3, #23
 8001b1a:	f77f aed0 	ble.w	80018be <SetSensorCommand+0x26>

  	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	08013788 	.word	0x08013788
 8001b2c:	20008c7c 	.word	0x20008c7c
 8001b30:	20008bf4 	.word	0x20008bf4
 8001b34:	2aaaaaab 	.word	0x2aaaaaab
 8001b38:	20008d1c 	.word	0x20008d1c
 8001b3c:	2000b29c 	.word	0x2000b29c
 8001b40:	20008998 	.word	0x20008998
 8001b44:	20000010 	.word	0x20000010
 8001b48:	20000070 	.word	0x20000070
 8001b4c:	20000088 	.word	0x20000088
 8001b50:	200000a0 	.word	0x200000a0
 8001b54:	200089ec 	.word	0x200089ec
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	20000008 	.word	0x20000008
 8001b64:	00000000 	.word	0x00000000
 8001b68:	08013798 	.word	0x08013798
 8001b6c:	080137a0 	.word	0x080137a0
 8001b70:	080137a8 	.word	0x080137a8
 8001b74:	080137b0 	.word	0x080137b0
 8001b78:	080137b8 	.word	0x080137b8

08001b7c <AvgStdCommand>:

void AvgStdCommand(){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001b82:	496f      	ldr	r1, [pc, #444]	; (8001d40 <AvgStdCommand+0x1c4>)
 8001b84:	486f      	ldr	r0, [pc, #444]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001b86:	f00e f8b3 	bl	800fcf0 <siprintf>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	496c      	ldr	r1, [pc, #432]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001b94:	486c      	ldr	r0, [pc, #432]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001b96:	f003 ffd3 	bl	8005b40 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e02e      	b.n	8001bfe <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	; (8001d4c <AvgStdCommand+0x1d0>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcfc 	bl	80005a8 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4966      	ldr	r1, [pc, #408]	; (8001d50 <AvgStdCommand+0x1d4>)
 8001bb6:	4863      	ldr	r0, [pc, #396]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001bb8:	f00e f89a 	bl	800fcf0 <siprintf>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc4:	495f      	ldr	r1, [pc, #380]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001bc6:	4860      	ldr	r0, [pc, #384]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001bc8:	f003 ffba 	bl	8005b40 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	425a      	negs	r2, r3
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	f002 0207 	and.w	r2, r2, #7
 8001bd8:	bf58      	it	pl
 8001bda:	4253      	negpl	r3, r2
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	d10b      	bne.n	8001bf8 <AvgStdCommand+0x7c>
 8001be0:	495c      	ldr	r1, [pc, #368]	; (8001d54 <AvgStdCommand+0x1d8>)
 8001be2:	4858      	ldr	r0, [pc, #352]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001be4:	f00e f884 	bl	800fcf0 <siprintf>
 8001be8:	4603      	mov	r3, r0
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf0:	4954      	ldr	r1, [pc, #336]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001bf2:	4855      	ldr	r0, [pc, #340]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001bf4:	f003 ffa4 	bl	8005b40 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b17      	cmp	r3, #23
 8001c02:	d9cd      	bls.n	8001ba0 <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	e02e      	b.n	8001c68 <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001c0a:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <AvgStdCommand+0x1dc>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcc7 	bl	80005a8 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	494c      	ldr	r1, [pc, #304]	; (8001d50 <AvgStdCommand+0x1d4>)
 8001c20:	4848      	ldr	r0, [pc, #288]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001c22:	f00e f865 	bl	800fcf0 <siprintf>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	4945      	ldr	r1, [pc, #276]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001c30:	4845      	ldr	r0, [pc, #276]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001c32:	f003 ff85 	bl	8005b40 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	425a      	negs	r2, r3
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	f002 0207 	and.w	r2, r2, #7
 8001c42:	bf58      	it	pl
 8001c44:	4253      	negpl	r3, r2
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d10b      	bne.n	8001c62 <AvgStdCommand+0xe6>
 8001c4a:	4942      	ldr	r1, [pc, #264]	; (8001d54 <AvgStdCommand+0x1d8>)
 8001c4c:	483d      	ldr	r0, [pc, #244]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001c4e:	f00e f84f 	bl	800fcf0 <siprintf>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	493a      	ldr	r1, [pc, #232]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001c5c:	483a      	ldr	r0, [pc, #232]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001c5e:	f003 ff6f 	bl	8005b40 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b17      	cmp	r3, #23
 8001c6c:	d9cd      	bls.n	8001c0a <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <AvgStdCommand+0x1e0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc98 	bl	80005a8 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4934      	ldr	r1, [pc, #208]	; (8001d50 <AvgStdCommand+0x1d4>)
 8001c7e:	4831      	ldr	r0, [pc, #196]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001c80:	f00e f836 	bl	800fcf0 <siprintf>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8c:	492d      	ldr	r1, [pc, #180]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001c8e:	482e      	ldr	r0, [pc, #184]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001c90:	f003 ff56 	bl	8005b40 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <AvgStdCommand+0x1e0>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc85 	bl	80005a8 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	492b      	ldr	r1, [pc, #172]	; (8001d50 <AvgStdCommand+0x1d4>)
 8001ca4:	4827      	ldr	r0, [pc, #156]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001ca6:	f00e f823 	bl	800fcf0 <siprintf>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	4924      	ldr	r1, [pc, #144]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001cb4:	4824      	ldr	r0, [pc, #144]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001cb6:	f003 ff43 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001cba:	4926      	ldr	r1, [pc, #152]	; (8001d54 <AvgStdCommand+0x1d8>)
 8001cbc:	4821      	ldr	r0, [pc, #132]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001cbe:	f00e f817 	bl	800fcf0 <siprintf>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cca:	491e      	ldr	r1, [pc, #120]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001ccc:	481e      	ldr	r0, [pc, #120]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001cce:	f003 ff37 	bl	8005b40 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <AvgStdCommand+0x1e4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc66 	bl	80005a8 <__aeabi_f2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	491b      	ldr	r1, [pc, #108]	; (8001d50 <AvgStdCommand+0x1d4>)
 8001ce2:	4818      	ldr	r0, [pc, #96]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001ce4:	f00e f804 	bl	800fcf0 <siprintf>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf0:	4914      	ldr	r1, [pc, #80]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001cf2:	4815      	ldr	r0, [pc, #84]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001cf4:	f003 ff24 	bl	8005b40 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <AvgStdCommand+0x1e4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc53 	bl	80005a8 <__aeabi_f2d>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4912      	ldr	r1, [pc, #72]	; (8001d50 <AvgStdCommand+0x1d4>)
 8001d08:	480e      	ldr	r0, [pc, #56]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001d0a:	f00d fff1 	bl	800fcf0 <siprintf>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	490b      	ldr	r1, [pc, #44]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001d1a:	f003 ff11 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001d1e:	490d      	ldr	r1, [pc, #52]	; (8001d54 <AvgStdCommand+0x1d8>)
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001d22:	f00d ffe5 	bl	800fcf0 <siprintf>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	4905      	ldr	r1, [pc, #20]	; (8001d44 <AvgStdCommand+0x1c8>)
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <AvgStdCommand+0x1cc>)
 8001d32:	f003 ff05 	bl	8005b40 <HAL_UART_Transmit>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	080137bc 	.word	0x080137bc
 8001d44:	20008c7c 	.word	0x20008c7c
 8001d48:	20008bf4 	.word	0x20008bf4
 8001d4c:	200000c8 	.word	0x200000c8
 8001d50:	080137d0 	.word	0x080137d0
 8001d54:	08013784 	.word	0x08013784
 8001d58:	20000128 	.word	0x20000128
 8001d5c:	20000188 	.word	0x20000188
 8001d60:	20000190 	.word	0x20000190

08001d64 <CalibrationCommand>:

void CalibrationCommand(){
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	0000      	movs	r0, r0
 8001d74:	0000      	movs	r0, r0
	...

08001d78 <InferenceCommand>:


void InferenceCommand()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
	ResetAllDevices();
 8001d7e:	f000 fd23 	bl	80027c8 <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001d82:	49b1      	ldr	r1, [pc, #708]	; (8002048 <InferenceCommand+0x2d0>)
 8001d84:	48b1      	ldr	r0, [pc, #708]	; (800204c <InferenceCommand+0x2d4>)
 8001d86:	f00d ffb3 	bl	800fcf0 <siprintf>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	49ae      	ldr	r1, [pc, #696]	; (800204c <InferenceCommand+0x2d4>)
 8001d92:	48af      	ldr	r0, [pc, #700]	; (8002050 <InferenceCommand+0x2d8>)
 8001d94:	f003 fed4 	bl	8005b40 <HAL_UART_Transmit>

    for (int count =0; count <50000;count ++){
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	e13e      	b.n	800201c <InferenceCommand+0x2a4>
    	uint8_t tofCount =0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e08b      	b.n	8001ec0 <InferenceCommand+0x148>
    	    uint8_t q = i / 12;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4aaa      	ldr	r2, [pc, #680]	; (8002054 <InferenceCommand+0x2dc>)
 8001dac:	fb82 1203 	smull	r1, r2, r2, r3
 8001db0:	1052      	asrs	r2, r2, #1
 8001db2:	17db      	asrs	r3, r3, #31
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	72fb      	strb	r3, [r7, #11]
    	    uint8_t r = i % 12;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4ba6      	ldr	r3, [pc, #664]	; (8002054 <InferenceCommand+0x2dc>)
 8001dbc:	fb83 1302 	smull	r1, r3, r3, r2
 8001dc0:	1059      	asrs	r1, r3, #1
 8001dc2:	17d3      	asrs	r3, r2, #31
 8001dc4:	1ac9      	subs	r1, r1, r3
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	440b      	add	r3, r1
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	1ad1      	subs	r1, r2, r3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	72bb      	strb	r3, [r7, #10]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	7aba      	ldrb	r2, [r7, #10]
 8001ddc:	2a07      	cmp	r2, #7
 8001dde:	bf8c      	ite	hi
 8001de0:	2201      	movhi	r2, #1
 8001de2:	2200      	movls	r2, #0
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4413      	add	r3, r2
 8001de8:	727b      	strb	r3, [r7, #9]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001dea:	7abb      	ldrb	r3, [r7, #10]
 8001dec:	2b07      	cmp	r3, #7
 8001dee:	d903      	bls.n	8001df8 <InferenceCommand+0x80>
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	3b08      	subs	r3, #8
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e000      	b.n	8001dfa <InferenceCommand+0x82>
 8001df8:	7abb      	ldrb	r3, [r7, #10]
 8001dfa:	723b      	strb	r3, [r7, #8]
    	    ResetDevicesExcept(active_device);
 8001dfc:	7a7b      	ldrb	r3, [r7, #9]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fd0e 	bl	8002820 <ResetDevicesExcept>
            setActiveTcaChannel(active_device, channel);
 8001e04:	7a3a      	ldrb	r2, [r7, #8]
 8001e06:	7a7b      	ldrb	r3, [r7, #9]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fd3a 	bl	8002884 <setActiveTcaChannel>
            Dev = &vl53l0x_s[i];
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	4a8f      	ldr	r2, [pc, #572]	; (8002058 <InferenceCommand+0x2e0>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a8f      	ldr	r2, [pc, #572]	; (800205c <InferenceCommand+0x2e4>)
 8001e20:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 us
 8001e22:	4b8e      	ldr	r3, [pc, #568]	; (800205c <InferenceCommand+0x2e4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	498e      	ldr	r1, [pc, #568]	; (8002060 <InferenceCommand+0x2e8>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f006 fc2a 	bl	8008682 <VL53L0X_PerformContinuousRangingMeasurement>

            if (RangingData.RangeStatus == 0) {
 8001e2e:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <InferenceCommand+0x2e8>)
 8001e30:	7e1b      	ldrb	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d135      	bne.n	8001ea2 <InferenceCommand+0x12a>
                float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4a88      	ldr	r2, [pc, #544]	; (8002064 <InferenceCommand+0x2ec>)
 8001e42:	4413      	add	r3, r2
 8001e44:	4a86      	ldr	r2, [pc, #536]	; (8002060 <InferenceCommand+0x2e8>)
 8001e46:	8912      	ldrh	r2, [r2, #8]
 8001e48:	ee07 2a90 	vmov	s15, r2
 8001e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e50:	eeb0 0a67 	vmov.f32	s0, s15
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff faf1 	bl	800143c <Kalman_Estimate>
 8001e5a:	ed87 0a01 	vstr	s0, [r7, #4]
                in_data[i]=filteredValue;
 8001e5e:	4a82      	ldr	r2, [pc, #520]	; (8002068 <InferenceCommand+0x2f0>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	601a      	str	r2, [r3, #0]
                //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", in_data[i]), 1000);
                in_data[i]= (filteredValue-Xmean[i])/Xstd[i];
 8001e6a:	4a80      	ldr	r2, [pc, #512]	; (800206c <InferenceCommand+0x2f4>)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e7e:	4a7c      	ldr	r2, [pc, #496]	; (8002070 <InferenceCommand+0x2f8>)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	ed93 7a00 	vldr	s14, [r3]
 8001e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8e:	4a76      	ldr	r2, [pc, #472]	; (8002068 <InferenceCommand+0x2f0>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001e9a:	7efb      	ldrb	r3, [r7, #27]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	76fb      	strb	r3, [r7, #27]
 8001ea0:	e00b      	b.n	8001eba <InferenceCommand+0x142>
            }else{
               HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "99 "), 1000);
 8001ea2:	4974      	ldr	r1, [pc, #464]	; (8002074 <InferenceCommand+0x2fc>)
 8001ea4:	4869      	ldr	r0, [pc, #420]	; (800204c <InferenceCommand+0x2d4>)
 8001ea6:	f00d ff23 	bl	800fcf0 <siprintf>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	4966      	ldr	r1, [pc, #408]	; (800204c <InferenceCommand+0x2d4>)
 8001eb4:	4866      	ldr	r0, [pc, #408]	; (8002050 <InferenceCommand+0x2d8>)
 8001eb6:	f003 fe43 	bl	8005b40 <HAL_UART_Transmit>
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b17      	cmp	r3, #23
 8001ec4:	f77f af70 	ble.w	8001da8 <InferenceCommand+0x30>
            }
        }


		if(tofCount == NUM_SENSOR){
 8001ec8:	7efb      	ldrb	r3, [r7, #27]
 8001eca:	2b18      	cmp	r3, #24
 8001ecc:	f040 8098 	bne.w	8002000 <InferenceCommand+0x288>
			aiRun(in_data,out_data);
 8001ed0:	4969      	ldr	r1, [pc, #420]	; (8002078 <InferenceCommand+0x300>)
 8001ed2:	4865      	ldr	r0, [pc, #404]	; (8002068 <InferenceCommand+0x2f0>)
 8001ed4:	f7ff f8fe 	bl	80010d4 <aiRun>

			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 8001ed8:	4b67      	ldr	r3, [pc, #412]	; (8002078 <InferenceCommand+0x300>)
 8001eda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ede:	4b66      	ldr	r3, [pc, #408]	; (8002078 <InferenceCommand+0x300>)
 8001ee0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee8:	4b63      	ldr	r3, [pc, #396]	; (8002078 <InferenceCommand+0x300>)
 8001eea:	edd3 6a03 	vldr	s13, [r3, #12]
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <InferenceCommand+0x300>)
 8001ef0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efc:	edc7 7a03 	vstr	s15, [r7, #12]

			if(sqSum >= 0.7 && sqSum <= 1.3){
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7fe fb51 	bl	80005a8 <__aeabi_f2d>
 8001f06:	a34c      	add	r3, pc, #304	; (adr r3, 8002038 <InferenceCommand+0x2c0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fe2a 	bl	8000b64 <__aeabi_dcmpge>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <InferenceCommand+0x266>
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7fe fb46 	bl	80005a8 <__aeabi_f2d>
 8001f1c:	a348      	add	r3, pc, #288	; (adr r3, 8002040 <InferenceCommand+0x2c8>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fe15 	bl	8000b50 <__aeabi_dcmple>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d058      	beq.n	8001fde <InferenceCommand+0x266>
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8001f2c:	4b52      	ldr	r3, [pc, #328]	; (8002078 <InferenceCommand+0x300>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <InferenceCommand+0x304>)
 8001f3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <InferenceCommand+0x304>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f56:	4b49      	ldr	r3, [pc, #292]	; (800207c <InferenceCommand+0x304>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f60:	4b45      	ldr	r3, [pc, #276]	; (8002078 <InferenceCommand+0x300>)
 8001f62:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 8001f66:	4b44      	ldr	r3, [pc, #272]	; (8002078 <InferenceCommand+0x300>)
 8001f68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f74:	4b42      	ldr	r3, [pc, #264]	; (8002080 <InferenceCommand+0x308>)
 8001f76:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <InferenceCommand+0x308>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f90:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <InferenceCommand+0x308>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <InferenceCommand+0x300>)
 8001f9c:	edc3 7a01 	vstr	s15, [r3, #4]
				for(int k=0; k<4;k++){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e018      	b.n	8001fd8 <InferenceCommand+0x260>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8001fa6:	4a34      	ldr	r2, [pc, #208]	; (8002078 <InferenceCommand+0x300>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe faf9 	bl	80005a8 <__aeabi_f2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4932      	ldr	r1, [pc, #200]	; (8002084 <InferenceCommand+0x30c>)
 8001fbc:	4823      	ldr	r0, [pc, #140]	; (800204c <InferenceCommand+0x2d4>)
 8001fbe:	f00d fe97 	bl	800fcf0 <siprintf>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	4920      	ldr	r1, [pc, #128]	; (800204c <InferenceCommand+0x2d4>)
 8001fcc:	4820      	ldr	r0, [pc, #128]	; (8002050 <InferenceCommand+0x2d8>)
 8001fce:	f003 fdb7 	bl	8005b40 <HAL_UART_Transmit>
				for(int k=0; k<4;k++){
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	dde3      	ble.n	8001fa6 <InferenceCommand+0x22e>
				}
			}
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7fe fae2 	bl	80005a8 <__aeabi_f2d>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4926      	ldr	r1, [pc, #152]	; (8002084 <InferenceCommand+0x30c>)
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <InferenceCommand+0x2d4>)
 8001fec:	f00d fe80 	bl	800fcf0 <siprintf>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff8:	4914      	ldr	r1, [pc, #80]	; (800204c <InferenceCommand+0x2d4>)
 8001ffa:	4815      	ldr	r0, [pc, #84]	; (8002050 <InferenceCommand+0x2d8>)
 8001ffc:	f003 fda0 	bl	8005b40 <HAL_UART_Transmit>


		}
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002000:	4921      	ldr	r1, [pc, #132]	; (8002088 <InferenceCommand+0x310>)
 8002002:	4812      	ldr	r0, [pc, #72]	; (800204c <InferenceCommand+0x2d4>)
 8002004:	f00d fe74 	bl	800fcf0 <siprintf>
 8002008:	4603      	mov	r3, r0
 800200a:	b29a      	uxth	r2, r3
 800200c:	2364      	movs	r3, #100	; 0x64
 800200e:	490f      	ldr	r1, [pc, #60]	; (800204c <InferenceCommand+0x2d4>)
 8002010:	480f      	ldr	r0, [pc, #60]	; (8002050 <InferenceCommand+0x2d8>)
 8002012:	f003 fd95 	bl	8005b40 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002022:	4293      	cmp	r3, r2
 8002024:	f77f aebb 	ble.w	8001d9e <InferenceCommand+0x26>

    }

}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	f3af 8000 	nop.w
 8002038:	66666666 	.word	0x66666666
 800203c:	3fe66666 	.word	0x3fe66666
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	3ff4cccc 	.word	0x3ff4cccc
 8002048:	08013760 	.word	0x08013760
 800204c:	20008c7c 	.word	0x20008c7c
 8002050:	20008bf4 	.word	0x20008bf4
 8002054:	2aaaaaab 	.word	0x2aaaaaab
 8002058:	20008d1c 	.word	0x20008d1c
 800205c:	2000b29c 	.word	0x2000b29c
 8002060:	20008d00 	.word	0x20008d00
 8002064:	200089ec 	.word	0x200089ec
 8002068:	20001780 	.word	0x20001780
 800206c:	200000c8 	.word	0x200000c8
 8002070:	20000128 	.word	0x20000128
 8002074:	080137d8 	.word	0x080137d8
 8002078:	200017e0 	.word	0x200017e0
 800207c:	20000188 	.word	0x20000188
 8002080:	20000190 	.word	0x20000190
 8002084:	080137d0 	.word	0x080137d0
 8002088:	08013784 	.word	0x08013784

0800208c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002090:	f7ff fa24 	bl	80014dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002094:	f7ff fa48 	bl	8001528 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002098:	f000 fc3f 	bl	800291a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209c:	f000 f81e 	bl	80020dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a0:	f000 f8b6 	bl	8002210 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020a4:	f000 fac0 	bl	8002628 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80020a8:	f7ff f96a 	bl	8001380 <MX_I2C1_Init>
  MX_CRC_Init();
 80020ac:	f000 f88e 	bl	80021cc <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80020b0:	f000 f880 	bl	80021b4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  aiInit();
 80020b4:	f7fe ffce 	bl	8001054 <aiInit>
  startMsg();
 80020b8:	f000 fb1c 	bl	80026f4 <startMsg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	4905      	ldr	r1, [pc, #20]	; (80020d4 <main+0x48>)
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <main+0x4c>)
 80020c2:	f000 fae1 	bl	8002688 <ReceiveUartMessage>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f7      	bne.n	80020bc <main+0x30>
	  {
	      ProcessCommand(rxMsg);
 80020cc:	4801      	ldr	r0, [pc, #4]	; (80020d4 <main+0x48>)
 80020ce:	f7ff fa6f 	bl	80015b0 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80020d2:	e7f3      	b.n	80020bc <main+0x30>
 80020d4:	20008cbc 	.word	0x20008cbc
 80020d8:	20008bf4 	.word	0x20008bf4

080020dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b094      	sub	sp, #80	; 0x50
 80020e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	f107 0320 	add.w	r3, r7, #32
 80020e6:	2230      	movs	r2, #48	; 0x30
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00d f89e 	bl	800f22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <SystemClock_Config+0xd0>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <SystemClock_Config+0xd0>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <SystemClock_Config+0xd0>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <SystemClock_Config+0xd4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <SystemClock_Config+0xd4>)
 800211e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <SystemClock_Config+0xd4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002138:	2310      	movs	r3, #16
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213c:	2302      	movs	r3, #2
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002140:	2300      	movs	r3, #0
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002144:	2308      	movs	r3, #8
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002148:	23d8      	movs	r3, #216	; 0xd8
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800214c:	2302      	movs	r3, #2
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fbe9 	bl	8004930 <HAL_RCC_OscConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002164:	f000 f884 	bl	8002270 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002168:	f002 fb92 	bl	8004890 <HAL_PWREx_EnableOverDrive>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002172:	f000 f87d 	bl	8002270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002176:	230f      	movs	r3, #15
 8002178:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217a:	2302      	movs	r3, #2
 800217c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002182:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002186:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	2107      	movs	r1, #7
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fe6f 	bl	8004e78 <HAL_RCC_ClockConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80021a0:	f000 f866 	bl	8002270 <Error_Handler>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3750      	adds	r7, #80	; 0x50
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000

080021b4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	2025      	movs	r0, #37	; 0x25
 80021be:	f000 fd08 	bl	8002bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021c2:	2025      	movs	r0, #37	; 0x25
 80021c4:	f000 fd21 	bl	8002c0a <HAL_NVIC_EnableIRQ>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MX_CRC_Init+0x3c>)
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <MX_CRC_Init+0x40>)
 80021d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_CRC_Init+0x3c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_CRC_Init+0x3c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_CRC_Init+0x3c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_CRC_Init+0x3c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_CRC_Init+0x3c>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_CRC_Init+0x3c>)
 80021f6:	f000 fd23 	bl	8002c40 <HAL_CRC_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002200:	f000 f836 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20008bcc 	.word	0x20008bcc
 800220c:	40023000 	.word	0x40023000

08002210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <MX_GPIO_Init+0x5c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <MX_GPIO_Init+0x5c>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_GPIO_Init+0x5c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_GPIO_Init+0x5c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <MX_GPIO_Init+0x5c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_GPIO_Init+0x5c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_GPIO_Init+0x5c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <MX_GPIO_Init+0x5c>)
 800224c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_GPIO_Init+0x5c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]

}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8002278:	4905      	ldr	r1, [pc, #20]	; (8002290 <Error_Handler+0x20>)
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <Error_Handler+0x24>)
 800227c:	f00d fd38 	bl	800fcf0 <siprintf>
 8002280:	4603      	mov	r3, r0
 8002282:	b29a      	uxth	r2, r3
 8002284:	2364      	movs	r3, #100	; 0x64
 8002286:	4903      	ldr	r1, [pc, #12]	; (8002294 <Error_Handler+0x24>)
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <Error_Handler+0x28>)
 800228a:	f003 fc59 	bl	8005b40 <HAL_UART_Transmit>
 800228e:	e7f3      	b.n	8002278 <Error_Handler+0x8>
 8002290:	080137dc 	.word	0x080137dc
 8002294:	20008c7c 	.word	0x20008c7c
 8002298:	20008bf4 	.word	0x20008bf4

0800229c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_MspInit+0x44>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_MspInit+0x44>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_MspInit+0x44>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_MspInit+0x44>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_MspInit+0x44>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_MspInit+0x44>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_CRC_MspInit+0x38>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10b      	bne.n	800230e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_CRC_MspInit+0x3c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_CRC_MspInit+0x3c>)
 80022fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_CRC_MspInit+0x3c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023000 	.word	0x40023000
 8002320:	40023800 	.word	0x40023800

08002324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0aa      	sub	sp, #168	; 0xa8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	2284      	movs	r2, #132	; 0x84
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f00c ff71 	bl	800f22c <memset>
  if(hi2c->Instance==I2C1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_I2C_MspInit+0xd4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d14c      	bne.n	80023ee <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002358:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800235a:	2300      	movs	r3, #0
 800235c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	4618      	mov	r0, r3
 8002364:	f002 ffae 	bl	80052c4 <HAL_RCCEx_PeriphCLKConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800236e:	f7ff ff7f 	bl	8002270 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_I2C_MspInit+0xd8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_I2C_MspInit+0xd8>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <HAL_I2C_MspInit+0xd8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800238a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800238e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002392:	2312      	movs	r3, #18
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a4:	2304      	movs	r3, #4
 80023a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023ae:	4619      	mov	r1, r3
 80023b0:	4813      	ldr	r0, [pc, #76]	; (8002400 <HAL_I2C_MspInit+0xdc>)
 80023b2:	f000 fdcf 	bl	8002f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_I2C_MspInit+0xd8>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_I2C_MspInit+0xd8>)
 80023bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_I2C_MspInit+0xd8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	201f      	movs	r0, #31
 80023d4:	f000 fbfd 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023d8:	201f      	movs	r0, #31
 80023da:	f000 fc16 	bl	8002c0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2020      	movs	r0, #32
 80023e4:	f000 fbf5 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80023e8:	2020      	movs	r0, #32
 80023ea:	f000 fc0e 	bl	8002c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	37a8      	adds	r7, #168	; 0xa8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40005400 	.word	0x40005400
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020400 	.word	0x40020400

08002404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0ac      	sub	sp, #176	; 0xb0
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800241c:	f107 0318 	add.w	r3, r7, #24
 8002420:	2284      	movs	r2, #132	; 0x84
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f00c ff01 	bl	800f22c <memset>
  if(huart->Instance==USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d15c      	bne.n	80024ee <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002434:	2340      	movs	r3, #64	; 0x40
 8002436:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002438:	2300      	movs	r3, #0
 800243a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	4618      	mov	r0, r3
 8002442:	f002 ff3f 	bl	80052c4 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800244c:	f7ff ff10 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_UART_MspInit+0xf8>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_UART_MspInit+0xf8>)
 8002456:	f043 0310 	orr.w	r3, r3, #16
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_UART_MspInit+0xf8>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_UART_MspInit+0xf8>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_UART_MspInit+0xf8>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_UART_MspInit+0xf8>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_UART_MspInit+0xf8>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_UART_MspInit+0xf8>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6313      	str	r3, [r2, #48]	; 0x30
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_UART_MspInit+0xf8>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b0:	2307      	movs	r3, #7
 80024b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4810      	ldr	r0, [pc, #64]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024be:	f000 fd49 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024dc:	2307      	movs	r3, #7
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024e6:	4619      	mov	r1, r3
 80024e8:	4806      	ldr	r0, [pc, #24]	; (8002504 <HAL_UART_MspInit+0x100>)
 80024ea:	f000 fd33 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	37b0      	adds	r7, #176	; 0xb0
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020400 	.word	0x40020400
 8002504:	40020000 	.word	0x40020000

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 fa1e 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <I2C1_EV_IRQHandler+0x10>)
 8002562:	f001 f91d 	bl	80037a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20008998 	.word	0x20008998

08002570 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <I2C1_ER_IRQHandler+0x10>)
 8002576:	f001 f92d 	bl	80037d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20008998 	.word	0x20008998

08002584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <USART1_IRQHandler+0x10>)
 800258a:	f003 fc21 	bl	8005dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20008bf4 	.word	0x20008bf4

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f00c fdf0 	bl	800f1ac <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20050000 	.word	0x20050000
 80025f8:	00000800 	.word	0x00000800
 80025fc:	20008bf0 	.word	0x20008bf0
 8002600:	2000b378 	.word	0x2000b378

08002604 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_USART1_UART_Init+0x58>)
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <MX_USART1_UART_Init+0x5c>)
 8002630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <MX_USART1_UART_Init+0x58>)
 8002634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MX_USART1_UART_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MX_USART1_UART_Init+0x58>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_USART1_UART_Init+0x58>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <MX_USART1_UART_Init+0x58>)
 800264e:	220c      	movs	r2, #12
 8002650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <MX_USART1_UART_Init+0x58>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <MX_USART1_UART_Init+0x58>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <MX_USART1_UART_Init+0x58>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <MX_USART1_UART_Init+0x58>)
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800266a:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_USART1_UART_Init+0x58>)
 800266c:	f003 fa1a 	bl	8005aa4 <HAL_UART_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002676:	f7ff fdfb 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20008bf4 	.word	0x20008bf4
 8002684:	40011000 	.word	0x40011000

08002688 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 800269a:	f107 0115 	add.w	r1, r7, #21
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	2201      	movs	r2, #1
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f003 face 	bl	8005c46 <HAL_UART_Receive>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f4      	bne.n	800269a <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 80026b0:	7d7b      	ldrb	r3, [r7, #21]
 80026b2:	2b0a      	cmp	r3, #10
 80026b4:	d106      	bne.n	80026c4 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 80026b6:	8afb      	ldrh	r3, [r7, #22]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	4413      	add	r3, r2
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e012      	b.n	80026ea <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 80026c4:	8afb      	ldrh	r3, [r7, #22]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4413      	add	r3, r2
 80026ca:	7d7a      	ldrb	r2, [r7, #21]
 80026cc:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80026ce:	8afb      	ldrh	r3, [r7, #22]
 80026d0:	3301      	adds	r3, #1
 80026d2:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80026d4:	8afa      	ldrh	r2, [r7, #22]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3de      	bcc.n	800269a <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80026dc:	8afb      	ldrh	r3, [r7, #22]
 80026de:	3b01      	subs	r3, #1
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4413      	add	r3, r2
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <startMsg>:

void startMsg(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80026f8:	492c      	ldr	r1, [pc, #176]	; (80027ac <startMsg+0xb8>)
 80026fa:	482d      	ldr	r0, [pc, #180]	; (80027b0 <startMsg+0xbc>)
 80026fc:	f00d faf8 	bl	800fcf0 <siprintf>
 8002700:	4603      	mov	r3, r0
 8002702:	b29a      	uxth	r2, r3
 8002704:	2364      	movs	r3, #100	; 0x64
 8002706:	492a      	ldr	r1, [pc, #168]	; (80027b0 <startMsg+0xbc>)
 8002708:	482a      	ldr	r0, [pc, #168]	; (80027b4 <startMsg+0xc0>)
 800270a:	f003 fa19 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800270e:	4927      	ldr	r1, [pc, #156]	; (80027ac <startMsg+0xb8>)
 8002710:	4827      	ldr	r0, [pc, #156]	; (80027b0 <startMsg+0xbc>)
 8002712:	f00d faed 	bl	800fcf0 <siprintf>
 8002716:	4603      	mov	r3, r0
 8002718:	b29a      	uxth	r2, r3
 800271a:	2364      	movs	r3, #100	; 0x64
 800271c:	4924      	ldr	r1, [pc, #144]	; (80027b0 <startMsg+0xbc>)
 800271e:	4825      	ldr	r0, [pc, #148]	; (80027b4 <startMsg+0xc0>)
 8002720:	f003 fa0e 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 8002724:	4924      	ldr	r1, [pc, #144]	; (80027b8 <startMsg+0xc4>)
 8002726:	4822      	ldr	r0, [pc, #136]	; (80027b0 <startMsg+0xbc>)
 8002728:	f00d fae2 	bl	800fcf0 <siprintf>
 800272c:	4603      	mov	r3, r0
 800272e:	b29a      	uxth	r2, r3
 8002730:	2364      	movs	r3, #100	; 0x64
 8002732:	491f      	ldr	r1, [pc, #124]	; (80027b0 <startMsg+0xbc>)
 8002734:	481f      	ldr	r0, [pc, #124]	; (80027b4 <startMsg+0xc0>)
 8002736:	f003 fa03 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 800273a:	4920      	ldr	r1, [pc, #128]	; (80027bc <startMsg+0xc8>)
 800273c:	481c      	ldr	r0, [pc, #112]	; (80027b0 <startMsg+0xbc>)
 800273e:	f00d fad7 	bl	800fcf0 <siprintf>
 8002742:	4603      	mov	r3, r0
 8002744:	b29a      	uxth	r2, r3
 8002746:	2364      	movs	r3, #100	; 0x64
 8002748:	4919      	ldr	r1, [pc, #100]	; (80027b0 <startMsg+0xbc>)
 800274a:	481a      	ldr	r0, [pc, #104]	; (80027b4 <startMsg+0xc0>)
 800274c:	f003 f9f8 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 8002750:	491b      	ldr	r1, [pc, #108]	; (80027c0 <startMsg+0xcc>)
 8002752:	4817      	ldr	r0, [pc, #92]	; (80027b0 <startMsg+0xbc>)
 8002754:	f00d facc 	bl	800fcf0 <siprintf>
 8002758:	4603      	mov	r3, r0
 800275a:	b29a      	uxth	r2, r3
 800275c:	2364      	movs	r3, #100	; 0x64
 800275e:	4914      	ldr	r1, [pc, #80]	; (80027b0 <startMsg+0xbc>)
 8002760:	4814      	ldr	r0, [pc, #80]	; (80027b4 <startMsg+0xc0>)
 8002762:	f003 f9ed 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 8002766:	4917      	ldr	r1, [pc, #92]	; (80027c4 <startMsg+0xd0>)
 8002768:	4811      	ldr	r0, [pc, #68]	; (80027b0 <startMsg+0xbc>)
 800276a:	f00d fac1 	bl	800fcf0 <siprintf>
 800276e:	4603      	mov	r3, r0
 8002770:	b29a      	uxth	r2, r3
 8002772:	2364      	movs	r3, #100	; 0x64
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <startMsg+0xbc>)
 8002776:	480f      	ldr	r0, [pc, #60]	; (80027b4 <startMsg+0xc0>)
 8002778:	f003 f9e2 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800277c:	490b      	ldr	r1, [pc, #44]	; (80027ac <startMsg+0xb8>)
 800277e:	480c      	ldr	r0, [pc, #48]	; (80027b0 <startMsg+0xbc>)
 8002780:	f00d fab6 	bl	800fcf0 <siprintf>
 8002784:	4603      	mov	r3, r0
 8002786:	b29a      	uxth	r2, r3
 8002788:	2364      	movs	r3, #100	; 0x64
 800278a:	4909      	ldr	r1, [pc, #36]	; (80027b0 <startMsg+0xbc>)
 800278c:	4809      	ldr	r0, [pc, #36]	; (80027b4 <startMsg+0xc0>)
 800278e:	f003 f9d7 	bl	8005b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002792:	4906      	ldr	r1, [pc, #24]	; (80027ac <startMsg+0xb8>)
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <startMsg+0xbc>)
 8002796:	f00d faab 	bl	800fcf0 <siprintf>
 800279a:	4603      	mov	r3, r0
 800279c:	b29a      	uxth	r2, r3
 800279e:	2364      	movs	r3, #100	; 0x64
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <startMsg+0xbc>)
 80027a2:	4804      	ldr	r0, [pc, #16]	; (80027b4 <startMsg+0xc0>)
 80027a4:	f003 f9cc 	bl	8005b40 <HAL_UART_Transmit>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	080137e4 	.word	0x080137e4
 80027b0:	20008c7c 	.word	0x20008c7c
 80027b4:	20008bf4 	.word	0x20008bf4
 80027b8:	08013824 	.word	0x08013824
 80027bc:	08013864 	.word	0x08013864
 80027c0:	080138a4 	.word	0x080138a4
 80027c4:	080138e4 	.word	0x080138e4

080027c8 <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	e011      	b.n	80027f8 <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <ResetAllDevices+0x48>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	b299      	uxth	r1, r3
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2301      	movs	r3, #1
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <ResetAllDevices+0x4c>)
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <ResetAllDevices+0x50>)
 80027ee:	f000 fded 	bl	80033cc <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3301      	adds	r3, #1
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <ResetAllDevices+0x54>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4293      	cmp	r3, r2
 8002802:	dbe7      	blt.n	80027d4 <ResetAllDevices+0xc>
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200000c0 	.word	0x200000c0
 8002814:	2000b2a0 	.word	0x2000b2a0
 8002818:	20008998 	.word	0x20008998
 800281c:	200000c4 	.word	0x200000c4

08002820 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e015      	b.n	800285c <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d00e      	beq.n	8002856 <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <ResetDevicesExcept+0x54>)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	b299      	uxth	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <ResetDevicesExcept+0x58>)
 8002850:	480a      	ldr	r0, [pc, #40]	; (800287c <ResetDevicesExcept+0x5c>)
 8002852:	f000 fdbb 	bl	80033cc <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <ResetDevicesExcept+0x60>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4293      	cmp	r3, r2
 8002866:	dbe3      	blt.n	8002830 <ResetDevicesExcept+0x10>
        }
    }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200000c0 	.word	0x200000c0
 8002878:	2000b2a0 	.word	0x2000b2a0
 800287c:	20008998 	.word	0x20008998
 8002880:	200000c4 	.word	0x200000c4

08002884 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af02      	add	r7, sp, #8
 800288a:	4603      	mov	r3, r0
 800288c:	460a      	mov	r2, r1
 800288e:	71fb      	strb	r3, [r7, #7]
 8002890:	4613      	mov	r3, r2
 8002892:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <setActiveTcaChannel+0x38>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	b29b      	uxth	r3, r3
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	b299      	uxth	r1, r3
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <setActiveTcaChannel+0x3c>)
 80028a4:	441a      	add	r2, r3
 80028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2301      	movs	r3, #1
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <setActiveTcaChannel+0x40>)
 80028b0:	f000 fd8c 	bl	80033cc <HAL_I2C_Master_Transmit>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	200000c0 	.word	0x200000c0
 80028c0:	200000b8 	.word	0x200000b8
 80028c4:	20008998 	.word	0x20008998

080028c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028cc:	480d      	ldr	r0, [pc, #52]	; (8002904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ce:	490e      	ldr	r1, [pc, #56]	; (8002908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028d0:	4a0e      	ldr	r2, [pc, #56]	; (800290c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028e4:	4c0b      	ldr	r4, [pc, #44]	; (8002914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028f2:	f7ff fe87 	bl	8002604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028f6:	f00c fc5f 	bl	800f1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fa:	f7ff fbc7 	bl	800208c <main>
  bx  lr    
 80028fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002900:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002908:	200010c4 	.word	0x200010c4
  ldr r2, =_sidata
 800290c:	08028e88 	.word	0x08028e88
  ldr r2, =_sbss
 8002910:	200010e0 	.word	0x200010e0
  ldr r4, =_ebss
 8002914:	2000b378 	.word	0x2000b378

08002918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002918:	e7fe      	b.n	8002918 <ADC_IRQHandler>

0800291a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291e:	2003      	movs	r0, #3
 8002920:	f000 f94c 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002924:	200f      	movs	r0, #15
 8002926:	f000 f805 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800292a:	f7ff fcb7 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f967 	bl	8002c26 <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 f92f 	bl	8002bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	; (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000000c 	.word	0x2000000c
 800298c:	2000019c 	.word	0x2000019c
 8002990:	20000198 	.word	0x20000198

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000019c 	.word	0x2000019c
 80029b8:	2000b2a4 	.word	0x2000b2a4

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	2000b2a4 	.word	0x2000b2a4

080029d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ffee 	bl	80029bc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d005      	beq.n	80029fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_Delay+0x44>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029fa:	bf00      	nop
 80029fc:	f7ff ffde 	bl	80029bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d8f7      	bhi.n	80029fc <HAL_Delay+0x28>
  {
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000019c 	.word	0x2000019c

08002a1c <__NVIC_SetPriorityGrouping>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <__NVIC_SetPriorityGrouping+0x40>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <__NVIC_SetPriorityGrouping+0x40>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00
 8002a60:	05fa0000 	.word	0x05fa0000

08002a64 <__NVIC_GetPriorityGrouping>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_EnableIRQ>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db0b      	blt.n	8002aaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	4907      	ldr	r1, [pc, #28]	; (8002ab8 <__NVIC_EnableIRQ+0x38>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000e100 	.word	0xe000e100

08002abc <__NVIC_SetPriority>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	; (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	; (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ff8e 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff29 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff3e 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff8e 	bl	8002b10 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff31 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa2 	bl	8002b78 <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e054      	b.n	8002cfc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7f5b      	ldrb	r3, [r3, #29]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fb3e 	bl	80022e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_CRC_Init+0xc4>)
 8002c7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0218 	bic.w	r2, r2, #24
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	e00c      	b.n	8002caa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f834 	bl	8002d08 <HAL_CRCEx_Polynomial_Set>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e028      	b.n	8002cfc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	795b      	ldrb	r3, [r3, #5]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	e004      	b.n	8002cc8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6912      	ldr	r2, [r2, #16]
 8002cc6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	04c11db7 	.word	0x04c11db7

08002d08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d18:	231f      	movs	r3, #31
 8002d1a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d1c:	bf00      	nop
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	613a      	str	r2, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <HAL_CRCEx_Polynomial_Set+0x34>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	d846      	bhi.n	8002dd0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002dd7 	.word	0x08002dd7
 8002d4c:	08002dd1 	.word	0x08002dd1
 8002d50:	08002dd1 	.word	0x08002dd1
 8002d54:	08002dd1 	.word	0x08002dd1
 8002d58:	08002dd1 	.word	0x08002dd1
 8002d5c:	08002dd1 	.word	0x08002dd1
 8002d60:	08002dd1 	.word	0x08002dd1
 8002d64:	08002dd1 	.word	0x08002dd1
 8002d68:	08002dc5 	.word	0x08002dc5
 8002d6c:	08002dd1 	.word	0x08002dd1
 8002d70:	08002dd1 	.word	0x08002dd1
 8002d74:	08002dd1 	.word	0x08002dd1
 8002d78:	08002dd1 	.word	0x08002dd1
 8002d7c:	08002dd1 	.word	0x08002dd1
 8002d80:	08002dd1 	.word	0x08002dd1
 8002d84:	08002dd1 	.word	0x08002dd1
 8002d88:	08002db9 	.word	0x08002db9
 8002d8c:	08002dd1 	.word	0x08002dd1
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002dd1 	.word	0x08002dd1
 8002d98:	08002dd1 	.word	0x08002dd1
 8002d9c:	08002dd1 	.word	0x08002dd1
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08002dd1 	.word	0x08002dd1
 8002da8:	08002dad 	.word	0x08002dad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d913      	bls.n	8002dda <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002db6:	e010      	b.n	8002dda <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b07      	cmp	r3, #7
 8002dbc:	d90f      	bls.n	8002dde <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002dc2:	e00c      	b.n	8002dde <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	d90b      	bls.n	8002de2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002dce:	e008      	b.n	8002de2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd4:	e006      	b.n	8002de4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e004      	b.n	8002de4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002de2:	bf00      	nop
  }
  if (status == HAL_OK)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 0118 	bic.w	r1, r3, #24
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e22:	f7ff fdcb 	bl	80029bc <HAL_GetTick>
 8002e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d008      	beq.n	8002e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e052      	b.n	8002eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0216 	bic.w	r2, r2, #22
 8002e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_DMA_Abort+0x62>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e96:	e013      	b.n	8002ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e98:	f7ff fd90 	bl	80029bc <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d90c      	bls.n	8002ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e015      	b.n	8002eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e4      	bne.n	8002e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	223f      	movs	r2, #63	; 0x3f
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d004      	beq.n	8002f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00c      	b.n	8002f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f46:	b2db      	uxtb	r3, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e175      	b.n	8003260 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f040 8164 	bne.w	800325a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d005      	beq.n	8002faa <HAL_GPIO_Init+0x56>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d130      	bne.n	800300c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0201 	and.w	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b03      	cmp	r3, #3
 8003016:	d017      	beq.n	8003048 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d123      	bne.n	800309c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80be 	beq.w	800325a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_GPIO_Init+0x324>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_GPIO_Init+0x324>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_GPIO_Init+0x324>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030f6:	4a61      	ldr	r2, [pc, #388]	; (800327c <HAL_GPIO_Init+0x328>)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	220f      	movs	r2, #15
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_GPIO_Init+0x32c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d037      	beq.n	8003192 <HAL_GPIO_Init+0x23e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a57      	ldr	r2, [pc, #348]	; (8003284 <HAL_GPIO_Init+0x330>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_GPIO_Init+0x23a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a56      	ldr	r2, [pc, #344]	; (8003288 <HAL_GPIO_Init+0x334>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02b      	beq.n	800318a <HAL_GPIO_Init+0x236>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a55      	ldr	r2, [pc, #340]	; (800328c <HAL_GPIO_Init+0x338>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d025      	beq.n	8003186 <HAL_GPIO_Init+0x232>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <HAL_GPIO_Init+0x33c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_GPIO_Init+0x22e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a53      	ldr	r2, [pc, #332]	; (8003294 <HAL_GPIO_Init+0x340>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x22a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_GPIO_Init+0x344>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x226>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_GPIO_Init+0x348>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x222>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <HAL_GPIO_Init+0x34c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x21e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_GPIO_Init+0x350>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x21a>
 800316a:	2309      	movs	r3, #9
 800316c:	e012      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800316e:	230a      	movs	r3, #10
 8003170:	e010      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003172:	2308      	movs	r3, #8
 8003174:	e00e      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003176:	2307      	movs	r3, #7
 8003178:	e00c      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800317a:	2306      	movs	r3, #6
 800317c:	e00a      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800317e:	2305      	movs	r3, #5
 8003180:	e008      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003182:	2304      	movs	r3, #4
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003186:	2303      	movs	r3, #3
 8003188:	e004      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800318a:	2302      	movs	r3, #2
 800318c:	e002      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003192:	2300      	movs	r3, #0
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f002 0203 	and.w	r2, r2, #3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4093      	lsls	r3, r2
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031a4:	4935      	ldr	r1, [pc, #212]	; (800327c <HAL_GPIO_Init+0x328>)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_GPIO_Init+0x354>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d6:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <HAL_GPIO_Init+0x354>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_GPIO_Init+0x354>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003200:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_GPIO_Init+0x354>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3301      	adds	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	f67f ae86 	bls.w	8002f74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	40013800 	.word	0x40013800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	40020800 	.word	0x40020800
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40021000 	.word	0x40021000
 8003294:	40021400 	.word	0x40021400
 8003298:	40021800 	.word	0x40021800
 800329c:	40021c00 	.word	0x40021c00
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40022400 	.word	0x40022400
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e07f      	b.n	80033be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff f826 	bl	8002324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	e006      	b.n	8003334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d104      	bne.n	8003346 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_I2C_Init+0x11c>)
 8003352:	430b      	orrs	r3, r1
 8003354:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69d9      	ldr	r1, [r3, #28]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	02008000 	.word	0x02008000

080033cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	461a      	mov	r2, r3
 80033d8:	460b      	mov	r3, r1
 80033da:	817b      	strh	r3, [r7, #10]
 80033dc:	4613      	mov	r3, r2
 80033de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	f040 80da 	bne.w	80035a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2C_Master_Transmit+0x30>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e0d3      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1d8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003404:	f7ff fada 	bl	80029bc <HAL_GetTick>
 8003408:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2319      	movs	r3, #25
 8003410:	2201      	movs	r2, #1
 8003412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fefb 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0be      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2221      	movs	r2, #33	; 0x21
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2210      	movs	r2, #16
 8003432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	893a      	ldrh	r2, [r7, #8]
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	2bff      	cmp	r3, #255	; 0xff
 8003456:	d90e      	bls.n	8003476 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	22ff      	movs	r2, #255	; 0xff
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	b2da      	uxtb	r2, r3
 8003464:	8979      	ldrh	r1, [r7, #10]
 8003466:	4b51      	ldr	r3, [pc, #324]	; (80035ac <HAL_I2C_Master_Transmit+0x1e0>)
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f001 f8e6 	bl	8004640 <I2C_TransferConfig>
 8003474:	e06c      	b.n	8003550 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	b2da      	uxtb	r2, r3
 8003486:	8979      	ldrh	r1, [r7, #10]
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <HAL_I2C_Master_Transmit+0x1e0>)
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f001 f8d5 	bl	8004640 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003496:	e05b      	b.n	8003550 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	6a39      	ldr	r1, [r7, #32]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fef8 	bl	8004292 <I2C_WaitOnTXISFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e07b      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d034      	beq.n	8003550 <HAL_I2C_Master_Transmit+0x184>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d130      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fe8a 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e04d      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2bff      	cmp	r3, #255	; 0xff
 8003510:	d90e      	bls.n	8003530 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	22ff      	movs	r2, #255	; 0xff
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	b2da      	uxtb	r2, r3
 800351e:	8979      	ldrh	r1, [r7, #10]
 8003520:	2300      	movs	r3, #0
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f001 f889 	bl	8004640 <I2C_TransferConfig>
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	b2da      	uxtb	r2, r3
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f001 f878 	bl	8004640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d19e      	bne.n	8003498 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	6a39      	ldr	r1, [r7, #32]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fed7 	bl	8004312 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e01a      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2220      	movs	r2, #32
 8003574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003582:	400b      	ands	r3, r1
 8003584:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	80002000 	.word	0x80002000
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	461a      	mov	r2, r3
 80035c0:	460b      	mov	r3, r1
 80035c2:	817b      	strh	r3, [r7, #10]
 80035c4:	4613      	mov	r3, r2
 80035c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	f040 80db 	bne.w	800378c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_Master_Receive+0x30>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0d4      	b.n	800378e <HAL_I2C_Master_Receive+0x1da>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ec:	f7ff f9e6 	bl	80029bc <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2319      	movs	r3, #25
 80035f8:	2201      	movs	r2, #1
 80035fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fe07 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0bf      	b.n	800378e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2222      	movs	r2, #34	; 0x22
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2210      	movs	r2, #16
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	893a      	ldrh	r2, [r7, #8]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2bff      	cmp	r3, #255	; 0xff
 800363e:	d90e      	bls.n	800365e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	b2da      	uxtb	r2, r3
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	4b52      	ldr	r3, [pc, #328]	; (8003798 <HAL_I2C_Master_Receive+0x1e4>)
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fff2 	bl	8004640 <I2C_TransferConfig>
 800365c:	e06d      	b.n	800373a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	b2da      	uxtb	r2, r3
 800366e:	8979      	ldrh	r1, [r7, #10]
 8003670:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_I2C_Master_Receive+0x1e4>)
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 ffe1 	bl	8004640 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800367e:	e05c      	b.n	800373a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	6a39      	ldr	r1, [r7, #32]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fe81 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e07c      	b.n	800378e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d034      	beq.n	800373a <HAL_I2C_Master_Receive+0x186>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d130      	bne.n	800373a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fd95 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e04d      	b.n	800378e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2bff      	cmp	r3, #255	; 0xff
 80036fa:	d90e      	bls.n	800371a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	b2da      	uxtb	r2, r3
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 ff94 	bl	8004640 <I2C_TransferConfig>
 8003718:	e00f      	b.n	800373a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	b2da      	uxtb	r2, r3
 800372a:	8979      	ldrh	r1, [r7, #10]
 800372c:	2300      	movs	r3, #0
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 ff83 	bl	8004640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d19d      	bne.n	8003680 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6a39      	ldr	r1, [r7, #32]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fde2 	bl	8004312 <I2C_WaitOnSTOPFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e01a      	b.n	800378e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2220      	movs	r2, #32
 800375e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_I2C_Master_Receive+0x1e8>)
 800376c:	400b      	ands	r3, r1
 800376e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	80002400 	.word	0x80002400
 800379c:	fe00e800 	.word	0xfe00e800

080037a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	68f9      	ldr	r1, [r7, #12]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
  }
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	09db      	lsrs	r3, r3, #7
 80037fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003818:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	0a9b      	lsrs	r3, r3, #10
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d010      	beq.n	8003848 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	09db      	lsrs	r3, r3, #7
 800382a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003846:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	0a5b      	lsrs	r3, r3, #9
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d010      	beq.n	8003876 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	09db      	lsrs	r3, r3, #7
 8003858:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f043 0202 	orr.w	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003874:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 030b 	and.w	r3, r3, #11
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003886:	68f9      	ldr	r1, [r7, #12]
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fb89 	bl	8003fa0 <I2C_ITError>
  }
}
 800388e:	bf00      	nop
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
 80038ca:	4613      	mov	r3, r2
 80038cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <I2C_Slave_ISR_IT+0x24>
 8003936:	2302      	movs	r3, #2
 8003938:	e0ec      	b.n	8003b14 <I2C_Slave_ISR_IT+0x1fe>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800395a:	6939      	ldr	r1, [r7, #16]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f9bf 	bl	8003ce0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04d      	beq.n	8003a0a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003976:	2b00      	cmp	r3, #0
 8003978:	d047      	beq.n	8003a0a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d128      	bne.n	80039d6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b28      	cmp	r3, #40	; 0x28
 800398e:	d108      	bne.n	80039a2 <I2C_Slave_ISR_IT+0x8c>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003996:	d104      	bne.n	80039a2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003998:	6939      	ldr	r1, [r7, #16]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 faaa 	bl	8003ef4 <I2C_ITListenCplt>
 80039a0:	e032      	b.n	8003a08 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b29      	cmp	r3, #41	; 0x29
 80039ac:	d10e      	bne.n	80039cc <I2C_Slave_ISR_IT+0xb6>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b4:	d00a      	beq.n	80039cc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fbe5 	bl	800418e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f92d 	bl	8003c24 <I2C_ITSlaveSeqCplt>
 80039ca:	e01d      	b.n	8003a08 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2210      	movs	r2, #16
 80039d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80039d4:	e096      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2210      	movs	r2, #16
 80039dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <I2C_Slave_ISR_IT+0xe4>
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f6:	f040 8085 	bne.w	8003b04 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4619      	mov	r1, r3
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 facd 	bl	8003fa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a06:	e07d      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1ee>
 8003a08:	e07c      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d030      	beq.n	8003a78 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02a      	beq.n	8003a78 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d018      	beq.n	8003a5e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d14f      	bne.n	8003b08 <I2C_Slave_ISR_IT+0x1f2>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6e:	d04b      	beq.n	8003b08 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f8d7 	bl	8003c24 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003a76:	e047      	b.n	8003b08 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003a90:	6939      	ldr	r1, [r7, #16]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f842 	bl	8003b1c <I2C_ITAddrCplt>
 8003a98:	e037      	b.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d031      	beq.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02b      	beq.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
 8003aec:	e00d      	b.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af4:	d002      	beq.n	8003afc <I2C_Slave_ISR_IT+0x1e6>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f891 	bl	8003c24 <I2C_ITSlaveSeqCplt>
 8003b02:	e002      	b.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003b08:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b32:	2b28      	cmp	r3, #40	; 0x28
 8003b34:	d16a      	bne.n	8003c0c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b54:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b62:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b70:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d138      	bne.n	8003bec <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	09db      	lsrs	r3, r3, #7
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	89bb      	ldrh	r3, [r7, #12]
 8003b82:	4053      	eors	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11c      	bne.n	8003bc8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b8e:	897b      	ldrh	r3, [r7, #10]
 8003b90:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d13b      	bne.n	8003c1c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bba:	89ba      	ldrh	r2, [r7, #12]
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fe7c 	bl	80038be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bc6:	e029      	b.n	8003c1c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003bc8:	893b      	ldrh	r3, [r7, #8]
 8003bca:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fd67 	bl	80046a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bde:	89ba      	ldrh	r2, [r7, #12]
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fe6a 	bl	80038be <HAL_I2C_AddrCallback>
}
 8003bea:	e017      	b.n	8003c1c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fd57 	bl	80046a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bfe:	89ba      	ldrh	r2, [r7, #12]
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fe5a 	bl	80038be <HAL_I2C_AddrCallback>
}
 8003c0a:	e007      	b.n	8003c1c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	0b9b      	lsrs	r3, r3, #14
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e00d      	b.n	8003c76 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0bdb      	lsrs	r3, r3, #15
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c74:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b29      	cmp	r3, #41	; 0x29
 8003c80:	d112      	bne.n	8003ca8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2228      	movs	r2, #40	; 0x28
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c90:	2101      	movs	r1, #1
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fd06 	bl	80046a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fdf8 	bl	8003896 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ca6:	e017      	b.n	8003cd8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb2:	d111      	bne.n	8003cd8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2228      	movs	r2, #40	; 0x28
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2222      	movs	r2, #34	; 0x22
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fced 	bl	80046a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fde9 	bl	80038aa <HAL_I2C_SlaveRxCpltCallback>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2220      	movs	r2, #32
 8003d04:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b21      	cmp	r3, #33	; 0x21
 8003d0a:	d002      	beq.n	8003d12 <I2C_ITSlaveCplt+0x32>
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b29      	cmp	r3, #41	; 0x29
 8003d10:	d108      	bne.n	8003d24 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003d12:	f248 0101 	movw	r1, #32769	; 0x8001
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fcc4 	bl	80046a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2221      	movs	r2, #33	; 0x21
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
 8003d22:	e00d      	b.n	8003d40 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b22      	cmp	r3, #34	; 0x22
 8003d28:	d002      	beq.n	8003d30 <I2C_ITSlaveCplt+0x50>
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2e:	d107      	bne.n	8003d40 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003d30:	f248 0102 	movw	r1, #32770	; 0x8002
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fcb5 	bl	80046a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2222      	movs	r2, #34	; 0x22
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b64      	ldr	r3, [pc, #400]	; (8003eec <I2C_ITSlaveCplt+0x20c>)
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fa14 	bl	800418e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	0b9b      	lsrs	r3, r3, #14
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d013      	beq.n	8003d9a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d020      	beq.n	8003dcc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d98:	e018      	b.n	8003dcc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	0bdb      	lsrs	r3, r3, #15
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d012      	beq.n	8003dcc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d020      	beq.n	8003e1a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f043 0204 	orr.w	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8a7 	bl	8003fa0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b28      	cmp	r3, #40	; 0x28
 8003e5c:	d141      	bne.n	8003ee2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e5e:	6979      	ldr	r1, [r7, #20]
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f847 	bl	8003ef4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e66:	e03c      	b.n	8003ee2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e70:	d014      	beq.n	8003e9c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fed6 	bl	8003c24 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <I2C_ITSlaveCplt+0x210>)
 8003e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fd20 	bl	80038da <HAL_I2C_ListenCpltCallback>
}
 8003e9a:	e022      	b.n	8003ee2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b22      	cmp	r3, #34	; 0x22
 8003ea6:	d10e      	bne.n	8003ec6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fcf3 	bl	80038aa <HAL_I2C_SlaveRxCpltCallback>
}
 8003ec4:	e00d      	b.n	8003ee2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fcda 	bl	8003896 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	fe00e800 	.word	0xfe00e800
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <I2C_ITListenCplt+0xa8>)
 8003f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f043 0204 	orr.w	r2, r3, #4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f72:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fb94 	bl	80046a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2210      	movs	r2, #16
 8003f82:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff fca4 	bl	80038da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	ffff0000 	.word	0xffff0000

08003fa0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a5d      	ldr	r2, [pc, #372]	; (8004134 <I2C_ITError+0x194>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b28      	cmp	r3, #40	; 0x28
 8003fd6:	d005      	beq.n	8003fe4 <I2C_ITError+0x44>
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b29      	cmp	r3, #41	; 0x29
 8003fdc:	d002      	beq.n	8003fe4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe2:	d10b      	bne.n	8003ffc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fe4:	2103      	movs	r1, #3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fb5c 	bl	80046a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2228      	movs	r2, #40	; 0x28
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a50      	ldr	r2, [pc, #320]	; (8004138 <I2C_ITError+0x198>)
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffa:	e011      	b.n	8004020 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ffc:	f248 0103 	movw	r1, #32771	; 0x8003
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fb4f 	bl	80046a4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b60      	cmp	r3, #96	; 0x60
 8004010:	d003      	beq.n	800401a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d039      	beq.n	80040a2 <I2C_ITError+0x102>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b11      	cmp	r3, #17
 8004032:	d002      	beq.n	800403a <I2C_ITError+0x9a>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b21      	cmp	r3, #33	; 0x21
 8004038:	d133      	bne.n	80040a2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004048:	d107      	bne.n	800405a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004058:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe ff6a 	bl	8002f38 <HAL_DMA_GetState>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d017      	beq.n	800409a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	4a33      	ldr	r2, [pc, #204]	; (800413c <I2C_ITError+0x19c>)
 8004070:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe ff38 	bl	8002ef4 <HAL_DMA_Abort_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04d      	beq.n	8004126 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004094:	4610      	mov	r0, r2
 8004096:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004098:	e045      	b.n	8004126 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f850 	bl	8004140 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040a0:	e041      	b.n	8004126 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d039      	beq.n	800411e <I2C_ITError+0x17e>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b12      	cmp	r3, #18
 80040ae:	d002      	beq.n	80040b6 <I2C_ITError+0x116>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b22      	cmp	r3, #34	; 0x22
 80040b4:	d133      	bne.n	800411e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c4:	d107      	bne.n	80040d6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe ff2c 	bl	8002f38 <HAL_DMA_GetState>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d017      	beq.n	8004116 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	4a14      	ldr	r2, [pc, #80]	; (800413c <I2C_ITError+0x19c>)
 80040ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fefa 	bl	8002ef4 <HAL_DMA_Abort_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004114:	e009      	b.n	800412a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f812 	bl	8004140 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800411c:	e005      	b.n	800412a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f80e 	bl	8004140 <I2C_TreatErrorCallback>
  }
}
 8004124:	e002      	b.n	800412c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800412a:	bf00      	nop
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	ffff0000 	.word	0xffff0000
 8004138:	08003917 	.word	0x08003917
 800413c:	080041d7 	.word	0x080041d7

08004140 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b60      	cmp	r3, #96	; 0x60
 8004152:	d10e      	bne.n	8004172 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fbc9 	bl	8003902 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004170:	e009      	b.n	8004186 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fbb4 	bl	80038ee <HAL_I2C_ErrorCallback>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d103      	bne.n	80041ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d007      	beq.n	80041ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	619a      	str	r2, [r3, #24]
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	2200      	movs	r2, #0
 80041f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004200:	2200      	movs	r2, #0
 8004202:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff ff9b 	bl	8004140 <I2C_TreatErrorCallback>
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004222:	e022      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d01e      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422c:	f7fe fbc6 	bl	80029bc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x30>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d113      	bne.n	800426a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e00f      	b.n	800428a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d0cd      	beq.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800429e:	e02c      	b.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f8eb 	bl	8004480 <I2C_IsErrorOccurred>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e02a      	b.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d01e      	beq.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042bc:	f7fe fb7e 	bl	80029bc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d113      	bne.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d1cb      	bne.n	80042a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431e:	e028      	b.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f8ab 	bl	8004480 <I2C_IsErrorOccurred>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e026      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fe fb42 	bl	80029bc <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e007      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d1cf      	bne.n	8004320 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e064      	b.n	8004464 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f86e 	bl	8004480 <I2C_IsErrorOccurred>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e062      	b.n	8004474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d138      	bne.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d105      	bne.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e04e      	b.n	8004474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d107      	bne.n	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2210      	movs	r2, #16
 80043ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2204      	movs	r2, #4
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
 80043f2:	e002      	b.n	80043fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2220      	movs	r2, #32
 8004400:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800440e:	400b      	ands	r3, r1
 8004410:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e022      	b.n	8004474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fe fac5 	bl	80029bc <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10f      	bne.n	8004464 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e007      	b.n	8004474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d193      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	fe00e800 	.word	0xfe00e800

08004480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d068      	beq.n	800457e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044b4:	e049      	b.n	800454a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d045      	beq.n	800454a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fe fa7d 	bl	80029bc <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_IsErrorOccurred+0x54>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d13a      	bne.n	800454a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d121      	bne.n	800453c <I2C_IsErrorOccurred+0xbc>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fe:	d01d      	beq.n	800453c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	2b20      	cmp	r3, #32
 8004504:	d01a      	beq.n	800453c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004514:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004516:	f7fe fa51 	bl	80029bc <HAL_GetTick>
 800451a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451c:	e00e      	b.n	800453c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800451e:	f7fe fa4d 	bl	80029bc <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b19      	cmp	r3, #25
 800452a:	d907      	bls.n	800453c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f043 0320 	orr.w	r3, r3, #32
 8004532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800453a:	e006      	b.n	800454a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	d1e9      	bne.n	800451e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b20      	cmp	r3, #32
 8004556:	d003      	beq.n	8004560 <I2C_IsErrorOccurred+0xe0>
 8004558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0aa      	beq.n	80044b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2220      	movs	r2, #32
 800456e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f043 0308 	orr.w	r3, r3, #8
 80045b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	f043 0302 	orr.w	r3, r3, #2
 80045da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01c      	beq.n	800462e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fdca 	bl	800418e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <I2C_IsErrorOccurred+0x1bc>)
 8004606:	400b      	ands	r3, r1
 8004608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800462e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004632:	4618      	mov	r0, r3
 8004634:	3728      	adds	r7, #40	; 0x28
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	817b      	strh	r3, [r7, #10]
 800464e:	4613      	mov	r3, r2
 8004650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004658:	7a7b      	ldrb	r3, [r7, #9]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004660:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	4313      	orrs	r3, r2
 800466a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800466e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	0d5b      	lsrs	r3, r3, #21
 800467a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <I2C_TransferConfig+0x60>)
 8004680:	430b      	orrs	r3, r1
 8004682:	43db      	mvns	r3, r3
 8004684:	ea02 0103 	and.w	r1, r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	03ff63ff 	.word	0x03ff63ff

080046a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00f      	beq.n	80046de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80046c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046d2:	2b28      	cmp	r3, #40	; 0x28
 80046d4:	d003      	beq.n	80046de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80046dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00f      	beq.n	8004708 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80046ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046fc:	2b28      	cmp	r3, #40	; 0x28
 80046fe:	d003      	beq.n	8004708 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004706:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800470c:	2b00      	cmp	r3, #0
 800470e:	da03      	bge.n	8004718 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004716:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	2b10      	cmp	r3, #16
 800471c:	d103      	bne.n	8004726 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004726:	887b      	ldrh	r3, [r7, #2]
 8004728:	2b20      	cmp	r3, #32
 800472a:	d103      	bne.n	8004734 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f043 0320 	orr.w	r3, r3, #32
 8004732:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d103      	bne.n	8004742 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004740:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43da      	mvns	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	d138      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004780:	2302      	movs	r3, #2
 8004782:	e032      	b.n	80047ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6819      	ldr	r1, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b20      	cmp	r3, #32
 800480a:	d139      	bne.n	8004880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004816:	2302      	movs	r3, #2
 8004818:	e033      	b.n	8004882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2224      	movs	r2, #36	; 0x24
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_PWREx_EnableOverDrive+0x98>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4a22      	ldr	r2, [pc, #136]	; (8004928 <HAL_PWREx_EnableOverDrive+0x98>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6413      	str	r3, [r2, #64]	; 0x40
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_PWREx_EnableOverDrive+0x98>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1d      	ldr	r2, [pc, #116]	; (800492c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048be:	f7fe f87d 	bl	80029bc <HAL_GetTick>
 80048c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048c4:	e009      	b.n	80048da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048c6:	f7fe f879 	bl	80029bc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d4:	d901      	bls.n	80048da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e022      	b.n	8004920 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048da:	4b14      	ldr	r3, [pc, #80]	; (800492c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d1ee      	bne.n	80048c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048e8:	4b10      	ldr	r3, [pc, #64]	; (800492c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0f      	ldr	r2, [pc, #60]	; (800492c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f4:	f7fe f862 	bl	80029bc <HAL_GetTick>
 80048f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048fa:	e009      	b.n	8004910 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048fc:	f7fe f85e 	bl	80029bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800490a:	d901      	bls.n	8004910 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e007      	b.n	8004920 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491c:	d1ee      	bne.n	80048fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	40007000 	.word	0x40007000

08004930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004938:	2300      	movs	r3, #0
 800493a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e291      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8087 	beq.w	8004a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004954:	4b96      	ldr	r3, [pc, #600]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b04      	cmp	r3, #4
 800495e:	d00c      	beq.n	800497a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004960:	4b93      	ldr	r3, [pc, #588]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b08      	cmp	r3, #8
 800496a:	d112      	bne.n	8004992 <HAL_RCC_OscConfig+0x62>
 800496c:	4b90      	ldr	r3, [pc, #576]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d10b      	bne.n	8004992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497a:	4b8d      	ldr	r3, [pc, #564]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d06c      	beq.n	8004a60 <HAL_RCC_OscConfig+0x130>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d168      	bne.n	8004a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e26b      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499a:	d106      	bne.n	80049aa <HAL_RCC_OscConfig+0x7a>
 800499c:	4b84      	ldr	r3, [pc, #528]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a83      	ldr	r2, [pc, #524]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e02e      	b.n	8004a08 <HAL_RCC_OscConfig+0xd8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x9c>
 80049b2:	4b7f      	ldr	r3, [pc, #508]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7e      	ldr	r2, [pc, #504]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b7c      	ldr	r3, [pc, #496]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7b      	ldr	r2, [pc, #492]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e01d      	b.n	8004a08 <HAL_RCC_OscConfig+0xd8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCC_OscConfig+0xc0>
 80049d6:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a75      	ldr	r2, [pc, #468]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4b73      	ldr	r3, [pc, #460]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a72      	ldr	r2, [pc, #456]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e00b      	b.n	8004a08 <HAL_RCC_OscConfig+0xd8>
 80049f0:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a6e      	ldr	r2, [pc, #440]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	4b6c      	ldr	r3, [pc, #432]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a6b      	ldr	r2, [pc, #428]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d013      	beq.n	8004a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd ffd4 	bl	80029bc <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fd ffd0 	bl	80029bc <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e21f      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0xe8>
 8004a36:	e014      	b.n	8004a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd ffc0 	bl	80029bc <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a40:	f7fd ffbc 	bl	80029bc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e20b      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a52:	4b57      	ldr	r3, [pc, #348]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x110>
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d069      	beq.n	8004b42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6e:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7a:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d11c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x190>
 8004a86:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d116      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_RCC_OscConfig+0x17a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e1df      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	493d      	ldr	r1, [pc, #244]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	e040      	b.n	8004b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d023      	beq.n	8004b10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac8:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a38      	ldr	r2, [pc, #224]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd ff72 	bl	80029bc <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004adc:	f7fd ff6e 	bl	80029bc <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1bd      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4929      	ldr	r1, [pc, #164]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
 8004b0e:	e018      	b.n	8004b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd ff4e 	bl	80029bc <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b24:	f7fd ff4a 	bl	80029bc <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e199      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d038      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d019      	beq.n	8004b8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b56:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fd ff2b 	bl	80029bc <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fd ff27 	bl	80029bc <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e176      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x23a>
 8004b88:	e01a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fd ff11 	bl	80029bc <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7fd ff0d 	bl	80029bc <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d903      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e15c      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
 8004bb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb4:	4b91      	ldr	r3, [pc, #580]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a4 	beq.w	8004d16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bce:	4b8b      	ldr	r3, [pc, #556]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a87      	ldr	r2, [pc, #540]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
 8004be6:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf6:	4b82      	ldr	r3, [pc, #520]	; (8004e00 <HAL_RCC_OscConfig+0x4d0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d118      	bne.n	8004c34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c02:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x4d0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7e      	ldr	r2, [pc, #504]	; (8004e00 <HAL_RCC_OscConfig+0x4d0>)
 8004c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fed5 	bl	80029bc <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c16:	f7fd fed1 	bl	80029bc <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	; 0x64
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e120      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c28:	4b75      	ldr	r3, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x4d0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCC_OscConfig+0x31a>
 8004c3c:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	4a6e      	ldr	r2, [pc, #440]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70
 8004c48:	e02d      	b.n	8004ca6 <HAL_RCC_OscConfig+0x376>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x33c>
 8004c52:	4b6a      	ldr	r3, [pc, #424]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a69      	ldr	r2, [pc, #420]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5e:	4b67      	ldr	r3, [pc, #412]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a66      	ldr	r2, [pc, #408]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6a:	e01c      	b.n	8004ca6 <HAL_RCC_OscConfig+0x376>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d10c      	bne.n	8004c8e <HAL_RCC_OscConfig+0x35e>
 8004c74:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c78:	4a60      	ldr	r2, [pc, #384]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c80:	4b5e      	ldr	r3, [pc, #376]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4a5d      	ldr	r2, [pc, #372]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8c:	e00b      	b.n	8004ca6 <HAL_RCC_OscConfig+0x376>
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a5a      	ldr	r2, [pc, #360]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9a:	4b58      	ldr	r3, [pc, #352]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a57      	ldr	r2, [pc, #348]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d015      	beq.n	8004cda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7fd fe85 	bl	80029bc <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb4:	e00a      	b.n	8004ccc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f7fd fe81 	bl	80029bc <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e0ce      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0ee      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x386>
 8004cd8:	e014      	b.n	8004d04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fd fe6f 	bl	80029bc <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fd fe6b 	bl	80029bc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0b8      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ee      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0a:	4b3c      	ldr	r3, [pc, #240]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a3b      	ldr	r2, [pc, #236]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80a4 	beq.w	8004e68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d20:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d06b      	beq.n	8004e04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d149      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d34:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a30      	ldr	r2, [pc, #192]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fe3c 	bl	80029bc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd fe38 	bl	80029bc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e087      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	4a1b      	ldr	r2, [pc, #108]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd fe0c 	bl	80029bc <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fd fe08 	bl	80029bc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e057      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x478>
 8004dc6:	e04f      	b.n	8004e68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd fdf2 	bl	80029bc <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd fdee 	bl	80029bc <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e03d      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dee:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x4ac>
 8004dfa:	e035      	b.n	8004e68 <HAL_RCC_OscConfig+0x538>
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x544>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d028      	beq.n	8004e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d121      	bne.n	8004e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d11a      	bne.n	8004e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d111      	bne.n	8004e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800

08004e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0d0      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d910      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b67      	ldr	r3, [pc, #412]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 020f 	bic.w	r2, r3, #15
 8004ea6:	4965      	ldr	r1, [pc, #404]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b63      	ldr	r3, [pc, #396]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0b8      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a58      	ldr	r2, [pc, #352]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d040      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d115      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b41      	ldr	r3, [pc, #260]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e073      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e06b      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5a:	4b39      	ldr	r3, [pc, #228]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4936      	ldr	r1, [pc, #216]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fd26 	bl	80029bc <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fd fd22 	bl	80029bc <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e053      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 020c 	and.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1eb      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d210      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 020f 	bic.w	r2, r3, #15
 8004fb2:	4922      	ldr	r1, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e032      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800500a:	f000 f821 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCC_ClockConfig+0x1cc>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1d0>)
 8005024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1d4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fc82 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023c00 	.word	0x40023c00
 8005040:	40023800 	.word	0x40023800
 8005044:	08013954 	.word	0x08013954
 8005048:	2000000c 	.word	0x2000000c
 800504c:	20000198 	.word	0x20000198

08005050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b094      	sub	sp, #80	; 0x50
 8005056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	2300      	movs	r3, #0
 800505e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005060:	2300      	movs	r3, #0
 8005062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005068:	4b79      	ldr	r3, [pc, #484]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b08      	cmp	r3, #8
 8005072:	d00d      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x40>
 8005074:	2b08      	cmp	r3, #8
 8005076:	f200 80e1 	bhi.w	800523c <HAL_RCC_GetSysClockFreq+0x1ec>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x34>
 800507e:	2b04      	cmp	r3, #4
 8005080:	d003      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x3a>
 8005082:	e0db      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005084:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_GetSysClockFreq+0x204>)
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005088:	e0db      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508a:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_RCC_GetSysClockFreq+0x208>)
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508e:	e0d8      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005090:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800509a:	4b6d      	ldr	r3, [pc, #436]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d063      	beq.n	800516e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	f04f 0000 	mov.w	r0, #0
 80050ca:	f04f 0100 	mov.w	r1, #0
 80050ce:	0159      	lsls	r1, r3, #5
 80050d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d4:	0150      	lsls	r0, r2, #5
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4621      	mov	r1, r4
 80050dc:	1a51      	subs	r1, r2, r1
 80050de:	6139      	str	r1, [r7, #16]
 80050e0:	4629      	mov	r1, r5
 80050e2:	eb63 0301 	sbc.w	r3, r3, r1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f4:	4659      	mov	r1, fp
 80050f6:	018b      	lsls	r3, r1, #6
 80050f8:	4651      	mov	r1, sl
 80050fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fe:	4651      	mov	r1, sl
 8005100:	018a      	lsls	r2, r1, #6
 8005102:	4651      	mov	r1, sl
 8005104:	ebb2 0801 	subs.w	r8, r2, r1
 8005108:	4659      	mov	r1, fp
 800510a:	eb63 0901 	sbc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	462b      	mov	r3, r5
 8005130:	eb49 0303 	adc.w	r3, r9, r3
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005142:	4629      	mov	r1, r5
 8005144:	024b      	lsls	r3, r1, #9
 8005146:	4621      	mov	r1, r4
 8005148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800514c:	4621      	mov	r1, r4
 800514e:	024a      	lsls	r2, r1, #9
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	2200      	movs	r2, #0
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
 800515a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005160:	f7fb fda2 	bl	8000ca8 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516c:	e058      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	2200      	movs	r2, #0
 8005176:	4618      	mov	r0, r3
 8005178:	4611      	mov	r1, r2
 800517a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0159      	lsls	r1, r3, #5
 8005196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519a:	0150      	lsls	r0, r2, #5
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4641      	mov	r1, r8
 80051a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c0:	ebb2 040a 	subs.w	r4, r2, sl
 80051c4:	eb63 050b 	sbc.w	r5, r3, fp
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	00eb      	lsls	r3, r5, #3
 80051d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d6:	00e2      	lsls	r2, r4, #3
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	4643      	mov	r3, r8
 80051de:	18e3      	adds	r3, r4, r3
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	464b      	mov	r3, r9
 80051e4:	eb45 0303 	adc.w	r3, r5, r3
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	2200      	movs	r2, #0
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	61fa      	str	r2, [r7, #28]
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	f7fb fd48 	bl	8000ca8 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523a:	e002      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetSysClockFreq+0x204>)
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005244:	4618      	mov	r0, r3
 8005246:	3750      	adds	r7, #80	; 0x50
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	007a1200 	.word	0x007a1200

0800525c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	2000000c 	.word	0x2000000c

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	08013964 	.word	0x08013964

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	08013964 	.word	0x08013964

080052c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d012      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052ec:	4b69      	ldr	r3, [pc, #420]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a68      	ldr	r2, [pc, #416]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052f6:	6093      	str	r3, [r2, #8]
 80052f8:	4b66      	ldr	r3, [pc, #408]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	4964      	ldr	r1, [pc, #400]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800530e:	2301      	movs	r3, #1
 8005310:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d017      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800531e:	4b5d      	ldr	r3, [pc, #372]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	4959      	ldr	r1, [pc, #356]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533c:	d101      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800534a:	2301      	movs	r3, #1
 800534c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d017      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800535a:	4b4e      	ldr	r3, [pc, #312]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	494a      	ldr	r1, [pc, #296]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005378:	d101      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005396:	2301      	movs	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 808b 	beq.w	80054be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053a8:	4b3a      	ldr	r3, [pc, #232]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	4a39      	ldr	r2, [pc, #228]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	6413      	str	r3, [r2, #64]	; 0x40
 80053b4:	4b37      	ldr	r3, [pc, #220]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053c0:	4b35      	ldr	r3, [pc, #212]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a34      	ldr	r2, [pc, #208]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053cc:	f7fd faf6 	bl	80029bc <HAL_GetTick>
 80053d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d4:	f7fd faf2 	bl	80029bc <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e357      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053e6:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053f2:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d035      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	429a      	cmp	r2, r3
 800540e:	d02e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005410:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005438:	4b16      	ldr	r3, [pc, #88]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d114      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd faba 	bl	80029bc <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544a:	e00a      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fd fab6 	bl	80029bc <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e319      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ee      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547a:	d111      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800548a:	400b      	ands	r3, r1
 800548c:	4901      	ldr	r1, [pc, #4]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
 8005492:	e00b      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005494:	40023800 	.word	0x40023800
 8005498:	40007000 	.word	0x40007000
 800549c:	0ffffcff 	.word	0x0ffffcff
 80054a0:	4baa      	ldr	r3, [pc, #680]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4aa9      	ldr	r2, [pc, #676]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054aa:	6093      	str	r3, [r2, #8]
 80054ac:	4ba7      	ldr	r3, [pc, #668]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b8:	49a4      	ldr	r1, [pc, #656]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d010      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054ca:	4ba0      	ldr	r3, [pc, #640]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d0:	4a9e      	ldr	r2, [pc, #632]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054da:	4b9c      	ldr	r3, [pc, #624]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	4999      	ldr	r1, [pc, #612]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f8:	4b94      	ldr	r3, [pc, #592]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005506:	4991      	ldr	r1, [pc, #580]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800551a:	4b8c      	ldr	r3, [pc, #560]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005528:	4988      	ldr	r1, [pc, #544]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800553c:	4b83      	ldr	r3, [pc, #524]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554a:	4980      	ldr	r1, [pc, #512]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800555e:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4977      	ldr	r1, [pc, #476]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005580:	4b72      	ldr	r3, [pc, #456]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f023 0203 	bic.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	496f      	ldr	r1, [pc, #444]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	f023 020c 	bic.w	r2, r3, #12
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b0:	4966      	ldr	r1, [pc, #408]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055c4:	4b61      	ldr	r3, [pc, #388]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	495e      	ldr	r1, [pc, #376]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e6:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	4955      	ldr	r1, [pc, #340]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005608:	4b50      	ldr	r3, [pc, #320]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	494d      	ldr	r1, [pc, #308]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800562a:	4b48      	ldr	r3, [pc, #288]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	4944      	ldr	r1, [pc, #272]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800564c:	4b3f      	ldr	r3, [pc, #252]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	493c      	ldr	r1, [pc, #240]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	4933      	ldr	r1, [pc, #204]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005690:	4b2e      	ldr	r3, [pc, #184]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800569e:	492b      	ldr	r1, [pc, #172]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d011      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056b2:	4b26      	ldr	r3, [pc, #152]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c0:	4922      	ldr	r1, [pc, #136]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d0:	d101      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005700:	4912      	ldr	r1, [pc, #72]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005724:	4909      	ldr	r1, [pc, #36]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d006      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80d9 	beq.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a01      	ldr	r2, [pc, #4]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800574a:	e001      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800574c:	40023800 	.word	0x40023800
 8005750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005752:	f7fd f933 	bl	80029bc <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005758:	e008      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800575a:	f7fd f92f 	bl	80029bc <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b64      	cmp	r3, #100	; 0x64
 8005766:	d901      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e194      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800576c:	4b6c      	ldr	r3, [pc, #432]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d021      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11d      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800578c:	4b64      	ldr	r3, [pc, #400]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005792:	0c1b      	lsrs	r3, r3, #16
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800579a:	4b61      	ldr	r3, [pc, #388]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a0:	0e1b      	lsrs	r3, r3, #24
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	019a      	lsls	r2, r3, #6
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	431a      	orrs	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	4957      	ldr	r1, [pc, #348]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02e      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f2:	d129      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057f4:	4b4a      	ldr	r3, [pc, #296]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005808:	0f1b      	lsrs	r3, r3, #28
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	019a      	lsls	r2, r3, #6
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	061b      	lsls	r3, r3, #24
 8005822:	431a      	orrs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	071b      	lsls	r3, r3, #28
 8005828:	493d      	ldr	r1, [pc, #244]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005830:	4b3b      	ldr	r3, [pc, #236]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005836:	f023 021f 	bic.w	r2, r3, #31
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	3b01      	subs	r3, #1
 8005840:	4937      	ldr	r1, [pc, #220]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005854:	4b32      	ldr	r3, [pc, #200]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585a:	0e1b      	lsrs	r3, r3, #24
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005862:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005868:	0f1b      	lsrs	r3, r3, #28
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	019a      	lsls	r2, r3, #6
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	041b      	lsls	r3, r3, #16
 800587c:	431a      	orrs	r2, r3
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	061b      	lsls	r3, r3, #24
 8005882:	431a      	orrs	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	071b      	lsls	r3, r3, #28
 8005888:	4925      	ldr	r1, [pc, #148]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d011      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	019a      	lsls	r2, r3, #6
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	061b      	lsls	r3, r3, #24
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	071b      	lsls	r3, r3, #28
 80058b8:	4919      	ldr	r1, [pc, #100]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058cc:	f7fd f876 	bl	80029bc <HAL_GetTick>
 80058d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058d4:	f7fd f872 	bl	80029bc <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0d7      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	f040 80cd 	bne.w	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005906:	f7fd f859 	bl	80029bc <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800590c:	e00a      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800590e:	f7fd f855 	bl	80029bc <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b64      	cmp	r3, #100	; 0x64
 800591a:	d903      	bls.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e0ba      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005924:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005930:	d0ed      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800594e:	2b00      	cmp	r3, #0
 8005950:	d02e      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d12a      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800595a:	4b51      	ldr	r3, [pc, #324]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	0f1b      	lsrs	r3, r3, #28
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	019a      	lsls	r2, r3, #6
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	071b      	lsls	r3, r3, #28
 800598e:	4944      	ldr	r1, [pc, #272]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005996:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	3b01      	subs	r3, #1
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	493d      	ldr	r1, [pc, #244]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d022      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c4:	d11d      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059c6:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	0e1b      	lsrs	r3, r3, #24
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	0f1b      	lsrs	r3, r3, #28
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	019a      	lsls	r2, r3, #6
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	431a      	orrs	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	061b      	lsls	r3, r3, #24
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	071b      	lsls	r3, r3, #28
 80059fa:	4929      	ldr	r1, [pc, #164]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d028      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	0e1b      	lsrs	r3, r3, #24
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a1c:	4b20      	ldr	r3, [pc, #128]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	019a      	lsls	r2, r3, #6
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	431a      	orrs	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	061b      	lsls	r3, r3, #24
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	071b      	lsls	r3, r3, #28
 8005a42:	4917      	ldr	r1, [pc, #92]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4911      	ldr	r1, [pc, #68]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6c:	f7fc ffa6 	bl	80029bc <HAL_GetTick>
 8005a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a74:	f7fc ffa2 	bl	80029bc <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e007      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a92:	d1ef      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800

08005aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e040      	b.n	8005b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc fc9c 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fc66 	bl	80063b4 <UART_SetConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 febe 	bl	800687c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 ff45 	bl	80069c0 <UART_CheckIdleState>
 8005b36:	4603      	mov	r3, r0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d171      	bne.n	8005c3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Transmit+0x24>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e06a      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2221      	movs	r2, #33	; 0x21
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b76:	f7fc ff21 	bl	80029bc <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b94:	d108      	bne.n	8005ba8 <HAL_UART_Transmit+0x68>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e003      	b.n	8005bb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb0:	e02c      	b.n	8005c0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 ff36 	bl	8006a2e <UART_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e038      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	3302      	adds	r3, #2
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	e007      	b.n	8005bfa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1cc      	bne.n	8005bb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2140      	movs	r1, #64	; 0x40
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 ff03 	bl	8006a2e <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e005      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08a      	sub	sp, #40	; 0x28
 8005c4a:	af02      	add	r7, sp, #8
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	f040 80b1 	bne.w	8005dc4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_UART_Receive+0x28>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e0a9      	b.n	8005dc6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2222      	movs	r2, #34	; 0x22
 8005c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c88:	f7fc fe98 	bl	80029bc <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_UART_Receive+0x80>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <HAL_UART_Receive+0x76>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cba:	e02d      	b.n	8005d18 <HAL_UART_Receive+0xd2>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cc4:	e028      	b.n	8005d18 <HAL_UART_Receive+0xd2>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10d      	bne.n	8005cea <HAL_UART_Receive+0xa4>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <HAL_UART_Receive+0x9a>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cde:	e01b      	b.n	8005d18 <HAL_UART_Receive+0xd2>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	227f      	movs	r2, #127	; 0x7f
 8005ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ce8:	e016      	b.n	8005d18 <HAL_UART_Receive+0xd2>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cf2:	d10d      	bne.n	8005d10 <HAL_UART_Receive+0xca>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_UART_Receive+0xc0>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	227f      	movs	r2, #127	; 0x7f
 8005d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d04:	e008      	b.n	8005d18 <HAL_UART_Receive+0xd2>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	223f      	movs	r2, #63	; 0x3f
 8005d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d0e:	e003      	b.n	8005d18 <HAL_UART_Receive+0xd2>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d108      	bne.n	8005d3c <HAL_UART_Receive+0xf6>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e003      	b.n	8005d44 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d44:	e032      	b.n	8005dac <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2120      	movs	r1, #32
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fe6c 	bl	8006a2e <UART_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e032      	b.n	8005dc6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	8a7b      	ldrh	r3, [r7, #18]
 8005d70:	4013      	ands	r3, r2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e00c      	b.n	8005d9a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	8a7b      	ldrh	r3, [r7, #18]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3301      	adds	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1c6      	bne.n	8005d46 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b0ba      	sub	sp, #232	; 0xe8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dfe:	4013      	ands	r3, r2
 8005e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d115      	bne.n	8005e38 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00f      	beq.n	8005e38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8297 	beq.w	800635c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
      }
      return;
 8005e36:	e291      	b.n	800635c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8117 	beq.w	8006070 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e52:	4b85      	ldr	r3, [pc, #532]	; (8006068 <HAL_UART_IRQHandler+0x298>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 810a 	beq.w	8006070 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d011      	beq.n	8005e8c <HAL_UART_IRQHandler+0xbc>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0xec>
 8005e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0x11c>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d017      	beq.n	8005f28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2208      	movs	r2, #8
 8005f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d012      	beq.n	8005f5a <HAL_UART_IRQHandler+0x18a>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00c      	beq.n	8005f5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 81fd 	beq.w	8006360 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00d      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d005      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d04f      	beq.n	8006052 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fe01 	bl	8006bba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b40      	cmp	r3, #64	; 0x40
 8005fc4:	d141      	bne.n	800604a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800600a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1d9      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	2b00      	cmp	r3, #0
 8006018:	d013      	beq.n	8006042 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601e:	4a13      	ldr	r2, [pc, #76]	; (800606c <HAL_UART_IRQHandler+0x29c>)
 8006020:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc ff64 	bl	8002ef4 <HAL_DMA_Abort_IT>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d017      	beq.n	8006062 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800603c:	4610      	mov	r0, r2
 800603e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e00f      	b.n	8006062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9a0 	bl	8006388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	e00b      	b.n	8006062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f99c 	bl	8006388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	e007      	b.n	8006062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f998 	bl	8006388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006060:	e17e      	b.n	8006360 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006062:	bf00      	nop
    return;
 8006064:	e17c      	b.n	8006360 <HAL_UART_IRQHandler+0x590>
 8006066:	bf00      	nop
 8006068:	04000120 	.word	0x04000120
 800606c:	08006c83 	.word	0x08006c83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006074:	2b01      	cmp	r3, #1
 8006076:	f040 814c 	bne.w	8006312 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8145 	beq.w	8006312 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 813e 	beq.w	8006312 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2210      	movs	r2, #16
 800609c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	f040 80b6 	bne.w	800621a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8150 	beq.w	8006364 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ce:	429a      	cmp	r2, r3
 80060d0:	f080 8148 	bcs.w	8006364 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e8:	f000 8086 	beq.w	80061f8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800611a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006122:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800612e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1da      	bne.n	80060ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800615a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800615e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006162:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800616c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e1      	bne.n	8006136 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006196:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006198:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800619c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e3      	bne.n	8006172 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c8:	f023 0310 	bic.w	r3, r3, #16
 80061cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061da:	65bb      	str	r3, [r7, #88]	; 0x58
 80061dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e4      	bne.n	80061b8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fc fe0e 	bl	8002e14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800620a:	b29b      	uxth	r3, r3
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	b29b      	uxth	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f8c2 	bl	800639c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006218:	e0a4      	b.n	8006364 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006226:	b29b      	uxth	r3, r3
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 8096 	beq.w	8006368 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800623c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8091 	beq.w	8006368 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800625a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006268:	647b      	str	r3, [r7, #68]	; 0x44
 800626a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800626e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e4      	bne.n	8006246 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3308      	adds	r3, #8
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	623b      	str	r3, [r7, #32]
   return(result);
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062a0:	633a      	str	r2, [r7, #48]	; 0x30
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e3      	bne.n	800627c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f023 0310 	bic.w	r3, r3, #16
 80062dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	69b9      	ldr	r1, [r7, #24]
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	617b      	str	r3, [r7, #20]
   return(result);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e4      	bne.n	80062c8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f846 	bl	800639c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006310:	e02a      	b.n	8006368 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00e      	beq.n	800633c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800631e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01c      	beq.n	800636c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
    }
    return;
 800633a:	e017      	b.n	800636c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <HAL_UART_IRQHandler+0x59e>
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00c      	beq.n	800636e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fcaa 	bl	8006cae <UART_EndTransmit_IT>
    return;
 800635a:	e008      	b.n	800636e <HAL_UART_IRQHandler+0x59e>
      return;
 800635c:	bf00      	nop
 800635e:	e006      	b.n	800636e <HAL_UART_IRQHandler+0x59e>
    return;
 8006360:	bf00      	nop
 8006362:	e004      	b.n	800636e <HAL_UART_IRQHandler+0x59e>
      return;
 8006364:	bf00      	nop
 8006366:	e002      	b.n	800636e <HAL_UART_IRQHandler+0x59e>
      return;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <HAL_UART_IRQHandler+0x59e>
    return;
 800636c:	bf00      	nop
  }

}
 800636e:	37e8      	adds	r7, #232	; 0xe8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4ba6      	ldr	r3, [pc, #664]	; (8006678 <UART_SetConfig+0x2c4>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	6979      	ldr	r1, [r7, #20]
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	430a      	orrs	r2, r1
 8006424:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a94      	ldr	r2, [pc, #592]	; (800667c <UART_SetConfig+0x2c8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d120      	bne.n	8006472 <UART_SetConfig+0xbe>
 8006430:	4b93      	ldr	r3, [pc, #588]	; (8006680 <UART_SetConfig+0x2cc>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b03      	cmp	r3, #3
 800643c:	d816      	bhi.n	800646c <UART_SetConfig+0xb8>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x90>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006455 	.word	0x08006455
 8006448:	08006461 	.word	0x08006461
 800644c:	0800645b 	.word	0x0800645b
 8006450:	08006467 	.word	0x08006467
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e150      	b.n	80066fc <UART_SetConfig+0x348>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e14d      	b.n	80066fc <UART_SetConfig+0x348>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e14a      	b.n	80066fc <UART_SetConfig+0x348>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e147      	b.n	80066fc <UART_SetConfig+0x348>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e144      	b.n	80066fc <UART_SetConfig+0x348>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a83      	ldr	r2, [pc, #524]	; (8006684 <UART_SetConfig+0x2d0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d132      	bne.n	80064e2 <UART_SetConfig+0x12e>
 800647c:	4b80      	ldr	r3, [pc, #512]	; (8006680 <UART_SetConfig+0x2cc>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f003 030c 	and.w	r3, r3, #12
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d828      	bhi.n	80064dc <UART_SetConfig+0x128>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0xdc>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064c5 	.word	0x080064c5
 8006494:	080064dd 	.word	0x080064dd
 8006498:	080064dd 	.word	0x080064dd
 800649c:	080064dd 	.word	0x080064dd
 80064a0:	080064d1 	.word	0x080064d1
 80064a4:	080064dd 	.word	0x080064dd
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080064dd 	.word	0x080064dd
 80064b0:	080064cb 	.word	0x080064cb
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	080064dd 	.word	0x080064dd
 80064c0:	080064d7 	.word	0x080064d7
 80064c4:	2300      	movs	r3, #0
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e118      	b.n	80066fc <UART_SetConfig+0x348>
 80064ca:	2302      	movs	r3, #2
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e115      	b.n	80066fc <UART_SetConfig+0x348>
 80064d0:	2304      	movs	r3, #4
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e112      	b.n	80066fc <UART_SetConfig+0x348>
 80064d6:	2308      	movs	r3, #8
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e10f      	b.n	80066fc <UART_SetConfig+0x348>
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e10c      	b.n	80066fc <UART_SetConfig+0x348>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a68      	ldr	r2, [pc, #416]	; (8006688 <UART_SetConfig+0x2d4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d120      	bne.n	800652e <UART_SetConfig+0x17a>
 80064ec:	4b64      	ldr	r3, [pc, #400]	; (8006680 <UART_SetConfig+0x2cc>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064f6:	2b30      	cmp	r3, #48	; 0x30
 80064f8:	d013      	beq.n	8006522 <UART_SetConfig+0x16e>
 80064fa:	2b30      	cmp	r3, #48	; 0x30
 80064fc:	d814      	bhi.n	8006528 <UART_SetConfig+0x174>
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d009      	beq.n	8006516 <UART_SetConfig+0x162>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d810      	bhi.n	8006528 <UART_SetConfig+0x174>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <UART_SetConfig+0x15c>
 800650a:	2b10      	cmp	r3, #16
 800650c:	d006      	beq.n	800651c <UART_SetConfig+0x168>
 800650e:	e00b      	b.n	8006528 <UART_SetConfig+0x174>
 8006510:	2300      	movs	r3, #0
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e0f2      	b.n	80066fc <UART_SetConfig+0x348>
 8006516:	2302      	movs	r3, #2
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e0ef      	b.n	80066fc <UART_SetConfig+0x348>
 800651c:	2304      	movs	r3, #4
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e0ec      	b.n	80066fc <UART_SetConfig+0x348>
 8006522:	2308      	movs	r3, #8
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e0e9      	b.n	80066fc <UART_SetConfig+0x348>
 8006528:	2310      	movs	r3, #16
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e0e6      	b.n	80066fc <UART_SetConfig+0x348>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a56      	ldr	r2, [pc, #344]	; (800668c <UART_SetConfig+0x2d8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d120      	bne.n	800657a <UART_SetConfig+0x1c6>
 8006538:	4b51      	ldr	r3, [pc, #324]	; (8006680 <UART_SetConfig+0x2cc>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006542:	2bc0      	cmp	r3, #192	; 0xc0
 8006544:	d013      	beq.n	800656e <UART_SetConfig+0x1ba>
 8006546:	2bc0      	cmp	r3, #192	; 0xc0
 8006548:	d814      	bhi.n	8006574 <UART_SetConfig+0x1c0>
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d009      	beq.n	8006562 <UART_SetConfig+0x1ae>
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d810      	bhi.n	8006574 <UART_SetConfig+0x1c0>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <UART_SetConfig+0x1a8>
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d006      	beq.n	8006568 <UART_SetConfig+0x1b4>
 800655a:	e00b      	b.n	8006574 <UART_SetConfig+0x1c0>
 800655c:	2300      	movs	r3, #0
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e0cc      	b.n	80066fc <UART_SetConfig+0x348>
 8006562:	2302      	movs	r3, #2
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e0c9      	b.n	80066fc <UART_SetConfig+0x348>
 8006568:	2304      	movs	r3, #4
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e0c6      	b.n	80066fc <UART_SetConfig+0x348>
 800656e:	2308      	movs	r3, #8
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e0c3      	b.n	80066fc <UART_SetConfig+0x348>
 8006574:	2310      	movs	r3, #16
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e0c0      	b.n	80066fc <UART_SetConfig+0x348>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a44      	ldr	r2, [pc, #272]	; (8006690 <UART_SetConfig+0x2dc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d125      	bne.n	80065d0 <UART_SetConfig+0x21c>
 8006584:	4b3e      	ldr	r3, [pc, #248]	; (8006680 <UART_SetConfig+0x2cc>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006592:	d017      	beq.n	80065c4 <UART_SetConfig+0x210>
 8006594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006598:	d817      	bhi.n	80065ca <UART_SetConfig+0x216>
 800659a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659e:	d00b      	beq.n	80065b8 <UART_SetConfig+0x204>
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d811      	bhi.n	80065ca <UART_SetConfig+0x216>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <UART_SetConfig+0x1fe>
 80065aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ae:	d006      	beq.n	80065be <UART_SetConfig+0x20a>
 80065b0:	e00b      	b.n	80065ca <UART_SetConfig+0x216>
 80065b2:	2300      	movs	r3, #0
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e0a1      	b.n	80066fc <UART_SetConfig+0x348>
 80065b8:	2302      	movs	r3, #2
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e09e      	b.n	80066fc <UART_SetConfig+0x348>
 80065be:	2304      	movs	r3, #4
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e09b      	b.n	80066fc <UART_SetConfig+0x348>
 80065c4:	2308      	movs	r3, #8
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e098      	b.n	80066fc <UART_SetConfig+0x348>
 80065ca:	2310      	movs	r3, #16
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e095      	b.n	80066fc <UART_SetConfig+0x348>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a2f      	ldr	r2, [pc, #188]	; (8006694 <UART_SetConfig+0x2e0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d125      	bne.n	8006626 <UART_SetConfig+0x272>
 80065da:	4b29      	ldr	r3, [pc, #164]	; (8006680 <UART_SetConfig+0x2cc>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e8:	d017      	beq.n	800661a <UART_SetConfig+0x266>
 80065ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ee:	d817      	bhi.n	8006620 <UART_SetConfig+0x26c>
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f4:	d00b      	beq.n	800660e <UART_SetConfig+0x25a>
 80065f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fa:	d811      	bhi.n	8006620 <UART_SetConfig+0x26c>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <UART_SetConfig+0x254>
 8006600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006604:	d006      	beq.n	8006614 <UART_SetConfig+0x260>
 8006606:	e00b      	b.n	8006620 <UART_SetConfig+0x26c>
 8006608:	2301      	movs	r3, #1
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e076      	b.n	80066fc <UART_SetConfig+0x348>
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e073      	b.n	80066fc <UART_SetConfig+0x348>
 8006614:	2304      	movs	r3, #4
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e070      	b.n	80066fc <UART_SetConfig+0x348>
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e06d      	b.n	80066fc <UART_SetConfig+0x348>
 8006620:	2310      	movs	r3, #16
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e06a      	b.n	80066fc <UART_SetConfig+0x348>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1b      	ldr	r2, [pc, #108]	; (8006698 <UART_SetConfig+0x2e4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d138      	bne.n	80066a2 <UART_SetConfig+0x2ee>
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <UART_SetConfig+0x2cc>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800663a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800663e:	d017      	beq.n	8006670 <UART_SetConfig+0x2bc>
 8006640:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006644:	d82a      	bhi.n	800669c <UART_SetConfig+0x2e8>
 8006646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664a:	d00b      	beq.n	8006664 <UART_SetConfig+0x2b0>
 800664c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006650:	d824      	bhi.n	800669c <UART_SetConfig+0x2e8>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <UART_SetConfig+0x2aa>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d006      	beq.n	800666a <UART_SetConfig+0x2b6>
 800665c:	e01e      	b.n	800669c <UART_SetConfig+0x2e8>
 800665e:	2300      	movs	r3, #0
 8006660:	77fb      	strb	r3, [r7, #31]
 8006662:	e04b      	b.n	80066fc <UART_SetConfig+0x348>
 8006664:	2302      	movs	r3, #2
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e048      	b.n	80066fc <UART_SetConfig+0x348>
 800666a:	2304      	movs	r3, #4
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e045      	b.n	80066fc <UART_SetConfig+0x348>
 8006670:	2308      	movs	r3, #8
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e042      	b.n	80066fc <UART_SetConfig+0x348>
 8006676:	bf00      	nop
 8006678:	efff69f3 	.word	0xefff69f3
 800667c:	40011000 	.word	0x40011000
 8006680:	40023800 	.word	0x40023800
 8006684:	40004400 	.word	0x40004400
 8006688:	40004800 	.word	0x40004800
 800668c:	40004c00 	.word	0x40004c00
 8006690:	40005000 	.word	0x40005000
 8006694:	40011400 	.word	0x40011400
 8006698:	40007800 	.word	0x40007800
 800669c:	2310      	movs	r3, #16
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e02c      	b.n	80066fc <UART_SetConfig+0x348>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a72      	ldr	r2, [pc, #456]	; (8006870 <UART_SetConfig+0x4bc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d125      	bne.n	80066f8 <UART_SetConfig+0x344>
 80066ac:	4b71      	ldr	r3, [pc, #452]	; (8006874 <UART_SetConfig+0x4c0>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066ba:	d017      	beq.n	80066ec <UART_SetConfig+0x338>
 80066bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066c0:	d817      	bhi.n	80066f2 <UART_SetConfig+0x33e>
 80066c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c6:	d00b      	beq.n	80066e0 <UART_SetConfig+0x32c>
 80066c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066cc:	d811      	bhi.n	80066f2 <UART_SetConfig+0x33e>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <UART_SetConfig+0x326>
 80066d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066d6:	d006      	beq.n	80066e6 <UART_SetConfig+0x332>
 80066d8:	e00b      	b.n	80066f2 <UART_SetConfig+0x33e>
 80066da:	2300      	movs	r3, #0
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e00d      	b.n	80066fc <UART_SetConfig+0x348>
 80066e0:	2302      	movs	r3, #2
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e00a      	b.n	80066fc <UART_SetConfig+0x348>
 80066e6:	2304      	movs	r3, #4
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e007      	b.n	80066fc <UART_SetConfig+0x348>
 80066ec:	2308      	movs	r3, #8
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e004      	b.n	80066fc <UART_SetConfig+0x348>
 80066f2:	2310      	movs	r3, #16
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e001      	b.n	80066fc <UART_SetConfig+0x348>
 80066f8:	2310      	movs	r3, #16
 80066fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006704:	d15b      	bne.n	80067be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006706:	7ffb      	ldrb	r3, [r7, #31]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d828      	bhi.n	800675e <UART_SetConfig+0x3aa>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x360>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006739 	.word	0x08006739
 8006718:	08006741 	.word	0x08006741
 800671c:	08006749 	.word	0x08006749
 8006720:	0800675f 	.word	0x0800675f
 8006724:	0800674f 	.word	0x0800674f
 8006728:	0800675f 	.word	0x0800675f
 800672c:	0800675f 	.word	0x0800675f
 8006730:	0800675f 	.word	0x0800675f
 8006734:	08006757 	.word	0x08006757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006738:	f7fe fd9c 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 800673c:	61b8      	str	r0, [r7, #24]
        break;
 800673e:	e013      	b.n	8006768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fe fdac 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8006744:	61b8      	str	r0, [r7, #24]
        break;
 8006746:	e00f      	b.n	8006768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006748:	4b4b      	ldr	r3, [pc, #300]	; (8006878 <UART_SetConfig+0x4c4>)
 800674a:	61bb      	str	r3, [r7, #24]
        break;
 800674c:	e00c      	b.n	8006768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800674e:	f7fe fc7f 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 8006752:	61b8      	str	r0, [r7, #24]
        break;
 8006754:	e008      	b.n	8006768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	61bb      	str	r3, [r7, #24]
        break;
 800675c:	e004      	b.n	8006768 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	77bb      	strb	r3, [r7, #30]
        break;
 8006766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d074      	beq.n	8006858 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	005a      	lsls	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d916      	bls.n	80067b8 <UART_SetConfig+0x404>
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006790:	d212      	bcs.n	80067b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f023 030f 	bic.w	r3, r3, #15
 800679a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	89fa      	ldrh	r2, [r7, #14]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e04f      	b.n	8006858 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	77bb      	strb	r3, [r7, #30]
 80067bc:	e04c      	b.n	8006858 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d828      	bhi.n	8006816 <UART_SetConfig+0x462>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x418>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006817 	.word	0x08006817
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006817 	.word	0x08006817
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006817 	.word	0x08006817
 80067ec:	0800680f 	.word	0x0800680f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fe fd40 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 80067f4:	61b8      	str	r0, [r7, #24]
        break;
 80067f6:	e013      	b.n	8006820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fe fd50 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 80067fc:	61b8      	str	r0, [r7, #24]
        break;
 80067fe:	e00f      	b.n	8006820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006800:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <UART_SetConfig+0x4c4>)
 8006802:	61bb      	str	r3, [r7, #24]
        break;
 8006804:	e00c      	b.n	8006820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fe fc23 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800680a:	61b8      	str	r0, [r7, #24]
        break;
 800680c:	e008      	b.n	8006820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006812:	61bb      	str	r3, [r7, #24]
        break;
 8006814:	e004      	b.n	8006820 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	77bb      	strb	r3, [r7, #30]
        break;
 800681e:	bf00      	nop
    }

    if (pclk != 0U)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d018      	beq.n	8006858 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085a      	lsrs	r2, r3, #1
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b0f      	cmp	r3, #15
 800683e:	d909      	bls.n	8006854 <UART_SetConfig+0x4a0>
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d205      	bcs.n	8006854 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e001      	b.n	8006858 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006864:	7fbb      	ldrb	r3, [r7, #30]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40007c00 	.word	0x40007c00
 8006874:	40023800 	.word	0x40023800
 8006878:	00f42400 	.word	0x00f42400

0800687c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697a:	d10a      	bne.n	8006992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d0:	f7fb fff4 	bl	80029bc <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10e      	bne.n	8006a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f81b 	bl	8006a2e <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e011      	b.n	8006a26 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b09c      	sub	sp, #112	; 0x70
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	603b      	str	r3, [r7, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3e:	e0a7      	b.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	f000 80a3 	beq.w	8006b90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fb ffb7 	bl	80029bc <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d13f      	bne.n	8006ae0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a74:	667b      	str	r3, [r7, #100]	; 0x64
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e6      	bne.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ab2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e5      	bne.n	8006a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e068      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d050      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afc:	d148      	bne.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b5a:	623a      	str	r2, [r7, #32]
 8006b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	69f9      	ldr	r1, [r7, #28]
 8006b60:	6a3a      	ldr	r2, [r7, #32]
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e5      	bne.n	8006b3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e010      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69da      	ldr	r2, [r3, #28]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2301      	moveq	r3, #1
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	f43f af48 	beq.w	8006a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3770      	adds	r7, #112	; 0x70
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b095      	sub	sp, #84	; 0x54
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be0:	643b      	str	r3, [r7, #64]	; 0x40
 8006be2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e5      	bne.n	8006bf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d118      	bne.n	8006c62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f023 0310 	bic.w	r3, r3, #16
 8006c44:	647b      	str	r3, [r7, #68]	; 0x44
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e6      	bne.n	8006c30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c76:	bf00      	nop
 8006c78:	3754      	adds	r7, #84	; 0x54
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff fb71 	bl	8006388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b088      	sub	sp, #32
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fb3d 	bl	8006374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cfa:	bf00      	nop
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fce5 	bl	80086e2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b096      	sub	sp, #88	; 0x58
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006d36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2188      	movs	r1, #136	; 0x88
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f004 ff02 	bl	800bb4c <VL53L0X_WrByte>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d5c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006d66:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a9e      	ldr	r2, [pc, #632]	; (8006fe8 <VL53L0X_DataInit+0x2c0>)
 8006d6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a9d      	ldr	r2, [pc, #628]	; (8006fec <VL53L0X_DataInit+0x2c4>)
 8006d76:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006d80:	f107 0310 	add.w	r3, r7, #16
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fac2 	bl	8007310 <VL53L0X_GetDeviceParameters>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006d92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d112      	bne.n	8006dc0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f103 0410 	add.w	r4, r3, #16
 8006da8:	f107 0510 	add.w	r5, r7, #16
 8006dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2264      	movs	r2, #100	; 0x64
 8006dc4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006dce:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006dd8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006de2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006dee:	2201      	movs	r2, #1
 8006df0:	2180      	movs	r1, #128	; 0x80
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f004 feaa 	bl	800bb4c <VL53L0X_WrByte>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e06:	2201      	movs	r2, #1
 8006e08:	21ff      	movs	r1, #255	; 0xff
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f004 fe9e 	bl	800bb4c <VL53L0X_WrByte>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f004 fe92 	bl	800bb4c <VL53L0X_WrByte>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006e36:	f107 030f 	add.w	r3, r7, #15
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2191      	movs	r1, #145	; 0x91
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f004 ff06 	bl	800bc50 <VL53L0X_RdByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f004 fe74 	bl	800bb4c <VL53L0X_WrByte>
 8006e64:	4603      	mov	r3, r0
 8006e66:	461a      	mov	r2, r3
 8006e68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e72:	2200      	movs	r2, #0
 8006e74:	21ff      	movs	r1, #255	; 0xff
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f004 fe68 	bl	800bb4c <VL53L0X_WrByte>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f004 fe5c 	bl	800bb4c <VL53L0X_WrByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea6:	e014      	b.n	8006ed2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006ea8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d114      	bne.n	8006eda <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fd4d 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ece:	3301      	adds	r3, #1
 8006ed0:	653b      	str	r3, [r7, #80]	; 0x50
 8006ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed4:	2b05      	cmp	r3, #5
 8006ed6:	dde7      	ble.n	8006ea8 <VL53L0X_DataInit+0x180>
 8006ed8:	e000      	b.n	8006edc <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006eda:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006edc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d107      	bne.n	8006ef4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fd35 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006ef4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006efc:	2200      	movs	r2, #0
 8006efe:	2103      	movs	r1, #3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fd29 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006f0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d107      	bne.n	8006f24 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006f14:	2200      	movs	r2, #0
 8006f16:	2104      	movs	r1, #4
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fd1d 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006f24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2105      	movs	r1, #5
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fd11 	bl	8007958 <VL53L0X_SetLimitCheckEnable>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006f44:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006f48:	2100      	movs	r1, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fdb4 	bl	8007ab8 <VL53L0X_SetLimitCheckValue>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d108      	bne.n	8006f70 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f62:	2101      	movs	r1, #1
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fda7 	bl	8007ab8 <VL53L0X_SetLimitCheckValue>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d108      	bne.n	8006f8a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006f78:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fd9a 	bl	8007ab8 <VL53L0X_SetLimitCheckValue>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d107      	bne.n	8006fa2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006f92:	2200      	movs	r2, #0
 8006f94:	2103      	movs	r1, #3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fd8e 	bl	8007ab8 <VL53L0X_SetLimitCheckValue>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10f      	bne.n	8006fca <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	22ff      	movs	r2, #255	; 0xff
 8006fae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006fb2:	22ff      	movs	r2, #255	; 0xff
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f004 fdc8 	bl	800bb4c <VL53L0X_WrByte>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006fca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d103      	bne.n	8006fda <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006fda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3758      	adds	r7, #88	; 0x58
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	00016b85 	.word	0x00016b85
 8006fec:	000970a4 	.word	0x000970a4

08006ff0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006ff0:	b5b0      	push	{r4, r5, r7, lr}
 8006ff2:	b09e      	sub	sp, #120	; 0x78
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006ffe:	f107 031c 	add.w	r3, r7, #28
 8007002:	2240      	movs	r2, #64	; 0x40
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f008 f910 	bl	800f22c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f002 fad0 	bl	80095d4 <VL53L0X_get_info_from_device>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800704c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007050:	2b01      	cmp	r3, #1
 8007052:	d80d      	bhi.n	8007070 <VL53L0X_StaticInit+0x80>
 8007054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007058:	2b01      	cmp	r3, #1
 800705a:	d102      	bne.n	8007062 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800705c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800705e:	2b20      	cmp	r3, #32
 8007060:	d806      	bhi.n	8007070 <VL53L0X_StaticInit+0x80>
 8007062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10e      	bne.n	8007088 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800706a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d90b      	bls.n	8007088 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007070:	f107 0218 	add.w	r2, r7, #24
 8007074:	f107 0314 	add.w	r3, r7, #20
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fd2c 	bl	8008ad8 <VL53L0X_perform_ref_spad_management>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007086:	e009      	b.n	800709c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800708c:	461a      	mov	r2, r3
 800708e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 ff2d 	bl	8008ef0 <VL53L0X_set_reference_spads>
 8007096:	4603      	mov	r3, r0
 8007098:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800709c:	4b94      	ldr	r3, [pc, #592]	; (80072f0 <VL53L0X_StaticInit+0x300>)
 800709e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80070a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10f      	bne.n	80070c8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80070ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80070b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80070c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80070c2:	e001      	b.n	80070c8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80070c4:	4b8a      	ldr	r3, [pc, #552]	; (80072f0 <VL53L0X_StaticInit+0x300>)
 80070c6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80070c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d106      	bne.n	80070de <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80070d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f003 fe24 	bl	800ad20 <VL53L0X_load_tuning_settings>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80070de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80070e6:	2300      	movs	r3, #0
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2304      	movs	r3, #4
 80070ec:	2200      	movs	r2, #0
 80070ee:	2100      	movs	r1, #0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 f8f3 	bl	80082dc <VL53L0X_SetGpioConfig>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007100:	2b00      	cmp	r3, #0
 8007102:	d121      	bne.n	8007148 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007104:	2201      	movs	r2, #1
 8007106:	21ff      	movs	r1, #255	; 0xff
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f004 fd1f 	bl	800bb4c <VL53L0X_WrByte>
 800710e:	4603      	mov	r3, r0
 8007110:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007114:	f107 031a 	add.w	r3, r7, #26
 8007118:	461a      	mov	r2, r3
 800711a:	2184      	movs	r1, #132	; 0x84
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f004 fdc1 	bl	800bca4 <VL53L0X_RdWord>
 8007122:	4603      	mov	r3, r0
 8007124:	461a      	mov	r2, r3
 8007126:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800712a:	4313      	orrs	r3, r2
 800712c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007130:	2200      	movs	r2, #0
 8007132:	21ff      	movs	r1, #255	; 0xff
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f004 fd09 	bl	800bb4c <VL53L0X_WrByte>
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007142:	4313      	orrs	r3, r2
 8007144:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007148:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007150:	8b7b      	ldrh	r3, [r7, #26]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800715c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007160:	2b00      	cmp	r3, #0
 8007162:	d108      	bne.n	8007176 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007164:	f107 031c 	add.w	r3, r7, #28
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8d0 	bl	8007310 <VL53L0X_GetDeviceParameters>
 8007170:	4603      	mov	r3, r0
 8007172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007176:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800717a:	2b00      	cmp	r3, #0
 800717c:	d110      	bne.n	80071a0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800717e:	f107 0319 	add.w	r3, r7, #25
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f992 	bl	80074ae <VL53L0X_GetFractionEnable>
 800718a:	4603      	mov	r3, r0
 800718c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007190:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007194:	2b00      	cmp	r3, #0
 8007196:	d103      	bne.n	80071a0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007198:	7e7a      	ldrb	r2, [r7, #25]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80071a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10e      	bne.n	80071c6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0410 	add.w	r4, r3, #16
 80071ae:	f107 051c 	add.w	r5, r7, #28
 80071b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80071c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80071c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d111      	bne.n	80071f2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80071ce:	f107 0319 	add.w	r3, r7, #25
 80071d2:	461a      	mov	r2, r3
 80071d4:	2101      	movs	r1, #1
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f004 fd3a 	bl	800bc50 <VL53L0X_RdByte>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80071e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80071ea:	7e7a      	ldrb	r2, [r7, #25]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80071f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d107      	bne.n	800720a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9ca 	bl	8007598 <VL53L0X_SetSequenceStepEnable>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800720a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800720e:	2b00      	cmp	r3, #0
 8007210:	d107      	bne.n	8007222 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007212:	2200      	movs	r2, #0
 8007214:	2102      	movs	r1, #2
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9be 	bl	8007598 <VL53L0X_SetSequenceStepEnable>
 800721c:	4603      	mov	r3, r0
 800721e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007222:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2203      	movs	r2, #3
 800722e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007232:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800723a:	f107 0313 	add.w	r3, r7, #19
 800723e:	461a      	mov	r2, r3
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f990 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800724e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007256:	7cfa      	ldrb	r2, [r7, #19]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800725e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007266:	f107 0313 	add.w	r3, r7, #19
 800726a:	461a      	mov	r2, r3
 800726c:	2101      	movs	r1, #1
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f97a 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800727a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007282:	7cfa      	ldrb	r2, [r7, #19]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800728a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	461a      	mov	r2, r3
 8007298:	2103      	movs	r1, #3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f002 ff1c 	bl	800a0d8 <get_sequence_step_timeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80072b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	461a      	mov	r2, r3
 80072c4:	2104      	movs	r1, #4
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f002 ff06 	bl	800a0d8 <get_sequence_step_timeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3770      	adds	r7, #112	; 0x70
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bdb0      	pop	{r4, r5, r7, pc}
 80072ee:	bf00      	nop
 80072f0:	200001a0 	.word	0x200001a0

080072f4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80072fc:	239d      	movs	r3, #157	; 0x9d
 80072fe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007300:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f8b0 	bl	8007488 <VL53L0X_GetDeviceMode>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800732c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d107      	bne.n	8007344 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa78 	bl	8007830 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	3310      	adds	r3, #16
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 faae 	bl	80078c2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800736a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d107      	bne.n	8007382 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	3314      	adds	r3, #20
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff fcc2 	bl	8006d02 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d134      	bne.n	80073f4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	e02a      	b.n	80073e6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d12a      	bne.n	80073ee <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	b299      	uxth	r1, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	3308      	adds	r3, #8
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	3304      	adds	r3, #4
 80073a8:	461a      	mov	r2, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fbe6 	bl	8007b7c <VL53L0X_GetLimitCheckValue>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80073ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d117      	bne.n	80073f2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	b299      	uxth	r1, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3318      	adds	r3, #24
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	4413      	add	r3, r2
 80073ce:	461a      	mov	r2, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb4d 	bl	8007a70 <VL53L0X_GetLimitCheckEnable>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461a      	mov	r2, r3
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	4313      	orrs	r3, r2
 80073de:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	ddd1      	ble.n	8007390 <VL53L0X_GetDeviceParameters+0x80>
 80073ec:	e002      	b.n	80073f4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80073f2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	333c      	adds	r3, #60	; 0x3c
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fc48 	bl	8007c98 <VL53L0X_GetWrapAroundCheckEnable>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800740c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d107      	bne.n	8007424 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f879 	bl	8007512 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	2b15      	cmp	r3, #21
 8007444:	bf8c      	ite	hi
 8007446:	2201      	movhi	r2, #1
 8007448:	2200      	movls	r2, #0
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	2a00      	cmp	r2, #0
 800744e:	d10e      	bne.n	800746e <VL53L0X_SetDeviceMode+0x3e>
 8007450:	2201      	movs	r2, #1
 8007452:	409a      	lsls	r2, r3
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <VL53L0X_SetDeviceMode+0x54>)
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	bf14      	ite	ne
 800745c:	2301      	movne	r3, #1
 800745e:	2300      	moveq	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	741a      	strb	r2, [r3, #16]
		break;
 800746c:	e001      	b.n	8007472 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800746e:	23f8      	movs	r3, #248	; 0xf8
 8007470:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	0030000b 	.word	0x0030000b

08007488 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7c1a      	ldrb	r2, [r3, #16]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800749e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	2109      	movs	r1, #9
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f004 fbc5 	bl	800bc50 <VL53L0X_RdByte>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80074ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80074e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f003 fa7e 	bl	800a9fe <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f003 fb4b 	bl	800abbe <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800752c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
 8007544:	4613      	mov	r3, r2
 8007546:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800754c:	78ba      	ldrb	r2, [r7, #2]
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f002 ff93 	bl	800a47e <VL53L0X_set_vcsel_pulse_period>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800755c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	460b      	mov	r3, r1
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f003 fa05 	bl	800a990 <VL53L0X_get_vcsel_pulse_period>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800758a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
 80075a4:	4613      	mov	r3, r2
 80075a6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80075b4:	f107 030f 	add.w	r3, r7, #15
 80075b8:	461a      	mov	r2, r3
 80075ba:	2101      	movs	r1, #1
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f004 fb47 	bl	800bc50 <VL53L0X_RdByte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80075ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d15a      	bne.n	8007688 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80075d2:	78bb      	ldrb	r3, [r7, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d12b      	bne.n	8007630 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d825      	bhi.n	800762a <VL53L0X_SetSequenceStepEnable+0x92>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	08007603 	.word	0x08007603
 80075ec:	0800760d 	.word	0x0800760d
 80075f0:	08007617 	.word	0x08007617
 80075f4:	08007621 	.word	0x08007621
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80075f8:	7dbb      	ldrb	r3, [r7, #22]
 80075fa:	f043 0310 	orr.w	r3, r3, #16
 80075fe:	75bb      	strb	r3, [r7, #22]
				break;
 8007600:	e043      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007602:	7dbb      	ldrb	r3, [r7, #22]
 8007604:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007608:	75bb      	strb	r3, [r7, #22]
				break;
 800760a:	e03e      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800760c:	7dbb      	ldrb	r3, [r7, #22]
 800760e:	f043 0304 	orr.w	r3, r3, #4
 8007612:	75bb      	strb	r3, [r7, #22]
				break;
 8007614:	e039      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007616:	7dbb      	ldrb	r3, [r7, #22]
 8007618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800761c:	75bb      	strb	r3, [r7, #22]
				break;
 800761e:	e034      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007620:	7dbb      	ldrb	r3, [r7, #22]
 8007622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007626:	75bb      	strb	r3, [r7, #22]
				break;
 8007628:	e02f      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800762a:	23fc      	movs	r3, #252	; 0xfc
 800762c:	75fb      	strb	r3, [r7, #23]
 800762e:	e02c      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	2b04      	cmp	r3, #4
 8007634:	d825      	bhi.n	8007682 <VL53L0X_SetSequenceStepEnable+0xea>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007651 	.word	0x08007651
 8007640:	0800765b 	.word	0x0800765b
 8007644:	08007665 	.word	0x08007665
 8007648:	0800766f 	.word	0x0800766f
 800764c:	08007679 	.word	0x08007679
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007650:	7dbb      	ldrb	r3, [r7, #22]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	75bb      	strb	r3, [r7, #22]
				break;
 8007658:	e017      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800765a:	7dbb      	ldrb	r3, [r7, #22]
 800765c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007660:	75bb      	strb	r3, [r7, #22]
				break;
 8007662:	e012      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007664:	7dbb      	ldrb	r3, [r7, #22]
 8007666:	f023 0304 	bic.w	r3, r3, #4
 800766a:	75bb      	strb	r3, [r7, #22]
				break;
 800766c:	e00d      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800766e:	7dbb      	ldrb	r3, [r7, #22]
 8007670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007674:	75bb      	strb	r3, [r7, #22]
				break;
 8007676:	e008      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007678:	7dbb      	ldrb	r3, [r7, #22]
 800767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767e:	75bb      	strb	r3, [r7, #22]
				break;
 8007680:	e003      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007682:	23fc      	movs	r3, #252	; 0xfc
 8007684:	75fb      	strb	r3, [r7, #23]
 8007686:	e000      	b.n	800768a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007688:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	7dba      	ldrb	r2, [r7, #22]
 800768e:	429a      	cmp	r2, r3
 8007690:	d01e      	beq.n	80076d0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d107      	bne.n	80076aa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800769a:	7dbb      	ldrb	r3, [r7, #22]
 800769c:	461a      	mov	r2, r3
 800769e:	2101      	movs	r1, #1
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f004 fa53 	bl	800bb4c <VL53L0X_WrByte>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80076aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7dba      	ldrb	r2, [r7, #22]
 80076b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80076ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80076c8:	6939      	ldr	r1, [r7, #16]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff ff0e 	bl	80074ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80076d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	72fb      	strb	r3, [r7, #11]
 80076ea:	4613      	mov	r3, r2
 80076ec:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d836      	bhi.n	800776c <sequence_step_enabled+0x90>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <sequence_step_enabled+0x28>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007719 	.word	0x08007719
 8007708:	0800772b 	.word	0x0800772b
 800770c:	0800773d 	.word	0x0800773d
 8007710:	0800774f 	.word	0x0800774f
 8007714:	08007761 	.word	0x08007761
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007718:	7abb      	ldrb	r3, [r7, #10]
 800771a:	111b      	asrs	r3, r3, #4
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	b2da      	uxtb	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	701a      	strb	r2, [r3, #0]
		break;
 8007728:	e022      	b.n	8007770 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800772a:	7abb      	ldrb	r3, [r7, #10]
 800772c:	10db      	asrs	r3, r3, #3
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	b2da      	uxtb	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	701a      	strb	r2, [r3, #0]
		break;
 800773a:	e019      	b.n	8007770 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800773c:	7abb      	ldrb	r3, [r7, #10]
 800773e:	109b      	asrs	r3, r3, #2
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	b2da      	uxtb	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	701a      	strb	r2, [r3, #0]
		break;
 800774c:	e010      	b.n	8007770 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800774e:	7abb      	ldrb	r3, [r7, #10]
 8007750:	119b      	asrs	r3, r3, #6
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	b2da      	uxtb	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	701a      	strb	r2, [r3, #0]
		break;
 800775e:	e007      	b.n	8007770 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007760:	7abb      	ldrb	r3, [r7, #10]
 8007762:	09db      	lsrs	r3, r3, #7
 8007764:	b2da      	uxtb	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	701a      	strb	r2, [r3, #0]
		break;
 800776a:	e001      	b.n	8007770 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800776c:	23fc      	movs	r3, #252	; 0xfc
 800776e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007792:	f107 030e 	add.w	r3, r7, #14
 8007796:	461a      	mov	r2, r3
 8007798:	2101      	movs	r1, #1
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f004 fa58 	bl	800bc50 <VL53L0X_RdByte>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80077a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d107      	bne.n	80077bc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80077ac:	7bba      	ldrb	r2, [r7, #14]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff ff92 	bl	80076dc <sequence_step_enabled>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80077bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80077c4:	7bba      	ldrb	r2, [r7, #14]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3302      	adds	r3, #2
 80077ca:	2101      	movs	r1, #1
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff ff85 	bl	80076dc <sequence_step_enabled>
 80077d2:	4603      	mov	r3, r0
 80077d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80077d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d108      	bne.n	80077f0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80077de:	7bba      	ldrb	r2, [r7, #14]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	2102      	movs	r1, #2
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff ff78 	bl	80076dc <sequence_step_enabled>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80077f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d108      	bne.n	800780a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80077f8:	7bba      	ldrb	r2, [r7, #14]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	3303      	adds	r3, #3
 80077fe:	2103      	movs	r1, #3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff6b 	bl	80076dc <sequence_step_enabled>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800780a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007812:	7bba      	ldrb	r2, [r7, #14]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	3304      	adds	r3, #4
 8007818:	2104      	movs	r1, #4
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ff5e 	bl	80076dc <sequence_step_enabled>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800783e:	f107 030c 	add.w	r3, r7, #12
 8007842:	461a      	mov	r2, r3
 8007844:	21f8      	movs	r1, #248	; 0xf8
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f004 fa2c 	bl	800bca4 <VL53L0X_RdWord>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d108      	bne.n	800786a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	461a      	mov	r2, r3
 800785e:	2104      	movs	r1, #4
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f004 fa57 	bl	800bd14 <VL53L0X_RdDWord>
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800786a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007872:	89bb      	ldrh	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	89ba      	ldrh	r2, [r7, #12]
 800787c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800788c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7f1b      	ldrb	r3, [r3, #28]
 80078aa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	7bba      	ldrb	r2, [r7, #14]
 80078b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80078b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80078d0:	f107 030e 	add.w	r3, r7, #14
 80078d4:	461a      	mov	r2, r3
 80078d6:	2120      	movs	r1, #32
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f004 f9e3 	bl	800bca4 <VL53L0X_RdWord>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80078e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d118      	bne.n	800791c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	771a      	strb	r2, [r3, #28]
 8007902:	e00b      	b.n	800791c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800791c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
 8007934:	4613      	mov	r3, r2
 8007936:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800793c:	78ba      	ldrb	r2, [r7, #2]
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fd56 	bl	80093f4 <VL53L0X_set_ref_calibration>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800794c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
 8007964:	4613      	mov	r3, r2
 8007966:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007978:	887b      	ldrh	r3, [r7, #2]
 800797a:	2b05      	cmp	r3, #5
 800797c:	d902      	bls.n	8007984 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800797e:	23fc      	movs	r3, #252	; 0xfc
 8007980:	75fb      	strb	r3, [r7, #23]
 8007982:	e05b      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007984:	787b      	ldrb	r3, [r7, #1]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	73bb      	strb	r3, [r7, #14]
 8007996:	e00a      	b.n	80079ae <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007998:	887b      	ldrh	r3, [r7, #2]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	330c      	adds	r3, #12
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80079aa:	2301      	movs	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80079ae:	887b      	ldrh	r3, [r7, #2]
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	d841      	bhi.n	8007a38 <VL53L0X_SetLimitCheckEnable+0xe0>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <VL53L0X_SetLimitCheckEnable+0x64>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079d5 	.word	0x080079d5
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	08007a09 	.word	0x08007a09
 80079d0:	08007a21 	.word	0x08007a21

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7bfa      	ldrb	r2, [r7, #15]
 80079d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80079dc:	e02e      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	2144      	movs	r1, #68	; 0x44
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f004 f8d3 	bl	800bb94 <VL53L0X_WrWord>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]

			break;
 80079f2:	e023      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7bfa      	ldrb	r2, [r7, #15]
 80079f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80079fc:	e01e      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7bfa      	ldrb	r2, [r7, #15]
 8007a02:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007a06:	e019      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007a0e:	7b7b      	ldrb	r3, [r7, #13]
 8007a10:	22fe      	movs	r2, #254	; 0xfe
 8007a12:	2160      	movs	r1, #96	; 0x60
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f004 f8e7 	bl	800bbe8 <VL53L0X_UpdateByte>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007a1e:	e00d      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007a26:	7b7b      	ldrb	r3, [r7, #13]
 8007a28:	22ef      	movs	r2, #239	; 0xef
 8007a2a:	2160      	movs	r1, #96	; 0x60
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f004 f8db 	bl	800bbe8 <VL53L0X_UpdateByte>
 8007a32:	4603      	mov	r3, r0
 8007a34:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007a36:	e001      	b.n	8007a3c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a38:	23fc      	movs	r3, #252	; 0xfc
 8007a3a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10f      	bne.n	8007a64 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007a44:	787b      	ldrb	r3, [r7, #1]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007a4a:	887b      	ldrh	r3, [r7, #2]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007a56:	e005      	b.n	8007a64 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007a58:	887b      	ldrh	r3, [r7, #2]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007a82:	897b      	ldrh	r3, [r7, #10]
 8007a84:	2b05      	cmp	r3, #5
 8007a86:	d905      	bls.n	8007a94 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a88:	23fc      	movs	r3, #252	; 0xfc
 8007a8a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e008      	b.n	8007aa6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007a94:	897b      	ldrh	r3, [r7, #10]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7dba      	ldrb	r2, [r7, #22]
 8007aa4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007aca:	897b      	ldrh	r3, [r7, #10]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007ad6:	7dbb      	ldrb	r3, [r7, #22]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	e040      	b.n	8007b6e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d830      	bhi.n	8007b54 <VL53L0X_SetLimitCheckValue+0x9c>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <VL53L0X_SetLimitCheckValue+0x40>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b2f 	.word	0x08007b2f
 8007b04:	08007b37 	.word	0x08007b37
 8007b08:	08007b3f 	.word	0x08007b3f
 8007b0c:	08007b3f 	.word	0x08007b3f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007b16:	e01f      	b.n	8007b58 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2144      	movs	r1, #68	; 0x44
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f004 f836 	bl	800bb94 <VL53L0X_WrWord>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007b2c:	e014      	b.n	8007b58 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007b34:	e010      	b.n	8007b58 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007b3c:	e00c      	b.n	8007b58 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	2164      	movs	r1, #100	; 0x64
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f004 f823 	bl	800bb94 <VL53L0X_WrWord>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007b52:	e001      	b.n	8007b58 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b54:	23fc      	movs	r3, #252	; 0xfc
 8007b56:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b60:	897b      	ldrh	r3, [r7, #10]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	330c      	adds	r3, #12
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	460b      	mov	r3, r1
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007b92:	897b      	ldrh	r3, [r7, #10]
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d847      	bhi.n	8007c28 <VL53L0X_GetLimitCheckValue+0xac>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <VL53L0X_GetLimitCheckValue+0x24>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007beb 	.word	0x08007beb
 8007bac:	08007bf7 	.word	0x08007bf7
 8007bb0:	08007c03 	.word	0x08007c03
 8007bb4:	08007c03 	.word	0x08007c03

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	77bb      	strb	r3, [r7, #30]
		break;
 8007bc2:	e033      	b.n	8007c2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007bc4:	f107 0316 	add.w	r3, r7, #22
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2144      	movs	r1, #68	; 0x44
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f004 f869 	bl	800bca4 <VL53L0X_RdWord>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007bd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007bde:	8afb      	ldrh	r3, [r7, #22]
 8007be0:	025b      	lsls	r3, r3, #9
 8007be2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007be4:	2301      	movs	r3, #1
 8007be6:	77bb      	strb	r3, [r7, #30]
		break;
 8007be8:	e020      	b.n	8007c2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	77bb      	strb	r3, [r7, #30]
		break;
 8007bf4:	e01a      	b.n	8007c2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	77bb      	strb	r3, [r7, #30]
		break;
 8007c00:	e014      	b.n	8007c2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007c02:	f107 0316 	add.w	r3, r7, #22
 8007c06:	461a      	mov	r2, r3
 8007c08:	2164      	movs	r1, #100	; 0x64
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f004 f84a 	bl	800bca4 <VL53L0X_RdWord>
 8007c10:	4603      	mov	r3, r0
 8007c12:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007c14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007c1c:	8afb      	ldrh	r3, [r7, #22]
 8007c1e:	025b      	lsls	r3, r3, #9
 8007c20:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	77bb      	strb	r3, [r7, #30]
		break;
 8007c26:	e001      	b.n	8007c2c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c28:	23fc      	movs	r3, #252	; 0xfc
 8007c2a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d12a      	bne.n	8007c8a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007c34:	7fbb      	ldrb	r3, [r7, #30]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d124      	bne.n	8007c84 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d110      	bne.n	8007c62 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007c40:	897b      	ldrh	r3, [r7, #10]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	330c      	adds	r3, #12
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007c54:	897b      	ldrh	r3, [r7, #10]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007c60:	e013      	b.n	8007c8a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007c68:	897b      	ldrh	r3, [r7, #10]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007c82:	e002      	b.n	8007c8a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c8a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop

08007c98 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007ca6:	f107 030e 	add.w	r3, r7, #14
 8007caa:	461a      	mov	r2, r3
 8007cac:	2101      	movs	r1, #1
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f003 ffce 	bl	800bc50 <VL53L0X_RdByte>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10e      	bne.n	8007cde <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007cc0:	7bba      	ldrb	r2, [r7, #14]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da03      	bge.n	8007cd8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007d08:	f107 030e 	add.w	r3, r7, #14
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff fbba 	bl	8007488 <VL53L0X_GetDeviceMode>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d107      	bne.n	8007d30 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d104      	bne.n	8007d30 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f882 	bl	8007e30 <VL53L0X_StartMeasurement>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 fb7e 	bl	800943a <VL53L0X_measurement_poll_for_completion>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d103      	bne.n	8007d58 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007d7a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007d7c:	7dbb      	ldrb	r3, [r7, #22]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d005      	beq.n	8007d8e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007d82:	7dbb      	ldrb	r3, [r7, #22]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d002      	beq.n	8007d8e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007d88:	7dbb      	ldrb	r3, [r7, #22]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d147      	bne.n	8007e1e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007d8e:	f107 030c 	add.w	r3, r7, #12
 8007d92:	f107 0210 	add.w	r2, r7, #16
 8007d96:	2101      	movs	r1, #1
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fbc3 	bl	8008524 <VL53L0X_GetInterruptThresholds>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007da8:	d803      	bhi.n	8007db2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007daa:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007dac:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007db0:	d935      	bls.n	8007e1e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d131      	bne.n	8007e1e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d006      	beq.n	8007dce <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007dc0:	491a      	ldr	r1, [pc, #104]	; (8007e2c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f002 ffac 	bl	800ad20 <VL53L0X_load_tuning_settings>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75fb      	strb	r3, [r7, #23]
 8007dcc:	e027      	b.n	8007e1e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007dce:	2204      	movs	r2, #4
 8007dd0:	21ff      	movs	r1, #255	; 0xff
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f003 feba 	bl	800bb4c <VL53L0X_WrByte>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2170      	movs	r1, #112	; 0x70
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f003 feb0 	bl	800bb4c <VL53L0X_WrByte>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007df6:	2200      	movs	r2, #0
 8007df8:	21ff      	movs	r1, #255	; 0xff
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f003 fea6 	bl	800bb4c <VL53L0X_WrByte>
 8007e00:	4603      	mov	r3, r0
 8007e02:	461a      	mov	r2, r3
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2180      	movs	r1, #128	; 0x80
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f003 fe9c 	bl	800bb4c <VL53L0X_WrByte>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000294 	.word	0x20000294

08007e30 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007e40:	f107 030e 	add.w	r3, r7, #14
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fb1e 	bl	8007488 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f003 fe7b 	bl	800bb4c <VL53L0X_WrByte>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	21ff      	movs	r1, #255	; 0xff
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f003 fe74 	bl	800bb4c <VL53L0X_WrByte>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f003 fe6d 	bl	800bb4c <VL53L0X_WrByte>
 8007e72:	4603      	mov	r3, r0
 8007e74:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	2191      	movs	r1, #145	; 0x91
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f003 fe63 	bl	800bb4c <VL53L0X_WrByte>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f003 fe5c 	bl	800bb4c <VL53L0X_WrByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	21ff      	movs	r1, #255	; 0xff
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f003 fe55 	bl	800bb4c <VL53L0X_WrByte>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f003 fe4e 	bl	800bb4c <VL53L0X_WrByte>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d054      	beq.n	8007f64 <VL53L0X_StartMeasurement+0x134>
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	dc6c      	bgt.n	8007f98 <VL53L0X_StartMeasurement+0x168>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <VL53L0X_StartMeasurement+0x98>
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d034      	beq.n	8007f30 <VL53L0X_StartMeasurement+0x100>
 8007ec6:	e067      	b.n	8007f98 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007ec8:	2201      	movs	r2, #1
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f003 fe3d 	bl	800bb4c <VL53L0X_WrByte>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d15d      	bne.n	8007f9e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d008      	beq.n	8007efe <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007eec:	f107 030d 	add.w	r3, r7, #13
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f003 feab 	bl	800bc50 <VL53L0X_RdByte>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	3301      	adds	r3, #1
 8007f02:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007f04:	7b7a      	ldrb	r2, [r7, #13]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007f0c:	7bfa      	ldrb	r2, [r7, #15]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d107      	bne.n	8007f22 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007f20:	d3e1      	bcc.n	8007ee6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007f28:	d339      	bcc.n	8007f9e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007f2a:	23f9      	movs	r3, #249	; 0xf9
 8007f2c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007f2e:	e036      	b.n	8007f9e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d105      	bne.n	8007f44 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007f38:	2101      	movs	r1, #1
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ff12 	bl	8007d64 <VL53L0X_CheckAndLoadInterruptSettings>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007f44:	2202      	movs	r2, #2
 8007f46:	2100      	movs	r1, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f003 fdff 	bl	800bb4c <VL53L0X_WrByte>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d123      	bne.n	8007fa2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007f62:	e01e      	b.n	8007fa2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fef8 	bl	8007d64 <VL53L0X_CheckAndLoadInterruptSettings>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007f78:	2204      	movs	r2, #4
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f003 fde5 	bl	800bb4c <VL53L0X_WrByte>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2204      	movs	r2, #4
 8007f92:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007f96:	e006      	b.n	8007fa6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007f98:	23f8      	movs	r3, #248	; 0xf8
 8007f9a:	75fb      	strb	r3, [r7, #23]
 8007f9c:	e004      	b.n	8007fa8 <VL53L0X_StartMeasurement+0x178>
		break;
 8007f9e:	bf00      	nop
 8007fa0:	e002      	b.n	8007fa8 <VL53L0X_StartMeasurement+0x178>
		break;
 8007fa2:	bf00      	nop
 8007fa4:	e000      	b.n	8007fa8 <VL53L0X_StartMeasurement+0x178>
		break;
 8007fa6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007fc8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d112      	bne.n	8007ff6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007fd0:	f107 0308 	add.w	r3, r7, #8
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb1a 	bl	8008610 <VL53L0X_GetInterruptMaskStatus>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d103      	bne.n	8007fee <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	e01c      	b.n	8008028 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e018      	b.n	8008028 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007ff6:	f107 030d 	add.w	r3, r7, #13
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2114      	movs	r1, #20
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f003 fe26 	bl	800bc50 <VL53L0X_RdByte>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008010:	7b7b      	ldrb	r3, [r7, #13]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2201      	movs	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e002      	b.n	8008028 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008034:	b5b0      	push	{r4, r5, r7, lr}
 8008036:	b096      	sub	sp, #88	; 0x58
 8008038:	af02      	add	r7, sp, #8
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800803e:	2300      	movs	r3, #0
 8008040:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008044:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008048:	230c      	movs	r3, #12
 800804a:	2114      	movs	r1, #20
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f003 fd51 	bl	800baf4 <VL53L0X_ReadMulti>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008058:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 80d1 	bne.w	8008204 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2200      	movs	r2, #0
 8008066:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800806e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008072:	b29b      	uxth	r3, r3
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	b29a      	uxth	r2, r3
 8008078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800807c:	b29b      	uxth	r3, r3
 800807e:	4413      	add	r3, r2
 8008080:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800808a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800808e:	b29b      	uxth	r3, r3
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	b29a      	uxth	r2, r3
 8008094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008098:	b29b      	uxth	r3, r3
 800809a:	4413      	add	r3, r2
 800809c:	b29b      	uxth	r3, r3
 800809e:	025b      	lsls	r3, r3, #9
 80080a0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080a6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80080a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	4413      	add	r3, r2
 80080ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80080be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80080c2:	025b      	lsls	r3, r3, #9
 80080c4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80080ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080d8:	b29b      	uxth	r3, r3
 80080da:	4413      	add	r3, r2
 80080dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80080e6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80080e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80080f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80080fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008102:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008108:	d046      	beq.n	8008198 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800810a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800810c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008110:	fb02 f303 	mul.w	r3, r2, r3
 8008114:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008118:	4a57      	ldr	r2, [pc, #348]	; (8008278 <VL53L0X_GetRangingMeasurementData+0x244>)
 800811a:	fb82 1203 	smull	r1, r2, r2, r3
 800811e:	1192      	asrs	r2, r2, #6
 8008120:	17db      	asrs	r3, r3, #31
 8008122:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008124:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7f1b      	ldrb	r3, [r3, #28]
 8008132:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800813a:	2b00      	cmp	r3, #0
 800813c:	d02c      	beq.n	8008198 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800813e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008140:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	121a      	asrs	r2, r3, #8
					<= 0) {
 800814a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800814c:	429a      	cmp	r2, r3
 800814e:	d10d      	bne.n	800816c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008150:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008158:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800815c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008160:	e016      	b.n	8008190 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8008162:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008166:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800816a:	e011      	b.n	8008190 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800816c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008172:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008176:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008178:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800817c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008180:	121b      	asrs	r3, r3, #8
 8008182:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008186:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008188:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800818c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008194:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00d      	beq.n	80081bc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80081a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80081a4:	089b      	lsrs	r3, r3, #2
 80081a6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80081ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	019b      	lsls	r3, r3, #6
 80081b4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	75da      	strb	r2, [r3, #23]
 80081ba:	e006      	b.n	80081ca <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80081c2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80081ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80081ce:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80081d2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f003 fa3b 	bl	800b65c <VL53L0X_get_pal_range_status>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80081f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80081fc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008204:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008208:	2b00      	cmp	r3, #0
 800820a:	d12f      	bne.n	800826c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f107 040c 	add.w	r4, r7, #12
 8008212:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800821a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800821e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008226:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800822c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008234:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800823a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008240:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008246:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800824c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008252:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800825c:	f107 050c 	add.w	r5, r7, #12
 8008260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800826c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008270:	4618      	mov	r0, r3
 8008272:	3750      	adds	r7, #80	; 0x50
 8008274:	46bd      	mov	sp, r7
 8008276:	bdb0      	pop	{r4, r5, r7, pc}
 8008278:	10624dd3 	.word	0x10624dd3

0800827c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800828a:	2100      	movs	r1, #0
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff f8cf 	bl	8007430 <VL53L0X_SetDeviceMode>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff fd2c 	bl	8007cfc <VL53L0X_PerformSingleMeasurement>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80082a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d105      	bne.n	80082bc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff febe 	bl	8008034 <VL53L0X_GetRangingMeasurementData>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80082bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80082c4:	2100      	movs	r1, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f962 	bl	8008590 <VL53L0X_ClearInterruptMask>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80082d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	70fb      	strb	r3, [r7, #3]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70bb      	strb	r3, [r7, #2]
 80082f2:	4613      	mov	r3, r2
 80082f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008300:	23f6      	movs	r3, #246	; 0xf6
 8008302:	73fb      	strb	r3, [r7, #15]
 8008304:	e107      	b.n	8008516 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008306:	78bb      	ldrb	r3, [r7, #2]
 8008308:	2b14      	cmp	r3, #20
 800830a:	d110      	bne.n	800832e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800830c:	7e3b      	ldrb	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008312:	2310      	movs	r3, #16
 8008314:	73bb      	strb	r3, [r7, #14]
 8008316:	e001      	b.n	800831c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008318:	2301      	movs	r3, #1
 800831a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	461a      	mov	r2, r3
 8008320:	2184      	movs	r1, #132	; 0x84
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f003 fc12 	bl	800bb4c <VL53L0X_WrByte>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	e0f3      	b.n	8008516 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800832e:	78bb      	ldrb	r3, [r7, #2]
 8008330:	2b15      	cmp	r3, #21
 8008332:	f040 8097 	bne.w	8008464 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008336:	2201      	movs	r2, #1
 8008338:	21ff      	movs	r1, #255	; 0xff
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f003 fc06 	bl	800bb4c <VL53L0X_WrByte>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4313      	orrs	r3, r2
 8008348:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f003 fbfc 	bl	800bb4c <VL53L0X_WrByte>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4313      	orrs	r3, r2
 800835c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800835e:	2200      	movs	r2, #0
 8008360:	21ff      	movs	r1, #255	; 0xff
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f003 fbf2 	bl	800bb4c <VL53L0X_WrByte>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	4313      	orrs	r3, r2
 8008370:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008372:	2201      	movs	r2, #1
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f003 fbe8 	bl	800bb4c <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4313      	orrs	r3, r2
 8008384:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008386:	2202      	movs	r2, #2
 8008388:	2185      	movs	r1, #133	; 0x85
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f003 fbde 	bl	800bb4c <VL53L0X_WrByte>
 8008390:	4603      	mov	r3, r0
 8008392:	461a      	mov	r2, r3
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	4313      	orrs	r3, r2
 8008398:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800839a:	2204      	movs	r2, #4
 800839c:	21ff      	movs	r1, #255	; 0xff
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f003 fbd4 	bl	800bb4c <VL53L0X_WrByte>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80083ae:	2200      	movs	r2, #0
 80083b0:	21cd      	movs	r1, #205	; 0xcd
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f003 fbca 	bl	800bb4c <VL53L0X_WrByte>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	4313      	orrs	r3, r2
 80083c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80083c2:	2211      	movs	r2, #17
 80083c4:	21cc      	movs	r1, #204	; 0xcc
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f003 fbc0 	bl	800bb4c <VL53L0X_WrByte>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80083d6:	2207      	movs	r2, #7
 80083d8:	21ff      	movs	r1, #255	; 0xff
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f003 fbb6 	bl	800bb4c <VL53L0X_WrByte>
 80083e0:	4603      	mov	r3, r0
 80083e2:	461a      	mov	r2, r3
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80083ea:	2200      	movs	r2, #0
 80083ec:	21be      	movs	r1, #190	; 0xbe
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f003 fbac 	bl	800bb4c <VL53L0X_WrByte>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80083fe:	2206      	movs	r2, #6
 8008400:	21ff      	movs	r1, #255	; 0xff
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f003 fba2 	bl	800bb4c <VL53L0X_WrByte>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	4313      	orrs	r3, r2
 8008410:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008412:	2209      	movs	r2, #9
 8008414:	21cc      	movs	r1, #204	; 0xcc
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f003 fb98 	bl	800bb4c <VL53L0X_WrByte>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4313      	orrs	r3, r2
 8008424:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008426:	2200      	movs	r2, #0
 8008428:	21ff      	movs	r1, #255	; 0xff
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f003 fb8e 	bl	800bb4c <VL53L0X_WrByte>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	4313      	orrs	r3, r2
 8008438:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800843a:	2201      	movs	r2, #1
 800843c:	21ff      	movs	r1, #255	; 0xff
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f003 fb84 	bl	800bb4c <VL53L0X_WrByte>
 8008444:	4603      	mov	r3, r0
 8008446:	461a      	mov	r2, r3
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4313      	orrs	r3, r2
 800844c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800844e:	2200      	movs	r2, #0
 8008450:	2100      	movs	r1, #0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f003 fb7a 	bl	800bb4c <VL53L0X_WrByte>
 8008458:	4603      	mov	r3, r0
 800845a:	461a      	mov	r2, r3
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4313      	orrs	r3, r2
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	e058      	b.n	8008516 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d121      	bne.n	80084b0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800846c:	787b      	ldrb	r3, [r7, #1]
 800846e:	2b04      	cmp	r3, #4
 8008470:	d81b      	bhi.n	80084aa <VL53L0X_SetGpioConfig+0x1ce>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <VL53L0X_SetGpioConfig+0x19c>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	0800848d 	.word	0x0800848d
 800847c:	08008493 	.word	0x08008493
 8008480:	08008499 	.word	0x08008499
 8008484:	0800849f 	.word	0x0800849f
 8008488:	080084a5 	.word	0x080084a5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800848c:	2300      	movs	r3, #0
 800848e:	73bb      	strb	r3, [r7, #14]
				break;
 8008490:	e00f      	b.n	80084b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008492:	2301      	movs	r3, #1
 8008494:	73bb      	strb	r3, [r7, #14]
				break;
 8008496:	e00c      	b.n	80084b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008498:	2302      	movs	r3, #2
 800849a:	73bb      	strb	r3, [r7, #14]
				break;
 800849c:	e009      	b.n	80084b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800849e:	2303      	movs	r3, #3
 80084a0:	73bb      	strb	r3, [r7, #14]
				break;
 80084a2:	e006      	b.n	80084b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80084a4:	2304      	movs	r3, #4
 80084a6:	73bb      	strb	r3, [r7, #14]
				break;
 80084a8:	e003      	b.n	80084b2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80084aa:	23f5      	movs	r3, #245	; 0xf5
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	e000      	b.n	80084b2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80084b0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80084b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d107      	bne.n	80084ca <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	461a      	mov	r2, r3
 80084be:	210a      	movs	r1, #10
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f003 fb43 	bl	800bb4c <VL53L0X_WrByte>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80084ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10f      	bne.n	80084f2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80084d2:	7e3b      	ldrb	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]
 80084dc:	e001      	b.n	80084e2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80084de:	2310      	movs	r3, #16
 80084e0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	22ef      	movs	r2, #239	; 0xef
 80084e6:	2184      	movs	r1, #132	; 0x84
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f003 fb7d 	bl	800bbe8 <VL53L0X_UpdateByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80084f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	787a      	ldrb	r2, [r7, #1]
 80084fe:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800850a:	2100      	movs	r1, #0
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f83f 	bl	8008590 <VL53L0X_ClearInterruptMask>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	460b      	mov	r3, r1
 8008532:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008534:	2300      	movs	r3, #0
 8008536:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008538:	f107 0314 	add.w	r3, r7, #20
 800853c:	461a      	mov	r2, r3
 800853e:	210e      	movs	r1, #14
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f003 fbaf 	bl	800bca4 <VL53L0X_RdWord>
 8008546:	4603      	mov	r3, r0
 8008548:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800854a:	8abb      	ldrh	r3, [r7, #20]
 800854c:	045b      	lsls	r3, r3, #17
 800854e:	461a      	mov	r2, r3
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <VL53L0X_GetInterruptThresholds+0x68>)
 8008552:	4013      	ands	r3, r2
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10f      	bne.n	8008580 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	461a      	mov	r2, r3
 8008566:	210c      	movs	r1, #12
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f003 fb9b 	bl	800bca4 <VL53L0X_RdWord>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008572:	8abb      	ldrh	r3, [r7, #20]
 8008574:	045b      	lsls	r3, r3, #17
 8008576:	461a      	mov	r2, r3
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <VL53L0X_GetInterruptThresholds+0x68>)
 800857a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	1ffe0000 	.word	0x1ffe0000

08008590 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80085a2:	2201      	movs	r2, #1
 80085a4:	210b      	movs	r1, #11
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f003 fad0 	bl	800bb4c <VL53L0X_WrByte>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80085b0:	2200      	movs	r2, #0
 80085b2:	210b      	movs	r1, #11
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f003 fac9 	bl	800bb4c <VL53L0X_WrByte>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80085c4:	f107 030d 	add.w	r3, r7, #13
 80085c8:	461a      	mov	r2, r3
 80085ca:	2113      	movs	r1, #19
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f003 fb3f 	bl	800bc50 <VL53L0X_RdByte>
 80085d2:	4603      	mov	r3, r0
 80085d4:	461a      	mov	r2, r3
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	4313      	orrs	r3, r2
 80085da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	3301      	adds	r3, #1
 80085e0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80085e2:	7b7b      	ldrb	r3, [r7, #13]
 80085e4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d803      	bhi.n	80085fa <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80085f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0d3      	beq.n	80085a2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008600:	23f4      	movs	r3, #244	; 0xf4
 8008602:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800861e:	f107 030e 	add.w	r3, r7, #14
 8008622:	461a      	mov	r2, r3
 8008624:	2113      	movs	r1, #19
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f003 fb12 	bl	800bc50 <VL53L0X_RdByte>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	f003 0207 	and.w	r2, r3, #7
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	f003 0318 	and.w	r3, r3, #24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008644:	23fa      	movs	r3, #250	; 0xfa
 8008646:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	461a      	mov	r2, r3
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fc3f 	bl	8008ef0 <VL53L0X_set_reference_spads>
 8008672:	4603      	mov	r3, r0
 8008674:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 8008676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <VL53L0X_PerformContinuousRangingMeasurement>:

	return Status;
}


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800868c:	2101      	movs	r1, #1
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fe fece 	bl	8007430 <VL53L0X_SetDeviceMode>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8008698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 80086a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086a4:	e019      	b.n	80086da <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fbc2 	bl	8007e30 <VL53L0X_StartMeasurement>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80086b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 80086b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086bc:	e00d      	b.n	80086da <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fcb7 	bl	8008034 <VL53L0X_GetRangingMeasurementData>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80086ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 80086d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d6:	e000      	b.n	80086da <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80086f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80086f4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80086f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086fa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	461a      	mov	r2, r3
 8008702:	2128      	movs	r1, #40	; 0x28
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f003 facd 	bl	800bca4 <VL53L0X_RdWord>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800870e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11e      	bne.n	8008754 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008716:	893b      	ldrh	r3, [r7, #8]
 8008718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800871c:	b29b      	uxth	r3, r3
 800871e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008720:	893b      	ldrh	r3, [r7, #8]
 8008722:	461a      	mov	r2, r3
 8008724:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008728:	429a      	cmp	r2, r3
 800872a:	dd0b      	ble.n	8008744 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800872c:	893a      	ldrh	r2, [r7, #8]
 800872e:	897b      	ldrh	r3, [r7, #10]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	b29b      	uxth	r3, r3
 8008734:	b21b      	sxth	r3, r3
 8008736:	461a      	mov	r2, r3
					* 250;
 8008738:	23fa      	movs	r3, #250	; 0xfa
 800873a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	e007      	b.n	8008754 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008744:	893b      	ldrh	r3, [r7, #8]
 8008746:	b21b      	sxth	r3, r3
 8008748:	461a      	mov	r2, r3
 800874a:	23fa      	movs	r3, #250	; 0xfa
 800874c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008760:	b480      	push	{r7}
 8008762:	b08b      	sub	sp, #44	; 0x2c
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800876e:	2308      	movs	r3, #8
 8008770:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f04f 32ff 	mov.w	r2, #4294967295
 800877c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008790:	69b9      	ldr	r1, [r7, #24]
 8008792:	fb01 f202 	mul.w	r2, r1, r2
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
 800879e:	e030      	b.n	8008802 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	4413      	add	r3, r2
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d11e      	bne.n	80087f4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80087b6:	7ffa      	ldrb	r2, [r7, #31]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	fa42 f303 	asr.w	r3, r2, r3
 80087be:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80087c4:	e016      	b.n	80087f4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80087c6:	7ffb      	ldrb	r3, [r7, #31]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <get_next_good_spad+0x88>
				success = 1;
 80087d0:	2301      	movs	r3, #1
 80087d2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	fb03 f202 	mul.w	r2, r3, r2
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	4413      	add	r3, r2
 80087e0:	461a      	mov	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	601a      	str	r2, [r3, #0]
				break;
 80087e6:	e009      	b.n	80087fc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80087e8:	7ffb      	ldrb	r3, [r7, #31]
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	3301      	adds	r3, #1
 80087f2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3e4      	bcc.n	80087c6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	3301      	adds	r3, #1
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d202      	bcs.n	8008810 <get_next_good_spad+0xb0>
 800880a:	7fbb      	ldrb	r3, [r7, #30]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0c7      	beq.n	80087a0 <get_next_good_spad+0x40>
		}
	}
}
 8008810:	bf00      	nop
 8008812:	372c      	adds	r7, #44	; 0x2c
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008824:	2301      	movs	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	099b      	lsrs	r3, r3, #6
 800882c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800882e:	4a07      	ldr	r2, [pc, #28]	; (800884c <is_aperture+0x30>)
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <is_aperture+0x22>
		isAperture = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000044c 	.word	0x2000044c

08008850 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008850:	b480      	push	{r7}
 8008852:	b089      	sub	sp, #36	; 0x24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800885c:	2300      	movs	r3, #0
 800885e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008860:	2308      	movs	r3, #8
 8008862:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	fbb2 f3f3 	udiv	r3, r2, r3
 800886c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	fbb3 f2f2 	udiv	r2, r3, r2
 8008876:	69b9      	ldr	r1, [r7, #24]
 8008878:	fb01 f202 	mul.w	r2, r1, r2
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	429a      	cmp	r2, r3
 8008886:	d302      	bcc.n	800888e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008888:	23ce      	movs	r3, #206	; 0xce
 800888a:	77fb      	strb	r3, [r7, #31]
 800888c:	e010      	b.n	80088b0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b25a      	sxtb	r2, r3
 8008898:	2101      	movs	r1, #1
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	fa01 f303 	lsl.w	r3, r1, r3
 80088a0:	b25b      	sxtb	r3, r3
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b259      	sxtb	r1, r3
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	4413      	add	r3, r2
 80088ac:	b2ca      	uxtb	r2, r1
 80088ae:	701a      	strb	r2, [r3, #0]

	return status;
 80088b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3724      	adds	r7, #36	; 0x24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80088ca:	2306      	movs	r3, #6
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	21b0      	movs	r1, #176	; 0xb0
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f003 f8df 	bl	800ba94 <VL53L0X_WriteMulti>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80088da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80088f0:	2306      	movs	r3, #6
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	21b0      	movs	r1, #176	; 0xb0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f003 f8fc 	bl	800baf4 <VL53L0X_ReadMulti>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08c      	sub	sp, #48	; 0x30
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	460b      	mov	r3, r1
 800891a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800891c:	2300      	movs	r3, #0
 800891e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008924:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008928:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800892a:	2300      	movs	r3, #0
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
 800892e:	e02b      	b.n	8008988 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008930:	f107 031c 	add.w	r3, r7, #28
 8008934:	6a3a      	ldr	r2, [r7, #32]
 8008936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff ff11 	bl	8008760 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d103      	bne.n	800894e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008946:	23ce      	movs	r3, #206	; 0xce
 8008948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800894c:	e020      	b.n	8008990 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	461a      	mov	r2, r3
 8008952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008954:	4413      	add	r3, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff ff60 	bl	800881c <is_aperture>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	4293      	cmp	r3, r2
 8008964:	d003      	beq.n	800896e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008966:	23ce      	movs	r3, #206	; 0xce
 8008968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800896c:	e010      	b.n	8008990 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008972:	6a3a      	ldr	r2, [r7, #32]
 8008974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008976:	6838      	ldr	r0, [r7, #0]
 8008978:	f7ff ff6a 	bl	8008850 <enable_spad_bit>
		currentSpad++;
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	3301      	adds	r3, #1
 8008980:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	3301      	adds	r3, #1
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
 8008988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800898a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898c:	429a      	cmp	r2, r3
 800898e:	d3cf      	bcc.n	8008930 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008992:	6a3a      	ldr	r2, [r7, #32]
 8008994:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008996:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f7ff ff8d 	bl	80088c0 <set_ref_spad_map>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80089ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d121      	bne.n	80089f8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	4619      	mov	r1, r3
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff ff93 	bl	80088e6 <get_ref_spad_map>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80089ca:	e011      	b.n	80089f0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	4413      	add	r3, r2
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	f107 0114 	add.w	r1, r7, #20
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	440b      	add	r3, r1
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d003      	beq.n	80089ea <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80089e2:	23ce      	movs	r3, #206	; 0xce
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80089e8:	e006      	b.n	80089f8 <enable_ref_spads+0xec>
			}
			i++;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	3301      	adds	r3, #1
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3e9      	bcc.n	80089cc <enable_ref_spads+0xc0>
		}
	}
	return status;
 80089f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3730      	adds	r7, #48	; 0x30
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008a24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d107      	bne.n	8008a3c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008a2c:	22c0      	movs	r2, #192	; 0xc0
 8008a2e:	2101      	movs	r1, #1
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f003 f88b 	bl	800bb4c <VL53L0X_WrByte>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d108      	bne.n	8008a56 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008a44:	f107 0308 	add.w	r3, r7, #8
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fc16 	bl	800827c <VL53L0X_PerformSingleRangingMeasurement>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008a56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d107      	bne.n	8008a6e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a5e:	2201      	movs	r2, #1
 8008a60:	21ff      	movs	r1, #255	; 0xff
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f003 f872 	bl	800bb4c <VL53L0X_WrByte>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d107      	bne.n	8008a86 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	21b6      	movs	r1, #182	; 0xb6
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f003 f912 	bl	800bca4 <VL53L0X_RdWord>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d107      	bne.n	8008a9e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	21ff      	movs	r1, #255	; 0xff
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f003 f85a 	bl	800bb4c <VL53L0X_WrByte>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d112      	bne.n	8008acc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008aaa:	461a      	mov	r2, r3
 8008aac:	2101      	movs	r1, #1
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f003 f84c 	bl	800bb4c <VL53L0X_WrByte>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008aba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ac8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008acc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3728      	adds	r7, #40	; 0x28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b09d      	sub	sp, #116	; 0x74
 8008adc:	af06      	add	r7, sp, #24
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008aea:	23b4      	movs	r3, #180	; 0xb4
 8008aec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008af0:	2303      	movs	r3, #3
 8008af2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008af4:	232c      	movs	r3, #44	; 0x2c
 8008af6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008b04:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008b12:	2306      	movs	r3, #6
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008b3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008b3e:	2300      	movs	r3, #0
 8008b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b42:	e009      	b.n	8008b58 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b54:	3301      	adds	r3, #1
 8008b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3f1      	bcc.n	8008b44 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008b60:	2201      	movs	r2, #1
 8008b62:	21ff      	movs	r1, #255	; 0xff
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f002 fff1 	bl	800bb4c <VL53L0X_WrByte>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008b70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d107      	bne.n	8008b88 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008b78:	2200      	movs	r2, #0
 8008b7a:	214f      	movs	r1, #79	; 0x4f
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f002 ffe5 	bl	800bb4c <VL53L0X_WrByte>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008b88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d107      	bne.n	8008ba0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008b90:	222c      	movs	r2, #44	; 0x2c
 8008b92:	214e      	movs	r1, #78	; 0x4e
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f002 ffd9 	bl	800bb4c <VL53L0X_WrByte>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008ba0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	21ff      	movs	r1, #255	; 0xff
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f002 ffcd 	bl	800bb4c <VL53L0X_WrByte>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008bb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008bc0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	21b6      	movs	r1, #182	; 0xb6
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f002 ffbf 	bl	800bb4c <VL53L0X_WrByte>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008bd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d107      	bne.n	8008bec <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2180      	movs	r1, #128	; 0x80
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f002 ffb3 	bl	800bb4c <VL53L0X_WrByte>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008bec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008bf4:	f107 0210 	add.w	r2, r7, #16
 8008bf8:	f107 0111 	add.w	r1, r7, #17
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 fbbb 	bl	800937a <VL53L0X_perform_ref_calibration>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008c0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d121      	bne.n	8008c56 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c18:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c20:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008c2e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c32:	f107 0218 	add.w	r2, r7, #24
 8008c36:	9204      	str	r2, [sp, #16]
 8008c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3a:	9203      	str	r2, [sp, #12]
 8008c3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c3e:	9202      	str	r2, [sp, #8]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4623      	mov	r3, r4
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fe5e 	bl	800890c <enable_ref_spads>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d174      	bne.n	8008d48 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008c62:	f107 0312 	add.w	r3, r7, #18
 8008c66:	4619      	mov	r1, r3
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff fecb 	bl	8008a04 <perform_ref_signal_measurement>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008c74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d161      	bne.n	8008d40 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008c7c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008c7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d25d      	bcs.n	8008d40 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008c84:	2300      	movs	r3, #0
 8008c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c88:	e009      	b.n	8008c9e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008c94:	2200      	movs	r2, #0
 8008c96:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d3f1      	bcc.n	8008c8a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008ca6:	e002      	b.n	8008cae <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008caa:	3301      	adds	r3, #1
 8008cac:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008cae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb4:	4413      	add	r3, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fdb0 	bl	800881c <is_aperture>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d103      	bne.n	8008cca <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008cc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d3ee      	bcc.n	8008ca8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008cde:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008ce2:	f107 0218 	add.w	r2, r7, #24
 8008ce6:	9204      	str	r2, [sp, #16]
 8008ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cea:	9203      	str	r2, [sp, #12]
 8008cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cee:	9202      	str	r2, [sp, #8]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fe06 	bl	800890c <enable_ref_spads>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d11b      	bne.n	8008d46 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008d12:	f107 0312 	add.w	r3, r7, #18
 8008d16:	4619      	mov	r1, r3
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff fe73 	bl	8008a04 <perform_ref_signal_measurement>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10c      	bne.n	8008d46 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008d2c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008d2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d208      	bcs.n	8008d46 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008d3e:	e002      	b.n	8008d46 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d44:	e000      	b.n	8008d48 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008d46:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008d48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 80af 	bne.w	8008eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008d52:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008d54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d56:	429a      	cmp	r2, r3
 8008d58:	f240 80aa 	bls.w	8008eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008d6c:	f107 031c 	add.w	r3, r7, #28
 8008d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d72:	4618      	mov	r0, r3
 8008d74:	f006 fa4c 	bl	800f210 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008d78:	8a7b      	ldrh	r3, [r7, #18]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bfb8      	it	lt
 8008d84:	425b      	neglt	r3, r3
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008d8e:	e086      	b.n	8008e9e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008d96:	f107 0314 	add.w	r3, r7, #20
 8008d9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d9e:	f7ff fcdf 	bl	8008760 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d103      	bne.n	8008db2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008daa:	23ce      	movs	r3, #206	; 0xce
 8008dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008db0:	e07e      	b.n	8008eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008db2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4413      	add	r3, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fd2e 	bl	800881c <is_aperture>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008dd0:	e06e      	b.n	8008eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fd32 	bl	8008850 <enable_spad_bit>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008df2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10c      	bne.n	8008e14 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008e06:	4619      	mov	r1, r3
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff fd59 	bl	80088c0 <set_ref_spad_map>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008e14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d146      	bne.n	8008eaa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008e1c:	f107 0312 	add.w	r3, r7, #18
 8008e20:	4619      	mov	r1, r3
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f7ff fdee 	bl	8008a04 <perform_ref_signal_measurement>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008e2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d13b      	bne.n	8008eae <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008e36:	8a7b      	ldrh	r3, [r7, #18]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bfb8      	it	lt
 8008e42:	425b      	neglt	r3, r3
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008e46:	8a7b      	ldrh	r3, [r7, #18]
 8008e48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d21c      	bcs.n	8008e88 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d914      	bls.n	8008e80 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008e56:	f107 031c 	add.w	r3, r7, #28
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fd2f 	bl	80088c0 <set_ref_spad_map>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008e6e:	f107 011c 	add.w	r1, r7, #28
 8008e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e74:	4618      	mov	r0, r3
 8008e76:	f006 f9cb 	bl	800f210 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e00a      	b.n	8008e9e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008e92:	f107 031c 	add.w	r3, r7, #28
 8008e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f006 f9b9 	bl	800f210 <memcpy>
		while (!complete) {
 8008e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f43f af74 	beq.w	8008d90 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008ea8:	e002      	b.n	8008eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008eaa:	bf00      	nop
 8008eac:	e000      	b.n	8008eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008eae:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d115      	bne.n	8008ee4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ebc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008ec4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008ee4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	375c      	adds	r7, #92	; 0x5c
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b093      	sub	sp, #76	; 0x4c
 8008ef4:	af06      	add	r7, sp, #24
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008f08:	23b4      	movs	r3, #180	; 0xb4
 8008f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008f0e:	2306      	movs	r3, #6
 8008f10:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008f12:	232c      	movs	r3, #44	; 0x2c
 8008f14:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f16:	2201      	movs	r2, #1
 8008f18:	21ff      	movs	r1, #255	; 0xff
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f002 fe16 	bl	800bb4c <VL53L0X_WrByte>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008f26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d107      	bne.n	8008f3e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008f2e:	2200      	movs	r2, #0
 8008f30:	214f      	movs	r1, #79	; 0x4f
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f002 fe0a 	bl	800bb4c <VL53L0X_WrByte>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008f3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d107      	bne.n	8008f56 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008f46:	222c      	movs	r2, #44	; 0x2c
 8008f48:	214e      	movs	r1, #78	; 0x4e
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f002 fdfe 	bl	800bb4c <VL53L0X_WrByte>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d107      	bne.n	8008f6e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f5e:	2200      	movs	r2, #0
 8008f60:	21ff      	movs	r1, #255	; 0xff
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f002 fdf2 	bl	800bb4c <VL53L0X_WrByte>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008f6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	21b6      	movs	r1, #182	; 0xb6
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f002 fde4 	bl	800bb4c <VL53L0X_WrByte>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8e:	e009      	b.n	8008fa4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d3f1      	bcc.n	8008f90 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d011      	beq.n	8008fd6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008fb2:	e002      	b.n	8008fba <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008fba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	4413      	add	r3, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff fc2a 	bl	800881c <is_aperture>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d103      	bne.n	8008fd6 <VL53L0X_set_reference_spads+0xe6>
 8008fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d3ee      	bcc.n	8008fb4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fe6:	79f9      	ldrb	r1, [r7, #7]
 8008fe8:	f107 0214 	add.w	r2, r7, #20
 8008fec:	9204      	str	r2, [sp, #16]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	9203      	str	r2, [sp, #12]
 8008ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff4:	9202      	str	r2, [sp, #8]
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	4602      	mov	r2, r0
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fc83 	bl	800890c <enable_ref_spads>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800900c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10c      	bne.n	800902e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	b2da      	uxtb	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	79fa      	ldrb	r2, [r7, #7]
 800902a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800902e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009032:	4618      	mov	r0, r3
 8009034:	3734      	adds	r7, #52	; 0x34
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}

0800903a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800904a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	2100      	movs	r1, #0
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f002 fd74 	bl	800bb4c <VL53L0X_WrByte>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f9e2 	bl	800943a <VL53L0X_measurement_poll_for_completion>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800907a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009082:	2100      	movs	r1, #0
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fa83 	bl	8008590 <VL53L0X_ClearInterruptMask>
 800908a:	4603      	mov	r3, r0
 800908c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800908e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009096:	2200      	movs	r2, #0
 8009098:	2100      	movs	r1, #0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f002 fd56 	bl	800bb4c <VL53L0X_WrByte>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]

	return Status;
 80090a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	4608      	mov	r0, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4603      	mov	r3, r0
 80090c0:	70fb      	strb	r3, [r7, #3]
 80090c2:	460b      	mov	r3, r1
 80090c4:	70bb      	strb	r3, [r7, #2]
 80090c6:	4613      	mov	r3, r2
 80090c8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090d2:	2201      	movs	r2, #1
 80090d4:	21ff      	movs	r1, #255	; 0xff
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f002 fd38 	bl	800bb4c <VL53L0X_WrByte>
 80090dc:	4603      	mov	r3, r0
 80090de:	461a      	mov	r2, r3
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f002 fd2e 	bl	800bb4c <VL53L0X_WrByte>
 80090f0:	4603      	mov	r3, r0
 80090f2:	461a      	mov	r2, r3
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090fa:	2200      	movs	r2, #0
 80090fc:	21ff      	movs	r1, #255	; 0xff
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f002 fd24 	bl	800bb4c <VL53L0X_WrByte>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4313      	orrs	r3, r2
 800910c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01e      	beq.n	8009152 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	21cb      	movs	r1, #203	; 0xcb
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f002 fd95 	bl	800bc50 <VL53L0X_RdByte>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	4313      	orrs	r3, r2
 800912e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02a      	beq.n	800918e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009138:	f107 030e 	add.w	r3, r7, #14
 800913c:	461a      	mov	r2, r3
 800913e:	21ee      	movs	r1, #238	; 0xee
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f002 fd85 	bl	800bc50 <VL53L0X_RdByte>
 8009146:	4603      	mov	r3, r0
 8009148:	461a      	mov	r2, r3
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	4313      	orrs	r3, r2
 800914e:	73fb      	strb	r3, [r7, #15]
 8009150:	e01d      	b.n	800918e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009152:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800915a:	78bb      	ldrb	r3, [r7, #2]
 800915c:	461a      	mov	r2, r3
 800915e:	21cb      	movs	r1, #203	; 0xcb
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f002 fcf3 	bl	800bb4c <VL53L0X_WrByte>
 8009166:	4603      	mov	r3, r0
 8009168:	461a      	mov	r2, r3
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	4313      	orrs	r3, r2
 800916e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009178:	787b      	ldrb	r3, [r7, #1]
 800917a:	2280      	movs	r2, #128	; 0x80
 800917c:	21ee      	movs	r1, #238	; 0xee
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f002 fd32 	bl	800bbe8 <VL53L0X_UpdateByte>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	4313      	orrs	r3, r2
 800918c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800918e:	2201      	movs	r2, #1
 8009190:	21ff      	movs	r1, #255	; 0xff
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f002 fcda 	bl	800bb4c <VL53L0X_WrByte>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4313      	orrs	r3, r2
 80091a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80091a2:	2201      	movs	r2, #1
 80091a4:	2100      	movs	r1, #0
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f002 fcd0 	bl	800bb4c <VL53L0X_WrByte>
 80091ac:	4603      	mov	r3, r0
 80091ae:	461a      	mov	r2, r3
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091b6:	2200      	movs	r2, #0
 80091b8:	21ff      	movs	r1, #255	; 0xff
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f002 fcc6 	bl	800bb4c <VL53L0X_WrByte>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	f023 0310 	bic.w	r3, r3, #16
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	701a      	strb	r2, [r3, #0]

	return Status;
 80091d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b08a      	sub	sp, #40	; 0x28
 80091e6:	af04      	add	r7, sp, #16
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	4611      	mov	r1, r2
 80091ee:	461a      	mov	r2, r3
 80091f0:	460b      	mov	r3, r1
 80091f2:	71fb      	strb	r3, [r7, #7]
 80091f4:	4613      	mov	r3, r2
 80091f6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800920c:	79bb      	ldrb	r3, [r7, #6]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009218:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800921a:	2201      	movs	r2, #1
 800921c:	2101      	movs	r1, #1
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f002 fc94 	bl	800bb4c <VL53L0X_WrByte>
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009230:	2140      	movs	r1, #64	; 0x40
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff ff01 	bl	800903a <VL53L0X_perform_single_ref_calibration>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800923c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d115      	bne.n	8009270 <VL53L0X_perform_vhv_calibration+0x8e>
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d112      	bne.n	8009270 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800924a:	7d39      	ldrb	r1, [r7, #20]
 800924c:	7d7a      	ldrb	r2, [r7, #21]
 800924e:	2300      	movs	r3, #0
 8009250:	9303      	str	r3, [sp, #12]
 8009252:	2301      	movs	r3, #1
 8009254:	9302      	str	r3, [sp, #8]
 8009256:	f107 0313 	add.w	r3, r7, #19
 800925a:	9301      	str	r3, [sp, #4]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	460b      	mov	r3, r1
 8009262:	2101      	movs	r1, #1
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f7ff ff23 	bl	80090b0 <VL53L0X_ref_calibration_io>
 800926a:	4603      	mov	r3, r0
 800926c:	75fb      	strb	r3, [r7, #23]
 800926e:	e002      	b.n	8009276 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d112      	bne.n	80092a4 <VL53L0X_perform_vhv_calibration+0xc2>
 800927e:	79bb      	ldrb	r3, [r7, #6]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00f      	beq.n	80092a4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009284:	7dbb      	ldrb	r3, [r7, #22]
 8009286:	461a      	mov	r2, r3
 8009288:	2101      	movs	r1, #1
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f002 fc5e 	bl	800bb4c <VL53L0X_WrByte>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	7dba      	ldrb	r2, [r7, #22]
 80092a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80092a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	; 0x28
 80092b4:	af04      	add	r7, sp, #16
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4611      	mov	r1, r2
 80092bc:	461a      	mov	r2, r3
 80092be:	460b      	mov	r3, r1
 80092c0:	71fb      	strb	r3, [r7, #7]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80092d6:	79bb      	ldrb	r3, [r7, #6]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80092e2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80092e4:	2202      	movs	r2, #2
 80092e6:	2101      	movs	r1, #1
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f002 fc2f 	bl	800bb4c <VL53L0X_WrByte>
 80092ee:	4603      	mov	r3, r0
 80092f0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80092f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80092fa:	2100      	movs	r1, #0
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f7ff fe9c 	bl	800903a <VL53L0X_perform_single_ref_calibration>
 8009302:	4603      	mov	r3, r0
 8009304:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d115      	bne.n	800933a <VL53L0X_perform_phase_calibration+0x8a>
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d112      	bne.n	800933a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009314:	7d39      	ldrb	r1, [r7, #20]
 8009316:	7d7a      	ldrb	r2, [r7, #21]
 8009318:	2301      	movs	r3, #1
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	2300      	movs	r3, #0
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	f107 0313 	add.w	r3, r7, #19
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	460b      	mov	r3, r1
 800932c:	2101      	movs	r1, #1
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f7ff febe 	bl	80090b0 <VL53L0X_ref_calibration_io>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]
 8009338:	e002      	b.n	8009340 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2200      	movs	r2, #0
 800933e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d112      	bne.n	800936e <VL53L0X_perform_phase_calibration+0xbe>
 8009348:	79bb      	ldrb	r3, [r7, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00f      	beq.n	800936e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800934e:	7dbb      	ldrb	r3, [r7, #22]
 8009350:	461a      	mov	r2, r3
 8009352:	2101      	movs	r1, #1
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f002 fbf9 	bl	800bb4c <VL53L0X_WrByte>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800935e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d103      	bne.n	800936e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	7dba      	ldrb	r2, [r7, #22]
 800936a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800936e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009388:	2300      	movs	r3, #0
 800938a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009396:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009398:	78fa      	ldrb	r2, [r7, #3]
 800939a:	2300      	movs	r3, #0
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f7ff ff1f 	bl	80091e2 <VL53L0X_perform_vhv_calibration>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80093a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d107      	bne.n	80093c0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80093b0:	78fa      	ldrb	r2, [r7, #3]
 80093b2:	2300      	movs	r3, #0
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff ff7a 	bl	80092b0 <VL53L0X_perform_phase_calibration>
 80093bc:	4603      	mov	r3, r0
 80093be:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80093c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10f      	bne.n	80093e8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80093c8:	7dbb      	ldrb	r3, [r7, #22]
 80093ca:	461a      	mov	r2, r3
 80093cc:	2101      	movs	r1, #1
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f002 fbbc 	bl	800bb4c <VL53L0X_WrByte>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80093d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	7dba      	ldrb	r2, [r7, #22]
 80093e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80093e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af04      	add	r7, sp, #16
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
 8009400:	4613      	mov	r3, r2
 8009402:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 8009408:	78b9      	ldrb	r1, [r7, #2]
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	2301      	movs	r3, #1
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	2301      	movs	r3, #1
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	f107 030d 	add.w	r3, r7, #13
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	f107 030e 	add.w	r3, r7, #14
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	460b      	mov	r3, r1
 8009422:	2100      	movs	r1, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fe43 	bl	80090b0 <VL53L0X_ref_calibration_io>
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800942e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800944e:	f107 030f 	add.w	r3, r7, #15
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7fe fdad 	bl	8007fb4 <VL53L0X_GetMeasurementDataReady>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800945e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d110      	bne.n	8009488 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d00f      	beq.n	800948c <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3301      	adds	r3, #1
 8009470:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009478:	d302      	bcc.n	8009480 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800947a:	23f9      	movs	r3, #249	; 0xf9
 800947c:	75fb      	strb	r3, [r7, #23]
			break;
 800947e:	e006      	b.n	800948e <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f002 fc83 	bl	800bd8c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009486:	e7e2      	b.n	800944e <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009488:	bf00      	nop
 800948a:	e000      	b.n	800948e <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800948c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800948e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	4603      	mov	r3, r0
 80094a2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	3301      	adds	r3, #1
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	085b      	lsrs	r3, r3, #1
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b085      	sub	sp, #20
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80094f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094f6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80094f8:	e002      	b.n	8009500 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	089b      	lsrs	r3, r3, #2
 80094fe:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	d8f8      	bhi.n	80094fa <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009508:	e017      	b.n	800953a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4413      	add	r3, r2
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	d30b      	bcc.n	800952e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4413      	add	r3, r2
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	085b      	lsrs	r3, r3, #1
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	4413      	add	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	e002      	b.n	8009534 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	085b      	lsrs	r3, r3, #1
 8009532:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	089b      	lsrs	r3, r3, #2
 8009538:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e4      	bne.n	800950a <VL53L0X_isqrt+0x24>
	}

	return res;
 8009540:	68fb      	ldr	r3, [r7, #12]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b086      	sub	sp, #24
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009556:	2300      	movs	r3, #0
 8009558:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800955a:	2200      	movs	r2, #0
 800955c:	2183      	movs	r1, #131	; 0x83
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f002 faf4 	bl	800bb4c <VL53L0X_WrByte>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	4313      	orrs	r3, r2
 800956c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800956e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d11e      	bne.n	80095b4 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800957a:	f107 030f 	add.w	r3, r7, #15
 800957e:	461a      	mov	r2, r3
 8009580:	2183      	movs	r1, #131	; 0x83
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f002 fb64 	bl	800bc50 <VL53L0X_RdByte>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <VL53L0X_device_read_strobe+0x5a>
 8009592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	3301      	adds	r3, #1
 800959e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80095a6:	d3e8      	bcc.n	800957a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80095ae:	d301      	bcc.n	80095b4 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80095b0:	23f9      	movs	r3, #249	; 0xf9
 80095b2:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80095b4:	2201      	movs	r2, #1
 80095b6:	2183      	movs	r1, #131	; 0x83
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f002 fac7 	bl	800bb4c <VL53L0X_WrByte>
 80095be:	4603      	mov	r3, r0
 80095c0:	461a      	mov	r2, r3
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80095c8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b098      	sub	sp, #96	; 0x60
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009604:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009608:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800961c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009620:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009624:	2b07      	cmp	r3, #7
 8009626:	f000 8408 	beq.w	8009e3a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800962a:	2201      	movs	r2, #1
 800962c:	2180      	movs	r1, #128	; 0x80
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f002 fa8c 	bl	800bb4c <VL53L0X_WrByte>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800963c:	4313      	orrs	r3, r2
 800963e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009642:	2201      	movs	r2, #1
 8009644:	21ff      	movs	r1, #255	; 0xff
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f002 fa80 	bl	800bb4c <VL53L0X_WrByte>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009654:	4313      	orrs	r3, r2
 8009656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800965a:	2200      	movs	r2, #0
 800965c:	2100      	movs	r1, #0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f002 fa74 	bl	800bb4c <VL53L0X_WrByte>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966c:	4313      	orrs	r3, r2
 800966e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009672:	2206      	movs	r2, #6
 8009674:	21ff      	movs	r1, #255	; 0xff
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f002 fa68 	bl	800bb4c <VL53L0X_WrByte>
 800967c:	4603      	mov	r3, r0
 800967e:	461a      	mov	r2, r3
 8009680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009684:	4313      	orrs	r3, r2
 8009686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800968a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800968e:	461a      	mov	r2, r3
 8009690:	2183      	movs	r1, #131	; 0x83
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f002 fadc 	bl	800bc50 <VL53L0X_RdByte>
 8009698:	4603      	mov	r3, r0
 800969a:	461a      	mov	r2, r3
 800969c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a0:	4313      	orrs	r3, r2
 80096a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80096a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096aa:	f043 0304 	orr.w	r3, r3, #4
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	461a      	mov	r2, r3
 80096b2:	2183      	movs	r1, #131	; 0x83
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f002 fa49 	bl	800bb4c <VL53L0X_WrByte>
 80096ba:	4603      	mov	r3, r0
 80096bc:	461a      	mov	r2, r3
 80096be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c2:	4313      	orrs	r3, r2
 80096c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80096c8:	2207      	movs	r2, #7
 80096ca:	21ff      	movs	r1, #255	; 0xff
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f002 fa3d 	bl	800bb4c <VL53L0X_WrByte>
 80096d2:	4603      	mov	r3, r0
 80096d4:	461a      	mov	r2, r3
 80096d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096da:	4313      	orrs	r3, r2
 80096dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80096e0:	2201      	movs	r2, #1
 80096e2:	2181      	movs	r1, #129	; 0x81
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 fa31 	bl	800bb4c <VL53L0X_WrByte>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f002 fb47 	bl	800bd8c <VL53L0X_PollingDelay>
 80096fe:	4603      	mov	r3, r0
 8009700:	461a      	mov	r2, r3
 8009702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009706:	4313      	orrs	r3, r2
 8009708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800970c:	2201      	movs	r2, #1
 800970e:	2180      	movs	r1, #128	; 0x80
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f002 fa1b 	bl	800bb4c <VL53L0X_WrByte>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800971e:	4313      	orrs	r3, r2
 8009720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8098 	beq.w	8009860 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009730:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009734:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 8091 	bne.w	8009860 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800973e:	226b      	movs	r2, #107	; 0x6b
 8009740:	2194      	movs	r1, #148	; 0x94
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f002 fa02 	bl	800bb4c <VL53L0X_WrByte>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009750:	4313      	orrs	r3, r2
 8009752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff fef9 	bl	800954e <VL53L0X_device_read_strobe>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009764:	4313      	orrs	r3, r2
 8009766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800976a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800976e:	461a      	mov	r2, r3
 8009770:	2190      	movs	r1, #144	; 0x90
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f002 face 	bl	800bd14 <VL53L0X_RdDWord>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009780:	4313      	orrs	r3, r2
 8009782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	0a1b      	lsrs	r3, r3, #8
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009790:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	0bdb      	lsrs	r3, r3, #15
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80097a2:	2224      	movs	r2, #36	; 0x24
 80097a4:	2194      	movs	r1, #148	; 0x94
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f002 f9d0 	bl	800bb4c <VL53L0X_WrByte>
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff fec7 	bl	800954e <VL53L0X_device_read_strobe>
 80097c0:	4603      	mov	r3, r0
 80097c2:	461a      	mov	r2, r3
 80097c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097d2:	461a      	mov	r2, r3
 80097d4:	2190      	movs	r1, #144	; 0x90
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f002 fa9c 	bl	800bd14 <VL53L0X_RdDWord>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	0e1b      	lsrs	r3, r3, #24
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	0c1b      	lsrs	r3, r3, #16
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	0a1b      	lsrs	r3, r3, #8
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	b2db      	uxtb	r3, r3
 8009806:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009808:	2225      	movs	r2, #37	; 0x25
 800980a:	2194      	movs	r1, #148	; 0x94
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f002 f99d 	bl	800bb4c <VL53L0X_WrByte>
 8009812:	4603      	mov	r3, r0
 8009814:	461a      	mov	r2, r3
 8009816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800981a:	4313      	orrs	r3, r2
 800981c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff fe94 	bl	800954e <VL53L0X_device_read_strobe>
 8009826:	4603      	mov	r3, r0
 8009828:	461a      	mov	r2, r3
 800982a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800982e:	4313      	orrs	r3, r2
 8009830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009838:	461a      	mov	r2, r3
 800983a:	2190      	movs	r1, #144	; 0x90
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f002 fa69 	bl	800bd14 <VL53L0X_RdDWord>
 8009842:	4603      	mov	r3, r0
 8009844:	461a      	mov	r2, r3
 8009846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800984a:	4313      	orrs	r3, r2
 800984c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	0e1b      	lsrs	r3, r3, #24
 8009854:	b2db      	uxtb	r3, r3
 8009856:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985a:	0c1b      	lsrs	r3, r3, #16
 800985c:	b2db      	uxtb	r3, r3
 800985e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8189 	beq.w	8009b7e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800986c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009870:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 8182 	bne.w	8009b7e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800987a:	2202      	movs	r2, #2
 800987c:	2194      	movs	r1, #148	; 0x94
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f002 f964 	bl	800bb4c <VL53L0X_WrByte>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800988c:	4313      	orrs	r3, r2
 800988e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fe5b 	bl	800954e <VL53L0X_device_read_strobe>
 8009898:	4603      	mov	r3, r0
 800989a:	461a      	mov	r2, r3
 800989c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098a0:	4313      	orrs	r3, r2
 80098a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80098a6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80098aa:	461a      	mov	r2, r3
 80098ac:	2190      	movs	r1, #144	; 0x90
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f002 f9ce 	bl	800bc50 <VL53L0X_RdByte>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098bc:	4313      	orrs	r3, r2
 80098be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80098c2:	227b      	movs	r2, #123	; 0x7b
 80098c4:	2194      	movs	r1, #148	; 0x94
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f002 f940 	bl	800bb4c <VL53L0X_WrByte>
 80098cc:	4603      	mov	r3, r0
 80098ce:	461a      	mov	r2, r3
 80098d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098d4:	4313      	orrs	r3, r2
 80098d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fe37 	bl	800954e <VL53L0X_device_read_strobe>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098e8:	4313      	orrs	r3, r2
 80098ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80098ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80098f2:	461a      	mov	r2, r3
 80098f4:	2190      	movs	r1, #144	; 0x90
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f002 f9aa 	bl	800bc50 <VL53L0X_RdByte>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461a      	mov	r2, r3
 8009900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009904:	4313      	orrs	r3, r2
 8009906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800990a:	2277      	movs	r2, #119	; 0x77
 800990c:	2194      	movs	r1, #148	; 0x94
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f002 f91c 	bl	800bb4c <VL53L0X_WrByte>
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800991c:	4313      	orrs	r3, r2
 800991e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fe13 	bl	800954e <VL53L0X_device_read_strobe>
 8009928:	4603      	mov	r3, r0
 800992a:	461a      	mov	r2, r3
 800992c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009930:	4313      	orrs	r3, r2
 8009932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800993a:	461a      	mov	r2, r3
 800993c:	2190      	movs	r1, #144	; 0x90
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f002 f9e8 	bl	800bd14 <VL53L0X_RdDWord>
 8009944:	4603      	mov	r3, r0
 8009946:	461a      	mov	r2, r3
 8009948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800994c:	4313      	orrs	r3, r2
 800994e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	0e5b      	lsrs	r3, r3, #25
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995c:	b2db      	uxtb	r3, r3
 800995e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	0c9b      	lsrs	r3, r3, #18
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	b2db      	uxtb	r3, r3
 800996c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	0adb      	lsrs	r3, r3, #11
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009978:	b2db      	uxtb	r3, r3
 800997a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	091b      	lsrs	r3, r3, #4
 8009980:	b2db      	uxtb	r3, r3
 8009982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009986:	b2db      	uxtb	r3, r3
 8009988:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	b2db      	uxtb	r3, r3
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	b2db      	uxtb	r3, r3
 8009992:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800999c:	2278      	movs	r2, #120	; 0x78
 800999e:	2194      	movs	r1, #148	; 0x94
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f002 f8d3 	bl	800bb4c <VL53L0X_WrByte>
 80099a6:	4603      	mov	r3, r0
 80099a8:	461a      	mov	r2, r3
 80099aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ae:	4313      	orrs	r3, r2
 80099b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff fdca 	bl	800954e <VL53L0X_device_read_strobe>
 80099ba:	4603      	mov	r3, r0
 80099bc:	461a      	mov	r2, r3
 80099be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099cc:	461a      	mov	r2, r3
 80099ce:	2190      	movs	r1, #144	; 0x90
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f002 f99f 	bl	800bd14 <VL53L0X_RdDWord>
 80099d6:	4603      	mov	r3, r0
 80099d8:	461a      	mov	r2, r3
 80099da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099de:	4313      	orrs	r3, r2
 80099e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	0f5b      	lsrs	r3, r3, #29
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ee:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80099f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099f4:	4413      	add	r3, r2
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	0d9b      	lsrs	r3, r3, #22
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	0bdb      	lsrs	r3, r3, #15
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	0a1b      	lsrs	r3, r3, #8
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	085b      	lsrs	r3, r3, #1
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	019b      	lsls	r3, r3, #6
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009a44:	2279      	movs	r2, #121	; 0x79
 8009a46:	2194      	movs	r1, #148	; 0x94
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f002 f87f 	bl	800bb4c <VL53L0X_WrByte>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	461a      	mov	r2, r3
 8009a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff fd76 	bl	800954e <VL53L0X_device_read_strobe>
 8009a62:	4603      	mov	r3, r0
 8009a64:	461a      	mov	r2, r3
 8009a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a74:	461a      	mov	r2, r3
 8009a76:	2190      	movs	r1, #144	; 0x90
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f002 f94b 	bl	800bd14 <VL53L0X_RdDWord>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a86:	4313      	orrs	r3, r2
 8009a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	0e9b      	lsrs	r3, r3, #26
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a96:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a9c:	4413      	add	r3, r2
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	0cdb      	lsrs	r3, r3, #19
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	0b1b      	lsrs	r3, r3, #12
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	095b      	lsrs	r3, r3, #5
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009ade:	227a      	movs	r2, #122	; 0x7a
 8009ae0:	2194      	movs	r1, #148	; 0x94
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f002 f832 	bl	800bb4c <VL53L0X_WrByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009af0:	4313      	orrs	r3, r2
 8009af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fd29 	bl	800954e <VL53L0X_device_read_strobe>
 8009afc:	4603      	mov	r3, r0
 8009afe:	461a      	mov	r2, r3
 8009b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2190      	movs	r1, #144	; 0x90
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f002 f8fe 	bl	800bd14 <VL53L0X_RdDWord>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b20:	4313      	orrs	r3, r2
 8009b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	0f9b      	lsrs	r3, r3, #30
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b36:	4413      	add	r3, r2
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	0ddb      	lsrs	r3, r3, #23
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	0c1b      	lsrs	r3, r3, #16
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	0a5b      	lsrs	r3, r3, #9
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	089b      	lsrs	r3, r3, #2
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80f1 	beq.w	8009d6c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b8e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f040 80ea 	bne.w	8009d6c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009b98:	227b      	movs	r2, #123	; 0x7b
 8009b9a:	2194      	movs	r1, #148	; 0x94
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 ffd5 	bl	800bb4c <VL53L0X_WrByte>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff fccc 	bl	800954e <VL53L0X_device_read_strobe>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bc8:	461a      	mov	r2, r3
 8009bca:	2190      	movs	r1, #144	; 0x90
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f002 f8a1 	bl	800bd14 <VL53L0X_RdDWord>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009be0:	227c      	movs	r2, #124	; 0x7c
 8009be2:	2194      	movs	r1, #148	; 0x94
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 ffb1 	bl	800bb4c <VL53L0X_WrByte>
 8009bea:	4603      	mov	r3, r0
 8009bec:	461a      	mov	r2, r3
 8009bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff fca8 	bl	800954e <VL53L0X_device_read_strobe>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c10:	461a      	mov	r2, r3
 8009c12:	2190      	movs	r1, #144	; 0x90
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f002 f87d 	bl	800bd14 <VL53L0X_RdDWord>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009c28:	2273      	movs	r2, #115	; 0x73
 8009c2a:	2194      	movs	r1, #148	; 0x94
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 ff8d 	bl	800bb4c <VL53L0X_WrByte>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff fc84 	bl	800954e <VL53L0X_device_read_strobe>
 8009c46:	4603      	mov	r3, r0
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c58:	461a      	mov	r2, r3
 8009c5a:	2190      	movs	r1, #144	; 0x90
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f002 f859 	bl	800bd14 <VL53L0X_RdDWord>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009c78:	2274      	movs	r2, #116	; 0x74
 8009c7a:	2194      	movs	r1, #148	; 0x94
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 ff65 	bl	800bb4c <VL53L0X_WrByte>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fc5c 	bl	800954e <VL53L0X_device_read_strobe>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ca8:	461a      	mov	r2, r3
 8009caa:	2190      	movs	r1, #144	; 0x90
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f002 f831 	bl	800bd14 <VL53L0X_RdDWord>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009cca:	2275      	movs	r2, #117	; 0x75
 8009ccc:	2194      	movs	r1, #148	; 0x94
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 ff3c 	bl	800bb4c <VL53L0X_WrByte>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fc33 	bl	800954e <VL53L0X_device_read_strobe>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	2190      	movs	r1, #144	; 0x90
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f002 f808 	bl	800bd14 <VL53L0X_RdDWord>
 8009d04:	4603      	mov	r3, r0
 8009d06:	461a      	mov	r2, r3
 8009d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009d1a:	2276      	movs	r2, #118	; 0x76
 8009d1c:	2194      	movs	r1, #148	; 0x94
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 ff14 	bl	800bb4c <VL53L0X_WrByte>
 8009d24:	4603      	mov	r3, r0
 8009d26:	461a      	mov	r2, r3
 8009d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff fc0b 	bl	800954e <VL53L0X_device_read_strobe>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d40:	4313      	orrs	r3, r2
 8009d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	2190      	movs	r1, #144	; 0x90
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 ffe0 	bl	800bd14 <VL53L0X_RdDWord>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2181      	movs	r1, #129	; 0x81
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 feeb 	bl	800bb4c <VL53L0X_WrByte>
 8009d76:	4603      	mov	r3, r0
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009d84:	2206      	movs	r2, #6
 8009d86:	21ff      	movs	r1, #255	; 0xff
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 fedf 	bl	800bb4c <VL53L0X_WrByte>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d96:	4313      	orrs	r3, r2
 8009d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009d9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009da0:	461a      	mov	r2, r3
 8009da2:	2183      	movs	r1, #131	; 0x83
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 ff53 	bl	800bc50 <VL53L0X_RdByte>
 8009daa:	4603      	mov	r3, r0
 8009dac:	461a      	mov	r2, r3
 8009dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009db8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dbc:	f023 0304 	bic.w	r3, r3, #4
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	2183      	movs	r1, #131	; 0x83
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fec0 	bl	800bb4c <VL53L0X_WrByte>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009dda:	2201      	movs	r2, #1
 8009ddc:	21ff      	movs	r1, #255	; 0xff
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 feb4 	bl	800bb4c <VL53L0X_WrByte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009df2:	2201      	movs	r2, #1
 8009df4:	2100      	movs	r1, #0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fea8 	bl	800bb4c <VL53L0X_WrByte>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e04:	4313      	orrs	r3, r2
 8009e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	21ff      	movs	r1, #255	; 0xff
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 fe9c 	bl	800bb4c <VL53L0X_WrByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e22:	2200      	movs	r2, #0
 8009e24:	2180      	movs	r1, #128	; 0x80
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 fe90 	bl	800bb4c <VL53L0X_WrByte>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009e3a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f040 808f 	bne.w	8009f62 <VL53L0X_get_info_from_device+0x98e>
 8009e44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e48:	2b07      	cmp	r3, #7
 8009e4a:	f000 808a 	beq.w	8009f62 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d024      	beq.n	8009ea2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009e58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e5c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d11e      	bne.n	8009ea2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009e6a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009e74:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009e78:	2300      	movs	r3, #0
 8009e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e7c:	e00e      	b.n	8009e9c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009e7e:	f107 0208 	add.w	r2, r7, #8
 8009e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e84:	4413      	add	r3, r2
 8009e86:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009e92:	460a      	mov	r2, r1
 8009e94:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e98:	3301      	adds	r3, #1
 8009e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	dded      	ble.n	8009e7e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d018      	beq.n	8009ede <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d112      	bne.n	8009ede <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009eb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ec2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	33f3      	adds	r3, #243	; 0xf3
 8009ed0:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009ed2:	f107 0310 	add.w	r3, r7, #16
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eda:	f005 ff29 	bl	800fd30 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d030      	beq.n	8009f4a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009ee8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eec:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d12a      	bne.n	8009f4a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f06:	025b      	lsls	r3, r3, #9
 8009f08:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f0e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d011      	beq.n	8009f42 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009f1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f2c:	fb02 f303 	mul.w	r3, r2, r3
 8009f30:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009f32:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009f36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009f3a:	425b      	negs	r3, r3
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009f42:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009f4a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009f58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f62:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3760      	adds	r7, #96	; 0x60
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b087      	sub	sp, #28
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	460b      	mov	r3, r1
 8009f78:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009f7a:	f240 6277 	movw	r2, #1655	; 0x677
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009f86:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009f8a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b087      	sub	sp, #28
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d017      	beq.n	8009ff4 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009fca:	e005      	b.n	8009fd8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009fd2:	89fb      	ldrh	r3, [r7, #14]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1f4      	bne.n	8009fcc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009fe2:	89fb      	ldrh	r3, [r7, #14]
 8009fe4:	021b      	lsls	r3, r3, #8
 8009fe6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009ff0:	4413      	add	r3, r2
 8009ff2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009ff4:	8afb      	ldrh	r3, [r7, #22]

}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	4603      	mov	r3, r0
 800a00a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a010:	88fb      	ldrh	r3, [r7, #6]
 800a012:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a014:	88fa      	ldrh	r2, [r7, #6]
 800a016:	0a12      	lsrs	r2, r2, #8
 800a018:	b292      	uxth	r2, r2
 800a01a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a01c:	3301      	adds	r3, #1
 800a01e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a020:	68fb      	ldr	r3, [r7, #12]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	4619      	mov	r1, r3
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff ff91 	bl	8009f6e <VL53L0X_calc_macro_period_ps>
 800a04c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a054:	4a0a      	ldr	r2, [pc, #40]	; (800a080 <VL53L0X_calc_timeout_mclks+0x50>)
 800a056:	fba2 2303 	umull	r2, r3, r2, r3
 800a05a:	099b      	lsrs	r3, r3, #6
 800a05c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a064:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	fbb2 f3f3 	udiv	r3, r2, r3
 800a074:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a076:	69fb      	ldr	r3, [r7, #28]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	10624dd3 	.word	0x10624dd3

0800a084 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	807b      	strh	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a098:	787b      	ldrb	r3, [r7, #1]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7ff ff66 	bl	8009f6e <VL53L0X_calc_macro_period_ps>
 800a0a2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0aa:	4a0a      	ldr	r2, [pc, #40]	; (800a0d4 <VL53L0X_calc_timeout_us+0x50>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	099b      	lsrs	r3, r3, #6
 800a0b2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a0b4:	887b      	ldrh	r3, [r7, #2]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	fb02 f303 	mul.w	r3, r2, r3
 800a0bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a0c0:	4a04      	ldr	r2, [pc, #16]	; (800a0d4 <VL53L0X_calc_timeout_us+0x50>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	099b      	lsrs	r3, r3, #6
 800a0c8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a0ca:	697b      	ldr	r3, [r7, #20]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	10624dd3 	.word	0x10624dd3

0800a0d8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08c      	sub	sp, #48	; 0x30
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <get_sequence_step_timeout+0x38>
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d002      	beq.n	800a110 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d128      	bne.n	800a162 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a110:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a114:	461a      	mov	r2, r3
 800a116:	2100      	movs	r1, #0
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f7fd fa25 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a11e:	4603      	mov	r3, r0
 800a120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a124:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a12c:	f107 0320 	add.w	r3, r7, #32
 800a130:	461a      	mov	r2, r3
 800a132:	2146      	movs	r1, #70	; 0x46
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f001 fd8b 	bl	800bc50 <VL53L0X_RdByte>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a140:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a144:	b29b      	uxth	r3, r3
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff ff5b 	bl	800a002 <VL53L0X_decode_timeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a150:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a156:	4619      	mov	r1, r3
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff ff93 	bl	800a084 <VL53L0X_calc_timeout_us>
 800a15e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a160:	e092      	b.n	800a288 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d135      	bne.n	800a1d4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a168:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a16c:	461a      	mov	r2, r3
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7fd f9f9 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a17c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a180:	2b00      	cmp	r3, #0
 800a182:	f040 8081 	bne.w	800a288 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a186:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a18a:	461a      	mov	r2, r3
 800a18c:	2100      	movs	r1, #0
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7fd f9ea 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a19a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a1a2:	f107 031e 	add.w	r3, r7, #30
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	2151      	movs	r1, #81	; 0x51
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f001 fd7a 	bl	800bca4 <VL53L0X_RdWord>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a1b6:	8bfb      	ldrh	r3, [r7, #30]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff ff22 	bl	800a002 <VL53L0X_decode_timeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a1c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f7ff ff5a 	bl	800a084 <VL53L0X_calc_timeout_us>
 800a1d0:	62b8      	str	r0, [r7, #40]	; 0x28
 800a1d2:	e059      	b.n	800a288 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d156      	bne.n	800a288 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a1da:	f107 0314 	add.w	r3, r7, #20
 800a1de:	4619      	mov	r1, r3
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7fd facd 	bl	8007780 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01d      	beq.n	800a22c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a1f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7fd f9b5 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a204:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10f      	bne.n	800a22c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a20c:	f107 031e 	add.w	r3, r7, #30
 800a210:	461a      	mov	r2, r3
 800a212:	2151      	movs	r1, #81	; 0x51
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f001 fd45 	bl	800bca4 <VL53L0X_RdWord>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a220:	8bfb      	ldrh	r3, [r7, #30]
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff feed 	bl	800a002 <VL53L0X_decode_timeout>
 800a228:	4603      	mov	r3, r0
 800a22a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a22c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a230:	2b00      	cmp	r3, #0
 800a232:	d109      	bne.n	800a248 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a234:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a238:	461a      	mov	r2, r3
 800a23a:	2101      	movs	r1, #1
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7fd f993 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a242:	4603      	mov	r3, r0
 800a244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a248:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10f      	bne.n	800a270 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a250:	f107 031c 	add.w	r3, r7, #28
 800a254:	461a      	mov	r2, r3
 800a256:	2171      	movs	r1, #113	; 0x71
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f001 fd23 	bl	800bca4 <VL53L0X_RdWord>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a264:	8bbb      	ldrh	r3, [r7, #28]
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff fecb 	bl	800a002 <VL53L0X_decode_timeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a270:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a272:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a278:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a27e:	4619      	mov	r1, r3
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff feff 	bl	800a084 <VL53L0X_calc_timeout_us>
 800a286:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a28c:	601a      	str	r2, [r3, #0]

	return Status;
 800a28e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a292:	4618      	mov	r0, r3
 800a294:	3730      	adds	r7, #48	; 0x30
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b08a      	sub	sp, #40	; 0x28
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <set_sequence_step_timeout+0x26>
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d002      	beq.n	800a2c0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a2ba:	7afb      	ldrb	r3, [r7, #11]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d138      	bne.n	800a332 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a2c0:	f107 031b 	add.w	r3, r7, #27
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7fd f94d 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a2d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d11a      	bne.n	800a312 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a2dc:	7efb      	ldrb	r3, [r7, #27]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	6879      	ldr	r1, [r7, #4]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fea4 	bl	800a030 <VL53L0X_calc_timeout_mclks>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a2ec:	8bbb      	ldrh	r3, [r7, #28]
 800a2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f2:	d903      	bls.n	800a2fc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a2f4:	23ff      	movs	r3, #255	; 0xff
 800a2f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2fa:	e004      	b.n	800a306 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a2fc:	8bbb      	ldrh	r3, [r7, #28]
 800a2fe:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a300:	3b01      	subs	r3, #1
 800a302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a316:	2b00      	cmp	r3, #0
 800a318:	f040 80ab 	bne.w	800a472 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a31c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a320:	461a      	mov	r2, r3
 800a322:	2146      	movs	r1, #70	; 0x46
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f001 fc11 	bl	800bb4c <VL53L0X_WrByte>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a330:	e09f      	b.n	800a472 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	2b03      	cmp	r3, #3
 800a336:	d135      	bne.n	800a3a4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d11b      	bne.n	800a378 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a340:	f107 031b 	add.w	r3, r7, #27
 800a344:	461a      	mov	r2, r3
 800a346:	2100      	movs	r1, #0
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fd f90d 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a34e:	4603      	mov	r3, r0
 800a350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a354:	7efb      	ldrb	r3, [r7, #27]
 800a356:	461a      	mov	r2, r3
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fe68 	bl	800a030 <VL53L0X_calc_timeout_mclks>
 800a360:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a362:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a366:	4618      	mov	r0, r3
 800a368:	f7ff fe1f 	bl	8009faa <VL53L0X_encode_timeout>
 800a36c:	4603      	mov	r3, r0
 800a36e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a370:	8b3a      	ldrh	r2, [r7, #24]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a378:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d108      	bne.n	800a392 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a380:	8b3b      	ldrh	r3, [r7, #24]
 800a382:	461a      	mov	r2, r3
 800a384:	2151      	movs	r1, #81	; 0x51
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f001 fc04 	bl	800bb94 <VL53L0X_WrWord>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a392:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a396:	2b00      	cmp	r3, #0
 800a398:	d16b      	bne.n	800a472 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a3a2:	e066      	b.n	800a472 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d160      	bne.n	800a46c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a3aa:	f107 0310 	add.w	r3, r7, #16
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7fd f9e5 	bl	8007780 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a3ba:	7cfb      	ldrb	r3, [r7, #19]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01d      	beq.n	800a3fc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a3c0:	f107 031b 	add.w	r3, r7, #27
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7fd f8cd 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a3d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10f      	bne.n	800a3fc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a3dc:	f107 0318 	add.w	r3, r7, #24
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	2151      	movs	r1, #81	; 0x51
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f001 fc5d 	bl	800bca4 <VL53L0X_RdWord>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a3f0:	8b3b      	ldrh	r3, [r7, #24]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fe05 	bl	800a002 <VL53L0X_decode_timeout>
 800a3f8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a3fa:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a3fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a404:	f107 031b 	add.w	r3, r7, #27
 800a408:	461a      	mov	r2, r3
 800a40a:	2101      	movs	r1, #1
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7fd f8ab 	bl	8007568 <VL53L0X_GetVcselPulsePeriod>
 800a412:	4603      	mov	r3, r0
 800a414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d128      	bne.n	800a472 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a420:	7efb      	ldrb	r3, [r7, #27]
 800a422:	461a      	mov	r2, r3
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff fe02 	bl	800a030 <VL53L0X_calc_timeout_mclks>
 800a42c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a42e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a430:	6a3a      	ldr	r2, [r7, #32]
 800a432:	4413      	add	r3, r2
 800a434:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a436:	6a38      	ldr	r0, [r7, #32]
 800a438:	f7ff fdb7 	bl	8009faa <VL53L0X_encode_timeout>
 800a43c:	4603      	mov	r3, r0
 800a43e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a440:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a444:	2b00      	cmp	r3, #0
 800a446:	d108      	bne.n	800a45a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a448:	8bfb      	ldrh	r3, [r7, #30]
 800a44a:	461a      	mov	r2, r3
 800a44c:	2171      	movs	r1, #113	; 0x71
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f001 fba0 	bl	800bb94 <VL53L0X_WrWord>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a45a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d107      	bne.n	800a472 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a46a:	e002      	b.n	800a472 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a46c:	23fc      	movs	r3, #252	; 0xfc
 800a46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a472:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a476:	4618      	mov	r0, r3
 800a478:	3728      	adds	r7, #40	; 0x28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b08a      	sub	sp, #40	; 0x28
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	70fb      	strb	r3, [r7, #3]
 800a48a:	4613      	mov	r3, r2
 800a48c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a494:	230c      	movs	r3, #12
 800a496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a49a:	2312      	movs	r3, #18
 800a49c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a4a6:	230e      	movs	r3, #14
 800a4a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a4b0:	78bb      	ldrb	r3, [r7, #2]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4bc:	23fc      	movs	r3, #252	; 0xfc
 800a4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4c2:	e020      	b.n	800a506 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10d      	bne.n	800a4e6 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a4ca:	78ba      	ldrb	r2, [r7, #2]
 800a4cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d304      	bcc.n	800a4de <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a4d4:	78ba      	ldrb	r2, [r7, #2]
 800a4d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d903      	bls.n	800a4e6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4de:	23fc      	movs	r3, #252	; 0xfc
 800a4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4e4:	e00f      	b.n	800a506 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d10c      	bne.n	800a506 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a4ec:	78ba      	ldrb	r2, [r7, #2]
 800a4ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d304      	bcc.n	800a500 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a4f6:	78ba      	ldrb	r2, [r7, #2]
 800a4f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d902      	bls.n	800a506 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a500:	23fc      	movs	r3, #252	; 0xfc
 800a502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a506:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a50e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a512:	e239      	b.n	800a988 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d150      	bne.n	800a5bc <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a51a:	78bb      	ldrb	r3, [r7, #2]
 800a51c:	2b0c      	cmp	r3, #12
 800a51e:	d110      	bne.n	800a542 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a520:	2218      	movs	r2, #24
 800a522:	2157      	movs	r1, #87	; 0x57
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f001 fb11 	bl	800bb4c <VL53L0X_WrByte>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a530:	2208      	movs	r2, #8
 800a532:	2156      	movs	r1, #86	; 0x56
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f001 fb09 	bl	800bb4c <VL53L0X_WrByte>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a540:	e17f      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a542:	78bb      	ldrb	r3, [r7, #2]
 800a544:	2b0e      	cmp	r3, #14
 800a546:	d110      	bne.n	800a56a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a548:	2230      	movs	r2, #48	; 0x30
 800a54a:	2157      	movs	r1, #87	; 0x57
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 fafd 	bl	800bb4c <VL53L0X_WrByte>
 800a552:	4603      	mov	r3, r0
 800a554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a558:	2208      	movs	r2, #8
 800a55a:	2156      	movs	r1, #86	; 0x56
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 faf5 	bl	800bb4c <VL53L0X_WrByte>
 800a562:	4603      	mov	r3, r0
 800a564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a568:	e16b      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a56a:	78bb      	ldrb	r3, [r7, #2]
 800a56c:	2b10      	cmp	r3, #16
 800a56e:	d110      	bne.n	800a592 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a570:	2240      	movs	r2, #64	; 0x40
 800a572:	2157      	movs	r1, #87	; 0x57
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 fae9 	bl	800bb4c <VL53L0X_WrByte>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a580:	2208      	movs	r2, #8
 800a582:	2156      	movs	r1, #86	; 0x56
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fae1 	bl	800bb4c <VL53L0X_WrByte>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a590:	e157      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a592:	78bb      	ldrb	r3, [r7, #2]
 800a594:	2b12      	cmp	r3, #18
 800a596:	f040 8154 	bne.w	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a59a:	2250      	movs	r2, #80	; 0x50
 800a59c:	2157      	movs	r1, #87	; 0x57
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f001 fad4 	bl	800bb4c <VL53L0X_WrByte>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a5aa:	2208      	movs	r2, #8
 800a5ac:	2156      	movs	r1, #86	; 0x56
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 facc 	bl	800bb4c <VL53L0X_WrByte>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5ba:	e142      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	f040 813f 	bne.w	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a5c4:	78bb      	ldrb	r3, [r7, #2]
 800a5c6:	2b08      	cmp	r3, #8
 800a5c8:	d14c      	bne.n	800a664 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a5ca:	2210      	movs	r2, #16
 800a5cc:	2148      	movs	r1, #72	; 0x48
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fabc 	bl	800bb4c <VL53L0X_WrByte>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a5da:	2208      	movs	r2, #8
 800a5dc:	2147      	movs	r1, #71	; 0x47
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fab4 	bl	800bb4c <VL53L0X_WrByte>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	2132      	movs	r1, #50	; 0x32
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 faac 	bl	800bb4c <VL53L0X_WrByte>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a602:	220c      	movs	r2, #12
 800a604:	2130      	movs	r1, #48	; 0x30
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 faa0 	bl	800bb4c <VL53L0X_WrByte>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a614:	4313      	orrs	r3, r2
 800a616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a61a:	2201      	movs	r2, #1
 800a61c:	21ff      	movs	r1, #255	; 0xff
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 fa94 	bl	800bb4c <VL53L0X_WrByte>
 800a624:	4603      	mov	r3, r0
 800a626:	461a      	mov	r2, r3
 800a628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a632:	2230      	movs	r2, #48	; 0x30
 800a634:	2130      	movs	r1, #48	; 0x30
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f001 fa88 	bl	800bb4c <VL53L0X_WrByte>
 800a63c:	4603      	mov	r3, r0
 800a63e:	461a      	mov	r2, r3
 800a640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a644:	4313      	orrs	r3, r2
 800a646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a64a:	2200      	movs	r2, #0
 800a64c:	21ff      	movs	r1, #255	; 0xff
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fa7c 	bl	800bb4c <VL53L0X_WrByte>
 800a654:	4603      	mov	r3, r0
 800a656:	461a      	mov	r2, r3
 800a658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a65c:	4313      	orrs	r3, r2
 800a65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a662:	e0ee      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a664:	78bb      	ldrb	r3, [r7, #2]
 800a666:	2b0a      	cmp	r3, #10
 800a668:	d14c      	bne.n	800a704 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a66a:	2228      	movs	r2, #40	; 0x28
 800a66c:	2148      	movs	r1, #72	; 0x48
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f001 fa6c 	bl	800bb4c <VL53L0X_WrByte>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a67a:	2208      	movs	r2, #8
 800a67c:	2147      	movs	r1, #71	; 0x47
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 fa64 	bl	800bb4c <VL53L0X_WrByte>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a68a:	2203      	movs	r2, #3
 800a68c:	2132      	movs	r1, #50	; 0x32
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f001 fa5c 	bl	800bb4c <VL53L0X_WrByte>
 800a694:	4603      	mov	r3, r0
 800a696:	461a      	mov	r2, r3
 800a698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a69c:	4313      	orrs	r3, r2
 800a69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a6a2:	2209      	movs	r2, #9
 800a6a4:	2130      	movs	r1, #48	; 0x30
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 fa50 	bl	800bb4c <VL53L0X_WrByte>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	21ff      	movs	r1, #255	; 0xff
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f001 fa44 	bl	800bb4c <VL53L0X_WrByte>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	2130      	movs	r1, #48	; 0x30
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 fa38 	bl	800bb4c <VL53L0X_WrByte>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	21ff      	movs	r1, #255	; 0xff
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f001 fa2c 	bl	800bb4c <VL53L0X_WrByte>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a702:	e09e      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a704:	78bb      	ldrb	r3, [r7, #2]
 800a706:	2b0c      	cmp	r3, #12
 800a708:	d14c      	bne.n	800a7a4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a70a:	2238      	movs	r2, #56	; 0x38
 800a70c:	2148      	movs	r1, #72	; 0x48
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fa1c 	bl	800bb4c <VL53L0X_WrByte>
 800a714:	4603      	mov	r3, r0
 800a716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a71a:	2208      	movs	r2, #8
 800a71c:	2147      	movs	r1, #71	; 0x47
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f001 fa14 	bl	800bb4c <VL53L0X_WrByte>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a72a:	2203      	movs	r2, #3
 800a72c:	2132      	movs	r1, #50	; 0x32
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f001 fa0c 	bl	800bb4c <VL53L0X_WrByte>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a73c:	4313      	orrs	r3, r2
 800a73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a742:	2208      	movs	r2, #8
 800a744:	2130      	movs	r1, #48	; 0x30
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 fa00 	bl	800bb4c <VL53L0X_WrByte>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461a      	mov	r2, r3
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a754:	4313      	orrs	r3, r2
 800a756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a75a:	2201      	movs	r2, #1
 800a75c:	21ff      	movs	r1, #255	; 0xff
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 f9f4 	bl	800bb4c <VL53L0X_WrByte>
 800a764:	4603      	mov	r3, r0
 800a766:	461a      	mov	r2, r3
 800a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a76c:	4313      	orrs	r3, r2
 800a76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a772:	2220      	movs	r2, #32
 800a774:	2130      	movs	r1, #48	; 0x30
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 f9e8 	bl	800bb4c <VL53L0X_WrByte>
 800a77c:	4603      	mov	r3, r0
 800a77e:	461a      	mov	r2, r3
 800a780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a784:	4313      	orrs	r3, r2
 800a786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a78a:	2200      	movs	r2, #0
 800a78c:	21ff      	movs	r1, #255	; 0xff
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 f9dc 	bl	800bb4c <VL53L0X_WrByte>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a79c:	4313      	orrs	r3, r2
 800a79e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7a2:	e04e      	b.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a7a4:	78bb      	ldrb	r3, [r7, #2]
 800a7a6:	2b0e      	cmp	r3, #14
 800a7a8:	d14b      	bne.n	800a842 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a7aa:	2248      	movs	r2, #72	; 0x48
 800a7ac:	2148      	movs	r1, #72	; 0x48
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 f9cc 	bl	800bb4c <VL53L0X_WrByte>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a7ba:	2208      	movs	r2, #8
 800a7bc:	2147      	movs	r1, #71	; 0x47
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 f9c4 	bl	800bb4c <VL53L0X_WrByte>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a7ca:	2203      	movs	r2, #3
 800a7cc:	2132      	movs	r1, #50	; 0x32
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 f9bc 	bl	800bb4c <VL53L0X_WrByte>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a7e2:	2207      	movs	r2, #7
 800a7e4:	2130      	movs	r1, #48	; 0x30
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 f9b0 	bl	800bb4c <VL53L0X_WrByte>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	21ff      	movs	r1, #255	; 0xff
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 f9a4 	bl	800bb4c <VL53L0X_WrByte>
 800a804:	4603      	mov	r3, r0
 800a806:	461a      	mov	r2, r3
 800a808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a80c:	4313      	orrs	r3, r2
 800a80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a812:	2220      	movs	r2, #32
 800a814:	2130      	movs	r1, #48	; 0x30
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 f998 	bl	800bb4c <VL53L0X_WrByte>
 800a81c:	4603      	mov	r3, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a824:	4313      	orrs	r3, r2
 800a826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a82a:	2200      	movs	r2, #0
 800a82c:	21ff      	movs	r1, #255	; 0xff
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 f98c 	bl	800bb4c <VL53L0X_WrByte>
 800a834:	4603      	mov	r3, r0
 800a836:	461a      	mov	r2, r3
 800a838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a83c:	4313      	orrs	r3, r2
 800a83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a846:	2b00      	cmp	r3, #0
 800a848:	d17f      	bne.n	800a94a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a84a:	78bb      	ldrb	r3, [r7, #2]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fe fe37 	bl	80094c0 <VL53L0X_encode_vcsel_period>
 800a852:	4603      	mov	r3, r0
 800a854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d045      	beq.n	800a8ee <VL53L0X_set_vcsel_pulse_period+0x470>
 800a862:	e06e      	b.n	800a942 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	461a      	mov	r2, r3
 800a86a:	2103      	movs	r1, #3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fc33 	bl	800a0d8 <get_sequence_step_timeout>
 800a872:	4603      	mov	r3, r0
 800a874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d109      	bne.n	800a894 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a880:	f107 0310 	add.w	r3, r7, #16
 800a884:	461a      	mov	r2, r3
 800a886:	2102      	movs	r1, #2
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fc25 	bl	800a0d8 <get_sequence_step_timeout>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d109      	bne.n	800a8b0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a89c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	2150      	movs	r1, #80	; 0x50
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 f951 	bl	800bb4c <VL53L0X_WrByte>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a8b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d108      	bne.n	800a8ca <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	2103      	movs	r1, #3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff fceb 	bl	800a29a <set_sequence_step_timeout>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a8ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d108      	bne.n	800a8e4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	2102      	movs	r1, #2
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff fcde 	bl	800a29a <set_sequence_step_timeout>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	78ba      	ldrb	r2, [r7, #2]
 800a8e8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a8ec:	e02e      	b.n	800a94c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a8ee:	f107 0318 	add.w	r3, r7, #24
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	2104      	movs	r1, #4
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fbee 	bl	800a0d8 <get_sequence_step_timeout>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a90a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a90e:	461a      	mov	r2, r3
 800a910:	2170      	movs	r1, #112	; 0x70
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f001 f91a 	bl	800bb4c <VL53L0X_WrByte>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a91e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a922:	2b00      	cmp	r3, #0
 800a924:	d108      	bne.n	800a938 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	461a      	mov	r2, r3
 800a92a:	2104      	movs	r1, #4
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff fcb4 	bl	800a29a <set_sequence_step_timeout>
 800a932:	4603      	mov	r3, r0
 800a934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	78ba      	ldrb	r2, [r7, #2]
 800a93c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a940:	e004      	b.n	800a94c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a942:	23fc      	movs	r3, #252	; 0xfc
 800a944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a948:	e000      	b.n	800a94c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a94a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a94c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a950:	2b00      	cmp	r3, #0
 800a952:	d109      	bne.n	800a968 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a95a:	69f9      	ldr	r1, [r7, #28]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7fc fdc5 	bl	80074ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a962:	4603      	mov	r3, r0
 800a964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a968:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d109      	bne.n	800a984 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a970:	f107 010f 	add.w	r1, r7, #15
 800a974:	2301      	movs	r3, #1
 800a976:	2200      	movs	r2, #0
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7fe fc99 	bl	80092b0 <VL53L0X_perform_phase_calibration>
 800a97e:	4603      	mov	r3, r0
 800a980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3728      	adds	r7, #40	; 0x28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	460b      	mov	r3, r1
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d00a      	beq.n	800a9c2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a9ac:	e013      	b.n	800a9d6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a9ae:	f107 0316 	add.w	r3, r7, #22
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	2150      	movs	r1, #80	; 0x50
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f001 f94a 	bl	800bc50 <VL53L0X_RdByte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a9c0:	e00b      	b.n	800a9da <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a9c2:	f107 0316 	add.w	r3, r7, #22
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	2170      	movs	r1, #112	; 0x70
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f001 f940 	bl	800bc50 <VL53L0X_RdByte>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a9d4:	e001      	b.n	800a9da <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9d6:	23fc      	movs	r3, #252	; 0xfc
 800a9d8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d107      	bne.n	800a9f2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a9e2:	7dbb      	ldrb	r3, [r7, #22]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fe fd58 	bl	800949a <VL53L0X_decode_vcsel_period>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	701a      	strb	r2, [r3, #0]

	return Status;
 800a9f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b092      	sub	sp, #72	; 0x48
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aa0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aa12:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aa14:	f240 7376 	movw	r3, #1910	; 0x776
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800aa1a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aa1e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800aa20:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800aa26:	f240 234e 	movw	r3, #590	; 0x24e
 800aa2a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800aa2c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800aa32:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa36:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800aa38:	f240 2326 	movw	r3, #550	; 0x226
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800aa42:	f644 6320 	movw	r3, #20000	; 0x4e20
 800aa46:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d205      	bcs.n	800aa60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa54:	23fc      	movs	r3, #252	; 0xfc
 800aa56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800aa5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa5e:	e0aa      	b.n	800abb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800aa60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa6c:	f107 0314 	add.w	r3, r7, #20
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7fc fe84 	bl	8007780 <VL53L0X_GetSequenceStepEnables>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800aa7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d15b      	bne.n	800ab3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800aa86:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800aa8c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800aa92:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d052      	beq.n	800ab3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800aa98:	f107 0310 	add.w	r3, r7, #16
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	2102      	movs	r1, #2
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff fb19 	bl	800a0d8 <get_sequence_step_timeout>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800aaac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800aab4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aab8:	e07d      	b.n	800abb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800aaba:	7d3b      	ldrb	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00f      	beq.n	800aae0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800aac0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800aac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac4:	4413      	add	r3, r2
 800aac6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800aac8:	69fa      	ldr	r2, [r7, #28]
 800aaca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aacc:	429a      	cmp	r2, r3
 800aace:	d204      	bcs.n	800aada <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800aad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	643b      	str	r3, [r7, #64]	; 0x40
 800aad8:	e002      	b.n	800aae0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aada:	23fc      	movs	r3, #252	; 0xfc
 800aadc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800aae0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800aae8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aaec:	e063      	b.n	800abb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800aaee:	7dbb      	ldrb	r3, [r7, #22]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d011      	beq.n	800ab18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	4413      	add	r3, r2
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d204      	bcs.n	800ab10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ab06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab0e:	e016      	b.n	800ab3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab10:	23fc      	movs	r3, #252	; 0xfc
 800ab12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ab16:	e012      	b.n	800ab3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ab18:	7d7b      	ldrb	r3, [r7, #21]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00f      	beq.n	800ab3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab22:	4413      	add	r3, r2
 800ab24:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d204      	bcs.n	800ab38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ab2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	643b      	str	r3, [r7, #64]	; 0x40
 800ab36:	e002      	b.n	800ab3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab38:	23fc      	movs	r3, #252	; 0xfc
 800ab3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ab3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ab46:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab4a:	e034      	b.n	800abb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d019      	beq.n	800ab86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ab52:	f107 030c 	add.w	r3, r7, #12
 800ab56:	461a      	mov	r2, r3
 800ab58:	2103      	movs	r1, #3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff fabc 	bl	800a0d8 <get_sequence_step_timeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6a:	4413      	add	r3, r2
 800ab6c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d204      	bcs.n	800ab80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ab76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab7e:	e002      	b.n	800ab86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab80:	23fc      	movs	r3, #252	; 0xfc
 800ab82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800ab86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d111      	bne.n	800abb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ab8e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00e      	beq.n	800abb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800ab94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ab9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab9e:	2104      	movs	r1, #4
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff fb7a 	bl	800a29a <set_sequence_step_timeout>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800abb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3748      	adds	r7, #72	; 0x48
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b090      	sub	sp, #64	; 0x40
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800abce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800abd2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800abd4:	f240 7376 	movw	r3, #1910	; 0x776
 800abd8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800abda:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800abde:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800abe0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800abe4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800abe6:	f240 234e 	movw	r3, #590	; 0x24e
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800abec:	f240 23b2 	movw	r3, #690	; 0x2b2
 800abf0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800abf2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800abf8:	f240 2326 	movw	r3, #550	; 0x226
 800abfc:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ac02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	441a      	add	r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ac0c:	f107 0318 	add.w	r3, r7, #24
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7fc fdb4 	bl	8007780 <VL53L0X_GetSequenceStepEnables>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ac1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ac26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac2a:	e075      	b.n	800ad18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ac2c:	7e3b      	ldrb	r3, [r7, #24]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d105      	bne.n	800ac3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ac32:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ac38:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d030      	beq.n	800aca0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ac3e:	f107 0310 	add.w	r3, r7, #16
 800ac42:	461a      	mov	r2, r3
 800ac44:	2102      	movs	r1, #2
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fa46 	bl	800a0d8 <get_sequence_step_timeout>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ac52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d122      	bne.n	800aca0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ac5a:	7e3b      	ldrb	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d007      	beq.n	800ac70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ac64:	6939      	ldr	r1, [r7, #16]
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac6a:	441a      	add	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ac70:	7ebb      	ldrb	r3, [r7, #26]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d009      	beq.n	800ac8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ac7a:	6939      	ldr	r1, [r7, #16]
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	440b      	add	r3, r1
 800ac80:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac82:	441a      	add	r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	e00a      	b.n	800aca0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ac8a:	7e7b      	ldrb	r3, [r7, #25]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ac94:	6939      	ldr	r1, [r7, #16]
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac9a:	441a      	add	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aca0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d114      	bne.n	800acd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800aca8:	7efb      	ldrb	r3, [r7, #27]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d011      	beq.n	800acd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800acae:	f107 030c 	add.w	r3, r7, #12
 800acb2:	461a      	mov	r2, r3
 800acb4:	2103      	movs	r1, #3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fa0e 	bl	800a0d8 <get_sequence_step_timeout>
 800acbc:	4603      	mov	r3, r0
 800acbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800accc:	441a      	add	r2, r3
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800acd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d114      	bne.n	800ad04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800acda:	7f3b      	ldrb	r3, [r7, #28]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d011      	beq.n	800ad04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ace0:	f107 0314 	add.w	r3, r7, #20
 800ace4:	461a      	mov	r2, r3
 800ace6:	2104      	movs	r1, #4
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff f9f5 	bl	800a0d8 <get_sequence_step_timeout>
 800acee:	4603      	mov	r3, r0
 800acf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800acf8:	6979      	ldr	r1, [r7, #20]
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800acfe:	441a      	add	r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d103      	bne.n	800ad14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3740      	adds	r7, #64	; 0x40
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ad32:	e0c6      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	4413      	add	r3, r2
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	3301      	adds	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ad44:	7cfb      	ldrb	r3, [r7, #19]
 800ad46:	2bff      	cmp	r3, #255	; 0xff
 800ad48:	f040 808d 	bne.w	800ae66 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	747b      	strb	r3, [r7, #17]
			Index++;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ad5c:	7c7b      	ldrb	r3, [r7, #17]
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d87e      	bhi.n	800ae60 <VL53L0X_load_tuning_settings+0x140>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <VL53L0X_load_tuning_settings+0x48>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad79 	.word	0x0800ad79
 800ad6c:	0800adb3 	.word	0x0800adb3
 800ad70:	0800aded 	.word	0x0800aded
 800ad74:	0800ae27 	.word	0x0800ae27
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	3301      	adds	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	3301      	adds	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ad98:	7c3b      	ldrb	r3, [r7, #16]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4413      	add	r3, r2
 800ada6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	89ba      	ldrh	r2, [r7, #12]
 800adac:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800adb0:	e087      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	4413      	add	r3, r2
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	743b      	strb	r3, [r7, #16]
				Index++;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	3301      	adds	r3, #1
 800adc0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	4413      	add	r3, r2
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	73fb      	strb	r3, [r7, #15]
				Index++;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	3301      	adds	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800add2:	7c3b      	ldrb	r3, [r7, #16]
 800add4:	b29b      	uxth	r3, r3
 800add6:	021b      	lsls	r3, r3, #8
 800add8:	b29a      	uxth	r2, r3
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	b29b      	uxth	r3, r3
 800adde:	4413      	add	r3, r2
 800ade0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	89ba      	ldrh	r2, [r7, #12]
 800ade6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800adea:	e06a      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	4413      	add	r3, r2
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	743b      	strb	r3, [r7, #16]
				Index++;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	3301      	adds	r3, #1
 800adfa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	4413      	add	r3, r2
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae0c:	7c3b      	ldrb	r3, [r7, #16]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4413      	add	r3, r2
 800ae1a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	89ba      	ldrh	r2, [r7, #12]
 800ae20:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ae24:	e04d      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	743b      	strb	r3, [r7, #16]
				Index++;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	3301      	adds	r3, #1
 800ae34:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	3301      	adds	r3, #1
 800ae44:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae46:	7c3b      	ldrb	r3, [r7, #16]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	4413      	add	r3, r2
 800ae54:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	89ba      	ldrh	r2, [r7, #12]
 800ae5a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ae5e:	e030      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae60:	23fc      	movs	r3, #252	; 0xfc
 800ae62:	77fb      	strb	r3, [r7, #31]
 800ae64:	e02d      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ae66:	7cfb      	ldrb	r3, [r7, #19]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d828      	bhi.n	800aebe <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	4413      	add	r3, r2
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61bb      	str	r3, [r7, #24]
 800ae80:	e00f      	b.n	800aea2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	4413      	add	r3, r2
 800ae88:	7819      	ldrb	r1, [r3, #0]
 800ae8a:	f107 0208 	add.w	r2, r7, #8
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	4413      	add	r3, r2
 800ae92:	460a      	mov	r2, r1
 800ae94:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	7cfb      	ldrb	r3, [r7, #19]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	dbeb      	blt.n	800ae82 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800aeaa:	7cfb      	ldrb	r3, [r7, #19]
 800aeac:	f107 0208 	add.w	r2, r7, #8
 800aeb0:	7cb9      	ldrb	r1, [r7, #18]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fdee 	bl	800ba94 <VL53L0X_WriteMulti>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e001      	b.n	800aec2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aebe:	23fc      	movs	r3, #252	; 0xfc
 800aec0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	4413      	add	r3, r2
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d004      	beq.n	800aed8 <VL53L0X_load_tuning_settings+0x1b8>
 800aece:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f43f af2e 	beq.w	800ad34 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aed8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3720      	adds	r7, #32
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800aefa:	f107 0313 	add.w	r3, r7, #19
 800aefe:	4619      	mov	r1, r3
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7fc fcc9 	bl	8007898 <VL53L0X_GetXTalkCompensationEnable>
 800af06:	4603      	mov	r3, r0
 800af08:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800af0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d111      	bne.n	800af36 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800af12:	7cfb      	ldrb	r3, [r7, #19]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00e      	beq.n	800af36 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6a1b      	ldr	r3, [r3, #32]
 800af1c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	8a9b      	ldrh	r3, [r3, #20]
 800af22:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	fb02 f303 	mul.w	r3, r2, r3
 800af2a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	3380      	adds	r3, #128	; 0x80
 800af30:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800af36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af4e:	2300      	movs	r3, #0
 800af50:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800af5a:	f107 0310 	add.w	r3, r7, #16
 800af5e:	461a      	mov	r2, r3
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7ff ffbe 	bl	800aee4 <VL53L0X_get_total_xtalk_rate>
 800af68:	4603      	mov	r3, r0
 800af6a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800af6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d105      	bne.n	800af80 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	441a      	add	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]

	return Status;
 800af80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b09a      	sub	sp, #104	; 0x68
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800af9a:	2312      	movs	r3, #18
 800af9c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800af9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afa2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800afa4:	2342      	movs	r3, #66	; 0x42
 800afa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800afa8:	2306      	movs	r3, #6
 800afaa:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800afac:	2307      	movs	r3, #7
 800afae:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afb0:	2300      	movs	r3, #0
 800afb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800afc4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800afc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afca:	fb02 f303 	mul.w	r3, r2, r3
 800afce:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800afd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd2:	3380      	adds	r3, #128	; 0x80
 800afd4:	0a1b      	lsrs	r3, r3, #8
 800afd6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800afdc:	fb02 f303 	mul.w	r3, r2, r3
 800afe0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01a      	beq.n	800b022 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	029b      	lsls	r3, r3, #10
 800aff0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800aff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aff8:	4413      	add	r3, r2
 800affa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800affc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	fbb2 f3f3 	udiv	r3, r2, r3
 800b004:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b008:	4613      	mov	r3, r2
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	4413      	add	r3, r2
 800b00e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b012:	fb03 f303 	mul.w	r3, r3, r3
 800b016:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b01a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b01e:	0c1b      	lsrs	r3, r3, #16
 800b020:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b026:	fb02 f303 	mul.w	r3, r2, r3
 800b02a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b032:	0c1b      	lsrs	r3, r3, #16
 800b034:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	fb03 f303 	mul.w	r3, r3, r3
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b040:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b044:	0c1b      	lsrs	r3, r3, #16
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b04a:	085a      	lsrs	r2, r3, #1
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	441a      	add	r2, r3
 800b050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b052:	fbb2 f3f3 	udiv	r3, r2, r3
 800b056:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b05c:	fb02 f303 	mul.w	r3, r2, r3
 800b060:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b068:	d302      	bcc.n	800b070 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b06a:	4b54      	ldr	r3, [pc, #336]	; (800b1bc <VL53L0X_calc_dmax+0x230>)
 800b06c:	663b      	str	r3, [r7, #96]	; 0x60
 800b06e:	e015      	b.n	800b09c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b072:	085a      	lsrs	r2, r3, #1
 800b074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b076:	441a      	add	r2, r3
 800b078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b07e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b084:	fb02 f303 	mul.w	r3, r2, r3
 800b088:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b08a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b08c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b090:	0c1b      	lsrs	r3, r3, #16
 800b092:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b096:	fb03 f303 	mul.w	r3, r3, r3
 800b09a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b09e:	039b      	lsls	r3, r3, #14
 800b0a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0a4:	4a46      	ldr	r2, [pc, #280]	; (800b1c0 <VL53L0X_calc_dmax+0x234>)
 800b0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0aa:	099b      	lsrs	r3, r3, #6
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	fb03 f303 	mul.w	r3, r3, r3
 800b0b4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b8:	fb03 f303 	mul.w	r3, r3, r3
 800b0bc:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	091b      	lsrs	r3, r3, #4
 800b0c4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	4413      	add	r3, r2
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b0e0:	0b9b      	lsrs	r3, r3, #14
 800b0e2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0e8:	4413      	add	r3, r2
 800b0ea:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b0ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b0f6:	69ba      	ldr	r2, [r7, #24]
 800b0f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fe:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	039b      	lsls	r3, r3, #14
 800b104:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	085b      	lsrs	r3, r3, #1
 800b10a:	69ba      	ldr	r2, [r7, #24]
 800b10c:	4413      	add	r3, r2
 800b10e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	fbb2 f3f3 	udiv	r3, r2, r3
 800b118:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b11e:	fb02 f303 	mul.w	r3, r2, r3
 800b122:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b12a:	4a25      	ldr	r2, [pc, #148]	; (800b1c0 <VL53L0X_calc_dmax+0x234>)
 800b12c:	fba2 2303 	umull	r2, r3, r2, r3
 800b130:	099b      	lsrs	r3, r3, #6
 800b132:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b140:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <VL53L0X_calc_dmax+0x234>)
 800b142:	fba2 2303 	umull	r2, r3, r2, r3
 800b146:	099b      	lsrs	r3, r3, #6
 800b148:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b14c:	3380      	adds	r3, #128	; 0x80
 800b14e:	0a1b      	lsrs	r3, r3, #8
 800b150:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d008      	beq.n	800b16a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	085a      	lsrs	r2, r3, #1
 800b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15e:	441a      	add	r2, r3
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	65bb      	str	r3, [r7, #88]	; 0x58
 800b168:	e001      	b.n	800b16e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b16e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b170:	f7fe f9b9 	bl	80094e6 <VL53L0X_isqrt>
 800b174:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d008      	beq.n	800b18e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	085a      	lsrs	r2, r3, #1
 800b180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b182:	441a      	add	r2, r3
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b18c:	e001      	b.n	800b192 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b192:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b194:	f7fe f9a7 	bl	80094e6 <VL53L0X_isqrt>
 800b198:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b19a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d902      	bls.n	800b1ae <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b1a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1ac:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b1ae:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3768      	adds	r7, #104	; 0x68
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	fff00000 	.word	0xfff00000
 800b1c0:	10624dd3 	.word	0x10624dd3

0800b1c4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b0b4      	sub	sp, #208	; 0xd0
 800b1c8:	af04      	add	r7, sp, #16
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b1d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b1d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b1da:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b1de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b1e2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b1e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b1ea:	f241 235c 	movw	r3, #4700	; 0x125c
 800b1ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b1f2:	4b9e      	ldr	r3, [pc, #632]	; (800b46c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b1f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b1f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b1fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b1fe:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b206:	fbb2 f3f3 	udiv	r3, r2, r3
 800b20a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b20c:	4b98      	ldr	r3, [pc, #608]	; (800b470 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b20e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b214:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b216:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b21a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b21c:	f240 6377 	movw	r3, #1655	; 0x677
 800b220:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b222:	2300      	movs	r3, #0
 800b224:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b236:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b244:	f107 0310 	add.w	r3, r7, #16
 800b248:	461a      	mov	r2, r3
 800b24a:	68b9      	ldr	r1, [r7, #8]
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7ff fe78 	bl	800af42 <VL53L0X_get_total_signal_rate>
 800b252:	4603      	mov	r3, r0
 800b254:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b258:	f107 0314 	add.w	r3, r7, #20
 800b25c:	461a      	mov	r2, r3
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7ff fe3f 	bl	800aee4 <VL53L0X_get_total_xtalk_rate>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b272:	fb02 f303 	mul.w	r3, r2, r3
 800b276:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b27a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b27e:	0c1b      	lsrs	r3, r3, #16
 800b280:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b288:	fb02 f303 	mul.w	r3, r2, r3
 800b28c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b290:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b296:	429a      	cmp	r2, r3
 800b298:	d902      	bls.n	800b2a0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b29a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b29c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b2a0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d168      	bne.n	800b37a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b2ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b2b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b2bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f7fe feb2 	bl	800a030 <VL53L0X_calc_timeout_mclks>
 800b2cc:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b2de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b2e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7fe fe9f 	bl	800a030 <VL53L0X_calc_timeout_mclks>
 800b2f2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b2fa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	d102      	bne.n	800b308 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b302:	2302      	movs	r3, #2
 800b304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b30c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b30e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b312:	fb02 f303 	mul.w	r3, r2, r3
 800b316:	02db      	lsls	r3, r3, #11
 800b318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b31c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b320:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b324:	4a53      	ldr	r2, [pc, #332]	; (800b474 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b326:	fba2 2303 	umull	r2, r3, r2, r3
 800b32a:	099b      	lsrs	r3, r3, #6
 800b32c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b330:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b334:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b336:	fb02 f303 	mul.w	r3, r2, r3
 800b33a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b33e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b342:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b346:	4a4b      	ldr	r2, [pc, #300]	; (800b474 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b348:	fba2 2303 	umull	r2, r3, r2, r3
 800b34c:	099b      	lsrs	r3, r3, #6
 800b34e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	3380      	adds	r3, #128	; 0x80
 800b356:	0a1b      	lsrs	r3, r3, #8
 800b358:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b360:	fb02 f303 	mul.w	r3, r2, r3
 800b364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b36c:	3380      	adds	r3, #128	; 0x80
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	021b      	lsls	r3, r3, #8
 800b378:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b37a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b382:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b386:	e15e      	b.n	800b646 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10c      	bne.n	800b3a8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b394:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b39c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e14c      	b.n	800b642 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b3a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b3b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3ba:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3be:	041a      	lsls	r2, r3, #16
 800b3c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b3ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d902      	bls.n	800b3da <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b3d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b3da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b3de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b3e2:	fb02 f303 	mul.w	r3, r2, r3
 800b3e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b3ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe f875 	bl	80094e6 <VL53L0X_isqrt>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	461a      	mov	r2, r3
 800b408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b40a:	fb02 f303 	mul.w	r3, r2, r3
 800b40e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b412:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b414:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b418:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b41a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b41c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b420:	4a14      	ldr	r2, [pc, #80]	; (800b474 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b422:	fba2 2303 	umull	r2, r3, r2, r3
 800b426:	099b      	lsrs	r3, r3, #6
 800b428:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b42c:	041b      	lsls	r3, r3, #16
 800b42e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b432:	4a10      	ldr	r2, [pc, #64]	; (800b474 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b434:	fba2 2303 	umull	r2, r3, r2, r3
 800b438:	099b      	lsrs	r3, r3, #6
 800b43a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43e:	021b      	lsls	r3, r3, #8
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	fbb2 f3f3 	udiv	r3, r2, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfb8      	it	lt
 800b44e:	425b      	neglt	r3, r3
 800b450:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	7e1b      	ldrb	r3, [r3, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b468:	e033      	b.n	800b4d2 <VL53L0X_calc_sigma_estimate+0x30e>
 800b46a:	bf00      	nop
 800b46c:	028f87ae 	.word	0x028f87ae
 800b470:	0006999a 	.word	0x0006999a
 800b474:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b47a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b488:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b48c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b490:	fb02 f303 	mul.w	r3, r2, r3
 800b494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b49c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b49e:	4413      	add	r3, r2
 800b4a0:	0c1b      	lsrs	r3, r3, #16
 800b4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b4ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4b6:	085b      	lsrs	r3, r3, #1
 800b4b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b4bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4c0:	fb03 f303 	mul.w	r3, r3, r3
 800b4c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b4c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4cc:	0b9b      	lsrs	r3, r3, #14
 800b4ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b4d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4d8:	fb02 f303 	mul.w	r3, r2, r3
 800b4dc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b4e4:	0c1b      	lsrs	r3, r3, #16
 800b4e6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	fb03 f303 	mul.w	r3, r3, r3
 800b4ee:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b4f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b4fc:	0c1b      	lsrs	r3, r3, #16
 800b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	fb03 f303 	mul.w	r3, r3, r3
 800b506:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	4413      	add	r3, r2
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b512:	f7fd ffe8 	bl	80094e6 <VL53L0X_isqrt>
 800b516:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	041b      	lsls	r3, r3, #16
 800b51c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	3332      	adds	r3, #50	; 0x32
 800b522:	4a4b      	ldr	r2, [pc, #300]	; (800b650 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b524:	fba2 2303 	umull	r2, r3, r2, r3
 800b528:	095a      	lsrs	r2, r3, #5
 800b52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b538:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b53c:	fb02 f303 	mul.w	r3, r2, r3
 800b540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b544:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b548:	f241 3388 	movw	r3, #5000	; 0x1388
 800b54c:	4413      	add	r3, r2
 800b54e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b556:	4a3f      	ldr	r2, [pc, #252]	; (800b654 <VL53L0X_calc_sigma_estimate+0x490>)
 800b558:	fba2 2303 	umull	r2, r3, r2, r3
 800b55c:	0b5b      	lsrs	r3, r3, #13
 800b55e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b566:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d902      	bls.n	800b572 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b56c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b56e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b580:	4a35      	ldr	r2, [pc, #212]	; (800b658 <VL53L0X_calc_sigma_estimate+0x494>)
 800b582:	fba2 2303 	umull	r2, r3, r2, r3
 800b586:	099b      	lsrs	r3, r3, #6
 800b588:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b58e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b592:	441a      	add	r2, r3
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	fbb2 f3f3 	udiv	r3, r2, r3
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fd ffa3 	bl	80094e6 <VL53L0X_isqrt>
 800b5a0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b5ae:	4a2a      	ldr	r2, [pc, #168]	; (800b658 <VL53L0X_calc_sigma_estimate+0x494>)
 800b5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b4:	099b      	lsrs	r3, r3, #6
 800b5b6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b5b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5bc:	fb03 f303 	mul.w	r3, r3, r3
 800b5c0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	fb03 f303 	mul.w	r3, r3, r3
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fd ff88 	bl	80094e6 <VL53L0X_isqrt>
 800b5d6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5de:	fb02 f303 	mul.w	r3, r2, r3
 800b5e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <VL53L0X_calc_sigma_estimate+0x43c>
 800b5ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <VL53L0X_calc_sigma_estimate+0x43c>
 800b5f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b5f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d903      	bls.n	800b608 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b60e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b61a:	6939      	ldr	r1, [r7, #16]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	9303      	str	r3, [sp, #12]
 800b620:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b624:	9302      	str	r3, [sp, #8]
 800b626:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b62a:	9301      	str	r3, [sp, #4]
 800b62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f7ff fca8 	bl	800af8c <VL53L0X_calc_dmax>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b642:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b646:	4618      	mov	r0, r3
 800b648:	37c0      	adds	r7, #192	; 0xc0
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	51eb851f 	.word	0x51eb851f
 800b654:	d1b71759 	.word	0xd1b71759
 800b658:	10624dd3 	.word	0x10624dd3

0800b65c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b090      	sub	sp, #64	; 0x40
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	461a      	mov	r2, r3
 800b668:	460b      	mov	r3, r1
 800b66a:	72fb      	strb	r3, [r7, #11]
 800b66c:	4613      	mov	r3, r2
 800b66e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b670:	2300      	movs	r3, #0
 800b672:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	10db      	asrs	r3, r3, #3
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f003 030f 	and.w	r3, r3, #15
 800b6b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b6bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d017      	beq.n	800b6f4 <VL53L0X_get_pal_range_status+0x98>
 800b6c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6c8:	2b05      	cmp	r3, #5
 800b6ca:	d013      	beq.n	800b6f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b6cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6d0:	2b07      	cmp	r3, #7
 800b6d2:	d00f      	beq.n	800b6f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b6d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6d8:	2b0c      	cmp	r3, #12
 800b6da:	d00b      	beq.n	800b6f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b6dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6e0:	2b0d      	cmp	r3, #13
 800b6e2:	d007      	beq.n	800b6f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b6e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6e8:	2b0e      	cmp	r3, #14
 800b6ea:	d003      	beq.n	800b6f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b6ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6f0:	2b0f      	cmp	r3, #15
 800b6f2:	d103      	bne.n	800b6fc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b6fa:	e002      	b.n	800b702 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b702:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b706:	2b00      	cmp	r3, #0
 800b708:	d109      	bne.n	800b71e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b70a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b70e:	461a      	mov	r2, r3
 800b710:	2100      	movs	r1, #0
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7fc f9ac 	bl	8007a70 <VL53L0X_GetLimitCheckEnable>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b71e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b722:	2b00      	cmp	r3, #0
 800b724:	d02e      	beq.n	800b784 <VL53L0X_get_pal_range_status+0x128>
 800b726:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d12a      	bne.n	800b784 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b72e:	f107 0310 	add.w	r3, r7, #16
 800b732:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b736:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f7ff fd43 	bl	800b1c4 <VL53L0X_calc_sigma_estimate>
 800b73e:	4603      	mov	r3, r0
 800b740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b744:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d103      	bne.n	800b754 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	b29a      	uxth	r2, r3
 800b750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b752:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b754:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d113      	bne.n	800b784 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b75c:	f107 0320 	add.w	r3, r7, #32
 800b760:	461a      	mov	r2, r3
 800b762:	2100      	movs	r1, #0
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7fc fa09 	bl	8007b7c <VL53L0X_GetLimitCheckValue>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d006      	beq.n	800b784 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b778:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d902      	bls.n	800b784 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b77e:	2301      	movs	r3, #1
 800b780:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b784:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d109      	bne.n	800b7a0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b78c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b790:	461a      	mov	r2, r3
 800b792:	2102      	movs	r1, #2
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7fc f96b 	bl	8007a70 <VL53L0X_GetLimitCheckEnable>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b7a0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d044      	beq.n	800b832 <VL53L0X_get_pal_range_status+0x1d6>
 800b7a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d140      	bne.n	800b832 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b7b0:	f107 031c 	add.w	r3, r7, #28
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	2102      	movs	r1, #2
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7fc f9df 	bl	8007b7c <VL53L0X_GetLimitCheckValue>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b7c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d107      	bne.n	800b7dc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	21ff      	movs	r1, #255	; 0xff
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f000 f9bb 	bl	800bb4c <VL53L0X_WrByte>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b7dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d109      	bne.n	800b7f8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b7e4:	f107 0316 	add.w	r3, r7, #22
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	21b6      	movs	r1, #182	; 0xb6
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 fa59 	bl	800bca4 <VL53L0X_RdWord>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b7f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d107      	bne.n	800b810 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b800:	2200      	movs	r2, #0
 800b802:	21ff      	movs	r1, #255	; 0xff
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 f9a1 	bl	800bb4c <VL53L0X_WrByte>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b810:	8afb      	ldrh	r3, [r7, #22]
 800b812:	025b      	lsls	r3, r3, #9
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d006      	beq.n	800b832 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b824:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b828:	429a      	cmp	r2, r3
 800b82a:	d902      	bls.n	800b832 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b832:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b836:	2b00      	cmp	r3, #0
 800b838:	d109      	bne.n	800b84e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b83a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b83e:	461a      	mov	r2, r3
 800b840:	2103      	movs	r1, #3
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7fc f914 	bl	8007a70 <VL53L0X_GetLimitCheckEnable>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b84e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b852:	2b00      	cmp	r3, #0
 800b854:	d023      	beq.n	800b89e <VL53L0X_get_pal_range_status+0x242>
 800b856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d11f      	bne.n	800b89e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b85e:	893b      	ldrh	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d102      	bne.n	800b86a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	637b      	str	r3, [r7, #52]	; 0x34
 800b868:	e005      	b.n	800b876 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	021a      	lsls	r2, r3, #8
 800b86e:	893b      	ldrh	r3, [r7, #8]
 800b870:	fbb2 f3f3 	udiv	r3, r2, r3
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b876:	f107 0318 	add.w	r3, r7, #24
 800b87a:	461a      	mov	r2, r3
 800b87c:	2103      	movs	r1, #3
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7fc f97c 	bl	8007b7c <VL53L0X_GetLimitCheckValue>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b890:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b894:	429a      	cmp	r2, r3
 800b896:	d202      	bcs.n	800b89e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b898:	2301      	movs	r3, #1
 800b89a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b89e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d14a      	bne.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b8a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d103      	bne.n	800b8b6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b0:	22ff      	movs	r2, #255	; 0xff
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e042      	b.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b8b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d007      	beq.n	800b8ce <VL53L0X_get_pal_range_status+0x272>
 800b8be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d003      	beq.n	800b8ce <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b8c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d103      	bne.n	800b8d6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	e032      	b.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b8d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d003      	beq.n	800b8e6 <VL53L0X_get_pal_range_status+0x28a>
 800b8de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8e2:	2b09      	cmp	r3, #9
 800b8e4:	d103      	bne.n	800b8ee <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e8:	2204      	movs	r2, #4
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	e026      	b.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b8ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d007      	beq.n	800b906 <VL53L0X_get_pal_range_status+0x2aa>
 800b8f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8fa:	2b0a      	cmp	r3, #10
 800b8fc:	d003      	beq.n	800b906 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b8fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b902:	2b01      	cmp	r3, #1
 800b904:	d103      	bne.n	800b90e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b908:	2203      	movs	r2, #3
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	e016      	b.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b90e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b912:	2b04      	cmp	r3, #4
 800b914:	d003      	beq.n	800b91e <VL53L0X_get_pal_range_status+0x2c2>
 800b916:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d103      	bne.n	800b926 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b920:	2202      	movs	r2, #2
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	e00a      	b.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b926:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d103      	bne.n	800b936 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b930:	2201      	movs	r2, #1
 800b932:	701a      	strb	r2, [r3, #0]
 800b934:	e002      	b.n	800b93c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b938:	2200      	movs	r2, #0
 800b93a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b946:	2200      	movs	r2, #0
 800b948:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b94a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b94e:	461a      	mov	r2, r3
 800b950:	2101      	movs	r1, #1
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f7fc f88c 	bl	8007a70 <VL53L0X_GetLimitCheckEnable>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b95e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b962:	2b00      	cmp	r3, #0
 800b964:	d14f      	bne.n	800ba06 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d003      	beq.n	800b976 <VL53L0X_get_pal_range_status+0x31a>
 800b96e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b972:	2b01      	cmp	r3, #1
 800b974:	d103      	bne.n	800b97e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b976:	2301      	movs	r3, #1
 800b978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97c:	e002      	b.n	800b984 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b98a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b98e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b992:	2b04      	cmp	r3, #4
 800b994:	d003      	beq.n	800b99e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b996:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d103      	bne.n	800b9a6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9a4:	e002      	b.n	800b9ac <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b9b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b9b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d003      	beq.n	800b9c6 <VL53L0X_get_pal_range_status+0x36a>
 800b9be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d103      	bne.n	800b9ce <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9cc:	e002      	b.n	800b9d4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b9da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b9de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <VL53L0X_get_pal_range_status+0x392>
 800b9e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d103      	bne.n	800b9f6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f4:	e002      	b.n	800b9fc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ba02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3740      	adds	r7, #64	; 0x40
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b088      	sub	sp, #32
 800ba16:	af02      	add	r7, sp, #8
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	60b9      	str	r1, [r7, #8]
 800ba1c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	330a      	adds	r3, #10
 800ba22:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ba30:	b299      	uxth	r1, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	f7f7 fcc5 	bl	80033cc <HAL_I2C_Master_Transmit>
 800ba42:	4603      	mov	r3, r0
 800ba44:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ba46:	693b      	ldr	r3, [r7, #16]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	330a      	adds	r3, #10
 800ba60:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ba6e:	f043 0301 	orr.w	r3, r3, #1
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	b299      	uxth	r1, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	f7f7 fd97 	bl	80035b4 <HAL_I2C_Master_Receive>
 800ba86:	4603      	mov	r3, r0
 800ba88:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ba8a:	693b      	ldr	r3, [r7, #16]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	603b      	str	r3, [r7, #0]
 800baa0:	460b      	mov	r3, r1
 800baa2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baa4:	2300      	movs	r3, #0
 800baa6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b3f      	cmp	r3, #63	; 0x3f
 800baac:	d902      	bls.n	800bab4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800baae:	f06f 0303 	mvn.w	r3, #3
 800bab2:	e016      	b.n	800bae2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800bab4:	4a0d      	ldr	r2, [pc, #52]	; (800baec <VL53L0X_WriteMulti+0x58>)
 800bab6:	7afb      	ldrb	r3, [r7, #11]
 800bab8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	480c      	ldr	r0, [pc, #48]	; (800baf0 <VL53L0X_WriteMulti+0x5c>)
 800bac0:	f003 fba6 	bl	800f210 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	3301      	adds	r3, #1
 800bac8:	461a      	mov	r2, r3
 800baca:	4908      	ldr	r1, [pc, #32]	; (800baec <VL53L0X_WriteMulti+0x58>)
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7ff ffa0 	bl	800ba12 <_I2CWrite>
 800bad2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bada:	23ec      	movs	r3, #236	; 0xec
 800badc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	2000b2a8 	.word	0x2000b2a8
 800baf0:	2000b2a9 	.word	0x2000b2a9

0800baf4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	607a      	str	r2, [r7, #4]
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	460b      	mov	r3, r1
 800bb02:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb04:	2300      	movs	r3, #0
 800bb06:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bb08:	f107 030b 	add.w	r3, r7, #11
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	4619      	mov	r1, r3
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7ff ff7e 	bl	800ba12 <_I2CWrite>
 800bb16:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb1e:	23ec      	movs	r3, #236	; 0xec
 800bb20:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb22:	e00c      	b.n	800bb3e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	6879      	ldr	r1, [r7, #4]
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7ff ff91 	bl	800ba50 <_I2CRead>
 800bb2e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb36:	23ec      	movs	r3, #236	; 0xec
 800bb38:	75fb      	strb	r3, [r7, #23]
 800bb3a:	e000      	b.n	800bb3e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800bb3c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bb3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bb60:	4a0b      	ldr	r2, [pc, #44]	; (800bb90 <VL53L0X_WrByte+0x44>)
 800bb62:	78fb      	ldrb	r3, [r7, #3]
 800bb64:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800bb66:	4a0a      	ldr	r2, [pc, #40]	; (800bb90 <VL53L0X_WrByte+0x44>)
 800bb68:	78bb      	ldrb	r3, [r7, #2]
 800bb6a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	4908      	ldr	r1, [pc, #32]	; (800bb90 <VL53L0X_WrByte+0x44>)
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff ff4e 	bl	800ba12 <_I2CWrite>
 800bb76:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb7e:	23ec      	movs	r3, #236	; 0xec
 800bb80:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	2000b2a8 	.word	0x2000b2a8

0800bb94 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
 800bba0:	4613      	mov	r3, r2
 800bba2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bba8:	4a0e      	ldr	r2, [pc, #56]	; (800bbe4 <VL53L0X_WrWord+0x50>)
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bbae:	883b      	ldrh	r3, [r7, #0]
 800bbb0:	0a1b      	lsrs	r3, r3, #8
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <VL53L0X_WrWord+0x50>)
 800bbb8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bbba:	883b      	ldrh	r3, [r7, #0]
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <VL53L0X_WrWord+0x50>)
 800bbc0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bbc2:	2203      	movs	r2, #3
 800bbc4:	4907      	ldr	r1, [pc, #28]	; (800bbe4 <VL53L0X_WrWord+0x50>)
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff ff23 	bl	800ba12 <_I2CWrite>
 800bbcc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bbd4:	23ec      	movs	r3, #236	; 0xec
 800bbd6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bbd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	2000b2a8 	.word	0x2000b2a8

0800bbe8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	70fb      	strb	r3, [r7, #3]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	70bb      	strb	r3, [r7, #2]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bc06:	f107 020e 	add.w	r2, r7, #14
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f81e 	bl	800bc50 <VL53L0X_RdByte>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bc18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d110      	bne.n	800bc42 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bc20:	7bba      	ldrb	r2, [r7, #14]
 800bc22:	78bb      	ldrb	r3, [r7, #2]
 800bc24:	4013      	ands	r3, r2
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	787b      	ldrb	r3, [r7, #1]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bc30:	7bba      	ldrb	r2, [r7, #14]
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7ff ff88 	bl	800bb4c <VL53L0X_WrByte>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73fb      	strb	r3, [r7, #15]
 800bc40:	e000      	b.n	800bc44 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bc42:	bf00      	nop
done:
    return Status;
 800bc44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	607a      	str	r2, [r7, #4]
 800bc5c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bc62:	f107 030b 	add.w	r3, r7, #11
 800bc66:	2201      	movs	r2, #1
 800bc68:	4619      	mov	r1, r3
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7ff fed1 	bl	800ba12 <_I2CWrite>
 800bc70:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc78:	23ec      	movs	r3, #236	; 0xec
 800bc7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bc7c:	e00c      	b.n	800bc98 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bc7e:	2201      	movs	r2, #1
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7ff fee4 	bl	800ba50 <_I2CRead>
 800bc88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc90:	23ec      	movs	r3, #236	; 0xec
 800bc92:	75fb      	strb	r3, [r7, #23]
 800bc94:	e000      	b.n	800bc98 <VL53L0X_RdByte+0x48>
    }
done:
 800bc96:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bc98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	460b      	mov	r3, r1
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bcb6:	f107 030b 	add.w	r3, r7, #11
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff fea7 	bl	800ba12 <_I2CWrite>
 800bcc4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bccc:	23ec      	movs	r3, #236	; 0xec
 800bcce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bcd0:	e017      	b.n	800bd02 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	490e      	ldr	r1, [pc, #56]	; (800bd10 <VL53L0X_RdWord+0x6c>)
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7ff feba 	bl	800ba50 <_I2CRead>
 800bcdc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bce4:	23ec      	movs	r3, #236	; 0xec
 800bce6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bce8:	e00b      	b.n	800bd02 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bcea:	4b09      	ldr	r3, [pc, #36]	; (800bd10 <VL53L0X_RdWord+0x6c>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <VL53L0X_RdWord+0x6c>)
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000b2a8 	.word	0x2000b2a8

0800bd14 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bd26:	f107 030b 	add.w	r3, r7, #11
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff fe6f 	bl	800ba12 <_I2CWrite>
 800bd34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd3c:	23ec      	movs	r3, #236	; 0xec
 800bd3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd40:	e01b      	b.n	800bd7a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bd42:	2204      	movs	r2, #4
 800bd44:	4910      	ldr	r1, [pc, #64]	; (800bd88 <VL53L0X_RdDWord+0x74>)
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7ff fe82 	bl	800ba50 <_I2CRead>
 800bd4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd54:	23ec      	movs	r3, #236	; 0xec
 800bd56:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd58:	e00f      	b.n	800bd7a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bd5a:	4b0b      	ldr	r3, [pc, #44]	; (800bd88 <VL53L0X_RdDWord+0x74>)
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	061a      	lsls	r2, r3, #24
 800bd60:	4b09      	ldr	r3, [pc, #36]	; (800bd88 <VL53L0X_RdDWord+0x74>)
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	041b      	lsls	r3, r3, #16
 800bd66:	441a      	add	r2, r3
 800bd68:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <VL53L0X_RdDWord+0x74>)
 800bd6a:	789b      	ldrb	r3, [r3, #2]
 800bd6c:	021b      	lsls	r3, r3, #8
 800bd6e:	4413      	add	r3, r2
 800bd70:	4a05      	ldr	r2, [pc, #20]	; (800bd88 <VL53L0X_RdDWord+0x74>)
 800bd72:	78d2      	ldrb	r2, [r2, #3]
 800bd74:	441a      	add	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bd7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	2000b2a8 	.word	0x2000b2a8

0800bd8c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bd98:	2002      	movs	r0, #2
 800bd9a:	f7f6 fe1b 	bl	80029d4 <HAL_Delay>
    return status;
 800bd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <twoline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool twoline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_twoline_activations_map, 1, params)) {
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	2101      	movs	r1, #1
 800bdba:	484b      	ldr	r0, [pc, #300]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bdbc:	f000 fb80 	bl	800c4c0 <ai_platform_get_activations_map>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 8086 	beq.w	800bed4 <twoline_configure_activations+0x128>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_5_input0_output_array.data = AI_PTR(g_twoline_activations_map[0] + 952);
 800bdc8:	4b47      	ldr	r3, [pc, #284]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800bdd0:	4a46      	ldr	r2, [pc, #280]	; (800beec <twoline_configure_activations+0x140>)
 800bdd2:	6093      	str	r3, [r2, #8]
    serving_default_dense_5_input0_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 952);
 800bdd4:	4b44      	ldr	r3, [pc, #272]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800bddc:	4a43      	ldr	r2, [pc, #268]	; (800beec <twoline_configure_activations+0x140>)
 800bdde:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_twoline_activations_map[0] + 952);
 800bde0:	4b41      	ldr	r3, [pc, #260]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800bde8:	4a41      	ldr	r2, [pc, #260]	; (800bef0 <twoline_configure_activations+0x144>)
 800bdea:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 952);
 800bdec:	4b3e      	ldr	r3, [pc, #248]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800bdf4:	4a3e      	ldr	r2, [pc, #248]	; (800bef0 <twoline_configure_activations+0x144>)
 800bdf6:	60d3      	str	r3, [r2, #12]
    
    gemm_1_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 976);
 800bdf8:	4b3b      	ldr	r3, [pc, #236]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800be00:	4a3c      	ldr	r2, [pc, #240]	; (800bef4 <twoline_configure_activations+0x148>)
 800be02:	6093      	str	r3, [r2, #8]
    gemm_1_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 976);
 800be04:	4b38      	ldr	r3, [pc, #224]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800be0c:	4a39      	ldr	r2, [pc, #228]	; (800bef4 <twoline_configure_activations+0x148>)
 800be0e:	60d3      	str	r3, [r2, #12]
    
    gemm_1_output_array.data = AI_PTR(g_twoline_activations_map[0] + 1024);
 800be10:	4b35      	ldr	r3, [pc, #212]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be18:	4a37      	ldr	r2, [pc, #220]	; (800bef8 <twoline_configure_activations+0x14c>)
 800be1a:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 1024);
 800be1c:	4b32      	ldr	r3, [pc, #200]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be24:	4a34      	ldr	r2, [pc, #208]	; (800bef8 <twoline_configure_activations+0x14c>)
 800be26:	60d3      	str	r3, [r2, #12]
    
    gemm_2_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800be28:	4b2f      	ldr	r3, [pc, #188]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a33      	ldr	r2, [pc, #204]	; (800befc <twoline_configure_activations+0x150>)
 800be2e:	6093      	str	r3, [r2, #8]
    gemm_2_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800be30:	4b2d      	ldr	r3, [pc, #180]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a31      	ldr	r2, [pc, #196]	; (800befc <twoline_configure_activations+0x150>)
 800be36:	60d3      	str	r3, [r2, #12]
    
    gemm_2_output_array.data = AI_PTR(g_twoline_activations_map[0] + 1536);
 800be38:	4b2b      	ldr	r3, [pc, #172]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800be40:	4a2f      	ldr	r2, [pc, #188]	; (800bf00 <twoline_configure_activations+0x154>)
 800be42:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 1536);
 800be44:	4b28      	ldr	r3, [pc, #160]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800be4c:	4a2c      	ldr	r2, [pc, #176]	; (800bf00 <twoline_configure_activations+0x154>)
 800be4e:	60d3      	str	r3, [r2, #12]
    
    gemm_3_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800be50:	4b25      	ldr	r3, [pc, #148]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a2b      	ldr	r2, [pc, #172]	; (800bf04 <twoline_configure_activations+0x158>)
 800be56:	6093      	str	r3, [r2, #8]
    gemm_3_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800be58:	4b23      	ldr	r3, [pc, #140]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a29      	ldr	r2, [pc, #164]	; (800bf04 <twoline_configure_activations+0x158>)
 800be5e:	60d3      	str	r3, [r2, #12]
    
    gemm_3_output_array.data = AI_PTR(g_twoline_activations_map[0] + 256);
 800be60:	4b21      	ldr	r3, [pc, #132]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be68:	4a27      	ldr	r2, [pc, #156]	; (800bf08 <twoline_configure_activations+0x15c>)
 800be6a:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 256);
 800be6c:	4b1e      	ldr	r3, [pc, #120]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be74:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <twoline_configure_activations+0x15c>)
 800be76:	60d3      	str	r3, [r2, #12]
    
    gemm_4_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800be78:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a23      	ldr	r2, [pc, #140]	; (800bf0c <twoline_configure_activations+0x160>)
 800be7e:	6093      	str	r3, [r2, #8]
    gemm_4_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800be80:	4b19      	ldr	r3, [pc, #100]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a21      	ldr	r2, [pc, #132]	; (800bf0c <twoline_configure_activations+0x160>)
 800be86:	60d3      	str	r3, [r2, #12]
    
    gemm_4_output_array.data = AI_PTR(g_twoline_activations_map[0] + 64);
 800be88:	4b17      	ldr	r3, [pc, #92]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3340      	adds	r3, #64	; 0x40
 800be8e:	4a20      	ldr	r2, [pc, #128]	; (800bf10 <twoline_configure_activations+0x164>)
 800be90:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 64);
 800be92:	4b15      	ldr	r3, [pc, #84]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3340      	adds	r3, #64	; 0x40
 800be98:	4a1d      	ldr	r2, [pc, #116]	; (800bf10 <twoline_configure_activations+0x164>)
 800be9a:	60d3      	str	r3, [r2, #12]
    
    gemm_5_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800be9c:	4b12      	ldr	r3, [pc, #72]	; (800bee8 <twoline_configure_activations+0x13c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a1c      	ldr	r2, [pc, #112]	; (800bf14 <twoline_configure_activations+0x168>)
 800bea2:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800bea4:	4b10      	ldr	r3, [pc, #64]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a1a      	ldr	r2, [pc, #104]	; (800bf14 <twoline_configure_activations+0x168>)
 800beaa:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_twoline_activations_map[0] + 96);
 800beac:	4b0e      	ldr	r3, [pc, #56]	; (800bee8 <twoline_configure_activations+0x13c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3360      	adds	r3, #96	; 0x60
 800beb2:	4a19      	ldr	r2, [pc, #100]	; (800bf18 <twoline_configure_activations+0x16c>)
 800beb4:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 96);
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <twoline_configure_activations+0x13c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3360      	adds	r3, #96	; 0x60
 800bebc:	4a16      	ldr	r2, [pc, #88]	; (800bf18 <twoline_configure_activations+0x16c>)
 800bebe:	60d3      	str	r3, [r2, #12]
    
    conversion_6_output_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800bec0:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <twoline_configure_activations+0x13c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a15      	ldr	r2, [pc, #84]	; (800bf1c <twoline_configure_activations+0x170>)
 800bec6:	6093      	str	r3, [r2, #8]
    conversion_6_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800bec8:	4b07      	ldr	r3, [pc, #28]	; (800bee8 <twoline_configure_activations+0x13c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a13      	ldr	r2, [pc, #76]	; (800bf1c <twoline_configure_activations+0x170>)
 800bece:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e005      	b.n	800bee0 <twoline_configure_activations+0x134>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800bed4:	2213      	movs	r2, #19
 800bed6:	2130      	movs	r1, #48	; 0x30
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fc6f 	bl	800c7bc <ai_platform_network_set_error>
  return false;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	2000b2e8 	.word	0x2000b2e8
 800beec:	2000056c 	.word	0x2000056c
 800bef0:	2000057c 	.word	0x2000057c
 800bef4:	2000051c 	.word	0x2000051c
 800bef8:	2000058c 	.word	0x2000058c
 800befc:	2000052c 	.word	0x2000052c
 800bf00:	2000059c 	.word	0x2000059c
 800bf04:	2000053c 	.word	0x2000053c
 800bf08:	200005ac 	.word	0x200005ac
 800bf0c:	2000054c 	.word	0x2000054c
 800bf10:	200005bc 	.word	0x200005bc
 800bf14:	2000055c 	.word	0x2000055c
 800bf18:	2000045c 	.word	0x2000045c
 800bf1c:	2000046c 	.word	0x2000046c

0800bf20 <twoline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool twoline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_twoline_weights_map, 1, params)) {
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	4861      	ldr	r0, [pc, #388]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf30:	f000 fa6e 	bl	800c410 <ai_platform_get_weights_map>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 80b2 	beq.w	800c0a0 <twoline_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800bf3c:	4b5e      	ldr	r3, [pc, #376]	; (800c0b8 <twoline_configure_weights+0x198>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf44:	4a5c      	ldr	r2, [pc, #368]	; (800c0b8 <twoline_configure_weights+0x198>)
 800bf46:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 0);
 800bf48:	4b5a      	ldr	r3, [pc, #360]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a5a      	ldr	r2, [pc, #360]	; (800c0b8 <twoline_configure_weights+0x198>)
 800bf4e:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 0);
 800bf50:	4b58      	ldr	r3, [pc, #352]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a58      	ldr	r2, [pc, #352]	; (800c0b8 <twoline_configure_weights+0x198>)
 800bf56:	60d3      	str	r3, [r2, #12]
    
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800bf58:	4b58      	ldr	r3, [pc, #352]	; (800c0bc <twoline_configure_weights+0x19c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf60:	4a56      	ldr	r2, [pc, #344]	; (800c0bc <twoline_configure_weights+0x19c>)
 800bf62:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 12288);
 800bf64:	4b53      	ldr	r3, [pc, #332]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800bf6c:	4a53      	ldr	r2, [pc, #332]	; (800c0bc <twoline_configure_weights+0x19c>)
 800bf6e:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 12288);
 800bf70:	4b50      	ldr	r3, [pc, #320]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800bf78:	4a50      	ldr	r2, [pc, #320]	; (800c0bc <twoline_configure_weights+0x19c>)
 800bf7a:	60d3      	str	r3, [r2, #12]
    
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800bf7c:	4b50      	ldr	r3, [pc, #320]	; (800c0c0 <twoline_configure_weights+0x1a0>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf84:	4a4e      	ldr	r2, [pc, #312]	; (800c0c0 <twoline_configure_weights+0x1a0>)
 800bf86:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 14336);
 800bf88:	4b4a      	ldr	r3, [pc, #296]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 800bf90:	4a4b      	ldr	r2, [pc, #300]	; (800c0c0 <twoline_configure_weights+0x1a0>)
 800bf92:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 14336);
 800bf94:	4b47      	ldr	r3, [pc, #284]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 800bf9c:	4a48      	ldr	r2, [pc, #288]	; (800c0c0 <twoline_configure_weights+0x1a0>)
 800bf9e:	60d3      	str	r3, [r2, #12]
    
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800bfa0:	4b48      	ldr	r3, [pc, #288]	; (800c0c4 <twoline_configure_weights+0x1a4>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfa8:	4a46      	ldr	r2, [pc, #280]	; (800c0c4 <twoline_configure_weights+0x1a4>)
 800bfaa:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 79872);
 800bfac:	4b41      	ldr	r3, [pc, #260]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800bfb4:	4a43      	ldr	r2, [pc, #268]	; (800c0c4 <twoline_configure_weights+0x1a4>)
 800bfb6:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 79872);
 800bfb8:	4b3e      	ldr	r3, [pc, #248]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800bfc0:	4a40      	ldr	r2, [pc, #256]	; (800c0c4 <twoline_configure_weights+0x1a4>)
 800bfc2:	60d3      	str	r3, [r2, #12]
    
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800bfc4:	4b40      	ldr	r3, [pc, #256]	; (800c0c8 <twoline_configure_weights+0x1a8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfcc:	4a3e      	ldr	r2, [pc, #248]	; (800c0c8 <twoline_configure_weights+0x1a8>)
 800bfce:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 80384);
 800bfd0:	4b38      	ldr	r3, [pc, #224]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 800bfd8:	4a3b      	ldr	r2, [pc, #236]	; (800c0c8 <twoline_configure_weights+0x1a8>)
 800bfda:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 80384);
 800bfdc:	4b35      	ldr	r3, [pc, #212]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 800bfe4:	4a38      	ldr	r2, [pc, #224]	; (800c0c8 <twoline_configure_weights+0x1a8>)
 800bfe6:	60d3      	str	r3, [r2, #12]
    
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800bfe8:	4b38      	ldr	r3, [pc, #224]	; (800c0cc <twoline_configure_weights+0x1ac>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bff0:	4a36      	ldr	r2, [pc, #216]	; (800c0cc <twoline_configure_weights+0x1ac>)
 800bff2:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 84480);
 800bff4:	4b2f      	ldr	r3, [pc, #188]	; (800c0b4 <twoline_configure_weights+0x194>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f503 33a5 	add.w	r3, r3, #84480	; 0x14a00
 800bffc:	4a33      	ldr	r2, [pc, #204]	; (800c0cc <twoline_configure_weights+0x1ac>)
 800bffe:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 84480);
 800c000:	4b2c      	ldr	r3, [pc, #176]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f503 33a5 	add.w	r3, r3, #84480	; 0x14a00
 800c008:	4a30      	ldr	r2, [pc, #192]	; (800c0cc <twoline_configure_weights+0x1ac>)
 800c00a:	60d3      	str	r3, [r2, #12]
    
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800c00c:	4b30      	ldr	r3, [pc, #192]	; (800c0d0 <twoline_configure_weights+0x1b0>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c014:	4a2e      	ldr	r2, [pc, #184]	; (800c0d0 <twoline_configure_weights+0x1b0>)
 800c016:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 84608);
 800c018:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	4b2d      	ldr	r3, [pc, #180]	; (800c0d4 <twoline_configure_weights+0x1b4>)
 800c01e:	4413      	add	r3, r2
 800c020:	4a2b      	ldr	r2, [pc, #172]	; (800c0d0 <twoline_configure_weights+0x1b0>)
 800c022:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 84608);
 800c024:	4b23      	ldr	r3, [pc, #140]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	4b2a      	ldr	r3, [pc, #168]	; (800c0d4 <twoline_configure_weights+0x1b4>)
 800c02a:	4413      	add	r3, r2
 800c02c:	4a28      	ldr	r2, [pc, #160]	; (800c0d0 <twoline_configure_weights+0x1b0>)
 800c02e:	60d3      	str	r3, [r2, #12]
    
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800c030:	4b29      	ldr	r3, [pc, #164]	; (800c0d8 <twoline_configure_weights+0x1b8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c038:	4a27      	ldr	r2, [pc, #156]	; (800c0d8 <twoline_configure_weights+0x1b8>)
 800c03a:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 85632);
 800c03c:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	4b26      	ldr	r3, [pc, #152]	; (800c0dc <twoline_configure_weights+0x1bc>)
 800c042:	4413      	add	r3, r2
 800c044:	4a24      	ldr	r2, [pc, #144]	; (800c0d8 <twoline_configure_weights+0x1b8>)
 800c046:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 85632);
 800c048:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	4b23      	ldr	r3, [pc, #140]	; (800c0dc <twoline_configure_weights+0x1bc>)
 800c04e:	4413      	add	r3, r2
 800c050:	4a21      	ldr	r2, [pc, #132]	; (800c0d8 <twoline_configure_weights+0x1b8>)
 800c052:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800c054:	4b22      	ldr	r3, [pc, #136]	; (800c0e0 <twoline_configure_weights+0x1c0>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c05c:	4a20      	ldr	r2, [pc, #128]	; (800c0e0 <twoline_configure_weights+0x1c0>)
 800c05e:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 85760);
 800c060:	4b14      	ldr	r3, [pc, #80]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	4b1f      	ldr	r3, [pc, #124]	; (800c0e4 <twoline_configure_weights+0x1c4>)
 800c066:	4413      	add	r3, r2
 800c068:	4a1d      	ldr	r2, [pc, #116]	; (800c0e0 <twoline_configure_weights+0x1c0>)
 800c06a:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 85760);
 800c06c:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	4b1c      	ldr	r3, [pc, #112]	; (800c0e4 <twoline_configure_weights+0x1c4>)
 800c072:	4413      	add	r3, r2
 800c074:	4a1a      	ldr	r2, [pc, #104]	; (800c0e0 <twoline_configure_weights+0x1c0>)
 800c076:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800c078:	4b1b      	ldr	r3, [pc, #108]	; (800c0e8 <twoline_configure_weights+0x1c8>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c080:	4a19      	ldr	r2, [pc, #100]	; (800c0e8 <twoline_configure_weights+0x1c8>)
 800c082:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 85888);
 800c084:	4b0b      	ldr	r3, [pc, #44]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4b18      	ldr	r3, [pc, #96]	; (800c0ec <twoline_configure_weights+0x1cc>)
 800c08a:	4413      	add	r3, r2
 800c08c:	4a16      	ldr	r2, [pc, #88]	; (800c0e8 <twoline_configure_weights+0x1c8>)
 800c08e:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 85888);
 800c090:	4b08      	ldr	r3, [pc, #32]	; (800c0b4 <twoline_configure_weights+0x194>)
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <twoline_configure_weights+0x1cc>)
 800c096:	4413      	add	r3, r2
 800c098:	4a13      	ldr	r2, [pc, #76]	; (800c0e8 <twoline_configure_weights+0x1c8>)
 800c09a:	60d3      	str	r3, [r2, #12]
    
    return true;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e005      	b.n	800c0ac <twoline_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800c0a0:	2212      	movs	r2, #18
 800c0a2:	2130      	movs	r1, #48	; 0x30
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fb89 	bl	800c7bc <ai_platform_network_set_error>
  return false;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	2000b2ec 	.word	0x2000b2ec
 800c0b8:	2000047c 	.word	0x2000047c
 800c0bc:	2000048c 	.word	0x2000048c
 800c0c0:	2000049c 	.word	0x2000049c
 800c0c4:	200004ac 	.word	0x200004ac
 800c0c8:	200004bc 	.word	0x200004bc
 800c0cc:	200004cc 	.word	0x200004cc
 800c0d0:	200004dc 	.word	0x200004dc
 800c0d4:	00014a80 	.word	0x00014a80
 800c0d8:	200004ec 	.word	0x200004ec
 800c0dc:	00014e80 	.word	0x00014e80
 800c0e0:	200004fc 	.word	0x200004fc
 800c0e4:	00014f00 	.word	0x00014f00
 800c0e8:	2000050c 	.word	0x2000050c
 800c0ec:	00014f80 	.word	0x00014f80

0800c0f0 <ai_twoline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_twoline_get_error(ai_handle network)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fa53 	bl	800c5a4 <ai_platform_network_get_error>
 800c0fe:	4603      	mov	r3, r0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <ai_twoline_create>:

AI_API_ENTRY
ai_error ai_twoline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800c112:	2300      	movs	r3, #0
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	2305      	movs	r3, #5
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	2301      	movs	r3, #1
 800c11c:	4a04      	ldr	r2, [pc, #16]	; (800c130 <ai_twoline_create+0x28>)
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fe65 	bl	800cdf0 <ai_platform_network_create>
 800c126:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	20000e50 	.word	0x20000e50

0800c134 <ai_twoline_create_and_init>:

AI_API_ENTRY
ai_error ai_twoline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b096      	sub	sp, #88	; 0x58
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_twoline_create(network, AI_TWOLINE_DATA_CONFIG);
 800c140:	2100      	movs	r1, #0
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f7ff ffe0 	bl	800c108 <ai_twoline_create>
 800c148:	4603      	mov	r3, r0
 800c14a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800c14c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <ai_twoline_create_and_init+0x24>
        return err;
 800c154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c156:	e05d      	b.n	800c214 <ai_twoline_create_and_init+0xe0>
    if (ai_twoline_data_params_get(&params) != true) {
 800c158:	f107 0314 	add.w	r3, r7, #20
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 f8dd 	bl	800c31c <ai_twoline_data_params_get>
 800c162:	4603      	mov	r3, r0
 800c164:	f083 0301 	eor.w	r3, r3, #1
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d008      	beq.n	800c180 <ai_twoline_create_and_init+0x4c>
        err = ai_twoline_get_error(*network);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff ffbc 	bl	800c0f0 <ai_twoline_get_error>
 800c178:	4603      	mov	r3, r0
 800c17a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800c17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c17e:	e049      	b.n	800c214 <ai_twoline_create_and_init+0xe0>
    }
#if defined(AI_TWOLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d016      	beq.n	800c1b4 <ai_twoline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800c186:	2300      	movs	r3, #0
 800c188:	657b      	str	r3, [r7, #84]	; 0x54
 800c18a:	e00e      	b.n	800c1aa <ai_twoline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800c18c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	4413      	add	r3, r2
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	f107 0314 	add.w	r3, r7, #20
 800c19c:	330c      	adds	r3, #12
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 f922 	bl	800c3e8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800c1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	657b      	str	r3, [r7, #84]	; 0x54
 800c1aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	dbeb      	blt.n	800c18c <ai_twoline_create_and_init+0x58>
    }
#endif
#if defined(AI_TWOLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d016      	beq.n	800c1e8 <ai_twoline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	653b      	str	r3, [r7, #80]	; 0x50
 800c1be:	e00e      	b.n	800c1de <ai_twoline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800c1c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 f908 	bl	800c3e8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1da:	3301      	adds	r3, #1
 800c1dc:	653b      	str	r3, [r7, #80]	; 0x50
 800c1de:	8b7b      	ldrh	r3, [r7, #26]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	dbeb      	blt.n	800c1c0 <ai_twoline_create_and_init+0x8c>
    }
#endif
    if (ai_twoline_init(*network, &params) != true) {
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f107 0214 	add.w	r2, r7, #20
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f000 f846 	bl	800c284 <ai_twoline_init>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	f083 0301 	eor.w	r3, r3, #1
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d006      	beq.n	800c212 <ai_twoline_create_and_init+0xde>
        err = ai_twoline_get_error(*network);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff ff71 	bl	800c0f0 <ai_twoline_get_error>
 800c20e:	4603      	mov	r3, r0
 800c210:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800c212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c214:	4618      	mov	r0, r3
 800c216:	3758      	adds	r7, #88	; 0x58
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <ai_twoline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <ai_twoline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c22c:	4b06      	ldr	r3, [pc, #24]	; (800c248 <ai_twoline_inputs_get+0x2c>)
 800c22e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a06      	ldr	r2, [pc, #24]	; (800c24c <ai_twoline_inputs_get+0x30>)
 800c234:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fac5 	bl	800c7c8 <ai_platform_inputs_get>
 800c23e:	4603      	mov	r3, r0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20000e50 	.word	0x20000e50
 800c24c:	a1c00100 	.word	0xa1c00100

0800c250 <ai_twoline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <ai_twoline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c260:	4b06      	ldr	r3, [pc, #24]	; (800c27c <ai_twoline_outputs_get+0x2c>)
 800c262:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a06      	ldr	r2, [pc, #24]	; (800c280 <ai_twoline_outputs_get+0x30>)
 800c268:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fc37 	bl	800cae0 <ai_platform_outputs_get>
 800c272:	4603      	mov	r3, r0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	20000e50 	.word	0x20000e50
 800c280:	a1c00100 	.word	0xa1c00100

0800c284 <ai_twoline_init>:
}

AI_API_ENTRY
ai_bool ai_twoline_init(
  ai_handle network, const ai_network_params* params)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 ff87 	bl	800d1a4 <ai_platform_network_init>
 800c296:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <ai_twoline_init+0x1e>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e028      	b.n	800c2f4 <ai_twoline_init+0x70>

  ai_bool ok = true;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	72fb      	strb	r3, [r7, #11]
  ok &= twoline_configure_weights(net_ctx, params);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7ff fe39 	bl	800bf20 <twoline_configure_weights>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	bf14      	ite	ne
 800c2ba:	2301      	movne	r3, #1
 800c2bc:	2300      	moveq	r3, #0
 800c2be:	72fb      	strb	r3, [r7, #11]
  ok &= twoline_configure_activations(net_ctx, params);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff fd72 	bl	800bdac <twoline_configure_activations>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bf14      	ite	ne
 800c2d4:	2301      	movne	r3, #1
 800c2d6:	2300      	moveq	r3, #0
 800c2d8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f001 f8fe 	bl	800d4dc <ai_platform_network_post_init>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	7afb      	ldrb	r3, [r7, #11]
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	bf14      	ite	ne
 800c2ec:	2301      	movne	r3, #1
 800c2ee:	2300      	moveq	r3, #0
 800c2f0:	72fb      	strb	r3, [r7, #11]

  return ok;
 800c2f2:	7afb      	ldrb	r3, [r7, #11]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <ai_twoline_run>:


AI_API_ENTRY
ai_i32 ai_twoline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f001 fa0f 	bl	800d730 <ai_platform_network_process>
 800c312:	4603      	mov	r3, r0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <ai_twoline_data_params_get>:
 * @ingroup twoline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_twoline_data_params_get(ai_network_params* params)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <ai_twoline_data_params_get+0x12>
 800c32a:	2300      	movs	r3, #0
 800c32c:	e016      	b.n	800c35c <ai_twoline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800c32e:	4a0d      	ldr	r2, [pc, #52]	; (800c364 <ai_twoline_data_params_get+0x48>)
 800c330:	f107 0310 	add.w	r3, r7, #16
 800c334:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c338:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWOLINE_DATA_ACTIVATIONS_COUNT, g_twoline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800c33c:	4a0a      	ldr	r2, [pc, #40]	; (800c368 <ai_twoline_data_params_get+0x4c>)
 800c33e:	f107 0308 	add.w	r3, r7, #8
 800c342:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c346:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWOLINE_DATA_WEIGHTS_COUNT, g_twoline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800c34a:	f107 0210 	add.w	r2, r7, #16
 800c34e:	f107 0308 	add.w	r3, r7, #8
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f90b 	bl	800c570 <ai_platform_bind_network_params>
 800c35a:	4603      	mov	r3, r0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	08013944 	.word	0x08013944
 800c368:	0801394c 	.word	0x0801394c

0800c36c <ai_buffer_get_size>:
 800c36c:	b368      	cbz	r0, 800c3ca <ai_buffer_get_size+0x5e>
 800c36e:	4b17      	ldr	r3, [pc, #92]	; (800c3cc <ai_buffer_get_size+0x60>)
 800c370:	4a17      	ldr	r2, [pc, #92]	; (800c3d0 <ai_buffer_get_size+0x64>)
 800c372:	b410      	push	{r4}
 800c374:	6804      	ldr	r4, [r0, #0]
 800c376:	4023      	ands	r3, r4
 800c378:	4293      	cmp	r3, r2
 800c37a:	d123      	bne.n	800c3c4 <ai_buffer_get_size+0x58>
 800c37c:	b311      	cbz	r1, 800c3c4 <ai_buffer_get_size+0x58>
 800c37e:	6984      	ldr	r4, [r0, #24]
 800c380:	6862      	ldr	r2, [r4, #4]
 800c382:	321f      	adds	r2, #31
 800c384:	f022 021f 	bic.w	r2, r2, #31
 800c388:	7d03      	ldrb	r3, [r0, #20]
 800c38a:	6941      	ldr	r1, [r0, #20]
 800c38c:	f1a3 0301 	sub.w	r3, r3, #1
 800c390:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800c394:	fab3 f383 	clz	r3, r3
 800c398:	095b      	lsrs	r3, r3, #5
 800c39a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800c39e:	da0c      	bge.n	800c3ba <ai_buffer_get_size+0x4e>
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d103      	bne.n	800c3ac <ai_buffer_get_size+0x40>
 800c3a4:	2802      	cmp	r0, #2
 800c3a6:	f04f 0302 	mov.w	r3, #2
 800c3aa:	d006      	beq.n	800c3ba <ai_buffer_get_size+0x4e>
 800c3ac:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	4298      	cmp	r0, r3
 800c3b4:	fb01 f202 	mul.w	r2, r1, r2
 800c3b8:	d1f2      	bne.n	800c3a0 <ai_buffer_get_size+0x34>
 800c3ba:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800c3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	6984      	ldr	r4, [r0, #24]
 800c3c6:	6862      	ldr	r2, [r4, #4]
 800c3c8:	e7de      	b.n	800c388 <ai_buffer_get_size+0x1c>
 800c3ca:	4770      	bx	lr
 800c3cc:	017fffff 	.word	0x017fffff
 800c3d0:	000400c0 	.word	0x000400c0

0800c3d4 <ai_buffer_array_sane>:
 800c3d4:	b138      	cbz	r0, 800c3e6 <ai_buffer_array_sane+0x12>
 800c3d6:	6843      	ldr	r3, [r0, #4]
 800c3d8:	b123      	cbz	r3, 800c3e4 <ai_buffer_array_sane+0x10>
 800c3da:	8840      	ldrh	r0, [r0, #2]
 800c3dc:	3800      	subs	r0, #0
 800c3de:	bf18      	it	ne
 800c3e0:	2001      	movne	r0, #1
 800c3e2:	4770      	bx	lr
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	4770      	bx	lr

0800c3e8 <ai_buffer_array_item_set_address>:
 800c3e8:	b150      	cbz	r0, 800c400 <ai_buffer_array_item_set_address+0x18>
 800c3ea:	6843      	ldr	r3, [r0, #4]
 800c3ec:	b14b      	cbz	r3, 800c402 <ai_buffer_array_item_set_address+0x1a>
 800c3ee:	8840      	ldrh	r0, [r0, #2]
 800c3f0:	b900      	cbnz	r0, 800c3f4 <ai_buffer_array_item_set_address+0xc>
 800c3f2:	4770      	bx	lr
 800c3f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c3fe:	604a      	str	r2, [r1, #4]
 800c400:	4770      	bx	lr
 800c402:	4618      	mov	r0, r3
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop

0800c408 <_ai_platform_acquire_crc>:
 800c408:	2001      	movs	r0, #1
 800c40a:	4770      	bx	lr

0800c40c <_ai_platform_release_crc>:
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop

0800c410 <ai_platform_get_weights_map>:
 800c410:	2900      	cmp	r1, #0
 800c412:	bf18      	it	ne
 800c414:	2800      	cmpne	r0, #0
 800c416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c418:	bf0c      	ite	eq
 800c41a:	2401      	moveq	r4, #1
 800c41c:	2400      	movne	r4, #0
 800c41e:	2a00      	cmp	r2, #0
 800c420:	bf08      	it	eq
 800c422:	f044 0401 	orreq.w	r4, r4, #1
 800c426:	b114      	cbz	r4, 800c42e <ai_platform_get_weights_map+0x1e>
 800c428:	2400      	movs	r4, #0
 800c42a:	4620      	mov	r0, r4
 800c42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c42e:	4616      	mov	r6, r2
 800c430:	4b22      	ldr	r3, [pc, #136]	; (800c4bc <ai_platform_get_weights_map+0xac>)
 800c432:	6812      	ldr	r2, [r2, #0]
 800c434:	4605      	mov	r5, r0
 800c436:	460f      	mov	r7, r1
 800c438:	429a      	cmp	r2, r3
 800c43a:	d022      	beq.n	800c482 <ai_platform_get_weights_map+0x72>
 800c43c:	6870      	ldr	r0, [r6, #4]
 800c43e:	2800      	cmp	r0, #0
 800c440:	d0f2      	beq.n	800c428 <ai_platform_get_weights_map+0x18>
 800c442:	6806      	ldr	r6, [r0, #0]
 800c444:	429e      	cmp	r6, r3
 800c446:	d006      	beq.n	800c456 <ai_platform_get_weights_map+0x46>
 800c448:	f1a1 0401 	sub.w	r4, r1, #1
 800c44c:	6028      	str	r0, [r5, #0]
 800c44e:	fab4 f484 	clz	r4, r4
 800c452:	0964      	lsrs	r4, r4, #5
 800c454:	e7e9      	b.n	800c42a <ai_platform_get_weights_map+0x1a>
 800c456:	3d04      	subs	r5, #4
 800c458:	4602      	mov	r2, r0
 800c45a:	4621      	mov	r1, r4
 800c45c:	e000      	b.n	800c460 <ai_platform_get_weights_map+0x50>
 800c45e:	4619      	mov	r1, r3
 800c460:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c464:	42b3      	cmp	r3, r6
 800c466:	d025      	beq.n	800c4b4 <ai_platform_get_weights_map+0xa4>
 800c468:	f845 3f04 	str.w	r3, [r5, #4]!
 800c46c:	1c4b      	adds	r3, r1, #1
 800c46e:	429f      	cmp	r7, r3
 800c470:	d8f5      	bhi.n	800c45e <ai_platform_get_weights_map+0x4e>
 800c472:	d1da      	bne.n	800c42a <ai_platform_get_weights_map+0x1a>
 800c474:	3102      	adds	r1, #2
 800c476:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c47a:	42b3      	cmp	r3, r6
 800c47c:	d1d5      	bne.n	800c42a <ai_platform_get_weights_map+0x1a>
 800c47e:	2401      	movs	r4, #1
 800c480:	e7d3      	b.n	800c42a <ai_platform_get_weights_map+0x1a>
 800c482:	1d30      	adds	r0, r6, #4
 800c484:	f7ff ffa6 	bl	800c3d4 <ai_buffer_array_sane>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d0cd      	beq.n	800c428 <ai_platform_get_weights_map+0x18>
 800c48c:	88f3      	ldrh	r3, [r6, #6]
 800c48e:	429f      	cmp	r7, r3
 800c490:	d1ca      	bne.n	800c428 <ai_platform_get_weights_map+0x18>
 800c492:	3d04      	subs	r5, #4
 800c494:	4622      	mov	r2, r4
 800c496:	68b3      	ldr	r3, [r6, #8]
 800c498:	4423      	add	r3, r4
 800c49a:	341c      	adds	r4, #28
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	b123      	cbz	r3, 800c4aa <ai_platform_get_weights_map+0x9a>
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	f845 3f04 	str.w	r3, [r5, #4]!
 800c4a6:	4297      	cmp	r7, r2
 800c4a8:	d8f5      	bhi.n	800c496 <ai_platform_get_weights_map+0x86>
 800c4aa:	1abc      	subs	r4, r7, r2
 800c4ac:	fab4 f484 	clz	r4, r4
 800c4b0:	0964      	lsrs	r4, r4, #5
 800c4b2:	e7ba      	b.n	800c42a <ai_platform_get_weights_map+0x1a>
 800c4b4:	428f      	cmp	r7, r1
 800c4b6:	d1b8      	bne.n	800c42a <ai_platform_get_weights_map+0x1a>
 800c4b8:	e7e1      	b.n	800c47e <ai_platform_get_weights_map+0x6e>
 800c4ba:	bf00      	nop
 800c4bc:	a1facade 	.word	0xa1facade

0800c4c0 <ai_platform_get_activations_map>:
 800c4c0:	2900      	cmp	r1, #0
 800c4c2:	bf18      	it	ne
 800c4c4:	2800      	cmpne	r0, #0
 800c4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c8:	bf0c      	ite	eq
 800c4ca:	2401      	moveq	r4, #1
 800c4cc:	2400      	movne	r4, #0
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	bf08      	it	eq
 800c4d2:	f044 0401 	orreq.w	r4, r4, #1
 800c4d6:	b114      	cbz	r4, 800c4de <ai_platform_get_activations_map+0x1e>
 800c4d8:	2400      	movs	r4, #0
 800c4da:	4620      	mov	r0, r4
 800c4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4de:	4616      	mov	r6, r2
 800c4e0:	4b22      	ldr	r3, [pc, #136]	; (800c56c <ai_platform_get_activations_map+0xac>)
 800c4e2:	6812      	ldr	r2, [r2, #0]
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d022      	beq.n	800c532 <ai_platform_get_activations_map+0x72>
 800c4ec:	6a30      	ldr	r0, [r6, #32]
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0f2      	beq.n	800c4d8 <ai_platform_get_activations_map+0x18>
 800c4f2:	6806      	ldr	r6, [r0, #0]
 800c4f4:	429e      	cmp	r6, r3
 800c4f6:	d006      	beq.n	800c506 <ai_platform_get_activations_map+0x46>
 800c4f8:	f1a1 0401 	sub.w	r4, r1, #1
 800c4fc:	6028      	str	r0, [r5, #0]
 800c4fe:	fab4 f484 	clz	r4, r4
 800c502:	0964      	lsrs	r4, r4, #5
 800c504:	e7e9      	b.n	800c4da <ai_platform_get_activations_map+0x1a>
 800c506:	3d04      	subs	r5, #4
 800c508:	4602      	mov	r2, r0
 800c50a:	4621      	mov	r1, r4
 800c50c:	e000      	b.n	800c510 <ai_platform_get_activations_map+0x50>
 800c50e:	4619      	mov	r1, r3
 800c510:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c514:	42b3      	cmp	r3, r6
 800c516:	d026      	beq.n	800c566 <ai_platform_get_activations_map+0xa6>
 800c518:	f845 3f04 	str.w	r3, [r5, #4]!
 800c51c:	1c4b      	adds	r3, r1, #1
 800c51e:	429f      	cmp	r7, r3
 800c520:	d8f5      	bhi.n	800c50e <ai_platform_get_activations_map+0x4e>
 800c522:	d1da      	bne.n	800c4da <ai_platform_get_activations_map+0x1a>
 800c524:	3102      	adds	r1, #2
 800c526:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c52a:	42b3      	cmp	r3, r6
 800c52c:	d1d5      	bne.n	800c4da <ai_platform_get_activations_map+0x1a>
 800c52e:	2401      	movs	r4, #1
 800c530:	e7d3      	b.n	800c4da <ai_platform_get_activations_map+0x1a>
 800c532:	f106 000c 	add.w	r0, r6, #12
 800c536:	f7ff ff4d 	bl	800c3d4 <ai_buffer_array_sane>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d0cc      	beq.n	800c4d8 <ai_platform_get_activations_map+0x18>
 800c53e:	89f3      	ldrh	r3, [r6, #14]
 800c540:	429f      	cmp	r7, r3
 800c542:	d1c9      	bne.n	800c4d8 <ai_platform_get_activations_map+0x18>
 800c544:	3d04      	subs	r5, #4
 800c546:	4622      	mov	r2, r4
 800c548:	6933      	ldr	r3, [r6, #16]
 800c54a:	4423      	add	r3, r4
 800c54c:	341c      	adds	r4, #28
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	b123      	cbz	r3, 800c55c <ai_platform_get_activations_map+0x9c>
 800c552:	3201      	adds	r2, #1
 800c554:	f845 3f04 	str.w	r3, [r5, #4]!
 800c558:	4297      	cmp	r7, r2
 800c55a:	d8f5      	bhi.n	800c548 <ai_platform_get_activations_map+0x88>
 800c55c:	1abc      	subs	r4, r7, r2
 800c55e:	fab4 f484 	clz	r4, r4
 800c562:	0964      	lsrs	r4, r4, #5
 800c564:	e7b9      	b.n	800c4da <ai_platform_get_activations_map+0x1a>
 800c566:	428f      	cmp	r7, r1
 800c568:	d1b7      	bne.n	800c4da <ai_platform_get_activations_map+0x1a>
 800c56a:	e7e0      	b.n	800c52e <ai_platform_get_activations_map+0x6e>
 800c56c:	a1facade 	.word	0xa1facade

0800c570 <ai_platform_bind_network_params>:
 800c570:	2a00      	cmp	r2, #0
 800c572:	bf18      	it	ne
 800c574:	2900      	cmpne	r1, #0
 800c576:	d010      	beq.n	800c59a <ai_platform_bind_network_params+0x2a>
 800c578:	b178      	cbz	r0, 800c59a <ai_platform_bind_network_params+0x2a>
 800c57a:	4603      	mov	r3, r0
 800c57c:	4808      	ldr	r0, [pc, #32]	; (800c5a0 <ai_platform_bind_network_params+0x30>)
 800c57e:	f103 0c0c 	add.w	ip, r3, #12
 800c582:	f843 0b04 	str.w	r0, [r3], #4
 800c586:	c903      	ldmia	r1, {r0, r1}
 800c588:	e883 0003 	stmia.w	r3, {r0, r1}
 800c58c:	2301      	movs	r3, #1
 800c58e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c592:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c596:	4618      	mov	r0, r3
 800c598:	4770      	bx	lr
 800c59a:	2300      	movs	r3, #0
 800c59c:	4618      	mov	r0, r3
 800c59e:	4770      	bx	lr
 800c5a0:	a1facade 	.word	0xa1facade

0800c5a4 <ai_platform_network_get_error>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d03f      	beq.n	800c62a <ai_platform_network_get_error+0x86>
 800c5aa:	4b7d      	ldr	r3, [pc, #500]	; (800c7a0 <ai_platform_network_get_error+0x1fc>)
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	6802      	ldr	r2, [r0, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d13a      	bne.n	800c62a <ai_platform_network_get_error+0x86>
 800c5b4:	f7ff ff28 	bl	800c408 <_ai_platform_acquire_crc>
 800c5b8:	4b7a      	ldr	r3, [pc, #488]	; (800c7a4 <ai_platform_network_get_error+0x200>)
 800c5ba:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5c4:	189a      	adds	r2, r3, r2
 800c5c6:	2a01      	cmp	r2, #1
 800c5c8:	f240 8086 	bls.w	800c6d8 <ai_platform_network_get_error+0x134>
 800c5cc:	f240 4249 	movw	r2, #1097	; 0x449
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	f000 8081 	beq.w	800c6d8 <ai_platform_network_get_error+0x134>
 800c5d6:	4a74      	ldr	r2, [pc, #464]	; (800c7a8 <ai_platform_network_get_error+0x204>)
 800c5d8:	6813      	ldr	r3, [r2, #0]
 800c5da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c5e2:	f000 8087 	beq.w	800c6f4 <ai_platform_network_get_error+0x150>
 800c5e6:	6813      	ldr	r3, [r2, #0]
 800c5e8:	f240 4183 	movw	r1, #1155	; 0x483
 800c5ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	f000 80a9 	beq.w	800c748 <ai_platform_network_get_error+0x1a4>
 800c5f6:	6813      	ldr	r3, [r2, #0]
 800c5f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c600:	f000 80c0 	beq.w	800c784 <ai_platform_network_get_error+0x1e0>
 800c604:	6813      	ldr	r3, [r2, #0]
 800c606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 8082 	bne.w	800c714 <ai_platform_network_get_error+0x170>
 800c610:	4a66      	ldr	r2, [pc, #408]	; (800c7ac <ai_platform_network_get_error+0x208>)
 800c612:	2301      	movs	r3, #1
 800c614:	6093      	str	r3, [r2, #8]
 800c616:	6893      	ldr	r3, [r2, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1fc      	bne.n	800c616 <ai_platform_network_get_error+0x72>
 800c61c:	4964      	ldr	r1, [pc, #400]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c61e:	4b65      	ldr	r3, [pc, #404]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c620:	6011      	str	r1, [r2, #0]
 800c622:	6812      	ldr	r2, [r2, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d075      	beq.n	800c714 <ai_platform_network_get_error+0x170>
 800c628:	e7fe      	b.n	800c628 <ai_platform_network_get_error+0x84>
 800c62a:	f7ff feed 	bl	800c408 <_ai_platform_acquire_crc>
 800c62e:	4b5d      	ldr	r3, [pc, #372]	; (800c7a4 <ai_platform_network_get_error+0x200>)
 800c630:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c63a:	185a      	adds	r2, r3, r1
 800c63c:	2a01      	cmp	r2, #1
 800c63e:	d929      	bls.n	800c694 <ai_platform_network_get_error+0xf0>
 800c640:	f240 4249 	movw	r2, #1097	; 0x449
 800c644:	4293      	cmp	r3, r2
 800c646:	d025      	beq.n	800c694 <ai_platform_network_get_error+0xf0>
 800c648:	4a57      	ldr	r2, [pc, #348]	; (800c7a8 <ai_platform_network_get_error+0x204>)
 800c64a:	6813      	ldr	r3, [r2, #0]
 800c64c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c650:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c654:	d02b      	beq.n	800c6ae <ai_platform_network_get_error+0x10a>
 800c656:	6813      	ldr	r3, [r2, #0]
 800c658:	f240 4183 	movw	r1, #1155	; 0x483
 800c65c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c660:	428b      	cmp	r3, r1
 800c662:	d060      	beq.n	800c726 <ai_platform_network_get_error+0x182>
 800c664:	6813      	ldr	r3, [r2, #0]
 800c666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c66a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c66e:	d07c      	beq.n	800c76a <ai_platform_network_get_error+0x1c6>
 800c670:	6813      	ldr	r3, [r2, #0]
 800c672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c676:	2b00      	cmp	r3, #0
 800c678:	d129      	bne.n	800c6ce <ai_platform_network_get_error+0x12a>
 800c67a:	4a4c      	ldr	r2, [pc, #304]	; (800c7ac <ai_platform_network_get_error+0x208>)
 800c67c:	2301      	movs	r3, #1
 800c67e:	6093      	str	r3, [r2, #8]
 800c680:	6893      	ldr	r3, [r2, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1fc      	bne.n	800c680 <ai_platform_network_get_error+0xdc>
 800c686:	494a      	ldr	r1, [pc, #296]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c688:	4b4a      	ldr	r3, [pc, #296]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c68a:	6011      	str	r1, [r2, #0]
 800c68c:	6812      	ldr	r2, [r2, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d01d      	beq.n	800c6ce <ai_platform_network_get_error+0x12a>
 800c692:	e7fe      	b.n	800c692 <ai_platform_network_get_error+0xee>
 800c694:	4a45      	ldr	r2, [pc, #276]	; (800c7ac <ai_platform_network_get_error+0x208>)
 800c696:	2301      	movs	r3, #1
 800c698:	6093      	str	r3, [r2, #8]
 800c69a:	6893      	ldr	r3, [r2, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1fc      	bne.n	800c69a <ai_platform_network_get_error+0xf6>
 800c6a0:	4943      	ldr	r1, [pc, #268]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c6a2:	4b44      	ldr	r3, [pc, #272]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c6a4:	6011      	str	r1, [r2, #0]
 800c6a6:	6812      	ldr	r2, [r2, #0]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d010      	beq.n	800c6ce <ai_platform_network_get_error+0x12a>
 800c6ac:	e7fe      	b.n	800c6ac <ai_platform_network_get_error+0x108>
 800c6ae:	4a42      	ldr	r2, [pc, #264]	; (800c7b8 <ai_platform_network_get_error+0x214>)
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c6b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1fb      	bne.n	800c6b6 <ai_platform_network_get_error+0x112>
 800c6be:	493c      	ldr	r1, [pc, #240]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c6c0:	4b3c      	ldr	r3, [pc, #240]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c6c2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c6c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d111      	bne.n	800c6f2 <ai_platform_network_get_error+0x14e>
 800c6ce:	f7ff fe9d 	bl	800c40c <_ai_platform_release_crc>
 800c6d2:	f241 0010 	movw	r0, #4112	; 0x1010
 800c6d6:	bd10      	pop	{r4, pc}
 800c6d8:	4a34      	ldr	r2, [pc, #208]	; (800c7ac <ai_platform_network_get_error+0x208>)
 800c6da:	2301      	movs	r3, #1
 800c6dc:	6093      	str	r3, [r2, #8]
 800c6de:	6893      	ldr	r3, [r2, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1fc      	bne.n	800c6de <ai_platform_network_get_error+0x13a>
 800c6e4:	4932      	ldr	r1, [pc, #200]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c6e6:	4b33      	ldr	r3, [pc, #204]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c6e8:	6011      	str	r1, [r2, #0]
 800c6ea:	6812      	ldr	r2, [r2, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d011      	beq.n	800c714 <ai_platform_network_get_error+0x170>
 800c6f0:	e7fe      	b.n	800c6f0 <ai_platform_network_get_error+0x14c>
 800c6f2:	e7fe      	b.n	800c6f2 <ai_platform_network_get_error+0x14e>
 800c6f4:	4a30      	ldr	r2, [pc, #192]	; (800c7b8 <ai_platform_network_get_error+0x214>)
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c6fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1fb      	bne.n	800c6fc <ai_platform_network_get_error+0x158>
 800c704:	492a      	ldr	r1, [pc, #168]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c706:	4b2b      	ldr	r3, [pc, #172]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c708:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c70c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c710:	429a      	cmp	r2, r3
 800c712:	d107      	bne.n	800c724 <ai_platform_network_get_error+0x180>
 800c714:	f7ff fe7a 	bl	800c40c <_ai_platform_release_crc>
 800c718:	f104 0010 	add.w	r0, r4, #16
 800c71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c720:	f001 bae4 	b.w	800dcec <core_get_error>
 800c724:	e7fe      	b.n	800c724 <ai_platform_network_get_error+0x180>
 800c726:	4a24      	ldr	r2, [pc, #144]	; (800c7b8 <ai_platform_network_get_error+0x214>)
 800c728:	2301      	movs	r3, #1
 800c72a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c72e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1fb      	bne.n	800c72e <ai_platform_network_get_error+0x18a>
 800c736:	491e      	ldr	r1, [pc, #120]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c738:	4b1e      	ldr	r3, [pc, #120]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c73a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c73e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c742:	429a      	cmp	r2, r3
 800c744:	d0c3      	beq.n	800c6ce <ai_platform_network_get_error+0x12a>
 800c746:	e7fe      	b.n	800c746 <ai_platform_network_get_error+0x1a2>
 800c748:	4a1b      	ldr	r2, [pc, #108]	; (800c7b8 <ai_platform_network_get_error+0x214>)
 800c74a:	2301      	movs	r3, #1
 800c74c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c750:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1fb      	bne.n	800c750 <ai_platform_network_get_error+0x1ac>
 800c758:	4915      	ldr	r1, [pc, #84]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c75a:	4b16      	ldr	r3, [pc, #88]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c75c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c760:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c764:	429a      	cmp	r2, r3
 800c766:	d0d5      	beq.n	800c714 <ai_platform_network_get_error+0x170>
 800c768:	e7fe      	b.n	800c768 <ai_platform_network_get_error+0x1c4>
 800c76a:	4a10      	ldr	r2, [pc, #64]	; (800c7ac <ai_platform_network_get_error+0x208>)
 800c76c:	2301      	movs	r3, #1
 800c76e:	6093      	str	r3, [r2, #8]
 800c770:	6893      	ldr	r3, [r2, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1fc      	bne.n	800c770 <ai_platform_network_get_error+0x1cc>
 800c776:	490e      	ldr	r1, [pc, #56]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c778:	4b0e      	ldr	r3, [pc, #56]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c77a:	6011      	str	r1, [r2, #0]
 800c77c:	6812      	ldr	r2, [r2, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d0a5      	beq.n	800c6ce <ai_platform_network_get_error+0x12a>
 800c782:	e7fe      	b.n	800c782 <ai_platform_network_get_error+0x1de>
 800c784:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <ai_platform_network_get_error+0x208>)
 800c786:	2301      	movs	r3, #1
 800c788:	6093      	str	r3, [r2, #8]
 800c78a:	6893      	ldr	r3, [r2, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1fc      	bne.n	800c78a <ai_platform_network_get_error+0x1e6>
 800c790:	4907      	ldr	r1, [pc, #28]	; (800c7b0 <ai_platform_network_get_error+0x20c>)
 800c792:	4b08      	ldr	r3, [pc, #32]	; (800c7b4 <ai_platform_network_get_error+0x210>)
 800c794:	6011      	str	r1, [r2, #0]
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d0bb      	beq.n	800c714 <ai_platform_network_get_error+0x170>
 800c79c:	e7fe      	b.n	800c79c <ai_platform_network_get_error+0x1f8>
 800c79e:	bf00      	nop
 800c7a0:	a1c00100 	.word	0xa1c00100
 800c7a4:	e0042000 	.word	0xe0042000
 800c7a8:	5c001000 	.word	0x5c001000
 800c7ac:	40023000 	.word	0x40023000
 800c7b0:	f407a5c2 	.word	0xf407a5c2
 800c7b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c7b8:	58024000 	.word	0x58024000

0800c7bc <ai_platform_network_set_error>:
 800c7bc:	b110      	cbz	r0, 800c7c4 <ai_platform_network_set_error+0x8>
 800c7be:	3010      	adds	r0, #16
 800c7c0:	f001 ba9a 	b.w	800dcf8 <core_set_error>
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop

0800c7c8 <ai_platform_inputs_get>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	9102      	str	r1, [sp, #8]
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	f000 8093 	beq.w	800c8fc <ai_platform_inputs_get+0x134>
 800c7d6:	4baa      	ldr	r3, [pc, #680]	; (800ca80 <ai_platform_inputs_get+0x2b8>)
 800c7d8:	4681      	mov	r9, r0
 800c7da:	6802      	ldr	r2, [r0, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	f040 808d 	bne.w	800c8fc <ai_platform_inputs_get+0x134>
 800c7e2:	f7ff fe11 	bl	800c408 <_ai_platform_acquire_crc>
 800c7e6:	4ba7      	ldr	r3, [pc, #668]	; (800ca84 <ai_platform_inputs_get+0x2bc>)
 800c7e8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7f2:	189a      	adds	r2, r3, r2
 800c7f4:	2a01      	cmp	r2, #1
 800c7f6:	f240 80da 	bls.w	800c9ae <ai_platform_inputs_get+0x1e6>
 800c7fa:	f240 4249 	movw	r2, #1097	; 0x449
 800c7fe:	4293      	cmp	r3, r2
 800c800:	f000 80d5 	beq.w	800c9ae <ai_platform_inputs_get+0x1e6>
 800c804:	4aa0      	ldr	r2, [pc, #640]	; (800ca88 <ai_platform_inputs_get+0x2c0>)
 800c806:	6813      	ldr	r3, [r2, #0]
 800c808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c80c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c810:	f000 80dc 	beq.w	800c9cc <ai_platform_inputs_get+0x204>
 800c814:	6813      	ldr	r3, [r2, #0]
 800c816:	f240 4183 	movw	r1, #1155	; 0x483
 800c81a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c81e:	428b      	cmp	r3, r1
 800c820:	f000 810e 	beq.w	800ca40 <ai_platform_inputs_get+0x278>
 800c824:	6813      	ldr	r3, [r2, #0]
 800c826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c82a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c82e:	f000 8143 	beq.w	800cab8 <ai_platform_inputs_get+0x2f0>
 800c832:	6813      	ldr	r3, [r2, #0]
 800c834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 8113 	beq.w	800ca64 <ai_platform_inputs_get+0x29c>
 800c83e:	f7ff fde5 	bl	800c40c <_ai_platform_release_crc>
 800c842:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 80d2 	beq.w	800c9f0 <ai_platform_inputs_get+0x228>
 800c84c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c850:	f1ba 0f00 	cmp.w	sl, #0
 800c854:	f000 80cc 	beq.w	800c9f0 <ai_platform_inputs_get+0x228>
 800c858:	2100      	movs	r1, #0
 800c85a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c85e:	460d      	mov	r5, r1
 800c860:	4689      	mov	r9, r1
 800c862:	e016      	b.n	800c892 <ai_platform_inputs_get+0xca>
 800c864:	9a01      	ldr	r2, [sp, #4]
 800c866:	2301      	movs	r3, #1
 800c868:	f848 3002 	str.w	r3, [r8, r2]
 800c86c:	69b2      	ldr	r2, [r6, #24]
 800c86e:	f04f 0301 	mov.w	r3, #1
 800c872:	6856      	ldr	r6, [r2, #4]
 800c874:	3501      	adds	r5, #1
 800c876:	f109 091c 	add.w	r9, r9, #28
 800c87a:	7523      	strb	r3, [r4, #20]
 800c87c:	2300      	movs	r3, #0
 800c87e:	6962      	ldr	r2, [r4, #20]
 800c880:	60a7      	str	r7, [r4, #8]
 800c882:	f36b 221f 	bfi	r2, fp, #8, #24
 800c886:	6126      	str	r6, [r4, #16]
 800c888:	61a1      	str	r1, [r4, #24]
 800c88a:	60e3      	str	r3, [r4, #12]
 800c88c:	6162      	str	r2, [r4, #20]
 800c88e:	e9c4 0c00 	strd	r0, ip, [r4]
 800c892:	f8ba 3000 	ldrh.w	r3, [sl]
 800c896:	b2ac      	uxth	r4, r5
 800c898:	42ab      	cmp	r3, r5
 800c89a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	f240 80b5 	bls.w	800ca0e <ai_platform_inputs_get+0x246>
 800c8a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 80b0 	beq.w	800ca0e <ai_platform_inputs_get+0x246>
 800c8ae:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c8b2:	2e00      	cmp	r6, #0
 800c8b4:	f000 80ab 	beq.w	800ca0e <ai_platform_inputs_get+0x246>
 800c8b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c8bc:	69b2      	ldr	r2, [r6, #24]
 800c8be:	68f1      	ldr	r1, [r6, #12]
 800c8c0:	6810      	ldr	r0, [r2, #0]
 800c8c2:	9100      	str	r1, [sp, #0]
 800c8c4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800c8c8:	68b3      	ldr	r3, [r6, #8]
 800c8ca:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c8ce:	444c      	add	r4, r9
 800c8d0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c8d4:	f002 fbd2 	bl	800f07c <ai_array_to_buffer_fmt>
 800c8d8:	69b2      	ldr	r2, [r6, #24]
 800c8da:	9900      	ldr	r1, [sp, #0]
 800c8dc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c8e0:	2f00      	cmp	r7, #0
 800c8e2:	d0c4      	beq.n	800c86e <ai_platform_inputs_get+0xa6>
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800c8ea:	6832      	ldr	r2, [r6, #0]
 800c8ec:	607a      	str	r2, [r7, #4]
 800c8ee:	b112      	cbz	r2, 800c8f6 <ai_platform_inputs_get+0x12e>
 800c8f0:	8852      	ldrh	r2, [r2, #2]
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	d1b6      	bne.n	800c864 <ai_platform_inputs_get+0x9c>
 800c8f6:	69b2      	ldr	r2, [r6, #24]
 800c8f8:	2700      	movs	r7, #0
 800c8fa:	e7b8      	b.n	800c86e <ai_platform_inputs_get+0xa6>
 800c8fc:	f7ff fd84 	bl	800c408 <_ai_platform_acquire_crc>
 800c900:	4b60      	ldr	r3, [pc, #384]	; (800ca84 <ai_platform_inputs_get+0x2bc>)
 800c902:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c90c:	185a      	adds	r2, r3, r1
 800c90e:	2a01      	cmp	r2, #1
 800c910:	d92a      	bls.n	800c968 <ai_platform_inputs_get+0x1a0>
 800c912:	f240 4249 	movw	r2, #1097	; 0x449
 800c916:	4293      	cmp	r3, r2
 800c918:	d026      	beq.n	800c968 <ai_platform_inputs_get+0x1a0>
 800c91a:	4a5b      	ldr	r2, [pc, #364]	; (800ca88 <ai_platform_inputs_get+0x2c0>)
 800c91c:	6813      	ldr	r3, [r2, #0]
 800c91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c922:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c926:	d02c      	beq.n	800c982 <ai_platform_inputs_get+0x1ba>
 800c928:	6813      	ldr	r3, [r2, #0]
 800c92a:	f240 4183 	movw	r1, #1155	; 0x483
 800c92e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c932:	428b      	cmp	r3, r1
 800c934:	d073      	beq.n	800ca1e <ai_platform_inputs_get+0x256>
 800c936:	6813      	ldr	r3, [r2, #0]
 800c938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c93c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c940:	f000 80ac 	beq.w	800ca9c <ai_platform_inputs_get+0x2d4>
 800c944:	6813      	ldr	r3, [r2, #0]
 800c946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d129      	bne.n	800c9a2 <ai_platform_inputs_get+0x1da>
 800c94e:	4a4f      	ldr	r2, [pc, #316]	; (800ca8c <ai_platform_inputs_get+0x2c4>)
 800c950:	2301      	movs	r3, #1
 800c952:	6093      	str	r3, [r2, #8]
 800c954:	6893      	ldr	r3, [r2, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1fc      	bne.n	800c954 <ai_platform_inputs_get+0x18c>
 800c95a:	494d      	ldr	r1, [pc, #308]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800c95c:	4b4d      	ldr	r3, [pc, #308]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800c95e:	6011      	str	r1, [r2, #0]
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	429a      	cmp	r2, r3
 800c964:	d01d      	beq.n	800c9a2 <ai_platform_inputs_get+0x1da>
 800c966:	e7fe      	b.n	800c966 <ai_platform_inputs_get+0x19e>
 800c968:	4a48      	ldr	r2, [pc, #288]	; (800ca8c <ai_platform_inputs_get+0x2c4>)
 800c96a:	2301      	movs	r3, #1
 800c96c:	6093      	str	r3, [r2, #8]
 800c96e:	6893      	ldr	r3, [r2, #8]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1fc      	bne.n	800c96e <ai_platform_inputs_get+0x1a6>
 800c974:	4946      	ldr	r1, [pc, #280]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800c976:	4b47      	ldr	r3, [pc, #284]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800c978:	6011      	str	r1, [r2, #0]
 800c97a:	6812      	ldr	r2, [r2, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d010      	beq.n	800c9a2 <ai_platform_inputs_get+0x1da>
 800c980:	e7fe      	b.n	800c980 <ai_platform_inputs_get+0x1b8>
 800c982:	4a45      	ldr	r2, [pc, #276]	; (800ca98 <ai_platform_inputs_get+0x2d0>)
 800c984:	2301      	movs	r3, #1
 800c986:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c98a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1fb      	bne.n	800c98a <ai_platform_inputs_get+0x1c2>
 800c992:	493f      	ldr	r1, [pc, #252]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800c994:	4b3f      	ldr	r3, [pc, #252]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800c996:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c99a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d113      	bne.n	800c9ca <ai_platform_inputs_get+0x202>
 800c9a2:	f7ff fd33 	bl	800c40c <_ai_platform_release_crc>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	b005      	add	sp, #20
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	4a37      	ldr	r2, [pc, #220]	; (800ca8c <ai_platform_inputs_get+0x2c4>)
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	6093      	str	r3, [r2, #8]
 800c9b4:	6893      	ldr	r3, [r2, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1fc      	bne.n	800c9b4 <ai_platform_inputs_get+0x1ec>
 800c9ba:	4b35      	ldr	r3, [pc, #212]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	4b35      	ldr	r3, [pc, #212]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800c9c0:	6812      	ldr	r2, [r2, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	f43f af3b 	beq.w	800c83e <ai_platform_inputs_get+0x76>
 800c9c8:	e7fe      	b.n	800c9c8 <ai_platform_inputs_get+0x200>
 800c9ca:	e7fe      	b.n	800c9ca <ai_platform_inputs_get+0x202>
 800c9cc:	4a32      	ldr	r2, [pc, #200]	; (800ca98 <ai_platform_inputs_get+0x2d0>)
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c9d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1fb      	bne.n	800c9d4 <ai_platform_inputs_get+0x20c>
 800c9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800c9de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c9e2:	4b2c      	ldr	r3, [pc, #176]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800c9e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	f43f af28 	beq.w	800c83e <ai_platform_inputs_get+0x76>
 800c9ee:	e7fe      	b.n	800c9ee <ai_platform_inputs_get+0x226>
 800c9f0:	2400      	movs	r4, #0
 800c9f2:	2218      	movs	r2, #24
 800c9f4:	2111      	movs	r1, #17
 800c9f6:	f109 0010 	add.w	r0, r9, #16
 800c9fa:	f001 f97d 	bl	800dcf8 <core_set_error>
 800c9fe:	4620      	mov	r0, r4
 800ca00:	9b02      	ldr	r3, [sp, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0d0      	beq.n	800c9a8 <ai_platform_inputs_get+0x1e0>
 800ca06:	801c      	strh	r4, [r3, #0]
 800ca08:	b005      	add	sp, #20
 800ca0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	d0ec      	beq.n	800c9f0 <ai_platform_inputs_get+0x228>
 800ca16:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ca1a:	6858      	ldr	r0, [r3, #4]
 800ca1c:	e7f0      	b.n	800ca00 <ai_platform_inputs_get+0x238>
 800ca1e:	4a1e      	ldr	r2, [pc, #120]	; (800ca98 <ai_platform_inputs_get+0x2d0>)
 800ca20:	2301      	movs	r3, #1
 800ca22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ca26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1fb      	bne.n	800ca26 <ai_platform_inputs_get+0x25e>
 800ca2e:	4918      	ldr	r1, [pc, #96]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800ca30:	4b18      	ldr	r3, [pc, #96]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800ca32:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ca36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d0b1      	beq.n	800c9a2 <ai_platform_inputs_get+0x1da>
 800ca3e:	e7fe      	b.n	800ca3e <ai_platform_inputs_get+0x276>
 800ca40:	4a15      	ldr	r2, [pc, #84]	; (800ca98 <ai_platform_inputs_get+0x2d0>)
 800ca42:	2301      	movs	r3, #1
 800ca44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ca48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1fb      	bne.n	800ca48 <ai_platform_inputs_get+0x280>
 800ca50:	4b0f      	ldr	r3, [pc, #60]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800ca52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ca56:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800ca58:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	f43f aeee 	beq.w	800c83e <ai_platform_inputs_get+0x76>
 800ca62:	e7fe      	b.n	800ca62 <ai_platform_inputs_get+0x29a>
 800ca64:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <ai_platform_inputs_get+0x2c4>)
 800ca66:	2301      	movs	r3, #1
 800ca68:	6093      	str	r3, [r2, #8]
 800ca6a:	6893      	ldr	r3, [r2, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1fc      	bne.n	800ca6a <ai_platform_inputs_get+0x2a2>
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <ai_platform_inputs_get+0x2c8>)
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <ai_platform_inputs_get+0x2cc>)
 800ca76:	6812      	ldr	r2, [r2, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	f43f aee0 	beq.w	800c83e <ai_platform_inputs_get+0x76>
 800ca7e:	e7fe      	b.n	800ca7e <ai_platform_inputs_get+0x2b6>
 800ca80:	a1c00100 	.word	0xa1c00100
 800ca84:	e0042000 	.word	0xe0042000
 800ca88:	5c001000 	.word	0x5c001000
 800ca8c:	40023000 	.word	0x40023000
 800ca90:	f407a5c2 	.word	0xf407a5c2
 800ca94:	b5e8b5cd 	.word	0xb5e8b5cd
 800ca98:	58024000 	.word	0x58024000
 800ca9c:	4a0d      	ldr	r2, [pc, #52]	; (800cad4 <ai_platform_inputs_get+0x30c>)
 800ca9e:	2301      	movs	r3, #1
 800caa0:	6093      	str	r3, [r2, #8]
 800caa2:	6893      	ldr	r3, [r2, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1fc      	bne.n	800caa2 <ai_platform_inputs_get+0x2da>
 800caa8:	490b      	ldr	r1, [pc, #44]	; (800cad8 <ai_platform_inputs_get+0x310>)
 800caaa:	4b0c      	ldr	r3, [pc, #48]	; (800cadc <ai_platform_inputs_get+0x314>)
 800caac:	6011      	str	r1, [r2, #0]
 800caae:	6812      	ldr	r2, [r2, #0]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	f43f af76 	beq.w	800c9a2 <ai_platform_inputs_get+0x1da>
 800cab6:	e7fe      	b.n	800cab6 <ai_platform_inputs_get+0x2ee>
 800cab8:	4a06      	ldr	r2, [pc, #24]	; (800cad4 <ai_platform_inputs_get+0x30c>)
 800caba:	2301      	movs	r3, #1
 800cabc:	6093      	str	r3, [r2, #8]
 800cabe:	6893      	ldr	r3, [r2, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1fc      	bne.n	800cabe <ai_platform_inputs_get+0x2f6>
 800cac4:	4b04      	ldr	r3, [pc, #16]	; (800cad8 <ai_platform_inputs_get+0x310>)
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <ai_platform_inputs_get+0x314>)
 800caca:	6812      	ldr	r2, [r2, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	f43f aeb6 	beq.w	800c83e <ai_platform_inputs_get+0x76>
 800cad2:	e7fe      	b.n	800cad2 <ai_platform_inputs_get+0x30a>
 800cad4:	40023000 	.word	0x40023000
 800cad8:	f407a5c2 	.word	0xf407a5c2
 800cadc:	b5e8b5cd 	.word	0xb5e8b5cd

0800cae0 <ai_platform_outputs_get>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	b085      	sub	sp, #20
 800cae6:	9102      	str	r1, [sp, #8]
 800cae8:	2800      	cmp	r0, #0
 800caea:	f000 808f 	beq.w	800cc0c <ai_platform_outputs_get+0x12c>
 800caee:	4ba8      	ldr	r3, [pc, #672]	; (800cd90 <ai_platform_outputs_get+0x2b0>)
 800caf0:	4681      	mov	r9, r0
 800caf2:	6802      	ldr	r2, [r0, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	f040 8089 	bne.w	800cc0c <ai_platform_outputs_get+0x12c>
 800cafa:	f7ff fc85 	bl	800c408 <_ai_platform_acquire_crc>
 800cafe:	4ba5      	ldr	r3, [pc, #660]	; (800cd94 <ai_platform_outputs_get+0x2b4>)
 800cb00:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb0a:	189a      	adds	r2, r3, r2
 800cb0c:	2a01      	cmp	r2, #1
 800cb0e:	f240 80d6 	bls.w	800ccbe <ai_platform_outputs_get+0x1de>
 800cb12:	f240 4249 	movw	r2, #1097	; 0x449
 800cb16:	4293      	cmp	r3, r2
 800cb18:	f000 80d1 	beq.w	800ccbe <ai_platform_outputs_get+0x1de>
 800cb1c:	4a9e      	ldr	r2, [pc, #632]	; (800cd98 <ai_platform_outputs_get+0x2b8>)
 800cb1e:	6813      	ldr	r3, [r2, #0]
 800cb20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb24:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cb28:	f000 80d8 	beq.w	800ccdc <ai_platform_outputs_get+0x1fc>
 800cb2c:	6813      	ldr	r3, [r2, #0]
 800cb2e:	f240 4183 	movw	r1, #1155	; 0x483
 800cb32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb36:	428b      	cmp	r3, r1
 800cb38:	f000 8109 	beq.w	800cd4e <ai_platform_outputs_get+0x26e>
 800cb3c:	6813      	ldr	r3, [r2, #0]
 800cb3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb42:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cb46:	f000 813f 	beq.w	800cdc8 <ai_platform_outputs_get+0x2e8>
 800cb4a:	6813      	ldr	r3, [r2, #0]
 800cb4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 810e 	beq.w	800cd72 <ai_platform_outputs_get+0x292>
 800cb56:	f7ff fc59 	bl	800c40c <_ai_platform_release_crc>
 800cb5a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	f240 80db 	bls.w	800cd1a <ai_platform_outputs_get+0x23a>
 800cb64:	2100      	movs	r1, #0
 800cb66:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800cb6a:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb6e:	460d      	mov	r5, r1
 800cb70:	4689      	mov	r9, r1
 800cb72:	e016      	b.n	800cba2 <ai_platform_outputs_get+0xc2>
 800cb74:	9a01      	ldr	r2, [sp, #4]
 800cb76:	2301      	movs	r3, #1
 800cb78:	f848 3002 	str.w	r3, [r8, r2]
 800cb7c:	69b2      	ldr	r2, [r6, #24]
 800cb7e:	f04f 0301 	mov.w	r3, #1
 800cb82:	6856      	ldr	r6, [r2, #4]
 800cb84:	3501      	adds	r5, #1
 800cb86:	f109 091c 	add.w	r9, r9, #28
 800cb8a:	7523      	strb	r3, [r4, #20]
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	6962      	ldr	r2, [r4, #20]
 800cb90:	60a7      	str	r7, [r4, #8]
 800cb92:	f36b 221f 	bfi	r2, fp, #8, #24
 800cb96:	6126      	str	r6, [r4, #16]
 800cb98:	61a1      	str	r1, [r4, #24]
 800cb9a:	60e3      	str	r3, [r4, #12]
 800cb9c:	6162      	str	r2, [r4, #20]
 800cb9e:	e9c4 0c00 	strd	r0, ip, [r4]
 800cba2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cba6:	b2ac      	uxth	r4, r5
 800cba8:	42ab      	cmp	r3, r5
 800cbaa:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	f240 80a6 	bls.w	800cd00 <ai_platform_outputs_get+0x220>
 800cbb4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 80a1 	beq.w	800cd00 <ai_platform_outputs_get+0x220>
 800cbbe:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	f000 809c 	beq.w	800cd00 <ai_platform_outputs_get+0x220>
 800cbc8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cbcc:	69b2      	ldr	r2, [r6, #24]
 800cbce:	68f1      	ldr	r1, [r6, #12]
 800cbd0:	6810      	ldr	r0, [r2, #0]
 800cbd2:	9100      	str	r1, [sp, #0]
 800cbd4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800cbd8:	68b3      	ldr	r3, [r6, #8]
 800cbda:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800cbde:	444c      	add	r4, r9
 800cbe0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800cbe4:	f002 fa4a 	bl	800f07c <ai_array_to_buffer_fmt>
 800cbe8:	69b2      	ldr	r2, [r6, #24]
 800cbea:	9900      	ldr	r1, [sp, #0]
 800cbec:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800cbf0:	2f00      	cmp	r7, #0
 800cbf2:	d0c4      	beq.n	800cb7e <ai_platform_outputs_get+0x9e>
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800cbfa:	6832      	ldr	r2, [r6, #0]
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	b112      	cbz	r2, 800cc06 <ai_platform_outputs_get+0x126>
 800cc00:	8852      	ldrh	r2, [r2, #2]
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	d1b6      	bne.n	800cb74 <ai_platform_outputs_get+0x94>
 800cc06:	69b2      	ldr	r2, [r6, #24]
 800cc08:	2700      	movs	r7, #0
 800cc0a:	e7b8      	b.n	800cb7e <ai_platform_outputs_get+0x9e>
 800cc0c:	f7ff fbfc 	bl	800c408 <_ai_platform_acquire_crc>
 800cc10:	4b60      	ldr	r3, [pc, #384]	; (800cd94 <ai_platform_outputs_get+0x2b4>)
 800cc12:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc1c:	185a      	adds	r2, r3, r1
 800cc1e:	2a01      	cmp	r2, #1
 800cc20:	d92a      	bls.n	800cc78 <ai_platform_outputs_get+0x198>
 800cc22:	f240 4249 	movw	r2, #1097	; 0x449
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d026      	beq.n	800cc78 <ai_platform_outputs_get+0x198>
 800cc2a:	4a5b      	ldr	r2, [pc, #364]	; (800cd98 <ai_platform_outputs_get+0x2b8>)
 800cc2c:	6813      	ldr	r3, [r2, #0]
 800cc2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc32:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cc36:	d02c      	beq.n	800cc92 <ai_platform_outputs_get+0x1b2>
 800cc38:	6813      	ldr	r3, [r2, #0]
 800cc3a:	f240 4183 	movw	r1, #1155	; 0x483
 800cc3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc42:	428b      	cmp	r3, r1
 800cc44:	d072      	beq.n	800cd2c <ai_platform_outputs_get+0x24c>
 800cc46:	6813      	ldr	r3, [r2, #0]
 800cc48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc4c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cc50:	f000 80ac 	beq.w	800cdac <ai_platform_outputs_get+0x2cc>
 800cc54:	6813      	ldr	r3, [r2, #0]
 800cc56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d129      	bne.n	800ccb2 <ai_platform_outputs_get+0x1d2>
 800cc5e:	4a4f      	ldr	r2, [pc, #316]	; (800cd9c <ai_platform_outputs_get+0x2bc>)
 800cc60:	2301      	movs	r3, #1
 800cc62:	6093      	str	r3, [r2, #8]
 800cc64:	6893      	ldr	r3, [r2, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1fc      	bne.n	800cc64 <ai_platform_outputs_get+0x184>
 800cc6a:	494d      	ldr	r1, [pc, #308]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cc6c:	4b4d      	ldr	r3, [pc, #308]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800cc6e:	6011      	str	r1, [r2, #0]
 800cc70:	6812      	ldr	r2, [r2, #0]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d01d      	beq.n	800ccb2 <ai_platform_outputs_get+0x1d2>
 800cc76:	e7fe      	b.n	800cc76 <ai_platform_outputs_get+0x196>
 800cc78:	4a48      	ldr	r2, [pc, #288]	; (800cd9c <ai_platform_outputs_get+0x2bc>)
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	6093      	str	r3, [r2, #8]
 800cc7e:	6893      	ldr	r3, [r2, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1fc      	bne.n	800cc7e <ai_platform_outputs_get+0x19e>
 800cc84:	4946      	ldr	r1, [pc, #280]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cc86:	4b47      	ldr	r3, [pc, #284]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800cc88:	6011      	str	r1, [r2, #0]
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d010      	beq.n	800ccb2 <ai_platform_outputs_get+0x1d2>
 800cc90:	e7fe      	b.n	800cc90 <ai_platform_outputs_get+0x1b0>
 800cc92:	4a45      	ldr	r2, [pc, #276]	; (800cda8 <ai_platform_outputs_get+0x2c8>)
 800cc94:	2301      	movs	r3, #1
 800cc96:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc9a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1fb      	bne.n	800cc9a <ai_platform_outputs_get+0x1ba>
 800cca2:	493f      	ldr	r1, [pc, #252]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cca4:	4b3f      	ldr	r3, [pc, #252]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800cca6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ccaa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d113      	bne.n	800ccda <ai_platform_outputs_get+0x1fa>
 800ccb2:	f7ff fbab 	bl	800c40c <_ai_platform_release_crc>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	b005      	add	sp, #20
 800ccba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccbe:	4a37      	ldr	r2, [pc, #220]	; (800cd9c <ai_platform_outputs_get+0x2bc>)
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	6093      	str	r3, [r2, #8]
 800ccc4:	6893      	ldr	r3, [r2, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1fc      	bne.n	800ccc4 <ai_platform_outputs_get+0x1e4>
 800ccca:	4b35      	ldr	r3, [pc, #212]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cccc:	6013      	str	r3, [r2, #0]
 800ccce:	4b35      	ldr	r3, [pc, #212]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	f43f af3f 	beq.w	800cb56 <ai_platform_outputs_get+0x76>
 800ccd8:	e7fe      	b.n	800ccd8 <ai_platform_outputs_get+0x1f8>
 800ccda:	e7fe      	b.n	800ccda <ai_platform_outputs_get+0x1fa>
 800ccdc:	4a32      	ldr	r2, [pc, #200]	; (800cda8 <ai_platform_outputs_get+0x2c8>)
 800ccde:	2301      	movs	r3, #1
 800cce0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cce4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1fb      	bne.n	800cce4 <ai_platform_outputs_get+0x204>
 800ccec:	4b2c      	ldr	r3, [pc, #176]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800ccee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ccf2:	4b2c      	ldr	r3, [pc, #176]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800ccf4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	f43f af2c 	beq.w	800cb56 <ai_platform_outputs_get+0x76>
 800ccfe:	e7fe      	b.n	800ccfe <ai_platform_outputs_get+0x21e>
 800cd00:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cd04:	b14c      	cbz	r4, 800cd1a <ai_platform_outputs_get+0x23a>
 800cd06:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cd0a:	6858      	ldr	r0, [r3, #4]
 800cd0c:	9b02      	ldr	r3, [sp, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0d2      	beq.n	800ccb8 <ai_platform_outputs_get+0x1d8>
 800cd12:	801c      	strh	r4, [r3, #0]
 800cd14:	b005      	add	sp, #20
 800cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1a:	2400      	movs	r4, #0
 800cd1c:	2218      	movs	r2, #24
 800cd1e:	2111      	movs	r1, #17
 800cd20:	f109 0010 	add.w	r0, r9, #16
 800cd24:	f000 ffe8 	bl	800dcf8 <core_set_error>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	e7ef      	b.n	800cd0c <ai_platform_outputs_get+0x22c>
 800cd2c:	4a1e      	ldr	r2, [pc, #120]	; (800cda8 <ai_platform_outputs_get+0x2c8>)
 800cd2e:	2301      	movs	r3, #1
 800cd30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cd34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1fb      	bne.n	800cd34 <ai_platform_outputs_get+0x254>
 800cd3c:	4918      	ldr	r1, [pc, #96]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cd3e:	4b19      	ldr	r3, [pc, #100]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800cd40:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cd44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d0b2      	beq.n	800ccb2 <ai_platform_outputs_get+0x1d2>
 800cd4c:	e7fe      	b.n	800cd4c <ai_platform_outputs_get+0x26c>
 800cd4e:	4a16      	ldr	r2, [pc, #88]	; (800cda8 <ai_platform_outputs_get+0x2c8>)
 800cd50:	2301      	movs	r3, #1
 800cd52:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cd56:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1fb      	bne.n	800cd56 <ai_platform_outputs_get+0x276>
 800cd5e:	4b10      	ldr	r3, [pc, #64]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cd60:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800cd66:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	f43f aef3 	beq.w	800cb56 <ai_platform_outputs_get+0x76>
 800cd70:	e7fe      	b.n	800cd70 <ai_platform_outputs_get+0x290>
 800cd72:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <ai_platform_outputs_get+0x2bc>)
 800cd74:	2301      	movs	r3, #1
 800cd76:	6093      	str	r3, [r2, #8]
 800cd78:	6893      	ldr	r3, [r2, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1fc      	bne.n	800cd78 <ai_platform_outputs_get+0x298>
 800cd7e:	4b08      	ldr	r3, [pc, #32]	; (800cda0 <ai_platform_outputs_get+0x2c0>)
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <ai_platform_outputs_get+0x2c4>)
 800cd84:	6812      	ldr	r2, [r2, #0]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	f43f aee5 	beq.w	800cb56 <ai_platform_outputs_get+0x76>
 800cd8c:	e7fe      	b.n	800cd8c <ai_platform_outputs_get+0x2ac>
 800cd8e:	bf00      	nop
 800cd90:	a1c00100 	.word	0xa1c00100
 800cd94:	e0042000 	.word	0xe0042000
 800cd98:	5c001000 	.word	0x5c001000
 800cd9c:	40023000 	.word	0x40023000
 800cda0:	f407a5c2 	.word	0xf407a5c2
 800cda4:	b5e8b5cd 	.word	0xb5e8b5cd
 800cda8:	58024000 	.word	0x58024000
 800cdac:	4a0d      	ldr	r2, [pc, #52]	; (800cde4 <ai_platform_outputs_get+0x304>)
 800cdae:	2301      	movs	r3, #1
 800cdb0:	6093      	str	r3, [r2, #8]
 800cdb2:	6893      	ldr	r3, [r2, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1fc      	bne.n	800cdb2 <ai_platform_outputs_get+0x2d2>
 800cdb8:	490b      	ldr	r1, [pc, #44]	; (800cde8 <ai_platform_outputs_get+0x308>)
 800cdba:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <ai_platform_outputs_get+0x30c>)
 800cdbc:	6011      	str	r1, [r2, #0]
 800cdbe:	6812      	ldr	r2, [r2, #0]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	f43f af76 	beq.w	800ccb2 <ai_platform_outputs_get+0x1d2>
 800cdc6:	e7fe      	b.n	800cdc6 <ai_platform_outputs_get+0x2e6>
 800cdc8:	4a06      	ldr	r2, [pc, #24]	; (800cde4 <ai_platform_outputs_get+0x304>)
 800cdca:	2301      	movs	r3, #1
 800cdcc:	6093      	str	r3, [r2, #8]
 800cdce:	6893      	ldr	r3, [r2, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1fc      	bne.n	800cdce <ai_platform_outputs_get+0x2ee>
 800cdd4:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <ai_platform_outputs_get+0x308>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	4b04      	ldr	r3, [pc, #16]	; (800cdec <ai_platform_outputs_get+0x30c>)
 800cdda:	6812      	ldr	r2, [r2, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	f43f aeba 	beq.w	800cb56 <ai_platform_outputs_get+0x76>
 800cde2:	e7fe      	b.n	800cde2 <ai_platform_outputs_get+0x302>
 800cde4:	40023000 	.word	0x40023000
 800cde8:	f407a5c2 	.word	0xf407a5c2
 800cdec:	b5e8b5cd 	.word	0xb5e8b5cd

0800cdf0 <ai_platform_network_create>:
 800cdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	b083      	sub	sp, #12
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4615      	mov	r5, r2
 800cdfa:	461e      	mov	r6, r3
 800cdfc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800ce00:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800ce04:	f7ff fb00 	bl	800c408 <_ai_platform_acquire_crc>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	f000 80bd 	beq.w	800cf88 <ai_platform_network_create+0x198>
 800ce0e:	4ba5      	ldr	r3, [pc, #660]	; (800d0a4 <ai_platform_network_create+0x2b4>)
 800ce10:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800ce14:	4601      	mov	r1, r0
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce1c:	eb03 020c 	add.w	r2, r3, ip
 800ce20:	2a01      	cmp	r2, #1
 800ce22:	f240 80a8 	bls.w	800cf76 <ai_platform_network_create+0x186>
 800ce26:	f240 4249 	movw	r2, #1097	; 0x449
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	f000 80a3 	beq.w	800cf76 <ai_platform_network_create+0x186>
 800ce30:	4a9d      	ldr	r2, [pc, #628]	; (800d0a8 <ai_platform_network_create+0x2b8>)
 800ce32:	6813      	ldr	r3, [r2, #0]
 800ce34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce38:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ce3c:	f000 80b9 	beq.w	800cfb2 <ai_platform_network_create+0x1c2>
 800ce40:	6813      	ldr	r3, [r2, #0]
 800ce42:	f240 4c83 	movw	ip, #1155	; 0x483
 800ce46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce4a:	4563      	cmp	r3, ip
 800ce4c:	f000 80a1 	beq.w	800cf92 <ai_platform_network_create+0x1a2>
 800ce50:	6813      	ldr	r3, [r2, #0]
 800ce52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce56:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ce5a:	f000 8153 	beq.w	800d104 <ai_platform_network_create+0x314>
 800ce5e:	6813      	ldr	r3, [r2, #0]
 800ce60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f040 808d 	bne.w	800cf84 <ai_platform_network_create+0x194>
 800ce6a:	4a90      	ldr	r2, [pc, #576]	; (800d0ac <ai_platform_network_create+0x2bc>)
 800ce6c:	2318      	movs	r3, #24
 800ce6e:	6093      	str	r3, [r2, #8]
 800ce70:	6893      	ldr	r3, [r2, #8]
 800ce72:	2b18      	cmp	r3, #24
 800ce74:	f040 8086 	bne.w	800cf84 <ai_platform_network_create+0x194>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	6093      	str	r3, [r2, #8]
 800ce7c:	6893      	ldr	r3, [r2, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1fc      	bne.n	800ce7c <ai_platform_network_create+0x8c>
 800ce82:	4608      	mov	r0, r1
 800ce84:	f7ff fac2 	bl	800c40c <_ai_platform_release_crc>
 800ce88:	f7ff fabe 	bl	800c408 <_ai_platform_acquire_crc>
 800ce8c:	4b85      	ldr	r3, [pc, #532]	; (800d0a4 <ai_platform_network_create+0x2b4>)
 800ce8e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce98:	189a      	adds	r2, r3, r2
 800ce9a:	2a01      	cmp	r2, #1
 800ce9c:	f240 809f 	bls.w	800cfde <ai_platform_network_create+0x1ee>
 800cea0:	f240 4249 	movw	r2, #1097	; 0x449
 800cea4:	4293      	cmp	r3, r2
 800cea6:	f000 809a 	beq.w	800cfde <ai_platform_network_create+0x1ee>
 800ceaa:	4a7f      	ldr	r2, [pc, #508]	; (800d0a8 <ai_platform_network_create+0x2b8>)
 800ceac:	6813      	ldr	r3, [r2, #0]
 800ceae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ceb2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ceb6:	f000 80a0 	beq.w	800cffa <ai_platform_network_create+0x20a>
 800ceba:	6813      	ldr	r3, [r2, #0]
 800cebc:	f240 4183 	movw	r1, #1155	; 0x483
 800cec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cec4:	428b      	cmp	r3, r1
 800cec6:	f000 80bf 	beq.w	800d048 <ai_platform_network_create+0x258>
 800ceca:	6813      	ldr	r3, [r2, #0]
 800cecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ced0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ced4:	f000 8123 	beq.w	800d11e <ai_platform_network_create+0x32e>
 800ced8:	6813      	ldr	r3, [r2, #0]
 800ceda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 80c4 	beq.w	800d06c <ai_platform_network_create+0x27c>
 800cee4:	f7ff fa92 	bl	800c40c <_ai_platform_release_crc>
 800cee8:	2c00      	cmp	r4, #0
 800ceea:	f000 80aa 	beq.w	800d042 <ai_platform_network_create+0x252>
 800ceee:	4b70      	ldr	r3, [pc, #448]	; (800d0b0 <ai_platform_network_create+0x2c0>)
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	6025      	str	r5, [r4, #0]
 800cef4:	f000 fef8 	bl	800dce8 <core_init>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	f000 8090 	beq.w	800d01e <ai_platform_network_create+0x22e>
 800cefe:	f7ff fa83 	bl	800c408 <_ai_platform_acquire_crc>
 800cf02:	4b68      	ldr	r3, [pc, #416]	; (800d0a4 <ai_platform_network_create+0x2b4>)
 800cf04:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf0e:	185a      	adds	r2, r3, r1
 800cf10:	2a01      	cmp	r2, #1
 800cf12:	f240 80b9 	bls.w	800d088 <ai_platform_network_create+0x298>
 800cf16:	f240 4249 	movw	r2, #1097	; 0x449
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	f000 80b4 	beq.w	800d088 <ai_platform_network_create+0x298>
 800cf20:	4a61      	ldr	r2, [pc, #388]	; (800d0a8 <ai_platform_network_create+0x2b8>)
 800cf22:	6813      	ldr	r3, [r2, #0]
 800cf24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf28:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cf2c:	f000 80c8 	beq.w	800d0c0 <ai_platform_network_create+0x2d0>
 800cf30:	6813      	ldr	r3, [r2, #0]
 800cf32:	f240 4183 	movw	r1, #1155	; 0x483
 800cf36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf3a:	428b      	cmp	r3, r1
 800cf3c:	f000 8107 	beq.w	800d14e <ai_platform_network_create+0x35e>
 800cf40:	6813      	ldr	r3, [r2, #0]
 800cf42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf46:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cf4a:	f000 8111 	beq.w	800d170 <ai_platform_network_create+0x380>
 800cf4e:	6813      	ldr	r3, [r2, #0]
 800cf50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f040 80c3 	bne.w	800d0e0 <ai_platform_network_create+0x2f0>
 800cf5a:	4b54      	ldr	r3, [pc, #336]	; (800d0ac <ai_platform_network_create+0x2bc>)
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	609a      	str	r2, [r3, #8]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	2a00      	cmp	r2, #0
 800cf64:	d1fc      	bne.n	800cf60 <ai_platform_network_create+0x170>
 800cf66:	4a53      	ldr	r2, [pc, #332]	; (800d0b4 <ai_platform_network_create+0x2c4>)
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	4b52      	ldr	r3, [pc, #328]	; (800d0b8 <ai_platform_network_create+0x2c8>)
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	f000 80b6 	beq.w	800d0e0 <ai_platform_network_create+0x2f0>
 800cf74:	e7fe      	b.n	800cf74 <ai_platform_network_create+0x184>
 800cf76:	4b4d      	ldr	r3, [pc, #308]	; (800d0ac <ai_platform_network_create+0x2bc>)
 800cf78:	2218      	movs	r2, #24
 800cf7a:	609a      	str	r2, [r3, #8]
 800cf7c:	689a      	ldr	r2, [r3, #8]
 800cf7e:	2a18      	cmp	r2, #24
 800cf80:	d027      	beq.n	800cfd2 <ai_platform_network_create+0x1e2>
 800cf82:	4608      	mov	r0, r1
 800cf84:	f7ff fa42 	bl	800c40c <_ai_platform_release_crc>
 800cf88:	f244 1033 	movw	r0, #16691	; 0x4133
 800cf8c:	b003      	add	sp, #12
 800cf8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf92:	4a4a      	ldr	r2, [pc, #296]	; (800d0bc <ai_platform_network_create+0x2cc>)
 800cf94:	2318      	movs	r3, #24
 800cf96:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf9a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf9e:	2b18      	cmp	r3, #24
 800cfa0:	d1f0      	bne.n	800cf84 <ai_platform_network_create+0x194>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfa8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1fb      	bne.n	800cfa8 <ai_platform_network_create+0x1b8>
 800cfb0:	e767      	b.n	800ce82 <ai_platform_network_create+0x92>
 800cfb2:	4a42      	ldr	r2, [pc, #264]	; (800d0bc <ai_platform_network_create+0x2cc>)
 800cfb4:	2318      	movs	r3, #24
 800cfb6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfbe:	2b18      	cmp	r3, #24
 800cfc0:	d1e0      	bne.n	800cf84 <ai_platform_network_create+0x194>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfc8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1fb      	bne.n	800cfc8 <ai_platform_network_create+0x1d8>
 800cfd0:	e757      	b.n	800ce82 <ai_platform_network_create+0x92>
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	609a      	str	r2, [r3, #8]
 800cfd6:	689a      	ldr	r2, [r3, #8]
 800cfd8:	2a00      	cmp	r2, #0
 800cfda:	d1fc      	bne.n	800cfd6 <ai_platform_network_create+0x1e6>
 800cfdc:	e751      	b.n	800ce82 <ai_platform_network_create+0x92>
 800cfde:	4a33      	ldr	r2, [pc, #204]	; (800d0ac <ai_platform_network_create+0x2bc>)
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	6093      	str	r3, [r2, #8]
 800cfe4:	6891      	ldr	r1, [r2, #8]
 800cfe6:	2900      	cmp	r1, #0
 800cfe8:	d1fc      	bne.n	800cfe4 <ai_platform_network_create+0x1f4>
 800cfea:	4b32      	ldr	r3, [pc, #200]	; (800d0b4 <ai_platform_network_create+0x2c4>)
 800cfec:	6013      	str	r3, [r2, #0]
 800cfee:	4b32      	ldr	r3, [pc, #200]	; (800d0b8 <ai_platform_network_create+0x2c8>)
 800cff0:	6812      	ldr	r2, [r2, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	f43f af76 	beq.w	800cee4 <ai_platform_network_create+0xf4>
 800cff8:	e7fe      	b.n	800cff8 <ai_platform_network_create+0x208>
 800cffa:	4a30      	ldr	r2, [pc, #192]	; (800d0bc <ai_platform_network_create+0x2cc>)
 800cffc:	2301      	movs	r3, #1
 800cffe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d002:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1fb      	bne.n	800d002 <ai_platform_network_create+0x212>
 800d00a:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <ai_platform_network_create+0x2c4>)
 800d00c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d010:	4b29      	ldr	r3, [pc, #164]	; (800d0b8 <ai_platform_network_create+0x2c8>)
 800d012:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d016:	429a      	cmp	r2, r3
 800d018:	f43f af64 	beq.w	800cee4 <ai_platform_network_create+0xf4>
 800d01c:	e7fe      	b.n	800d01c <ai_platform_network_create+0x22c>
 800d01e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800d022:	2300      	movs	r3, #0
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	2410      	movs	r4, #16
 800d028:	4642      	mov	r2, r8
 800d02a:	4639      	mov	r1, r7
 800d02c:	4630      	mov	r0, r6
 800d02e:	f002 f8a1 	bl	800f174 <ai_version_get>
 800d032:	4603      	mov	r3, r0
 800d034:	2000      	movs	r0, #0
 800d036:	64ab      	str	r3, [r5, #72]	; 0x48
 800d038:	f369 0007 	bfi	r0, r9, #0, #8
 800d03c:	f364 201f 	bfi	r0, r4, #8, #24
 800d040:	e7a4      	b.n	800cf8c <ai_platform_network_create+0x19c>
 800d042:	f241 0010 	movw	r0, #4112	; 0x1010
 800d046:	e7a1      	b.n	800cf8c <ai_platform_network_create+0x19c>
 800d048:	4a1c      	ldr	r2, [pc, #112]	; (800d0bc <ai_platform_network_create+0x2cc>)
 800d04a:	2301      	movs	r3, #1
 800d04c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d050:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1fb      	bne.n	800d050 <ai_platform_network_create+0x260>
 800d058:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <ai_platform_network_create+0x2c4>)
 800d05a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d05e:	4b16      	ldr	r3, [pc, #88]	; (800d0b8 <ai_platform_network_create+0x2c8>)
 800d060:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d064:	429a      	cmp	r2, r3
 800d066:	f43f af3d 	beq.w	800cee4 <ai_platform_network_create+0xf4>
 800d06a:	e7fe      	b.n	800d06a <ai_platform_network_create+0x27a>
 800d06c:	4a0f      	ldr	r2, [pc, #60]	; (800d0ac <ai_platform_network_create+0x2bc>)
 800d06e:	2301      	movs	r3, #1
 800d070:	6093      	str	r3, [r2, #8]
 800d072:	6893      	ldr	r3, [r2, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1fc      	bne.n	800d072 <ai_platform_network_create+0x282>
 800d078:	4b0e      	ldr	r3, [pc, #56]	; (800d0b4 <ai_platform_network_create+0x2c4>)
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	4b0e      	ldr	r3, [pc, #56]	; (800d0b8 <ai_platform_network_create+0x2c8>)
 800d07e:	6812      	ldr	r2, [r2, #0]
 800d080:	429a      	cmp	r2, r3
 800d082:	f43f af2f 	beq.w	800cee4 <ai_platform_network_create+0xf4>
 800d086:	e7fe      	b.n	800d086 <ai_platform_network_create+0x296>
 800d088:	4a08      	ldr	r2, [pc, #32]	; (800d0ac <ai_platform_network_create+0x2bc>)
 800d08a:	2301      	movs	r3, #1
 800d08c:	6093      	str	r3, [r2, #8]
 800d08e:	6893      	ldr	r3, [r2, #8]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1fc      	bne.n	800d08e <ai_platform_network_create+0x29e>
 800d094:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <ai_platform_network_create+0x2c4>)
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <ai_platform_network_create+0x2c8>)
 800d09a:	6812      	ldr	r2, [r2, #0]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d01f      	beq.n	800d0e0 <ai_platform_network_create+0x2f0>
 800d0a0:	e7fe      	b.n	800d0a0 <ai_platform_network_create+0x2b0>
 800d0a2:	bf00      	nop
 800d0a4:	e0042000 	.word	0xe0042000
 800d0a8:	5c001000 	.word	0x5c001000
 800d0ac:	40023000 	.word	0x40023000
 800d0b0:	a1c00100 	.word	0xa1c00100
 800d0b4:	f407a5c2 	.word	0xf407a5c2
 800d0b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d0bc:	58024000 	.word	0x58024000
 800d0c0:	4a33      	ldr	r2, [pc, #204]	; (800d190 <ai_platform_network_create+0x3a0>)
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d0c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1fb      	bne.n	800d0c8 <ai_platform_network_create+0x2d8>
 800d0d0:	4b30      	ldr	r3, [pc, #192]	; (800d194 <ai_platform_network_create+0x3a4>)
 800d0d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d0d6:	4b30      	ldr	r3, [pc, #192]	; (800d198 <ai_platform_network_create+0x3a8>)
 800d0d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d12c      	bne.n	800d13a <ai_platform_network_create+0x34a>
 800d0e0:	f7ff f994 	bl	800c40c <_ai_platform_release_crc>
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f002 f843 	bl	800f174 <ai_version_get>
 800d0ee:	4681      	mov	r9, r0
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2105      	movs	r1, #5
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	f002 f83d 	bl	800f174 <ai_version_get>
 800d0fa:	4581      	cmp	r9, r0
 800d0fc:	d01e      	beq.n	800d13c <ai_platform_network_create+0x34c>
 800d0fe:	f04f 0901 	mov.w	r9, #1
 800d102:	e78e      	b.n	800d022 <ai_platform_network_create+0x232>
 800d104:	4b25      	ldr	r3, [pc, #148]	; (800d19c <ai_platform_network_create+0x3ac>)
 800d106:	2218      	movs	r2, #24
 800d108:	609a      	str	r2, [r3, #8]
 800d10a:	689a      	ldr	r2, [r3, #8]
 800d10c:	2a18      	cmp	r2, #24
 800d10e:	f47f af39 	bne.w	800cf84 <ai_platform_network_create+0x194>
 800d112:	2201      	movs	r2, #1
 800d114:	609a      	str	r2, [r3, #8]
 800d116:	689a      	ldr	r2, [r3, #8]
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d1fc      	bne.n	800d116 <ai_platform_network_create+0x326>
 800d11c:	e6b1      	b.n	800ce82 <ai_platform_network_create+0x92>
 800d11e:	4a1f      	ldr	r2, [pc, #124]	; (800d19c <ai_platform_network_create+0x3ac>)
 800d120:	2301      	movs	r3, #1
 800d122:	6093      	str	r3, [r2, #8]
 800d124:	6893      	ldr	r3, [r2, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1fc      	bne.n	800d124 <ai_platform_network_create+0x334>
 800d12a:	4b1a      	ldr	r3, [pc, #104]	; (800d194 <ai_platform_network_create+0x3a4>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <ai_platform_network_create+0x3a8>)
 800d130:	6812      	ldr	r2, [r2, #0]
 800d132:	429a      	cmp	r2, r3
 800d134:	f43f aed6 	beq.w	800cee4 <ai_platform_network_create+0xf4>
 800d138:	e7fe      	b.n	800d138 <ai_platform_network_create+0x348>
 800d13a:	e7fe      	b.n	800d13a <ai_platform_network_create+0x34a>
 800d13c:	4b18      	ldr	r3, [pc, #96]	; (800d1a0 <ai_platform_network_create+0x3b0>)
 800d13e:	a801      	add	r0, sp, #4
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	f000 ff35 	bl	800dfb0 <ai_check_custom_types>
 800d146:	b300      	cbz	r0, 800d18a <ai_platform_network_create+0x39a>
 800d148:	2400      	movs	r4, #0
 800d14a:	46a1      	mov	r9, r4
 800d14c:	e76c      	b.n	800d028 <ai_platform_network_create+0x238>
 800d14e:	4b10      	ldr	r3, [pc, #64]	; (800d190 <ai_platform_network_create+0x3a0>)
 800d150:	2201      	movs	r2, #1
 800d152:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800d156:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	d1fb      	bne.n	800d156 <ai_platform_network_create+0x366>
 800d15e:	4a0d      	ldr	r2, [pc, #52]	; (800d194 <ai_platform_network_create+0x3a4>)
 800d160:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800d164:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800d168:	4b0b      	ldr	r3, [pc, #44]	; (800d198 <ai_platform_network_create+0x3a8>)
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d0b8      	beq.n	800d0e0 <ai_platform_network_create+0x2f0>
 800d16e:	e7fe      	b.n	800d16e <ai_platform_network_create+0x37e>
 800d170:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <ai_platform_network_create+0x3ac>)
 800d172:	2201      	movs	r2, #1
 800d174:	609a      	str	r2, [r3, #8]
 800d176:	689a      	ldr	r2, [r3, #8]
 800d178:	2a00      	cmp	r2, #0
 800d17a:	d1fc      	bne.n	800d176 <ai_platform_network_create+0x386>
 800d17c:	4a05      	ldr	r2, [pc, #20]	; (800d194 <ai_platform_network_create+0x3a4>)
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	4b05      	ldr	r3, [pc, #20]	; (800d198 <ai_platform_network_create+0x3a8>)
 800d184:	429a      	cmp	r2, r3
 800d186:	d0ab      	beq.n	800d0e0 <ai_platform_network_create+0x2f0>
 800d188:	e7fe      	b.n	800d188 <ai_platform_network_create+0x398>
 800d18a:	f04f 0902 	mov.w	r9, #2
 800d18e:	e748      	b.n	800d022 <ai_platform_network_create+0x232>
 800d190:	58024000 	.word	0x58024000
 800d194:	f407a5c2 	.word	0xf407a5c2
 800d198:	b5e8b5cd 	.word	0xb5e8b5cd
 800d19c:	40023000 	.word	0x40023000
 800d1a0:	84048403 	.word	0x84048403

0800d1a4 <ai_platform_network_init>:
 800d1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d052      	beq.n	800d252 <ai_platform_network_init+0xae>
 800d1ac:	4bab      	ldr	r3, [pc, #684]	; (800d45c <ai_platform_network_init+0x2b8>)
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	6802      	ldr	r2, [r0, #0]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d14d      	bne.n	800d252 <ai_platform_network_init+0xae>
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	f7ff f926 	bl	800c408 <_ai_platform_acquire_crc>
 800d1bc:	4ba8      	ldr	r3, [pc, #672]	; (800d460 <ai_platform_network_init+0x2bc>)
 800d1be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1c8:	189a      	adds	r2, r3, r2
 800d1ca:	2a01      	cmp	r2, #1
 800d1cc:	f240 809b 	bls.w	800d306 <ai_platform_network_init+0x162>
 800d1d0:	f240 4249 	movw	r2, #1097	; 0x449
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	f000 8096 	beq.w	800d306 <ai_platform_network_init+0x162>
 800d1da:	4aa2      	ldr	r2, [pc, #648]	; (800d464 <ai_platform_network_init+0x2c0>)
 800d1dc:	6813      	ldr	r3, [r2, #0]
 800d1de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d1e6:	f000 809d 	beq.w	800d324 <ai_platform_network_init+0x180>
 800d1ea:	6813      	ldr	r3, [r2, #0]
 800d1ec:	f240 4183 	movw	r1, #1155	; 0x483
 800d1f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1f4:	428b      	cmp	r3, r1
 800d1f6:	f000 80e4 	beq.w	800d3c2 <ai_platform_network_init+0x21e>
 800d1fa:	6813      	ldr	r3, [r2, #0]
 800d1fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d200:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d204:	f000 811b 	beq.w	800d43e <ai_platform_network_init+0x29a>
 800d208:	6813      	ldr	r3, [r2, #0]
 800d20a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 80f9 	beq.w	800d406 <ai_platform_network_init+0x262>
 800d214:	f7ff f8fa 	bl	800c40c <_ai_platform_release_crc>
 800d218:	2d00      	cmp	r5, #0
 800d21a:	f000 8147 	beq.w	800d4ac <ai_platform_network_init+0x308>
 800d21e:	4b92      	ldr	r3, [pc, #584]	; (800d468 <ai_platform_network_init+0x2c4>)
 800d220:	682a      	ldr	r2, [r5, #0]
 800d222:	429a      	cmp	r2, r3
 800d224:	f040 8090 	bne.w	800d348 <ai_platform_network_init+0x1a4>
 800d228:	692b      	ldr	r3, [r5, #16]
 800d22a:	89ae      	ldrh	r6, [r5, #12]
 800d22c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800d230:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800d234:	62a3      	str	r3, [r4, #40]	; 0x28
 800d236:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800d23a:	2303      	movs	r3, #3
 800d23c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d23e:	4626      	mov	r6, r4
 800d240:	4620      	mov	r0, r4
 800d242:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800d246:	60e3      	str	r3, [r4, #12]
 800d248:	f000 feda 	bl	800e000 <ai_layers_init_all>
 800d24c:	4630      	mov	r0, r6
 800d24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d252:	f7ff f8d9 	bl	800c408 <_ai_platform_acquire_crc>
 800d256:	4b82      	ldr	r3, [pc, #520]	; (800d460 <ai_platform_network_init+0x2bc>)
 800d258:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d262:	185a      	adds	r2, r3, r1
 800d264:	2a01      	cmp	r2, #1
 800d266:	d92b      	bls.n	800d2c0 <ai_platform_network_init+0x11c>
 800d268:	f240 4249 	movw	r2, #1097	; 0x449
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d027      	beq.n	800d2c0 <ai_platform_network_init+0x11c>
 800d270:	4a7c      	ldr	r2, [pc, #496]	; (800d464 <ai_platform_network_init+0x2c0>)
 800d272:	6813      	ldr	r3, [r2, #0]
 800d274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d278:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d27c:	d02d      	beq.n	800d2da <ai_platform_network_init+0x136>
 800d27e:	6813      	ldr	r3, [r2, #0]
 800d280:	f240 4183 	movw	r1, #1155	; 0x483
 800d284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d288:	428b      	cmp	r3, r1
 800d28a:	f000 8089 	beq.w	800d3a0 <ai_platform_network_init+0x1fc>
 800d28e:	6813      	ldr	r3, [r2, #0]
 800d290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d294:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d298:	f000 80c3 	beq.w	800d422 <ai_platform_network_init+0x27e>
 800d29c:	6813      	ldr	r3, [r2, #0]
 800d29e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d129      	bne.n	800d2fa <ai_platform_network_init+0x156>
 800d2a6:	4a71      	ldr	r2, [pc, #452]	; (800d46c <ai_platform_network_init+0x2c8>)
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	6093      	str	r3, [r2, #8]
 800d2ac:	6893      	ldr	r3, [r2, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1fc      	bne.n	800d2ac <ai_platform_network_init+0x108>
 800d2b2:	496f      	ldr	r1, [pc, #444]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d2b4:	4b6f      	ldr	r3, [pc, #444]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d2b6:	6011      	str	r1, [r2, #0]
 800d2b8:	6812      	ldr	r2, [r2, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d01d      	beq.n	800d2fa <ai_platform_network_init+0x156>
 800d2be:	e7fe      	b.n	800d2be <ai_platform_network_init+0x11a>
 800d2c0:	4a6a      	ldr	r2, [pc, #424]	; (800d46c <ai_platform_network_init+0x2c8>)
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	6093      	str	r3, [r2, #8]
 800d2c6:	6893      	ldr	r3, [r2, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1fc      	bne.n	800d2c6 <ai_platform_network_init+0x122>
 800d2cc:	4968      	ldr	r1, [pc, #416]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d2ce:	4b69      	ldr	r3, [pc, #420]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d2d0:	6011      	str	r1, [r2, #0]
 800d2d2:	6812      	ldr	r2, [r2, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d010      	beq.n	800d2fa <ai_platform_network_init+0x156>
 800d2d8:	e7fe      	b.n	800d2d8 <ai_platform_network_init+0x134>
 800d2da:	4a67      	ldr	r2, [pc, #412]	; (800d478 <ai_platform_network_init+0x2d4>)
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1fb      	bne.n	800d2e2 <ai_platform_network_init+0x13e>
 800d2ea:	4961      	ldr	r1, [pc, #388]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d2ec:	4b61      	ldr	r3, [pc, #388]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d2ee:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d2f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d113      	bne.n	800d322 <ai_platform_network_init+0x17e>
 800d2fa:	2600      	movs	r6, #0
 800d2fc:	f7ff f886 	bl	800c40c <_ai_platform_release_crc>
 800d300:	4630      	mov	r0, r6
 800d302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d306:	4a59      	ldr	r2, [pc, #356]	; (800d46c <ai_platform_network_init+0x2c8>)
 800d308:	2301      	movs	r3, #1
 800d30a:	6093      	str	r3, [r2, #8]
 800d30c:	6893      	ldr	r3, [r2, #8]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1fc      	bne.n	800d30c <ai_platform_network_init+0x168>
 800d312:	4b57      	ldr	r3, [pc, #348]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	4b57      	ldr	r3, [pc, #348]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d318:	6812      	ldr	r2, [r2, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	f43f af7a 	beq.w	800d214 <ai_platform_network_init+0x70>
 800d320:	e7fe      	b.n	800d320 <ai_platform_network_init+0x17c>
 800d322:	e7fe      	b.n	800d322 <ai_platform_network_init+0x17e>
 800d324:	4a54      	ldr	r2, [pc, #336]	; (800d478 <ai_platform_network_init+0x2d4>)
 800d326:	2301      	movs	r3, #1
 800d328:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d32c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1fb      	bne.n	800d32c <ai_platform_network_init+0x188>
 800d334:	4b4e      	ldr	r3, [pc, #312]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d336:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d33a:	4b4e      	ldr	r3, [pc, #312]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d33c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d340:	429a      	cmp	r2, r3
 800d342:	f43f af67 	beq.w	800d214 <ai_platform_network_init+0x70>
 800d346:	e7fe      	b.n	800d346 <ai_platform_network_init+0x1a2>
 800d348:	2101      	movs	r1, #1
 800d34a:	4628      	mov	r0, r5
 800d34c:	f105 081c 	add.w	r8, r5, #28
 800d350:	686e      	ldr	r6, [r5, #4]
 800d352:	f7ff f80b 	bl	800c36c <ai_buffer_get_size>
 800d356:	4607      	mov	r7, r0
 800d358:	2101      	movs	r1, #1
 800d35a:	4640      	mov	r0, r8
 800d35c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800d360:	f7ff f804 	bl	800c36c <ai_buffer_get_size>
 800d364:	2f00      	cmp	r7, #0
 800d366:	d13e      	bne.n	800d3e6 <ai_platform_network_init+0x242>
 800d368:	2800      	cmp	r0, #0
 800d36a:	f000 808e 	beq.w	800d48a <ai_platform_network_init+0x2e6>
 800d36e:	f1b9 0f00 	cmp.w	r9, #0
 800d372:	f000 8094 	beq.w	800d49e <ai_platform_network_init+0x2fa>
 800d376:	f04f 0c01 	mov.w	ip, #1
 800d37a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d37c:	2600      	movs	r6, #0
 800d37e:	83e7      	strh	r7, [r4, #30]
 800d380:	4563      	cmp	r3, ip
 800d382:	83a6      	strh	r6, [r4, #28]
 800d384:	d37a      	bcc.n	800d47c <ai_platform_network_init+0x2d8>
 800d386:	f1bc 0f00 	cmp.w	ip, #0
 800d38a:	f000 809c 	beq.w	800d4c6 <ai_platform_network_init+0x322>
 800d38e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d390:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d396:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d39a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d39e:	e74c      	b.n	800d23a <ai_platform_network_init+0x96>
 800d3a0:	4a35      	ldr	r2, [pc, #212]	; (800d478 <ai_platform_network_init+0x2d4>)
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d3a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1fb      	bne.n	800d3a8 <ai_platform_network_init+0x204>
 800d3b0:	492f      	ldr	r1, [pc, #188]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d3b2:	4b30      	ldr	r3, [pc, #192]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d3b4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d3b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d09c      	beq.n	800d2fa <ai_platform_network_init+0x156>
 800d3c0:	e7fe      	b.n	800d3c0 <ai_platform_network_init+0x21c>
 800d3c2:	4a2d      	ldr	r2, [pc, #180]	; (800d478 <ai_platform_network_init+0x2d4>)
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d3ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1fb      	bne.n	800d3ca <ai_platform_network_init+0x226>
 800d3d2:	4b27      	ldr	r3, [pc, #156]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d3d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d3d8:	4b26      	ldr	r3, [pc, #152]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d3da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	f43f af18 	beq.w	800d214 <ai_platform_network_init+0x70>
 800d3e4:	e7fe      	b.n	800d3e4 <ai_platform_network_init+0x240>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d153      	bne.n	800d492 <ai_platform_network_init+0x2ee>
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4684      	mov	ip, r0
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	d063      	beq.n	800d4ba <ai_platform_network_init+0x316>
 800d3f2:	8be6      	ldrh	r6, [r4, #30]
 800d3f4:	2e00      	cmp	r6, #0
 800d3f6:	d168      	bne.n	800d4ca <ai_platform_network_init+0x326>
 800d3f8:	2212      	movs	r2, #18
 800d3fa:	2116      	movs	r1, #22
 800d3fc:	f104 0010 	add.w	r0, r4, #16
 800d400:	f000 fc7a 	bl	800dcf8 <core_set_error>
 800d404:	e77c      	b.n	800d300 <ai_platform_network_init+0x15c>
 800d406:	4a19      	ldr	r2, [pc, #100]	; (800d46c <ai_platform_network_init+0x2c8>)
 800d408:	2301      	movs	r3, #1
 800d40a:	6093      	str	r3, [r2, #8]
 800d40c:	6893      	ldr	r3, [r2, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1fc      	bne.n	800d40c <ai_platform_network_init+0x268>
 800d412:	4b17      	ldr	r3, [pc, #92]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	4b17      	ldr	r3, [pc, #92]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d418:	6812      	ldr	r2, [r2, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	f43f aefa 	beq.w	800d214 <ai_platform_network_init+0x70>
 800d420:	e7fe      	b.n	800d420 <ai_platform_network_init+0x27c>
 800d422:	4a12      	ldr	r2, [pc, #72]	; (800d46c <ai_platform_network_init+0x2c8>)
 800d424:	2301      	movs	r3, #1
 800d426:	6093      	str	r3, [r2, #8]
 800d428:	6893      	ldr	r3, [r2, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1fc      	bne.n	800d428 <ai_platform_network_init+0x284>
 800d42e:	4910      	ldr	r1, [pc, #64]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d430:	4b10      	ldr	r3, [pc, #64]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d432:	6011      	str	r1, [r2, #0]
 800d434:	6812      	ldr	r2, [r2, #0]
 800d436:	429a      	cmp	r2, r3
 800d438:	f43f af5f 	beq.w	800d2fa <ai_platform_network_init+0x156>
 800d43c:	e7fe      	b.n	800d43c <ai_platform_network_init+0x298>
 800d43e:	4a0b      	ldr	r2, [pc, #44]	; (800d46c <ai_platform_network_init+0x2c8>)
 800d440:	2301      	movs	r3, #1
 800d442:	6093      	str	r3, [r2, #8]
 800d444:	6893      	ldr	r3, [r2, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1fc      	bne.n	800d444 <ai_platform_network_init+0x2a0>
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <ai_platform_network_init+0x2cc>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	4b09      	ldr	r3, [pc, #36]	; (800d474 <ai_platform_network_init+0x2d0>)
 800d450:	6812      	ldr	r2, [r2, #0]
 800d452:	429a      	cmp	r2, r3
 800d454:	f43f aede 	beq.w	800d214 <ai_platform_network_init+0x70>
 800d458:	e7fe      	b.n	800d458 <ai_platform_network_init+0x2b4>
 800d45a:	bf00      	nop
 800d45c:	a1c00100 	.word	0xa1c00100
 800d460:	e0042000 	.word	0xe0042000
 800d464:	5c001000 	.word	0x5c001000
 800d468:	a1facade 	.word	0xa1facade
 800d46c:	40023000 	.word	0x40023000
 800d470:	f407a5c2 	.word	0xf407a5c2
 800d474:	b5e8b5cd 	.word	0xb5e8b5cd
 800d478:	58024000 	.word	0x58024000
 800d47c:	2213      	movs	r2, #19
 800d47e:	2116      	movs	r1, #22
 800d480:	f104 0010 	add.w	r0, r4, #16
 800d484:	f000 fc38 	bl	800dcf8 <core_set_error>
 800d488:	e73a      	b.n	800d300 <ai_platform_network_init+0x15c>
 800d48a:	4607      	mov	r7, r0
 800d48c:	4680      	mov	r8, r0
 800d48e:	4684      	mov	ip, r0
 800d490:	e773      	b.n	800d37a <ai_platform_network_init+0x1d6>
 800d492:	f1b9 0f00 	cmp.w	r9, #0
 800d496:	d002      	beq.n	800d49e <ai_platform_network_init+0x2fa>
 800d498:	f04f 0c01 	mov.w	ip, #1
 800d49c:	e7a7      	b.n	800d3ee <ai_platform_network_init+0x24a>
 800d49e:	2110      	movs	r1, #16
 800d4a0:	2213      	movs	r2, #19
 800d4a2:	2600      	movs	r6, #0
 800d4a4:	1860      	adds	r0, r4, r1
 800d4a6:	f000 fc27 	bl	800dcf8 <core_set_error>
 800d4aa:	e729      	b.n	800d300 <ai_platform_network_init+0x15c>
 800d4ac:	2110      	movs	r1, #16
 800d4ae:	2211      	movs	r2, #17
 800d4b0:	462e      	mov	r6, r5
 800d4b2:	1860      	adds	r0, r4, r1
 800d4b4:	f000 fc20 	bl	800dcf8 <core_set_error>
 800d4b8:	e722      	b.n	800d300 <ai_platform_network_init+0x15c>
 800d4ba:	2110      	movs	r1, #16
 800d4bc:	2212      	movs	r2, #18
 800d4be:	1860      	adds	r0, r4, r1
 800d4c0:	f000 fc1a 	bl	800dcf8 <core_set_error>
 800d4c4:	e71c      	b.n	800d300 <ai_platform_network_init+0x15c>
 800d4c6:	4666      	mov	r6, ip
 800d4c8:	e6b7      	b.n	800d23a <ai_platform_network_init+0x96>
 800d4ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4cc:	6a26      	ldr	r6, [r4, #32]
 800d4ce:	2701      	movs	r7, #1
 800d4d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d4d6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d4da:	e74e      	b.n	800d37a <ai_platform_network_init+0x1d6>

0800d4dc <ai_platform_network_post_init>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d04e      	beq.n	800d580 <ai_platform_network_post_init+0xa4>
 800d4e2:	4b8c      	ldr	r3, [pc, #560]	; (800d714 <ai_platform_network_post_init+0x238>)
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	6802      	ldr	r2, [r0, #0]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d149      	bne.n	800d580 <ai_platform_network_post_init+0xa4>
 800d4ec:	f7fe ff8c 	bl	800c408 <_ai_platform_acquire_crc>
 800d4f0:	4b89      	ldr	r3, [pc, #548]	; (800d718 <ai_platform_network_post_init+0x23c>)
 800d4f2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4fc:	189a      	adds	r2, r3, r2
 800d4fe:	2a01      	cmp	r2, #1
 800d500:	f240 8095 	bls.w	800d62e <ai_platform_network_post_init+0x152>
 800d504:	f240 4249 	movw	r2, #1097	; 0x449
 800d508:	4293      	cmp	r3, r2
 800d50a:	f000 8090 	beq.w	800d62e <ai_platform_network_post_init+0x152>
 800d50e:	4a83      	ldr	r2, [pc, #524]	; (800d71c <ai_platform_network_post_init+0x240>)
 800d510:	6813      	ldr	r3, [r2, #0]
 800d512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d516:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d51a:	f000 8096 	beq.w	800d64a <ai_platform_network_post_init+0x16e>
 800d51e:	6813      	ldr	r3, [r2, #0]
 800d520:	f240 4183 	movw	r1, #1155	; 0x483
 800d524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d528:	428b      	cmp	r3, r1
 800d52a:	f000 80b8 	beq.w	800d69e <ai_platform_network_post_init+0x1c2>
 800d52e:	6813      	ldr	r3, [r2, #0]
 800d530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d534:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d538:	f000 80de 	beq.w	800d6f8 <ai_platform_network_post_init+0x21c>
 800d53c:	6813      	ldr	r3, [r2, #0]
 800d53e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d542:	2b00      	cmp	r3, #0
 800d544:	f000 80bd 	beq.w	800d6c2 <ai_platform_network_post_init+0x1e6>
 800d548:	f7fe ff60 	bl	800c40c <_ai_platform_release_crc>
 800d54c:	68e3      	ldr	r3, [r4, #12]
 800d54e:	f013 0502 	ands.w	r5, r3, #2
 800d552:	f000 808c 	beq.w	800d66e <ai_platform_network_post_init+0x192>
 800d556:	4620      	mov	r0, r4
 800d558:	f000 fd60 	bl	800e01c <ai_layers_post_init_all>
 800d55c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d55e:	b16b      	cbz	r3, 800d57c <ai_platform_network_post_init+0xa0>
 800d560:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d562:	e007      	b.n	800d574 <ai_platform_network_post_init+0x98>
 800d564:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800d568:	4798      	blx	r3
 800d56a:	692b      	ldr	r3, [r5, #16]
 800d56c:	b133      	cbz	r3, 800d57c <ai_platform_network_post_init+0xa0>
 800d56e:	42ab      	cmp	r3, r5
 800d570:	461d      	mov	r5, r3
 800d572:	d003      	beq.n	800d57c <ai_platform_network_post_init+0xa0>
 800d574:	4629      	mov	r1, r5
 800d576:	2000      	movs	r0, #0
 800d578:	2d00      	cmp	r5, #0
 800d57a:	d1f3      	bne.n	800d564 <ai_platform_network_post_init+0x88>
 800d57c:	2001      	movs	r0, #1
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	f7fe ff42 	bl	800c408 <_ai_platform_acquire_crc>
 800d584:	4b64      	ldr	r3, [pc, #400]	; (800d718 <ai_platform_network_post_init+0x23c>)
 800d586:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d590:	185a      	adds	r2, r3, r1
 800d592:	2a01      	cmp	r2, #1
 800d594:	d92a      	bls.n	800d5ec <ai_platform_network_post_init+0x110>
 800d596:	f240 4249 	movw	r2, #1097	; 0x449
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d026      	beq.n	800d5ec <ai_platform_network_post_init+0x110>
 800d59e:	4a5f      	ldr	r2, [pc, #380]	; (800d71c <ai_platform_network_post_init+0x240>)
 800d5a0:	6813      	ldr	r3, [r2, #0]
 800d5a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d5aa:	d02c      	beq.n	800d606 <ai_platform_network_post_init+0x12a>
 800d5ac:	6813      	ldr	r3, [r2, #0]
 800d5ae:	f240 4183 	movw	r1, #1155	; 0x483
 800d5b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5b6:	428b      	cmp	r3, r1
 800d5b8:	d060      	beq.n	800d67c <ai_platform_network_post_init+0x1a0>
 800d5ba:	6813      	ldr	r3, [r2, #0]
 800d5bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5c0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d5c4:	f000 808b 	beq.w	800d6de <ai_platform_network_post_init+0x202>
 800d5c8:	6813      	ldr	r3, [r2, #0]
 800d5ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d129      	bne.n	800d626 <ai_platform_network_post_init+0x14a>
 800d5d2:	4a53      	ldr	r2, [pc, #332]	; (800d720 <ai_platform_network_post_init+0x244>)
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	6093      	str	r3, [r2, #8]
 800d5d8:	6893      	ldr	r3, [r2, #8]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1fc      	bne.n	800d5d8 <ai_platform_network_post_init+0xfc>
 800d5de:	4951      	ldr	r1, [pc, #324]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d5e0:	4b51      	ldr	r3, [pc, #324]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d5e2:	6011      	str	r1, [r2, #0]
 800d5e4:	6812      	ldr	r2, [r2, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d01d      	beq.n	800d626 <ai_platform_network_post_init+0x14a>
 800d5ea:	e7fe      	b.n	800d5ea <ai_platform_network_post_init+0x10e>
 800d5ec:	4a4c      	ldr	r2, [pc, #304]	; (800d720 <ai_platform_network_post_init+0x244>)
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	6093      	str	r3, [r2, #8]
 800d5f2:	6893      	ldr	r3, [r2, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1fc      	bne.n	800d5f2 <ai_platform_network_post_init+0x116>
 800d5f8:	494a      	ldr	r1, [pc, #296]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d5fa:	4b4b      	ldr	r3, [pc, #300]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d5fc:	6011      	str	r1, [r2, #0]
 800d5fe:	6812      	ldr	r2, [r2, #0]
 800d600:	429a      	cmp	r2, r3
 800d602:	d010      	beq.n	800d626 <ai_platform_network_post_init+0x14a>
 800d604:	e7fe      	b.n	800d604 <ai_platform_network_post_init+0x128>
 800d606:	4a49      	ldr	r2, [pc, #292]	; (800d72c <ai_platform_network_post_init+0x250>)
 800d608:	2301      	movs	r3, #1
 800d60a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d60e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1fb      	bne.n	800d60e <ai_platform_network_post_init+0x132>
 800d616:	4943      	ldr	r1, [pc, #268]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d618:	4b43      	ldr	r3, [pc, #268]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d61a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d61e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d622:	429a      	cmp	r2, r3
 800d624:	d110      	bne.n	800d648 <ai_platform_network_post_init+0x16c>
 800d626:	f7fe fef1 	bl	800c40c <_ai_platform_release_crc>
 800d62a:	2000      	movs	r0, #0
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	4a3c      	ldr	r2, [pc, #240]	; (800d720 <ai_platform_network_post_init+0x244>)
 800d630:	2301      	movs	r3, #1
 800d632:	6093      	str	r3, [r2, #8]
 800d634:	6893      	ldr	r3, [r2, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1fc      	bne.n	800d634 <ai_platform_network_post_init+0x158>
 800d63a:	493a      	ldr	r1, [pc, #232]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d63c:	4b3a      	ldr	r3, [pc, #232]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d63e:	6011      	str	r1, [r2, #0]
 800d640:	6812      	ldr	r2, [r2, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d080      	beq.n	800d548 <ai_platform_network_post_init+0x6c>
 800d646:	e7fe      	b.n	800d646 <ai_platform_network_post_init+0x16a>
 800d648:	e7fe      	b.n	800d648 <ai_platform_network_post_init+0x16c>
 800d64a:	4a38      	ldr	r2, [pc, #224]	; (800d72c <ai_platform_network_post_init+0x250>)
 800d64c:	2301      	movs	r3, #1
 800d64e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d652:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1fb      	bne.n	800d652 <ai_platform_network_post_init+0x176>
 800d65a:	4932      	ldr	r1, [pc, #200]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d65c:	4b32      	ldr	r3, [pc, #200]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d65e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d662:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d666:	429a      	cmp	r2, r3
 800d668:	f43f af6e 	beq.w	800d548 <ai_platform_network_post_init+0x6c>
 800d66c:	e7fe      	b.n	800d66c <ai_platform_network_post_init+0x190>
 800d66e:	2210      	movs	r2, #16
 800d670:	2111      	movs	r1, #17
 800d672:	18a0      	adds	r0, r4, r2
 800d674:	f000 fb40 	bl	800dcf8 <core_set_error>
 800d678:	4628      	mov	r0, r5
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	4a2b      	ldr	r2, [pc, #172]	; (800d72c <ai_platform_network_post_init+0x250>)
 800d67e:	2301      	movs	r3, #1
 800d680:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d684:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1fb      	bne.n	800d684 <ai_platform_network_post_init+0x1a8>
 800d68c:	4925      	ldr	r1, [pc, #148]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d68e:	4b26      	ldr	r3, [pc, #152]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d690:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d694:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d698:	429a      	cmp	r2, r3
 800d69a:	d0c4      	beq.n	800d626 <ai_platform_network_post_init+0x14a>
 800d69c:	e7fe      	b.n	800d69c <ai_platform_network_post_init+0x1c0>
 800d69e:	4a23      	ldr	r2, [pc, #140]	; (800d72c <ai_platform_network_post_init+0x250>)
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d6a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1fb      	bne.n	800d6a6 <ai_platform_network_post_init+0x1ca>
 800d6ae:	491d      	ldr	r1, [pc, #116]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d6b0:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d6b2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d6b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	f43f af44 	beq.w	800d548 <ai_platform_network_post_init+0x6c>
 800d6c0:	e7fe      	b.n	800d6c0 <ai_platform_network_post_init+0x1e4>
 800d6c2:	4a17      	ldr	r2, [pc, #92]	; (800d720 <ai_platform_network_post_init+0x244>)
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	6093      	str	r3, [r2, #8]
 800d6c8:	6893      	ldr	r3, [r2, #8]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1fc      	bne.n	800d6c8 <ai_platform_network_post_init+0x1ec>
 800d6ce:	4915      	ldr	r1, [pc, #84]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d6d0:	4b15      	ldr	r3, [pc, #84]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d6d2:	6011      	str	r1, [r2, #0]
 800d6d4:	6812      	ldr	r2, [r2, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	f43f af36 	beq.w	800d548 <ai_platform_network_post_init+0x6c>
 800d6dc:	e7fe      	b.n	800d6dc <ai_platform_network_post_init+0x200>
 800d6de:	4a10      	ldr	r2, [pc, #64]	; (800d720 <ai_platform_network_post_init+0x244>)
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	6093      	str	r3, [r2, #8]
 800d6e4:	6893      	ldr	r3, [r2, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1fc      	bne.n	800d6e4 <ai_platform_network_post_init+0x208>
 800d6ea:	490e      	ldr	r1, [pc, #56]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d6ec:	4b0e      	ldr	r3, [pc, #56]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d6ee:	6011      	str	r1, [r2, #0]
 800d6f0:	6812      	ldr	r2, [r2, #0]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d097      	beq.n	800d626 <ai_platform_network_post_init+0x14a>
 800d6f6:	e7fe      	b.n	800d6f6 <ai_platform_network_post_init+0x21a>
 800d6f8:	4a09      	ldr	r2, [pc, #36]	; (800d720 <ai_platform_network_post_init+0x244>)
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	6093      	str	r3, [r2, #8]
 800d6fe:	6893      	ldr	r3, [r2, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1fc      	bne.n	800d6fe <ai_platform_network_post_init+0x222>
 800d704:	4907      	ldr	r1, [pc, #28]	; (800d724 <ai_platform_network_post_init+0x248>)
 800d706:	4b08      	ldr	r3, [pc, #32]	; (800d728 <ai_platform_network_post_init+0x24c>)
 800d708:	6011      	str	r1, [r2, #0]
 800d70a:	6812      	ldr	r2, [r2, #0]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	f43f af1b 	beq.w	800d548 <ai_platform_network_post_init+0x6c>
 800d712:	e7fe      	b.n	800d712 <ai_platform_network_post_init+0x236>
 800d714:	a1c00100 	.word	0xa1c00100
 800d718:	e0042000 	.word	0xe0042000
 800d71c:	5c001000 	.word	0x5c001000
 800d720:	40023000 	.word	0x40023000
 800d724:	f407a5c2 	.word	0xf407a5c2
 800d728:	b5e8b5cd 	.word	0xb5e8b5cd
 800d72c:	58024000 	.word	0x58024000

0800d730 <ai_platform_network_process>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	b085      	sub	sp, #20
 800d736:	460e      	mov	r6, r1
 800d738:	4605      	mov	r5, r0
 800d73a:	9201      	str	r2, [sp, #4]
 800d73c:	b120      	cbz	r0, 800d748 <ai_platform_network_process+0x18>
 800d73e:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <ai_platform_network_process+0xa0>)
 800d740:	6802      	ldr	r2, [r0, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	bf18      	it	ne
 800d746:	2500      	movne	r5, #0
 800d748:	f7fe fe5e 	bl	800c408 <_ai_platform_acquire_crc>
 800d74c:	4b21      	ldr	r3, [pc, #132]	; (800d7d4 <ai_platform_network_process+0xa4>)
 800d74e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d758:	185a      	adds	r2, r3, r1
 800d75a:	2a01      	cmp	r2, #1
 800d75c:	d92b      	bls.n	800d7b6 <ai_platform_network_process+0x86>
 800d75e:	f240 4249 	movw	r2, #1097	; 0x449
 800d762:	4293      	cmp	r3, r2
 800d764:	d027      	beq.n	800d7b6 <ai_platform_network_process+0x86>
 800d766:	4a1c      	ldr	r2, [pc, #112]	; (800d7d8 <ai_platform_network_process+0xa8>)
 800d768:	6813      	ldr	r3, [r2, #0]
 800d76a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d76e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d772:	d039      	beq.n	800d7e8 <ai_platform_network_process+0xb8>
 800d774:	6813      	ldr	r3, [r2, #0]
 800d776:	f240 4183 	movw	r1, #1155	; 0x483
 800d77a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d77e:	428b      	cmp	r3, r1
 800d780:	f000 819c 	beq.w	800dabc <ai_platform_network_process+0x38c>
 800d784:	6813      	ldr	r3, [r2, #0]
 800d786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d78a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d78e:	f000 8179 	beq.w	800da84 <ai_platform_network_process+0x354>
 800d792:	6813      	ldr	r3, [r2, #0]
 800d794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d136      	bne.n	800d80a <ai_platform_network_process+0xda>
 800d79c:	4a0f      	ldr	r2, [pc, #60]	; (800d7dc <ai_platform_network_process+0xac>)
 800d79e:	2301      	movs	r3, #1
 800d7a0:	6093      	str	r3, [r2, #8]
 800d7a2:	6893      	ldr	r3, [r2, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1fc      	bne.n	800d7a2 <ai_platform_network_process+0x72>
 800d7a8:	4b0d      	ldr	r3, [pc, #52]	; (800d7e0 <ai_platform_network_process+0xb0>)
 800d7aa:	6013      	str	r3, [r2, #0]
 800d7ac:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <ai_platform_network_process+0xb4>)
 800d7ae:	6812      	ldr	r2, [r2, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d02a      	beq.n	800d80a <ai_platform_network_process+0xda>
 800d7b4:	e7fe      	b.n	800d7b4 <ai_platform_network_process+0x84>
 800d7b6:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <ai_platform_network_process+0xac>)
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	6093      	str	r3, [r2, #8]
 800d7bc:	6893      	ldr	r3, [r2, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1fc      	bne.n	800d7bc <ai_platform_network_process+0x8c>
 800d7c2:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <ai_platform_network_process+0xb0>)
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	4b07      	ldr	r3, [pc, #28]	; (800d7e4 <ai_platform_network_process+0xb4>)
 800d7c8:	6812      	ldr	r2, [r2, #0]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d01d      	beq.n	800d80a <ai_platform_network_process+0xda>
 800d7ce:	e7fe      	b.n	800d7ce <ai_platform_network_process+0x9e>
 800d7d0:	a1c00100 	.word	0xa1c00100
 800d7d4:	e0042000 	.word	0xe0042000
 800d7d8:	5c001000 	.word	0x5c001000
 800d7dc:	40023000 	.word	0x40023000
 800d7e0:	f407a5c2 	.word	0xf407a5c2
 800d7e4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d7e8:	4ab0      	ldr	r2, [pc, #704]	; (800daac <ai_platform_network_process+0x37c>)
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d7f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1fb      	bne.n	800d7f0 <ai_platform_network_process+0xc0>
 800d7f8:	4bad      	ldr	r3, [pc, #692]	; (800dab0 <ai_platform_network_process+0x380>)
 800d7fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d7fe:	4bad      	ldr	r3, [pc, #692]	; (800dab4 <ai_platform_network_process+0x384>)
 800d800:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d804:	429a      	cmp	r2, r3
 800d806:	f040 812b 	bne.w	800da60 <ai_platform_network_process+0x330>
 800d80a:	f7fe fdff 	bl	800c40c <_ai_platform_release_crc>
 800d80e:	2d00      	cmp	r5, #0
 800d810:	f000 8172 	beq.w	800daf8 <ai_platform_network_process+0x3c8>
 800d814:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800d816:	2b00      	cmp	r3, #0
 800d818:	f000 8123 	beq.w	800da62 <ai_platform_network_process+0x332>
 800d81c:	68eb      	ldr	r3, [r5, #12]
 800d81e:	2200      	movs	r2, #0
 800d820:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800d824:	f003 0303 	and.w	r3, r3, #3
 800d828:	616a      	str	r2, [r5, #20]
 800d82a:	2b03      	cmp	r3, #3
 800d82c:	f040 811f 	bne.w	800da6e <ai_platform_network_process+0x33e>
 800d830:	2e00      	cmp	r6, #0
 800d832:	f000 8156 	beq.w	800dae2 <ai_platform_network_process+0x3b2>
 800d836:	fab8 f788 	clz	r7, r8
 800d83a:	097f      	lsrs	r7, r7, #5
 800d83c:	f1b8 0f00 	cmp.w	r8, #0
 800d840:	f000 814f 	beq.w	800dae2 <ai_platform_network_process+0x3b2>
 800d844:	f8b8 3000 	ldrh.w	r3, [r8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 814a 	beq.w	800dae2 <ai_platform_network_process+0x3b2>
 800d84e:	69b3      	ldr	r3, [r6, #24]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800d856:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d072      	beq.n	800d944 <ai_platform_network_process+0x214>
 800d85e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d862:	2c00      	cmp	r4, #0
 800d864:	d06e      	beq.n	800d944 <ai_platform_network_process+0x214>
 800d866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d86a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d86e:	f8d3 a000 	ldr.w	sl, [r3]
 800d872:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800d876:	f000 8133 	beq.w	800dae0 <ai_platform_network_process+0x3b0>
 800d87a:	69a3      	ldr	r3, [r4, #24]
 800d87c:	2101      	movs	r1, #1
 800d87e:	4630      	mov	r0, r6
 800d880:	685d      	ldr	r5, [r3, #4]
 800d882:	f7fe fd73 	bl	800c36c <ai_buffer_get_size>
 800d886:	4285      	cmp	r5, r0
 800d888:	f0c0 8138 	bcc.w	800dafc <ai_platform_network_process+0x3cc>
 800d88c:	68e0      	ldr	r0, [r4, #12]
 800d88e:	69b1      	ldr	r1, [r6, #24]
 800d890:	68c2      	ldr	r2, [r0, #12]
 800d892:	68cb      	ldr	r3, [r1, #12]
 800d894:	429a      	cmp	r2, r3
 800d896:	f040 8131 	bne.w	800dafc <ai_platform_network_process+0x3cc>
 800d89a:	6882      	ldr	r2, [r0, #8]
 800d89c:	688b      	ldr	r3, [r1, #8]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	f040 812c 	bne.w	800dafc <ai_platform_network_process+0x3cc>
 800d8a4:	6842      	ldr	r2, [r0, #4]
 800d8a6:	684b      	ldr	r3, [r1, #4]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	f040 8127 	bne.w	800dafc <ai_platform_network_process+0x3cc>
 800d8ae:	69a3      	ldr	r3, [r4, #24]
 800d8b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8b4:	f001 fc4e 	bl	800f154 <ai_array_get_data_byte_size>
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f001 fc60 	bl	800f180 <get_tensor_byte_size>
 800d8c0:	4285      	cmp	r5, r0
 800d8c2:	f0c0 811b 	bcc.w	800dafc <ai_platform_network_process+0x3cc>
 800d8c6:	69a3      	ldr	r3, [r4, #24]
 800d8c8:	6818      	ldr	r0, [r3, #0]
 800d8ca:	f001 fbd7 	bl	800f07c <ai_array_to_buffer_fmt>
 800d8ce:	6833      	ldr	r3, [r6, #0]
 800d8d0:	4058      	eors	r0, r3
 800d8d2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d8d6:	f040 81c8 	bne.w	800dc6a <ai_platform_network_process+0x53a>
 800d8da:	6873      	ldr	r3, [r6, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 81bb 	beq.w	800dc58 <ai_platform_network_process+0x528>
 800d8e2:	69b3      	ldr	r3, [r6, #24]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f000 81c8 	beq.w	800dc7c <ai_platform_network_process+0x54c>
 800d8ec:	9a02      	ldr	r2, [sp, #8]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	3701      	adds	r7, #1
 800d8f2:	361c      	adds	r6, #28
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	bf38      	it	cc
 800d8f8:	461a      	movcc	r2, r3
 800d8fa:	9202      	str	r2, [sp, #8]
 800d8fc:	f001 fc40 	bl	800f180 <get_tensor_byte_size>
 800d900:	f8c9 0008 	str.w	r0, [r9, #8]
 800d904:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	fb00 f303 	mul.w	r3, r0, r3
 800d90e:	f8c9 300c 	str.w	r3, [r9, #12]
 800d912:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d916:	440b      	add	r3, r1
 800d918:	f8c9 1004 	str.w	r1, [r9, #4]
 800d91c:	f84a 300b 	str.w	r3, [sl, fp]
 800d920:	69a0      	ldr	r0, [r4, #24]
 800d922:	6803      	ldr	r3, [r0, #0]
 800d924:	009a      	lsls	r2, r3, #2
 800d926:	f100 80bb 	bmi.w	800daa0 <ai_platform_network_process+0x370>
 800d92a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d92e:	1a9b      	subs	r3, r3, r2
 800d930:	4419      	add	r1, r3
 800d932:	6081      	str	r1, [r0, #8]
 800d934:	69a3      	ldr	r3, [r4, #24]
 800d936:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d93a:	60da      	str	r2, [r3, #12]
 800d93c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d940:	42bb      	cmp	r3, r7
 800d942:	d888      	bhi.n	800d856 <ai_platform_network_process+0x126>
 800d944:	9d03      	ldr	r5, [sp, #12]
 800d946:	9b01      	ldr	r3, [sp, #4]
 800d948:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f000 819f 	beq.w	800dc8e <ai_platform_network_process+0x55e>
 800d950:	2a01      	cmp	r2, #1
 800d952:	f240 8179 	bls.w	800dc48 <ai_platform_network_process+0x518>
 800d956:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800d95a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 8172 	beq.w	800dc48 <ai_platform_network_process+0x518>
 800d964:	9e01      	ldr	r6, [sp, #4]
 800d966:	2700      	movs	r7, #0
 800d968:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 80d3 	beq.w	800db18 <ai_platform_network_process+0x3e8>
 800d972:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d976:	2c00      	cmp	r4, #0
 800d978:	f000 80ce 	beq.w	800db18 <ai_platform_network_process+0x3e8>
 800d97c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d980:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d984:	f8d3 8000 	ldr.w	r8, [r3]
 800d988:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800d98c:	f000 819d 	beq.w	800dcca <ai_platform_network_process+0x59a>
 800d990:	69a3      	ldr	r3, [r4, #24]
 800d992:	2101      	movs	r1, #1
 800d994:	4630      	mov	r0, r6
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	f7fe fce7 	bl	800c36c <ai_buffer_get_size>
 800d99e:	9b01      	ldr	r3, [sp, #4]
 800d9a0:	4283      	cmp	r3, r0
 800d9a2:	f0c0 8151 	bcc.w	800dc48 <ai_platform_network_process+0x518>
 800d9a6:	68e0      	ldr	r0, [r4, #12]
 800d9a8:	69b1      	ldr	r1, [r6, #24]
 800d9aa:	68c2      	ldr	r2, [r0, #12]
 800d9ac:	68cb      	ldr	r3, [r1, #12]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	f040 814a 	bne.w	800dc48 <ai_platform_network_process+0x518>
 800d9b4:	6882      	ldr	r2, [r0, #8]
 800d9b6:	688b      	ldr	r3, [r1, #8]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	f040 8145 	bne.w	800dc48 <ai_platform_network_process+0x518>
 800d9be:	6842      	ldr	r2, [r0, #4]
 800d9c0:	684b      	ldr	r3, [r1, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	f040 8140 	bne.w	800dc48 <ai_platform_network_process+0x518>
 800d9c8:	69a3      	ldr	r3, [r4, #24]
 800d9ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9ce:	f001 fbc1 	bl	800f154 <ai_array_get_data_byte_size>
 800d9d2:	9001      	str	r0, [sp, #4]
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f001 fbd3 	bl	800f180 <get_tensor_byte_size>
 800d9da:	9b01      	ldr	r3, [sp, #4]
 800d9dc:	4283      	cmp	r3, r0
 800d9de:	f0c0 8133 	bcc.w	800dc48 <ai_platform_network_process+0x518>
 800d9e2:	69a3      	ldr	r3, [r4, #24]
 800d9e4:	6818      	ldr	r0, [r3, #0]
 800d9e6:	f001 fb49 	bl	800f07c <ai_array_to_buffer_fmt>
 800d9ea:	6833      	ldr	r3, [r6, #0]
 800d9ec:	4058      	eors	r0, r3
 800d9ee:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d9f2:	f040 815a 	bne.w	800dcaa <ai_platform_network_process+0x57a>
 800d9f6:	6873      	ldr	r3, [r6, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f000 814e 	beq.w	800dc9a <ai_platform_network_process+0x56a>
 800d9fe:	69b3      	ldr	r3, [r6, #24]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 8159 	beq.w	800dcba <ai_platform_network_process+0x58a>
 800da08:	9a02      	ldr	r2, [sp, #8]
 800da0a:	4620      	mov	r0, r4
 800da0c:	3701      	adds	r7, #1
 800da0e:	361c      	adds	r6, #28
 800da10:	429a      	cmp	r2, r3
 800da12:	bf38      	it	cc
 800da14:	461a      	movcc	r2, r3
 800da16:	9202      	str	r2, [sp, #8]
 800da18:	f001 fbb2 	bl	800f180 <get_tensor_byte_size>
 800da1c:	f8ca 0008 	str.w	r0, [sl, #8]
 800da20:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	fb00 f303 	mul.w	r3, r0, r3
 800da2a:	f8ca 300c 	str.w	r3, [sl, #12]
 800da2e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800da32:	440b      	add	r3, r1
 800da34:	f8ca 1004 	str.w	r1, [sl, #4]
 800da38:	f848 300b 	str.w	r3, [r8, fp]
 800da3c:	69a0      	ldr	r0, [r4, #24]
 800da3e:	6803      	ldr	r3, [r0, #0]
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	d464      	bmi.n	800db0e <ai_platform_network_process+0x3de>
 800da44:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	4419      	add	r1, r3
 800da4c:	6081      	str	r1, [r0, #8]
 800da4e:	69a3      	ldr	r3, [r4, #24]
 800da50:	f8da 2004 	ldr.w	r2, [sl, #4]
 800da54:	60da      	str	r2, [r3, #12]
 800da56:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800da5a:	429f      	cmp	r7, r3
 800da5c:	d384      	bcc.n	800d968 <ai_platform_network_process+0x238>
 800da5e:	e05b      	b.n	800db18 <ai_platform_network_process+0x3e8>
 800da60:	e7fe      	b.n	800da60 <ai_platform_network_process+0x330>
 800da62:	68ea      	ldr	r2, [r5, #12]
 800da64:	616b      	str	r3, [r5, #20]
 800da66:	f002 0203 	and.w	r2, r2, #3
 800da6a:	2a03      	cmp	r2, #3
 800da6c:	d039      	beq.n	800dae2 <ai_platform_network_process+0x3b2>
 800da6e:	2230      	movs	r2, #48	; 0x30
 800da70:	2111      	movs	r1, #17
 800da72:	f105 0010 	add.w	r0, r5, #16
 800da76:	2400      	movs	r4, #0
 800da78:	f000 f93e 	bl	800dcf8 <core_set_error>
 800da7c:	4620      	mov	r0, r4
 800da7e:	b005      	add	sp, #20
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	4a0c      	ldr	r2, [pc, #48]	; (800dab8 <ai_platform_network_process+0x388>)
 800da86:	2301      	movs	r3, #1
 800da88:	6093      	str	r3, [r2, #8]
 800da8a:	6893      	ldr	r3, [r2, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1fc      	bne.n	800da8a <ai_platform_network_process+0x35a>
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <ai_platform_network_process+0x380>)
 800da92:	6013      	str	r3, [r2, #0]
 800da94:	4b07      	ldr	r3, [pc, #28]	; (800dab4 <ai_platform_network_process+0x384>)
 800da96:	6812      	ldr	r2, [r2, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	f43f aeb6 	beq.w	800d80a <ai_platform_network_process+0xda>
 800da9e:	e7fe      	b.n	800da9e <ai_platform_network_process+0x36e>
 800daa0:	f8b8 3000 	ldrh.w	r3, [r8]
 800daa4:	429f      	cmp	r7, r3
 800daa6:	f4ff aed6 	bcc.w	800d856 <ai_platform_network_process+0x126>
 800daaa:	e74b      	b.n	800d944 <ai_platform_network_process+0x214>
 800daac:	58024000 	.word	0x58024000
 800dab0:	f407a5c2 	.word	0xf407a5c2
 800dab4:	b5e8b5cd 	.word	0xb5e8b5cd
 800dab8:	40023000 	.word	0x40023000
 800dabc:	4a87      	ldr	r2, [pc, #540]	; (800dcdc <ai_platform_network_process+0x5ac>)
 800dabe:	2301      	movs	r3, #1
 800dac0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dac4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1fb      	bne.n	800dac4 <ai_platform_network_process+0x394>
 800dacc:	4b84      	ldr	r3, [pc, #528]	; (800dce0 <ai_platform_network_process+0x5b0>)
 800dace:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800dad2:	4b84      	ldr	r3, [pc, #528]	; (800dce4 <ai_platform_network_process+0x5b4>)
 800dad4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dad8:	429a      	cmp	r2, r3
 800dada:	f43f ae96 	beq.w	800d80a <ai_platform_network_process+0xda>
 800dade:	e7fe      	b.n	800dade <ai_platform_network_process+0x3ae>
 800dae0:	9d03      	ldr	r5, [sp, #12]
 800dae2:	2400      	movs	r4, #0
 800dae4:	2217      	movs	r2, #23
 800dae6:	2112      	movs	r1, #18
 800dae8:	f105 0010 	add.w	r0, r5, #16
 800daec:	f000 f904 	bl	800dcf8 <core_set_error>
 800daf0:	4620      	mov	r0, r4
 800daf2:	b005      	add	sp, #20
 800daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf8:	462c      	mov	r4, r5
 800dafa:	e7bf      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dafc:	9d03      	ldr	r5, [sp, #12]
 800dafe:	2218      	movs	r2, #24
 800db00:	2112      	movs	r1, #18
 800db02:	2400      	movs	r4, #0
 800db04:	f105 0010 	add.w	r0, r5, #16
 800db08:	f000 f8f6 	bl	800dcf8 <core_set_error>
 800db0c:	e7b6      	b.n	800da7c <ai_platform_network_process+0x34c>
 800db0e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800db12:	429f      	cmp	r7, r3
 800db14:	f4ff af28 	bcc.w	800d968 <ai_platform_network_process+0x238>
 800db18:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800db1c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800db1e:	82ab      	strh	r3, [r5, #20]
 800db20:	2a00      	cmp	r2, #0
 800db22:	f040 808b 	bne.w	800dc3c <ai_platform_network_process+0x50c>
 800db26:	4616      	mov	r6, r2
 800db28:	4617      	mov	r7, r2
 800db2a:	8aec      	ldrh	r4, [r5, #22]
 800db2c:	429c      	cmp	r4, r3
 800db2e:	d2a5      	bcs.n	800da7c <ai_platform_network_process+0x34c>
 800db30:	46ab      	mov	fp, r5
 800db32:	2e00      	cmp	r6, #0
 800db34:	d030      	beq.n	800db98 <ai_platform_network_process+0x468>
 800db36:	f04f 0800 	mov.w	r8, #0
 800db3a:	e014      	b.n	800db66 <ai_platform_network_process+0x436>
 800db3c:	6882      	ldr	r2, [r0, #8]
 800db3e:	68c5      	ldr	r5, [r0, #12]
 800db40:	6863      	ldr	r3, [r4, #4]
 800db42:	1b52      	subs	r2, r2, r5
 800db44:	4413      	add	r3, r2
 800db46:	6083      	str	r3, [r0, #8]
 800db48:	698b      	ldr	r3, [r1, #24]
 800db4a:	6862      	ldr	r2, [r4, #4]
 800db4c:	60da      	str	r2, [r3, #12]
 800db4e:	f859 200a 	ldr.w	r2, [r9, sl]
 800db52:	f108 0801 	add.w	r8, r8, #1
 800db56:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800db5a:	440b      	add	r3, r1
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d301      	bcc.n	800db64 <ai_platform_network_process+0x434>
 800db60:	68e3      	ldr	r3, [r4, #12]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	6063      	str	r3, [r4, #4]
 800db66:	8833      	ldrh	r3, [r6, #0]
 800db68:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800db6c:	4543      	cmp	r3, r8
 800db6e:	d913      	bls.n	800db98 <ai_platform_network_process+0x468>
 800db70:	6873      	ldr	r3, [r6, #4]
 800db72:	b18b      	cbz	r3, 800db98 <ai_platform_network_process+0x468>
 800db74:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800db78:	b171      	cbz	r1, 800db98 <ai_platform_network_process+0x468>
 800db7a:	6988      	ldr	r0, [r1, #24]
 800db7c:	68b2      	ldr	r2, [r6, #8]
 800db7e:	6803      	ldr	r3, [r0, #0]
 800db80:	f8d2 9000 	ldr.w	r9, [r2]
 800db84:	009d      	lsls	r5, r3, #2
 800db86:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800db8a:	d5d7      	bpl.n	800db3c <ai_platform_network_process+0x40c>
 800db8c:	6881      	ldr	r1, [r0, #8]
 800db8e:	68a2      	ldr	r2, [r4, #8]
 800db90:	6860      	ldr	r0, [r4, #4]
 800db92:	f000 ff67 	bl	800ea64 <st_int8_copy>
 800db96:	e7da      	b.n	800db4e <ai_platform_network_process+0x41e>
 800db98:	4658      	mov	r0, fp
 800db9a:	f000 fa53 	bl	800e044 <ai_layers_forward_all>
 800db9e:	2f00      	cmp	r7, #0
 800dba0:	d03d      	beq.n	800dc1e <ai_platform_network_process+0x4ee>
 800dba2:	2400      	movs	r4, #0
 800dba4:	e016      	b.n	800dbd4 <ai_platform_network_process+0x4a4>
 800dba6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800dbaa:	f859 100a 	ldr.w	r1, [r9, sl]
 800dbae:	4413      	add	r3, r2
 800dbb0:	428b      	cmp	r3, r1
 800dbb2:	d302      	bcc.n	800dbba <ai_platform_network_process+0x48a>
 800dbb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbb8:	1acb      	subs	r3, r1, r3
 800dbba:	f8c8 3004 	str.w	r3, [r8, #4]
 800dbbe:	6981      	ldr	r1, [r0, #24]
 800dbc0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800dbc4:	1b52      	subs	r2, r2, r5
 800dbc6:	4413      	add	r3, r2
 800dbc8:	608b      	str	r3, [r1, #8]
 800dbca:	6983      	ldr	r3, [r0, #24]
 800dbcc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800dbd0:	60da      	str	r2, [r3, #12]
 800dbd2:	3401      	adds	r4, #1
 800dbd4:	883b      	ldrh	r3, [r7, #0]
 800dbd6:	42a3      	cmp	r3, r4
 800dbd8:	d921      	bls.n	800dc1e <ai_platform_network_process+0x4ee>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	b1fb      	cbz	r3, 800dc1e <ai_platform_network_process+0x4ee>
 800dbde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dbe2:	b1e0      	cbz	r0, 800dc1e <ai_platform_network_process+0x4ee>
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800dbea:	6983      	ldr	r3, [r0, #24]
 800dbec:	f8d2 9000 	ldr.w	r9, [r2]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800dbf6:	0092      	lsls	r2, r2, #2
 800dbf8:	d5d5      	bpl.n	800dba6 <ai_platform_network_process+0x476>
 800dbfa:	6898      	ldr	r0, [r3, #8]
 800dbfc:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800dc00:	f000 ff30 	bl	800ea64 <st_int8_copy>
 800dc04:	f859 200a 	ldr.w	r2, [r9, sl]
 800dc08:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800dc0c:	440b      	add	r3, r1
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d302      	bcc.n	800dc18 <ai_platform_network_process+0x4e8>
 800dc12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	f8c8 3004 	str.w	r3, [r8, #4]
 800dc1c:	e7d9      	b.n	800dbd2 <ai_platform_network_process+0x4a2>
 800dc1e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800dc22:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800dc26:	3401      	adds	r4, #1
 800dc28:	b2a4      	uxth	r4, r4
 800dc2a:	42a3      	cmp	r3, r4
 800dc2c:	f8ab 4016 	strh.w	r4, [fp, #22]
 800dc30:	f63f af7f 	bhi.w	800db32 <ai_platform_network_process+0x402>
 800dc34:	4620      	mov	r0, r4
 800dc36:	b005      	add	sp, #20
 800dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc3c:	2a01      	cmp	r2, #1
 800dc3e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800dc40:	d029      	beq.n	800dc96 <ai_platform_network_process+0x566>
 800dc42:	f106 070c 	add.w	r7, r6, #12
 800dc46:	e770      	b.n	800db2a <ai_platform_network_process+0x3fa>
 800dc48:	2218      	movs	r2, #24
 800dc4a:	2113      	movs	r1, #19
 800dc4c:	f105 0010 	add.w	r0, r5, #16
 800dc50:	2400      	movs	r4, #0
 800dc52:	f000 f851 	bl	800dcf8 <core_set_error>
 800dc56:	e711      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dc58:	9d03      	ldr	r5, [sp, #12]
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	2217      	movs	r2, #23
 800dc5e:	2112      	movs	r1, #18
 800dc60:	f105 0010 	add.w	r0, r5, #16
 800dc64:	f000 f848 	bl	800dcf8 <core_set_error>
 800dc68:	e708      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dc6a:	9d03      	ldr	r5, [sp, #12]
 800dc6c:	2219      	movs	r2, #25
 800dc6e:	2112      	movs	r1, #18
 800dc70:	2400      	movs	r4, #0
 800dc72:	f105 0010 	add.w	r0, r5, #16
 800dc76:	f000 f83f 	bl	800dcf8 <core_set_error>
 800dc7a:	e6ff      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dc7c:	9d03      	ldr	r5, [sp, #12]
 800dc7e:	4604      	mov	r4, r0
 800dc80:	2221      	movs	r2, #33	; 0x21
 800dc82:	2112      	movs	r1, #18
 800dc84:	f105 0010 	add.w	r0, r5, #16
 800dc88:	f000 f836 	bl	800dcf8 <core_set_error>
 800dc8c:	e6f6      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dc8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800dc92:	82ab      	strh	r3, [r5, #20]
 800dc94:	e744      	b.n	800db20 <ai_platform_network_process+0x3f0>
 800dc96:	2700      	movs	r7, #0
 800dc98:	e747      	b.n	800db2a <ai_platform_network_process+0x3fa>
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	2217      	movs	r2, #23
 800dc9e:	2113      	movs	r1, #19
 800dca0:	f105 0010 	add.w	r0, r5, #16
 800dca4:	f000 f828 	bl	800dcf8 <core_set_error>
 800dca8:	e6e8      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dcaa:	2219      	movs	r2, #25
 800dcac:	2113      	movs	r1, #19
 800dcae:	f105 0010 	add.w	r0, r5, #16
 800dcb2:	2400      	movs	r4, #0
 800dcb4:	f000 f820 	bl	800dcf8 <core_set_error>
 800dcb8:	e6e0      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dcba:	4604      	mov	r4, r0
 800dcbc:	2221      	movs	r2, #33	; 0x21
 800dcbe:	2113      	movs	r1, #19
 800dcc0:	f105 0010 	add.w	r0, r5, #16
 800dcc4:	f000 f818 	bl	800dcf8 <core_set_error>
 800dcc8:	e6d8      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dcca:	2217      	movs	r2, #23
 800dccc:	2113      	movs	r1, #19
 800dcce:	f105 0010 	add.w	r0, r5, #16
 800dcd2:	4654      	mov	r4, sl
 800dcd4:	f000 f810 	bl	800dcf8 <core_set_error>
 800dcd8:	e6d0      	b.n	800da7c <ai_platform_network_process+0x34c>
 800dcda:	bf00      	nop
 800dcdc:	58024000 	.word	0x58024000
 800dce0:	f407a5c2 	.word	0xf407a5c2
 800dce4:	b5e8b5cd 	.word	0xb5e8b5cd

0800dce8 <core_init>:
 800dce8:	2001      	movs	r0, #1
 800dcea:	4770      	bx	lr

0800dcec <core_get_error>:
 800dcec:	4603      	mov	r3, r0
 800dcee:	2200      	movs	r2, #0
 800dcf0:	6800      	ldr	r0, [r0, #0]
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop

0800dcf8 <core_set_error>:
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	7800      	ldrb	r0, [r0, #0]
 800dcfc:	b108      	cbz	r0, 800dd02 <core_set_error+0xa>
 800dcfe:	2000      	movs	r0, #0
 800dd00:	4770      	bx	lr
 800dd02:	7019      	strb	r1, [r3, #0]
 800dd04:	2001      	movs	r0, #1
 800dd06:	6819      	ldr	r1, [r3, #0]
 800dd08:	f362 211f 	bfi	r1, r2, #8, #24
 800dd0c:	6019      	str	r1, [r3, #0]
 800dd0e:	4770      	bx	lr

0800dd10 <node_convert>:
 800dd10:	6982      	ldr	r2, [r0, #24]
 800dd12:	8813      	ldrh	r3, [r2, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d04a      	beq.n	800ddae <node_convert+0x9e>
 800dd18:	6852      	ldr	r2, [r2, #4]
 800dd1a:	6850      	ldr	r0, [r2, #4]
 800dd1c:	b100      	cbz	r0, 800dd20 <node_convert+0x10>
 800dd1e:	6800      	ldr	r0, [r0, #0]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	f000 813d 	beq.w	800dfa0 <node_convert+0x290>
 800dd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd2a:	6915      	ldr	r5, [r2, #16]
 800dd2c:	b105      	cbz	r5, 800dd30 <node_convert+0x20>
 800dd2e:	682d      	ldr	r5, [r5, #0]
 800dd30:	6883      	ldr	r3, [r0, #8]
 800dd32:	0a1b      	lsrs	r3, r3, #8
 800dd34:	f000 80ee 	beq.w	800df14 <node_convert+0x204>
 800dd38:	68c1      	ldr	r1, [r0, #12]
 800dd3a:	2401      	movs	r4, #1
 800dd3c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dd40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dd44:	4299      	cmp	r1, r3
 800dd46:	fb02 f404 	mul.w	r4, r2, r4
 800dd4a:	d1f9      	bne.n	800dd40 <node_convert+0x30>
 800dd4c:	6982      	ldr	r2, [r0, #24]
 800dd4e:	69af      	ldr	r7, [r5, #24]
 800dd50:	6813      	ldr	r3, [r2, #0]
 800dd52:	f3c3 4143 	ubfx	r1, r3, #17, #4
 800dd56:	2901      	cmp	r1, #1
 800dd58:	d02b      	beq.n	800ddb2 <node_convert+0xa2>
 800dd5a:	6801      	ldr	r1, [r0, #0]
 800dd5c:	68bd      	ldr	r5, [r7, #8]
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	d069      	beq.n	800de36 <node_convert+0x126>
 800dd62:	684e      	ldr	r6, [r1, #4]
 800dd64:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 800dd68:	6892      	ldr	r2, [r2, #8]
 800dd6a:	2e00      	cmp	r6, #0
 800dd6c:	f000 80b8 	beq.w	800dee0 <node_convert+0x1d0>
 800dd70:	884b      	ldrh	r3, [r1, #2]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f000 8089 	beq.w	800de8a <node_convert+0x17a>
 800dd78:	6833      	ldr	r3, [r6, #0]
 800dd7a:	ed93 7a00 	vldr	s14, [r3]
 800dd7e:	6873      	ldr	r3, [r6, #4]
 800dd80:	2800      	cmp	r0, #0
 800dd82:	f000 80c5 	beq.w	800df10 <node_convert+0x200>
 800dd86:	f993 0000 	ldrsb.w	r0, [r3]
 800dd8a:	b174      	cbz	r4, 800ddaa <node_convert+0x9a>
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4414      	add	r4, r2
 800dd90:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800dd94:	1a1b      	subs	r3, r3, r0
 800dd96:	42a2      	cmp	r2, r4
 800dd98:	ee07 3a90 	vmov	s15, r3
 800dd9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dda0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dda4:	ece1 7a01 	vstmia	r1!, {s15}
 800dda8:	d1f2      	bne.n	800dd90 <node_convert+0x80>
 800ddaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	deff      	udf	#255	; 0xff
 800ddb2:	682e      	ldr	r6, [r5, #0]
 800ddb4:	6895      	ldr	r5, [r2, #8]
 800ddb6:	2e00      	cmp	r6, #0
 800ddb8:	f000 80ae 	beq.w	800df18 <node_convert+0x208>
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	6871      	ldr	r1, [r6, #4]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d064      	beq.n	800de94 <node_convert+0x184>
 800ddca:	8870      	ldrh	r0, [r6, #2]
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d067      	beq.n	800dea0 <node_convert+0x190>
 800ddd0:	6808      	ldr	r0, [r1, #0]
 800ddd2:	edd0 7a00 	vldr	s15, [r0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 80d7 	beq.w	800df8a <node_convert+0x27a>
 800dddc:	684b      	ldr	r3, [r1, #4]
 800ddde:	f993 3000 	ldrsb.w	r3, [r3]
 800dde2:	ee06 3a90 	vmov	s13, r3
 800dde6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ddea:	2c00      	cmp	r4, #0
 800ddec:	d0dd      	beq.n	800ddaa <node_convert+0x9a>
 800ddee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddf2:	4414      	add	r4, r2
 800ddf4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ddf8:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 800dfa8 <node_convert+0x298>
 800ddfc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800de00:	ecb5 7a01 	vldmia	r5!, {s14}
 800de04:	eef0 7a66 	vmov.f32	s15, s13
 800de08:	eee7 7a06 	vfma.f32	s15, s14, s12
 800de0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de14:	bfac      	ite	ge
 800de16:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 800de1a:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 800de1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de22:	ee17 3a90 	vmov	r3, s15
 800de26:	f303 0307 	ssat	r3, #8, r3
 800de2a:	f802 3b01 	strb.w	r3, [r2], #1
 800de2e:	42a2      	cmp	r2, r4
 800de30:	d1e6      	bne.n	800de00 <node_convert+0xf0>
 800de32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de36:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800de3a:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800de3e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800de42:	6890      	ldr	r0, [r2, #8]
 800de44:	1b8e      	subs	r6, r1, r6
 800de46:	2908      	cmp	r1, #8
 800de48:	4622      	mov	r2, r4
 800de4a:	4629      	mov	r1, r5
 800de4c:	f106 0640 	add.w	r6, r6, #64	; 0x40
 800de50:	eba6 0603 	sub.w	r6, r6, r3
 800de54:	f000 808b 	beq.w	800df6e <node_convert+0x25e>
 800de58:	f001 f846 	bl	800eee8 <arm_q15_to_float>
 800de5c:	2e00      	cmp	r6, #0
 800de5e:	d0a4      	beq.n	800ddaa <node_convert+0x9a>
 800de60:	ee07 6a90 	vmov	s15, r6
 800de64:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800de68:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800de6c:	f004 f954 	bl	8012118 <powf>
 800de70:	2c00      	cmp	r4, #0
 800de72:	d09a      	beq.n	800ddaa <node_convert+0x9a>
 800de74:	2300      	movs	r3, #0
 800de76:	ecf5 7a01 	vldmia	r5!, {s15}
 800de7a:	3301      	adds	r3, #1
 800de7c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800de80:	429c      	cmp	r4, r3
 800de82:	ed45 7a01 	vstr	s15, [r5, #-4]
 800de86:	d1f6      	bne.n	800de76 <node_convert+0x166>
 800de88:	e78f      	b.n	800ddaa <node_convert+0x9a>
 800de8a:	b358      	cbz	r0, 800dee4 <node_convert+0x1d4>
 800de8c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800dfac <node_convert+0x29c>
 800de90:	4618      	mov	r0, r3
 800de92:	e77a      	b.n	800dd8a <node_convert+0x7a>
 800de94:	b133      	cbz	r3, 800dea4 <node_convert+0x194>
 800de96:	eddf 6a45 	vldr	s13, [pc, #276]	; 800dfac <node_convert+0x29c>
 800de9a:	eef0 7a66 	vmov.f32	s15, s13
 800de9e:	e7a4      	b.n	800ddea <node_convert+0xda>
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1f8      	bne.n	800de96 <node_convert+0x186>
 800dea4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dea8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800dfac <node_convert+0x29c>
 800deac:	2c00      	cmp	r4, #0
 800deae:	f43f af7c 	beq.w	800ddaa <node_convert+0x9a>
 800deb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800deb6:	4414      	add	r4, r2
 800deb8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800debc:	ecb5 7a01 	vldmia	r5!, {s14}
 800dec0:	eef0 7a66 	vmov.f32	s15, s13
 800dec4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800dec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800decc:	ee17 3a90 	vmov	r3, s15
 800ded0:	f383 0308 	usat	r3, #8, r3
 800ded4:	f802 3b01 	strb.w	r3, [r2], #1
 800ded8:	42a2      	cmp	r2, r4
 800deda:	d1ef      	bne.n	800debc <node_convert+0x1ac>
 800dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d147      	bne.n	800df74 <node_convert+0x264>
 800dee4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dfac <node_convert+0x29c>
 800dee8:	2c00      	cmp	r4, #0
 800deea:	f43f af5e 	beq.w	800ddaa <node_convert+0x9a>
 800deee:	4629      	mov	r1, r5
 800def0:	4414      	add	r4, r2
 800def2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800def6:	1a1b      	subs	r3, r3, r0
 800def8:	42a2      	cmp	r2, r4
 800defa:	ee07 3a90 	vmov	s15, r3
 800defe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df06:	ece1 7a01 	vstmia	r1!, {s15}
 800df0a:	d1f2      	bne.n	800def2 <node_convert+0x1e2>
 800df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df10:	7818      	ldrb	r0, [r3, #0]
 800df12:	e7e9      	b.n	800dee8 <node_convert+0x1d8>
 800df14:	2401      	movs	r4, #1
 800df16:	e719      	b.n	800dd4c <node_convert+0x3c>
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 800df1e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800df22:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800df26:	eba8 0303 	sub.w	r3, r8, r3
 800df2a:	3340      	adds	r3, #64	; 0x40
 800df2c:	1a9b      	subs	r3, r3, r2
 800df2e:	d014      	beq.n	800df5a <node_convert+0x24a>
 800df30:	425b      	negs	r3, r3
 800df32:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800df36:	ee00 3a90 	vmov	s1, r3
 800df3a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800df3e:	f004 f8eb 	bl	8012118 <powf>
 800df42:	b154      	cbz	r4, 800df5a <node_convert+0x24a>
 800df44:	4633      	mov	r3, r6
 800df46:	462a      	mov	r2, r5
 800df48:	ecf2 7a01 	vldmia	r2!, {s15}
 800df4c:	3301      	adds	r3, #1
 800df4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800df52:	42a3      	cmp	r3, r4
 800df54:	ed42 7a01 	vstr	s15, [r2, #-4]
 800df58:	d1f6      	bne.n	800df48 <node_convert+0x238>
 800df5a:	f1b8 0f08 	cmp.w	r8, #8
 800df5e:	d00d      	beq.n	800df7c <node_convert+0x26c>
 800df60:	4622      	mov	r2, r4
 800df62:	68b9      	ldr	r1, [r7, #8]
 800df64:	4628      	mov	r0, r5
 800df66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df6a:	f000 be3b 	b.w	800ebe4 <arm_float_to_q15>
 800df6e:	f001 f821 	bl	800efb4 <arm_q7_to_float>
 800df72:	e773      	b.n	800de5c <node_convert+0x14c>
 800df74:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800dfac <node_convert+0x29c>
 800df78:	4630      	mov	r0, r6
 800df7a:	e706      	b.n	800dd8a <node_convert+0x7a>
 800df7c:	4622      	mov	r2, r4
 800df7e:	68b9      	ldr	r1, [r7, #8]
 800df80:	4628      	mov	r0, r5
 800df82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df86:	f000 bee3 	b.w	800ed50 <arm_float_to_q7>
 800df8a:	684b      	ldr	r3, [r1, #4]
 800df8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	ee06 3a90 	vmov	s13, r3
 800df96:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800df9a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800df9e:	e785      	b.n	800deac <node_convert+0x19c>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	deff      	udf	#255	; 0xff
 800dfa6:	bf00      	nop
 800dfa8:	3efffffc 	.word	0x3efffffc
 800dfac:	00000000 	.word	0x00000000

0800dfb0 <ai_check_custom_types>:
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	4b12      	ldr	r3, [pc, #72]	; (800dffc <ai_check_custom_types+0x4c>)
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	b118      	cbz	r0, 800dfc0 <ai_check_custom_types+0x10>
 800dfb8:	7803      	ldrb	r3, [r0, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d002      	beq.n	800dfc4 <ai_check_custom_types+0x14>
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	b002      	add	sp, #8
 800dfc2:	4770      	bx	lr
 800dfc4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d004      	beq.n	800dfd6 <ai_check_custom_types+0x26>
 800dfcc:	2001      	movs	r0, #1
 800dfce:	f080 0001 	eor.w	r0, r0, #1
 800dfd2:	b002      	add	sp, #8
 800dfd4:	4770      	bx	lr
 800dfd6:	7842      	ldrb	r2, [r0, #1]
 800dfd8:	3001      	adds	r0, #1
 800dfda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d1f4      	bne.n	800dfcc <ai_check_custom_types+0x1c>
 800dfe2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800dfe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d1ee      	bne.n	800dfcc <ai_check_custom_types+0x1c>
 800dfee:	7842      	ldrb	r2, [r0, #1]
 800dff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d1e9      	bne.n	800dfcc <ai_check_custom_types+0x1c>
 800dff8:	2000      	movs	r0, #0
 800dffa:	e7e8      	b.n	800dfce <ai_check_custom_types+0x1e>
 800dffc:	84048403 	.word	0x84048403

0800e000 <ai_layers_init_all>:
 800e000:	2100      	movs	r1, #0
 800e002:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e004:	b13b      	cbz	r3, 800e016 <ai_layers_init_all+0x16>
 800e006:	691a      	ldr	r2, [r3, #16]
 800e008:	3101      	adds	r1, #1
 800e00a:	60d8      	str	r0, [r3, #12]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	4613      	mov	r3, r2
 800e010:	d001      	beq.n	800e016 <ai_layers_init_all+0x16>
 800e012:	2a00      	cmp	r2, #0
 800e014:	d1f6      	bne.n	800e004 <ai_layers_init_all+0x4>
 800e016:	4608      	mov	r0, r1
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop

0800e01c <ai_layers_post_init_all>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	2500      	movs	r5, #0
 800e020:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e022:	b16c      	cbz	r4, 800e040 <ai_layers_post_init_all+0x24>
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	07db      	lsls	r3, r3, #31
 800e028:	d504      	bpl.n	800e034 <ai_layers_post_init_all+0x18>
 800e02a:	6a23      	ldr	r3, [r4, #32]
 800e02c:	4620      	mov	r0, r4
 800e02e:	b10b      	cbz	r3, 800e034 <ai_layers_post_init_all+0x18>
 800e030:	3501      	adds	r5, #1
 800e032:	4798      	blx	r3
 800e034:	6923      	ldr	r3, [r4, #16]
 800e036:	42a3      	cmp	r3, r4
 800e038:	461c      	mov	r4, r3
 800e03a:	d001      	beq.n	800e040 <ai_layers_post_init_all+0x24>
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1f0      	bne.n	800e022 <ai_layers_post_init_all+0x6>
 800e040:	4628      	mov	r0, r5
 800e042:	bd38      	pop	{r3, r4, r5, pc}

0800e044 <ai_layers_forward_all>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e04c:	4604      	mov	r4, r0
 800e04e:	f1b8 0f00 	cmp.w	r8, #0
 800e052:	d02a      	beq.n	800e0aa <ai_layers_forward_all+0x66>
 800e054:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e056:	6381      	str	r1, [r0, #56]	; 0x38
 800e058:	b319      	cbz	r1, 800e0a2 <ai_layers_forward_all+0x5e>
 800e05a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e05c:	2001      	movs	r0, #1
 800e05e:	47c0      	blx	r8
 800e060:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e062:	b1f6      	cbz	r6, 800e0a2 <ai_layers_forward_all+0x5e>
 800e064:	2700      	movs	r7, #0
 800e066:	4631      	mov	r1, r6
 800e068:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e06a:	2002      	movs	r0, #2
 800e06c:	47c0      	blx	r8
 800e06e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e070:	4628      	mov	r0, r5
 800e072:	696b      	ldr	r3, [r5, #20]
 800e074:	4798      	blx	r3
 800e076:	692e      	ldr	r6, [r5, #16]
 800e078:	2003      	movs	r0, #3
 800e07a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e07c:	42b5      	cmp	r5, r6
 800e07e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e080:	d007      	beq.n	800e092 <ai_layers_forward_all+0x4e>
 800e082:	47c0      	blx	r8
 800e084:	3701      	adds	r7, #1
 800e086:	63a6      	str	r6, [r4, #56]	; 0x38
 800e088:	2e00      	cmp	r6, #0
 800e08a:	d1ec      	bne.n	800e066 <ai_layers_forward_all+0x22>
 800e08c:	4638      	mov	r0, r7
 800e08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e092:	2003      	movs	r0, #3
 800e094:	3701      	adds	r7, #1
 800e096:	47c0      	blx	r8
 800e098:	2300      	movs	r3, #0
 800e09a:	4638      	mov	r0, r7
 800e09c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a2:	2700      	movs	r7, #0
 800e0a4:	4638      	mov	r0, r7
 800e0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0aa:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e0ac:	6385      	str	r5, [r0, #56]	; 0x38
 800e0ae:	2d00      	cmp	r5, #0
 800e0b0:	d0f7      	beq.n	800e0a2 <ai_layers_forward_all+0x5e>
 800e0b2:	4647      	mov	r7, r8
 800e0b4:	696b      	ldr	r3, [r5, #20]
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	4798      	blx	r3
 800e0ba:	462b      	mov	r3, r5
 800e0bc:	692d      	ldr	r5, [r5, #16]
 800e0be:	429d      	cmp	r5, r3
 800e0c0:	d004      	beq.n	800e0cc <ai_layers_forward_all+0x88>
 800e0c2:	3701      	adds	r7, #1
 800e0c4:	63a5      	str	r5, [r4, #56]	; 0x38
 800e0c6:	2d00      	cmp	r5, #0
 800e0c8:	d1f4      	bne.n	800e0b4 <ai_layers_forward_all+0x70>
 800e0ca:	e7df      	b.n	800e08c <ai_layers_forward_all+0x48>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	3701      	adds	r7, #1
 800e0d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0d2:	e7db      	b.n	800e08c <ai_layers_forward_all+0x48>

0800e0d4 <forward_dense_integer_SSSA>:
 800e0d4:	6982      	ldr	r2, [r0, #24]
 800e0d6:	8813      	ldrh	r3, [r2, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 80c8 	beq.w	800e26e <forward_dense_integer_SSSA+0x19a>
 800e0de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e2:	6852      	ldr	r2, [r2, #4]
 800e0e4:	b093      	sub	sp, #76	; 0x4c
 800e0e6:	6854      	ldr	r4, [r2, #4]
 800e0e8:	b104      	cbz	r4, 800e0ec <forward_dense_integer_SSSA+0x18>
 800e0ea:	6824      	ldr	r4, [r4, #0]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	f000 8161 	beq.w	800e3b4 <forward_dense_integer_SSSA+0x2e0>
 800e0f2:	6911      	ldr	r1, [r2, #16]
 800e0f4:	b101      	cbz	r1, 800e0f8 <forward_dense_integer_SSSA+0x24>
 800e0f6:	6809      	ldr	r1, [r1, #0]
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	f000 815e 	beq.w	800e3ba <forward_dense_integer_SSSA+0x2e6>
 800e0fe:	69d5      	ldr	r5, [r2, #28]
 800e100:	2d00      	cmp	r5, #0
 800e102:	f000 8108 	beq.w	800e316 <forward_dense_integer_SSSA+0x242>
 800e106:	8b16      	ldrh	r6, [r2, #24]
 800e108:	6828      	ldr	r0, [r5, #0]
 800e10a:	2e01      	cmp	r6, #1
 800e10c:	f240 812d 	bls.w	800e36a <forward_dense_integer_SSSA+0x296>
 800e110:	686d      	ldr	r5, [r5, #4]
 800e112:	2b03      	cmp	r3, #3
 800e114:	f000 8154 	beq.w	800e3c0 <forward_dense_integer_SSSA+0x2ec>
 800e118:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800e11c:	69ab      	ldr	r3, [r5, #24]
 800e11e:	f1b9 0f00 	cmp.w	r9, #0
 800e122:	f000 810f 	beq.w	800e344 <forward_dense_integer_SSSA+0x270>
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	68e2      	ldr	r2, [r4, #12]
 800e12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e12c:	68cb      	ldr	r3, [r1, #12]
 800e12e:	6856      	ldr	r6, [r2, #4]
 800e130:	f8d9 9000 	ldr.w	r9, [r9]
 800e134:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800e138:	698d      	ldr	r5, [r1, #24]
 800e13a:	960f      	str	r6, [sp, #60]	; 0x3c
 800e13c:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	fb03 f302 	mul.w	r3, r3, r2
 800e146:	b2b2      	uxth	r2, r6
 800e148:	930c      	str	r3, [sp, #48]	; 0x30
 800e14a:	fa1f f38a 	uxth.w	r3, sl
 800e14e:	f1b9 0f00 	cmp.w	r9, #0
 800e152:	d003      	beq.n	800e15c <forward_dense_integer_SSSA+0x88>
 800e154:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800e158:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800e15c:	6827      	ldr	r7, [r4, #0]
 800e15e:	f8d0 b000 	ldr.w	fp, [r0]
 800e162:	680c      	ldr	r4, [r1, #0]
 800e164:	6981      	ldr	r1, [r0, #24]
 800e166:	2f00      	cmp	r7, #0
 800e168:	f000 8083 	beq.w	800e272 <forward_dense_integer_SSSA+0x19e>
 800e16c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e170:	f1bc 0f00 	cmp.w	ip, #0
 800e174:	f000 80b1 	beq.w	800e2da <forward_dense_integer_SSSA+0x206>
 800e178:	8878      	ldrh	r0, [r7, #2]
 800e17a:	2800      	cmp	r0, #0
 800e17c:	f000 809c 	beq.w	800e2b8 <forward_dense_integer_SSSA+0x1e4>
 800e180:	f8dc 6000 	ldr.w	r6, [ip]
 800e184:	edd6 7a00 	vldr	s15, [r6]
 800e188:	2c00      	cmp	r4, #0
 800e18a:	f000 809a 	beq.w	800e2c2 <forward_dense_integer_SSSA+0x1ee>
 800e18e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e192:	f1b8 0f00 	cmp.w	r8, #0
 800e196:	f000 80a9 	beq.w	800e2ec <forward_dense_integer_SSSA+0x218>
 800e19a:	8860      	ldrh	r0, [r4, #2]
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d074      	beq.n	800e28a <forward_dense_integer_SSSA+0x1b6>
 800e1a0:	68ae      	ldr	r6, [r5, #8]
 800e1a2:	f8de 5008 	ldr.w	r5, [lr, #8]
 800e1a6:	6889      	ldr	r1, [r1, #8]
 800e1a8:	950d      	str	r5, [sp, #52]	; 0x34
 800e1aa:	f8d8 5000 	ldr.w	r5, [r8]
 800e1ae:	ed95 0a00 	vldr	s0, [r5]
 800e1b2:	f1bc 0f00 	cmp.w	ip, #0
 800e1b6:	d076      	beq.n	800e2a6 <forward_dense_integer_SSSA+0x1d2>
 800e1b8:	8878      	ldrh	r0, [r7, #2]
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f000 80a3 	beq.w	800e306 <forward_dense_integer_SSSA+0x232>
 800e1c0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800e1c4:	f990 7000 	ldrsb.w	r7, [r0]
 800e1c8:	2c00      	cmp	r4, #0
 800e1ca:	f000 80eb 	beq.w	800e3a4 <forward_dense_integer_SSSA+0x2d0>
 800e1ce:	f1b8 0f00 	cmp.w	r8, #0
 800e1d2:	f000 809d 	beq.w	800e310 <forward_dense_integer_SSSA+0x23c>
 800e1d6:	8860      	ldrh	r0, [r4, #2]
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d167      	bne.n	800e2ac <forward_dense_integer_SSSA+0x1d8>
 800e1dc:	900a      	str	r0, [sp, #40]	; 0x28
 800e1de:	910e      	str	r1, [sp, #56]	; 0x38
 800e1e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e1e4:	f1bb 0f00 	cmp.w	fp, #0
 800e1e8:	f000 80de 	beq.w	800e3a8 <forward_dense_integer_SSSA+0x2d4>
 800e1ec:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f000 80d9 	beq.w	800e3a8 <forward_dense_integer_SSSA+0x2d4>
 800e1f6:	6800      	ldr	r0, [r0, #0]
 800e1f8:	2400      	movs	r4, #0
 800e1fa:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800e1fe:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800e202:	9411      	str	r4, [sp, #68]	; 0x44
 800e204:	ed90 7a00 	vldr	s14, [r0]
 800e208:	4640      	mov	r0, r8
 800e20a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e20e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e212:	f000 f8db 	bl	800e3cc <align_factor>
 800e216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e218:	9011      	str	r0, [sp, #68]	; 0x44
 800e21a:	b32b      	cbz	r3, 800e268 <forward_dense_integer_SSSA+0x194>
 800e21c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e220:	4699      	mov	r9, r3
 800e222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e224:	fa1f fa8a 	uxth.w	sl, sl
 800e228:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e22a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800e22e:	970d      	str	r7, [sp, #52]	; 0x34
 800e230:	461f      	mov	r7, r3
 800e232:	9a08      	ldr	r2, [sp, #32]
 800e234:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e238:	3401      	adds	r4, #1
 800e23a:	4628      	mov	r0, r5
 800e23c:	9605      	str	r6, [sp, #20]
 800e23e:	9306      	str	r3, [sp, #24]
 800e240:	4456      	add	r6, sl
 800e242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e244:	445d      	add	r5, fp
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e24a:	9303      	str	r3, [sp, #12]
 800e24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e24e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800e252:	ab11      	add	r3, sp, #68	; 0x44
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	463b      	mov	r3, r7
 800e258:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800e25c:	f000 f908 	bl	800e470 <st_sssa8_fully_connected>
 800e260:	454c      	cmp	r4, r9
 800e262:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e266:	d1e6      	bne.n	800e236 <forward_dense_integer_SSSA+0x162>
 800e268:	b013      	add	sp, #76	; 0x4c
 800e26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	deff      	udf	#255	; 0xff
 800e272:	2c00      	cmp	r4, #0
 800e274:	d056      	beq.n	800e324 <forward_dense_integer_SSSA+0x250>
 800e276:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e27a:	f1b8 0f00 	cmp.w	r8, #0
 800e27e:	d05d      	beq.n	800e33c <forward_dense_integer_SSSA+0x268>
 800e280:	8860      	ldrh	r0, [r4, #2]
 800e282:	2800      	cmp	r0, #0
 800e284:	d173      	bne.n	800e36e <forward_dense_integer_SSSA+0x29a>
 800e286:	eddf 7a50 	vldr	s15, [pc, #320]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e28a:	68ae      	ldr	r6, [r5, #8]
 800e28c:	f8de 5008 	ldr.w	r5, [lr, #8]
 800e290:	6889      	ldr	r1, [r1, #8]
 800e292:	950d      	str	r5, [sp, #52]	; 0x34
 800e294:	2f00      	cmp	r7, #0
 800e296:	d041      	beq.n	800e31c <forward_dense_integer_SSSA+0x248>
 800e298:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e29c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e2a0:	f1bc 0f00 	cmp.w	ip, #0
 800e2a4:	d188      	bne.n	800e1b8 <forward_dense_integer_SSSA+0xe4>
 800e2a6:	4667      	mov	r7, ip
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d097      	beq.n	800e1dc <forward_dense_integer_SSSA+0x108>
 800e2ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e2b0:	f990 0000 	ldrsb.w	r0, [r0]
 800e2b4:	900a      	str	r0, [sp, #40]	; 0x28
 800e2b6:	e792      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e2b8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e2bc:	2c00      	cmp	r4, #0
 800e2be:	f47f af66 	bne.w	800e18e <forward_dense_integer_SSSA+0xba>
 800e2c2:	68ae      	ldr	r6, [r5, #8]
 800e2c4:	f8de 5008 	ldr.w	r5, [lr, #8]
 800e2c8:	6889      	ldr	r1, [r1, #8]
 800e2ca:	950d      	str	r5, [sp, #52]	; 0x34
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d15a      	bne.n	800e386 <forward_dense_integer_SSSA+0x2b2>
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e2d6:	900a      	str	r0, [sp, #40]	; 0x28
 800e2d8:	e781      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e2da:	b31c      	cbz	r4, 800e324 <forward_dense_integer_SSSA+0x250>
 800e2dc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e2e0:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e2e4:	f1b8 0f00 	cmp.w	r8, #0
 800e2e8:	f47f af57 	bne.w	800e19a <forward_dense_integer_SSSA+0xc6>
 800e2ec:	f8de 0008 	ldr.w	r0, [lr, #8]
 800e2f0:	68ae      	ldr	r6, [r5, #8]
 800e2f2:	6889      	ldr	r1, [r1, #8]
 800e2f4:	900d      	str	r0, [sp, #52]	; 0x34
 800e2f6:	f1bc 0f00 	cmp.w	ip, #0
 800e2fa:	d00e      	beq.n	800e31a <forward_dense_integer_SSSA+0x246>
 800e2fc:	8878      	ldrh	r0, [r7, #2]
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d149      	bne.n	800e396 <forward_dense_integer_SSSA+0x2c2>
 800e302:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e306:	2700      	movs	r7, #0
 800e308:	f1b8 0f00 	cmp.w	r8, #0
 800e30c:	f47f af63 	bne.w	800e1d6 <forward_dense_integer_SSSA+0x102>
 800e310:	2000      	movs	r0, #0
 800e312:	900a      	str	r0, [sp, #40]	; 0x28
 800e314:	e763      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e316:	4628      	mov	r0, r5
 800e318:	e6fb      	b.n	800e112 <forward_dense_integer_SSSA+0x3e>
 800e31a:	4667      	mov	r7, ip
 800e31c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e320:	970a      	str	r7, [sp, #40]	; 0x28
 800e322:	e75c      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e324:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e328:	4627      	mov	r7, r4
 800e32a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800e32e:	eeb0 0a67 	vmov.f32	s0, s15
 800e332:	68ae      	ldr	r6, [r5, #8]
 800e334:	6889      	ldr	r1, [r1, #8]
 800e336:	900d      	str	r0, [sp, #52]	; 0x34
 800e338:	970a      	str	r7, [sp, #40]	; 0x28
 800e33a:	e750      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e33c:	eddf 7a22 	vldr	s15, [pc, #136]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e340:	4647      	mov	r7, r8
 800e342:	e7f2      	b.n	800e32a <forward_dense_integer_SSSA+0x256>
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	68e2      	ldr	r2, [r4, #12]
 800e348:	930b      	str	r3, [sp, #44]	; 0x2c
 800e34a:	68cb      	ldr	r3, [r1, #12]
 800e34c:	6856      	ldr	r6, [r2, #4]
 800e34e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800e352:	698d      	ldr	r5, [r1, #24]
 800e354:	960f      	str	r6, [sp, #60]	; 0x3c
 800e356:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	fb03 f302 	mul.w	r3, r3, r2
 800e360:	b2b2      	uxth	r2, r6
 800e362:	930c      	str	r3, [sp, #48]	; 0x30
 800e364:	fa1f f38a 	uxth.w	r3, sl
 800e368:	e6f8      	b.n	800e15c <forward_dense_integer_SSSA+0x88>
 800e36a:	2500      	movs	r5, #0
 800e36c:	e6d1      	b.n	800e112 <forward_dense_integer_SSSA+0x3e>
 800e36e:	f8de 0008 	ldr.w	r0, [lr, #8]
 800e372:	68ae      	ldr	r6, [r5, #8]
 800e374:	900d      	str	r0, [sp, #52]	; 0x34
 800e376:	f8d8 0000 	ldr.w	r0, [r8]
 800e37a:	6889      	ldr	r1, [r1, #8]
 800e37c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e380:	ed90 0a00 	vldr	s0, [r0]
 800e384:	e792      	b.n	800e2ac <forward_dense_integer_SSSA+0x1d8>
 800e386:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800e38a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e38e:	f990 7000 	ldrsb.w	r7, [r0]
 800e392:	940a      	str	r4, [sp, #40]	; 0x28
 800e394:	e723      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e396:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800e39a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800e3c8 <forward_dense_integer_SSSA+0x2f4>
 800e39e:	f990 7000 	ldrsb.w	r7, [r0]
 800e3a2:	e7b5      	b.n	800e310 <forward_dense_integer_SSSA+0x23c>
 800e3a4:	940a      	str	r4, [sp, #40]	; 0x28
 800e3a6:	e71a      	b.n	800e1de <forward_dense_integer_SSSA+0x10a>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800e3ae:	9311      	str	r3, [sp, #68]	; 0x44
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	deff      	udf	#255	; 0xff
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	deff      	udf	#255	; 0xff
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	deff      	udf	#255	; 0xff
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	deff      	udf	#255	; 0xff
 800e3c6:	bf00      	nop
 800e3c8:	00000000 	.word	0x00000000

0800e3cc <align_factor>:
 800e3cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	b508      	push	{r3, lr}
 800e3d4:	eeb4 0a67 	vcmp.f32	s0, s15
 800e3d8:	2300      	movs	r3, #0
 800e3da:	8003      	strh	r3, [r0, #0]
 800e3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e0:	d524      	bpl.n	800e42c <align_factor+0x60>
 800e3e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ea:	dd1f      	ble.n	800e42c <align_factor+0x60>
 800e3ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e005      	b.n	800e400 <align_factor+0x34>
 800e3f4:	8013      	strh	r3, [r2, #0]
 800e3f6:	b28b      	uxth	r3, r1
 800e3f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e3fc:	2b21      	cmp	r3, #33	; 0x21
 800e3fe:	d02b      	beq.n	800e458 <align_factor+0x8c>
 800e400:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e404:	1c59      	adds	r1, r3, #1
 800e406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40a:	d4f3      	bmi.n	800e3f4 <align_factor+0x28>
 800e40c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800e46c <align_factor+0xa0>
 800e410:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e414:	ee17 0a90 	vmov	r0, s15
 800e418:	f7f2 fc5e 	bl	8000cd8 <__aeabi_f2lz>
 800e41c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800e420:	d003      	beq.n	800e42a <align_factor+0x5e>
 800e422:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e426:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800e42a:	bd08      	pop	{r3, pc}
 800e42c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e434:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e438:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800e43c:	e005      	b.n	800e44a <align_factor+0x7e>
 800e43e:	8013      	strh	r3, [r2, #0]
 800e440:	b28b      	uxth	r3, r1
 800e442:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e446:	4283      	cmp	r3, r0
 800e448:	d00a      	beq.n	800e460 <align_factor+0x94>
 800e44a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e44e:	1e59      	subs	r1, r3, #1
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	dcf3      	bgt.n	800e43e <align_factor+0x72>
 800e456:	e7d9      	b.n	800e40c <align_factor+0x40>
 800e458:	2300      	movs	r3, #0
 800e45a:	4618      	mov	r0, r3
 800e45c:	8013      	strh	r3, [r2, #0]
 800e45e:	bd08      	pop	{r3, pc}
 800e460:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800e464:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e468:	8013      	strh	r3, [r2, #0]
 800e46a:	e7cf      	b.n	800e40c <align_factor+0x40>
 800e46c:	4f000000 	.word	0x4f000000

0800e470 <st_sssa8_fully_connected>:
 800e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	b097      	sub	sp, #92	; 0x5c
 800e476:	460d      	mov	r5, r1
 800e478:	4683      	mov	fp, r0
 800e47a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e47c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	9203      	str	r2, [sp, #12]
 800e482:	9307      	str	r3, [sp, #28]
 800e484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e486:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800e48a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e48e:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800e492:	1e4a      	subs	r2, r1, #1
 800e494:	9104      	str	r1, [sp, #16]
 800e496:	920d      	str	r2, [sp, #52]	; 0x34
 800e498:	b292      	uxth	r2, r2
 800e49a:	2a14      	cmp	r2, #20
 800e49c:	f200 81b3 	bhi.w	800e806 <st_sssa8_fully_connected+0x396>
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	408b      	lsls	r3, r1
 800e4a4:	408a      	lsls	r2, r1
 800e4a6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e4aa:	9308      	str	r3, [sp, #32]
 800e4ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f000 81ae 	beq.w	800e810 <st_sssa8_fully_connected+0x3a0>
 800e4b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e4b6:	b2b3      	uxth	r3, r6
 800e4b8:	9600      	str	r6, [sp, #0]
 800e4ba:	4658      	mov	r0, fp
 800e4bc:	0851      	lsrs	r1, r2, #1
 800e4be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e4c2:	9e03      	ldr	r6, [sp, #12]
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	9115      	str	r1, [sp, #84]	; 0x54
 800e4c8:	4632      	mov	r2, r6
 800e4ca:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e4cc:	f000 fb52 	bl	800eb74 <st_int8_reordered_no_shift_zero>
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	2c00      	cmp	r4, #0
 800e4d4:	f000 8145 	beq.w	800e762 <st_sssa8_fully_connected+0x2f2>
 800e4d8:	4634      	mov	r4, r6
 800e4da:	f1a6 0310 	sub.w	r3, r6, #16
 800e4de:	9e04      	ldr	r6, [sp, #16]
 800e4e0:	1e4a      	subs	r2, r1, #1
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	091b      	lsrs	r3, r3, #4
 800e4e6:	1eb1      	subs	r1, r6, #2
 800e4e8:	b292      	uxth	r2, r2
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	fa00 f101 	lsl.w	r1, r0, r1
 800e4f0:	9112      	str	r1, [sp, #72]	; 0x48
 800e4f2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e4f4:	3110      	adds	r1, #16
 800e4f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e4fa:	920e      	str	r2, [sp, #56]	; 0x38
 800e4fc:	1ee2      	subs	r2, r4, #3
 800e4fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800e500:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e502:	3208      	adds	r2, #8
 800e504:	9205      	str	r2, [sp, #20]
 800e506:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e508:	3202      	adds	r2, #2
 800e50a:	9206      	str	r2, [sp, #24]
 800e50c:	011a      	lsls	r2, r3, #4
 800e50e:	9209      	str	r2, [sp, #36]	; 0x24
 800e510:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e512:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800e516:	9310      	str	r3, [sp, #64]	; 0x40
 800e518:	1f23      	subs	r3, r4, #4
 800e51a:	9311      	str	r3, [sp, #68]	; 0x44
 800e51c:	1b83      	subs	r3, r0, r6
 800e51e:	9314      	str	r3, [sp, #80]	; 0x50
 800e520:	9a03      	ldr	r2, [sp, #12]
 800e522:	9b05      	ldr	r3, [sp, #20]
 800e524:	2a0f      	cmp	r2, #15
 800e526:	eb05 0b02 	add.w	fp, r5, r2
 800e52a:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800e52e:	f340 8260 	ble.w	800e9f2 <st_sssa8_fully_connected+0x582>
 800e532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e534:	465c      	mov	r4, fp
 800e536:	18ae      	adds	r6, r5, r2
 800e538:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e53a:	682f      	ldr	r7, [r5, #0]
 800e53c:	f8d4 a000 	ldr.w	sl, [r4]
 800e540:	ea4f 2037 	mov.w	r0, r7, ror #8
 800e544:	f8d2 9000 	ldr.w	r9, [r2]
 800e548:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800e54c:	fa2f f080 	sxtb16	r0, r0
 800e550:	fa2f fc8e 	sxtb16	ip, lr
 800e554:	fa2f f787 	sxtb16	r7, r7
 800e558:	fa2f fe8a 	sxtb16	lr, sl
 800e55c:	fb29 1107 	smlad	r1, r9, r7, r1
 800e560:	fb29 390e 	smlad	r9, r9, lr, r3
 800e564:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800e568:	fb28 1100 	smlad	r1, r8, r0, r1
 800e56c:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800e570:	6868      	ldr	r0, [r5, #4]
 800e572:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e576:	ea4f 2330 	mov.w	r3, r0, ror #8
 800e57a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800e57e:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800e582:	fa2f f383 	sxtb16	r3, r3
 800e586:	fa2f f78a 	sxtb16	r7, sl
 800e58a:	fa2f f080 	sxtb16	r0, r0
 800e58e:	fa2f fa89 	sxtb16	sl, r9
 800e592:	fb28 1000 	smlad	r0, r8, r0, r1
 800e596:	fb28 e80a 	smlad	r8, r8, sl, lr
 800e59a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800e59e:	fb2c 0003 	smlad	r0, ip, r3, r0
 800e5a2:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800e5a6:	68ab      	ldr	r3, [r5, #8]
 800e5a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e5ac:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e5b0:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e5b4:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800e5b8:	fa2f f181 	sxtb16	r1, r1
 800e5bc:	fa2f f98e 	sxtb16	r9, lr
 800e5c0:	fa2f f383 	sxtb16	r3, r3
 800e5c4:	fa2f fe88 	sxtb16	lr, r8
 800e5c8:	fb2c 0303 	smlad	r3, ip, r3, r0
 800e5cc:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800e5d0:	6957      	ldr	r7, [r2, #20]
 800e5d2:	fb27 3301 	smlad	r3, r7, r1, r3
 800e5d6:	fb27 ce09 	smlad	lr, r7, r9, ip
 800e5da:	68e8      	ldr	r0, [r5, #12]
 800e5dc:	3410      	adds	r4, #16
 800e5de:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800e5e2:	3510      	adds	r5, #16
 800e5e4:	ea4f 2130 	mov.w	r1, r0, ror #8
 800e5e8:	6997      	ldr	r7, [r2, #24]
 800e5ea:	fa2f f881 	sxtb16	r8, r1
 800e5ee:	fa2f f180 	sxtb16	r1, r0
 800e5f2:	ea4f 203c 	mov.w	r0, ip, ror #8
 800e5f6:	fa2f fc8c 	sxtb16	ip, ip
 800e5fa:	fa2f f080 	sxtb16	r0, r0
 800e5fe:	fb27 3101 	smlad	r1, r7, r1, r3
 800e602:	fb27 e70c 	smlad	r7, r7, ip, lr
 800e606:	69d3      	ldr	r3, [r2, #28]
 800e608:	3220      	adds	r2, #32
 800e60a:	fb23 1108 	smlad	r1, r3, r8, r1
 800e60e:	fb23 7300 	smlad	r3, r3, r0, r7
 800e612:	42b5      	cmp	r5, r6
 800e614:	d191      	bne.n	800e53a <st_sssa8_fully_connected+0xca>
 800e616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e618:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e61c:	4493      	add	fp, r2
 800e61e:	4691      	mov	r9, r2
 800e620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e622:	4591      	cmp	r9, r2
 800e624:	f280 81e3 	bge.w	800e9ee <st_sssa8_fully_connected+0x57e>
 800e628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e62a:	4657      	mov	r7, sl
 800e62c:	46d8      	mov	r8, fp
 800e62e:	eba2 0209 	sub.w	r2, r2, r9
 800e632:	0892      	lsrs	r2, r2, #2
 800e634:	920c      	str	r2, [sp, #48]	; 0x30
 800e636:	3201      	adds	r2, #1
 800e638:	0090      	lsls	r0, r2, #2
 800e63a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e63c:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800e640:	900a      	str	r0, [sp, #40]	; 0x28
 800e642:	f856 eb04 	ldr.w	lr, [r6], #4
 800e646:	f858 0b04 	ldr.w	r0, [r8], #4
 800e64a:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800e64e:	683a      	ldr	r2, [r7, #0]
 800e650:	ea4f 2530 	mov.w	r5, r0, ror #8
 800e654:	fa2f fc8c 	sxtb16	ip, ip
 800e658:	fa2f fe8e 	sxtb16	lr, lr
 800e65c:	fa2f f585 	sxtb16	r5, r5
 800e660:	fa2f f080 	sxtb16	r0, r0
 800e664:	fb22 110e 	smlad	r1, r2, lr, r1
 800e668:	fb22 3300 	smlad	r3, r2, r0, r3
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	3708      	adds	r7, #8
 800e670:	fb22 110c 	smlad	r1, r2, ip, r1
 800e674:	fb22 3305 	smlad	r3, r2, r5, r3
 800e678:	42a6      	cmp	r6, r4
 800e67a:	d1e2      	bne.n	800e642 <st_sssa8_fully_connected+0x1d2>
 800e67c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e67e:	f109 0904 	add.w	r9, r9, #4
 800e682:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800e686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e688:	4493      	add	fp, r2
 800e68a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e68c:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800e690:	9d03      	ldr	r5, [sp, #12]
 800e692:	454d      	cmp	r5, r9
 800e694:	dd37      	ble.n	800e706 <st_sssa8_fully_connected+0x296>
 800e696:	f9ba 2000 	ldrsh.w	r2, [sl]
 800e69a:	f994 0000 	ldrsb.w	r0, [r4]
 800e69e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e6a2:	f99b 0000 	ldrsb.w	r0, [fp]
 800e6a6:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e6aa:	f109 0201 	add.w	r2, r9, #1
 800e6ae:	42aa      	cmp	r2, r5
 800e6b0:	da25      	bge.n	800e6fe <st_sssa8_fully_connected+0x28e>
 800e6b2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800e6b6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e6ba:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e6be:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800e6c2:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e6c6:	f109 0202 	add.w	r2, r9, #2
 800e6ca:	42aa      	cmp	r2, r5
 800e6cc:	da17      	bge.n	800e6fe <st_sssa8_fully_connected+0x28e>
 800e6ce:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800e6d2:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e6d6:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e6da:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800e6de:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e6e2:	f109 0203 	add.w	r2, r9, #3
 800e6e6:	4295      	cmp	r5, r2
 800e6e8:	dd09      	ble.n	800e6fe <st_sssa8_fully_connected+0x28e>
 800e6ea:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800e6ee:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800e6f2:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e6f6:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800e6fa:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e6fe:	9a03      	ldr	r2, [sp, #12]
 800e700:	eba2 0909 	sub.w	r9, r2, r9
 800e704:	444c      	add	r4, r9
 800e706:	9a04      	ldr	r2, [sp, #16]
 800e708:	2a15      	cmp	r2, #21
 800e70a:	f340 8140 	ble.w	800e98e <st_sssa8_fully_connected+0x51e>
 800e70e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e710:	9a07      	ldr	r2, [sp, #28]
 800e712:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e714:	fb51 0102 	smmla	r1, r1, r2, r0
 800e718:	fb53 0302 	smmla	r3, r3, r2, r0
 800e71c:	4129      	asrs	r1, r5
 800e71e:	9a08      	ldr	r2, [sp, #32]
 800e720:	4411      	add	r1, r2
 800e722:	f301 0107 	ssat	r1, #8, r1
 800e726:	9806      	ldr	r0, [sp, #24]
 800e728:	412b      	asrs	r3, r5
 800e72a:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e72e:	4413      	add	r3, r2
 800e730:	f303 0307 	ssat	r3, #8, r3
 800e734:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e738:	9a03      	ldr	r2, [sp, #12]
 800e73a:	9b05      	ldr	r3, [sp, #20]
 800e73c:	18a5      	adds	r5, r4, r2
 800e73e:	9a06      	ldr	r2, [sp, #24]
 800e740:	3308      	adds	r3, #8
 800e742:	3202      	adds	r2, #2
 800e744:	9305      	str	r3, [sp, #20]
 800e746:	9206      	str	r2, [sp, #24]
 800e748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e74a:	4293      	cmp	r3, r2
 800e74c:	f47f aee8 	bne.w	800e520 <st_sssa8_fully_connected+0xb0>
 800e750:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e754:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e758:	9225      	str	r2, [sp, #148]	; 0x94
 800e75a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e75c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e760:	9324      	str	r3, [sp, #144]	; 0x90
 800e762:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e764:	07db      	lsls	r3, r3, #31
 800e766:	d54a      	bpl.n	800e7fe <st_sssa8_fully_connected+0x38e>
 800e768:	9a03      	ldr	r2, [sp, #12]
 800e76a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e76c:	0897      	lsrs	r7, r2, #2
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f000 8175 	beq.w	800ea5e <st_sssa8_fully_connected+0x5ee>
 800e774:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800e778:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e77a:	f855 2b04 	ldr.w	r2, [r5], #4
 800e77e:	6801      	ldr	r1, [r0, #0]
 800e780:	fa2f f482 	sxtb16	r4, r2
 800e784:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e788:	fa2f f282 	sxtb16	r2, r2
 800e78c:	fb21 3304 	smlad	r3, r1, r4, r3
 800e790:	6841      	ldr	r1, [r0, #4]
 800e792:	3008      	adds	r0, #8
 800e794:	fb21 3302 	smlad	r3, r1, r2, r3
 800e798:	42b5      	cmp	r5, r6
 800e79a:	d1ee      	bne.n	800e77a <st_sssa8_fully_connected+0x30a>
 800e79c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e79e:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800e7a2:	9226      	str	r2, [sp, #152]	; 0x98
 800e7a4:	9a03      	ldr	r2, [sp, #12]
 800e7a6:	f012 0203 	ands.w	r2, r2, #3
 800e7aa:	d016      	beq.n	800e7da <st_sssa8_fully_connected+0x36a>
 800e7ac:	3a01      	subs	r2, #1
 800e7ae:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e7b0:	f996 1000 	ldrsb.w	r1, [r6]
 800e7b4:	8800      	ldrh	r0, [r0, #0]
 800e7b6:	b292      	uxth	r2, r2
 800e7b8:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e7bc:	b16a      	cbz	r2, 800e7da <st_sssa8_fully_connected+0x36a>
 800e7be:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e7c0:	2a01      	cmp	r2, #1
 800e7c2:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800e7c6:	8840      	ldrh	r0, [r0, #2]
 800e7c8:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e7cc:	d005      	beq.n	800e7da <st_sssa8_fully_connected+0x36a>
 800e7ce:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e7d0:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800e7d4:	8889      	ldrh	r1, [r1, #4]
 800e7d6:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e7da:	9a04      	ldr	r2, [sp, #16]
 800e7dc:	2a15      	cmp	r2, #21
 800e7de:	f340 811c 	ble.w	800ea1a <st_sssa8_fully_connected+0x5aa>
 800e7e2:	1e91      	subs	r1, r2, #2
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	408a      	lsls	r2, r1
 800e7e8:	9907      	ldr	r1, [sp, #28]
 800e7ea:	fb53 2301 	smmla	r3, r3, r1, r2
 800e7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7f0:	4113      	asrs	r3, r2
 800e7f2:	9a08      	ldr	r2, [sp, #32]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	f303 0307 	ssat	r3, #8, r3
 800e7fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e7fc:	7013      	strb	r3, [r2, #0]
 800e7fe:	2000      	movs	r0, #0
 800e800:	b017      	add	sp, #92	; 0x5c
 800e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	9308      	str	r3, [sp, #32]
 800e808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f47f ae52 	bne.w	800e4b4 <st_sssa8_fully_connected+0x44>
 800e810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e812:	4270      	negs	r0, r6
 800e814:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d0f0      	beq.n	800e7fe <st_sssa8_fully_connected+0x38e>
 800e81c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e81e:	3301      	adds	r3, #1
 800e820:	9903      	ldr	r1, [sp, #12]
 800e822:	b236      	sxth	r6, r6
 800e824:	18d3      	adds	r3, r2, r3
 800e826:	9c04      	ldr	r4, [sp, #16]
 800e828:	f1a1 0810 	sub.w	r8, r1, #16
 800e82c:	f102 0e01 	add.w	lr, r2, #1
 800e830:	9305      	str	r3, [sp, #20]
 800e832:	2201      	movs	r2, #1
 800e834:	f028 080f 	bic.w	r8, r8, #15
 800e838:	1ea3      	subs	r3, r4, #2
 800e83a:	468c      	mov	ip, r1
 800e83c:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800e840:	fa02 f303 	lsl.w	r3, r2, r3
 800e844:	f108 0810 	add.w	r8, r8, #16
 800e848:	f1bc 0f0f 	cmp.w	ip, #15
 800e84c:	f8cd b00c 	str.w	fp, [sp, #12]
 800e850:	9309      	str	r3, [sp, #36]	; 0x24
 800e852:	eb0b 0308 	add.w	r3, fp, r8
 800e856:	9306      	str	r3, [sp, #24]
 800e858:	eba2 0304 	sub.w	r3, r2, r4
 800e85c:	930a      	str	r3, [sp, #40]	; 0x28
 800e85e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e862:	dd7e      	ble.n	800e962 <st_sssa8_fully_connected+0x4f2>
 800e864:	eb05 0708 	add.w	r7, r5, r8
 800e868:	462a      	mov	r2, r5
 800e86a:	9d03      	ldr	r5, [sp, #12]
 800e86c:	6811      	ldr	r1, [r2, #0]
 800e86e:	682c      	ldr	r4, [r5, #0]
 800e870:	fa2f fb81 	sxtb16	fp, r1
 800e874:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800e878:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e87c:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e880:	fa2f f181 	sxtb16	r1, r1
 800e884:	fa20 f484 	sxtab16	r4, r0, r4
 800e888:	fb24 340b 	smlad	r4, r4, fp, r3
 800e88c:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800e890:	6851      	ldr	r1, [r2, #4]
 800e892:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800e896:	fa2f f481 	sxtb16	r4, r1
 800e89a:	ea4f 233a 	mov.w	r3, sl, ror #8
 800e89e:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e8a2:	fa20 f383 	sxtab16	r3, r0, r3
 800e8a6:	fa2f f181 	sxtb16	r1, r1
 800e8aa:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e8ae:	fb2a ba04 	smlad	sl, sl, r4, fp
 800e8b2:	fb23 a401 	smlad	r4, r3, r1, sl
 800e8b6:	6891      	ldr	r1, [r2, #8]
 800e8b8:	68ab      	ldr	r3, [r5, #8]
 800e8ba:	fa2f fb81 	sxtb16	fp, r1
 800e8be:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800e8c2:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e8c6:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e8ca:	fa2f f181 	sxtb16	r1, r1
 800e8ce:	fa20 f383 	sxtab16	r3, r0, r3
 800e8d2:	fb23 430b 	smlad	r3, r3, fp, r4
 800e8d6:	fb2a 3301 	smlad	r3, sl, r1, r3
 800e8da:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800e8de:	3510      	adds	r5, #16
 800e8e0:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800e8e4:	3210      	adds	r2, #16
 800e8e6:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800e8ea:	ea4f 2431 	mov.w	r4, r1, ror #8
 800e8ee:	fa2f fa8a 	sxtb16	sl, sl
 800e8f2:	fa2f fb8b 	sxtb16	fp, fp
 800e8f6:	fa20 f181 	sxtab16	r1, r0, r1
 800e8fa:	fa20 f484 	sxtab16	r4, r0, r4
 800e8fe:	fb21 330a 	smlad	r3, r1, sl, r3
 800e902:	fb24 330b 	smlad	r3, r4, fp, r3
 800e906:	4297      	cmp	r7, r2
 800e908:	d1b0      	bne.n	800e86c <st_sssa8_fully_connected+0x3fc>
 800e90a:	4645      	mov	r5, r8
 800e90c:	9f06      	ldr	r7, [sp, #24]
 800e90e:	45ac      	cmp	ip, r5
 800e910:	dd2c      	ble.n	800e96c <st_sssa8_fully_connected+0x4fc>
 800e912:	ebac 0505 	sub.w	r5, ip, r5
 800e916:	4415      	add	r5, r2
 800e918:	4611      	mov	r1, r2
 800e91a:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800e91e:	3201      	adds	r2, #1
 800e920:	7809      	ldrb	r1, [r1, #0]
 800e922:	1ba4      	subs	r4, r4, r6
 800e924:	42aa      	cmp	r2, r5
 800e926:	b249      	sxtb	r1, r1
 800e928:	fb14 3301 	smlabb	r3, r4, r1, r3
 800e92c:	d1f4      	bne.n	800e918 <st_sssa8_fully_connected+0x4a8>
 800e92e:	9a04      	ldr	r2, [sp, #16]
 800e930:	2a15      	cmp	r2, #21
 800e932:	dd1f      	ble.n	800e974 <st_sssa8_fully_connected+0x504>
 800e934:	9a07      	ldr	r2, [sp, #28]
 800e936:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e938:	fb53 1302 	smmla	r3, r3, r2, r1
 800e93c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e93e:	4113      	asrs	r3, r2
 800e940:	9a08      	ldr	r2, [sp, #32]
 800e942:	4413      	add	r3, r2
 800e944:	f303 0307 	ssat	r3, #8, r3
 800e948:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e94c:	f10e 0e01 	add.w	lr, lr, #1
 800e950:	9b05      	ldr	r3, [sp, #20]
 800e952:	459e      	cmp	lr, r3
 800e954:	f43f af53 	beq.w	800e7fe <st_sssa8_fully_connected+0x38e>
 800e958:	f1bc 0f0f 	cmp.w	ip, #15
 800e95c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e960:	dc80      	bgt.n	800e864 <st_sssa8_fully_connected+0x3f4>
 800e962:	462a      	mov	r2, r5
 800e964:	2500      	movs	r5, #0
 800e966:	9f03      	ldr	r7, [sp, #12]
 800e968:	45ac      	cmp	ip, r5
 800e96a:	dcd2      	bgt.n	800e912 <st_sssa8_fully_connected+0x4a2>
 800e96c:	4615      	mov	r5, r2
 800e96e:	9a04      	ldr	r2, [sp, #16]
 800e970:	2a15      	cmp	r2, #21
 800e972:	dcdf      	bgt.n	800e934 <st_sssa8_fully_connected+0x4c4>
 800e974:	2a00      	cmp	r2, #0
 800e976:	dd42      	ble.n	800e9fe <st_sssa8_fully_connected+0x58e>
 800e978:	005b      	lsls	r3, r3, #1
 800e97a:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800e97e:	fb53 4301 	smmla	r3, r3, r1, r4
 800e982:	4113      	asrs	r3, r2
 800e984:	f303 0307 	ssat	r3, #8, r3
 800e988:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e98c:	e7de      	b.n	800e94c <st_sssa8_fully_connected+0x4dc>
 800e98e:	2a00      	cmp	r2, #0
 800e990:	dd13      	ble.n	800e9ba <st_sssa8_fully_connected+0x54a>
 800e992:	0049      	lsls	r1, r1, #1
 800e994:	005b      	lsls	r3, r3, #1
 800e996:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800e99a:	fb51 5100 	smmla	r1, r1, r0, r5
 800e99e:	fb53 5300 	smmla	r3, r3, r0, r5
 800e9a2:	4111      	asrs	r1, r2
 800e9a4:	f301 0107 	ssat	r1, #8, r1
 800e9a8:	9806      	ldr	r0, [sp, #24]
 800e9aa:	4113      	asrs	r3, r2
 800e9ac:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e9b0:	f303 0307 	ssat	r3, #8, r3
 800e9b4:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e9b8:	e6be      	b.n	800e738 <st_sssa8_fully_connected+0x2c8>
 800e9ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e9bc:	fa01 f200 	lsl.w	r2, r1, r0
 800e9c0:	f302 021f 	ssat	r2, #32, r2
 800e9c4:	9907      	ldr	r1, [sp, #28]
 800e9c6:	fb52 f211 	smmulr	r2, r2, r1
 800e9ca:	4083      	lsls	r3, r0
 800e9cc:	f303 031f 	ssat	r3, #32, r3
 800e9d0:	fb53 f311 	smmulr	r3, r3, r1
 800e9d4:	9908      	ldr	r1, [sp, #32]
 800e9d6:	440a      	add	r2, r1
 800e9d8:	f302 0207 	ssat	r2, #8, r2
 800e9dc:	9806      	ldr	r0, [sp, #24]
 800e9de:	440b      	add	r3, r1
 800e9e0:	f800 2c02 	strb.w	r2, [r0, #-2]
 800e9e4:	f303 0307 	ssat	r3, #8, r3
 800e9e8:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e9ec:	e6a4      	b.n	800e738 <st_sssa8_fully_connected+0x2c8>
 800e9ee:	4634      	mov	r4, r6
 800e9f0:	e64e      	b.n	800e690 <st_sssa8_fully_connected+0x220>
 800e9f2:	462e      	mov	r6, r5
 800e9f4:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800e9f8:	f04f 0900 	mov.w	r9, #0
 800e9fc:	e610      	b.n	800e620 <st_sssa8_fully_connected+0x1b0>
 800e9fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea00:	4093      	lsls	r3, r2
 800ea02:	f303 031f 	ssat	r3, #32, r3
 800ea06:	9a07      	ldr	r2, [sp, #28]
 800ea08:	fb53 f312 	smmulr	r3, r3, r2
 800ea0c:	9a08      	ldr	r2, [sp, #32]
 800ea0e:	4413      	add	r3, r2
 800ea10:	f303 0307 	ssat	r3, #8, r3
 800ea14:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800ea18:	e798      	b.n	800e94c <st_sssa8_fully_connected+0x4dc>
 800ea1a:	2a00      	cmp	r2, #0
 800ea1c:	dd0d      	ble.n	800ea3a <st_sssa8_fully_connected+0x5ca>
 800ea1e:	005b      	lsls	r3, r3, #1
 800ea20:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800ea24:	fb53 0301 	smmla	r3, r3, r1, r0
 800ea28:	4113      	asrs	r3, r2
 800ea2a:	f303 0307 	ssat	r3, #8, r3
 800ea2e:	2000      	movs	r0, #0
 800ea30:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ea32:	7013      	strb	r3, [r2, #0]
 800ea34:	b017      	add	sp, #92	; 0x5c
 800ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3a:	f1c2 0201 	rsb	r2, r2, #1
 800ea3e:	4093      	lsls	r3, r2
 800ea40:	f303 031f 	ssat	r3, #32, r3
 800ea44:	9a07      	ldr	r2, [sp, #28]
 800ea46:	fb53 f312 	smmulr	r3, r3, r2
 800ea4a:	9a08      	ldr	r2, [sp, #32]
 800ea4c:	441a      	add	r2, r3
 800ea4e:	f302 0307 	ssat	r3, #8, r2
 800ea52:	2000      	movs	r0, #0
 800ea54:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ea56:	7013      	strb	r3, [r2, #0]
 800ea58:	b017      	add	sp, #92	; 0x5c
 800ea5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5e:	462e      	mov	r6, r5
 800ea60:	e6a0      	b.n	800e7a4 <st_sssa8_fully_connected+0x334>
 800ea62:	bf00      	nop

0800ea64 <st_int8_copy>:
 800ea64:	4288      	cmp	r0, r1
 800ea66:	d010      	beq.n	800ea8a <st_int8_copy+0x26>
 800ea68:	b17a      	cbz	r2, 800ea8a <st_int8_copy+0x26>
 800ea6a:	4288      	cmp	r0, r1
 800ea6c:	eb00 0302 	add.w	r3, r0, r2
 800ea70:	d20c      	bcs.n	800ea8c <st_int8_copy+0x28>
 800ea72:	428b      	cmp	r3, r1
 800ea74:	d90a      	bls.n	800ea8c <st_int8_copy+0x28>
 800ea76:	4283      	cmp	r3, r0
 800ea78:	440a      	add	r2, r1
 800ea7a:	d906      	bls.n	800ea8a <st_int8_copy+0x26>
 800ea7c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800ea80:	4283      	cmp	r3, r0
 800ea82:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800ea86:	d1f9      	bne.n	800ea7c <st_int8_copy+0x18>
 800ea88:	4770      	bx	lr
 800ea8a:	4770      	bx	lr
 800ea8c:	078b      	lsls	r3, r1, #30
 800ea8e:	d102      	bne.n	800ea96 <st_int8_copy+0x32>
 800ea90:	e008      	b.n	800eaa4 <st_int8_copy+0x40>
 800ea92:	2a00      	cmp	r2, #0
 800ea94:	d04d      	beq.n	800eb32 <st_int8_copy+0xce>
 800ea96:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ea9a:	3a01      	subs	r2, #1
 800ea9c:	f801 3b01 	strb.w	r3, [r1], #1
 800eaa0:	078b      	lsls	r3, r1, #30
 800eaa2:	d1f6      	bne.n	800ea92 <st_int8_copy+0x2e>
 800eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa8:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800eaac:	d05e      	beq.n	800eb6c <st_int8_copy+0x108>
 800eaae:	ea40 0301 	orr.w	r3, r0, r1
 800eab2:	075b      	lsls	r3, r3, #29
 800eab4:	d13e      	bne.n	800eb34 <st_int8_copy+0xd0>
 800eab6:	f10e 33ff 	add.w	r3, lr, #4294967295
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d93a      	bls.n	800eb34 <st_int8_copy+0xd0>
 800eabe:	f100 0310 	add.w	r3, r0, #16
 800eac2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800eac6:	f101 0c10 	add.w	ip, r1, #16
 800eaca:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800eace:	3310      	adds	r3, #16
 800ead0:	f10c 0c10 	add.w	ip, ip, #16
 800ead4:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800ead8:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800eadc:	4573      	cmp	r3, lr
 800eade:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800eae2:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800eae6:	d1f2      	bne.n	800eace <st_int8_copy+0x6a>
 800eae8:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800eaec:	4421      	add	r1, r4
 800eaee:	4420      	add	r0, r4
 800eaf0:	f002 0203 	and.w	r2, r2, #3
 800eaf4:	b16b      	cbz	r3, 800eb12 <st_int8_copy+0xae>
 800eaf6:	6804      	ldr	r4, [r0, #0]
 800eaf8:	600c      	str	r4, [r1, #0]
 800eafa:	1e5c      	subs	r4, r3, #1
 800eafc:	d005      	beq.n	800eb0a <st_int8_copy+0xa6>
 800eafe:	6845      	ldr	r5, [r0, #4]
 800eb00:	2c01      	cmp	r4, #1
 800eb02:	604d      	str	r5, [r1, #4]
 800eb04:	d001      	beq.n	800eb0a <st_int8_copy+0xa6>
 800eb06:	6884      	ldr	r4, [r0, #8]
 800eb08:	608c      	str	r4, [r1, #8]
 800eb0a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800eb0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800eb12:	b162      	cbz	r2, 800eb2e <st_int8_copy+0xca>
 800eb14:	f990 3000 	ldrsb.w	r3, [r0]
 800eb18:	3a01      	subs	r2, #1
 800eb1a:	700b      	strb	r3, [r1, #0]
 800eb1c:	d007      	beq.n	800eb2e <st_int8_copy+0xca>
 800eb1e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eb22:	2a01      	cmp	r2, #1
 800eb24:	704b      	strb	r3, [r1, #1]
 800eb26:	d002      	beq.n	800eb2e <st_int8_copy+0xca>
 800eb28:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800eb2c:	708b      	strb	r3, [r1, #2]
 800eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb32:	4770      	bx	lr
 800eb34:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800eb38:	460b      	mov	r3, r1
 800eb3a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800eb3e:	4684      	mov	ip, r0
 800eb40:	f8dc 8000 	ldr.w	r8, [ip]
 800eb44:	3310      	adds	r3, #16
 800eb46:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800eb4a:	f10c 0c10 	add.w	ip, ip, #16
 800eb4e:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800eb52:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800eb56:	f843 8c10 	str.w	r8, [r3, #-16]
 800eb5a:	f843 7c0c 	str.w	r7, [r3, #-12]
 800eb5e:	f843 6c08 	str.w	r6, [r3, #-8]
 800eb62:	f843 5c04 	str.w	r5, [r3, #-4]
 800eb66:	459e      	cmp	lr, r3
 800eb68:	d1ea      	bne.n	800eb40 <st_int8_copy+0xdc>
 800eb6a:	e7bd      	b.n	800eae8 <st_int8_copy+0x84>
 800eb6c:	0893      	lsrs	r3, r2, #2
 800eb6e:	f002 0203 	and.w	r2, r2, #3
 800eb72:	e7bf      	b.n	800eaf4 <st_int8_copy+0x90>

0800eb74 <st_int8_reordered_no_shift_zero>:
 800eb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb76:	0897      	lsrs	r7, r2, #2
 800eb78:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800eb7c:	d02f      	beq.n	800ebde <st_int8_reordered_no_shift_zero+0x6a>
 800eb7e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800eb82:	460c      	mov	r4, r1
 800eb84:	f850 cb04 	ldr.w	ip, [r0], #4
 800eb88:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800eb8c:	fa2f fe8e 	sxtb16	lr, lr
 800eb90:	fade fe03 	ssub16	lr, lr, r3
 800eb94:	fa2f fc8c 	sxtb16	ip, ip
 800eb98:	fadc fc03 	ssub16	ip, ip, r3
 800eb9c:	42a8      	cmp	r0, r5
 800eb9e:	f8c4 c000 	str.w	ip, [r4]
 800eba2:	f8c4 e004 	str.w	lr, [r4, #4]
 800eba6:	f104 0408 	add.w	r4, r4, #8
 800ebaa:	d1eb      	bne.n	800eb84 <st_int8_reordered_no_shift_zero+0x10>
 800ebac:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800ebb0:	f012 0203 	ands.w	r2, r2, #3
 800ebb4:	d012      	beq.n	800ebdc <st_int8_reordered_no_shift_zero+0x68>
 800ebb6:	f995 0000 	ldrsb.w	r0, [r5]
 800ebba:	b273      	sxtb	r3, r6
 800ebbc:	3a01      	subs	r2, #1
 800ebbe:	eba0 0003 	sub.w	r0, r0, r3
 800ebc2:	8008      	strh	r0, [r1, #0]
 800ebc4:	d00a      	beq.n	800ebdc <st_int8_reordered_no_shift_zero+0x68>
 800ebc6:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800ebca:	2a01      	cmp	r2, #1
 800ebcc:	eba0 0003 	sub.w	r0, r0, r3
 800ebd0:	8048      	strh	r0, [r1, #2]
 800ebd2:	d003      	beq.n	800ebdc <st_int8_reordered_no_shift_zero+0x68>
 800ebd4:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	808b      	strh	r3, [r1, #4]
 800ebdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebde:	4605      	mov	r5, r0
 800ebe0:	e7e6      	b.n	800ebb0 <st_int8_reordered_no_shift_zero+0x3c>
 800ebe2:	bf00      	nop

0800ebe4 <arm_float_to_q15>:
 800ebe4:	b530      	push	{r4, r5, lr}
 800ebe6:	0895      	lsrs	r5, r2, #2
 800ebe8:	d069      	beq.n	800ecbe <arm_float_to_q15+0xda>
 800ebea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ebee:	f100 0c10 	add.w	ip, r0, #16
 800ebf2:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800ebf6:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800ed4c <arm_float_to_q15+0x168>
 800ebfa:	f101 0e08 	add.w	lr, r1, #8
 800ebfe:	462c      	mov	r4, r5
 800ec00:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800ec04:	ee67 6a86 	vmul.f32	s13, s15, s12
 800ec08:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ec0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec10:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ec14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec1c:	ee17 3a90 	vmov	r3, s15
 800ec20:	f303 030f 	ssat	r3, #16, r3
 800ec24:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800ec28:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800ec2c:	ee67 6a86 	vmul.f32	s13, s15, s12
 800ec30:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ec34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec38:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ec3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec44:	ee17 3a90 	vmov	r3, s15
 800ec48:	f303 030f 	ssat	r3, #16, r3
 800ec4c:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800ec50:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800ec54:	ee67 6a86 	vmul.f32	s13, s15, s12
 800ec58:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ec5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec60:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ec64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec6c:	ee17 3a90 	vmov	r3, s15
 800ec70:	f303 030f 	ssat	r3, #16, r3
 800ec74:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800ec78:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800ec7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ec80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec84:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ec88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec90:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800ec94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec98:	bfcc      	ite	gt
 800ec9a:	ee16 3a90 	vmovgt	r3, s13
 800ec9e:	ee17 3a90 	vmovle	r3, s15
 800eca2:	f303 030f 	ssat	r3, #16, r3
 800eca6:	3c01      	subs	r4, #1
 800eca8:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800ecac:	f10c 0c10 	add.w	ip, ip, #16
 800ecb0:	f10e 0e08 	add.w	lr, lr, #8
 800ecb4:	d1a4      	bne.n	800ec00 <arm_float_to_q15+0x1c>
 800ecb6:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ecba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800ecbe:	f012 0203 	ands.w	r2, r2, #3
 800ecc2:	d042      	beq.n	800ed4a <arm_float_to_q15+0x166>
 800ecc4:	edd0 7a00 	vldr	s15, [r0]
 800ecc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eccc:	eddf 5a1f 	vldr	s11, [pc, #124]	; 800ed4c <arm_float_to_q15+0x168>
 800ecd0:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800ecd4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800ecd8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800ece4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ece8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecec:	ee17 3a90 	vmov	r3, s15
 800ecf0:	f303 030f 	ssat	r3, #16, r3
 800ecf4:	3a01      	subs	r2, #1
 800ecf6:	800b      	strh	r3, [r1, #0]
 800ecf8:	d027      	beq.n	800ed4a <arm_float_to_q15+0x166>
 800ecfa:	edd0 7a01 	vldr	s15, [r0, #4]
 800ecfe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0a:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800ed0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed16:	ee17 3a90 	vmov	r3, s15
 800ed1a:	f303 030f 	ssat	r3, #16, r3
 800ed1e:	2a01      	cmp	r2, #1
 800ed20:	804b      	strh	r3, [r1, #2]
 800ed22:	d012      	beq.n	800ed4a <arm_float_to_q15+0x166>
 800ed24:	edd0 7a02 	vldr	s15, [r0, #8]
 800ed28:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ed2c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800ed30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed34:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800ed38:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ed3c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ed40:	ee17 3a10 	vmov	r3, s14
 800ed44:	f303 030f 	ssat	r3, #16, r3
 800ed48:	808b      	strh	r3, [r1, #4]
 800ed4a:	bd30      	pop	{r4, r5, pc}
 800ed4c:	47000000 	.word	0x47000000

0800ed50 <arm_float_to_q7>:
 800ed50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed52:	0895      	lsrs	r5, r2, #2
 800ed54:	d06f      	beq.n	800ee36 <arm_float_to_q7+0xe6>
 800ed56:	f101 0c04 	add.w	ip, r1, #4
 800ed5a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ed5e:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800ed62:	f100 0e10 	add.w	lr, r0, #16
 800ed66:	eddf 5a5f 	vldr	s11, [pc, #380]	; 800eee4 <arm_float_to_q7+0x194>
 800ed6a:	00ae      	lsls	r6, r5, #2
 800ed6c:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800ed70:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800ed74:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800ed78:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ed7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed80:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800ed84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed8c:	ee17 3a90 	vmov	r3, s15
 800ed90:	b21b      	sxth	r3, r3
 800ed92:	f303 0307 	ssat	r3, #8, r3
 800ed96:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800ed9a:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800ed9e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800eda2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800edae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edb6:	ee17 3a90 	vmov	r3, s15
 800edba:	b21b      	sxth	r3, r3
 800edbc:	f303 0307 	ssat	r3, #8, r3
 800edc0:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800edc4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800edc8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800edcc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800edd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd4:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800edd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ede0:	ee17 3a90 	vmov	r3, s15
 800ede4:	b21b      	sxth	r3, r3
 800ede6:	f303 0307 	ssat	r3, #8, r3
 800edea:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800edee:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800edf2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800edf6:	ee76 7a86 	vadd.f32	s15, s13, s12
 800edfa:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800edfe:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ee02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0e:	ee17 3a90 	vmov	r3, s15
 800ee12:	ee17 7a10 	vmov	r7, s14
 800ee16:	b21b      	sxth	r3, r3
 800ee18:	b23f      	sxth	r7, r7
 800ee1a:	dd56      	ble.n	800eeca <arm_float_to_q7+0x17a>
 800ee1c:	f303 0307 	ssat	r3, #8, r3
 800ee20:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800ee24:	f10c 0c04 	add.w	ip, ip, #4
 800ee28:	f10e 0e10 	add.w	lr, lr, #16
 800ee2c:	4564      	cmp	r4, ip
 800ee2e:	d19f      	bne.n	800ed70 <arm_float_to_q7+0x20>
 800ee30:	4431      	add	r1, r6
 800ee32:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800ee36:	f012 0203 	ands.w	r2, r2, #3
 800ee3a:	d045      	beq.n	800eec8 <arm_float_to_q7+0x178>
 800ee3c:	edd0 7a00 	vldr	s15, [r0]
 800ee40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ee44:	ed9f 5a27 	vldr	s10, [pc, #156]	; 800eee4 <arm_float_to_q7+0x194>
 800ee48:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800ee4c:	ee67 6a85 	vmul.f32	s13, s15, s10
 800ee50:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ee54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee58:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ee5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee64:	ee17 3a90 	vmov	r3, s15
 800ee68:	b21b      	sxth	r3, r3
 800ee6a:	f303 0307 	ssat	r3, #8, r3
 800ee6e:	3a01      	subs	r2, #1
 800ee70:	700b      	strb	r3, [r1, #0]
 800ee72:	d029      	beq.n	800eec8 <arm_float_to_q7+0x178>
 800ee74:	edd0 6a01 	vldr	s13, [r0, #4]
 800ee78:	ee26 6a85 	vmul.f32	s12, s13, s10
 800ee7c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800ee80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee84:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800ee88:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ee8c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800ee90:	ee16 3a90 	vmov	r3, s13
 800ee94:	b21b      	sxth	r3, r3
 800ee96:	f303 0307 	ssat	r3, #8, r3
 800ee9a:	2a01      	cmp	r2, #1
 800ee9c:	704b      	strb	r3, [r1, #1]
 800ee9e:	d013      	beq.n	800eec8 <arm_float_to_q7+0x178>
 800eea0:	edd0 7a02 	vldr	s15, [r0, #8]
 800eea4:	ee27 5a85 	vmul.f32	s10, s15, s10
 800eea8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb0:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800eeb4:	ee77 7a85 	vadd.f32	s15, s15, s10
 800eeb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eebc:	ee17 3a90 	vmov	r3, s15
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	f303 0307 	ssat	r3, #8, r3
 800eec6:	708b      	strb	r3, [r1, #2]
 800eec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeca:	f307 0707 	ssat	r7, #8, r7
 800eece:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800eed2:	f10c 0c04 	add.w	ip, ip, #4
 800eed6:	f10e 0e10 	add.w	lr, lr, #16
 800eeda:	45a4      	cmp	ip, r4
 800eedc:	f47f af48 	bne.w	800ed70 <arm_float_to_q7+0x20>
 800eee0:	e7a6      	b.n	800ee30 <arm_float_to_q7+0xe0>
 800eee2:	bf00      	nop
 800eee4:	43000000 	.word	0x43000000

0800eee8 <arm_q15_to_float>:
 800eee8:	b530      	push	{r4, r5, lr}
 800eeea:	0894      	lsrs	r4, r2, #2
 800eeec:	d038      	beq.n	800ef60 <arm_q15_to_float+0x78>
 800eeee:	f100 0c08 	add.w	ip, r0, #8
 800eef2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800efb0 <arm_q15_to_float+0xc8>
 800eef6:	f101 0310 	add.w	r3, r1, #16
 800eefa:	46a6      	mov	lr, r4
 800eefc:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800ef00:	3310      	adds	r3, #16
 800ef02:	f10c 0c08 	add.w	ip, ip, #8
 800ef06:	f1be 0e01 	subs.w	lr, lr, #1
 800ef0a:	ee07 5a90 	vmov	s15, r5
 800ef0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef16:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800ef1a:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800ef1e:	ee07 5a90 	vmov	s15, r5
 800ef22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef2a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800ef2e:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800ef32:	ee07 5a90 	vmov	s15, r5
 800ef36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef3e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800ef42:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800ef46:	ee07 5a90 	vmov	s15, r5
 800ef4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef52:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800ef56:	d1d1      	bne.n	800eefc <arm_q15_to_float+0x14>
 800ef58:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ef5c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800ef60:	f012 0203 	ands.w	r2, r2, #3
 800ef64:	d023      	beq.n	800efae <arm_q15_to_float+0xc6>
 800ef66:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ef6a:	3a01      	subs	r2, #1
 800ef6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800efb0 <arm_q15_to_float+0xc8>
 800ef70:	ee07 3a90 	vmov	s15, r3
 800ef74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef7c:	edc1 7a00 	vstr	s15, [r1]
 800ef80:	d015      	beq.n	800efae <arm_q15_to_float+0xc6>
 800ef82:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ef86:	2a01      	cmp	r2, #1
 800ef88:	ee07 3a90 	vmov	s15, r3
 800ef8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef94:	edc1 7a01 	vstr	s15, [r1, #4]
 800ef98:	d009      	beq.n	800efae <arm_q15_to_float+0xc6>
 800ef9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ef9e:	ee07 3a90 	vmov	s15, r3
 800efa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efaa:	edc1 7a02 	vstr	s15, [r1, #8]
 800efae:	bd30      	pop	{r4, r5, pc}
 800efb0:	38000000 	.word	0x38000000

0800efb4 <arm_q7_to_float>:
 800efb4:	b530      	push	{r4, r5, lr}
 800efb6:	0894      	lsrs	r4, r2, #2
 800efb8:	d036      	beq.n	800f028 <arm_q7_to_float+0x74>
 800efba:	1d03      	adds	r3, r0, #4
 800efbc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800efc0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800f078 <arm_q7_to_float+0xc4>
 800efc4:	f101 0010 	add.w	r0, r1, #16
 800efc8:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800efcc:	3010      	adds	r0, #16
 800efce:	ee07 ea90 	vmov	s15, lr
 800efd2:	469e      	mov	lr, r3
 800efd4:	3304      	adds	r3, #4
 800efd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efda:	45e6      	cmp	lr, ip
 800efdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efe0:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 800efe4:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800efe8:	ee07 5a90 	vmov	s15, r5
 800efec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eff4:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800eff8:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800effc:	ee07 5a90 	vmov	s15, r5
 800f000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f004:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f008:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800f00c:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800f010:	ee07 5a90 	vmov	s15, r5
 800f014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f01c:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800f020:	d1d2      	bne.n	800efc8 <arm_q7_to_float+0x14>
 800f022:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800f026:	4660      	mov	r0, ip
 800f028:	f012 0203 	ands.w	r2, r2, #3
 800f02c:	d023      	beq.n	800f076 <arm_q7_to_float+0xc2>
 800f02e:	f990 3000 	ldrsb.w	r3, [r0]
 800f032:	3a01      	subs	r2, #1
 800f034:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f078 <arm_q7_to_float+0xc4>
 800f038:	ee07 3a90 	vmov	s15, r3
 800f03c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f040:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f044:	edc1 7a00 	vstr	s15, [r1]
 800f048:	d015      	beq.n	800f076 <arm_q7_to_float+0xc2>
 800f04a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f04e:	2a01      	cmp	r2, #1
 800f050:	ee07 3a90 	vmov	s15, r3
 800f054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f05c:	edc1 7a01 	vstr	s15, [r1, #4]
 800f060:	d009      	beq.n	800f076 <arm_q7_to_float+0xc2>
 800f062:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800f066:	ee07 3a90 	vmov	s15, r3
 800f06a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f06e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f072:	edc1 7a02 	vstr	s15, [r1, #8]
 800f076:	bd30      	pop	{r4, r5, pc}
 800f078:	3c000000 	.word	0x3c000000

0800f07c <ai_array_to_buffer_fmt>:
 800f07c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800f080:	2b02      	cmp	r3, #2
 800f082:	d050      	beq.n	800f126 <ai_array_to_buffer_fmt+0xaa>
 800f084:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800f088:	4b29      	ldr	r3, [pc, #164]	; (800f130 <ai_array_to_buffer_fmt+0xb4>)
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d00b      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f08e:	dc1c      	bgt.n	800f0ca <ai_array_to_buffer_fmt+0x4e>
 800f090:	4b28      	ldr	r3, [pc, #160]	; (800f134 <ai_array_to_buffer_fmt+0xb8>)
 800f092:	429a      	cmp	r2, r3
 800f094:	d007      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f096:	dd0b      	ble.n	800f0b0 <ai_array_to_buffer_fmt+0x34>
 800f098:	4b27      	ldr	r3, [pc, #156]	; (800f138 <ai_array_to_buffer_fmt+0xbc>)
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d003      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f09e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d131      	bne.n	800f10a <ai_array_to_buffer_fmt+0x8e>
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f0ac:	4318      	orrs	r0, r3
 800f0ae:	4770      	bx	lr
 800f0b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d0f6      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f0b8:	dd2c      	ble.n	800f114 <ai_array_to_buffer_fmt+0x98>
 800f0ba:	4b20      	ldr	r3, [pc, #128]	; (800f13c <ai_array_to_buffer_fmt+0xc0>)
 800f0bc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	bf18      	it	ne
 800f0c4:	2340      	movne	r3, #64	; 0x40
 800f0c6:	4318      	orrs	r0, r3
 800f0c8:	4770      	bx	lr
 800f0ca:	4b1d      	ldr	r3, [pc, #116]	; (800f140 <ai_array_to_buffer_fmt+0xc4>)
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d0ea      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f0d0:	dd0e      	ble.n	800f0f0 <ai_array_to_buffer_fmt+0x74>
 800f0d2:	4b1c      	ldr	r3, [pc, #112]	; (800f144 <ai_array_to_buffer_fmt+0xc8>)
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d0e6      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f0d8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d0e2      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f0e0:	4b19      	ldr	r3, [pc, #100]	; (800f148 <ai_array_to_buffer_fmt+0xcc>)
 800f0e2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	bf18      	it	ne
 800f0ea:	2340      	movne	r3, #64	; 0x40
 800f0ec:	4318      	orrs	r0, r3
 800f0ee:	4770      	bx	lr
 800f0f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d0d6      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f0f8:	3307      	adds	r3, #7
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d0d3      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f0fe:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800f102:	429a      	cmp	r2, r3
 800f104:	bf18      	it	ne
 800f106:	2340      	movne	r3, #64	; 0x40
 800f108:	e7ce      	b.n	800f0a8 <ai_array_to_buffer_fmt+0x2c>
 800f10a:	4b10      	ldr	r3, [pc, #64]	; (800f14c <ai_array_to_buffer_fmt+0xd0>)
 800f10c:	429a      	cmp	r2, r3
 800f10e:	bf18      	it	ne
 800f110:	2340      	movne	r3, #64	; 0x40
 800f112:	e7c9      	b.n	800f0a8 <ai_array_to_buffer_fmt+0x2c>
 800f114:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800f118:	429a      	cmp	r2, r3
 800f11a:	d0c4      	beq.n	800f0a6 <ai_array_to_buffer_fmt+0x2a>
 800f11c:	3380      	adds	r3, #128	; 0x80
 800f11e:	429a      	cmp	r2, r3
 800f120:	bf18      	it	ne
 800f122:	2340      	movne	r3, #64	; 0x40
 800f124:	e7c0      	b.n	800f0a8 <ai_array_to_buffer_fmt+0x2c>
 800f126:	4b0a      	ldr	r3, [pc, #40]	; (800f150 <ai_array_to_buffer_fmt+0xd4>)
 800f128:	4003      	ands	r3, r0
 800f12a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f12e:	e7bb      	b.n	800f0a8 <ai_array_to_buffer_fmt+0x2c>
 800f130:	00840040 	.word	0x00840040
 800f134:	00040840 	.word	0x00040840
 800f138:	00041040 	.word	0x00041040
 800f13c:	00040447 	.word	0x00040447
 800f140:	00840840 	.word	0x00840840
 800f144:	00841040 	.word	0x00841040
 800f148:	0084084f 	.word	0x0084084f
 800f14c:	0004084f 	.word	0x0004084f
 800f150:	00803fff 	.word	0x00803fff

0800f154 <ai_array_get_data_byte_size>:
 800f154:	b161      	cbz	r1, 800f170 <ai_array_get_data_byte_size+0x1c>
 800f156:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800f15a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800f15e:	fb03 f101 	mul.w	r1, r3, r1
 800f162:	1dc8      	adds	r0, r1, #7
 800f164:	f020 0007 	bic.w	r0, r0, #7
 800f168:	40d0      	lsrs	r0, r2
 800f16a:	3007      	adds	r0, #7
 800f16c:	08c0      	lsrs	r0, r0, #3
 800f16e:	4770      	bx	lr
 800f170:	4608      	mov	r0, r1
 800f172:	4770      	bx	lr

0800f174 <ai_version_get>:
 800f174:	0212      	lsls	r2, r2, #8
 800f176:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800f17a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800f17e:	4770      	bx	lr

0800f180 <get_tensor_byte_size>:
 800f180:	b430      	push	{r4, r5}
 800f182:	6985      	ldr	r5, [r0, #24]
 800f184:	68c4      	ldr	r4, [r0, #12]
 800f186:	6941      	ldr	r1, [r0, #20]
 800f188:	4b06      	ldr	r3, [pc, #24]	; (800f1a4 <get_tensor_byte_size+0x24>)
 800f18a:	6828      	ldr	r0, [r5, #0]
 800f18c:	4a06      	ldr	r2, [pc, #24]	; (800f1a8 <get_tensor_byte_size+0x28>)
 800f18e:	4003      	ands	r3, r0
 800f190:	68c9      	ldr	r1, [r1, #12]
 800f192:	68e0      	ldr	r0, [r4, #12]
 800f194:	4293      	cmp	r3, r2
 800f196:	fb01 f000 	mul.w	r0, r1, r0
 800f19a:	d101      	bne.n	800f1a0 <get_tensor_byte_size+0x20>
 800f19c:	3007      	adds	r0, #7
 800f19e:	08c0      	lsrs	r0, r0, #3
 800f1a0:	bc30      	pop	{r4, r5}
 800f1a2:	4770      	bx	lr
 800f1a4:	017fffff 	.word	0x017fffff
 800f1a8:	000400c0 	.word	0x000400c0

0800f1ac <__errno>:
 800f1ac:	4b01      	ldr	r3, [pc, #4]	; (800f1b4 <__errno+0x8>)
 800f1ae:	6818      	ldr	r0, [r3, #0]
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	20000ef4 	.word	0x20000ef4

0800f1b8 <__libc_init_array>:
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	4d0d      	ldr	r5, [pc, #52]	; (800f1f0 <__libc_init_array+0x38>)
 800f1bc:	4c0d      	ldr	r4, [pc, #52]	; (800f1f4 <__libc_init_array+0x3c>)
 800f1be:	1b64      	subs	r4, r4, r5
 800f1c0:	10a4      	asrs	r4, r4, #2
 800f1c2:	2600      	movs	r6, #0
 800f1c4:	42a6      	cmp	r6, r4
 800f1c6:	d109      	bne.n	800f1dc <__libc_init_array+0x24>
 800f1c8:	4d0b      	ldr	r5, [pc, #44]	; (800f1f8 <__libc_init_array+0x40>)
 800f1ca:	4c0c      	ldr	r4, [pc, #48]	; (800f1fc <__libc_init_array+0x44>)
 800f1cc:	f004 fa62 	bl	8013694 <_init>
 800f1d0:	1b64      	subs	r4, r4, r5
 800f1d2:	10a4      	asrs	r4, r4, #2
 800f1d4:	2600      	movs	r6, #0
 800f1d6:	42a6      	cmp	r6, r4
 800f1d8:	d105      	bne.n	800f1e6 <__libc_init_array+0x2e>
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
 800f1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1e0:	4798      	blx	r3
 800f1e2:	3601      	adds	r6, #1
 800f1e4:	e7ee      	b.n	800f1c4 <__libc_init_array+0xc>
 800f1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ea:	4798      	blx	r3
 800f1ec:	3601      	adds	r6, #1
 800f1ee:	e7f2      	b.n	800f1d6 <__libc_init_array+0x1e>
 800f1f0:	08028e80 	.word	0x08028e80
 800f1f4:	08028e80 	.word	0x08028e80
 800f1f8:	08028e80 	.word	0x08028e80
 800f1fc:	08028e84 	.word	0x08028e84

0800f200 <malloc>:
 800f200:	4b02      	ldr	r3, [pc, #8]	; (800f20c <malloc+0xc>)
 800f202:	4601      	mov	r1, r0
 800f204:	6818      	ldr	r0, [r3, #0]
 800f206:	f000 b885 	b.w	800f314 <_malloc_r>
 800f20a:	bf00      	nop
 800f20c:	20000ef4 	.word	0x20000ef4

0800f210 <memcpy>:
 800f210:	440a      	add	r2, r1
 800f212:	4291      	cmp	r1, r2
 800f214:	f100 33ff 	add.w	r3, r0, #4294967295
 800f218:	d100      	bne.n	800f21c <memcpy+0xc>
 800f21a:	4770      	bx	lr
 800f21c:	b510      	push	{r4, lr}
 800f21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f226:	4291      	cmp	r1, r2
 800f228:	d1f9      	bne.n	800f21e <memcpy+0xe>
 800f22a:	bd10      	pop	{r4, pc}

0800f22c <memset>:
 800f22c:	4402      	add	r2, r0
 800f22e:	4603      	mov	r3, r0
 800f230:	4293      	cmp	r3, r2
 800f232:	d100      	bne.n	800f236 <memset+0xa>
 800f234:	4770      	bx	lr
 800f236:	f803 1b01 	strb.w	r1, [r3], #1
 800f23a:	e7f9      	b.n	800f230 <memset+0x4>

0800f23c <_free_r>:
 800f23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f23e:	2900      	cmp	r1, #0
 800f240:	d044      	beq.n	800f2cc <_free_r+0x90>
 800f242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f246:	9001      	str	r0, [sp, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f1a1 0404 	sub.w	r4, r1, #4
 800f24e:	bfb8      	it	lt
 800f250:	18e4      	addlt	r4, r4, r3
 800f252:	f001 fbf3 	bl	8010a3c <__malloc_lock>
 800f256:	4a1e      	ldr	r2, [pc, #120]	; (800f2d0 <_free_r+0x94>)
 800f258:	9801      	ldr	r0, [sp, #4]
 800f25a:	6813      	ldr	r3, [r2, #0]
 800f25c:	b933      	cbnz	r3, 800f26c <_free_r+0x30>
 800f25e:	6063      	str	r3, [r4, #4]
 800f260:	6014      	str	r4, [r2, #0]
 800f262:	b003      	add	sp, #12
 800f264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f268:	f001 bbee 	b.w	8010a48 <__malloc_unlock>
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	d908      	bls.n	800f282 <_free_r+0x46>
 800f270:	6825      	ldr	r5, [r4, #0]
 800f272:	1961      	adds	r1, r4, r5
 800f274:	428b      	cmp	r3, r1
 800f276:	bf01      	itttt	eq
 800f278:	6819      	ldreq	r1, [r3, #0]
 800f27a:	685b      	ldreq	r3, [r3, #4]
 800f27c:	1949      	addeq	r1, r1, r5
 800f27e:	6021      	streq	r1, [r4, #0]
 800f280:	e7ed      	b.n	800f25e <_free_r+0x22>
 800f282:	461a      	mov	r2, r3
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	b10b      	cbz	r3, 800f28c <_free_r+0x50>
 800f288:	42a3      	cmp	r3, r4
 800f28a:	d9fa      	bls.n	800f282 <_free_r+0x46>
 800f28c:	6811      	ldr	r1, [r2, #0]
 800f28e:	1855      	adds	r5, r2, r1
 800f290:	42a5      	cmp	r5, r4
 800f292:	d10b      	bne.n	800f2ac <_free_r+0x70>
 800f294:	6824      	ldr	r4, [r4, #0]
 800f296:	4421      	add	r1, r4
 800f298:	1854      	adds	r4, r2, r1
 800f29a:	42a3      	cmp	r3, r4
 800f29c:	6011      	str	r1, [r2, #0]
 800f29e:	d1e0      	bne.n	800f262 <_free_r+0x26>
 800f2a0:	681c      	ldr	r4, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	6053      	str	r3, [r2, #4]
 800f2a6:	4421      	add	r1, r4
 800f2a8:	6011      	str	r1, [r2, #0]
 800f2aa:	e7da      	b.n	800f262 <_free_r+0x26>
 800f2ac:	d902      	bls.n	800f2b4 <_free_r+0x78>
 800f2ae:	230c      	movs	r3, #12
 800f2b0:	6003      	str	r3, [r0, #0]
 800f2b2:	e7d6      	b.n	800f262 <_free_r+0x26>
 800f2b4:	6825      	ldr	r5, [r4, #0]
 800f2b6:	1961      	adds	r1, r4, r5
 800f2b8:	428b      	cmp	r3, r1
 800f2ba:	bf04      	itt	eq
 800f2bc:	6819      	ldreq	r1, [r3, #0]
 800f2be:	685b      	ldreq	r3, [r3, #4]
 800f2c0:	6063      	str	r3, [r4, #4]
 800f2c2:	bf04      	itt	eq
 800f2c4:	1949      	addeq	r1, r1, r5
 800f2c6:	6021      	streq	r1, [r4, #0]
 800f2c8:	6054      	str	r4, [r2, #4]
 800f2ca:	e7ca      	b.n	800f262 <_free_r+0x26>
 800f2cc:	b003      	add	sp, #12
 800f2ce:	bd30      	pop	{r4, r5, pc}
 800f2d0:	2000b368 	.word	0x2000b368

0800f2d4 <sbrk_aligned>:
 800f2d4:	b570      	push	{r4, r5, r6, lr}
 800f2d6:	4e0e      	ldr	r6, [pc, #56]	; (800f310 <sbrk_aligned+0x3c>)
 800f2d8:	460c      	mov	r4, r1
 800f2da:	6831      	ldr	r1, [r6, #0]
 800f2dc:	4605      	mov	r5, r0
 800f2de:	b911      	cbnz	r1, 800f2e6 <sbrk_aligned+0x12>
 800f2e0:	f000 fcf6 	bl	800fcd0 <_sbrk_r>
 800f2e4:	6030      	str	r0, [r6, #0]
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f000 fcf1 	bl	800fcd0 <_sbrk_r>
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	d00a      	beq.n	800f308 <sbrk_aligned+0x34>
 800f2f2:	1cc4      	adds	r4, r0, #3
 800f2f4:	f024 0403 	bic.w	r4, r4, #3
 800f2f8:	42a0      	cmp	r0, r4
 800f2fa:	d007      	beq.n	800f30c <sbrk_aligned+0x38>
 800f2fc:	1a21      	subs	r1, r4, r0
 800f2fe:	4628      	mov	r0, r5
 800f300:	f000 fce6 	bl	800fcd0 <_sbrk_r>
 800f304:	3001      	adds	r0, #1
 800f306:	d101      	bne.n	800f30c <sbrk_aligned+0x38>
 800f308:	f04f 34ff 	mov.w	r4, #4294967295
 800f30c:	4620      	mov	r0, r4
 800f30e:	bd70      	pop	{r4, r5, r6, pc}
 800f310:	2000b36c 	.word	0x2000b36c

0800f314 <_malloc_r>:
 800f314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f318:	1ccd      	adds	r5, r1, #3
 800f31a:	f025 0503 	bic.w	r5, r5, #3
 800f31e:	3508      	adds	r5, #8
 800f320:	2d0c      	cmp	r5, #12
 800f322:	bf38      	it	cc
 800f324:	250c      	movcc	r5, #12
 800f326:	2d00      	cmp	r5, #0
 800f328:	4607      	mov	r7, r0
 800f32a:	db01      	blt.n	800f330 <_malloc_r+0x1c>
 800f32c:	42a9      	cmp	r1, r5
 800f32e:	d905      	bls.n	800f33c <_malloc_r+0x28>
 800f330:	230c      	movs	r3, #12
 800f332:	603b      	str	r3, [r7, #0]
 800f334:	2600      	movs	r6, #0
 800f336:	4630      	mov	r0, r6
 800f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f33c:	4e2e      	ldr	r6, [pc, #184]	; (800f3f8 <_malloc_r+0xe4>)
 800f33e:	f001 fb7d 	bl	8010a3c <__malloc_lock>
 800f342:	6833      	ldr	r3, [r6, #0]
 800f344:	461c      	mov	r4, r3
 800f346:	bb34      	cbnz	r4, 800f396 <_malloc_r+0x82>
 800f348:	4629      	mov	r1, r5
 800f34a:	4638      	mov	r0, r7
 800f34c:	f7ff ffc2 	bl	800f2d4 <sbrk_aligned>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	4604      	mov	r4, r0
 800f354:	d14d      	bne.n	800f3f2 <_malloc_r+0xde>
 800f356:	6834      	ldr	r4, [r6, #0]
 800f358:	4626      	mov	r6, r4
 800f35a:	2e00      	cmp	r6, #0
 800f35c:	d140      	bne.n	800f3e0 <_malloc_r+0xcc>
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	4631      	mov	r1, r6
 800f362:	4638      	mov	r0, r7
 800f364:	eb04 0803 	add.w	r8, r4, r3
 800f368:	f000 fcb2 	bl	800fcd0 <_sbrk_r>
 800f36c:	4580      	cmp	r8, r0
 800f36e:	d13a      	bne.n	800f3e6 <_malloc_r+0xd2>
 800f370:	6821      	ldr	r1, [r4, #0]
 800f372:	3503      	adds	r5, #3
 800f374:	1a6d      	subs	r5, r5, r1
 800f376:	f025 0503 	bic.w	r5, r5, #3
 800f37a:	3508      	adds	r5, #8
 800f37c:	2d0c      	cmp	r5, #12
 800f37e:	bf38      	it	cc
 800f380:	250c      	movcc	r5, #12
 800f382:	4629      	mov	r1, r5
 800f384:	4638      	mov	r0, r7
 800f386:	f7ff ffa5 	bl	800f2d4 <sbrk_aligned>
 800f38a:	3001      	adds	r0, #1
 800f38c:	d02b      	beq.n	800f3e6 <_malloc_r+0xd2>
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	442b      	add	r3, r5
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	e00e      	b.n	800f3b4 <_malloc_r+0xa0>
 800f396:	6822      	ldr	r2, [r4, #0]
 800f398:	1b52      	subs	r2, r2, r5
 800f39a:	d41e      	bmi.n	800f3da <_malloc_r+0xc6>
 800f39c:	2a0b      	cmp	r2, #11
 800f39e:	d916      	bls.n	800f3ce <_malloc_r+0xba>
 800f3a0:	1961      	adds	r1, r4, r5
 800f3a2:	42a3      	cmp	r3, r4
 800f3a4:	6025      	str	r5, [r4, #0]
 800f3a6:	bf18      	it	ne
 800f3a8:	6059      	strne	r1, [r3, #4]
 800f3aa:	6863      	ldr	r3, [r4, #4]
 800f3ac:	bf08      	it	eq
 800f3ae:	6031      	streq	r1, [r6, #0]
 800f3b0:	5162      	str	r2, [r4, r5]
 800f3b2:	604b      	str	r3, [r1, #4]
 800f3b4:	4638      	mov	r0, r7
 800f3b6:	f104 060b 	add.w	r6, r4, #11
 800f3ba:	f001 fb45 	bl	8010a48 <__malloc_unlock>
 800f3be:	f026 0607 	bic.w	r6, r6, #7
 800f3c2:	1d23      	adds	r3, r4, #4
 800f3c4:	1af2      	subs	r2, r6, r3
 800f3c6:	d0b6      	beq.n	800f336 <_malloc_r+0x22>
 800f3c8:	1b9b      	subs	r3, r3, r6
 800f3ca:	50a3      	str	r3, [r4, r2]
 800f3cc:	e7b3      	b.n	800f336 <_malloc_r+0x22>
 800f3ce:	6862      	ldr	r2, [r4, #4]
 800f3d0:	42a3      	cmp	r3, r4
 800f3d2:	bf0c      	ite	eq
 800f3d4:	6032      	streq	r2, [r6, #0]
 800f3d6:	605a      	strne	r2, [r3, #4]
 800f3d8:	e7ec      	b.n	800f3b4 <_malloc_r+0xa0>
 800f3da:	4623      	mov	r3, r4
 800f3dc:	6864      	ldr	r4, [r4, #4]
 800f3de:	e7b2      	b.n	800f346 <_malloc_r+0x32>
 800f3e0:	4634      	mov	r4, r6
 800f3e2:	6876      	ldr	r6, [r6, #4]
 800f3e4:	e7b9      	b.n	800f35a <_malloc_r+0x46>
 800f3e6:	230c      	movs	r3, #12
 800f3e8:	603b      	str	r3, [r7, #0]
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	f001 fb2c 	bl	8010a48 <__malloc_unlock>
 800f3f0:	e7a1      	b.n	800f336 <_malloc_r+0x22>
 800f3f2:	6025      	str	r5, [r4, #0]
 800f3f4:	e7de      	b.n	800f3b4 <_malloc_r+0xa0>
 800f3f6:	bf00      	nop
 800f3f8:	2000b368 	.word	0x2000b368

0800f3fc <__cvt>:
 800f3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	ec55 4b10 	vmov	r4, r5, d0
 800f404:	2d00      	cmp	r5, #0
 800f406:	460e      	mov	r6, r1
 800f408:	4619      	mov	r1, r3
 800f40a:	462b      	mov	r3, r5
 800f40c:	bfbb      	ittet	lt
 800f40e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f412:	461d      	movlt	r5, r3
 800f414:	2300      	movge	r3, #0
 800f416:	232d      	movlt	r3, #45	; 0x2d
 800f418:	700b      	strb	r3, [r1, #0]
 800f41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f41c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f420:	4691      	mov	r9, r2
 800f422:	f023 0820 	bic.w	r8, r3, #32
 800f426:	bfbc      	itt	lt
 800f428:	4622      	movlt	r2, r4
 800f42a:	4614      	movlt	r4, r2
 800f42c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f430:	d005      	beq.n	800f43e <__cvt+0x42>
 800f432:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f436:	d100      	bne.n	800f43a <__cvt+0x3e>
 800f438:	3601      	adds	r6, #1
 800f43a:	2102      	movs	r1, #2
 800f43c:	e000      	b.n	800f440 <__cvt+0x44>
 800f43e:	2103      	movs	r1, #3
 800f440:	ab03      	add	r3, sp, #12
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	ab02      	add	r3, sp, #8
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	ec45 4b10 	vmov	d0, r4, r5
 800f44c:	4653      	mov	r3, sl
 800f44e:	4632      	mov	r2, r6
 800f450:	f000 fd02 	bl	800fe58 <_dtoa_r>
 800f454:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f458:	4607      	mov	r7, r0
 800f45a:	d102      	bne.n	800f462 <__cvt+0x66>
 800f45c:	f019 0f01 	tst.w	r9, #1
 800f460:	d022      	beq.n	800f4a8 <__cvt+0xac>
 800f462:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f466:	eb07 0906 	add.w	r9, r7, r6
 800f46a:	d110      	bne.n	800f48e <__cvt+0x92>
 800f46c:	783b      	ldrb	r3, [r7, #0]
 800f46e:	2b30      	cmp	r3, #48	; 0x30
 800f470:	d10a      	bne.n	800f488 <__cvt+0x8c>
 800f472:	2200      	movs	r2, #0
 800f474:	2300      	movs	r3, #0
 800f476:	4620      	mov	r0, r4
 800f478:	4629      	mov	r1, r5
 800f47a:	f7f1 fb55 	bl	8000b28 <__aeabi_dcmpeq>
 800f47e:	b918      	cbnz	r0, 800f488 <__cvt+0x8c>
 800f480:	f1c6 0601 	rsb	r6, r6, #1
 800f484:	f8ca 6000 	str.w	r6, [sl]
 800f488:	f8da 3000 	ldr.w	r3, [sl]
 800f48c:	4499      	add	r9, r3
 800f48e:	2200      	movs	r2, #0
 800f490:	2300      	movs	r3, #0
 800f492:	4620      	mov	r0, r4
 800f494:	4629      	mov	r1, r5
 800f496:	f7f1 fb47 	bl	8000b28 <__aeabi_dcmpeq>
 800f49a:	b108      	cbz	r0, 800f4a0 <__cvt+0xa4>
 800f49c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4a0:	2230      	movs	r2, #48	; 0x30
 800f4a2:	9b03      	ldr	r3, [sp, #12]
 800f4a4:	454b      	cmp	r3, r9
 800f4a6:	d307      	bcc.n	800f4b8 <__cvt+0xbc>
 800f4a8:	9b03      	ldr	r3, [sp, #12]
 800f4aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4ac:	1bdb      	subs	r3, r3, r7
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	6013      	str	r3, [r2, #0]
 800f4b2:	b004      	add	sp, #16
 800f4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b8:	1c59      	adds	r1, r3, #1
 800f4ba:	9103      	str	r1, [sp, #12]
 800f4bc:	701a      	strb	r2, [r3, #0]
 800f4be:	e7f0      	b.n	800f4a2 <__cvt+0xa6>

0800f4c0 <__exponent>:
 800f4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2900      	cmp	r1, #0
 800f4c6:	bfb8      	it	lt
 800f4c8:	4249      	neglt	r1, r1
 800f4ca:	f803 2b02 	strb.w	r2, [r3], #2
 800f4ce:	bfb4      	ite	lt
 800f4d0:	222d      	movlt	r2, #45	; 0x2d
 800f4d2:	222b      	movge	r2, #43	; 0x2b
 800f4d4:	2909      	cmp	r1, #9
 800f4d6:	7042      	strb	r2, [r0, #1]
 800f4d8:	dd2a      	ble.n	800f530 <__exponent+0x70>
 800f4da:	f10d 0407 	add.w	r4, sp, #7
 800f4de:	46a4      	mov	ip, r4
 800f4e0:	270a      	movs	r7, #10
 800f4e2:	46a6      	mov	lr, r4
 800f4e4:	460a      	mov	r2, r1
 800f4e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800f4ea:	fb07 1516 	mls	r5, r7, r6, r1
 800f4ee:	3530      	adds	r5, #48	; 0x30
 800f4f0:	2a63      	cmp	r2, #99	; 0x63
 800f4f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f4f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	dcf1      	bgt.n	800f4e2 <__exponent+0x22>
 800f4fe:	3130      	adds	r1, #48	; 0x30
 800f500:	f1ae 0502 	sub.w	r5, lr, #2
 800f504:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f508:	1c44      	adds	r4, r0, #1
 800f50a:	4629      	mov	r1, r5
 800f50c:	4561      	cmp	r1, ip
 800f50e:	d30a      	bcc.n	800f526 <__exponent+0x66>
 800f510:	f10d 0209 	add.w	r2, sp, #9
 800f514:	eba2 020e 	sub.w	r2, r2, lr
 800f518:	4565      	cmp	r5, ip
 800f51a:	bf88      	it	hi
 800f51c:	2200      	movhi	r2, #0
 800f51e:	4413      	add	r3, r2
 800f520:	1a18      	subs	r0, r3, r0
 800f522:	b003      	add	sp, #12
 800f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f52a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f52e:	e7ed      	b.n	800f50c <__exponent+0x4c>
 800f530:	2330      	movs	r3, #48	; 0x30
 800f532:	3130      	adds	r1, #48	; 0x30
 800f534:	7083      	strb	r3, [r0, #2]
 800f536:	70c1      	strb	r1, [r0, #3]
 800f538:	1d03      	adds	r3, r0, #4
 800f53a:	e7f1      	b.n	800f520 <__exponent+0x60>

0800f53c <_printf_float>:
 800f53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f540:	ed2d 8b02 	vpush	{d8}
 800f544:	b08d      	sub	sp, #52	; 0x34
 800f546:	460c      	mov	r4, r1
 800f548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f54c:	4616      	mov	r6, r2
 800f54e:	461f      	mov	r7, r3
 800f550:	4605      	mov	r5, r0
 800f552:	f001 fa6f 	bl	8010a34 <_localeconv_r>
 800f556:	f8d0 a000 	ldr.w	sl, [r0]
 800f55a:	4650      	mov	r0, sl
 800f55c:	f7f0 fe62 	bl	8000224 <strlen>
 800f560:	2300      	movs	r3, #0
 800f562:	930a      	str	r3, [sp, #40]	; 0x28
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	9305      	str	r3, [sp, #20]
 800f568:	f8d8 3000 	ldr.w	r3, [r8]
 800f56c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f570:	3307      	adds	r3, #7
 800f572:	f023 0307 	bic.w	r3, r3, #7
 800f576:	f103 0208 	add.w	r2, r3, #8
 800f57a:	f8c8 2000 	str.w	r2, [r8]
 800f57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f582:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f586:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f58a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f58e:	9307      	str	r3, [sp, #28]
 800f590:	f8cd 8018 	str.w	r8, [sp, #24]
 800f594:	ee08 0a10 	vmov	s16, r0
 800f598:	4b9f      	ldr	r3, [pc, #636]	; (800f818 <_printf_float+0x2dc>)
 800f59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f59e:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a2:	f7f1 faf3 	bl	8000b8c <__aeabi_dcmpun>
 800f5a6:	bb88      	cbnz	r0, 800f60c <_printf_float+0xd0>
 800f5a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5ac:	4b9a      	ldr	r3, [pc, #616]	; (800f818 <_printf_float+0x2dc>)
 800f5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b2:	f7f1 facd 	bl	8000b50 <__aeabi_dcmple>
 800f5b6:	bb48      	cbnz	r0, 800f60c <_printf_float+0xd0>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4640      	mov	r0, r8
 800f5be:	4649      	mov	r1, r9
 800f5c0:	f7f1 fabc 	bl	8000b3c <__aeabi_dcmplt>
 800f5c4:	b110      	cbz	r0, 800f5cc <_printf_float+0x90>
 800f5c6:	232d      	movs	r3, #45	; 0x2d
 800f5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5cc:	4b93      	ldr	r3, [pc, #588]	; (800f81c <_printf_float+0x2e0>)
 800f5ce:	4894      	ldr	r0, [pc, #592]	; (800f820 <_printf_float+0x2e4>)
 800f5d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f5d4:	bf94      	ite	ls
 800f5d6:	4698      	movls	r8, r3
 800f5d8:	4680      	movhi	r8, r0
 800f5da:	2303      	movs	r3, #3
 800f5dc:	6123      	str	r3, [r4, #16]
 800f5de:	9b05      	ldr	r3, [sp, #20]
 800f5e0:	f023 0204 	bic.w	r2, r3, #4
 800f5e4:	6022      	str	r2, [r4, #0]
 800f5e6:	f04f 0900 	mov.w	r9, #0
 800f5ea:	9700      	str	r7, [sp, #0]
 800f5ec:	4633      	mov	r3, r6
 800f5ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f000 f9d8 	bl	800f9a8 <_printf_common>
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	f040 8090 	bne.w	800f71e <_printf_float+0x1e2>
 800f5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f602:	b00d      	add	sp, #52	; 0x34
 800f604:	ecbd 8b02 	vpop	{d8}
 800f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60c:	4642      	mov	r2, r8
 800f60e:	464b      	mov	r3, r9
 800f610:	4640      	mov	r0, r8
 800f612:	4649      	mov	r1, r9
 800f614:	f7f1 faba 	bl	8000b8c <__aeabi_dcmpun>
 800f618:	b140      	cbz	r0, 800f62c <_printf_float+0xf0>
 800f61a:	464b      	mov	r3, r9
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bfbc      	itt	lt
 800f620:	232d      	movlt	r3, #45	; 0x2d
 800f622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f626:	487f      	ldr	r0, [pc, #508]	; (800f824 <_printf_float+0x2e8>)
 800f628:	4b7f      	ldr	r3, [pc, #508]	; (800f828 <_printf_float+0x2ec>)
 800f62a:	e7d1      	b.n	800f5d0 <_printf_float+0x94>
 800f62c:	6863      	ldr	r3, [r4, #4]
 800f62e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f632:	9206      	str	r2, [sp, #24]
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	d13f      	bne.n	800f6b8 <_printf_float+0x17c>
 800f638:	2306      	movs	r3, #6
 800f63a:	6063      	str	r3, [r4, #4]
 800f63c:	9b05      	ldr	r3, [sp, #20]
 800f63e:	6861      	ldr	r1, [r4, #4]
 800f640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f644:	2300      	movs	r3, #0
 800f646:	9303      	str	r3, [sp, #12]
 800f648:	ab0a      	add	r3, sp, #40	; 0x28
 800f64a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f64e:	ab09      	add	r3, sp, #36	; 0x24
 800f650:	ec49 8b10 	vmov	d0, r8, r9
 800f654:	9300      	str	r3, [sp, #0]
 800f656:	6022      	str	r2, [r4, #0]
 800f658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f65c:	4628      	mov	r0, r5
 800f65e:	f7ff fecd 	bl	800f3fc <__cvt>
 800f662:	9b06      	ldr	r3, [sp, #24]
 800f664:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f666:	2b47      	cmp	r3, #71	; 0x47
 800f668:	4680      	mov	r8, r0
 800f66a:	d108      	bne.n	800f67e <_printf_float+0x142>
 800f66c:	1cc8      	adds	r0, r1, #3
 800f66e:	db02      	blt.n	800f676 <_printf_float+0x13a>
 800f670:	6863      	ldr	r3, [r4, #4]
 800f672:	4299      	cmp	r1, r3
 800f674:	dd41      	ble.n	800f6fa <_printf_float+0x1be>
 800f676:	f1ab 0b02 	sub.w	fp, fp, #2
 800f67a:	fa5f fb8b 	uxtb.w	fp, fp
 800f67e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f682:	d820      	bhi.n	800f6c6 <_printf_float+0x18a>
 800f684:	3901      	subs	r1, #1
 800f686:	465a      	mov	r2, fp
 800f688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f68c:	9109      	str	r1, [sp, #36]	; 0x24
 800f68e:	f7ff ff17 	bl	800f4c0 <__exponent>
 800f692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f694:	1813      	adds	r3, r2, r0
 800f696:	2a01      	cmp	r2, #1
 800f698:	4681      	mov	r9, r0
 800f69a:	6123      	str	r3, [r4, #16]
 800f69c:	dc02      	bgt.n	800f6a4 <_printf_float+0x168>
 800f69e:	6822      	ldr	r2, [r4, #0]
 800f6a0:	07d2      	lsls	r2, r2, #31
 800f6a2:	d501      	bpl.n	800f6a8 <_printf_float+0x16c>
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	6123      	str	r3, [r4, #16]
 800f6a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d09c      	beq.n	800f5ea <_printf_float+0xae>
 800f6b0:	232d      	movs	r3, #45	; 0x2d
 800f6b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6b6:	e798      	b.n	800f5ea <_printf_float+0xae>
 800f6b8:	9a06      	ldr	r2, [sp, #24]
 800f6ba:	2a47      	cmp	r2, #71	; 0x47
 800f6bc:	d1be      	bne.n	800f63c <_printf_float+0x100>
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1bc      	bne.n	800f63c <_printf_float+0x100>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e7b9      	b.n	800f63a <_printf_float+0xfe>
 800f6c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f6ca:	d118      	bne.n	800f6fe <_printf_float+0x1c2>
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	6863      	ldr	r3, [r4, #4]
 800f6d0:	dd0b      	ble.n	800f6ea <_printf_float+0x1ae>
 800f6d2:	6121      	str	r1, [r4, #16]
 800f6d4:	b913      	cbnz	r3, 800f6dc <_printf_float+0x1a0>
 800f6d6:	6822      	ldr	r2, [r4, #0]
 800f6d8:	07d0      	lsls	r0, r2, #31
 800f6da:	d502      	bpl.n	800f6e2 <_printf_float+0x1a6>
 800f6dc:	3301      	adds	r3, #1
 800f6de:	440b      	add	r3, r1
 800f6e0:	6123      	str	r3, [r4, #16]
 800f6e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800f6e4:	f04f 0900 	mov.w	r9, #0
 800f6e8:	e7de      	b.n	800f6a8 <_printf_float+0x16c>
 800f6ea:	b913      	cbnz	r3, 800f6f2 <_printf_float+0x1b6>
 800f6ec:	6822      	ldr	r2, [r4, #0]
 800f6ee:	07d2      	lsls	r2, r2, #31
 800f6f0:	d501      	bpl.n	800f6f6 <_printf_float+0x1ba>
 800f6f2:	3302      	adds	r3, #2
 800f6f4:	e7f4      	b.n	800f6e0 <_printf_float+0x1a4>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e7f2      	b.n	800f6e0 <_printf_float+0x1a4>
 800f6fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f700:	4299      	cmp	r1, r3
 800f702:	db05      	blt.n	800f710 <_printf_float+0x1d4>
 800f704:	6823      	ldr	r3, [r4, #0]
 800f706:	6121      	str	r1, [r4, #16]
 800f708:	07d8      	lsls	r0, r3, #31
 800f70a:	d5ea      	bpl.n	800f6e2 <_printf_float+0x1a6>
 800f70c:	1c4b      	adds	r3, r1, #1
 800f70e:	e7e7      	b.n	800f6e0 <_printf_float+0x1a4>
 800f710:	2900      	cmp	r1, #0
 800f712:	bfd4      	ite	le
 800f714:	f1c1 0202 	rsble	r2, r1, #2
 800f718:	2201      	movgt	r2, #1
 800f71a:	4413      	add	r3, r2
 800f71c:	e7e0      	b.n	800f6e0 <_printf_float+0x1a4>
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	055a      	lsls	r2, r3, #21
 800f722:	d407      	bmi.n	800f734 <_printf_float+0x1f8>
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	4642      	mov	r2, r8
 800f728:	4631      	mov	r1, r6
 800f72a:	4628      	mov	r0, r5
 800f72c:	47b8      	blx	r7
 800f72e:	3001      	adds	r0, #1
 800f730:	d12c      	bne.n	800f78c <_printf_float+0x250>
 800f732:	e764      	b.n	800f5fe <_printf_float+0xc2>
 800f734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f738:	f240 80e0 	bls.w	800f8fc <_printf_float+0x3c0>
 800f73c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f740:	2200      	movs	r2, #0
 800f742:	2300      	movs	r3, #0
 800f744:	f7f1 f9f0 	bl	8000b28 <__aeabi_dcmpeq>
 800f748:	2800      	cmp	r0, #0
 800f74a:	d034      	beq.n	800f7b6 <_printf_float+0x27a>
 800f74c:	4a37      	ldr	r2, [pc, #220]	; (800f82c <_printf_float+0x2f0>)
 800f74e:	2301      	movs	r3, #1
 800f750:	4631      	mov	r1, r6
 800f752:	4628      	mov	r0, r5
 800f754:	47b8      	blx	r7
 800f756:	3001      	adds	r0, #1
 800f758:	f43f af51 	beq.w	800f5fe <_printf_float+0xc2>
 800f75c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f760:	429a      	cmp	r2, r3
 800f762:	db02      	blt.n	800f76a <_printf_float+0x22e>
 800f764:	6823      	ldr	r3, [r4, #0]
 800f766:	07d8      	lsls	r0, r3, #31
 800f768:	d510      	bpl.n	800f78c <_printf_float+0x250>
 800f76a:	ee18 3a10 	vmov	r3, s16
 800f76e:	4652      	mov	r2, sl
 800f770:	4631      	mov	r1, r6
 800f772:	4628      	mov	r0, r5
 800f774:	47b8      	blx	r7
 800f776:	3001      	adds	r0, #1
 800f778:	f43f af41 	beq.w	800f5fe <_printf_float+0xc2>
 800f77c:	f04f 0800 	mov.w	r8, #0
 800f780:	f104 091a 	add.w	r9, r4, #26
 800f784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f786:	3b01      	subs	r3, #1
 800f788:	4543      	cmp	r3, r8
 800f78a:	dc09      	bgt.n	800f7a0 <_printf_float+0x264>
 800f78c:	6823      	ldr	r3, [r4, #0]
 800f78e:	079b      	lsls	r3, r3, #30
 800f790:	f100 8105 	bmi.w	800f99e <_printf_float+0x462>
 800f794:	68e0      	ldr	r0, [r4, #12]
 800f796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f798:	4298      	cmp	r0, r3
 800f79a:	bfb8      	it	lt
 800f79c:	4618      	movlt	r0, r3
 800f79e:	e730      	b.n	800f602 <_printf_float+0xc6>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	464a      	mov	r2, r9
 800f7a4:	4631      	mov	r1, r6
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	47b8      	blx	r7
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	f43f af27 	beq.w	800f5fe <_printf_float+0xc2>
 800f7b0:	f108 0801 	add.w	r8, r8, #1
 800f7b4:	e7e6      	b.n	800f784 <_printf_float+0x248>
 800f7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	dc39      	bgt.n	800f830 <_printf_float+0x2f4>
 800f7bc:	4a1b      	ldr	r2, [pc, #108]	; (800f82c <_printf_float+0x2f0>)
 800f7be:	2301      	movs	r3, #1
 800f7c0:	4631      	mov	r1, r6
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	47b8      	blx	r7
 800f7c6:	3001      	adds	r0, #1
 800f7c8:	f43f af19 	beq.w	800f5fe <_printf_float+0xc2>
 800f7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	d102      	bne.n	800f7da <_printf_float+0x29e>
 800f7d4:	6823      	ldr	r3, [r4, #0]
 800f7d6:	07d9      	lsls	r1, r3, #31
 800f7d8:	d5d8      	bpl.n	800f78c <_printf_float+0x250>
 800f7da:	ee18 3a10 	vmov	r3, s16
 800f7de:	4652      	mov	r2, sl
 800f7e0:	4631      	mov	r1, r6
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	47b8      	blx	r7
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	f43f af09 	beq.w	800f5fe <_printf_float+0xc2>
 800f7ec:	f04f 0900 	mov.w	r9, #0
 800f7f0:	f104 0a1a 	add.w	sl, r4, #26
 800f7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f6:	425b      	negs	r3, r3
 800f7f8:	454b      	cmp	r3, r9
 800f7fa:	dc01      	bgt.n	800f800 <_printf_float+0x2c4>
 800f7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7fe:	e792      	b.n	800f726 <_printf_float+0x1ea>
 800f800:	2301      	movs	r3, #1
 800f802:	4652      	mov	r2, sl
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	47b8      	blx	r7
 800f80a:	3001      	adds	r0, #1
 800f80c:	f43f aef7 	beq.w	800f5fe <_printf_float+0xc2>
 800f810:	f109 0901 	add.w	r9, r9, #1
 800f814:	e7ee      	b.n	800f7f4 <_printf_float+0x2b8>
 800f816:	bf00      	nop
 800f818:	7fefffff 	.word	0x7fefffff
 800f81c:	08028a54 	.word	0x08028a54
 800f820:	08028a58 	.word	0x08028a58
 800f824:	08028a60 	.word	0x08028a60
 800f828:	08028a5c 	.word	0x08028a5c
 800f82c:	08028a64 	.word	0x08028a64
 800f830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f834:	429a      	cmp	r2, r3
 800f836:	bfa8      	it	ge
 800f838:	461a      	movge	r2, r3
 800f83a:	2a00      	cmp	r2, #0
 800f83c:	4691      	mov	r9, r2
 800f83e:	dc37      	bgt.n	800f8b0 <_printf_float+0x374>
 800f840:	f04f 0b00 	mov.w	fp, #0
 800f844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f848:	f104 021a 	add.w	r2, r4, #26
 800f84c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f84e:	9305      	str	r3, [sp, #20]
 800f850:	eba3 0309 	sub.w	r3, r3, r9
 800f854:	455b      	cmp	r3, fp
 800f856:	dc33      	bgt.n	800f8c0 <_printf_float+0x384>
 800f858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f85c:	429a      	cmp	r2, r3
 800f85e:	db3b      	blt.n	800f8d8 <_printf_float+0x39c>
 800f860:	6823      	ldr	r3, [r4, #0]
 800f862:	07da      	lsls	r2, r3, #31
 800f864:	d438      	bmi.n	800f8d8 <_printf_float+0x39c>
 800f866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f868:	9a05      	ldr	r2, [sp, #20]
 800f86a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f86c:	1a9a      	subs	r2, r3, r2
 800f86e:	eba3 0901 	sub.w	r9, r3, r1
 800f872:	4591      	cmp	r9, r2
 800f874:	bfa8      	it	ge
 800f876:	4691      	movge	r9, r2
 800f878:	f1b9 0f00 	cmp.w	r9, #0
 800f87c:	dc35      	bgt.n	800f8ea <_printf_float+0x3ae>
 800f87e:	f04f 0800 	mov.w	r8, #0
 800f882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f886:	f104 0a1a 	add.w	sl, r4, #26
 800f88a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f88e:	1a9b      	subs	r3, r3, r2
 800f890:	eba3 0309 	sub.w	r3, r3, r9
 800f894:	4543      	cmp	r3, r8
 800f896:	f77f af79 	ble.w	800f78c <_printf_float+0x250>
 800f89a:	2301      	movs	r3, #1
 800f89c:	4652      	mov	r2, sl
 800f89e:	4631      	mov	r1, r6
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	47b8      	blx	r7
 800f8a4:	3001      	adds	r0, #1
 800f8a6:	f43f aeaa 	beq.w	800f5fe <_printf_float+0xc2>
 800f8aa:	f108 0801 	add.w	r8, r8, #1
 800f8ae:	e7ec      	b.n	800f88a <_printf_float+0x34e>
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	4631      	mov	r1, r6
 800f8b4:	4642      	mov	r2, r8
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	47b8      	blx	r7
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	d1c0      	bne.n	800f840 <_printf_float+0x304>
 800f8be:	e69e      	b.n	800f5fe <_printf_float+0xc2>
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	4631      	mov	r1, r6
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	9205      	str	r2, [sp, #20]
 800f8c8:	47b8      	blx	r7
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	f43f ae97 	beq.w	800f5fe <_printf_float+0xc2>
 800f8d0:	9a05      	ldr	r2, [sp, #20]
 800f8d2:	f10b 0b01 	add.w	fp, fp, #1
 800f8d6:	e7b9      	b.n	800f84c <_printf_float+0x310>
 800f8d8:	ee18 3a10 	vmov	r3, s16
 800f8dc:	4652      	mov	r2, sl
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d1be      	bne.n	800f866 <_printf_float+0x32a>
 800f8e8:	e689      	b.n	800f5fe <_printf_float+0xc2>
 800f8ea:	9a05      	ldr	r2, [sp, #20]
 800f8ec:	464b      	mov	r3, r9
 800f8ee:	4442      	add	r2, r8
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d1c1      	bne.n	800f87e <_printf_float+0x342>
 800f8fa:	e680      	b.n	800f5fe <_printf_float+0xc2>
 800f8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8fe:	2a01      	cmp	r2, #1
 800f900:	dc01      	bgt.n	800f906 <_printf_float+0x3ca>
 800f902:	07db      	lsls	r3, r3, #31
 800f904:	d538      	bpl.n	800f978 <_printf_float+0x43c>
 800f906:	2301      	movs	r3, #1
 800f908:	4642      	mov	r2, r8
 800f90a:	4631      	mov	r1, r6
 800f90c:	4628      	mov	r0, r5
 800f90e:	47b8      	blx	r7
 800f910:	3001      	adds	r0, #1
 800f912:	f43f ae74 	beq.w	800f5fe <_printf_float+0xc2>
 800f916:	ee18 3a10 	vmov	r3, s16
 800f91a:	4652      	mov	r2, sl
 800f91c:	4631      	mov	r1, r6
 800f91e:	4628      	mov	r0, r5
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	f43f ae6b 	beq.w	800f5fe <_printf_float+0xc2>
 800f928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f92c:	2200      	movs	r2, #0
 800f92e:	2300      	movs	r3, #0
 800f930:	f7f1 f8fa 	bl	8000b28 <__aeabi_dcmpeq>
 800f934:	b9d8      	cbnz	r0, 800f96e <_printf_float+0x432>
 800f936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f938:	f108 0201 	add.w	r2, r8, #1
 800f93c:	3b01      	subs	r3, #1
 800f93e:	4631      	mov	r1, r6
 800f940:	4628      	mov	r0, r5
 800f942:	47b8      	blx	r7
 800f944:	3001      	adds	r0, #1
 800f946:	d10e      	bne.n	800f966 <_printf_float+0x42a>
 800f948:	e659      	b.n	800f5fe <_printf_float+0xc2>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4652      	mov	r2, sl
 800f94e:	4631      	mov	r1, r6
 800f950:	4628      	mov	r0, r5
 800f952:	47b8      	blx	r7
 800f954:	3001      	adds	r0, #1
 800f956:	f43f ae52 	beq.w	800f5fe <_printf_float+0xc2>
 800f95a:	f108 0801 	add.w	r8, r8, #1
 800f95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f960:	3b01      	subs	r3, #1
 800f962:	4543      	cmp	r3, r8
 800f964:	dcf1      	bgt.n	800f94a <_printf_float+0x40e>
 800f966:	464b      	mov	r3, r9
 800f968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f96c:	e6dc      	b.n	800f728 <_printf_float+0x1ec>
 800f96e:	f04f 0800 	mov.w	r8, #0
 800f972:	f104 0a1a 	add.w	sl, r4, #26
 800f976:	e7f2      	b.n	800f95e <_printf_float+0x422>
 800f978:	2301      	movs	r3, #1
 800f97a:	4642      	mov	r2, r8
 800f97c:	e7df      	b.n	800f93e <_printf_float+0x402>
 800f97e:	2301      	movs	r3, #1
 800f980:	464a      	mov	r2, r9
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	f43f ae38 	beq.w	800f5fe <_printf_float+0xc2>
 800f98e:	f108 0801 	add.w	r8, r8, #1
 800f992:	68e3      	ldr	r3, [r4, #12]
 800f994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f996:	1a5b      	subs	r3, r3, r1
 800f998:	4543      	cmp	r3, r8
 800f99a:	dcf0      	bgt.n	800f97e <_printf_float+0x442>
 800f99c:	e6fa      	b.n	800f794 <_printf_float+0x258>
 800f99e:	f04f 0800 	mov.w	r8, #0
 800f9a2:	f104 0919 	add.w	r9, r4, #25
 800f9a6:	e7f4      	b.n	800f992 <_printf_float+0x456>

0800f9a8 <_printf_common>:
 800f9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ac:	4616      	mov	r6, r2
 800f9ae:	4699      	mov	r9, r3
 800f9b0:	688a      	ldr	r2, [r1, #8]
 800f9b2:	690b      	ldr	r3, [r1, #16]
 800f9b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	bfb8      	it	lt
 800f9bc:	4613      	movlt	r3, r2
 800f9be:	6033      	str	r3, [r6, #0]
 800f9c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	b10a      	cbz	r2, 800f9ce <_printf_common+0x26>
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	6033      	str	r3, [r6, #0]
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	0699      	lsls	r1, r3, #26
 800f9d2:	bf42      	ittt	mi
 800f9d4:	6833      	ldrmi	r3, [r6, #0]
 800f9d6:	3302      	addmi	r3, #2
 800f9d8:	6033      	strmi	r3, [r6, #0]
 800f9da:	6825      	ldr	r5, [r4, #0]
 800f9dc:	f015 0506 	ands.w	r5, r5, #6
 800f9e0:	d106      	bne.n	800f9f0 <_printf_common+0x48>
 800f9e2:	f104 0a19 	add.w	sl, r4, #25
 800f9e6:	68e3      	ldr	r3, [r4, #12]
 800f9e8:	6832      	ldr	r2, [r6, #0]
 800f9ea:	1a9b      	subs	r3, r3, r2
 800f9ec:	42ab      	cmp	r3, r5
 800f9ee:	dc26      	bgt.n	800fa3e <_printf_common+0x96>
 800f9f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9f4:	1e13      	subs	r3, r2, #0
 800f9f6:	6822      	ldr	r2, [r4, #0]
 800f9f8:	bf18      	it	ne
 800f9fa:	2301      	movne	r3, #1
 800f9fc:	0692      	lsls	r2, r2, #26
 800f9fe:	d42b      	bmi.n	800fa58 <_printf_common+0xb0>
 800fa00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa04:	4649      	mov	r1, r9
 800fa06:	4638      	mov	r0, r7
 800fa08:	47c0      	blx	r8
 800fa0a:	3001      	adds	r0, #1
 800fa0c:	d01e      	beq.n	800fa4c <_printf_common+0xa4>
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	68e5      	ldr	r5, [r4, #12]
 800fa12:	6832      	ldr	r2, [r6, #0]
 800fa14:	f003 0306 	and.w	r3, r3, #6
 800fa18:	2b04      	cmp	r3, #4
 800fa1a:	bf08      	it	eq
 800fa1c:	1aad      	subeq	r5, r5, r2
 800fa1e:	68a3      	ldr	r3, [r4, #8]
 800fa20:	6922      	ldr	r2, [r4, #16]
 800fa22:	bf0c      	ite	eq
 800fa24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa28:	2500      	movne	r5, #0
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	bfc4      	itt	gt
 800fa2e:	1a9b      	subgt	r3, r3, r2
 800fa30:	18ed      	addgt	r5, r5, r3
 800fa32:	2600      	movs	r6, #0
 800fa34:	341a      	adds	r4, #26
 800fa36:	42b5      	cmp	r5, r6
 800fa38:	d11a      	bne.n	800fa70 <_printf_common+0xc8>
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	e008      	b.n	800fa50 <_printf_common+0xa8>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	4652      	mov	r2, sl
 800fa42:	4649      	mov	r1, r9
 800fa44:	4638      	mov	r0, r7
 800fa46:	47c0      	blx	r8
 800fa48:	3001      	adds	r0, #1
 800fa4a:	d103      	bne.n	800fa54 <_printf_common+0xac>
 800fa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa54:	3501      	adds	r5, #1
 800fa56:	e7c6      	b.n	800f9e6 <_printf_common+0x3e>
 800fa58:	18e1      	adds	r1, r4, r3
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	2030      	movs	r0, #48	; 0x30
 800fa5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa62:	4422      	add	r2, r4
 800fa64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa6c:	3302      	adds	r3, #2
 800fa6e:	e7c7      	b.n	800fa00 <_printf_common+0x58>
 800fa70:	2301      	movs	r3, #1
 800fa72:	4622      	mov	r2, r4
 800fa74:	4649      	mov	r1, r9
 800fa76:	4638      	mov	r0, r7
 800fa78:	47c0      	blx	r8
 800fa7a:	3001      	adds	r0, #1
 800fa7c:	d0e6      	beq.n	800fa4c <_printf_common+0xa4>
 800fa7e:	3601      	adds	r6, #1
 800fa80:	e7d9      	b.n	800fa36 <_printf_common+0x8e>
	...

0800fa84 <_printf_i>:
 800fa84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa88:	7e0f      	ldrb	r7, [r1, #24]
 800fa8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa8c:	2f78      	cmp	r7, #120	; 0x78
 800fa8e:	4691      	mov	r9, r2
 800fa90:	4680      	mov	r8, r0
 800fa92:	460c      	mov	r4, r1
 800fa94:	469a      	mov	sl, r3
 800fa96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa9a:	d807      	bhi.n	800faac <_printf_i+0x28>
 800fa9c:	2f62      	cmp	r7, #98	; 0x62
 800fa9e:	d80a      	bhi.n	800fab6 <_printf_i+0x32>
 800faa0:	2f00      	cmp	r7, #0
 800faa2:	f000 80d8 	beq.w	800fc56 <_printf_i+0x1d2>
 800faa6:	2f58      	cmp	r7, #88	; 0x58
 800faa8:	f000 80a3 	beq.w	800fbf2 <_printf_i+0x16e>
 800faac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fab4:	e03a      	b.n	800fb2c <_printf_i+0xa8>
 800fab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800faba:	2b15      	cmp	r3, #21
 800fabc:	d8f6      	bhi.n	800faac <_printf_i+0x28>
 800fabe:	a101      	add	r1, pc, #4	; (adr r1, 800fac4 <_printf_i+0x40>)
 800fac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fac4:	0800fb1d 	.word	0x0800fb1d
 800fac8:	0800fb31 	.word	0x0800fb31
 800facc:	0800faad 	.word	0x0800faad
 800fad0:	0800faad 	.word	0x0800faad
 800fad4:	0800faad 	.word	0x0800faad
 800fad8:	0800faad 	.word	0x0800faad
 800fadc:	0800fb31 	.word	0x0800fb31
 800fae0:	0800faad 	.word	0x0800faad
 800fae4:	0800faad 	.word	0x0800faad
 800fae8:	0800faad 	.word	0x0800faad
 800faec:	0800faad 	.word	0x0800faad
 800faf0:	0800fc3d 	.word	0x0800fc3d
 800faf4:	0800fb61 	.word	0x0800fb61
 800faf8:	0800fc1f 	.word	0x0800fc1f
 800fafc:	0800faad 	.word	0x0800faad
 800fb00:	0800faad 	.word	0x0800faad
 800fb04:	0800fc5f 	.word	0x0800fc5f
 800fb08:	0800faad 	.word	0x0800faad
 800fb0c:	0800fb61 	.word	0x0800fb61
 800fb10:	0800faad 	.word	0x0800faad
 800fb14:	0800faad 	.word	0x0800faad
 800fb18:	0800fc27 	.word	0x0800fc27
 800fb1c:	682b      	ldr	r3, [r5, #0]
 800fb1e:	1d1a      	adds	r2, r3, #4
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	602a      	str	r2, [r5, #0]
 800fb24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e0a3      	b.n	800fc78 <_printf_i+0x1f4>
 800fb30:	6820      	ldr	r0, [r4, #0]
 800fb32:	6829      	ldr	r1, [r5, #0]
 800fb34:	0606      	lsls	r6, r0, #24
 800fb36:	f101 0304 	add.w	r3, r1, #4
 800fb3a:	d50a      	bpl.n	800fb52 <_printf_i+0xce>
 800fb3c:	680e      	ldr	r6, [r1, #0]
 800fb3e:	602b      	str	r3, [r5, #0]
 800fb40:	2e00      	cmp	r6, #0
 800fb42:	da03      	bge.n	800fb4c <_printf_i+0xc8>
 800fb44:	232d      	movs	r3, #45	; 0x2d
 800fb46:	4276      	negs	r6, r6
 800fb48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb4c:	485e      	ldr	r0, [pc, #376]	; (800fcc8 <_printf_i+0x244>)
 800fb4e:	230a      	movs	r3, #10
 800fb50:	e019      	b.n	800fb86 <_printf_i+0x102>
 800fb52:	680e      	ldr	r6, [r1, #0]
 800fb54:	602b      	str	r3, [r5, #0]
 800fb56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb5a:	bf18      	it	ne
 800fb5c:	b236      	sxthne	r6, r6
 800fb5e:	e7ef      	b.n	800fb40 <_printf_i+0xbc>
 800fb60:	682b      	ldr	r3, [r5, #0]
 800fb62:	6820      	ldr	r0, [r4, #0]
 800fb64:	1d19      	adds	r1, r3, #4
 800fb66:	6029      	str	r1, [r5, #0]
 800fb68:	0601      	lsls	r1, r0, #24
 800fb6a:	d501      	bpl.n	800fb70 <_printf_i+0xec>
 800fb6c:	681e      	ldr	r6, [r3, #0]
 800fb6e:	e002      	b.n	800fb76 <_printf_i+0xf2>
 800fb70:	0646      	lsls	r6, r0, #25
 800fb72:	d5fb      	bpl.n	800fb6c <_printf_i+0xe8>
 800fb74:	881e      	ldrh	r6, [r3, #0]
 800fb76:	4854      	ldr	r0, [pc, #336]	; (800fcc8 <_printf_i+0x244>)
 800fb78:	2f6f      	cmp	r7, #111	; 0x6f
 800fb7a:	bf0c      	ite	eq
 800fb7c:	2308      	moveq	r3, #8
 800fb7e:	230a      	movne	r3, #10
 800fb80:	2100      	movs	r1, #0
 800fb82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb86:	6865      	ldr	r5, [r4, #4]
 800fb88:	60a5      	str	r5, [r4, #8]
 800fb8a:	2d00      	cmp	r5, #0
 800fb8c:	bfa2      	ittt	ge
 800fb8e:	6821      	ldrge	r1, [r4, #0]
 800fb90:	f021 0104 	bicge.w	r1, r1, #4
 800fb94:	6021      	strge	r1, [r4, #0]
 800fb96:	b90e      	cbnz	r6, 800fb9c <_printf_i+0x118>
 800fb98:	2d00      	cmp	r5, #0
 800fb9a:	d04d      	beq.n	800fc38 <_printf_i+0x1b4>
 800fb9c:	4615      	mov	r5, r2
 800fb9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fba2:	fb03 6711 	mls	r7, r3, r1, r6
 800fba6:	5dc7      	ldrb	r7, [r0, r7]
 800fba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbac:	4637      	mov	r7, r6
 800fbae:	42bb      	cmp	r3, r7
 800fbb0:	460e      	mov	r6, r1
 800fbb2:	d9f4      	bls.n	800fb9e <_printf_i+0x11a>
 800fbb4:	2b08      	cmp	r3, #8
 800fbb6:	d10b      	bne.n	800fbd0 <_printf_i+0x14c>
 800fbb8:	6823      	ldr	r3, [r4, #0]
 800fbba:	07de      	lsls	r6, r3, #31
 800fbbc:	d508      	bpl.n	800fbd0 <_printf_i+0x14c>
 800fbbe:	6923      	ldr	r3, [r4, #16]
 800fbc0:	6861      	ldr	r1, [r4, #4]
 800fbc2:	4299      	cmp	r1, r3
 800fbc4:	bfde      	ittt	le
 800fbc6:	2330      	movle	r3, #48	; 0x30
 800fbc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbd0:	1b52      	subs	r2, r2, r5
 800fbd2:	6122      	str	r2, [r4, #16]
 800fbd4:	f8cd a000 	str.w	sl, [sp]
 800fbd8:	464b      	mov	r3, r9
 800fbda:	aa03      	add	r2, sp, #12
 800fbdc:	4621      	mov	r1, r4
 800fbde:	4640      	mov	r0, r8
 800fbe0:	f7ff fee2 	bl	800f9a8 <_printf_common>
 800fbe4:	3001      	adds	r0, #1
 800fbe6:	d14c      	bne.n	800fc82 <_printf_i+0x1fe>
 800fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbec:	b004      	add	sp, #16
 800fbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf2:	4835      	ldr	r0, [pc, #212]	; (800fcc8 <_printf_i+0x244>)
 800fbf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fbf8:	6829      	ldr	r1, [r5, #0]
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc00:	6029      	str	r1, [r5, #0]
 800fc02:	061d      	lsls	r5, r3, #24
 800fc04:	d514      	bpl.n	800fc30 <_printf_i+0x1ac>
 800fc06:	07df      	lsls	r7, r3, #31
 800fc08:	bf44      	itt	mi
 800fc0a:	f043 0320 	orrmi.w	r3, r3, #32
 800fc0e:	6023      	strmi	r3, [r4, #0]
 800fc10:	b91e      	cbnz	r6, 800fc1a <_printf_i+0x196>
 800fc12:	6823      	ldr	r3, [r4, #0]
 800fc14:	f023 0320 	bic.w	r3, r3, #32
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	2310      	movs	r3, #16
 800fc1c:	e7b0      	b.n	800fb80 <_printf_i+0xfc>
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	f043 0320 	orr.w	r3, r3, #32
 800fc24:	6023      	str	r3, [r4, #0]
 800fc26:	2378      	movs	r3, #120	; 0x78
 800fc28:	4828      	ldr	r0, [pc, #160]	; (800fccc <_printf_i+0x248>)
 800fc2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc2e:	e7e3      	b.n	800fbf8 <_printf_i+0x174>
 800fc30:	0659      	lsls	r1, r3, #25
 800fc32:	bf48      	it	mi
 800fc34:	b2b6      	uxthmi	r6, r6
 800fc36:	e7e6      	b.n	800fc06 <_printf_i+0x182>
 800fc38:	4615      	mov	r5, r2
 800fc3a:	e7bb      	b.n	800fbb4 <_printf_i+0x130>
 800fc3c:	682b      	ldr	r3, [r5, #0]
 800fc3e:	6826      	ldr	r6, [r4, #0]
 800fc40:	6961      	ldr	r1, [r4, #20]
 800fc42:	1d18      	adds	r0, r3, #4
 800fc44:	6028      	str	r0, [r5, #0]
 800fc46:	0635      	lsls	r5, r6, #24
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	d501      	bpl.n	800fc50 <_printf_i+0x1cc>
 800fc4c:	6019      	str	r1, [r3, #0]
 800fc4e:	e002      	b.n	800fc56 <_printf_i+0x1d2>
 800fc50:	0670      	lsls	r0, r6, #25
 800fc52:	d5fb      	bpl.n	800fc4c <_printf_i+0x1c8>
 800fc54:	8019      	strh	r1, [r3, #0]
 800fc56:	2300      	movs	r3, #0
 800fc58:	6123      	str	r3, [r4, #16]
 800fc5a:	4615      	mov	r5, r2
 800fc5c:	e7ba      	b.n	800fbd4 <_printf_i+0x150>
 800fc5e:	682b      	ldr	r3, [r5, #0]
 800fc60:	1d1a      	adds	r2, r3, #4
 800fc62:	602a      	str	r2, [r5, #0]
 800fc64:	681d      	ldr	r5, [r3, #0]
 800fc66:	6862      	ldr	r2, [r4, #4]
 800fc68:	2100      	movs	r1, #0
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f7f0 fae8 	bl	8000240 <memchr>
 800fc70:	b108      	cbz	r0, 800fc76 <_printf_i+0x1f2>
 800fc72:	1b40      	subs	r0, r0, r5
 800fc74:	6060      	str	r0, [r4, #4]
 800fc76:	6863      	ldr	r3, [r4, #4]
 800fc78:	6123      	str	r3, [r4, #16]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc80:	e7a8      	b.n	800fbd4 <_printf_i+0x150>
 800fc82:	6923      	ldr	r3, [r4, #16]
 800fc84:	462a      	mov	r2, r5
 800fc86:	4649      	mov	r1, r9
 800fc88:	4640      	mov	r0, r8
 800fc8a:	47d0      	blx	sl
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	d0ab      	beq.n	800fbe8 <_printf_i+0x164>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	079b      	lsls	r3, r3, #30
 800fc94:	d413      	bmi.n	800fcbe <_printf_i+0x23a>
 800fc96:	68e0      	ldr	r0, [r4, #12]
 800fc98:	9b03      	ldr	r3, [sp, #12]
 800fc9a:	4298      	cmp	r0, r3
 800fc9c:	bfb8      	it	lt
 800fc9e:	4618      	movlt	r0, r3
 800fca0:	e7a4      	b.n	800fbec <_printf_i+0x168>
 800fca2:	2301      	movs	r3, #1
 800fca4:	4632      	mov	r2, r6
 800fca6:	4649      	mov	r1, r9
 800fca8:	4640      	mov	r0, r8
 800fcaa:	47d0      	blx	sl
 800fcac:	3001      	adds	r0, #1
 800fcae:	d09b      	beq.n	800fbe8 <_printf_i+0x164>
 800fcb0:	3501      	adds	r5, #1
 800fcb2:	68e3      	ldr	r3, [r4, #12]
 800fcb4:	9903      	ldr	r1, [sp, #12]
 800fcb6:	1a5b      	subs	r3, r3, r1
 800fcb8:	42ab      	cmp	r3, r5
 800fcba:	dcf2      	bgt.n	800fca2 <_printf_i+0x21e>
 800fcbc:	e7eb      	b.n	800fc96 <_printf_i+0x212>
 800fcbe:	2500      	movs	r5, #0
 800fcc0:	f104 0619 	add.w	r6, r4, #25
 800fcc4:	e7f5      	b.n	800fcb2 <_printf_i+0x22e>
 800fcc6:	bf00      	nop
 800fcc8:	08028a66 	.word	0x08028a66
 800fccc:	08028a77 	.word	0x08028a77

0800fcd0 <_sbrk_r>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	4d06      	ldr	r5, [pc, #24]	; (800fcec <_sbrk_r+0x1c>)
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	4608      	mov	r0, r1
 800fcda:	602b      	str	r3, [r5, #0]
 800fcdc:	f7f2 fc5c 	bl	8002598 <_sbrk>
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	d102      	bne.n	800fcea <_sbrk_r+0x1a>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	b103      	cbz	r3, 800fcea <_sbrk_r+0x1a>
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	2000b370 	.word	0x2000b370

0800fcf0 <siprintf>:
 800fcf0:	b40e      	push	{r1, r2, r3}
 800fcf2:	b500      	push	{lr}
 800fcf4:	b09c      	sub	sp, #112	; 0x70
 800fcf6:	ab1d      	add	r3, sp, #116	; 0x74
 800fcf8:	9002      	str	r0, [sp, #8]
 800fcfa:	9006      	str	r0, [sp, #24]
 800fcfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd00:	4809      	ldr	r0, [pc, #36]	; (800fd28 <siprintf+0x38>)
 800fd02:	9107      	str	r1, [sp, #28]
 800fd04:	9104      	str	r1, [sp, #16]
 800fd06:	4909      	ldr	r1, [pc, #36]	; (800fd2c <siprintf+0x3c>)
 800fd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0c:	9105      	str	r1, [sp, #20]
 800fd0e:	6800      	ldr	r0, [r0, #0]
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	a902      	add	r1, sp, #8
 800fd14:	f001 fac2 	bl	801129c <_svfiprintf_r>
 800fd18:	9b02      	ldr	r3, [sp, #8]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	b01c      	add	sp, #112	; 0x70
 800fd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd24:	b003      	add	sp, #12
 800fd26:	4770      	bx	lr
 800fd28:	20000ef4 	.word	0x20000ef4
 800fd2c:	ffff0208 	.word	0xffff0208

0800fd30 <strcpy>:
 800fd30:	4603      	mov	r3, r0
 800fd32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd36:	f803 2b01 	strb.w	r2, [r3], #1
 800fd3a:	2a00      	cmp	r2, #0
 800fd3c:	d1f9      	bne.n	800fd32 <strcpy+0x2>
 800fd3e:	4770      	bx	lr

0800fd40 <quorem>:
 800fd40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd44:	6903      	ldr	r3, [r0, #16]
 800fd46:	690c      	ldr	r4, [r1, #16]
 800fd48:	42a3      	cmp	r3, r4
 800fd4a:	4607      	mov	r7, r0
 800fd4c:	f2c0 8081 	blt.w	800fe52 <quorem+0x112>
 800fd50:	3c01      	subs	r4, #1
 800fd52:	f101 0814 	add.w	r8, r1, #20
 800fd56:	f100 0514 	add.w	r5, r0, #20
 800fd5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd74:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd78:	d331      	bcc.n	800fdde <quorem+0x9e>
 800fd7a:	f04f 0e00 	mov.w	lr, #0
 800fd7e:	4640      	mov	r0, r8
 800fd80:	46ac      	mov	ip, r5
 800fd82:	46f2      	mov	sl, lr
 800fd84:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd88:	b293      	uxth	r3, r2
 800fd8a:	fb06 e303 	mla	r3, r6, r3, lr
 800fd8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	ebaa 0303 	sub.w	r3, sl, r3
 800fd98:	f8dc a000 	ldr.w	sl, [ip]
 800fd9c:	0c12      	lsrs	r2, r2, #16
 800fd9e:	fa13 f38a 	uxtah	r3, r3, sl
 800fda2:	fb06 e202 	mla	r2, r6, r2, lr
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	9b00      	ldr	r3, [sp, #0]
 800fdaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fdae:	b292      	uxth	r2, r2
 800fdb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fdb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdb8:	f8bd 3000 	ldrh.w	r3, [sp]
 800fdbc:	4581      	cmp	r9, r0
 800fdbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdc2:	f84c 3b04 	str.w	r3, [ip], #4
 800fdc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fdca:	d2db      	bcs.n	800fd84 <quorem+0x44>
 800fdcc:	f855 300b 	ldr.w	r3, [r5, fp]
 800fdd0:	b92b      	cbnz	r3, 800fdde <quorem+0x9e>
 800fdd2:	9b01      	ldr	r3, [sp, #4]
 800fdd4:	3b04      	subs	r3, #4
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	461a      	mov	r2, r3
 800fdda:	d32e      	bcc.n	800fe3a <quorem+0xfa>
 800fddc:	613c      	str	r4, [r7, #16]
 800fdde:	4638      	mov	r0, r7
 800fde0:	f001 f8ba 	bl	8010f58 <__mcmp>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	db24      	blt.n	800fe32 <quorem+0xf2>
 800fde8:	3601      	adds	r6, #1
 800fdea:	4628      	mov	r0, r5
 800fdec:	f04f 0c00 	mov.w	ip, #0
 800fdf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fdf4:	f8d0 e000 	ldr.w	lr, [r0]
 800fdf8:	b293      	uxth	r3, r2
 800fdfa:	ebac 0303 	sub.w	r3, ip, r3
 800fdfe:	0c12      	lsrs	r2, r2, #16
 800fe00:	fa13 f38e 	uxtah	r3, r3, lr
 800fe04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe12:	45c1      	cmp	r9, r8
 800fe14:	f840 3b04 	str.w	r3, [r0], #4
 800fe18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe1c:	d2e8      	bcs.n	800fdf0 <quorem+0xb0>
 800fe1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe26:	b922      	cbnz	r2, 800fe32 <quorem+0xf2>
 800fe28:	3b04      	subs	r3, #4
 800fe2a:	429d      	cmp	r5, r3
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	d30a      	bcc.n	800fe46 <quorem+0x106>
 800fe30:	613c      	str	r4, [r7, #16]
 800fe32:	4630      	mov	r0, r6
 800fe34:	b003      	add	sp, #12
 800fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3a:	6812      	ldr	r2, [r2, #0]
 800fe3c:	3b04      	subs	r3, #4
 800fe3e:	2a00      	cmp	r2, #0
 800fe40:	d1cc      	bne.n	800fddc <quorem+0x9c>
 800fe42:	3c01      	subs	r4, #1
 800fe44:	e7c7      	b.n	800fdd6 <quorem+0x96>
 800fe46:	6812      	ldr	r2, [r2, #0]
 800fe48:	3b04      	subs	r3, #4
 800fe4a:	2a00      	cmp	r2, #0
 800fe4c:	d1f0      	bne.n	800fe30 <quorem+0xf0>
 800fe4e:	3c01      	subs	r4, #1
 800fe50:	e7eb      	b.n	800fe2a <quorem+0xea>
 800fe52:	2000      	movs	r0, #0
 800fe54:	e7ee      	b.n	800fe34 <quorem+0xf4>
	...

0800fe58 <_dtoa_r>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	ed2d 8b04 	vpush	{d8-d9}
 800fe60:	ec57 6b10 	vmov	r6, r7, d0
 800fe64:	b093      	sub	sp, #76	; 0x4c
 800fe66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe6c:	9106      	str	r1, [sp, #24]
 800fe6e:	ee10 aa10 	vmov	sl, s0
 800fe72:	4604      	mov	r4, r0
 800fe74:	9209      	str	r2, [sp, #36]	; 0x24
 800fe76:	930c      	str	r3, [sp, #48]	; 0x30
 800fe78:	46bb      	mov	fp, r7
 800fe7a:	b975      	cbnz	r5, 800fe9a <_dtoa_r+0x42>
 800fe7c:	2010      	movs	r0, #16
 800fe7e:	f7ff f9bf 	bl	800f200 <malloc>
 800fe82:	4602      	mov	r2, r0
 800fe84:	6260      	str	r0, [r4, #36]	; 0x24
 800fe86:	b920      	cbnz	r0, 800fe92 <_dtoa_r+0x3a>
 800fe88:	4ba7      	ldr	r3, [pc, #668]	; (8010128 <_dtoa_r+0x2d0>)
 800fe8a:	21ea      	movs	r1, #234	; 0xea
 800fe8c:	48a7      	ldr	r0, [pc, #668]	; (801012c <_dtoa_r+0x2d4>)
 800fe8e:	f001 fb05 	bl	801149c <__assert_func>
 800fe92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe96:	6005      	str	r5, [r0, #0]
 800fe98:	60c5      	str	r5, [r0, #12]
 800fe9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe9c:	6819      	ldr	r1, [r3, #0]
 800fe9e:	b151      	cbz	r1, 800feb6 <_dtoa_r+0x5e>
 800fea0:	685a      	ldr	r2, [r3, #4]
 800fea2:	604a      	str	r2, [r1, #4]
 800fea4:	2301      	movs	r3, #1
 800fea6:	4093      	lsls	r3, r2
 800fea8:	608b      	str	r3, [r1, #8]
 800feaa:	4620      	mov	r0, r4
 800feac:	f000 fe12 	bl	8010ad4 <_Bfree>
 800feb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feb2:	2200      	movs	r2, #0
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	1e3b      	subs	r3, r7, #0
 800feb8:	bfaa      	itet	ge
 800feba:	2300      	movge	r3, #0
 800febc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fec0:	f8c8 3000 	strge.w	r3, [r8]
 800fec4:	4b9a      	ldr	r3, [pc, #616]	; (8010130 <_dtoa_r+0x2d8>)
 800fec6:	bfbc      	itt	lt
 800fec8:	2201      	movlt	r2, #1
 800feca:	f8c8 2000 	strlt.w	r2, [r8]
 800fece:	ea33 030b 	bics.w	r3, r3, fp
 800fed2:	d11b      	bne.n	800ff0c <_dtoa_r+0xb4>
 800fed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fed6:	f242 730f 	movw	r3, #9999	; 0x270f
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fee0:	4333      	orrs	r3, r6
 800fee2:	f000 8592 	beq.w	8010a0a <_dtoa_r+0xbb2>
 800fee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fee8:	b963      	cbnz	r3, 800ff04 <_dtoa_r+0xac>
 800feea:	4b92      	ldr	r3, [pc, #584]	; (8010134 <_dtoa_r+0x2dc>)
 800feec:	e022      	b.n	800ff34 <_dtoa_r+0xdc>
 800feee:	4b92      	ldr	r3, [pc, #584]	; (8010138 <_dtoa_r+0x2e0>)
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	3308      	adds	r3, #8
 800fef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fef6:	6013      	str	r3, [r2, #0]
 800fef8:	9801      	ldr	r0, [sp, #4]
 800fefa:	b013      	add	sp, #76	; 0x4c
 800fefc:	ecbd 8b04 	vpop	{d8-d9}
 800ff00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff04:	4b8b      	ldr	r3, [pc, #556]	; (8010134 <_dtoa_r+0x2dc>)
 800ff06:	9301      	str	r3, [sp, #4]
 800ff08:	3303      	adds	r3, #3
 800ff0a:	e7f3      	b.n	800fef4 <_dtoa_r+0x9c>
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	2300      	movs	r3, #0
 800ff10:	4650      	mov	r0, sl
 800ff12:	4659      	mov	r1, fp
 800ff14:	f7f0 fe08 	bl	8000b28 <__aeabi_dcmpeq>
 800ff18:	ec4b ab19 	vmov	d9, sl, fp
 800ff1c:	4680      	mov	r8, r0
 800ff1e:	b158      	cbz	r0, 800ff38 <_dtoa_r+0xe0>
 800ff20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff22:	2301      	movs	r3, #1
 800ff24:	6013      	str	r3, [r2, #0]
 800ff26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 856b 	beq.w	8010a04 <_dtoa_r+0xbac>
 800ff2e:	4883      	ldr	r0, [pc, #524]	; (801013c <_dtoa_r+0x2e4>)
 800ff30:	6018      	str	r0, [r3, #0]
 800ff32:	1e43      	subs	r3, r0, #1
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	e7df      	b.n	800fef8 <_dtoa_r+0xa0>
 800ff38:	ec4b ab10 	vmov	d0, sl, fp
 800ff3c:	aa10      	add	r2, sp, #64	; 0x40
 800ff3e:	a911      	add	r1, sp, #68	; 0x44
 800ff40:	4620      	mov	r0, r4
 800ff42:	f001 f8af 	bl	80110a4 <__d2b>
 800ff46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ff4a:	ee08 0a10 	vmov	s16, r0
 800ff4e:	2d00      	cmp	r5, #0
 800ff50:	f000 8084 	beq.w	801005c <_dtoa_r+0x204>
 800ff54:	ee19 3a90 	vmov	r3, s19
 800ff58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff60:	4656      	mov	r6, sl
 800ff62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff6e:	4b74      	ldr	r3, [pc, #464]	; (8010140 <_dtoa_r+0x2e8>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	4630      	mov	r0, r6
 800ff74:	4639      	mov	r1, r7
 800ff76:	f7f0 f9b7 	bl	80002e8 <__aeabi_dsub>
 800ff7a:	a365      	add	r3, pc, #404	; (adr r3, 8010110 <_dtoa_r+0x2b8>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	f7f0 fb6a 	bl	8000658 <__aeabi_dmul>
 800ff84:	a364      	add	r3, pc, #400	; (adr r3, 8010118 <_dtoa_r+0x2c0>)
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	f7f0 f9af 	bl	80002ec <__adddf3>
 800ff8e:	4606      	mov	r6, r0
 800ff90:	4628      	mov	r0, r5
 800ff92:	460f      	mov	r7, r1
 800ff94:	f7f0 faf6 	bl	8000584 <__aeabi_i2d>
 800ff98:	a361      	add	r3, pc, #388	; (adr r3, 8010120 <_dtoa_r+0x2c8>)
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	f7f0 fb5b 	bl	8000658 <__aeabi_dmul>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	4639      	mov	r1, r7
 800ffaa:	f7f0 f99f 	bl	80002ec <__adddf3>
 800ffae:	4606      	mov	r6, r0
 800ffb0:	460f      	mov	r7, r1
 800ffb2:	f7f0 fe01 	bl	8000bb8 <__aeabi_d2iz>
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	9000      	str	r0, [sp, #0]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	4639      	mov	r1, r7
 800ffc0:	f7f0 fdbc 	bl	8000b3c <__aeabi_dcmplt>
 800ffc4:	b150      	cbz	r0, 800ffdc <_dtoa_r+0x184>
 800ffc6:	9800      	ldr	r0, [sp, #0]
 800ffc8:	f7f0 fadc 	bl	8000584 <__aeabi_i2d>
 800ffcc:	4632      	mov	r2, r6
 800ffce:	463b      	mov	r3, r7
 800ffd0:	f7f0 fdaa 	bl	8000b28 <__aeabi_dcmpeq>
 800ffd4:	b910      	cbnz	r0, 800ffdc <_dtoa_r+0x184>
 800ffd6:	9b00      	ldr	r3, [sp, #0]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	9b00      	ldr	r3, [sp, #0]
 800ffde:	2b16      	cmp	r3, #22
 800ffe0:	d85a      	bhi.n	8010098 <_dtoa_r+0x240>
 800ffe2:	9a00      	ldr	r2, [sp, #0]
 800ffe4:	4b57      	ldr	r3, [pc, #348]	; (8010144 <_dtoa_r+0x2ec>)
 800ffe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffee:	ec51 0b19 	vmov	r0, r1, d9
 800fff2:	f7f0 fda3 	bl	8000b3c <__aeabi_dcmplt>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d050      	beq.n	801009c <_dtoa_r+0x244>
 800fffa:	9b00      	ldr	r3, [sp, #0]
 800fffc:	3b01      	subs	r3, #1
 800fffe:	9300      	str	r3, [sp, #0]
 8010000:	2300      	movs	r3, #0
 8010002:	930b      	str	r3, [sp, #44]	; 0x2c
 8010004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010006:	1b5d      	subs	r5, r3, r5
 8010008:	1e6b      	subs	r3, r5, #1
 801000a:	9305      	str	r3, [sp, #20]
 801000c:	bf45      	ittet	mi
 801000e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010012:	9304      	strmi	r3, [sp, #16]
 8010014:	2300      	movpl	r3, #0
 8010016:	2300      	movmi	r3, #0
 8010018:	bf4c      	ite	mi
 801001a:	9305      	strmi	r3, [sp, #20]
 801001c:	9304      	strpl	r3, [sp, #16]
 801001e:	9b00      	ldr	r3, [sp, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	db3d      	blt.n	80100a0 <_dtoa_r+0x248>
 8010024:	9b05      	ldr	r3, [sp, #20]
 8010026:	9a00      	ldr	r2, [sp, #0]
 8010028:	920a      	str	r2, [sp, #40]	; 0x28
 801002a:	4413      	add	r3, r2
 801002c:	9305      	str	r3, [sp, #20]
 801002e:	2300      	movs	r3, #0
 8010030:	9307      	str	r3, [sp, #28]
 8010032:	9b06      	ldr	r3, [sp, #24]
 8010034:	2b09      	cmp	r3, #9
 8010036:	f200 8089 	bhi.w	801014c <_dtoa_r+0x2f4>
 801003a:	2b05      	cmp	r3, #5
 801003c:	bfc4      	itt	gt
 801003e:	3b04      	subgt	r3, #4
 8010040:	9306      	strgt	r3, [sp, #24]
 8010042:	9b06      	ldr	r3, [sp, #24]
 8010044:	f1a3 0302 	sub.w	r3, r3, #2
 8010048:	bfcc      	ite	gt
 801004a:	2500      	movgt	r5, #0
 801004c:	2501      	movle	r5, #1
 801004e:	2b03      	cmp	r3, #3
 8010050:	f200 8087 	bhi.w	8010162 <_dtoa_r+0x30a>
 8010054:	e8df f003 	tbb	[pc, r3]
 8010058:	59383a2d 	.word	0x59383a2d
 801005c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010060:	441d      	add	r5, r3
 8010062:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010066:	2b20      	cmp	r3, #32
 8010068:	bfc1      	itttt	gt
 801006a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801006e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010072:	fa0b f303 	lslgt.w	r3, fp, r3
 8010076:	fa26 f000 	lsrgt.w	r0, r6, r0
 801007a:	bfda      	itte	le
 801007c:	f1c3 0320 	rsble	r3, r3, #32
 8010080:	fa06 f003 	lslle.w	r0, r6, r3
 8010084:	4318      	orrgt	r0, r3
 8010086:	f7f0 fa6d 	bl	8000564 <__aeabi_ui2d>
 801008a:	2301      	movs	r3, #1
 801008c:	4606      	mov	r6, r0
 801008e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010092:	3d01      	subs	r5, #1
 8010094:	930e      	str	r3, [sp, #56]	; 0x38
 8010096:	e76a      	b.n	800ff6e <_dtoa_r+0x116>
 8010098:	2301      	movs	r3, #1
 801009a:	e7b2      	b.n	8010002 <_dtoa_r+0x1aa>
 801009c:	900b      	str	r0, [sp, #44]	; 0x2c
 801009e:	e7b1      	b.n	8010004 <_dtoa_r+0x1ac>
 80100a0:	9b04      	ldr	r3, [sp, #16]
 80100a2:	9a00      	ldr	r2, [sp, #0]
 80100a4:	1a9b      	subs	r3, r3, r2
 80100a6:	9304      	str	r3, [sp, #16]
 80100a8:	4253      	negs	r3, r2
 80100aa:	9307      	str	r3, [sp, #28]
 80100ac:	2300      	movs	r3, #0
 80100ae:	930a      	str	r3, [sp, #40]	; 0x28
 80100b0:	e7bf      	b.n	8010032 <_dtoa_r+0x1da>
 80100b2:	2300      	movs	r3, #0
 80100b4:	9308      	str	r3, [sp, #32]
 80100b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dc55      	bgt.n	8010168 <_dtoa_r+0x310>
 80100bc:	2301      	movs	r3, #1
 80100be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80100c2:	461a      	mov	r2, r3
 80100c4:	9209      	str	r2, [sp, #36]	; 0x24
 80100c6:	e00c      	b.n	80100e2 <_dtoa_r+0x28a>
 80100c8:	2301      	movs	r3, #1
 80100ca:	e7f3      	b.n	80100b4 <_dtoa_r+0x25c>
 80100cc:	2300      	movs	r3, #0
 80100ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100d0:	9308      	str	r3, [sp, #32]
 80100d2:	9b00      	ldr	r3, [sp, #0]
 80100d4:	4413      	add	r3, r2
 80100d6:	9302      	str	r3, [sp, #8]
 80100d8:	3301      	adds	r3, #1
 80100da:	2b01      	cmp	r3, #1
 80100dc:	9303      	str	r3, [sp, #12]
 80100de:	bfb8      	it	lt
 80100e0:	2301      	movlt	r3, #1
 80100e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80100e4:	2200      	movs	r2, #0
 80100e6:	6042      	str	r2, [r0, #4]
 80100e8:	2204      	movs	r2, #4
 80100ea:	f102 0614 	add.w	r6, r2, #20
 80100ee:	429e      	cmp	r6, r3
 80100f0:	6841      	ldr	r1, [r0, #4]
 80100f2:	d93d      	bls.n	8010170 <_dtoa_r+0x318>
 80100f4:	4620      	mov	r0, r4
 80100f6:	f000 fcad 	bl	8010a54 <_Balloc>
 80100fa:	9001      	str	r0, [sp, #4]
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d13b      	bne.n	8010178 <_dtoa_r+0x320>
 8010100:	4b11      	ldr	r3, [pc, #68]	; (8010148 <_dtoa_r+0x2f0>)
 8010102:	4602      	mov	r2, r0
 8010104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010108:	e6c0      	b.n	800fe8c <_dtoa_r+0x34>
 801010a:	2301      	movs	r3, #1
 801010c:	e7df      	b.n	80100ce <_dtoa_r+0x276>
 801010e:	bf00      	nop
 8010110:	636f4361 	.word	0x636f4361
 8010114:	3fd287a7 	.word	0x3fd287a7
 8010118:	8b60c8b3 	.word	0x8b60c8b3
 801011c:	3fc68a28 	.word	0x3fc68a28
 8010120:	509f79fb 	.word	0x509f79fb
 8010124:	3fd34413 	.word	0x3fd34413
 8010128:	08028a95 	.word	0x08028a95
 801012c:	08028aac 	.word	0x08028aac
 8010130:	7ff00000 	.word	0x7ff00000
 8010134:	08028a91 	.word	0x08028a91
 8010138:	08028a88 	.word	0x08028a88
 801013c:	08028a65 	.word	0x08028a65
 8010140:	3ff80000 	.word	0x3ff80000
 8010144:	08028ba0 	.word	0x08028ba0
 8010148:	08028b07 	.word	0x08028b07
 801014c:	2501      	movs	r5, #1
 801014e:	2300      	movs	r3, #0
 8010150:	9306      	str	r3, [sp, #24]
 8010152:	9508      	str	r5, [sp, #32]
 8010154:	f04f 33ff 	mov.w	r3, #4294967295
 8010158:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801015c:	2200      	movs	r2, #0
 801015e:	2312      	movs	r3, #18
 8010160:	e7b0      	b.n	80100c4 <_dtoa_r+0x26c>
 8010162:	2301      	movs	r3, #1
 8010164:	9308      	str	r3, [sp, #32]
 8010166:	e7f5      	b.n	8010154 <_dtoa_r+0x2fc>
 8010168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801016a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801016e:	e7b8      	b.n	80100e2 <_dtoa_r+0x28a>
 8010170:	3101      	adds	r1, #1
 8010172:	6041      	str	r1, [r0, #4]
 8010174:	0052      	lsls	r2, r2, #1
 8010176:	e7b8      	b.n	80100ea <_dtoa_r+0x292>
 8010178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801017a:	9a01      	ldr	r2, [sp, #4]
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	2b0e      	cmp	r3, #14
 8010182:	f200 809d 	bhi.w	80102c0 <_dtoa_r+0x468>
 8010186:	2d00      	cmp	r5, #0
 8010188:	f000 809a 	beq.w	80102c0 <_dtoa_r+0x468>
 801018c:	9b00      	ldr	r3, [sp, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	dd32      	ble.n	80101f8 <_dtoa_r+0x3a0>
 8010192:	4ab7      	ldr	r2, [pc, #732]	; (8010470 <_dtoa_r+0x618>)
 8010194:	f003 030f 	and.w	r3, r3, #15
 8010198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801019c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	05d8      	lsls	r0, r3, #23
 80101a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80101a8:	d516      	bpl.n	80101d8 <_dtoa_r+0x380>
 80101aa:	4bb2      	ldr	r3, [pc, #712]	; (8010474 <_dtoa_r+0x61c>)
 80101ac:	ec51 0b19 	vmov	r0, r1, d9
 80101b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101b4:	f7f0 fb7a 	bl	80008ac <__aeabi_ddiv>
 80101b8:	f007 070f 	and.w	r7, r7, #15
 80101bc:	4682      	mov	sl, r0
 80101be:	468b      	mov	fp, r1
 80101c0:	2503      	movs	r5, #3
 80101c2:	4eac      	ldr	r6, [pc, #688]	; (8010474 <_dtoa_r+0x61c>)
 80101c4:	b957      	cbnz	r7, 80101dc <_dtoa_r+0x384>
 80101c6:	4642      	mov	r2, r8
 80101c8:	464b      	mov	r3, r9
 80101ca:	4650      	mov	r0, sl
 80101cc:	4659      	mov	r1, fp
 80101ce:	f7f0 fb6d 	bl	80008ac <__aeabi_ddiv>
 80101d2:	4682      	mov	sl, r0
 80101d4:	468b      	mov	fp, r1
 80101d6:	e028      	b.n	801022a <_dtoa_r+0x3d2>
 80101d8:	2502      	movs	r5, #2
 80101da:	e7f2      	b.n	80101c2 <_dtoa_r+0x36a>
 80101dc:	07f9      	lsls	r1, r7, #31
 80101de:	d508      	bpl.n	80101f2 <_dtoa_r+0x39a>
 80101e0:	4640      	mov	r0, r8
 80101e2:	4649      	mov	r1, r9
 80101e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101e8:	f7f0 fa36 	bl	8000658 <__aeabi_dmul>
 80101ec:	3501      	adds	r5, #1
 80101ee:	4680      	mov	r8, r0
 80101f0:	4689      	mov	r9, r1
 80101f2:	107f      	asrs	r7, r7, #1
 80101f4:	3608      	adds	r6, #8
 80101f6:	e7e5      	b.n	80101c4 <_dtoa_r+0x36c>
 80101f8:	f000 809b 	beq.w	8010332 <_dtoa_r+0x4da>
 80101fc:	9b00      	ldr	r3, [sp, #0]
 80101fe:	4f9d      	ldr	r7, [pc, #628]	; (8010474 <_dtoa_r+0x61c>)
 8010200:	425e      	negs	r6, r3
 8010202:	4b9b      	ldr	r3, [pc, #620]	; (8010470 <_dtoa_r+0x618>)
 8010204:	f006 020f 	and.w	r2, r6, #15
 8010208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	ec51 0b19 	vmov	r0, r1, d9
 8010214:	f7f0 fa20 	bl	8000658 <__aeabi_dmul>
 8010218:	1136      	asrs	r6, r6, #4
 801021a:	4682      	mov	sl, r0
 801021c:	468b      	mov	fp, r1
 801021e:	2300      	movs	r3, #0
 8010220:	2502      	movs	r5, #2
 8010222:	2e00      	cmp	r6, #0
 8010224:	d17a      	bne.n	801031c <_dtoa_r+0x4c4>
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1d3      	bne.n	80101d2 <_dtoa_r+0x37a>
 801022a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 8082 	beq.w	8010336 <_dtoa_r+0x4de>
 8010232:	4b91      	ldr	r3, [pc, #580]	; (8010478 <_dtoa_r+0x620>)
 8010234:	2200      	movs	r2, #0
 8010236:	4650      	mov	r0, sl
 8010238:	4659      	mov	r1, fp
 801023a:	f7f0 fc7f 	bl	8000b3c <__aeabi_dcmplt>
 801023e:	2800      	cmp	r0, #0
 8010240:	d079      	beq.n	8010336 <_dtoa_r+0x4de>
 8010242:	9b03      	ldr	r3, [sp, #12]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d076      	beq.n	8010336 <_dtoa_r+0x4de>
 8010248:	9b02      	ldr	r3, [sp, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	dd36      	ble.n	80102bc <_dtoa_r+0x464>
 801024e:	9b00      	ldr	r3, [sp, #0]
 8010250:	4650      	mov	r0, sl
 8010252:	4659      	mov	r1, fp
 8010254:	1e5f      	subs	r7, r3, #1
 8010256:	2200      	movs	r2, #0
 8010258:	4b88      	ldr	r3, [pc, #544]	; (801047c <_dtoa_r+0x624>)
 801025a:	f7f0 f9fd 	bl	8000658 <__aeabi_dmul>
 801025e:	9e02      	ldr	r6, [sp, #8]
 8010260:	4682      	mov	sl, r0
 8010262:	468b      	mov	fp, r1
 8010264:	3501      	adds	r5, #1
 8010266:	4628      	mov	r0, r5
 8010268:	f7f0 f98c 	bl	8000584 <__aeabi_i2d>
 801026c:	4652      	mov	r2, sl
 801026e:	465b      	mov	r3, fp
 8010270:	f7f0 f9f2 	bl	8000658 <__aeabi_dmul>
 8010274:	4b82      	ldr	r3, [pc, #520]	; (8010480 <_dtoa_r+0x628>)
 8010276:	2200      	movs	r2, #0
 8010278:	f7f0 f838 	bl	80002ec <__adddf3>
 801027c:	46d0      	mov	r8, sl
 801027e:	46d9      	mov	r9, fp
 8010280:	4682      	mov	sl, r0
 8010282:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010286:	2e00      	cmp	r6, #0
 8010288:	d158      	bne.n	801033c <_dtoa_r+0x4e4>
 801028a:	4b7e      	ldr	r3, [pc, #504]	; (8010484 <_dtoa_r+0x62c>)
 801028c:	2200      	movs	r2, #0
 801028e:	4640      	mov	r0, r8
 8010290:	4649      	mov	r1, r9
 8010292:	f7f0 f829 	bl	80002e8 <__aeabi_dsub>
 8010296:	4652      	mov	r2, sl
 8010298:	465b      	mov	r3, fp
 801029a:	4680      	mov	r8, r0
 801029c:	4689      	mov	r9, r1
 801029e:	f7f0 fc6b 	bl	8000b78 <__aeabi_dcmpgt>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	f040 8295 	bne.w	80107d2 <_dtoa_r+0x97a>
 80102a8:	4652      	mov	r2, sl
 80102aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80102ae:	4640      	mov	r0, r8
 80102b0:	4649      	mov	r1, r9
 80102b2:	f7f0 fc43 	bl	8000b3c <__aeabi_dcmplt>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f040 8289 	bne.w	80107ce <_dtoa_r+0x976>
 80102bc:	ec5b ab19 	vmov	sl, fp, d9
 80102c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f2c0 8148 	blt.w	8010558 <_dtoa_r+0x700>
 80102c8:	9a00      	ldr	r2, [sp, #0]
 80102ca:	2a0e      	cmp	r2, #14
 80102cc:	f300 8144 	bgt.w	8010558 <_dtoa_r+0x700>
 80102d0:	4b67      	ldr	r3, [pc, #412]	; (8010470 <_dtoa_r+0x618>)
 80102d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f280 80d5 	bge.w	801048c <_dtoa_r+0x634>
 80102e2:	9b03      	ldr	r3, [sp, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f300 80d1 	bgt.w	801048c <_dtoa_r+0x634>
 80102ea:	f040 826f 	bne.w	80107cc <_dtoa_r+0x974>
 80102ee:	4b65      	ldr	r3, [pc, #404]	; (8010484 <_dtoa_r+0x62c>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	4640      	mov	r0, r8
 80102f4:	4649      	mov	r1, r9
 80102f6:	f7f0 f9af 	bl	8000658 <__aeabi_dmul>
 80102fa:	4652      	mov	r2, sl
 80102fc:	465b      	mov	r3, fp
 80102fe:	f7f0 fc31 	bl	8000b64 <__aeabi_dcmpge>
 8010302:	9e03      	ldr	r6, [sp, #12]
 8010304:	4637      	mov	r7, r6
 8010306:	2800      	cmp	r0, #0
 8010308:	f040 8245 	bne.w	8010796 <_dtoa_r+0x93e>
 801030c:	9d01      	ldr	r5, [sp, #4]
 801030e:	2331      	movs	r3, #49	; 0x31
 8010310:	f805 3b01 	strb.w	r3, [r5], #1
 8010314:	9b00      	ldr	r3, [sp, #0]
 8010316:	3301      	adds	r3, #1
 8010318:	9300      	str	r3, [sp, #0]
 801031a:	e240      	b.n	801079e <_dtoa_r+0x946>
 801031c:	07f2      	lsls	r2, r6, #31
 801031e:	d505      	bpl.n	801032c <_dtoa_r+0x4d4>
 8010320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010324:	f7f0 f998 	bl	8000658 <__aeabi_dmul>
 8010328:	3501      	adds	r5, #1
 801032a:	2301      	movs	r3, #1
 801032c:	1076      	asrs	r6, r6, #1
 801032e:	3708      	adds	r7, #8
 8010330:	e777      	b.n	8010222 <_dtoa_r+0x3ca>
 8010332:	2502      	movs	r5, #2
 8010334:	e779      	b.n	801022a <_dtoa_r+0x3d2>
 8010336:	9f00      	ldr	r7, [sp, #0]
 8010338:	9e03      	ldr	r6, [sp, #12]
 801033a:	e794      	b.n	8010266 <_dtoa_r+0x40e>
 801033c:	9901      	ldr	r1, [sp, #4]
 801033e:	4b4c      	ldr	r3, [pc, #304]	; (8010470 <_dtoa_r+0x618>)
 8010340:	4431      	add	r1, r6
 8010342:	910d      	str	r1, [sp, #52]	; 0x34
 8010344:	9908      	ldr	r1, [sp, #32]
 8010346:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801034a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801034e:	2900      	cmp	r1, #0
 8010350:	d043      	beq.n	80103da <_dtoa_r+0x582>
 8010352:	494d      	ldr	r1, [pc, #308]	; (8010488 <_dtoa_r+0x630>)
 8010354:	2000      	movs	r0, #0
 8010356:	f7f0 faa9 	bl	80008ac <__aeabi_ddiv>
 801035a:	4652      	mov	r2, sl
 801035c:	465b      	mov	r3, fp
 801035e:	f7ef ffc3 	bl	80002e8 <__aeabi_dsub>
 8010362:	9d01      	ldr	r5, [sp, #4]
 8010364:	4682      	mov	sl, r0
 8010366:	468b      	mov	fp, r1
 8010368:	4649      	mov	r1, r9
 801036a:	4640      	mov	r0, r8
 801036c:	f7f0 fc24 	bl	8000bb8 <__aeabi_d2iz>
 8010370:	4606      	mov	r6, r0
 8010372:	f7f0 f907 	bl	8000584 <__aeabi_i2d>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4640      	mov	r0, r8
 801037c:	4649      	mov	r1, r9
 801037e:	f7ef ffb3 	bl	80002e8 <__aeabi_dsub>
 8010382:	3630      	adds	r6, #48	; 0x30
 8010384:	f805 6b01 	strb.w	r6, [r5], #1
 8010388:	4652      	mov	r2, sl
 801038a:	465b      	mov	r3, fp
 801038c:	4680      	mov	r8, r0
 801038e:	4689      	mov	r9, r1
 8010390:	f7f0 fbd4 	bl	8000b3c <__aeabi_dcmplt>
 8010394:	2800      	cmp	r0, #0
 8010396:	d163      	bne.n	8010460 <_dtoa_r+0x608>
 8010398:	4642      	mov	r2, r8
 801039a:	464b      	mov	r3, r9
 801039c:	4936      	ldr	r1, [pc, #216]	; (8010478 <_dtoa_r+0x620>)
 801039e:	2000      	movs	r0, #0
 80103a0:	f7ef ffa2 	bl	80002e8 <__aeabi_dsub>
 80103a4:	4652      	mov	r2, sl
 80103a6:	465b      	mov	r3, fp
 80103a8:	f7f0 fbc8 	bl	8000b3c <__aeabi_dcmplt>
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f040 80b5 	bne.w	801051c <_dtoa_r+0x6c4>
 80103b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103b4:	429d      	cmp	r5, r3
 80103b6:	d081      	beq.n	80102bc <_dtoa_r+0x464>
 80103b8:	4b30      	ldr	r3, [pc, #192]	; (801047c <_dtoa_r+0x624>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	4650      	mov	r0, sl
 80103be:	4659      	mov	r1, fp
 80103c0:	f7f0 f94a 	bl	8000658 <__aeabi_dmul>
 80103c4:	4b2d      	ldr	r3, [pc, #180]	; (801047c <_dtoa_r+0x624>)
 80103c6:	4682      	mov	sl, r0
 80103c8:	468b      	mov	fp, r1
 80103ca:	4640      	mov	r0, r8
 80103cc:	4649      	mov	r1, r9
 80103ce:	2200      	movs	r2, #0
 80103d0:	f7f0 f942 	bl	8000658 <__aeabi_dmul>
 80103d4:	4680      	mov	r8, r0
 80103d6:	4689      	mov	r9, r1
 80103d8:	e7c6      	b.n	8010368 <_dtoa_r+0x510>
 80103da:	4650      	mov	r0, sl
 80103dc:	4659      	mov	r1, fp
 80103de:	f7f0 f93b 	bl	8000658 <__aeabi_dmul>
 80103e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103e4:	9d01      	ldr	r5, [sp, #4]
 80103e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80103e8:	4682      	mov	sl, r0
 80103ea:	468b      	mov	fp, r1
 80103ec:	4649      	mov	r1, r9
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7f0 fbe2 	bl	8000bb8 <__aeabi_d2iz>
 80103f4:	4606      	mov	r6, r0
 80103f6:	f7f0 f8c5 	bl	8000584 <__aeabi_i2d>
 80103fa:	3630      	adds	r6, #48	; 0x30
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	4640      	mov	r0, r8
 8010402:	4649      	mov	r1, r9
 8010404:	f7ef ff70 	bl	80002e8 <__aeabi_dsub>
 8010408:	f805 6b01 	strb.w	r6, [r5], #1
 801040c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801040e:	429d      	cmp	r5, r3
 8010410:	4680      	mov	r8, r0
 8010412:	4689      	mov	r9, r1
 8010414:	f04f 0200 	mov.w	r2, #0
 8010418:	d124      	bne.n	8010464 <_dtoa_r+0x60c>
 801041a:	4b1b      	ldr	r3, [pc, #108]	; (8010488 <_dtoa_r+0x630>)
 801041c:	4650      	mov	r0, sl
 801041e:	4659      	mov	r1, fp
 8010420:	f7ef ff64 	bl	80002ec <__adddf3>
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	4640      	mov	r0, r8
 801042a:	4649      	mov	r1, r9
 801042c:	f7f0 fba4 	bl	8000b78 <__aeabi_dcmpgt>
 8010430:	2800      	cmp	r0, #0
 8010432:	d173      	bne.n	801051c <_dtoa_r+0x6c4>
 8010434:	4652      	mov	r2, sl
 8010436:	465b      	mov	r3, fp
 8010438:	4913      	ldr	r1, [pc, #76]	; (8010488 <_dtoa_r+0x630>)
 801043a:	2000      	movs	r0, #0
 801043c:	f7ef ff54 	bl	80002e8 <__aeabi_dsub>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	4640      	mov	r0, r8
 8010446:	4649      	mov	r1, r9
 8010448:	f7f0 fb78 	bl	8000b3c <__aeabi_dcmplt>
 801044c:	2800      	cmp	r0, #0
 801044e:	f43f af35 	beq.w	80102bc <_dtoa_r+0x464>
 8010452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010454:	1e6b      	subs	r3, r5, #1
 8010456:	930f      	str	r3, [sp, #60]	; 0x3c
 8010458:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801045c:	2b30      	cmp	r3, #48	; 0x30
 801045e:	d0f8      	beq.n	8010452 <_dtoa_r+0x5fa>
 8010460:	9700      	str	r7, [sp, #0]
 8010462:	e049      	b.n	80104f8 <_dtoa_r+0x6a0>
 8010464:	4b05      	ldr	r3, [pc, #20]	; (801047c <_dtoa_r+0x624>)
 8010466:	f7f0 f8f7 	bl	8000658 <__aeabi_dmul>
 801046a:	4680      	mov	r8, r0
 801046c:	4689      	mov	r9, r1
 801046e:	e7bd      	b.n	80103ec <_dtoa_r+0x594>
 8010470:	08028ba0 	.word	0x08028ba0
 8010474:	08028b78 	.word	0x08028b78
 8010478:	3ff00000 	.word	0x3ff00000
 801047c:	40240000 	.word	0x40240000
 8010480:	401c0000 	.word	0x401c0000
 8010484:	40140000 	.word	0x40140000
 8010488:	3fe00000 	.word	0x3fe00000
 801048c:	9d01      	ldr	r5, [sp, #4]
 801048e:	4656      	mov	r6, sl
 8010490:	465f      	mov	r7, fp
 8010492:	4642      	mov	r2, r8
 8010494:	464b      	mov	r3, r9
 8010496:	4630      	mov	r0, r6
 8010498:	4639      	mov	r1, r7
 801049a:	f7f0 fa07 	bl	80008ac <__aeabi_ddiv>
 801049e:	f7f0 fb8b 	bl	8000bb8 <__aeabi_d2iz>
 80104a2:	4682      	mov	sl, r0
 80104a4:	f7f0 f86e 	bl	8000584 <__aeabi_i2d>
 80104a8:	4642      	mov	r2, r8
 80104aa:	464b      	mov	r3, r9
 80104ac:	f7f0 f8d4 	bl	8000658 <__aeabi_dmul>
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	4630      	mov	r0, r6
 80104b6:	4639      	mov	r1, r7
 80104b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80104bc:	f7ef ff14 	bl	80002e8 <__aeabi_dsub>
 80104c0:	f805 6b01 	strb.w	r6, [r5], #1
 80104c4:	9e01      	ldr	r6, [sp, #4]
 80104c6:	9f03      	ldr	r7, [sp, #12]
 80104c8:	1bae      	subs	r6, r5, r6
 80104ca:	42b7      	cmp	r7, r6
 80104cc:	4602      	mov	r2, r0
 80104ce:	460b      	mov	r3, r1
 80104d0:	d135      	bne.n	801053e <_dtoa_r+0x6e6>
 80104d2:	f7ef ff0b 	bl	80002ec <__adddf3>
 80104d6:	4642      	mov	r2, r8
 80104d8:	464b      	mov	r3, r9
 80104da:	4606      	mov	r6, r0
 80104dc:	460f      	mov	r7, r1
 80104de:	f7f0 fb4b 	bl	8000b78 <__aeabi_dcmpgt>
 80104e2:	b9d0      	cbnz	r0, 801051a <_dtoa_r+0x6c2>
 80104e4:	4642      	mov	r2, r8
 80104e6:	464b      	mov	r3, r9
 80104e8:	4630      	mov	r0, r6
 80104ea:	4639      	mov	r1, r7
 80104ec:	f7f0 fb1c 	bl	8000b28 <__aeabi_dcmpeq>
 80104f0:	b110      	cbz	r0, 80104f8 <_dtoa_r+0x6a0>
 80104f2:	f01a 0f01 	tst.w	sl, #1
 80104f6:	d110      	bne.n	801051a <_dtoa_r+0x6c2>
 80104f8:	4620      	mov	r0, r4
 80104fa:	ee18 1a10 	vmov	r1, s16
 80104fe:	f000 fae9 	bl	8010ad4 <_Bfree>
 8010502:	2300      	movs	r3, #0
 8010504:	9800      	ldr	r0, [sp, #0]
 8010506:	702b      	strb	r3, [r5, #0]
 8010508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801050a:	3001      	adds	r0, #1
 801050c:	6018      	str	r0, [r3, #0]
 801050e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010510:	2b00      	cmp	r3, #0
 8010512:	f43f acf1 	beq.w	800fef8 <_dtoa_r+0xa0>
 8010516:	601d      	str	r5, [r3, #0]
 8010518:	e4ee      	b.n	800fef8 <_dtoa_r+0xa0>
 801051a:	9f00      	ldr	r7, [sp, #0]
 801051c:	462b      	mov	r3, r5
 801051e:	461d      	mov	r5, r3
 8010520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010524:	2a39      	cmp	r2, #57	; 0x39
 8010526:	d106      	bne.n	8010536 <_dtoa_r+0x6de>
 8010528:	9a01      	ldr	r2, [sp, #4]
 801052a:	429a      	cmp	r2, r3
 801052c:	d1f7      	bne.n	801051e <_dtoa_r+0x6c6>
 801052e:	9901      	ldr	r1, [sp, #4]
 8010530:	2230      	movs	r2, #48	; 0x30
 8010532:	3701      	adds	r7, #1
 8010534:	700a      	strb	r2, [r1, #0]
 8010536:	781a      	ldrb	r2, [r3, #0]
 8010538:	3201      	adds	r2, #1
 801053a:	701a      	strb	r2, [r3, #0]
 801053c:	e790      	b.n	8010460 <_dtoa_r+0x608>
 801053e:	4ba6      	ldr	r3, [pc, #664]	; (80107d8 <_dtoa_r+0x980>)
 8010540:	2200      	movs	r2, #0
 8010542:	f7f0 f889 	bl	8000658 <__aeabi_dmul>
 8010546:	2200      	movs	r2, #0
 8010548:	2300      	movs	r3, #0
 801054a:	4606      	mov	r6, r0
 801054c:	460f      	mov	r7, r1
 801054e:	f7f0 faeb 	bl	8000b28 <__aeabi_dcmpeq>
 8010552:	2800      	cmp	r0, #0
 8010554:	d09d      	beq.n	8010492 <_dtoa_r+0x63a>
 8010556:	e7cf      	b.n	80104f8 <_dtoa_r+0x6a0>
 8010558:	9a08      	ldr	r2, [sp, #32]
 801055a:	2a00      	cmp	r2, #0
 801055c:	f000 80d7 	beq.w	801070e <_dtoa_r+0x8b6>
 8010560:	9a06      	ldr	r2, [sp, #24]
 8010562:	2a01      	cmp	r2, #1
 8010564:	f300 80ba 	bgt.w	80106dc <_dtoa_r+0x884>
 8010568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801056a:	2a00      	cmp	r2, #0
 801056c:	f000 80b2 	beq.w	80106d4 <_dtoa_r+0x87c>
 8010570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010574:	9e07      	ldr	r6, [sp, #28]
 8010576:	9d04      	ldr	r5, [sp, #16]
 8010578:	9a04      	ldr	r2, [sp, #16]
 801057a:	441a      	add	r2, r3
 801057c:	9204      	str	r2, [sp, #16]
 801057e:	9a05      	ldr	r2, [sp, #20]
 8010580:	2101      	movs	r1, #1
 8010582:	441a      	add	r2, r3
 8010584:	4620      	mov	r0, r4
 8010586:	9205      	str	r2, [sp, #20]
 8010588:	f000 fb5c 	bl	8010c44 <__i2b>
 801058c:	4607      	mov	r7, r0
 801058e:	2d00      	cmp	r5, #0
 8010590:	dd0c      	ble.n	80105ac <_dtoa_r+0x754>
 8010592:	9b05      	ldr	r3, [sp, #20]
 8010594:	2b00      	cmp	r3, #0
 8010596:	dd09      	ble.n	80105ac <_dtoa_r+0x754>
 8010598:	42ab      	cmp	r3, r5
 801059a:	9a04      	ldr	r2, [sp, #16]
 801059c:	bfa8      	it	ge
 801059e:	462b      	movge	r3, r5
 80105a0:	1ad2      	subs	r2, r2, r3
 80105a2:	9204      	str	r2, [sp, #16]
 80105a4:	9a05      	ldr	r2, [sp, #20]
 80105a6:	1aed      	subs	r5, r5, r3
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	9305      	str	r3, [sp, #20]
 80105ac:	9b07      	ldr	r3, [sp, #28]
 80105ae:	b31b      	cbz	r3, 80105f8 <_dtoa_r+0x7a0>
 80105b0:	9b08      	ldr	r3, [sp, #32]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 80af 	beq.w	8010716 <_dtoa_r+0x8be>
 80105b8:	2e00      	cmp	r6, #0
 80105ba:	dd13      	ble.n	80105e4 <_dtoa_r+0x78c>
 80105bc:	4639      	mov	r1, r7
 80105be:	4632      	mov	r2, r6
 80105c0:	4620      	mov	r0, r4
 80105c2:	f000 fbff 	bl	8010dc4 <__pow5mult>
 80105c6:	ee18 2a10 	vmov	r2, s16
 80105ca:	4601      	mov	r1, r0
 80105cc:	4607      	mov	r7, r0
 80105ce:	4620      	mov	r0, r4
 80105d0:	f000 fb4e 	bl	8010c70 <__multiply>
 80105d4:	ee18 1a10 	vmov	r1, s16
 80105d8:	4680      	mov	r8, r0
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 fa7a 	bl	8010ad4 <_Bfree>
 80105e0:	ee08 8a10 	vmov	s16, r8
 80105e4:	9b07      	ldr	r3, [sp, #28]
 80105e6:	1b9a      	subs	r2, r3, r6
 80105e8:	d006      	beq.n	80105f8 <_dtoa_r+0x7a0>
 80105ea:	ee18 1a10 	vmov	r1, s16
 80105ee:	4620      	mov	r0, r4
 80105f0:	f000 fbe8 	bl	8010dc4 <__pow5mult>
 80105f4:	ee08 0a10 	vmov	s16, r0
 80105f8:	2101      	movs	r1, #1
 80105fa:	4620      	mov	r0, r4
 80105fc:	f000 fb22 	bl	8010c44 <__i2b>
 8010600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010602:	2b00      	cmp	r3, #0
 8010604:	4606      	mov	r6, r0
 8010606:	f340 8088 	ble.w	801071a <_dtoa_r+0x8c2>
 801060a:	461a      	mov	r2, r3
 801060c:	4601      	mov	r1, r0
 801060e:	4620      	mov	r0, r4
 8010610:	f000 fbd8 	bl	8010dc4 <__pow5mult>
 8010614:	9b06      	ldr	r3, [sp, #24]
 8010616:	2b01      	cmp	r3, #1
 8010618:	4606      	mov	r6, r0
 801061a:	f340 8081 	ble.w	8010720 <_dtoa_r+0x8c8>
 801061e:	f04f 0800 	mov.w	r8, #0
 8010622:	6933      	ldr	r3, [r6, #16]
 8010624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010628:	6918      	ldr	r0, [r3, #16]
 801062a:	f000 fabb 	bl	8010ba4 <__hi0bits>
 801062e:	f1c0 0020 	rsb	r0, r0, #32
 8010632:	9b05      	ldr	r3, [sp, #20]
 8010634:	4418      	add	r0, r3
 8010636:	f010 001f 	ands.w	r0, r0, #31
 801063a:	f000 8092 	beq.w	8010762 <_dtoa_r+0x90a>
 801063e:	f1c0 0320 	rsb	r3, r0, #32
 8010642:	2b04      	cmp	r3, #4
 8010644:	f340 808a 	ble.w	801075c <_dtoa_r+0x904>
 8010648:	f1c0 001c 	rsb	r0, r0, #28
 801064c:	9b04      	ldr	r3, [sp, #16]
 801064e:	4403      	add	r3, r0
 8010650:	9304      	str	r3, [sp, #16]
 8010652:	9b05      	ldr	r3, [sp, #20]
 8010654:	4403      	add	r3, r0
 8010656:	4405      	add	r5, r0
 8010658:	9305      	str	r3, [sp, #20]
 801065a:	9b04      	ldr	r3, [sp, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	dd07      	ble.n	8010670 <_dtoa_r+0x818>
 8010660:	ee18 1a10 	vmov	r1, s16
 8010664:	461a      	mov	r2, r3
 8010666:	4620      	mov	r0, r4
 8010668:	f000 fc06 	bl	8010e78 <__lshift>
 801066c:	ee08 0a10 	vmov	s16, r0
 8010670:	9b05      	ldr	r3, [sp, #20]
 8010672:	2b00      	cmp	r3, #0
 8010674:	dd05      	ble.n	8010682 <_dtoa_r+0x82a>
 8010676:	4631      	mov	r1, r6
 8010678:	461a      	mov	r2, r3
 801067a:	4620      	mov	r0, r4
 801067c:	f000 fbfc 	bl	8010e78 <__lshift>
 8010680:	4606      	mov	r6, r0
 8010682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010684:	2b00      	cmp	r3, #0
 8010686:	d06e      	beq.n	8010766 <_dtoa_r+0x90e>
 8010688:	ee18 0a10 	vmov	r0, s16
 801068c:	4631      	mov	r1, r6
 801068e:	f000 fc63 	bl	8010f58 <__mcmp>
 8010692:	2800      	cmp	r0, #0
 8010694:	da67      	bge.n	8010766 <_dtoa_r+0x90e>
 8010696:	9b00      	ldr	r3, [sp, #0]
 8010698:	3b01      	subs	r3, #1
 801069a:	ee18 1a10 	vmov	r1, s16
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	220a      	movs	r2, #10
 80106a2:	2300      	movs	r3, #0
 80106a4:	4620      	mov	r0, r4
 80106a6:	f000 fa37 	bl	8010b18 <__multadd>
 80106aa:	9b08      	ldr	r3, [sp, #32]
 80106ac:	ee08 0a10 	vmov	s16, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f000 81b1 	beq.w	8010a18 <_dtoa_r+0xbc0>
 80106b6:	2300      	movs	r3, #0
 80106b8:	4639      	mov	r1, r7
 80106ba:	220a      	movs	r2, #10
 80106bc:	4620      	mov	r0, r4
 80106be:	f000 fa2b 	bl	8010b18 <__multadd>
 80106c2:	9b02      	ldr	r3, [sp, #8]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	4607      	mov	r7, r0
 80106c8:	f300 808e 	bgt.w	80107e8 <_dtoa_r+0x990>
 80106cc:	9b06      	ldr	r3, [sp, #24]
 80106ce:	2b02      	cmp	r3, #2
 80106d0:	dc51      	bgt.n	8010776 <_dtoa_r+0x91e>
 80106d2:	e089      	b.n	80107e8 <_dtoa_r+0x990>
 80106d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80106da:	e74b      	b.n	8010574 <_dtoa_r+0x71c>
 80106dc:	9b03      	ldr	r3, [sp, #12]
 80106de:	1e5e      	subs	r6, r3, #1
 80106e0:	9b07      	ldr	r3, [sp, #28]
 80106e2:	42b3      	cmp	r3, r6
 80106e4:	bfbf      	itttt	lt
 80106e6:	9b07      	ldrlt	r3, [sp, #28]
 80106e8:	9607      	strlt	r6, [sp, #28]
 80106ea:	1af2      	sublt	r2, r6, r3
 80106ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80106ee:	bfb6      	itet	lt
 80106f0:	189b      	addlt	r3, r3, r2
 80106f2:	1b9e      	subge	r6, r3, r6
 80106f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106f6:	9b03      	ldr	r3, [sp, #12]
 80106f8:	bfb8      	it	lt
 80106fa:	2600      	movlt	r6, #0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	bfb7      	itett	lt
 8010700:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010704:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010708:	1a9d      	sublt	r5, r3, r2
 801070a:	2300      	movlt	r3, #0
 801070c:	e734      	b.n	8010578 <_dtoa_r+0x720>
 801070e:	9e07      	ldr	r6, [sp, #28]
 8010710:	9d04      	ldr	r5, [sp, #16]
 8010712:	9f08      	ldr	r7, [sp, #32]
 8010714:	e73b      	b.n	801058e <_dtoa_r+0x736>
 8010716:	9a07      	ldr	r2, [sp, #28]
 8010718:	e767      	b.n	80105ea <_dtoa_r+0x792>
 801071a:	9b06      	ldr	r3, [sp, #24]
 801071c:	2b01      	cmp	r3, #1
 801071e:	dc18      	bgt.n	8010752 <_dtoa_r+0x8fa>
 8010720:	f1ba 0f00 	cmp.w	sl, #0
 8010724:	d115      	bne.n	8010752 <_dtoa_r+0x8fa>
 8010726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801072a:	b993      	cbnz	r3, 8010752 <_dtoa_r+0x8fa>
 801072c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010730:	0d1b      	lsrs	r3, r3, #20
 8010732:	051b      	lsls	r3, r3, #20
 8010734:	b183      	cbz	r3, 8010758 <_dtoa_r+0x900>
 8010736:	9b04      	ldr	r3, [sp, #16]
 8010738:	3301      	adds	r3, #1
 801073a:	9304      	str	r3, [sp, #16]
 801073c:	9b05      	ldr	r3, [sp, #20]
 801073e:	3301      	adds	r3, #1
 8010740:	9305      	str	r3, [sp, #20]
 8010742:	f04f 0801 	mov.w	r8, #1
 8010746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010748:	2b00      	cmp	r3, #0
 801074a:	f47f af6a 	bne.w	8010622 <_dtoa_r+0x7ca>
 801074e:	2001      	movs	r0, #1
 8010750:	e76f      	b.n	8010632 <_dtoa_r+0x7da>
 8010752:	f04f 0800 	mov.w	r8, #0
 8010756:	e7f6      	b.n	8010746 <_dtoa_r+0x8ee>
 8010758:	4698      	mov	r8, r3
 801075a:	e7f4      	b.n	8010746 <_dtoa_r+0x8ee>
 801075c:	f43f af7d 	beq.w	801065a <_dtoa_r+0x802>
 8010760:	4618      	mov	r0, r3
 8010762:	301c      	adds	r0, #28
 8010764:	e772      	b.n	801064c <_dtoa_r+0x7f4>
 8010766:	9b03      	ldr	r3, [sp, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	dc37      	bgt.n	80107dc <_dtoa_r+0x984>
 801076c:	9b06      	ldr	r3, [sp, #24]
 801076e:	2b02      	cmp	r3, #2
 8010770:	dd34      	ble.n	80107dc <_dtoa_r+0x984>
 8010772:	9b03      	ldr	r3, [sp, #12]
 8010774:	9302      	str	r3, [sp, #8]
 8010776:	9b02      	ldr	r3, [sp, #8]
 8010778:	b96b      	cbnz	r3, 8010796 <_dtoa_r+0x93e>
 801077a:	4631      	mov	r1, r6
 801077c:	2205      	movs	r2, #5
 801077e:	4620      	mov	r0, r4
 8010780:	f000 f9ca 	bl	8010b18 <__multadd>
 8010784:	4601      	mov	r1, r0
 8010786:	4606      	mov	r6, r0
 8010788:	ee18 0a10 	vmov	r0, s16
 801078c:	f000 fbe4 	bl	8010f58 <__mcmp>
 8010790:	2800      	cmp	r0, #0
 8010792:	f73f adbb 	bgt.w	801030c <_dtoa_r+0x4b4>
 8010796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010798:	9d01      	ldr	r5, [sp, #4]
 801079a:	43db      	mvns	r3, r3
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	f04f 0800 	mov.w	r8, #0
 80107a2:	4631      	mov	r1, r6
 80107a4:	4620      	mov	r0, r4
 80107a6:	f000 f995 	bl	8010ad4 <_Bfree>
 80107aa:	2f00      	cmp	r7, #0
 80107ac:	f43f aea4 	beq.w	80104f8 <_dtoa_r+0x6a0>
 80107b0:	f1b8 0f00 	cmp.w	r8, #0
 80107b4:	d005      	beq.n	80107c2 <_dtoa_r+0x96a>
 80107b6:	45b8      	cmp	r8, r7
 80107b8:	d003      	beq.n	80107c2 <_dtoa_r+0x96a>
 80107ba:	4641      	mov	r1, r8
 80107bc:	4620      	mov	r0, r4
 80107be:	f000 f989 	bl	8010ad4 <_Bfree>
 80107c2:	4639      	mov	r1, r7
 80107c4:	4620      	mov	r0, r4
 80107c6:	f000 f985 	bl	8010ad4 <_Bfree>
 80107ca:	e695      	b.n	80104f8 <_dtoa_r+0x6a0>
 80107cc:	2600      	movs	r6, #0
 80107ce:	4637      	mov	r7, r6
 80107d0:	e7e1      	b.n	8010796 <_dtoa_r+0x93e>
 80107d2:	9700      	str	r7, [sp, #0]
 80107d4:	4637      	mov	r7, r6
 80107d6:	e599      	b.n	801030c <_dtoa_r+0x4b4>
 80107d8:	40240000 	.word	0x40240000
 80107dc:	9b08      	ldr	r3, [sp, #32]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f000 80ca 	beq.w	8010978 <_dtoa_r+0xb20>
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	9302      	str	r3, [sp, #8]
 80107e8:	2d00      	cmp	r5, #0
 80107ea:	dd05      	ble.n	80107f8 <_dtoa_r+0x9a0>
 80107ec:	4639      	mov	r1, r7
 80107ee:	462a      	mov	r2, r5
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fb41 	bl	8010e78 <__lshift>
 80107f6:	4607      	mov	r7, r0
 80107f8:	f1b8 0f00 	cmp.w	r8, #0
 80107fc:	d05b      	beq.n	80108b6 <_dtoa_r+0xa5e>
 80107fe:	6879      	ldr	r1, [r7, #4]
 8010800:	4620      	mov	r0, r4
 8010802:	f000 f927 	bl	8010a54 <_Balloc>
 8010806:	4605      	mov	r5, r0
 8010808:	b928      	cbnz	r0, 8010816 <_dtoa_r+0x9be>
 801080a:	4b87      	ldr	r3, [pc, #540]	; (8010a28 <_dtoa_r+0xbd0>)
 801080c:	4602      	mov	r2, r0
 801080e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010812:	f7ff bb3b 	b.w	800fe8c <_dtoa_r+0x34>
 8010816:	693a      	ldr	r2, [r7, #16]
 8010818:	3202      	adds	r2, #2
 801081a:	0092      	lsls	r2, r2, #2
 801081c:	f107 010c 	add.w	r1, r7, #12
 8010820:	300c      	adds	r0, #12
 8010822:	f7fe fcf5 	bl	800f210 <memcpy>
 8010826:	2201      	movs	r2, #1
 8010828:	4629      	mov	r1, r5
 801082a:	4620      	mov	r0, r4
 801082c:	f000 fb24 	bl	8010e78 <__lshift>
 8010830:	9b01      	ldr	r3, [sp, #4]
 8010832:	f103 0901 	add.w	r9, r3, #1
 8010836:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801083a:	4413      	add	r3, r2
 801083c:	9305      	str	r3, [sp, #20]
 801083e:	f00a 0301 	and.w	r3, sl, #1
 8010842:	46b8      	mov	r8, r7
 8010844:	9304      	str	r3, [sp, #16]
 8010846:	4607      	mov	r7, r0
 8010848:	4631      	mov	r1, r6
 801084a:	ee18 0a10 	vmov	r0, s16
 801084e:	f7ff fa77 	bl	800fd40 <quorem>
 8010852:	4641      	mov	r1, r8
 8010854:	9002      	str	r0, [sp, #8]
 8010856:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801085a:	ee18 0a10 	vmov	r0, s16
 801085e:	f000 fb7b 	bl	8010f58 <__mcmp>
 8010862:	463a      	mov	r2, r7
 8010864:	9003      	str	r0, [sp, #12]
 8010866:	4631      	mov	r1, r6
 8010868:	4620      	mov	r0, r4
 801086a:	f000 fb91 	bl	8010f90 <__mdiff>
 801086e:	68c2      	ldr	r2, [r0, #12]
 8010870:	f109 3bff 	add.w	fp, r9, #4294967295
 8010874:	4605      	mov	r5, r0
 8010876:	bb02      	cbnz	r2, 80108ba <_dtoa_r+0xa62>
 8010878:	4601      	mov	r1, r0
 801087a:	ee18 0a10 	vmov	r0, s16
 801087e:	f000 fb6b 	bl	8010f58 <__mcmp>
 8010882:	4602      	mov	r2, r0
 8010884:	4629      	mov	r1, r5
 8010886:	4620      	mov	r0, r4
 8010888:	9207      	str	r2, [sp, #28]
 801088a:	f000 f923 	bl	8010ad4 <_Bfree>
 801088e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010892:	ea43 0102 	orr.w	r1, r3, r2
 8010896:	9b04      	ldr	r3, [sp, #16]
 8010898:	430b      	orrs	r3, r1
 801089a:	464d      	mov	r5, r9
 801089c:	d10f      	bne.n	80108be <_dtoa_r+0xa66>
 801089e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108a2:	d02a      	beq.n	80108fa <_dtoa_r+0xaa2>
 80108a4:	9b03      	ldr	r3, [sp, #12]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	dd02      	ble.n	80108b0 <_dtoa_r+0xa58>
 80108aa:	9b02      	ldr	r3, [sp, #8]
 80108ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80108b0:	f88b a000 	strb.w	sl, [fp]
 80108b4:	e775      	b.n	80107a2 <_dtoa_r+0x94a>
 80108b6:	4638      	mov	r0, r7
 80108b8:	e7ba      	b.n	8010830 <_dtoa_r+0x9d8>
 80108ba:	2201      	movs	r2, #1
 80108bc:	e7e2      	b.n	8010884 <_dtoa_r+0xa2c>
 80108be:	9b03      	ldr	r3, [sp, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	db04      	blt.n	80108ce <_dtoa_r+0xa76>
 80108c4:	9906      	ldr	r1, [sp, #24]
 80108c6:	430b      	orrs	r3, r1
 80108c8:	9904      	ldr	r1, [sp, #16]
 80108ca:	430b      	orrs	r3, r1
 80108cc:	d122      	bne.n	8010914 <_dtoa_r+0xabc>
 80108ce:	2a00      	cmp	r2, #0
 80108d0:	ddee      	ble.n	80108b0 <_dtoa_r+0xa58>
 80108d2:	ee18 1a10 	vmov	r1, s16
 80108d6:	2201      	movs	r2, #1
 80108d8:	4620      	mov	r0, r4
 80108da:	f000 facd 	bl	8010e78 <__lshift>
 80108de:	4631      	mov	r1, r6
 80108e0:	ee08 0a10 	vmov	s16, r0
 80108e4:	f000 fb38 	bl	8010f58 <__mcmp>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	dc03      	bgt.n	80108f4 <_dtoa_r+0xa9c>
 80108ec:	d1e0      	bne.n	80108b0 <_dtoa_r+0xa58>
 80108ee:	f01a 0f01 	tst.w	sl, #1
 80108f2:	d0dd      	beq.n	80108b0 <_dtoa_r+0xa58>
 80108f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108f8:	d1d7      	bne.n	80108aa <_dtoa_r+0xa52>
 80108fa:	2339      	movs	r3, #57	; 0x39
 80108fc:	f88b 3000 	strb.w	r3, [fp]
 8010900:	462b      	mov	r3, r5
 8010902:	461d      	mov	r5, r3
 8010904:	3b01      	subs	r3, #1
 8010906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801090a:	2a39      	cmp	r2, #57	; 0x39
 801090c:	d071      	beq.n	80109f2 <_dtoa_r+0xb9a>
 801090e:	3201      	adds	r2, #1
 8010910:	701a      	strb	r2, [r3, #0]
 8010912:	e746      	b.n	80107a2 <_dtoa_r+0x94a>
 8010914:	2a00      	cmp	r2, #0
 8010916:	dd07      	ble.n	8010928 <_dtoa_r+0xad0>
 8010918:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801091c:	d0ed      	beq.n	80108fa <_dtoa_r+0xaa2>
 801091e:	f10a 0301 	add.w	r3, sl, #1
 8010922:	f88b 3000 	strb.w	r3, [fp]
 8010926:	e73c      	b.n	80107a2 <_dtoa_r+0x94a>
 8010928:	9b05      	ldr	r3, [sp, #20]
 801092a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801092e:	4599      	cmp	r9, r3
 8010930:	d047      	beq.n	80109c2 <_dtoa_r+0xb6a>
 8010932:	ee18 1a10 	vmov	r1, s16
 8010936:	2300      	movs	r3, #0
 8010938:	220a      	movs	r2, #10
 801093a:	4620      	mov	r0, r4
 801093c:	f000 f8ec 	bl	8010b18 <__multadd>
 8010940:	45b8      	cmp	r8, r7
 8010942:	ee08 0a10 	vmov	s16, r0
 8010946:	f04f 0300 	mov.w	r3, #0
 801094a:	f04f 020a 	mov.w	r2, #10
 801094e:	4641      	mov	r1, r8
 8010950:	4620      	mov	r0, r4
 8010952:	d106      	bne.n	8010962 <_dtoa_r+0xb0a>
 8010954:	f000 f8e0 	bl	8010b18 <__multadd>
 8010958:	4680      	mov	r8, r0
 801095a:	4607      	mov	r7, r0
 801095c:	f109 0901 	add.w	r9, r9, #1
 8010960:	e772      	b.n	8010848 <_dtoa_r+0x9f0>
 8010962:	f000 f8d9 	bl	8010b18 <__multadd>
 8010966:	4639      	mov	r1, r7
 8010968:	4680      	mov	r8, r0
 801096a:	2300      	movs	r3, #0
 801096c:	220a      	movs	r2, #10
 801096e:	4620      	mov	r0, r4
 8010970:	f000 f8d2 	bl	8010b18 <__multadd>
 8010974:	4607      	mov	r7, r0
 8010976:	e7f1      	b.n	801095c <_dtoa_r+0xb04>
 8010978:	9b03      	ldr	r3, [sp, #12]
 801097a:	9302      	str	r3, [sp, #8]
 801097c:	9d01      	ldr	r5, [sp, #4]
 801097e:	ee18 0a10 	vmov	r0, s16
 8010982:	4631      	mov	r1, r6
 8010984:	f7ff f9dc 	bl	800fd40 <quorem>
 8010988:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801098c:	9b01      	ldr	r3, [sp, #4]
 801098e:	f805 ab01 	strb.w	sl, [r5], #1
 8010992:	1aea      	subs	r2, r5, r3
 8010994:	9b02      	ldr	r3, [sp, #8]
 8010996:	4293      	cmp	r3, r2
 8010998:	dd09      	ble.n	80109ae <_dtoa_r+0xb56>
 801099a:	ee18 1a10 	vmov	r1, s16
 801099e:	2300      	movs	r3, #0
 80109a0:	220a      	movs	r2, #10
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 f8b8 	bl	8010b18 <__multadd>
 80109a8:	ee08 0a10 	vmov	s16, r0
 80109ac:	e7e7      	b.n	801097e <_dtoa_r+0xb26>
 80109ae:	9b02      	ldr	r3, [sp, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	bfc8      	it	gt
 80109b4:	461d      	movgt	r5, r3
 80109b6:	9b01      	ldr	r3, [sp, #4]
 80109b8:	bfd8      	it	le
 80109ba:	2501      	movle	r5, #1
 80109bc:	441d      	add	r5, r3
 80109be:	f04f 0800 	mov.w	r8, #0
 80109c2:	ee18 1a10 	vmov	r1, s16
 80109c6:	2201      	movs	r2, #1
 80109c8:	4620      	mov	r0, r4
 80109ca:	f000 fa55 	bl	8010e78 <__lshift>
 80109ce:	4631      	mov	r1, r6
 80109d0:	ee08 0a10 	vmov	s16, r0
 80109d4:	f000 fac0 	bl	8010f58 <__mcmp>
 80109d8:	2800      	cmp	r0, #0
 80109da:	dc91      	bgt.n	8010900 <_dtoa_r+0xaa8>
 80109dc:	d102      	bne.n	80109e4 <_dtoa_r+0xb8c>
 80109de:	f01a 0f01 	tst.w	sl, #1
 80109e2:	d18d      	bne.n	8010900 <_dtoa_r+0xaa8>
 80109e4:	462b      	mov	r3, r5
 80109e6:	461d      	mov	r5, r3
 80109e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109ec:	2a30      	cmp	r2, #48	; 0x30
 80109ee:	d0fa      	beq.n	80109e6 <_dtoa_r+0xb8e>
 80109f0:	e6d7      	b.n	80107a2 <_dtoa_r+0x94a>
 80109f2:	9a01      	ldr	r2, [sp, #4]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d184      	bne.n	8010902 <_dtoa_r+0xaaa>
 80109f8:	9b00      	ldr	r3, [sp, #0]
 80109fa:	3301      	adds	r3, #1
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	2331      	movs	r3, #49	; 0x31
 8010a00:	7013      	strb	r3, [r2, #0]
 8010a02:	e6ce      	b.n	80107a2 <_dtoa_r+0x94a>
 8010a04:	4b09      	ldr	r3, [pc, #36]	; (8010a2c <_dtoa_r+0xbd4>)
 8010a06:	f7ff ba95 	b.w	800ff34 <_dtoa_r+0xdc>
 8010a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f47f aa6e 	bne.w	800feee <_dtoa_r+0x96>
 8010a12:	4b07      	ldr	r3, [pc, #28]	; (8010a30 <_dtoa_r+0xbd8>)
 8010a14:	f7ff ba8e 	b.w	800ff34 <_dtoa_r+0xdc>
 8010a18:	9b02      	ldr	r3, [sp, #8]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	dcae      	bgt.n	801097c <_dtoa_r+0xb24>
 8010a1e:	9b06      	ldr	r3, [sp, #24]
 8010a20:	2b02      	cmp	r3, #2
 8010a22:	f73f aea8 	bgt.w	8010776 <_dtoa_r+0x91e>
 8010a26:	e7a9      	b.n	801097c <_dtoa_r+0xb24>
 8010a28:	08028b07 	.word	0x08028b07
 8010a2c:	08028a64 	.word	0x08028a64
 8010a30:	08028a88 	.word	0x08028a88

08010a34 <_localeconv_r>:
 8010a34:	4800      	ldr	r0, [pc, #0]	; (8010a38 <_localeconv_r+0x4>)
 8010a36:	4770      	bx	lr
 8010a38:	20001048 	.word	0x20001048

08010a3c <__malloc_lock>:
 8010a3c:	4801      	ldr	r0, [pc, #4]	; (8010a44 <__malloc_lock+0x8>)
 8010a3e:	f000 bd5e 	b.w	80114fe <__retarget_lock_acquire_recursive>
 8010a42:	bf00      	nop
 8010a44:	2000b374 	.word	0x2000b374

08010a48 <__malloc_unlock>:
 8010a48:	4801      	ldr	r0, [pc, #4]	; (8010a50 <__malloc_unlock+0x8>)
 8010a4a:	f000 bd59 	b.w	8011500 <__retarget_lock_release_recursive>
 8010a4e:	bf00      	nop
 8010a50:	2000b374 	.word	0x2000b374

08010a54 <_Balloc>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a58:	4604      	mov	r4, r0
 8010a5a:	460d      	mov	r5, r1
 8010a5c:	b976      	cbnz	r6, 8010a7c <_Balloc+0x28>
 8010a5e:	2010      	movs	r0, #16
 8010a60:	f7fe fbce 	bl	800f200 <malloc>
 8010a64:	4602      	mov	r2, r0
 8010a66:	6260      	str	r0, [r4, #36]	; 0x24
 8010a68:	b920      	cbnz	r0, 8010a74 <_Balloc+0x20>
 8010a6a:	4b18      	ldr	r3, [pc, #96]	; (8010acc <_Balloc+0x78>)
 8010a6c:	4818      	ldr	r0, [pc, #96]	; (8010ad0 <_Balloc+0x7c>)
 8010a6e:	2166      	movs	r1, #102	; 0x66
 8010a70:	f000 fd14 	bl	801149c <__assert_func>
 8010a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a78:	6006      	str	r6, [r0, #0]
 8010a7a:	60c6      	str	r6, [r0, #12]
 8010a7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a7e:	68f3      	ldr	r3, [r6, #12]
 8010a80:	b183      	cbz	r3, 8010aa4 <_Balloc+0x50>
 8010a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a8a:	b9b8      	cbnz	r0, 8010abc <_Balloc+0x68>
 8010a8c:	2101      	movs	r1, #1
 8010a8e:	fa01 f605 	lsl.w	r6, r1, r5
 8010a92:	1d72      	adds	r2, r6, #5
 8010a94:	0092      	lsls	r2, r2, #2
 8010a96:	4620      	mov	r0, r4
 8010a98:	f000 fb60 	bl	801115c <_calloc_r>
 8010a9c:	b160      	cbz	r0, 8010ab8 <_Balloc+0x64>
 8010a9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010aa2:	e00e      	b.n	8010ac2 <_Balloc+0x6e>
 8010aa4:	2221      	movs	r2, #33	; 0x21
 8010aa6:	2104      	movs	r1, #4
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f000 fb57 	bl	801115c <_calloc_r>
 8010aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ab0:	60f0      	str	r0, [r6, #12]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1e4      	bne.n	8010a82 <_Balloc+0x2e>
 8010ab8:	2000      	movs	r0, #0
 8010aba:	bd70      	pop	{r4, r5, r6, pc}
 8010abc:	6802      	ldr	r2, [r0, #0]
 8010abe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ac8:	e7f7      	b.n	8010aba <_Balloc+0x66>
 8010aca:	bf00      	nop
 8010acc:	08028a95 	.word	0x08028a95
 8010ad0:	08028b18 	.word	0x08028b18

08010ad4 <_Bfree>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ad8:	4605      	mov	r5, r0
 8010ada:	460c      	mov	r4, r1
 8010adc:	b976      	cbnz	r6, 8010afc <_Bfree+0x28>
 8010ade:	2010      	movs	r0, #16
 8010ae0:	f7fe fb8e 	bl	800f200 <malloc>
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	6268      	str	r0, [r5, #36]	; 0x24
 8010ae8:	b920      	cbnz	r0, 8010af4 <_Bfree+0x20>
 8010aea:	4b09      	ldr	r3, [pc, #36]	; (8010b10 <_Bfree+0x3c>)
 8010aec:	4809      	ldr	r0, [pc, #36]	; (8010b14 <_Bfree+0x40>)
 8010aee:	218a      	movs	r1, #138	; 0x8a
 8010af0:	f000 fcd4 	bl	801149c <__assert_func>
 8010af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010af8:	6006      	str	r6, [r0, #0]
 8010afa:	60c6      	str	r6, [r0, #12]
 8010afc:	b13c      	cbz	r4, 8010b0e <_Bfree+0x3a>
 8010afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b00:	6862      	ldr	r2, [r4, #4]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b08:	6021      	str	r1, [r4, #0]
 8010b0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	08028a95 	.word	0x08028a95
 8010b14:	08028b18 	.word	0x08028b18

08010b18 <__multadd>:
 8010b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1c:	690d      	ldr	r5, [r1, #16]
 8010b1e:	4607      	mov	r7, r0
 8010b20:	460c      	mov	r4, r1
 8010b22:	461e      	mov	r6, r3
 8010b24:	f101 0c14 	add.w	ip, r1, #20
 8010b28:	2000      	movs	r0, #0
 8010b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8010b2e:	b299      	uxth	r1, r3
 8010b30:	fb02 6101 	mla	r1, r2, r1, r6
 8010b34:	0c1e      	lsrs	r6, r3, #16
 8010b36:	0c0b      	lsrs	r3, r1, #16
 8010b38:	fb02 3306 	mla	r3, r2, r6, r3
 8010b3c:	b289      	uxth	r1, r1
 8010b3e:	3001      	adds	r0, #1
 8010b40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b44:	4285      	cmp	r5, r0
 8010b46:	f84c 1b04 	str.w	r1, [ip], #4
 8010b4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b4e:	dcec      	bgt.n	8010b2a <__multadd+0x12>
 8010b50:	b30e      	cbz	r6, 8010b96 <__multadd+0x7e>
 8010b52:	68a3      	ldr	r3, [r4, #8]
 8010b54:	42ab      	cmp	r3, r5
 8010b56:	dc19      	bgt.n	8010b8c <__multadd+0x74>
 8010b58:	6861      	ldr	r1, [r4, #4]
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	3101      	adds	r1, #1
 8010b5e:	f7ff ff79 	bl	8010a54 <_Balloc>
 8010b62:	4680      	mov	r8, r0
 8010b64:	b928      	cbnz	r0, 8010b72 <__multadd+0x5a>
 8010b66:	4602      	mov	r2, r0
 8010b68:	4b0c      	ldr	r3, [pc, #48]	; (8010b9c <__multadd+0x84>)
 8010b6a:	480d      	ldr	r0, [pc, #52]	; (8010ba0 <__multadd+0x88>)
 8010b6c:	21b5      	movs	r1, #181	; 0xb5
 8010b6e:	f000 fc95 	bl	801149c <__assert_func>
 8010b72:	6922      	ldr	r2, [r4, #16]
 8010b74:	3202      	adds	r2, #2
 8010b76:	f104 010c 	add.w	r1, r4, #12
 8010b7a:	0092      	lsls	r2, r2, #2
 8010b7c:	300c      	adds	r0, #12
 8010b7e:	f7fe fb47 	bl	800f210 <memcpy>
 8010b82:	4621      	mov	r1, r4
 8010b84:	4638      	mov	r0, r7
 8010b86:	f7ff ffa5 	bl	8010ad4 <_Bfree>
 8010b8a:	4644      	mov	r4, r8
 8010b8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b90:	3501      	adds	r5, #1
 8010b92:	615e      	str	r6, [r3, #20]
 8010b94:	6125      	str	r5, [r4, #16]
 8010b96:	4620      	mov	r0, r4
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9c:	08028b07 	.word	0x08028b07
 8010ba0:	08028b18 	.word	0x08028b18

08010ba4 <__hi0bits>:
 8010ba4:	0c03      	lsrs	r3, r0, #16
 8010ba6:	041b      	lsls	r3, r3, #16
 8010ba8:	b9d3      	cbnz	r3, 8010be0 <__hi0bits+0x3c>
 8010baa:	0400      	lsls	r0, r0, #16
 8010bac:	2310      	movs	r3, #16
 8010bae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010bb2:	bf04      	itt	eq
 8010bb4:	0200      	lsleq	r0, r0, #8
 8010bb6:	3308      	addeq	r3, #8
 8010bb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010bbc:	bf04      	itt	eq
 8010bbe:	0100      	lsleq	r0, r0, #4
 8010bc0:	3304      	addeq	r3, #4
 8010bc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bc6:	bf04      	itt	eq
 8010bc8:	0080      	lsleq	r0, r0, #2
 8010bca:	3302      	addeq	r3, #2
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	db05      	blt.n	8010bdc <__hi0bits+0x38>
 8010bd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010bd4:	f103 0301 	add.w	r3, r3, #1
 8010bd8:	bf08      	it	eq
 8010bda:	2320      	moveq	r3, #32
 8010bdc:	4618      	mov	r0, r3
 8010bde:	4770      	bx	lr
 8010be0:	2300      	movs	r3, #0
 8010be2:	e7e4      	b.n	8010bae <__hi0bits+0xa>

08010be4 <__lo0bits>:
 8010be4:	6803      	ldr	r3, [r0, #0]
 8010be6:	f013 0207 	ands.w	r2, r3, #7
 8010bea:	4601      	mov	r1, r0
 8010bec:	d00b      	beq.n	8010c06 <__lo0bits+0x22>
 8010bee:	07da      	lsls	r2, r3, #31
 8010bf0:	d423      	bmi.n	8010c3a <__lo0bits+0x56>
 8010bf2:	0798      	lsls	r0, r3, #30
 8010bf4:	bf49      	itett	mi
 8010bf6:	085b      	lsrmi	r3, r3, #1
 8010bf8:	089b      	lsrpl	r3, r3, #2
 8010bfa:	2001      	movmi	r0, #1
 8010bfc:	600b      	strmi	r3, [r1, #0]
 8010bfe:	bf5c      	itt	pl
 8010c00:	600b      	strpl	r3, [r1, #0]
 8010c02:	2002      	movpl	r0, #2
 8010c04:	4770      	bx	lr
 8010c06:	b298      	uxth	r0, r3
 8010c08:	b9a8      	cbnz	r0, 8010c36 <__lo0bits+0x52>
 8010c0a:	0c1b      	lsrs	r3, r3, #16
 8010c0c:	2010      	movs	r0, #16
 8010c0e:	b2da      	uxtb	r2, r3
 8010c10:	b90a      	cbnz	r2, 8010c16 <__lo0bits+0x32>
 8010c12:	3008      	adds	r0, #8
 8010c14:	0a1b      	lsrs	r3, r3, #8
 8010c16:	071a      	lsls	r2, r3, #28
 8010c18:	bf04      	itt	eq
 8010c1a:	091b      	lsreq	r3, r3, #4
 8010c1c:	3004      	addeq	r0, #4
 8010c1e:	079a      	lsls	r2, r3, #30
 8010c20:	bf04      	itt	eq
 8010c22:	089b      	lsreq	r3, r3, #2
 8010c24:	3002      	addeq	r0, #2
 8010c26:	07da      	lsls	r2, r3, #31
 8010c28:	d403      	bmi.n	8010c32 <__lo0bits+0x4e>
 8010c2a:	085b      	lsrs	r3, r3, #1
 8010c2c:	f100 0001 	add.w	r0, r0, #1
 8010c30:	d005      	beq.n	8010c3e <__lo0bits+0x5a>
 8010c32:	600b      	str	r3, [r1, #0]
 8010c34:	4770      	bx	lr
 8010c36:	4610      	mov	r0, r2
 8010c38:	e7e9      	b.n	8010c0e <__lo0bits+0x2a>
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	4770      	bx	lr
 8010c3e:	2020      	movs	r0, #32
 8010c40:	4770      	bx	lr
	...

08010c44 <__i2b>:
 8010c44:	b510      	push	{r4, lr}
 8010c46:	460c      	mov	r4, r1
 8010c48:	2101      	movs	r1, #1
 8010c4a:	f7ff ff03 	bl	8010a54 <_Balloc>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	b928      	cbnz	r0, 8010c5e <__i2b+0x1a>
 8010c52:	4b05      	ldr	r3, [pc, #20]	; (8010c68 <__i2b+0x24>)
 8010c54:	4805      	ldr	r0, [pc, #20]	; (8010c6c <__i2b+0x28>)
 8010c56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c5a:	f000 fc1f 	bl	801149c <__assert_func>
 8010c5e:	2301      	movs	r3, #1
 8010c60:	6144      	str	r4, [r0, #20]
 8010c62:	6103      	str	r3, [r0, #16]
 8010c64:	bd10      	pop	{r4, pc}
 8010c66:	bf00      	nop
 8010c68:	08028b07 	.word	0x08028b07
 8010c6c:	08028b18 	.word	0x08028b18

08010c70 <__multiply>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	4691      	mov	r9, r2
 8010c76:	690a      	ldr	r2, [r1, #16]
 8010c78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	bfb8      	it	lt
 8010c80:	460b      	movlt	r3, r1
 8010c82:	460c      	mov	r4, r1
 8010c84:	bfbc      	itt	lt
 8010c86:	464c      	movlt	r4, r9
 8010c88:	4699      	movlt	r9, r3
 8010c8a:	6927      	ldr	r7, [r4, #16]
 8010c8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c90:	68a3      	ldr	r3, [r4, #8]
 8010c92:	6861      	ldr	r1, [r4, #4]
 8010c94:	eb07 060a 	add.w	r6, r7, sl
 8010c98:	42b3      	cmp	r3, r6
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	bfb8      	it	lt
 8010c9e:	3101      	addlt	r1, #1
 8010ca0:	f7ff fed8 	bl	8010a54 <_Balloc>
 8010ca4:	b930      	cbnz	r0, 8010cb4 <__multiply+0x44>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	4b44      	ldr	r3, [pc, #272]	; (8010dbc <__multiply+0x14c>)
 8010caa:	4845      	ldr	r0, [pc, #276]	; (8010dc0 <__multiply+0x150>)
 8010cac:	f240 115d 	movw	r1, #349	; 0x15d
 8010cb0:	f000 fbf4 	bl	801149c <__assert_func>
 8010cb4:	f100 0514 	add.w	r5, r0, #20
 8010cb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010cbc:	462b      	mov	r3, r5
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	4543      	cmp	r3, r8
 8010cc2:	d321      	bcc.n	8010d08 <__multiply+0x98>
 8010cc4:	f104 0314 	add.w	r3, r4, #20
 8010cc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ccc:	f109 0314 	add.w	r3, r9, #20
 8010cd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010cd4:	9202      	str	r2, [sp, #8]
 8010cd6:	1b3a      	subs	r2, r7, r4
 8010cd8:	3a15      	subs	r2, #21
 8010cda:	f022 0203 	bic.w	r2, r2, #3
 8010cde:	3204      	adds	r2, #4
 8010ce0:	f104 0115 	add.w	r1, r4, #21
 8010ce4:	428f      	cmp	r7, r1
 8010ce6:	bf38      	it	cc
 8010ce8:	2204      	movcc	r2, #4
 8010cea:	9201      	str	r2, [sp, #4]
 8010cec:	9a02      	ldr	r2, [sp, #8]
 8010cee:	9303      	str	r3, [sp, #12]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d80c      	bhi.n	8010d0e <__multiply+0x9e>
 8010cf4:	2e00      	cmp	r6, #0
 8010cf6:	dd03      	ble.n	8010d00 <__multiply+0x90>
 8010cf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d05a      	beq.n	8010db6 <__multiply+0x146>
 8010d00:	6106      	str	r6, [r0, #16]
 8010d02:	b005      	add	sp, #20
 8010d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d08:	f843 2b04 	str.w	r2, [r3], #4
 8010d0c:	e7d8      	b.n	8010cc0 <__multiply+0x50>
 8010d0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d12:	f1ba 0f00 	cmp.w	sl, #0
 8010d16:	d024      	beq.n	8010d62 <__multiply+0xf2>
 8010d18:	f104 0e14 	add.w	lr, r4, #20
 8010d1c:	46a9      	mov	r9, r5
 8010d1e:	f04f 0c00 	mov.w	ip, #0
 8010d22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d26:	f8d9 1000 	ldr.w	r1, [r9]
 8010d2a:	fa1f fb82 	uxth.w	fp, r2
 8010d2e:	b289      	uxth	r1, r1
 8010d30:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010d38:	f8d9 2000 	ldr.w	r2, [r9]
 8010d3c:	4461      	add	r1, ip
 8010d3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d42:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d4a:	b289      	uxth	r1, r1
 8010d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d50:	4577      	cmp	r7, lr
 8010d52:	f849 1b04 	str.w	r1, [r9], #4
 8010d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d5a:	d8e2      	bhi.n	8010d22 <__multiply+0xb2>
 8010d5c:	9a01      	ldr	r2, [sp, #4]
 8010d5e:	f845 c002 	str.w	ip, [r5, r2]
 8010d62:	9a03      	ldr	r2, [sp, #12]
 8010d64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d68:	3304      	adds	r3, #4
 8010d6a:	f1b9 0f00 	cmp.w	r9, #0
 8010d6e:	d020      	beq.n	8010db2 <__multiply+0x142>
 8010d70:	6829      	ldr	r1, [r5, #0]
 8010d72:	f104 0c14 	add.w	ip, r4, #20
 8010d76:	46ae      	mov	lr, r5
 8010d78:	f04f 0a00 	mov.w	sl, #0
 8010d7c:	f8bc b000 	ldrh.w	fp, [ip]
 8010d80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d84:	fb09 220b 	mla	r2, r9, fp, r2
 8010d88:	4492      	add	sl, r2
 8010d8a:	b289      	uxth	r1, r1
 8010d8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010d90:	f84e 1b04 	str.w	r1, [lr], #4
 8010d94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d98:	f8be 1000 	ldrh.w	r1, [lr]
 8010d9c:	0c12      	lsrs	r2, r2, #16
 8010d9e:	fb09 1102 	mla	r1, r9, r2, r1
 8010da2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010da6:	4567      	cmp	r7, ip
 8010da8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010dac:	d8e6      	bhi.n	8010d7c <__multiply+0x10c>
 8010dae:	9a01      	ldr	r2, [sp, #4]
 8010db0:	50a9      	str	r1, [r5, r2]
 8010db2:	3504      	adds	r5, #4
 8010db4:	e79a      	b.n	8010cec <__multiply+0x7c>
 8010db6:	3e01      	subs	r6, #1
 8010db8:	e79c      	b.n	8010cf4 <__multiply+0x84>
 8010dba:	bf00      	nop
 8010dbc:	08028b07 	.word	0x08028b07
 8010dc0:	08028b18 	.word	0x08028b18

08010dc4 <__pow5mult>:
 8010dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc8:	4615      	mov	r5, r2
 8010dca:	f012 0203 	ands.w	r2, r2, #3
 8010dce:	4606      	mov	r6, r0
 8010dd0:	460f      	mov	r7, r1
 8010dd2:	d007      	beq.n	8010de4 <__pow5mult+0x20>
 8010dd4:	4c25      	ldr	r4, [pc, #148]	; (8010e6c <__pow5mult+0xa8>)
 8010dd6:	3a01      	subs	r2, #1
 8010dd8:	2300      	movs	r3, #0
 8010dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010dde:	f7ff fe9b 	bl	8010b18 <__multadd>
 8010de2:	4607      	mov	r7, r0
 8010de4:	10ad      	asrs	r5, r5, #2
 8010de6:	d03d      	beq.n	8010e64 <__pow5mult+0xa0>
 8010de8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010dea:	b97c      	cbnz	r4, 8010e0c <__pow5mult+0x48>
 8010dec:	2010      	movs	r0, #16
 8010dee:	f7fe fa07 	bl	800f200 <malloc>
 8010df2:	4602      	mov	r2, r0
 8010df4:	6270      	str	r0, [r6, #36]	; 0x24
 8010df6:	b928      	cbnz	r0, 8010e04 <__pow5mult+0x40>
 8010df8:	4b1d      	ldr	r3, [pc, #116]	; (8010e70 <__pow5mult+0xac>)
 8010dfa:	481e      	ldr	r0, [pc, #120]	; (8010e74 <__pow5mult+0xb0>)
 8010dfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e00:	f000 fb4c 	bl	801149c <__assert_func>
 8010e04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e08:	6004      	str	r4, [r0, #0]
 8010e0a:	60c4      	str	r4, [r0, #12]
 8010e0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e14:	b94c      	cbnz	r4, 8010e2a <__pow5mult+0x66>
 8010e16:	f240 2171 	movw	r1, #625	; 0x271
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	f7ff ff12 	bl	8010c44 <__i2b>
 8010e20:	2300      	movs	r3, #0
 8010e22:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e26:	4604      	mov	r4, r0
 8010e28:	6003      	str	r3, [r0, #0]
 8010e2a:	f04f 0900 	mov.w	r9, #0
 8010e2e:	07eb      	lsls	r3, r5, #31
 8010e30:	d50a      	bpl.n	8010e48 <__pow5mult+0x84>
 8010e32:	4639      	mov	r1, r7
 8010e34:	4622      	mov	r2, r4
 8010e36:	4630      	mov	r0, r6
 8010e38:	f7ff ff1a 	bl	8010c70 <__multiply>
 8010e3c:	4639      	mov	r1, r7
 8010e3e:	4680      	mov	r8, r0
 8010e40:	4630      	mov	r0, r6
 8010e42:	f7ff fe47 	bl	8010ad4 <_Bfree>
 8010e46:	4647      	mov	r7, r8
 8010e48:	106d      	asrs	r5, r5, #1
 8010e4a:	d00b      	beq.n	8010e64 <__pow5mult+0xa0>
 8010e4c:	6820      	ldr	r0, [r4, #0]
 8010e4e:	b938      	cbnz	r0, 8010e60 <__pow5mult+0x9c>
 8010e50:	4622      	mov	r2, r4
 8010e52:	4621      	mov	r1, r4
 8010e54:	4630      	mov	r0, r6
 8010e56:	f7ff ff0b 	bl	8010c70 <__multiply>
 8010e5a:	6020      	str	r0, [r4, #0]
 8010e5c:	f8c0 9000 	str.w	r9, [r0]
 8010e60:	4604      	mov	r4, r0
 8010e62:	e7e4      	b.n	8010e2e <__pow5mult+0x6a>
 8010e64:	4638      	mov	r0, r7
 8010e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e6a:	bf00      	nop
 8010e6c:	08028c68 	.word	0x08028c68
 8010e70:	08028a95 	.word	0x08028a95
 8010e74:	08028b18 	.word	0x08028b18

08010e78 <__lshift>:
 8010e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7c:	460c      	mov	r4, r1
 8010e7e:	6849      	ldr	r1, [r1, #4]
 8010e80:	6923      	ldr	r3, [r4, #16]
 8010e82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e86:	68a3      	ldr	r3, [r4, #8]
 8010e88:	4607      	mov	r7, r0
 8010e8a:	4691      	mov	r9, r2
 8010e8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e90:	f108 0601 	add.w	r6, r8, #1
 8010e94:	42b3      	cmp	r3, r6
 8010e96:	db0b      	blt.n	8010eb0 <__lshift+0x38>
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f7ff fddb 	bl	8010a54 <_Balloc>
 8010e9e:	4605      	mov	r5, r0
 8010ea0:	b948      	cbnz	r0, 8010eb6 <__lshift+0x3e>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	4b2a      	ldr	r3, [pc, #168]	; (8010f50 <__lshift+0xd8>)
 8010ea6:	482b      	ldr	r0, [pc, #172]	; (8010f54 <__lshift+0xdc>)
 8010ea8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010eac:	f000 faf6 	bl	801149c <__assert_func>
 8010eb0:	3101      	adds	r1, #1
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	e7ee      	b.n	8010e94 <__lshift+0x1c>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	f100 0114 	add.w	r1, r0, #20
 8010ebc:	f100 0210 	add.w	r2, r0, #16
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	4553      	cmp	r3, sl
 8010ec4:	db37      	blt.n	8010f36 <__lshift+0xbe>
 8010ec6:	6920      	ldr	r0, [r4, #16]
 8010ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ecc:	f104 0314 	add.w	r3, r4, #20
 8010ed0:	f019 091f 	ands.w	r9, r9, #31
 8010ed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010edc:	d02f      	beq.n	8010f3e <__lshift+0xc6>
 8010ede:	f1c9 0e20 	rsb	lr, r9, #32
 8010ee2:	468a      	mov	sl, r1
 8010ee4:	f04f 0c00 	mov.w	ip, #0
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	fa02 f209 	lsl.w	r2, r2, r9
 8010eee:	ea42 020c 	orr.w	r2, r2, ip
 8010ef2:	f84a 2b04 	str.w	r2, [sl], #4
 8010ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010efa:	4298      	cmp	r0, r3
 8010efc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010f00:	d8f2      	bhi.n	8010ee8 <__lshift+0x70>
 8010f02:	1b03      	subs	r3, r0, r4
 8010f04:	3b15      	subs	r3, #21
 8010f06:	f023 0303 	bic.w	r3, r3, #3
 8010f0a:	3304      	adds	r3, #4
 8010f0c:	f104 0215 	add.w	r2, r4, #21
 8010f10:	4290      	cmp	r0, r2
 8010f12:	bf38      	it	cc
 8010f14:	2304      	movcc	r3, #4
 8010f16:	f841 c003 	str.w	ip, [r1, r3]
 8010f1a:	f1bc 0f00 	cmp.w	ip, #0
 8010f1e:	d001      	beq.n	8010f24 <__lshift+0xac>
 8010f20:	f108 0602 	add.w	r6, r8, #2
 8010f24:	3e01      	subs	r6, #1
 8010f26:	4638      	mov	r0, r7
 8010f28:	612e      	str	r6, [r5, #16]
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	f7ff fdd2 	bl	8010ad4 <_Bfree>
 8010f30:	4628      	mov	r0, r5
 8010f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f36:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	e7c1      	b.n	8010ec2 <__lshift+0x4a>
 8010f3e:	3904      	subs	r1, #4
 8010f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f44:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f48:	4298      	cmp	r0, r3
 8010f4a:	d8f9      	bhi.n	8010f40 <__lshift+0xc8>
 8010f4c:	e7ea      	b.n	8010f24 <__lshift+0xac>
 8010f4e:	bf00      	nop
 8010f50:	08028b07 	.word	0x08028b07
 8010f54:	08028b18 	.word	0x08028b18

08010f58 <__mcmp>:
 8010f58:	b530      	push	{r4, r5, lr}
 8010f5a:	6902      	ldr	r2, [r0, #16]
 8010f5c:	690c      	ldr	r4, [r1, #16]
 8010f5e:	1b12      	subs	r2, r2, r4
 8010f60:	d10e      	bne.n	8010f80 <__mcmp+0x28>
 8010f62:	f100 0314 	add.w	r3, r0, #20
 8010f66:	3114      	adds	r1, #20
 8010f68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f78:	42a5      	cmp	r5, r4
 8010f7a:	d003      	beq.n	8010f84 <__mcmp+0x2c>
 8010f7c:	d305      	bcc.n	8010f8a <__mcmp+0x32>
 8010f7e:	2201      	movs	r2, #1
 8010f80:	4610      	mov	r0, r2
 8010f82:	bd30      	pop	{r4, r5, pc}
 8010f84:	4283      	cmp	r3, r0
 8010f86:	d3f3      	bcc.n	8010f70 <__mcmp+0x18>
 8010f88:	e7fa      	b.n	8010f80 <__mcmp+0x28>
 8010f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f8e:	e7f7      	b.n	8010f80 <__mcmp+0x28>

08010f90 <__mdiff>:
 8010f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	460c      	mov	r4, r1
 8010f96:	4606      	mov	r6, r0
 8010f98:	4611      	mov	r1, r2
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	4690      	mov	r8, r2
 8010f9e:	f7ff ffdb 	bl	8010f58 <__mcmp>
 8010fa2:	1e05      	subs	r5, r0, #0
 8010fa4:	d110      	bne.n	8010fc8 <__mdiff+0x38>
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f7ff fd53 	bl	8010a54 <_Balloc>
 8010fae:	b930      	cbnz	r0, 8010fbe <__mdiff+0x2e>
 8010fb0:	4b3a      	ldr	r3, [pc, #232]	; (801109c <__mdiff+0x10c>)
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	f240 2132 	movw	r1, #562	; 0x232
 8010fb8:	4839      	ldr	r0, [pc, #228]	; (80110a0 <__mdiff+0x110>)
 8010fba:	f000 fa6f 	bl	801149c <__assert_func>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc8:	bfa4      	itt	ge
 8010fca:	4643      	movge	r3, r8
 8010fcc:	46a0      	movge	r8, r4
 8010fce:	4630      	mov	r0, r6
 8010fd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010fd4:	bfa6      	itte	ge
 8010fd6:	461c      	movge	r4, r3
 8010fd8:	2500      	movge	r5, #0
 8010fda:	2501      	movlt	r5, #1
 8010fdc:	f7ff fd3a 	bl	8010a54 <_Balloc>
 8010fe0:	b920      	cbnz	r0, 8010fec <__mdiff+0x5c>
 8010fe2:	4b2e      	ldr	r3, [pc, #184]	; (801109c <__mdiff+0x10c>)
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010fea:	e7e5      	b.n	8010fb8 <__mdiff+0x28>
 8010fec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ff0:	6926      	ldr	r6, [r4, #16]
 8010ff2:	60c5      	str	r5, [r0, #12]
 8010ff4:	f104 0914 	add.w	r9, r4, #20
 8010ff8:	f108 0514 	add.w	r5, r8, #20
 8010ffc:	f100 0e14 	add.w	lr, r0, #20
 8011000:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011004:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011008:	f108 0210 	add.w	r2, r8, #16
 801100c:	46f2      	mov	sl, lr
 801100e:	2100      	movs	r1, #0
 8011010:	f859 3b04 	ldr.w	r3, [r9], #4
 8011014:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011018:	fa1f f883 	uxth.w	r8, r3
 801101c:	fa11 f18b 	uxtah	r1, r1, fp
 8011020:	0c1b      	lsrs	r3, r3, #16
 8011022:	eba1 0808 	sub.w	r8, r1, r8
 8011026:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801102a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801102e:	fa1f f888 	uxth.w	r8, r8
 8011032:	1419      	asrs	r1, r3, #16
 8011034:	454e      	cmp	r6, r9
 8011036:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801103a:	f84a 3b04 	str.w	r3, [sl], #4
 801103e:	d8e7      	bhi.n	8011010 <__mdiff+0x80>
 8011040:	1b33      	subs	r3, r6, r4
 8011042:	3b15      	subs	r3, #21
 8011044:	f023 0303 	bic.w	r3, r3, #3
 8011048:	3304      	adds	r3, #4
 801104a:	3415      	adds	r4, #21
 801104c:	42a6      	cmp	r6, r4
 801104e:	bf38      	it	cc
 8011050:	2304      	movcc	r3, #4
 8011052:	441d      	add	r5, r3
 8011054:	4473      	add	r3, lr
 8011056:	469e      	mov	lr, r3
 8011058:	462e      	mov	r6, r5
 801105a:	4566      	cmp	r6, ip
 801105c:	d30e      	bcc.n	801107c <__mdiff+0xec>
 801105e:	f10c 0203 	add.w	r2, ip, #3
 8011062:	1b52      	subs	r2, r2, r5
 8011064:	f022 0203 	bic.w	r2, r2, #3
 8011068:	3d03      	subs	r5, #3
 801106a:	45ac      	cmp	ip, r5
 801106c:	bf38      	it	cc
 801106e:	2200      	movcc	r2, #0
 8011070:	441a      	add	r2, r3
 8011072:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011076:	b17b      	cbz	r3, 8011098 <__mdiff+0x108>
 8011078:	6107      	str	r7, [r0, #16]
 801107a:	e7a3      	b.n	8010fc4 <__mdiff+0x34>
 801107c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011080:	fa11 f288 	uxtah	r2, r1, r8
 8011084:	1414      	asrs	r4, r2, #16
 8011086:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801108a:	b292      	uxth	r2, r2
 801108c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011090:	f84e 2b04 	str.w	r2, [lr], #4
 8011094:	1421      	asrs	r1, r4, #16
 8011096:	e7e0      	b.n	801105a <__mdiff+0xca>
 8011098:	3f01      	subs	r7, #1
 801109a:	e7ea      	b.n	8011072 <__mdiff+0xe2>
 801109c:	08028b07 	.word	0x08028b07
 80110a0:	08028b18 	.word	0x08028b18

080110a4 <__d2b>:
 80110a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110a8:	4689      	mov	r9, r1
 80110aa:	2101      	movs	r1, #1
 80110ac:	ec57 6b10 	vmov	r6, r7, d0
 80110b0:	4690      	mov	r8, r2
 80110b2:	f7ff fccf 	bl	8010a54 <_Balloc>
 80110b6:	4604      	mov	r4, r0
 80110b8:	b930      	cbnz	r0, 80110c8 <__d2b+0x24>
 80110ba:	4602      	mov	r2, r0
 80110bc:	4b25      	ldr	r3, [pc, #148]	; (8011154 <__d2b+0xb0>)
 80110be:	4826      	ldr	r0, [pc, #152]	; (8011158 <__d2b+0xb4>)
 80110c0:	f240 310a 	movw	r1, #778	; 0x30a
 80110c4:	f000 f9ea 	bl	801149c <__assert_func>
 80110c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110d0:	bb35      	cbnz	r5, 8011120 <__d2b+0x7c>
 80110d2:	2e00      	cmp	r6, #0
 80110d4:	9301      	str	r3, [sp, #4]
 80110d6:	d028      	beq.n	801112a <__d2b+0x86>
 80110d8:	4668      	mov	r0, sp
 80110da:	9600      	str	r6, [sp, #0]
 80110dc:	f7ff fd82 	bl	8010be4 <__lo0bits>
 80110e0:	9900      	ldr	r1, [sp, #0]
 80110e2:	b300      	cbz	r0, 8011126 <__d2b+0x82>
 80110e4:	9a01      	ldr	r2, [sp, #4]
 80110e6:	f1c0 0320 	rsb	r3, r0, #32
 80110ea:	fa02 f303 	lsl.w	r3, r2, r3
 80110ee:	430b      	orrs	r3, r1
 80110f0:	40c2      	lsrs	r2, r0
 80110f2:	6163      	str	r3, [r4, #20]
 80110f4:	9201      	str	r2, [sp, #4]
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	61a3      	str	r3, [r4, #24]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	bf14      	ite	ne
 80110fe:	2202      	movne	r2, #2
 8011100:	2201      	moveq	r2, #1
 8011102:	6122      	str	r2, [r4, #16]
 8011104:	b1d5      	cbz	r5, 801113c <__d2b+0x98>
 8011106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801110a:	4405      	add	r5, r0
 801110c:	f8c9 5000 	str.w	r5, [r9]
 8011110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011114:	f8c8 0000 	str.w	r0, [r8]
 8011118:	4620      	mov	r0, r4
 801111a:	b003      	add	sp, #12
 801111c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011124:	e7d5      	b.n	80110d2 <__d2b+0x2e>
 8011126:	6161      	str	r1, [r4, #20]
 8011128:	e7e5      	b.n	80110f6 <__d2b+0x52>
 801112a:	a801      	add	r0, sp, #4
 801112c:	f7ff fd5a 	bl	8010be4 <__lo0bits>
 8011130:	9b01      	ldr	r3, [sp, #4]
 8011132:	6163      	str	r3, [r4, #20]
 8011134:	2201      	movs	r2, #1
 8011136:	6122      	str	r2, [r4, #16]
 8011138:	3020      	adds	r0, #32
 801113a:	e7e3      	b.n	8011104 <__d2b+0x60>
 801113c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011144:	f8c9 0000 	str.w	r0, [r9]
 8011148:	6918      	ldr	r0, [r3, #16]
 801114a:	f7ff fd2b 	bl	8010ba4 <__hi0bits>
 801114e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011152:	e7df      	b.n	8011114 <__d2b+0x70>
 8011154:	08028b07 	.word	0x08028b07
 8011158:	08028b18 	.word	0x08028b18

0801115c <_calloc_r>:
 801115c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801115e:	fba1 2402 	umull	r2, r4, r1, r2
 8011162:	b94c      	cbnz	r4, 8011178 <_calloc_r+0x1c>
 8011164:	4611      	mov	r1, r2
 8011166:	9201      	str	r2, [sp, #4]
 8011168:	f7fe f8d4 	bl	800f314 <_malloc_r>
 801116c:	9a01      	ldr	r2, [sp, #4]
 801116e:	4605      	mov	r5, r0
 8011170:	b930      	cbnz	r0, 8011180 <_calloc_r+0x24>
 8011172:	4628      	mov	r0, r5
 8011174:	b003      	add	sp, #12
 8011176:	bd30      	pop	{r4, r5, pc}
 8011178:	220c      	movs	r2, #12
 801117a:	6002      	str	r2, [r0, #0]
 801117c:	2500      	movs	r5, #0
 801117e:	e7f8      	b.n	8011172 <_calloc_r+0x16>
 8011180:	4621      	mov	r1, r4
 8011182:	f7fe f853 	bl	800f22c <memset>
 8011186:	e7f4      	b.n	8011172 <_calloc_r+0x16>

08011188 <_realloc_r>:
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	4680      	mov	r8, r0
 801118e:	4614      	mov	r4, r2
 8011190:	460e      	mov	r6, r1
 8011192:	b921      	cbnz	r1, 801119e <_realloc_r+0x16>
 8011194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011198:	4611      	mov	r1, r2
 801119a:	f7fe b8bb 	b.w	800f314 <_malloc_r>
 801119e:	b92a      	cbnz	r2, 80111ac <_realloc_r+0x24>
 80111a0:	f7fe f84c 	bl	800f23c <_free_r>
 80111a4:	4625      	mov	r5, r4
 80111a6:	4628      	mov	r0, r5
 80111a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ac:	f000 f9d5 	bl	801155a <_malloc_usable_size_r>
 80111b0:	4284      	cmp	r4, r0
 80111b2:	4607      	mov	r7, r0
 80111b4:	d802      	bhi.n	80111bc <_realloc_r+0x34>
 80111b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111ba:	d812      	bhi.n	80111e2 <_realloc_r+0x5a>
 80111bc:	4621      	mov	r1, r4
 80111be:	4640      	mov	r0, r8
 80111c0:	f7fe f8a8 	bl	800f314 <_malloc_r>
 80111c4:	4605      	mov	r5, r0
 80111c6:	2800      	cmp	r0, #0
 80111c8:	d0ed      	beq.n	80111a6 <_realloc_r+0x1e>
 80111ca:	42bc      	cmp	r4, r7
 80111cc:	4622      	mov	r2, r4
 80111ce:	4631      	mov	r1, r6
 80111d0:	bf28      	it	cs
 80111d2:	463a      	movcs	r2, r7
 80111d4:	f7fe f81c 	bl	800f210 <memcpy>
 80111d8:	4631      	mov	r1, r6
 80111da:	4640      	mov	r0, r8
 80111dc:	f7fe f82e 	bl	800f23c <_free_r>
 80111e0:	e7e1      	b.n	80111a6 <_realloc_r+0x1e>
 80111e2:	4635      	mov	r5, r6
 80111e4:	e7df      	b.n	80111a6 <_realloc_r+0x1e>

080111e6 <__ssputs_r>:
 80111e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ea:	688e      	ldr	r6, [r1, #8]
 80111ec:	429e      	cmp	r6, r3
 80111ee:	4682      	mov	sl, r0
 80111f0:	460c      	mov	r4, r1
 80111f2:	4690      	mov	r8, r2
 80111f4:	461f      	mov	r7, r3
 80111f6:	d838      	bhi.n	801126a <__ssputs_r+0x84>
 80111f8:	898a      	ldrh	r2, [r1, #12]
 80111fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111fe:	d032      	beq.n	8011266 <__ssputs_r+0x80>
 8011200:	6825      	ldr	r5, [r4, #0]
 8011202:	6909      	ldr	r1, [r1, #16]
 8011204:	eba5 0901 	sub.w	r9, r5, r1
 8011208:	6965      	ldr	r5, [r4, #20]
 801120a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801120e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011212:	3301      	adds	r3, #1
 8011214:	444b      	add	r3, r9
 8011216:	106d      	asrs	r5, r5, #1
 8011218:	429d      	cmp	r5, r3
 801121a:	bf38      	it	cc
 801121c:	461d      	movcc	r5, r3
 801121e:	0553      	lsls	r3, r2, #21
 8011220:	d531      	bpl.n	8011286 <__ssputs_r+0xa0>
 8011222:	4629      	mov	r1, r5
 8011224:	f7fe f876 	bl	800f314 <_malloc_r>
 8011228:	4606      	mov	r6, r0
 801122a:	b950      	cbnz	r0, 8011242 <__ssputs_r+0x5c>
 801122c:	230c      	movs	r3, #12
 801122e:	f8ca 3000 	str.w	r3, [sl]
 8011232:	89a3      	ldrh	r3, [r4, #12]
 8011234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011238:	81a3      	strh	r3, [r4, #12]
 801123a:	f04f 30ff 	mov.w	r0, #4294967295
 801123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011242:	6921      	ldr	r1, [r4, #16]
 8011244:	464a      	mov	r2, r9
 8011246:	f7fd ffe3 	bl	800f210 <memcpy>
 801124a:	89a3      	ldrh	r3, [r4, #12]
 801124c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011254:	81a3      	strh	r3, [r4, #12]
 8011256:	6126      	str	r6, [r4, #16]
 8011258:	6165      	str	r5, [r4, #20]
 801125a:	444e      	add	r6, r9
 801125c:	eba5 0509 	sub.w	r5, r5, r9
 8011260:	6026      	str	r6, [r4, #0]
 8011262:	60a5      	str	r5, [r4, #8]
 8011264:	463e      	mov	r6, r7
 8011266:	42be      	cmp	r6, r7
 8011268:	d900      	bls.n	801126c <__ssputs_r+0x86>
 801126a:	463e      	mov	r6, r7
 801126c:	6820      	ldr	r0, [r4, #0]
 801126e:	4632      	mov	r2, r6
 8011270:	4641      	mov	r1, r8
 8011272:	f000 f958 	bl	8011526 <memmove>
 8011276:	68a3      	ldr	r3, [r4, #8]
 8011278:	1b9b      	subs	r3, r3, r6
 801127a:	60a3      	str	r3, [r4, #8]
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	4433      	add	r3, r6
 8011280:	6023      	str	r3, [r4, #0]
 8011282:	2000      	movs	r0, #0
 8011284:	e7db      	b.n	801123e <__ssputs_r+0x58>
 8011286:	462a      	mov	r2, r5
 8011288:	f7ff ff7e 	bl	8011188 <_realloc_r>
 801128c:	4606      	mov	r6, r0
 801128e:	2800      	cmp	r0, #0
 8011290:	d1e1      	bne.n	8011256 <__ssputs_r+0x70>
 8011292:	6921      	ldr	r1, [r4, #16]
 8011294:	4650      	mov	r0, sl
 8011296:	f7fd ffd1 	bl	800f23c <_free_r>
 801129a:	e7c7      	b.n	801122c <__ssputs_r+0x46>

0801129c <_svfiprintf_r>:
 801129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a0:	4698      	mov	r8, r3
 80112a2:	898b      	ldrh	r3, [r1, #12]
 80112a4:	061b      	lsls	r3, r3, #24
 80112a6:	b09d      	sub	sp, #116	; 0x74
 80112a8:	4607      	mov	r7, r0
 80112aa:	460d      	mov	r5, r1
 80112ac:	4614      	mov	r4, r2
 80112ae:	d50e      	bpl.n	80112ce <_svfiprintf_r+0x32>
 80112b0:	690b      	ldr	r3, [r1, #16]
 80112b2:	b963      	cbnz	r3, 80112ce <_svfiprintf_r+0x32>
 80112b4:	2140      	movs	r1, #64	; 0x40
 80112b6:	f7fe f82d 	bl	800f314 <_malloc_r>
 80112ba:	6028      	str	r0, [r5, #0]
 80112bc:	6128      	str	r0, [r5, #16]
 80112be:	b920      	cbnz	r0, 80112ca <_svfiprintf_r+0x2e>
 80112c0:	230c      	movs	r3, #12
 80112c2:	603b      	str	r3, [r7, #0]
 80112c4:	f04f 30ff 	mov.w	r0, #4294967295
 80112c8:	e0d1      	b.n	801146e <_svfiprintf_r+0x1d2>
 80112ca:	2340      	movs	r3, #64	; 0x40
 80112cc:	616b      	str	r3, [r5, #20]
 80112ce:	2300      	movs	r3, #0
 80112d0:	9309      	str	r3, [sp, #36]	; 0x24
 80112d2:	2320      	movs	r3, #32
 80112d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80112dc:	2330      	movs	r3, #48	; 0x30
 80112de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011488 <_svfiprintf_r+0x1ec>
 80112e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112e6:	f04f 0901 	mov.w	r9, #1
 80112ea:	4623      	mov	r3, r4
 80112ec:	469a      	mov	sl, r3
 80112ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112f2:	b10a      	cbz	r2, 80112f8 <_svfiprintf_r+0x5c>
 80112f4:	2a25      	cmp	r2, #37	; 0x25
 80112f6:	d1f9      	bne.n	80112ec <_svfiprintf_r+0x50>
 80112f8:	ebba 0b04 	subs.w	fp, sl, r4
 80112fc:	d00b      	beq.n	8011316 <_svfiprintf_r+0x7a>
 80112fe:	465b      	mov	r3, fp
 8011300:	4622      	mov	r2, r4
 8011302:	4629      	mov	r1, r5
 8011304:	4638      	mov	r0, r7
 8011306:	f7ff ff6e 	bl	80111e6 <__ssputs_r>
 801130a:	3001      	adds	r0, #1
 801130c:	f000 80aa 	beq.w	8011464 <_svfiprintf_r+0x1c8>
 8011310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011312:	445a      	add	r2, fp
 8011314:	9209      	str	r2, [sp, #36]	; 0x24
 8011316:	f89a 3000 	ldrb.w	r3, [sl]
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 80a2 	beq.w	8011464 <_svfiprintf_r+0x1c8>
 8011320:	2300      	movs	r3, #0
 8011322:	f04f 32ff 	mov.w	r2, #4294967295
 8011326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801132a:	f10a 0a01 	add.w	sl, sl, #1
 801132e:	9304      	str	r3, [sp, #16]
 8011330:	9307      	str	r3, [sp, #28]
 8011332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011336:	931a      	str	r3, [sp, #104]	; 0x68
 8011338:	4654      	mov	r4, sl
 801133a:	2205      	movs	r2, #5
 801133c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011340:	4851      	ldr	r0, [pc, #324]	; (8011488 <_svfiprintf_r+0x1ec>)
 8011342:	f7ee ff7d 	bl	8000240 <memchr>
 8011346:	9a04      	ldr	r2, [sp, #16]
 8011348:	b9d8      	cbnz	r0, 8011382 <_svfiprintf_r+0xe6>
 801134a:	06d0      	lsls	r0, r2, #27
 801134c:	bf44      	itt	mi
 801134e:	2320      	movmi	r3, #32
 8011350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011354:	0711      	lsls	r1, r2, #28
 8011356:	bf44      	itt	mi
 8011358:	232b      	movmi	r3, #43	; 0x2b
 801135a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801135e:	f89a 3000 	ldrb.w	r3, [sl]
 8011362:	2b2a      	cmp	r3, #42	; 0x2a
 8011364:	d015      	beq.n	8011392 <_svfiprintf_r+0xf6>
 8011366:	9a07      	ldr	r2, [sp, #28]
 8011368:	4654      	mov	r4, sl
 801136a:	2000      	movs	r0, #0
 801136c:	f04f 0c0a 	mov.w	ip, #10
 8011370:	4621      	mov	r1, r4
 8011372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011376:	3b30      	subs	r3, #48	; 0x30
 8011378:	2b09      	cmp	r3, #9
 801137a:	d94e      	bls.n	801141a <_svfiprintf_r+0x17e>
 801137c:	b1b0      	cbz	r0, 80113ac <_svfiprintf_r+0x110>
 801137e:	9207      	str	r2, [sp, #28]
 8011380:	e014      	b.n	80113ac <_svfiprintf_r+0x110>
 8011382:	eba0 0308 	sub.w	r3, r0, r8
 8011386:	fa09 f303 	lsl.w	r3, r9, r3
 801138a:	4313      	orrs	r3, r2
 801138c:	9304      	str	r3, [sp, #16]
 801138e:	46a2      	mov	sl, r4
 8011390:	e7d2      	b.n	8011338 <_svfiprintf_r+0x9c>
 8011392:	9b03      	ldr	r3, [sp, #12]
 8011394:	1d19      	adds	r1, r3, #4
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	9103      	str	r1, [sp, #12]
 801139a:	2b00      	cmp	r3, #0
 801139c:	bfbb      	ittet	lt
 801139e:	425b      	neglt	r3, r3
 80113a0:	f042 0202 	orrlt.w	r2, r2, #2
 80113a4:	9307      	strge	r3, [sp, #28]
 80113a6:	9307      	strlt	r3, [sp, #28]
 80113a8:	bfb8      	it	lt
 80113aa:	9204      	strlt	r2, [sp, #16]
 80113ac:	7823      	ldrb	r3, [r4, #0]
 80113ae:	2b2e      	cmp	r3, #46	; 0x2e
 80113b0:	d10c      	bne.n	80113cc <_svfiprintf_r+0x130>
 80113b2:	7863      	ldrb	r3, [r4, #1]
 80113b4:	2b2a      	cmp	r3, #42	; 0x2a
 80113b6:	d135      	bne.n	8011424 <_svfiprintf_r+0x188>
 80113b8:	9b03      	ldr	r3, [sp, #12]
 80113ba:	1d1a      	adds	r2, r3, #4
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	9203      	str	r2, [sp, #12]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	bfb8      	it	lt
 80113c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80113c8:	3402      	adds	r4, #2
 80113ca:	9305      	str	r3, [sp, #20]
 80113cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011498 <_svfiprintf_r+0x1fc>
 80113d0:	7821      	ldrb	r1, [r4, #0]
 80113d2:	2203      	movs	r2, #3
 80113d4:	4650      	mov	r0, sl
 80113d6:	f7ee ff33 	bl	8000240 <memchr>
 80113da:	b140      	cbz	r0, 80113ee <_svfiprintf_r+0x152>
 80113dc:	2340      	movs	r3, #64	; 0x40
 80113de:	eba0 000a 	sub.w	r0, r0, sl
 80113e2:	fa03 f000 	lsl.w	r0, r3, r0
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	4303      	orrs	r3, r0
 80113ea:	3401      	adds	r4, #1
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f2:	4826      	ldr	r0, [pc, #152]	; (801148c <_svfiprintf_r+0x1f0>)
 80113f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113f8:	2206      	movs	r2, #6
 80113fa:	f7ee ff21 	bl	8000240 <memchr>
 80113fe:	2800      	cmp	r0, #0
 8011400:	d038      	beq.n	8011474 <_svfiprintf_r+0x1d8>
 8011402:	4b23      	ldr	r3, [pc, #140]	; (8011490 <_svfiprintf_r+0x1f4>)
 8011404:	bb1b      	cbnz	r3, 801144e <_svfiprintf_r+0x1b2>
 8011406:	9b03      	ldr	r3, [sp, #12]
 8011408:	3307      	adds	r3, #7
 801140a:	f023 0307 	bic.w	r3, r3, #7
 801140e:	3308      	adds	r3, #8
 8011410:	9303      	str	r3, [sp, #12]
 8011412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011414:	4433      	add	r3, r6
 8011416:	9309      	str	r3, [sp, #36]	; 0x24
 8011418:	e767      	b.n	80112ea <_svfiprintf_r+0x4e>
 801141a:	fb0c 3202 	mla	r2, ip, r2, r3
 801141e:	460c      	mov	r4, r1
 8011420:	2001      	movs	r0, #1
 8011422:	e7a5      	b.n	8011370 <_svfiprintf_r+0xd4>
 8011424:	2300      	movs	r3, #0
 8011426:	3401      	adds	r4, #1
 8011428:	9305      	str	r3, [sp, #20]
 801142a:	4619      	mov	r1, r3
 801142c:	f04f 0c0a 	mov.w	ip, #10
 8011430:	4620      	mov	r0, r4
 8011432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011436:	3a30      	subs	r2, #48	; 0x30
 8011438:	2a09      	cmp	r2, #9
 801143a:	d903      	bls.n	8011444 <_svfiprintf_r+0x1a8>
 801143c:	2b00      	cmp	r3, #0
 801143e:	d0c5      	beq.n	80113cc <_svfiprintf_r+0x130>
 8011440:	9105      	str	r1, [sp, #20]
 8011442:	e7c3      	b.n	80113cc <_svfiprintf_r+0x130>
 8011444:	fb0c 2101 	mla	r1, ip, r1, r2
 8011448:	4604      	mov	r4, r0
 801144a:	2301      	movs	r3, #1
 801144c:	e7f0      	b.n	8011430 <_svfiprintf_r+0x194>
 801144e:	ab03      	add	r3, sp, #12
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	462a      	mov	r2, r5
 8011454:	4b0f      	ldr	r3, [pc, #60]	; (8011494 <_svfiprintf_r+0x1f8>)
 8011456:	a904      	add	r1, sp, #16
 8011458:	4638      	mov	r0, r7
 801145a:	f7fe f86f 	bl	800f53c <_printf_float>
 801145e:	1c42      	adds	r2, r0, #1
 8011460:	4606      	mov	r6, r0
 8011462:	d1d6      	bne.n	8011412 <_svfiprintf_r+0x176>
 8011464:	89ab      	ldrh	r3, [r5, #12]
 8011466:	065b      	lsls	r3, r3, #25
 8011468:	f53f af2c 	bmi.w	80112c4 <_svfiprintf_r+0x28>
 801146c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801146e:	b01d      	add	sp, #116	; 0x74
 8011470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011474:	ab03      	add	r3, sp, #12
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	462a      	mov	r2, r5
 801147a:	4b06      	ldr	r3, [pc, #24]	; (8011494 <_svfiprintf_r+0x1f8>)
 801147c:	a904      	add	r1, sp, #16
 801147e:	4638      	mov	r0, r7
 8011480:	f7fe fb00 	bl	800fa84 <_printf_i>
 8011484:	e7eb      	b.n	801145e <_svfiprintf_r+0x1c2>
 8011486:	bf00      	nop
 8011488:	08028c74 	.word	0x08028c74
 801148c:	08028c7e 	.word	0x08028c7e
 8011490:	0800f53d 	.word	0x0800f53d
 8011494:	080111e7 	.word	0x080111e7
 8011498:	08028c7a 	.word	0x08028c7a

0801149c <__assert_func>:
 801149c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801149e:	4614      	mov	r4, r2
 80114a0:	461a      	mov	r2, r3
 80114a2:	4b09      	ldr	r3, [pc, #36]	; (80114c8 <__assert_func+0x2c>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4605      	mov	r5, r0
 80114a8:	68d8      	ldr	r0, [r3, #12]
 80114aa:	b14c      	cbz	r4, 80114c0 <__assert_func+0x24>
 80114ac:	4b07      	ldr	r3, [pc, #28]	; (80114cc <__assert_func+0x30>)
 80114ae:	9100      	str	r1, [sp, #0]
 80114b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114b4:	4906      	ldr	r1, [pc, #24]	; (80114d0 <__assert_func+0x34>)
 80114b6:	462b      	mov	r3, r5
 80114b8:	f000 f80e 	bl	80114d8 <fiprintf>
 80114bc:	f000 fa7c 	bl	80119b8 <abort>
 80114c0:	4b04      	ldr	r3, [pc, #16]	; (80114d4 <__assert_func+0x38>)
 80114c2:	461c      	mov	r4, r3
 80114c4:	e7f3      	b.n	80114ae <__assert_func+0x12>
 80114c6:	bf00      	nop
 80114c8:	20000ef4 	.word	0x20000ef4
 80114cc:	08028c85 	.word	0x08028c85
 80114d0:	08028c92 	.word	0x08028c92
 80114d4:	08028cc0 	.word	0x08028cc0

080114d8 <fiprintf>:
 80114d8:	b40e      	push	{r1, r2, r3}
 80114da:	b503      	push	{r0, r1, lr}
 80114dc:	4601      	mov	r1, r0
 80114de:	ab03      	add	r3, sp, #12
 80114e0:	4805      	ldr	r0, [pc, #20]	; (80114f8 <fiprintf+0x20>)
 80114e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80114e6:	6800      	ldr	r0, [r0, #0]
 80114e8:	9301      	str	r3, [sp, #4]
 80114ea:	f000 f867 	bl	80115bc <_vfiprintf_r>
 80114ee:	b002      	add	sp, #8
 80114f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114f4:	b003      	add	sp, #12
 80114f6:	4770      	bx	lr
 80114f8:	20000ef4 	.word	0x20000ef4

080114fc <__retarget_lock_init_recursive>:
 80114fc:	4770      	bx	lr

080114fe <__retarget_lock_acquire_recursive>:
 80114fe:	4770      	bx	lr

08011500 <__retarget_lock_release_recursive>:
 8011500:	4770      	bx	lr

08011502 <__ascii_mbtowc>:
 8011502:	b082      	sub	sp, #8
 8011504:	b901      	cbnz	r1, 8011508 <__ascii_mbtowc+0x6>
 8011506:	a901      	add	r1, sp, #4
 8011508:	b142      	cbz	r2, 801151c <__ascii_mbtowc+0x1a>
 801150a:	b14b      	cbz	r3, 8011520 <__ascii_mbtowc+0x1e>
 801150c:	7813      	ldrb	r3, [r2, #0]
 801150e:	600b      	str	r3, [r1, #0]
 8011510:	7812      	ldrb	r2, [r2, #0]
 8011512:	1e10      	subs	r0, r2, #0
 8011514:	bf18      	it	ne
 8011516:	2001      	movne	r0, #1
 8011518:	b002      	add	sp, #8
 801151a:	4770      	bx	lr
 801151c:	4610      	mov	r0, r2
 801151e:	e7fb      	b.n	8011518 <__ascii_mbtowc+0x16>
 8011520:	f06f 0001 	mvn.w	r0, #1
 8011524:	e7f8      	b.n	8011518 <__ascii_mbtowc+0x16>

08011526 <memmove>:
 8011526:	4288      	cmp	r0, r1
 8011528:	b510      	push	{r4, lr}
 801152a:	eb01 0402 	add.w	r4, r1, r2
 801152e:	d902      	bls.n	8011536 <memmove+0x10>
 8011530:	4284      	cmp	r4, r0
 8011532:	4623      	mov	r3, r4
 8011534:	d807      	bhi.n	8011546 <memmove+0x20>
 8011536:	1e43      	subs	r3, r0, #1
 8011538:	42a1      	cmp	r1, r4
 801153a:	d008      	beq.n	801154e <memmove+0x28>
 801153c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011540:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011544:	e7f8      	b.n	8011538 <memmove+0x12>
 8011546:	4402      	add	r2, r0
 8011548:	4601      	mov	r1, r0
 801154a:	428a      	cmp	r2, r1
 801154c:	d100      	bne.n	8011550 <memmove+0x2a>
 801154e:	bd10      	pop	{r4, pc}
 8011550:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011554:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011558:	e7f7      	b.n	801154a <memmove+0x24>

0801155a <_malloc_usable_size_r>:
 801155a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801155e:	1f18      	subs	r0, r3, #4
 8011560:	2b00      	cmp	r3, #0
 8011562:	bfbc      	itt	lt
 8011564:	580b      	ldrlt	r3, [r1, r0]
 8011566:	18c0      	addlt	r0, r0, r3
 8011568:	4770      	bx	lr

0801156a <__sfputc_r>:
 801156a:	6893      	ldr	r3, [r2, #8]
 801156c:	3b01      	subs	r3, #1
 801156e:	2b00      	cmp	r3, #0
 8011570:	b410      	push	{r4}
 8011572:	6093      	str	r3, [r2, #8]
 8011574:	da08      	bge.n	8011588 <__sfputc_r+0x1e>
 8011576:	6994      	ldr	r4, [r2, #24]
 8011578:	42a3      	cmp	r3, r4
 801157a:	db01      	blt.n	8011580 <__sfputc_r+0x16>
 801157c:	290a      	cmp	r1, #10
 801157e:	d103      	bne.n	8011588 <__sfputc_r+0x1e>
 8011580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011584:	f000 b94a 	b.w	801181c <__swbuf_r>
 8011588:	6813      	ldr	r3, [r2, #0]
 801158a:	1c58      	adds	r0, r3, #1
 801158c:	6010      	str	r0, [r2, #0]
 801158e:	7019      	strb	r1, [r3, #0]
 8011590:	4608      	mov	r0, r1
 8011592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011596:	4770      	bx	lr

08011598 <__sfputs_r>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	4606      	mov	r6, r0
 801159c:	460f      	mov	r7, r1
 801159e:	4614      	mov	r4, r2
 80115a0:	18d5      	adds	r5, r2, r3
 80115a2:	42ac      	cmp	r4, r5
 80115a4:	d101      	bne.n	80115aa <__sfputs_r+0x12>
 80115a6:	2000      	movs	r0, #0
 80115a8:	e007      	b.n	80115ba <__sfputs_r+0x22>
 80115aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115ae:	463a      	mov	r2, r7
 80115b0:	4630      	mov	r0, r6
 80115b2:	f7ff ffda 	bl	801156a <__sfputc_r>
 80115b6:	1c43      	adds	r3, r0, #1
 80115b8:	d1f3      	bne.n	80115a2 <__sfputs_r+0xa>
 80115ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115bc <_vfiprintf_r>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	460d      	mov	r5, r1
 80115c2:	b09d      	sub	sp, #116	; 0x74
 80115c4:	4614      	mov	r4, r2
 80115c6:	4698      	mov	r8, r3
 80115c8:	4606      	mov	r6, r0
 80115ca:	b118      	cbz	r0, 80115d4 <_vfiprintf_r+0x18>
 80115cc:	6983      	ldr	r3, [r0, #24]
 80115ce:	b90b      	cbnz	r3, 80115d4 <_vfiprintf_r+0x18>
 80115d0:	f000 fb14 	bl	8011bfc <__sinit>
 80115d4:	4b89      	ldr	r3, [pc, #548]	; (80117fc <_vfiprintf_r+0x240>)
 80115d6:	429d      	cmp	r5, r3
 80115d8:	d11b      	bne.n	8011612 <_vfiprintf_r+0x56>
 80115da:	6875      	ldr	r5, [r6, #4]
 80115dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115de:	07d9      	lsls	r1, r3, #31
 80115e0:	d405      	bmi.n	80115ee <_vfiprintf_r+0x32>
 80115e2:	89ab      	ldrh	r3, [r5, #12]
 80115e4:	059a      	lsls	r2, r3, #22
 80115e6:	d402      	bmi.n	80115ee <_vfiprintf_r+0x32>
 80115e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ea:	f7ff ff88 	bl	80114fe <__retarget_lock_acquire_recursive>
 80115ee:	89ab      	ldrh	r3, [r5, #12]
 80115f0:	071b      	lsls	r3, r3, #28
 80115f2:	d501      	bpl.n	80115f8 <_vfiprintf_r+0x3c>
 80115f4:	692b      	ldr	r3, [r5, #16]
 80115f6:	b9eb      	cbnz	r3, 8011634 <_vfiprintf_r+0x78>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4630      	mov	r0, r6
 80115fc:	f000 f96e 	bl	80118dc <__swsetup_r>
 8011600:	b1c0      	cbz	r0, 8011634 <_vfiprintf_r+0x78>
 8011602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011604:	07dc      	lsls	r4, r3, #31
 8011606:	d50e      	bpl.n	8011626 <_vfiprintf_r+0x6a>
 8011608:	f04f 30ff 	mov.w	r0, #4294967295
 801160c:	b01d      	add	sp, #116	; 0x74
 801160e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011612:	4b7b      	ldr	r3, [pc, #492]	; (8011800 <_vfiprintf_r+0x244>)
 8011614:	429d      	cmp	r5, r3
 8011616:	d101      	bne.n	801161c <_vfiprintf_r+0x60>
 8011618:	68b5      	ldr	r5, [r6, #8]
 801161a:	e7df      	b.n	80115dc <_vfiprintf_r+0x20>
 801161c:	4b79      	ldr	r3, [pc, #484]	; (8011804 <_vfiprintf_r+0x248>)
 801161e:	429d      	cmp	r5, r3
 8011620:	bf08      	it	eq
 8011622:	68f5      	ldreq	r5, [r6, #12]
 8011624:	e7da      	b.n	80115dc <_vfiprintf_r+0x20>
 8011626:	89ab      	ldrh	r3, [r5, #12]
 8011628:	0598      	lsls	r0, r3, #22
 801162a:	d4ed      	bmi.n	8011608 <_vfiprintf_r+0x4c>
 801162c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801162e:	f7ff ff67 	bl	8011500 <__retarget_lock_release_recursive>
 8011632:	e7e9      	b.n	8011608 <_vfiprintf_r+0x4c>
 8011634:	2300      	movs	r3, #0
 8011636:	9309      	str	r3, [sp, #36]	; 0x24
 8011638:	2320      	movs	r3, #32
 801163a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801163e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011642:	2330      	movs	r3, #48	; 0x30
 8011644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011808 <_vfiprintf_r+0x24c>
 8011648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801164c:	f04f 0901 	mov.w	r9, #1
 8011650:	4623      	mov	r3, r4
 8011652:	469a      	mov	sl, r3
 8011654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011658:	b10a      	cbz	r2, 801165e <_vfiprintf_r+0xa2>
 801165a:	2a25      	cmp	r2, #37	; 0x25
 801165c:	d1f9      	bne.n	8011652 <_vfiprintf_r+0x96>
 801165e:	ebba 0b04 	subs.w	fp, sl, r4
 8011662:	d00b      	beq.n	801167c <_vfiprintf_r+0xc0>
 8011664:	465b      	mov	r3, fp
 8011666:	4622      	mov	r2, r4
 8011668:	4629      	mov	r1, r5
 801166a:	4630      	mov	r0, r6
 801166c:	f7ff ff94 	bl	8011598 <__sfputs_r>
 8011670:	3001      	adds	r0, #1
 8011672:	f000 80aa 	beq.w	80117ca <_vfiprintf_r+0x20e>
 8011676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011678:	445a      	add	r2, fp
 801167a:	9209      	str	r2, [sp, #36]	; 0x24
 801167c:	f89a 3000 	ldrb.w	r3, [sl]
 8011680:	2b00      	cmp	r3, #0
 8011682:	f000 80a2 	beq.w	80117ca <_vfiprintf_r+0x20e>
 8011686:	2300      	movs	r3, #0
 8011688:	f04f 32ff 	mov.w	r2, #4294967295
 801168c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011690:	f10a 0a01 	add.w	sl, sl, #1
 8011694:	9304      	str	r3, [sp, #16]
 8011696:	9307      	str	r3, [sp, #28]
 8011698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801169c:	931a      	str	r3, [sp, #104]	; 0x68
 801169e:	4654      	mov	r4, sl
 80116a0:	2205      	movs	r2, #5
 80116a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116a6:	4858      	ldr	r0, [pc, #352]	; (8011808 <_vfiprintf_r+0x24c>)
 80116a8:	f7ee fdca 	bl	8000240 <memchr>
 80116ac:	9a04      	ldr	r2, [sp, #16]
 80116ae:	b9d8      	cbnz	r0, 80116e8 <_vfiprintf_r+0x12c>
 80116b0:	06d1      	lsls	r1, r2, #27
 80116b2:	bf44      	itt	mi
 80116b4:	2320      	movmi	r3, #32
 80116b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116ba:	0713      	lsls	r3, r2, #28
 80116bc:	bf44      	itt	mi
 80116be:	232b      	movmi	r3, #43	; 0x2b
 80116c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116c4:	f89a 3000 	ldrb.w	r3, [sl]
 80116c8:	2b2a      	cmp	r3, #42	; 0x2a
 80116ca:	d015      	beq.n	80116f8 <_vfiprintf_r+0x13c>
 80116cc:	9a07      	ldr	r2, [sp, #28]
 80116ce:	4654      	mov	r4, sl
 80116d0:	2000      	movs	r0, #0
 80116d2:	f04f 0c0a 	mov.w	ip, #10
 80116d6:	4621      	mov	r1, r4
 80116d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116dc:	3b30      	subs	r3, #48	; 0x30
 80116de:	2b09      	cmp	r3, #9
 80116e0:	d94e      	bls.n	8011780 <_vfiprintf_r+0x1c4>
 80116e2:	b1b0      	cbz	r0, 8011712 <_vfiprintf_r+0x156>
 80116e4:	9207      	str	r2, [sp, #28]
 80116e6:	e014      	b.n	8011712 <_vfiprintf_r+0x156>
 80116e8:	eba0 0308 	sub.w	r3, r0, r8
 80116ec:	fa09 f303 	lsl.w	r3, r9, r3
 80116f0:	4313      	orrs	r3, r2
 80116f2:	9304      	str	r3, [sp, #16]
 80116f4:	46a2      	mov	sl, r4
 80116f6:	e7d2      	b.n	801169e <_vfiprintf_r+0xe2>
 80116f8:	9b03      	ldr	r3, [sp, #12]
 80116fa:	1d19      	adds	r1, r3, #4
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	9103      	str	r1, [sp, #12]
 8011700:	2b00      	cmp	r3, #0
 8011702:	bfbb      	ittet	lt
 8011704:	425b      	neglt	r3, r3
 8011706:	f042 0202 	orrlt.w	r2, r2, #2
 801170a:	9307      	strge	r3, [sp, #28]
 801170c:	9307      	strlt	r3, [sp, #28]
 801170e:	bfb8      	it	lt
 8011710:	9204      	strlt	r2, [sp, #16]
 8011712:	7823      	ldrb	r3, [r4, #0]
 8011714:	2b2e      	cmp	r3, #46	; 0x2e
 8011716:	d10c      	bne.n	8011732 <_vfiprintf_r+0x176>
 8011718:	7863      	ldrb	r3, [r4, #1]
 801171a:	2b2a      	cmp	r3, #42	; 0x2a
 801171c:	d135      	bne.n	801178a <_vfiprintf_r+0x1ce>
 801171e:	9b03      	ldr	r3, [sp, #12]
 8011720:	1d1a      	adds	r2, r3, #4
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	9203      	str	r2, [sp, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	bfb8      	it	lt
 801172a:	f04f 33ff 	movlt.w	r3, #4294967295
 801172e:	3402      	adds	r4, #2
 8011730:	9305      	str	r3, [sp, #20]
 8011732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011818 <_vfiprintf_r+0x25c>
 8011736:	7821      	ldrb	r1, [r4, #0]
 8011738:	2203      	movs	r2, #3
 801173a:	4650      	mov	r0, sl
 801173c:	f7ee fd80 	bl	8000240 <memchr>
 8011740:	b140      	cbz	r0, 8011754 <_vfiprintf_r+0x198>
 8011742:	2340      	movs	r3, #64	; 0x40
 8011744:	eba0 000a 	sub.w	r0, r0, sl
 8011748:	fa03 f000 	lsl.w	r0, r3, r0
 801174c:	9b04      	ldr	r3, [sp, #16]
 801174e:	4303      	orrs	r3, r0
 8011750:	3401      	adds	r4, #1
 8011752:	9304      	str	r3, [sp, #16]
 8011754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011758:	482c      	ldr	r0, [pc, #176]	; (801180c <_vfiprintf_r+0x250>)
 801175a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801175e:	2206      	movs	r2, #6
 8011760:	f7ee fd6e 	bl	8000240 <memchr>
 8011764:	2800      	cmp	r0, #0
 8011766:	d03f      	beq.n	80117e8 <_vfiprintf_r+0x22c>
 8011768:	4b29      	ldr	r3, [pc, #164]	; (8011810 <_vfiprintf_r+0x254>)
 801176a:	bb1b      	cbnz	r3, 80117b4 <_vfiprintf_r+0x1f8>
 801176c:	9b03      	ldr	r3, [sp, #12]
 801176e:	3307      	adds	r3, #7
 8011770:	f023 0307 	bic.w	r3, r3, #7
 8011774:	3308      	adds	r3, #8
 8011776:	9303      	str	r3, [sp, #12]
 8011778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801177a:	443b      	add	r3, r7
 801177c:	9309      	str	r3, [sp, #36]	; 0x24
 801177e:	e767      	b.n	8011650 <_vfiprintf_r+0x94>
 8011780:	fb0c 3202 	mla	r2, ip, r2, r3
 8011784:	460c      	mov	r4, r1
 8011786:	2001      	movs	r0, #1
 8011788:	e7a5      	b.n	80116d6 <_vfiprintf_r+0x11a>
 801178a:	2300      	movs	r3, #0
 801178c:	3401      	adds	r4, #1
 801178e:	9305      	str	r3, [sp, #20]
 8011790:	4619      	mov	r1, r3
 8011792:	f04f 0c0a 	mov.w	ip, #10
 8011796:	4620      	mov	r0, r4
 8011798:	f810 2b01 	ldrb.w	r2, [r0], #1
 801179c:	3a30      	subs	r2, #48	; 0x30
 801179e:	2a09      	cmp	r2, #9
 80117a0:	d903      	bls.n	80117aa <_vfiprintf_r+0x1ee>
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d0c5      	beq.n	8011732 <_vfiprintf_r+0x176>
 80117a6:	9105      	str	r1, [sp, #20]
 80117a8:	e7c3      	b.n	8011732 <_vfiprintf_r+0x176>
 80117aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80117ae:	4604      	mov	r4, r0
 80117b0:	2301      	movs	r3, #1
 80117b2:	e7f0      	b.n	8011796 <_vfiprintf_r+0x1da>
 80117b4:	ab03      	add	r3, sp, #12
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	462a      	mov	r2, r5
 80117ba:	4b16      	ldr	r3, [pc, #88]	; (8011814 <_vfiprintf_r+0x258>)
 80117bc:	a904      	add	r1, sp, #16
 80117be:	4630      	mov	r0, r6
 80117c0:	f7fd febc 	bl	800f53c <_printf_float>
 80117c4:	4607      	mov	r7, r0
 80117c6:	1c78      	adds	r0, r7, #1
 80117c8:	d1d6      	bne.n	8011778 <_vfiprintf_r+0x1bc>
 80117ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117cc:	07d9      	lsls	r1, r3, #31
 80117ce:	d405      	bmi.n	80117dc <_vfiprintf_r+0x220>
 80117d0:	89ab      	ldrh	r3, [r5, #12]
 80117d2:	059a      	lsls	r2, r3, #22
 80117d4:	d402      	bmi.n	80117dc <_vfiprintf_r+0x220>
 80117d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117d8:	f7ff fe92 	bl	8011500 <__retarget_lock_release_recursive>
 80117dc:	89ab      	ldrh	r3, [r5, #12]
 80117de:	065b      	lsls	r3, r3, #25
 80117e0:	f53f af12 	bmi.w	8011608 <_vfiprintf_r+0x4c>
 80117e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117e6:	e711      	b.n	801160c <_vfiprintf_r+0x50>
 80117e8:	ab03      	add	r3, sp, #12
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	462a      	mov	r2, r5
 80117ee:	4b09      	ldr	r3, [pc, #36]	; (8011814 <_vfiprintf_r+0x258>)
 80117f0:	a904      	add	r1, sp, #16
 80117f2:	4630      	mov	r0, r6
 80117f4:	f7fe f946 	bl	800fa84 <_printf_i>
 80117f8:	e7e4      	b.n	80117c4 <_vfiprintf_r+0x208>
 80117fa:	bf00      	nop
 80117fc:	08028dec 	.word	0x08028dec
 8011800:	08028e0c 	.word	0x08028e0c
 8011804:	08028dcc 	.word	0x08028dcc
 8011808:	08028c74 	.word	0x08028c74
 801180c:	08028c7e 	.word	0x08028c7e
 8011810:	0800f53d 	.word	0x0800f53d
 8011814:	08011599 	.word	0x08011599
 8011818:	08028c7a 	.word	0x08028c7a

0801181c <__swbuf_r>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	460e      	mov	r6, r1
 8011820:	4614      	mov	r4, r2
 8011822:	4605      	mov	r5, r0
 8011824:	b118      	cbz	r0, 801182e <__swbuf_r+0x12>
 8011826:	6983      	ldr	r3, [r0, #24]
 8011828:	b90b      	cbnz	r3, 801182e <__swbuf_r+0x12>
 801182a:	f000 f9e7 	bl	8011bfc <__sinit>
 801182e:	4b21      	ldr	r3, [pc, #132]	; (80118b4 <__swbuf_r+0x98>)
 8011830:	429c      	cmp	r4, r3
 8011832:	d12b      	bne.n	801188c <__swbuf_r+0x70>
 8011834:	686c      	ldr	r4, [r5, #4]
 8011836:	69a3      	ldr	r3, [r4, #24]
 8011838:	60a3      	str	r3, [r4, #8]
 801183a:	89a3      	ldrh	r3, [r4, #12]
 801183c:	071a      	lsls	r2, r3, #28
 801183e:	d52f      	bpl.n	80118a0 <__swbuf_r+0x84>
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	b36b      	cbz	r3, 80118a0 <__swbuf_r+0x84>
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	6820      	ldr	r0, [r4, #0]
 8011848:	1ac0      	subs	r0, r0, r3
 801184a:	6963      	ldr	r3, [r4, #20]
 801184c:	b2f6      	uxtb	r6, r6
 801184e:	4283      	cmp	r3, r0
 8011850:	4637      	mov	r7, r6
 8011852:	dc04      	bgt.n	801185e <__swbuf_r+0x42>
 8011854:	4621      	mov	r1, r4
 8011856:	4628      	mov	r0, r5
 8011858:	f000 f93c 	bl	8011ad4 <_fflush_r>
 801185c:	bb30      	cbnz	r0, 80118ac <__swbuf_r+0x90>
 801185e:	68a3      	ldr	r3, [r4, #8]
 8011860:	3b01      	subs	r3, #1
 8011862:	60a3      	str	r3, [r4, #8]
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	6022      	str	r2, [r4, #0]
 801186a:	701e      	strb	r6, [r3, #0]
 801186c:	6963      	ldr	r3, [r4, #20]
 801186e:	3001      	adds	r0, #1
 8011870:	4283      	cmp	r3, r0
 8011872:	d004      	beq.n	801187e <__swbuf_r+0x62>
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	07db      	lsls	r3, r3, #31
 8011878:	d506      	bpl.n	8011888 <__swbuf_r+0x6c>
 801187a:	2e0a      	cmp	r6, #10
 801187c:	d104      	bne.n	8011888 <__swbuf_r+0x6c>
 801187e:	4621      	mov	r1, r4
 8011880:	4628      	mov	r0, r5
 8011882:	f000 f927 	bl	8011ad4 <_fflush_r>
 8011886:	b988      	cbnz	r0, 80118ac <__swbuf_r+0x90>
 8011888:	4638      	mov	r0, r7
 801188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188c:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <__swbuf_r+0x9c>)
 801188e:	429c      	cmp	r4, r3
 8011890:	d101      	bne.n	8011896 <__swbuf_r+0x7a>
 8011892:	68ac      	ldr	r4, [r5, #8]
 8011894:	e7cf      	b.n	8011836 <__swbuf_r+0x1a>
 8011896:	4b09      	ldr	r3, [pc, #36]	; (80118bc <__swbuf_r+0xa0>)
 8011898:	429c      	cmp	r4, r3
 801189a:	bf08      	it	eq
 801189c:	68ec      	ldreq	r4, [r5, #12]
 801189e:	e7ca      	b.n	8011836 <__swbuf_r+0x1a>
 80118a0:	4621      	mov	r1, r4
 80118a2:	4628      	mov	r0, r5
 80118a4:	f000 f81a 	bl	80118dc <__swsetup_r>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d0cb      	beq.n	8011844 <__swbuf_r+0x28>
 80118ac:	f04f 37ff 	mov.w	r7, #4294967295
 80118b0:	e7ea      	b.n	8011888 <__swbuf_r+0x6c>
 80118b2:	bf00      	nop
 80118b4:	08028dec 	.word	0x08028dec
 80118b8:	08028e0c 	.word	0x08028e0c
 80118bc:	08028dcc 	.word	0x08028dcc

080118c0 <__ascii_wctomb>:
 80118c0:	b149      	cbz	r1, 80118d6 <__ascii_wctomb+0x16>
 80118c2:	2aff      	cmp	r2, #255	; 0xff
 80118c4:	bf85      	ittet	hi
 80118c6:	238a      	movhi	r3, #138	; 0x8a
 80118c8:	6003      	strhi	r3, [r0, #0]
 80118ca:	700a      	strbls	r2, [r1, #0]
 80118cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80118d0:	bf98      	it	ls
 80118d2:	2001      	movls	r0, #1
 80118d4:	4770      	bx	lr
 80118d6:	4608      	mov	r0, r1
 80118d8:	4770      	bx	lr
	...

080118dc <__swsetup_r>:
 80118dc:	4b32      	ldr	r3, [pc, #200]	; (80119a8 <__swsetup_r+0xcc>)
 80118de:	b570      	push	{r4, r5, r6, lr}
 80118e0:	681d      	ldr	r5, [r3, #0]
 80118e2:	4606      	mov	r6, r0
 80118e4:	460c      	mov	r4, r1
 80118e6:	b125      	cbz	r5, 80118f2 <__swsetup_r+0x16>
 80118e8:	69ab      	ldr	r3, [r5, #24]
 80118ea:	b913      	cbnz	r3, 80118f2 <__swsetup_r+0x16>
 80118ec:	4628      	mov	r0, r5
 80118ee:	f000 f985 	bl	8011bfc <__sinit>
 80118f2:	4b2e      	ldr	r3, [pc, #184]	; (80119ac <__swsetup_r+0xd0>)
 80118f4:	429c      	cmp	r4, r3
 80118f6:	d10f      	bne.n	8011918 <__swsetup_r+0x3c>
 80118f8:	686c      	ldr	r4, [r5, #4]
 80118fa:	89a3      	ldrh	r3, [r4, #12]
 80118fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011900:	0719      	lsls	r1, r3, #28
 8011902:	d42c      	bmi.n	801195e <__swsetup_r+0x82>
 8011904:	06dd      	lsls	r5, r3, #27
 8011906:	d411      	bmi.n	801192c <__swsetup_r+0x50>
 8011908:	2309      	movs	r3, #9
 801190a:	6033      	str	r3, [r6, #0]
 801190c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011910:	81a3      	strh	r3, [r4, #12]
 8011912:	f04f 30ff 	mov.w	r0, #4294967295
 8011916:	e03e      	b.n	8011996 <__swsetup_r+0xba>
 8011918:	4b25      	ldr	r3, [pc, #148]	; (80119b0 <__swsetup_r+0xd4>)
 801191a:	429c      	cmp	r4, r3
 801191c:	d101      	bne.n	8011922 <__swsetup_r+0x46>
 801191e:	68ac      	ldr	r4, [r5, #8]
 8011920:	e7eb      	b.n	80118fa <__swsetup_r+0x1e>
 8011922:	4b24      	ldr	r3, [pc, #144]	; (80119b4 <__swsetup_r+0xd8>)
 8011924:	429c      	cmp	r4, r3
 8011926:	bf08      	it	eq
 8011928:	68ec      	ldreq	r4, [r5, #12]
 801192a:	e7e6      	b.n	80118fa <__swsetup_r+0x1e>
 801192c:	0758      	lsls	r0, r3, #29
 801192e:	d512      	bpl.n	8011956 <__swsetup_r+0x7a>
 8011930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011932:	b141      	cbz	r1, 8011946 <__swsetup_r+0x6a>
 8011934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011938:	4299      	cmp	r1, r3
 801193a:	d002      	beq.n	8011942 <__swsetup_r+0x66>
 801193c:	4630      	mov	r0, r6
 801193e:	f7fd fc7d 	bl	800f23c <_free_r>
 8011942:	2300      	movs	r3, #0
 8011944:	6363      	str	r3, [r4, #52]	; 0x34
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801194c:	81a3      	strh	r3, [r4, #12]
 801194e:	2300      	movs	r3, #0
 8011950:	6063      	str	r3, [r4, #4]
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f043 0308 	orr.w	r3, r3, #8
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	6923      	ldr	r3, [r4, #16]
 8011960:	b94b      	cbnz	r3, 8011976 <__swsetup_r+0x9a>
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801196c:	d003      	beq.n	8011976 <__swsetup_r+0x9a>
 801196e:	4621      	mov	r1, r4
 8011970:	4630      	mov	r0, r6
 8011972:	f000 fa05 	bl	8011d80 <__smakebuf_r>
 8011976:	89a0      	ldrh	r0, [r4, #12]
 8011978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801197c:	f010 0301 	ands.w	r3, r0, #1
 8011980:	d00a      	beq.n	8011998 <__swsetup_r+0xbc>
 8011982:	2300      	movs	r3, #0
 8011984:	60a3      	str	r3, [r4, #8]
 8011986:	6963      	ldr	r3, [r4, #20]
 8011988:	425b      	negs	r3, r3
 801198a:	61a3      	str	r3, [r4, #24]
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	b943      	cbnz	r3, 80119a2 <__swsetup_r+0xc6>
 8011990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011994:	d1ba      	bne.n	801190c <__swsetup_r+0x30>
 8011996:	bd70      	pop	{r4, r5, r6, pc}
 8011998:	0781      	lsls	r1, r0, #30
 801199a:	bf58      	it	pl
 801199c:	6963      	ldrpl	r3, [r4, #20]
 801199e:	60a3      	str	r3, [r4, #8]
 80119a0:	e7f4      	b.n	801198c <__swsetup_r+0xb0>
 80119a2:	2000      	movs	r0, #0
 80119a4:	e7f7      	b.n	8011996 <__swsetup_r+0xba>
 80119a6:	bf00      	nop
 80119a8:	20000ef4 	.word	0x20000ef4
 80119ac:	08028dec 	.word	0x08028dec
 80119b0:	08028e0c 	.word	0x08028e0c
 80119b4:	08028dcc 	.word	0x08028dcc

080119b8 <abort>:
 80119b8:	b508      	push	{r3, lr}
 80119ba:	2006      	movs	r0, #6
 80119bc:	f000 fa48 	bl	8011e50 <raise>
 80119c0:	2001      	movs	r0, #1
 80119c2:	f001 fe65 	bl	8013690 <_exit>
	...

080119c8 <__sflush_r>:
 80119c8:	898a      	ldrh	r2, [r1, #12]
 80119ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ce:	4605      	mov	r5, r0
 80119d0:	0710      	lsls	r0, r2, #28
 80119d2:	460c      	mov	r4, r1
 80119d4:	d458      	bmi.n	8011a88 <__sflush_r+0xc0>
 80119d6:	684b      	ldr	r3, [r1, #4]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	dc05      	bgt.n	80119e8 <__sflush_r+0x20>
 80119dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119de:	2b00      	cmp	r3, #0
 80119e0:	dc02      	bgt.n	80119e8 <__sflush_r+0x20>
 80119e2:	2000      	movs	r0, #0
 80119e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ea:	2e00      	cmp	r6, #0
 80119ec:	d0f9      	beq.n	80119e2 <__sflush_r+0x1a>
 80119ee:	2300      	movs	r3, #0
 80119f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119f4:	682f      	ldr	r7, [r5, #0]
 80119f6:	602b      	str	r3, [r5, #0]
 80119f8:	d032      	beq.n	8011a60 <__sflush_r+0x98>
 80119fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119fc:	89a3      	ldrh	r3, [r4, #12]
 80119fe:	075a      	lsls	r2, r3, #29
 8011a00:	d505      	bpl.n	8011a0e <__sflush_r+0x46>
 8011a02:	6863      	ldr	r3, [r4, #4]
 8011a04:	1ac0      	subs	r0, r0, r3
 8011a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a08:	b10b      	cbz	r3, 8011a0e <__sflush_r+0x46>
 8011a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a0c:	1ac0      	subs	r0, r0, r3
 8011a0e:	2300      	movs	r3, #0
 8011a10:	4602      	mov	r2, r0
 8011a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a14:	6a21      	ldr	r1, [r4, #32]
 8011a16:	4628      	mov	r0, r5
 8011a18:	47b0      	blx	r6
 8011a1a:	1c43      	adds	r3, r0, #1
 8011a1c:	89a3      	ldrh	r3, [r4, #12]
 8011a1e:	d106      	bne.n	8011a2e <__sflush_r+0x66>
 8011a20:	6829      	ldr	r1, [r5, #0]
 8011a22:	291d      	cmp	r1, #29
 8011a24:	d82c      	bhi.n	8011a80 <__sflush_r+0xb8>
 8011a26:	4a2a      	ldr	r2, [pc, #168]	; (8011ad0 <__sflush_r+0x108>)
 8011a28:	40ca      	lsrs	r2, r1
 8011a2a:	07d6      	lsls	r6, r2, #31
 8011a2c:	d528      	bpl.n	8011a80 <__sflush_r+0xb8>
 8011a2e:	2200      	movs	r2, #0
 8011a30:	6062      	str	r2, [r4, #4]
 8011a32:	04d9      	lsls	r1, r3, #19
 8011a34:	6922      	ldr	r2, [r4, #16]
 8011a36:	6022      	str	r2, [r4, #0]
 8011a38:	d504      	bpl.n	8011a44 <__sflush_r+0x7c>
 8011a3a:	1c42      	adds	r2, r0, #1
 8011a3c:	d101      	bne.n	8011a42 <__sflush_r+0x7a>
 8011a3e:	682b      	ldr	r3, [r5, #0]
 8011a40:	b903      	cbnz	r3, 8011a44 <__sflush_r+0x7c>
 8011a42:	6560      	str	r0, [r4, #84]	; 0x54
 8011a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a46:	602f      	str	r7, [r5, #0]
 8011a48:	2900      	cmp	r1, #0
 8011a4a:	d0ca      	beq.n	80119e2 <__sflush_r+0x1a>
 8011a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a50:	4299      	cmp	r1, r3
 8011a52:	d002      	beq.n	8011a5a <__sflush_r+0x92>
 8011a54:	4628      	mov	r0, r5
 8011a56:	f7fd fbf1 	bl	800f23c <_free_r>
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a5e:	e7c1      	b.n	80119e4 <__sflush_r+0x1c>
 8011a60:	6a21      	ldr	r1, [r4, #32]
 8011a62:	2301      	movs	r3, #1
 8011a64:	4628      	mov	r0, r5
 8011a66:	47b0      	blx	r6
 8011a68:	1c41      	adds	r1, r0, #1
 8011a6a:	d1c7      	bne.n	80119fc <__sflush_r+0x34>
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d0c4      	beq.n	80119fc <__sflush_r+0x34>
 8011a72:	2b1d      	cmp	r3, #29
 8011a74:	d001      	beq.n	8011a7a <__sflush_r+0xb2>
 8011a76:	2b16      	cmp	r3, #22
 8011a78:	d101      	bne.n	8011a7e <__sflush_r+0xb6>
 8011a7a:	602f      	str	r7, [r5, #0]
 8011a7c:	e7b1      	b.n	80119e2 <__sflush_r+0x1a>
 8011a7e:	89a3      	ldrh	r3, [r4, #12]
 8011a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a84:	81a3      	strh	r3, [r4, #12]
 8011a86:	e7ad      	b.n	80119e4 <__sflush_r+0x1c>
 8011a88:	690f      	ldr	r7, [r1, #16]
 8011a8a:	2f00      	cmp	r7, #0
 8011a8c:	d0a9      	beq.n	80119e2 <__sflush_r+0x1a>
 8011a8e:	0793      	lsls	r3, r2, #30
 8011a90:	680e      	ldr	r6, [r1, #0]
 8011a92:	bf08      	it	eq
 8011a94:	694b      	ldreq	r3, [r1, #20]
 8011a96:	600f      	str	r7, [r1, #0]
 8011a98:	bf18      	it	ne
 8011a9a:	2300      	movne	r3, #0
 8011a9c:	eba6 0807 	sub.w	r8, r6, r7
 8011aa0:	608b      	str	r3, [r1, #8]
 8011aa2:	f1b8 0f00 	cmp.w	r8, #0
 8011aa6:	dd9c      	ble.n	80119e2 <__sflush_r+0x1a>
 8011aa8:	6a21      	ldr	r1, [r4, #32]
 8011aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011aac:	4643      	mov	r3, r8
 8011aae:	463a      	mov	r2, r7
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	47b0      	blx	r6
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	dc06      	bgt.n	8011ac6 <__sflush_r+0xfe>
 8011ab8:	89a3      	ldrh	r3, [r4, #12]
 8011aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011abe:	81a3      	strh	r3, [r4, #12]
 8011ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac4:	e78e      	b.n	80119e4 <__sflush_r+0x1c>
 8011ac6:	4407      	add	r7, r0
 8011ac8:	eba8 0800 	sub.w	r8, r8, r0
 8011acc:	e7e9      	b.n	8011aa2 <__sflush_r+0xda>
 8011ace:	bf00      	nop
 8011ad0:	20400001 	.word	0x20400001

08011ad4 <_fflush_r>:
 8011ad4:	b538      	push	{r3, r4, r5, lr}
 8011ad6:	690b      	ldr	r3, [r1, #16]
 8011ad8:	4605      	mov	r5, r0
 8011ada:	460c      	mov	r4, r1
 8011adc:	b913      	cbnz	r3, 8011ae4 <_fflush_r+0x10>
 8011ade:	2500      	movs	r5, #0
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	bd38      	pop	{r3, r4, r5, pc}
 8011ae4:	b118      	cbz	r0, 8011aee <_fflush_r+0x1a>
 8011ae6:	6983      	ldr	r3, [r0, #24]
 8011ae8:	b90b      	cbnz	r3, 8011aee <_fflush_r+0x1a>
 8011aea:	f000 f887 	bl	8011bfc <__sinit>
 8011aee:	4b14      	ldr	r3, [pc, #80]	; (8011b40 <_fflush_r+0x6c>)
 8011af0:	429c      	cmp	r4, r3
 8011af2:	d11b      	bne.n	8011b2c <_fflush_r+0x58>
 8011af4:	686c      	ldr	r4, [r5, #4]
 8011af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d0ef      	beq.n	8011ade <_fflush_r+0xa>
 8011afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b00:	07d0      	lsls	r0, r2, #31
 8011b02:	d404      	bmi.n	8011b0e <_fflush_r+0x3a>
 8011b04:	0599      	lsls	r1, r3, #22
 8011b06:	d402      	bmi.n	8011b0e <_fflush_r+0x3a>
 8011b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b0a:	f7ff fcf8 	bl	80114fe <__retarget_lock_acquire_recursive>
 8011b0e:	4628      	mov	r0, r5
 8011b10:	4621      	mov	r1, r4
 8011b12:	f7ff ff59 	bl	80119c8 <__sflush_r>
 8011b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b18:	07da      	lsls	r2, r3, #31
 8011b1a:	4605      	mov	r5, r0
 8011b1c:	d4e0      	bmi.n	8011ae0 <_fflush_r+0xc>
 8011b1e:	89a3      	ldrh	r3, [r4, #12]
 8011b20:	059b      	lsls	r3, r3, #22
 8011b22:	d4dd      	bmi.n	8011ae0 <_fflush_r+0xc>
 8011b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b26:	f7ff fceb 	bl	8011500 <__retarget_lock_release_recursive>
 8011b2a:	e7d9      	b.n	8011ae0 <_fflush_r+0xc>
 8011b2c:	4b05      	ldr	r3, [pc, #20]	; (8011b44 <_fflush_r+0x70>)
 8011b2e:	429c      	cmp	r4, r3
 8011b30:	d101      	bne.n	8011b36 <_fflush_r+0x62>
 8011b32:	68ac      	ldr	r4, [r5, #8]
 8011b34:	e7df      	b.n	8011af6 <_fflush_r+0x22>
 8011b36:	4b04      	ldr	r3, [pc, #16]	; (8011b48 <_fflush_r+0x74>)
 8011b38:	429c      	cmp	r4, r3
 8011b3a:	bf08      	it	eq
 8011b3c:	68ec      	ldreq	r4, [r5, #12]
 8011b3e:	e7da      	b.n	8011af6 <_fflush_r+0x22>
 8011b40:	08028dec 	.word	0x08028dec
 8011b44:	08028e0c 	.word	0x08028e0c
 8011b48:	08028dcc 	.word	0x08028dcc

08011b4c <std>:
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	b510      	push	{r4, lr}
 8011b50:	4604      	mov	r4, r0
 8011b52:	e9c0 3300 	strd	r3, r3, [r0]
 8011b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b5a:	6083      	str	r3, [r0, #8]
 8011b5c:	8181      	strh	r1, [r0, #12]
 8011b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8011b60:	81c2      	strh	r2, [r0, #14]
 8011b62:	6183      	str	r3, [r0, #24]
 8011b64:	4619      	mov	r1, r3
 8011b66:	2208      	movs	r2, #8
 8011b68:	305c      	adds	r0, #92	; 0x5c
 8011b6a:	f7fd fb5f 	bl	800f22c <memset>
 8011b6e:	4b05      	ldr	r3, [pc, #20]	; (8011b84 <std+0x38>)
 8011b70:	6263      	str	r3, [r4, #36]	; 0x24
 8011b72:	4b05      	ldr	r3, [pc, #20]	; (8011b88 <std+0x3c>)
 8011b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b76:	4b05      	ldr	r3, [pc, #20]	; (8011b8c <std+0x40>)
 8011b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b7a:	4b05      	ldr	r3, [pc, #20]	; (8011b90 <std+0x44>)
 8011b7c:	6224      	str	r4, [r4, #32]
 8011b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8011b80:	bd10      	pop	{r4, pc}
 8011b82:	bf00      	nop
 8011b84:	08011e89 	.word	0x08011e89
 8011b88:	08011eab 	.word	0x08011eab
 8011b8c:	08011ee3 	.word	0x08011ee3
 8011b90:	08011f07 	.word	0x08011f07

08011b94 <_cleanup_r>:
 8011b94:	4901      	ldr	r1, [pc, #4]	; (8011b9c <_cleanup_r+0x8>)
 8011b96:	f000 b8af 	b.w	8011cf8 <_fwalk_reent>
 8011b9a:	bf00      	nop
 8011b9c:	08011ad5 	.word	0x08011ad5

08011ba0 <__sfmoreglue>:
 8011ba0:	b570      	push	{r4, r5, r6, lr}
 8011ba2:	2268      	movs	r2, #104	; 0x68
 8011ba4:	1e4d      	subs	r5, r1, #1
 8011ba6:	4355      	muls	r5, r2
 8011ba8:	460e      	mov	r6, r1
 8011baa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011bae:	f7fd fbb1 	bl	800f314 <_malloc_r>
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	b140      	cbz	r0, 8011bc8 <__sfmoreglue+0x28>
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	e9c0 1600 	strd	r1, r6, [r0]
 8011bbc:	300c      	adds	r0, #12
 8011bbe:	60a0      	str	r0, [r4, #8]
 8011bc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011bc4:	f7fd fb32 	bl	800f22c <memset>
 8011bc8:	4620      	mov	r0, r4
 8011bca:	bd70      	pop	{r4, r5, r6, pc}

08011bcc <__sfp_lock_acquire>:
 8011bcc:	4801      	ldr	r0, [pc, #4]	; (8011bd4 <__sfp_lock_acquire+0x8>)
 8011bce:	f7ff bc96 	b.w	80114fe <__retarget_lock_acquire_recursive>
 8011bd2:	bf00      	nop
 8011bd4:	2000b375 	.word	0x2000b375

08011bd8 <__sfp_lock_release>:
 8011bd8:	4801      	ldr	r0, [pc, #4]	; (8011be0 <__sfp_lock_release+0x8>)
 8011bda:	f7ff bc91 	b.w	8011500 <__retarget_lock_release_recursive>
 8011bde:	bf00      	nop
 8011be0:	2000b375 	.word	0x2000b375

08011be4 <__sinit_lock_acquire>:
 8011be4:	4801      	ldr	r0, [pc, #4]	; (8011bec <__sinit_lock_acquire+0x8>)
 8011be6:	f7ff bc8a 	b.w	80114fe <__retarget_lock_acquire_recursive>
 8011bea:	bf00      	nop
 8011bec:	2000b376 	.word	0x2000b376

08011bf0 <__sinit_lock_release>:
 8011bf0:	4801      	ldr	r0, [pc, #4]	; (8011bf8 <__sinit_lock_release+0x8>)
 8011bf2:	f7ff bc85 	b.w	8011500 <__retarget_lock_release_recursive>
 8011bf6:	bf00      	nop
 8011bf8:	2000b376 	.word	0x2000b376

08011bfc <__sinit>:
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	4604      	mov	r4, r0
 8011c00:	f7ff fff0 	bl	8011be4 <__sinit_lock_acquire>
 8011c04:	69a3      	ldr	r3, [r4, #24]
 8011c06:	b11b      	cbz	r3, 8011c10 <__sinit+0x14>
 8011c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c0c:	f7ff bff0 	b.w	8011bf0 <__sinit_lock_release>
 8011c10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c14:	6523      	str	r3, [r4, #80]	; 0x50
 8011c16:	4b13      	ldr	r3, [pc, #76]	; (8011c64 <__sinit+0x68>)
 8011c18:	4a13      	ldr	r2, [pc, #76]	; (8011c68 <__sinit+0x6c>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c1e:	42a3      	cmp	r3, r4
 8011c20:	bf04      	itt	eq
 8011c22:	2301      	moveq	r3, #1
 8011c24:	61a3      	streq	r3, [r4, #24]
 8011c26:	4620      	mov	r0, r4
 8011c28:	f000 f820 	bl	8011c6c <__sfp>
 8011c2c:	6060      	str	r0, [r4, #4]
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f000 f81c 	bl	8011c6c <__sfp>
 8011c34:	60a0      	str	r0, [r4, #8]
 8011c36:	4620      	mov	r0, r4
 8011c38:	f000 f818 	bl	8011c6c <__sfp>
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	60e0      	str	r0, [r4, #12]
 8011c40:	2104      	movs	r1, #4
 8011c42:	6860      	ldr	r0, [r4, #4]
 8011c44:	f7ff ff82 	bl	8011b4c <std>
 8011c48:	68a0      	ldr	r0, [r4, #8]
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	2109      	movs	r1, #9
 8011c4e:	f7ff ff7d 	bl	8011b4c <std>
 8011c52:	68e0      	ldr	r0, [r4, #12]
 8011c54:	2202      	movs	r2, #2
 8011c56:	2112      	movs	r1, #18
 8011c58:	f7ff ff78 	bl	8011b4c <std>
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	61a3      	str	r3, [r4, #24]
 8011c60:	e7d2      	b.n	8011c08 <__sinit+0xc>
 8011c62:	bf00      	nop
 8011c64:	08028a50 	.word	0x08028a50
 8011c68:	08011b95 	.word	0x08011b95

08011c6c <__sfp>:
 8011c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6e:	4607      	mov	r7, r0
 8011c70:	f7ff ffac 	bl	8011bcc <__sfp_lock_acquire>
 8011c74:	4b1e      	ldr	r3, [pc, #120]	; (8011cf0 <__sfp+0x84>)
 8011c76:	681e      	ldr	r6, [r3, #0]
 8011c78:	69b3      	ldr	r3, [r6, #24]
 8011c7a:	b913      	cbnz	r3, 8011c82 <__sfp+0x16>
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f7ff ffbd 	bl	8011bfc <__sinit>
 8011c82:	3648      	adds	r6, #72	; 0x48
 8011c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	d503      	bpl.n	8011c94 <__sfp+0x28>
 8011c8c:	6833      	ldr	r3, [r6, #0]
 8011c8e:	b30b      	cbz	r3, 8011cd4 <__sfp+0x68>
 8011c90:	6836      	ldr	r6, [r6, #0]
 8011c92:	e7f7      	b.n	8011c84 <__sfp+0x18>
 8011c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c98:	b9d5      	cbnz	r5, 8011cd0 <__sfp+0x64>
 8011c9a:	4b16      	ldr	r3, [pc, #88]	; (8011cf4 <__sfp+0x88>)
 8011c9c:	60e3      	str	r3, [r4, #12]
 8011c9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011ca2:	6665      	str	r5, [r4, #100]	; 0x64
 8011ca4:	f7ff fc2a 	bl	80114fc <__retarget_lock_init_recursive>
 8011ca8:	f7ff ff96 	bl	8011bd8 <__sfp_lock_release>
 8011cac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011cb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011cb4:	6025      	str	r5, [r4, #0]
 8011cb6:	61a5      	str	r5, [r4, #24]
 8011cb8:	2208      	movs	r2, #8
 8011cba:	4629      	mov	r1, r5
 8011cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cc0:	f7fd fab4 	bl	800f22c <memset>
 8011cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ccc:	4620      	mov	r0, r4
 8011cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd0:	3468      	adds	r4, #104	; 0x68
 8011cd2:	e7d9      	b.n	8011c88 <__sfp+0x1c>
 8011cd4:	2104      	movs	r1, #4
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	f7ff ff62 	bl	8011ba0 <__sfmoreglue>
 8011cdc:	4604      	mov	r4, r0
 8011cde:	6030      	str	r0, [r6, #0]
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d1d5      	bne.n	8011c90 <__sfp+0x24>
 8011ce4:	f7ff ff78 	bl	8011bd8 <__sfp_lock_release>
 8011ce8:	230c      	movs	r3, #12
 8011cea:	603b      	str	r3, [r7, #0]
 8011cec:	e7ee      	b.n	8011ccc <__sfp+0x60>
 8011cee:	bf00      	nop
 8011cf0:	08028a50 	.word	0x08028a50
 8011cf4:	ffff0001 	.word	0xffff0001

08011cf8 <_fwalk_reent>:
 8011cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cfc:	4606      	mov	r6, r0
 8011cfe:	4688      	mov	r8, r1
 8011d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d04:	2700      	movs	r7, #0
 8011d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8011d0e:	d505      	bpl.n	8011d1c <_fwalk_reent+0x24>
 8011d10:	6824      	ldr	r4, [r4, #0]
 8011d12:	2c00      	cmp	r4, #0
 8011d14:	d1f7      	bne.n	8011d06 <_fwalk_reent+0xe>
 8011d16:	4638      	mov	r0, r7
 8011d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d1c:	89ab      	ldrh	r3, [r5, #12]
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d907      	bls.n	8011d32 <_fwalk_reent+0x3a>
 8011d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d26:	3301      	adds	r3, #1
 8011d28:	d003      	beq.n	8011d32 <_fwalk_reent+0x3a>
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	47c0      	blx	r8
 8011d30:	4307      	orrs	r7, r0
 8011d32:	3568      	adds	r5, #104	; 0x68
 8011d34:	e7e9      	b.n	8011d0a <_fwalk_reent+0x12>

08011d36 <__swhatbuf_r>:
 8011d36:	b570      	push	{r4, r5, r6, lr}
 8011d38:	460e      	mov	r6, r1
 8011d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d3e:	2900      	cmp	r1, #0
 8011d40:	b096      	sub	sp, #88	; 0x58
 8011d42:	4614      	mov	r4, r2
 8011d44:	461d      	mov	r5, r3
 8011d46:	da08      	bge.n	8011d5a <__swhatbuf_r+0x24>
 8011d48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	602a      	str	r2, [r5, #0]
 8011d50:	061a      	lsls	r2, r3, #24
 8011d52:	d410      	bmi.n	8011d76 <__swhatbuf_r+0x40>
 8011d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d58:	e00e      	b.n	8011d78 <__swhatbuf_r+0x42>
 8011d5a:	466a      	mov	r2, sp
 8011d5c:	f000 f8fa 	bl	8011f54 <_fstat_r>
 8011d60:	2800      	cmp	r0, #0
 8011d62:	dbf1      	blt.n	8011d48 <__swhatbuf_r+0x12>
 8011d64:	9a01      	ldr	r2, [sp, #4]
 8011d66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d6e:	425a      	negs	r2, r3
 8011d70:	415a      	adcs	r2, r3
 8011d72:	602a      	str	r2, [r5, #0]
 8011d74:	e7ee      	b.n	8011d54 <__swhatbuf_r+0x1e>
 8011d76:	2340      	movs	r3, #64	; 0x40
 8011d78:	2000      	movs	r0, #0
 8011d7a:	6023      	str	r3, [r4, #0]
 8011d7c:	b016      	add	sp, #88	; 0x58
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}

08011d80 <__smakebuf_r>:
 8011d80:	898b      	ldrh	r3, [r1, #12]
 8011d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d84:	079d      	lsls	r5, r3, #30
 8011d86:	4606      	mov	r6, r0
 8011d88:	460c      	mov	r4, r1
 8011d8a:	d507      	bpl.n	8011d9c <__smakebuf_r+0x1c>
 8011d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	6123      	str	r3, [r4, #16]
 8011d94:	2301      	movs	r3, #1
 8011d96:	6163      	str	r3, [r4, #20]
 8011d98:	b002      	add	sp, #8
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	ab01      	add	r3, sp, #4
 8011d9e:	466a      	mov	r2, sp
 8011da0:	f7ff ffc9 	bl	8011d36 <__swhatbuf_r>
 8011da4:	9900      	ldr	r1, [sp, #0]
 8011da6:	4605      	mov	r5, r0
 8011da8:	4630      	mov	r0, r6
 8011daa:	f7fd fab3 	bl	800f314 <_malloc_r>
 8011dae:	b948      	cbnz	r0, 8011dc4 <__smakebuf_r+0x44>
 8011db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db4:	059a      	lsls	r2, r3, #22
 8011db6:	d4ef      	bmi.n	8011d98 <__smakebuf_r+0x18>
 8011db8:	f023 0303 	bic.w	r3, r3, #3
 8011dbc:	f043 0302 	orr.w	r3, r3, #2
 8011dc0:	81a3      	strh	r3, [r4, #12]
 8011dc2:	e7e3      	b.n	8011d8c <__smakebuf_r+0xc>
 8011dc4:	4b0d      	ldr	r3, [pc, #52]	; (8011dfc <__smakebuf_r+0x7c>)
 8011dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011dc8:	89a3      	ldrh	r3, [r4, #12]
 8011dca:	6020      	str	r0, [r4, #0]
 8011dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	9b00      	ldr	r3, [sp, #0]
 8011dd4:	6163      	str	r3, [r4, #20]
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	6120      	str	r0, [r4, #16]
 8011dda:	b15b      	cbz	r3, 8011df4 <__smakebuf_r+0x74>
 8011ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011de0:	4630      	mov	r0, r6
 8011de2:	f000 f8c9 	bl	8011f78 <_isatty_r>
 8011de6:	b128      	cbz	r0, 8011df4 <__smakebuf_r+0x74>
 8011de8:	89a3      	ldrh	r3, [r4, #12]
 8011dea:	f023 0303 	bic.w	r3, r3, #3
 8011dee:	f043 0301 	orr.w	r3, r3, #1
 8011df2:	81a3      	strh	r3, [r4, #12]
 8011df4:	89a0      	ldrh	r0, [r4, #12]
 8011df6:	4305      	orrs	r5, r0
 8011df8:	81a5      	strh	r5, [r4, #12]
 8011dfa:	e7cd      	b.n	8011d98 <__smakebuf_r+0x18>
 8011dfc:	08011b95 	.word	0x08011b95

08011e00 <_raise_r>:
 8011e00:	291f      	cmp	r1, #31
 8011e02:	b538      	push	{r3, r4, r5, lr}
 8011e04:	4604      	mov	r4, r0
 8011e06:	460d      	mov	r5, r1
 8011e08:	d904      	bls.n	8011e14 <_raise_r+0x14>
 8011e0a:	2316      	movs	r3, #22
 8011e0c:	6003      	str	r3, [r0, #0]
 8011e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e12:	bd38      	pop	{r3, r4, r5, pc}
 8011e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e16:	b112      	cbz	r2, 8011e1e <_raise_r+0x1e>
 8011e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e1c:	b94b      	cbnz	r3, 8011e32 <_raise_r+0x32>
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f000 f830 	bl	8011e84 <_getpid_r>
 8011e24:	462a      	mov	r2, r5
 8011e26:	4601      	mov	r1, r0
 8011e28:	4620      	mov	r0, r4
 8011e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e2e:	f000 b817 	b.w	8011e60 <_kill_r>
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d00a      	beq.n	8011e4c <_raise_r+0x4c>
 8011e36:	1c59      	adds	r1, r3, #1
 8011e38:	d103      	bne.n	8011e42 <_raise_r+0x42>
 8011e3a:	2316      	movs	r3, #22
 8011e3c:	6003      	str	r3, [r0, #0]
 8011e3e:	2001      	movs	r0, #1
 8011e40:	e7e7      	b.n	8011e12 <_raise_r+0x12>
 8011e42:	2400      	movs	r4, #0
 8011e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e48:	4628      	mov	r0, r5
 8011e4a:	4798      	blx	r3
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e7e0      	b.n	8011e12 <_raise_r+0x12>

08011e50 <raise>:
 8011e50:	4b02      	ldr	r3, [pc, #8]	; (8011e5c <raise+0xc>)
 8011e52:	4601      	mov	r1, r0
 8011e54:	6818      	ldr	r0, [r3, #0]
 8011e56:	f7ff bfd3 	b.w	8011e00 <_raise_r>
 8011e5a:	bf00      	nop
 8011e5c:	20000ef4 	.word	0x20000ef4

08011e60 <_kill_r>:
 8011e60:	b538      	push	{r3, r4, r5, lr}
 8011e62:	4d07      	ldr	r5, [pc, #28]	; (8011e80 <_kill_r+0x20>)
 8011e64:	2300      	movs	r3, #0
 8011e66:	4604      	mov	r4, r0
 8011e68:	4608      	mov	r0, r1
 8011e6a:	4611      	mov	r1, r2
 8011e6c:	602b      	str	r3, [r5, #0]
 8011e6e:	f001 fbef 	bl	8013650 <_kill>
 8011e72:	1c43      	adds	r3, r0, #1
 8011e74:	d102      	bne.n	8011e7c <_kill_r+0x1c>
 8011e76:	682b      	ldr	r3, [r5, #0]
 8011e78:	b103      	cbz	r3, 8011e7c <_kill_r+0x1c>
 8011e7a:	6023      	str	r3, [r4, #0]
 8011e7c:	bd38      	pop	{r3, r4, r5, pc}
 8011e7e:	bf00      	nop
 8011e80:	2000b370 	.word	0x2000b370

08011e84 <_getpid_r>:
 8011e84:	f001 bbd4 	b.w	8013630 <_getpid>

08011e88 <__sread>:
 8011e88:	b510      	push	{r4, lr}
 8011e8a:	460c      	mov	r4, r1
 8011e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e90:	f000 f894 	bl	8011fbc <_read_r>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	bfab      	itete	ge
 8011e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8011e9c:	181b      	addge	r3, r3, r0
 8011e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ea2:	bfac      	ite	ge
 8011ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ea6:	81a3      	strhlt	r3, [r4, #12]
 8011ea8:	bd10      	pop	{r4, pc}

08011eaa <__swrite>:
 8011eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eae:	461f      	mov	r7, r3
 8011eb0:	898b      	ldrh	r3, [r1, #12]
 8011eb2:	05db      	lsls	r3, r3, #23
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	4616      	mov	r6, r2
 8011eba:	d505      	bpl.n	8011ec8 <__swrite+0x1e>
 8011ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ec0:	2302      	movs	r3, #2
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f000 f868 	bl	8011f98 <_lseek_r>
 8011ec8:	89a3      	ldrh	r3, [r4, #12]
 8011eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ed2:	81a3      	strh	r3, [r4, #12]
 8011ed4:	4632      	mov	r2, r6
 8011ed6:	463b      	mov	r3, r7
 8011ed8:	4628      	mov	r0, r5
 8011eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ede:	f000 b817 	b.w	8011f10 <_write_r>

08011ee2 <__sseek>:
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	460c      	mov	r4, r1
 8011ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eea:	f000 f855 	bl	8011f98 <_lseek_r>
 8011eee:	1c43      	adds	r3, r0, #1
 8011ef0:	89a3      	ldrh	r3, [r4, #12]
 8011ef2:	bf15      	itete	ne
 8011ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011efe:	81a3      	strheq	r3, [r4, #12]
 8011f00:	bf18      	it	ne
 8011f02:	81a3      	strhne	r3, [r4, #12]
 8011f04:	bd10      	pop	{r4, pc}

08011f06 <__sclose>:
 8011f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f0a:	f000 b813 	b.w	8011f34 <_close_r>
	...

08011f10 <_write_r>:
 8011f10:	b538      	push	{r3, r4, r5, lr}
 8011f12:	4d07      	ldr	r5, [pc, #28]	; (8011f30 <_write_r+0x20>)
 8011f14:	4604      	mov	r4, r0
 8011f16:	4608      	mov	r0, r1
 8011f18:	4611      	mov	r1, r2
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	602a      	str	r2, [r5, #0]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	f001 fbae 	bl	8013680 <_write>
 8011f24:	1c43      	adds	r3, r0, #1
 8011f26:	d102      	bne.n	8011f2e <_write_r+0x1e>
 8011f28:	682b      	ldr	r3, [r5, #0]
 8011f2a:	b103      	cbz	r3, 8011f2e <_write_r+0x1e>
 8011f2c:	6023      	str	r3, [r4, #0]
 8011f2e:	bd38      	pop	{r3, r4, r5, pc}
 8011f30:	2000b370 	.word	0x2000b370

08011f34 <_close_r>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	4d06      	ldr	r5, [pc, #24]	; (8011f50 <_close_r+0x1c>)
 8011f38:	2300      	movs	r3, #0
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4608      	mov	r0, r1
 8011f3e:	602b      	str	r3, [r5, #0]
 8011f40:	f001 fb66 	bl	8013610 <_close>
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	d102      	bne.n	8011f4e <_close_r+0x1a>
 8011f48:	682b      	ldr	r3, [r5, #0]
 8011f4a:	b103      	cbz	r3, 8011f4e <_close_r+0x1a>
 8011f4c:	6023      	str	r3, [r4, #0]
 8011f4e:	bd38      	pop	{r3, r4, r5, pc}
 8011f50:	2000b370 	.word	0x2000b370

08011f54 <_fstat_r>:
 8011f54:	b538      	push	{r3, r4, r5, lr}
 8011f56:	4d07      	ldr	r5, [pc, #28]	; (8011f74 <_fstat_r+0x20>)
 8011f58:	2300      	movs	r3, #0
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	4608      	mov	r0, r1
 8011f5e:	4611      	mov	r1, r2
 8011f60:	602b      	str	r3, [r5, #0]
 8011f62:	f001 fb5d 	bl	8013620 <_fstat>
 8011f66:	1c43      	adds	r3, r0, #1
 8011f68:	d102      	bne.n	8011f70 <_fstat_r+0x1c>
 8011f6a:	682b      	ldr	r3, [r5, #0]
 8011f6c:	b103      	cbz	r3, 8011f70 <_fstat_r+0x1c>
 8011f6e:	6023      	str	r3, [r4, #0]
 8011f70:	bd38      	pop	{r3, r4, r5, pc}
 8011f72:	bf00      	nop
 8011f74:	2000b370 	.word	0x2000b370

08011f78 <_isatty_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4d06      	ldr	r5, [pc, #24]	; (8011f94 <_isatty_r+0x1c>)
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	4604      	mov	r4, r0
 8011f80:	4608      	mov	r0, r1
 8011f82:	602b      	str	r3, [r5, #0]
 8011f84:	f001 fb5c 	bl	8013640 <_isatty>
 8011f88:	1c43      	adds	r3, r0, #1
 8011f8a:	d102      	bne.n	8011f92 <_isatty_r+0x1a>
 8011f8c:	682b      	ldr	r3, [r5, #0]
 8011f8e:	b103      	cbz	r3, 8011f92 <_isatty_r+0x1a>
 8011f90:	6023      	str	r3, [r4, #0]
 8011f92:	bd38      	pop	{r3, r4, r5, pc}
 8011f94:	2000b370 	.word	0x2000b370

08011f98 <_lseek_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4d07      	ldr	r5, [pc, #28]	; (8011fb8 <_lseek_r+0x20>)
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	4611      	mov	r1, r2
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	602a      	str	r2, [r5, #0]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	f001 fb5a 	bl	8013660 <_lseek>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	d102      	bne.n	8011fb6 <_lseek_r+0x1e>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	b103      	cbz	r3, 8011fb6 <_lseek_r+0x1e>
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	bd38      	pop	{r3, r4, r5, pc}
 8011fb8:	2000b370 	.word	0x2000b370

08011fbc <_read_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4d07      	ldr	r5, [pc, #28]	; (8011fdc <_read_r+0x20>)
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	4608      	mov	r0, r1
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	602a      	str	r2, [r5, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	f001 fb50 	bl	8013670 <_read>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_read_r+0x1e>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_read_r+0x1e>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	2000b370 	.word	0x2000b370

08011fe0 <pow>:
 8011fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe2:	ed2d 8b02 	vpush	{d8}
 8011fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8011fea:	eef0 8a60 	vmov.f32	s17, s1
 8011fee:	ec55 4b11 	vmov	r4, r5, d1
 8011ff2:	f000 f8e9 	bl	80121c8 <__ieee754_pow>
 8011ff6:	4622      	mov	r2, r4
 8011ff8:	462b      	mov	r3, r5
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	ec57 6b10 	vmov	r6, r7, d0
 8012002:	f7ee fdc3 	bl	8000b8c <__aeabi_dcmpun>
 8012006:	2800      	cmp	r0, #0
 8012008:	d13b      	bne.n	8012082 <pow+0xa2>
 801200a:	ec51 0b18 	vmov	r0, r1, d8
 801200e:	2200      	movs	r2, #0
 8012010:	2300      	movs	r3, #0
 8012012:	f7ee fd89 	bl	8000b28 <__aeabi_dcmpeq>
 8012016:	b1b8      	cbz	r0, 8012048 <pow+0x68>
 8012018:	2200      	movs	r2, #0
 801201a:	2300      	movs	r3, #0
 801201c:	4620      	mov	r0, r4
 801201e:	4629      	mov	r1, r5
 8012020:	f7ee fd82 	bl	8000b28 <__aeabi_dcmpeq>
 8012024:	2800      	cmp	r0, #0
 8012026:	d146      	bne.n	80120b6 <pow+0xd6>
 8012028:	ec45 4b10 	vmov	d0, r4, r5
 801202c:	f001 f9d9 	bl	80133e2 <finite>
 8012030:	b338      	cbz	r0, 8012082 <pow+0xa2>
 8012032:	2200      	movs	r2, #0
 8012034:	2300      	movs	r3, #0
 8012036:	4620      	mov	r0, r4
 8012038:	4629      	mov	r1, r5
 801203a:	f7ee fd7f 	bl	8000b3c <__aeabi_dcmplt>
 801203e:	b300      	cbz	r0, 8012082 <pow+0xa2>
 8012040:	f7fd f8b4 	bl	800f1ac <__errno>
 8012044:	2322      	movs	r3, #34	; 0x22
 8012046:	e01b      	b.n	8012080 <pow+0xa0>
 8012048:	ec47 6b10 	vmov	d0, r6, r7
 801204c:	f001 f9c9 	bl	80133e2 <finite>
 8012050:	b9e0      	cbnz	r0, 801208c <pow+0xac>
 8012052:	eeb0 0a48 	vmov.f32	s0, s16
 8012056:	eef0 0a68 	vmov.f32	s1, s17
 801205a:	f001 f9c2 	bl	80133e2 <finite>
 801205e:	b1a8      	cbz	r0, 801208c <pow+0xac>
 8012060:	ec45 4b10 	vmov	d0, r4, r5
 8012064:	f001 f9bd 	bl	80133e2 <finite>
 8012068:	b180      	cbz	r0, 801208c <pow+0xac>
 801206a:	4632      	mov	r2, r6
 801206c:	463b      	mov	r3, r7
 801206e:	4630      	mov	r0, r6
 8012070:	4639      	mov	r1, r7
 8012072:	f7ee fd8b 	bl	8000b8c <__aeabi_dcmpun>
 8012076:	2800      	cmp	r0, #0
 8012078:	d0e2      	beq.n	8012040 <pow+0x60>
 801207a:	f7fd f897 	bl	800f1ac <__errno>
 801207e:	2321      	movs	r3, #33	; 0x21
 8012080:	6003      	str	r3, [r0, #0]
 8012082:	ecbd 8b02 	vpop	{d8}
 8012086:	ec47 6b10 	vmov	d0, r6, r7
 801208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801208c:	2200      	movs	r2, #0
 801208e:	2300      	movs	r3, #0
 8012090:	4630      	mov	r0, r6
 8012092:	4639      	mov	r1, r7
 8012094:	f7ee fd48 	bl	8000b28 <__aeabi_dcmpeq>
 8012098:	2800      	cmp	r0, #0
 801209a:	d0f2      	beq.n	8012082 <pow+0xa2>
 801209c:	eeb0 0a48 	vmov.f32	s0, s16
 80120a0:	eef0 0a68 	vmov.f32	s1, s17
 80120a4:	f001 f99d 	bl	80133e2 <finite>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d0ea      	beq.n	8012082 <pow+0xa2>
 80120ac:	ec45 4b10 	vmov	d0, r4, r5
 80120b0:	f001 f997 	bl	80133e2 <finite>
 80120b4:	e7c3      	b.n	801203e <pow+0x5e>
 80120b6:	4f01      	ldr	r7, [pc, #4]	; (80120bc <pow+0xdc>)
 80120b8:	2600      	movs	r6, #0
 80120ba:	e7e2      	b.n	8012082 <pow+0xa2>
 80120bc:	3ff00000 	.word	0x3ff00000

080120c0 <sqrt>:
 80120c0:	b538      	push	{r3, r4, r5, lr}
 80120c2:	ed2d 8b02 	vpush	{d8}
 80120c6:	ec55 4b10 	vmov	r4, r5, d0
 80120ca:	f000 fdab 	bl	8012c24 <__ieee754_sqrt>
 80120ce:	4622      	mov	r2, r4
 80120d0:	462b      	mov	r3, r5
 80120d2:	4620      	mov	r0, r4
 80120d4:	4629      	mov	r1, r5
 80120d6:	eeb0 8a40 	vmov.f32	s16, s0
 80120da:	eef0 8a60 	vmov.f32	s17, s1
 80120de:	f7ee fd55 	bl	8000b8c <__aeabi_dcmpun>
 80120e2:	b990      	cbnz	r0, 801210a <sqrt+0x4a>
 80120e4:	2200      	movs	r2, #0
 80120e6:	2300      	movs	r3, #0
 80120e8:	4620      	mov	r0, r4
 80120ea:	4629      	mov	r1, r5
 80120ec:	f7ee fd26 	bl	8000b3c <__aeabi_dcmplt>
 80120f0:	b158      	cbz	r0, 801210a <sqrt+0x4a>
 80120f2:	f7fd f85b 	bl	800f1ac <__errno>
 80120f6:	2321      	movs	r3, #33	; 0x21
 80120f8:	6003      	str	r3, [r0, #0]
 80120fa:	2200      	movs	r2, #0
 80120fc:	2300      	movs	r3, #0
 80120fe:	4610      	mov	r0, r2
 8012100:	4619      	mov	r1, r3
 8012102:	f7ee fbd3 	bl	80008ac <__aeabi_ddiv>
 8012106:	ec41 0b18 	vmov	d8, r0, r1
 801210a:	eeb0 0a48 	vmov.f32	s0, s16
 801210e:	eef0 0a68 	vmov.f32	s1, s17
 8012112:	ecbd 8b02 	vpop	{d8}
 8012116:	bd38      	pop	{r3, r4, r5, pc}

08012118 <powf>:
 8012118:	b508      	push	{r3, lr}
 801211a:	ed2d 8b04 	vpush	{d8-d9}
 801211e:	eeb0 8a60 	vmov.f32	s16, s1
 8012122:	eeb0 9a40 	vmov.f32	s18, s0
 8012126:	f000 fe2f 	bl	8012d88 <__ieee754_powf>
 801212a:	eeb4 8a48 	vcmp.f32	s16, s16
 801212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012132:	eef0 8a40 	vmov.f32	s17, s0
 8012136:	d63e      	bvs.n	80121b6 <powf+0x9e>
 8012138:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012140:	d112      	bne.n	8012168 <powf+0x50>
 8012142:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214a:	d039      	beq.n	80121c0 <powf+0xa8>
 801214c:	eeb0 0a48 	vmov.f32	s0, s16
 8012150:	f001 f9df 	bl	8013512 <finitef>
 8012154:	b378      	cbz	r0, 80121b6 <powf+0x9e>
 8012156:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215e:	d52a      	bpl.n	80121b6 <powf+0x9e>
 8012160:	f7fd f824 	bl	800f1ac <__errno>
 8012164:	2322      	movs	r3, #34	; 0x22
 8012166:	e014      	b.n	8012192 <powf+0x7a>
 8012168:	f001 f9d3 	bl	8013512 <finitef>
 801216c:	b998      	cbnz	r0, 8012196 <powf+0x7e>
 801216e:	eeb0 0a49 	vmov.f32	s0, s18
 8012172:	f001 f9ce 	bl	8013512 <finitef>
 8012176:	b170      	cbz	r0, 8012196 <powf+0x7e>
 8012178:	eeb0 0a48 	vmov.f32	s0, s16
 801217c:	f001 f9c9 	bl	8013512 <finitef>
 8012180:	b148      	cbz	r0, 8012196 <powf+0x7e>
 8012182:	eef4 8a68 	vcmp.f32	s17, s17
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	d7e9      	bvc.n	8012160 <powf+0x48>
 801218c:	f7fd f80e 	bl	800f1ac <__errno>
 8012190:	2321      	movs	r3, #33	; 0x21
 8012192:	6003      	str	r3, [r0, #0]
 8012194:	e00f      	b.n	80121b6 <powf+0x9e>
 8012196:	eef5 8a40 	vcmp.f32	s17, #0.0
 801219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219e:	d10a      	bne.n	80121b6 <powf+0x9e>
 80121a0:	eeb0 0a49 	vmov.f32	s0, s18
 80121a4:	f001 f9b5 	bl	8013512 <finitef>
 80121a8:	b128      	cbz	r0, 80121b6 <powf+0x9e>
 80121aa:	eeb0 0a48 	vmov.f32	s0, s16
 80121ae:	f001 f9b0 	bl	8013512 <finitef>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d1d4      	bne.n	8012160 <powf+0x48>
 80121b6:	eeb0 0a68 	vmov.f32	s0, s17
 80121ba:	ecbd 8b04 	vpop	{d8-d9}
 80121be:	bd08      	pop	{r3, pc}
 80121c0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80121c4:	e7f7      	b.n	80121b6 <powf+0x9e>
	...

080121c8 <__ieee754_pow>:
 80121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121cc:	ed2d 8b06 	vpush	{d8-d10}
 80121d0:	b089      	sub	sp, #36	; 0x24
 80121d2:	ed8d 1b00 	vstr	d1, [sp]
 80121d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80121da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80121de:	ea58 0102 	orrs.w	r1, r8, r2
 80121e2:	ec57 6b10 	vmov	r6, r7, d0
 80121e6:	d115      	bne.n	8012214 <__ieee754_pow+0x4c>
 80121e8:	19b3      	adds	r3, r6, r6
 80121ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80121ee:	4152      	adcs	r2, r2
 80121f0:	4299      	cmp	r1, r3
 80121f2:	4b89      	ldr	r3, [pc, #548]	; (8012418 <__ieee754_pow+0x250>)
 80121f4:	4193      	sbcs	r3, r2
 80121f6:	f080 84d2 	bcs.w	8012b9e <__ieee754_pow+0x9d6>
 80121fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121fe:	4630      	mov	r0, r6
 8012200:	4639      	mov	r1, r7
 8012202:	f7ee f873 	bl	80002ec <__adddf3>
 8012206:	ec41 0b10 	vmov	d0, r0, r1
 801220a:	b009      	add	sp, #36	; 0x24
 801220c:	ecbd 8b06 	vpop	{d8-d10}
 8012210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012214:	4b81      	ldr	r3, [pc, #516]	; (801241c <__ieee754_pow+0x254>)
 8012216:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801221a:	429c      	cmp	r4, r3
 801221c:	ee10 aa10 	vmov	sl, s0
 8012220:	463d      	mov	r5, r7
 8012222:	dc06      	bgt.n	8012232 <__ieee754_pow+0x6a>
 8012224:	d101      	bne.n	801222a <__ieee754_pow+0x62>
 8012226:	2e00      	cmp	r6, #0
 8012228:	d1e7      	bne.n	80121fa <__ieee754_pow+0x32>
 801222a:	4598      	cmp	r8, r3
 801222c:	dc01      	bgt.n	8012232 <__ieee754_pow+0x6a>
 801222e:	d10f      	bne.n	8012250 <__ieee754_pow+0x88>
 8012230:	b172      	cbz	r2, 8012250 <__ieee754_pow+0x88>
 8012232:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012236:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801223a:	ea55 050a 	orrs.w	r5, r5, sl
 801223e:	d1dc      	bne.n	80121fa <__ieee754_pow+0x32>
 8012240:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012244:	18db      	adds	r3, r3, r3
 8012246:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801224a:	4152      	adcs	r2, r2
 801224c:	429d      	cmp	r5, r3
 801224e:	e7d0      	b.n	80121f2 <__ieee754_pow+0x2a>
 8012250:	2d00      	cmp	r5, #0
 8012252:	da3b      	bge.n	80122cc <__ieee754_pow+0x104>
 8012254:	4b72      	ldr	r3, [pc, #456]	; (8012420 <__ieee754_pow+0x258>)
 8012256:	4598      	cmp	r8, r3
 8012258:	dc51      	bgt.n	80122fe <__ieee754_pow+0x136>
 801225a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801225e:	4598      	cmp	r8, r3
 8012260:	f340 84ac 	ble.w	8012bbc <__ieee754_pow+0x9f4>
 8012264:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012268:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801226c:	2b14      	cmp	r3, #20
 801226e:	dd0f      	ble.n	8012290 <__ieee754_pow+0xc8>
 8012270:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012274:	fa22 f103 	lsr.w	r1, r2, r3
 8012278:	fa01 f303 	lsl.w	r3, r1, r3
 801227c:	4293      	cmp	r3, r2
 801227e:	f040 849d 	bne.w	8012bbc <__ieee754_pow+0x9f4>
 8012282:	f001 0101 	and.w	r1, r1, #1
 8012286:	f1c1 0302 	rsb	r3, r1, #2
 801228a:	9304      	str	r3, [sp, #16]
 801228c:	b182      	cbz	r2, 80122b0 <__ieee754_pow+0xe8>
 801228e:	e05f      	b.n	8012350 <__ieee754_pow+0x188>
 8012290:	2a00      	cmp	r2, #0
 8012292:	d15b      	bne.n	801234c <__ieee754_pow+0x184>
 8012294:	f1c3 0314 	rsb	r3, r3, #20
 8012298:	fa48 f103 	asr.w	r1, r8, r3
 801229c:	fa01 f303 	lsl.w	r3, r1, r3
 80122a0:	4543      	cmp	r3, r8
 80122a2:	f040 8488 	bne.w	8012bb6 <__ieee754_pow+0x9ee>
 80122a6:	f001 0101 	and.w	r1, r1, #1
 80122aa:	f1c1 0302 	rsb	r3, r1, #2
 80122ae:	9304      	str	r3, [sp, #16]
 80122b0:	4b5c      	ldr	r3, [pc, #368]	; (8012424 <__ieee754_pow+0x25c>)
 80122b2:	4598      	cmp	r8, r3
 80122b4:	d132      	bne.n	801231c <__ieee754_pow+0x154>
 80122b6:	f1b9 0f00 	cmp.w	r9, #0
 80122ba:	f280 8478 	bge.w	8012bae <__ieee754_pow+0x9e6>
 80122be:	4959      	ldr	r1, [pc, #356]	; (8012424 <__ieee754_pow+0x25c>)
 80122c0:	4632      	mov	r2, r6
 80122c2:	463b      	mov	r3, r7
 80122c4:	2000      	movs	r0, #0
 80122c6:	f7ee faf1 	bl	80008ac <__aeabi_ddiv>
 80122ca:	e79c      	b.n	8012206 <__ieee754_pow+0x3e>
 80122cc:	2300      	movs	r3, #0
 80122ce:	9304      	str	r3, [sp, #16]
 80122d0:	2a00      	cmp	r2, #0
 80122d2:	d13d      	bne.n	8012350 <__ieee754_pow+0x188>
 80122d4:	4b51      	ldr	r3, [pc, #324]	; (801241c <__ieee754_pow+0x254>)
 80122d6:	4598      	cmp	r8, r3
 80122d8:	d1ea      	bne.n	80122b0 <__ieee754_pow+0xe8>
 80122da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80122de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80122e2:	ea53 030a 	orrs.w	r3, r3, sl
 80122e6:	f000 845a 	beq.w	8012b9e <__ieee754_pow+0x9d6>
 80122ea:	4b4f      	ldr	r3, [pc, #316]	; (8012428 <__ieee754_pow+0x260>)
 80122ec:	429c      	cmp	r4, r3
 80122ee:	dd08      	ble.n	8012302 <__ieee754_pow+0x13a>
 80122f0:	f1b9 0f00 	cmp.w	r9, #0
 80122f4:	f2c0 8457 	blt.w	8012ba6 <__ieee754_pow+0x9de>
 80122f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122fc:	e783      	b.n	8012206 <__ieee754_pow+0x3e>
 80122fe:	2302      	movs	r3, #2
 8012300:	e7e5      	b.n	80122ce <__ieee754_pow+0x106>
 8012302:	f1b9 0f00 	cmp.w	r9, #0
 8012306:	f04f 0000 	mov.w	r0, #0
 801230a:	f04f 0100 	mov.w	r1, #0
 801230e:	f6bf af7a 	bge.w	8012206 <__ieee754_pow+0x3e>
 8012312:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012316:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801231a:	e774      	b.n	8012206 <__ieee754_pow+0x3e>
 801231c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012320:	d106      	bne.n	8012330 <__ieee754_pow+0x168>
 8012322:	4632      	mov	r2, r6
 8012324:	463b      	mov	r3, r7
 8012326:	4630      	mov	r0, r6
 8012328:	4639      	mov	r1, r7
 801232a:	f7ee f995 	bl	8000658 <__aeabi_dmul>
 801232e:	e76a      	b.n	8012206 <__ieee754_pow+0x3e>
 8012330:	4b3e      	ldr	r3, [pc, #248]	; (801242c <__ieee754_pow+0x264>)
 8012332:	4599      	cmp	r9, r3
 8012334:	d10c      	bne.n	8012350 <__ieee754_pow+0x188>
 8012336:	2d00      	cmp	r5, #0
 8012338:	db0a      	blt.n	8012350 <__ieee754_pow+0x188>
 801233a:	ec47 6b10 	vmov	d0, r6, r7
 801233e:	b009      	add	sp, #36	; 0x24
 8012340:	ecbd 8b06 	vpop	{d8-d10}
 8012344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012348:	f000 bc6c 	b.w	8012c24 <__ieee754_sqrt>
 801234c:	2300      	movs	r3, #0
 801234e:	9304      	str	r3, [sp, #16]
 8012350:	ec47 6b10 	vmov	d0, r6, r7
 8012354:	f001 f83c 	bl	80133d0 <fabs>
 8012358:	ec51 0b10 	vmov	r0, r1, d0
 801235c:	f1ba 0f00 	cmp.w	sl, #0
 8012360:	d129      	bne.n	80123b6 <__ieee754_pow+0x1ee>
 8012362:	b124      	cbz	r4, 801236e <__ieee754_pow+0x1a6>
 8012364:	4b2f      	ldr	r3, [pc, #188]	; (8012424 <__ieee754_pow+0x25c>)
 8012366:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801236a:	429a      	cmp	r2, r3
 801236c:	d123      	bne.n	80123b6 <__ieee754_pow+0x1ee>
 801236e:	f1b9 0f00 	cmp.w	r9, #0
 8012372:	da05      	bge.n	8012380 <__ieee754_pow+0x1b8>
 8012374:	4602      	mov	r2, r0
 8012376:	460b      	mov	r3, r1
 8012378:	2000      	movs	r0, #0
 801237a:	492a      	ldr	r1, [pc, #168]	; (8012424 <__ieee754_pow+0x25c>)
 801237c:	f7ee fa96 	bl	80008ac <__aeabi_ddiv>
 8012380:	2d00      	cmp	r5, #0
 8012382:	f6bf af40 	bge.w	8012206 <__ieee754_pow+0x3e>
 8012386:	9b04      	ldr	r3, [sp, #16]
 8012388:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801238c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012390:	4323      	orrs	r3, r4
 8012392:	d108      	bne.n	80123a6 <__ieee754_pow+0x1de>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	4610      	mov	r0, r2
 801239a:	4619      	mov	r1, r3
 801239c:	f7ed ffa4 	bl	80002e8 <__aeabi_dsub>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	e78f      	b.n	80122c6 <__ieee754_pow+0xfe>
 80123a6:	9b04      	ldr	r3, [sp, #16]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	f47f af2c 	bne.w	8012206 <__ieee754_pow+0x3e>
 80123ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123b2:	4619      	mov	r1, r3
 80123b4:	e727      	b.n	8012206 <__ieee754_pow+0x3e>
 80123b6:	0feb      	lsrs	r3, r5, #31
 80123b8:	3b01      	subs	r3, #1
 80123ba:	9306      	str	r3, [sp, #24]
 80123bc:	9a06      	ldr	r2, [sp, #24]
 80123be:	9b04      	ldr	r3, [sp, #16]
 80123c0:	4313      	orrs	r3, r2
 80123c2:	d102      	bne.n	80123ca <__ieee754_pow+0x202>
 80123c4:	4632      	mov	r2, r6
 80123c6:	463b      	mov	r3, r7
 80123c8:	e7e6      	b.n	8012398 <__ieee754_pow+0x1d0>
 80123ca:	4b19      	ldr	r3, [pc, #100]	; (8012430 <__ieee754_pow+0x268>)
 80123cc:	4598      	cmp	r8, r3
 80123ce:	f340 80fb 	ble.w	80125c8 <__ieee754_pow+0x400>
 80123d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80123d6:	4598      	cmp	r8, r3
 80123d8:	4b13      	ldr	r3, [pc, #76]	; (8012428 <__ieee754_pow+0x260>)
 80123da:	dd0c      	ble.n	80123f6 <__ieee754_pow+0x22e>
 80123dc:	429c      	cmp	r4, r3
 80123de:	dc0f      	bgt.n	8012400 <__ieee754_pow+0x238>
 80123e0:	f1b9 0f00 	cmp.w	r9, #0
 80123e4:	da0f      	bge.n	8012406 <__ieee754_pow+0x23e>
 80123e6:	2000      	movs	r0, #0
 80123e8:	b009      	add	sp, #36	; 0x24
 80123ea:	ecbd 8b06 	vpop	{d8-d10}
 80123ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f2:	f000 bfc1 	b.w	8013378 <__math_oflow>
 80123f6:	429c      	cmp	r4, r3
 80123f8:	dbf2      	blt.n	80123e0 <__ieee754_pow+0x218>
 80123fa:	4b0a      	ldr	r3, [pc, #40]	; (8012424 <__ieee754_pow+0x25c>)
 80123fc:	429c      	cmp	r4, r3
 80123fe:	dd19      	ble.n	8012434 <__ieee754_pow+0x26c>
 8012400:	f1b9 0f00 	cmp.w	r9, #0
 8012404:	dcef      	bgt.n	80123e6 <__ieee754_pow+0x21e>
 8012406:	2000      	movs	r0, #0
 8012408:	b009      	add	sp, #36	; 0x24
 801240a:	ecbd 8b06 	vpop	{d8-d10}
 801240e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012412:	f000 bfa8 	b.w	8013366 <__math_uflow>
 8012416:	bf00      	nop
 8012418:	fff00000 	.word	0xfff00000
 801241c:	7ff00000 	.word	0x7ff00000
 8012420:	433fffff 	.word	0x433fffff
 8012424:	3ff00000 	.word	0x3ff00000
 8012428:	3fefffff 	.word	0x3fefffff
 801242c:	3fe00000 	.word	0x3fe00000
 8012430:	41e00000 	.word	0x41e00000
 8012434:	4b60      	ldr	r3, [pc, #384]	; (80125b8 <__ieee754_pow+0x3f0>)
 8012436:	2200      	movs	r2, #0
 8012438:	f7ed ff56 	bl	80002e8 <__aeabi_dsub>
 801243c:	a354      	add	r3, pc, #336	; (adr r3, 8012590 <__ieee754_pow+0x3c8>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	4604      	mov	r4, r0
 8012444:	460d      	mov	r5, r1
 8012446:	f7ee f907 	bl	8000658 <__aeabi_dmul>
 801244a:	a353      	add	r3, pc, #332	; (adr r3, 8012598 <__ieee754_pow+0x3d0>)
 801244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012450:	4606      	mov	r6, r0
 8012452:	460f      	mov	r7, r1
 8012454:	4620      	mov	r0, r4
 8012456:	4629      	mov	r1, r5
 8012458:	f7ee f8fe 	bl	8000658 <__aeabi_dmul>
 801245c:	4b57      	ldr	r3, [pc, #348]	; (80125bc <__ieee754_pow+0x3f4>)
 801245e:	4682      	mov	sl, r0
 8012460:	468b      	mov	fp, r1
 8012462:	2200      	movs	r2, #0
 8012464:	4620      	mov	r0, r4
 8012466:	4629      	mov	r1, r5
 8012468:	f7ee f8f6 	bl	8000658 <__aeabi_dmul>
 801246c:	4602      	mov	r2, r0
 801246e:	460b      	mov	r3, r1
 8012470:	a14b      	add	r1, pc, #300	; (adr r1, 80125a0 <__ieee754_pow+0x3d8>)
 8012472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012476:	f7ed ff37 	bl	80002e8 <__aeabi_dsub>
 801247a:	4622      	mov	r2, r4
 801247c:	462b      	mov	r3, r5
 801247e:	f7ee f8eb 	bl	8000658 <__aeabi_dmul>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	2000      	movs	r0, #0
 8012488:	494d      	ldr	r1, [pc, #308]	; (80125c0 <__ieee754_pow+0x3f8>)
 801248a:	f7ed ff2d 	bl	80002e8 <__aeabi_dsub>
 801248e:	4622      	mov	r2, r4
 8012490:	4680      	mov	r8, r0
 8012492:	4689      	mov	r9, r1
 8012494:	462b      	mov	r3, r5
 8012496:	4620      	mov	r0, r4
 8012498:	4629      	mov	r1, r5
 801249a:	f7ee f8dd 	bl	8000658 <__aeabi_dmul>
 801249e:	4602      	mov	r2, r0
 80124a0:	460b      	mov	r3, r1
 80124a2:	4640      	mov	r0, r8
 80124a4:	4649      	mov	r1, r9
 80124a6:	f7ee f8d7 	bl	8000658 <__aeabi_dmul>
 80124aa:	a33f      	add	r3, pc, #252	; (adr r3, 80125a8 <__ieee754_pow+0x3e0>)
 80124ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b0:	f7ee f8d2 	bl	8000658 <__aeabi_dmul>
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	4650      	mov	r0, sl
 80124ba:	4659      	mov	r1, fp
 80124bc:	f7ed ff14 	bl	80002e8 <__aeabi_dsub>
 80124c0:	4602      	mov	r2, r0
 80124c2:	460b      	mov	r3, r1
 80124c4:	4680      	mov	r8, r0
 80124c6:	4689      	mov	r9, r1
 80124c8:	4630      	mov	r0, r6
 80124ca:	4639      	mov	r1, r7
 80124cc:	f7ed ff0e 	bl	80002ec <__adddf3>
 80124d0:	2000      	movs	r0, #0
 80124d2:	4632      	mov	r2, r6
 80124d4:	463b      	mov	r3, r7
 80124d6:	4604      	mov	r4, r0
 80124d8:	460d      	mov	r5, r1
 80124da:	f7ed ff05 	bl	80002e8 <__aeabi_dsub>
 80124de:	4602      	mov	r2, r0
 80124e0:	460b      	mov	r3, r1
 80124e2:	4640      	mov	r0, r8
 80124e4:	4649      	mov	r1, r9
 80124e6:	f7ed feff 	bl	80002e8 <__aeabi_dsub>
 80124ea:	9b04      	ldr	r3, [sp, #16]
 80124ec:	9a06      	ldr	r2, [sp, #24]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	4313      	orrs	r3, r2
 80124f2:	4682      	mov	sl, r0
 80124f4:	468b      	mov	fp, r1
 80124f6:	f040 81e7 	bne.w	80128c8 <__ieee754_pow+0x700>
 80124fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80125b0 <__ieee754_pow+0x3e8>
 80124fe:	eeb0 8a47 	vmov.f32	s16, s14
 8012502:	eef0 8a67 	vmov.f32	s17, s15
 8012506:	e9dd 6700 	ldrd	r6, r7, [sp]
 801250a:	2600      	movs	r6, #0
 801250c:	4632      	mov	r2, r6
 801250e:	463b      	mov	r3, r7
 8012510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012514:	f7ed fee8 	bl	80002e8 <__aeabi_dsub>
 8012518:	4622      	mov	r2, r4
 801251a:	462b      	mov	r3, r5
 801251c:	f7ee f89c 	bl	8000658 <__aeabi_dmul>
 8012520:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012524:	4680      	mov	r8, r0
 8012526:	4689      	mov	r9, r1
 8012528:	4650      	mov	r0, sl
 801252a:	4659      	mov	r1, fp
 801252c:	f7ee f894 	bl	8000658 <__aeabi_dmul>
 8012530:	4602      	mov	r2, r0
 8012532:	460b      	mov	r3, r1
 8012534:	4640      	mov	r0, r8
 8012536:	4649      	mov	r1, r9
 8012538:	f7ed fed8 	bl	80002ec <__adddf3>
 801253c:	4632      	mov	r2, r6
 801253e:	463b      	mov	r3, r7
 8012540:	4680      	mov	r8, r0
 8012542:	4689      	mov	r9, r1
 8012544:	4620      	mov	r0, r4
 8012546:	4629      	mov	r1, r5
 8012548:	f7ee f886 	bl	8000658 <__aeabi_dmul>
 801254c:	460b      	mov	r3, r1
 801254e:	4604      	mov	r4, r0
 8012550:	460d      	mov	r5, r1
 8012552:	4602      	mov	r2, r0
 8012554:	4649      	mov	r1, r9
 8012556:	4640      	mov	r0, r8
 8012558:	f7ed fec8 	bl	80002ec <__adddf3>
 801255c:	4b19      	ldr	r3, [pc, #100]	; (80125c4 <__ieee754_pow+0x3fc>)
 801255e:	4299      	cmp	r1, r3
 8012560:	ec45 4b19 	vmov	d9, r4, r5
 8012564:	4606      	mov	r6, r0
 8012566:	460f      	mov	r7, r1
 8012568:	468b      	mov	fp, r1
 801256a:	f340 82f1 	ble.w	8012b50 <__ieee754_pow+0x988>
 801256e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012572:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012576:	4303      	orrs	r3, r0
 8012578:	f000 81e4 	beq.w	8012944 <__ieee754_pow+0x77c>
 801257c:	ec51 0b18 	vmov	r0, r1, d8
 8012580:	2200      	movs	r2, #0
 8012582:	2300      	movs	r3, #0
 8012584:	f7ee fada 	bl	8000b3c <__aeabi_dcmplt>
 8012588:	3800      	subs	r0, #0
 801258a:	bf18      	it	ne
 801258c:	2001      	movne	r0, #1
 801258e:	e72b      	b.n	80123e8 <__ieee754_pow+0x220>
 8012590:	60000000 	.word	0x60000000
 8012594:	3ff71547 	.word	0x3ff71547
 8012598:	f85ddf44 	.word	0xf85ddf44
 801259c:	3e54ae0b 	.word	0x3e54ae0b
 80125a0:	55555555 	.word	0x55555555
 80125a4:	3fd55555 	.word	0x3fd55555
 80125a8:	652b82fe 	.word	0x652b82fe
 80125ac:	3ff71547 	.word	0x3ff71547
 80125b0:	00000000 	.word	0x00000000
 80125b4:	bff00000 	.word	0xbff00000
 80125b8:	3ff00000 	.word	0x3ff00000
 80125bc:	3fd00000 	.word	0x3fd00000
 80125c0:	3fe00000 	.word	0x3fe00000
 80125c4:	408fffff 	.word	0x408fffff
 80125c8:	4bd5      	ldr	r3, [pc, #852]	; (8012920 <__ieee754_pow+0x758>)
 80125ca:	402b      	ands	r3, r5
 80125cc:	2200      	movs	r2, #0
 80125ce:	b92b      	cbnz	r3, 80125dc <__ieee754_pow+0x414>
 80125d0:	4bd4      	ldr	r3, [pc, #848]	; (8012924 <__ieee754_pow+0x75c>)
 80125d2:	f7ee f841 	bl	8000658 <__aeabi_dmul>
 80125d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80125da:	460c      	mov	r4, r1
 80125dc:	1523      	asrs	r3, r4, #20
 80125de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80125e2:	4413      	add	r3, r2
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	4bd0      	ldr	r3, [pc, #832]	; (8012928 <__ieee754_pow+0x760>)
 80125e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80125ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80125f0:	429c      	cmp	r4, r3
 80125f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80125f6:	dd08      	ble.n	801260a <__ieee754_pow+0x442>
 80125f8:	4bcc      	ldr	r3, [pc, #816]	; (801292c <__ieee754_pow+0x764>)
 80125fa:	429c      	cmp	r4, r3
 80125fc:	f340 8162 	ble.w	80128c4 <__ieee754_pow+0x6fc>
 8012600:	9b05      	ldr	r3, [sp, #20]
 8012602:	3301      	adds	r3, #1
 8012604:	9305      	str	r3, [sp, #20]
 8012606:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801260a:	2400      	movs	r4, #0
 801260c:	00e3      	lsls	r3, r4, #3
 801260e:	9307      	str	r3, [sp, #28]
 8012610:	4bc7      	ldr	r3, [pc, #796]	; (8012930 <__ieee754_pow+0x768>)
 8012612:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012616:	ed93 7b00 	vldr	d7, [r3]
 801261a:	4629      	mov	r1, r5
 801261c:	ec53 2b17 	vmov	r2, r3, d7
 8012620:	eeb0 9a47 	vmov.f32	s18, s14
 8012624:	eef0 9a67 	vmov.f32	s19, s15
 8012628:	4682      	mov	sl, r0
 801262a:	f7ed fe5d 	bl	80002e8 <__aeabi_dsub>
 801262e:	4652      	mov	r2, sl
 8012630:	4606      	mov	r6, r0
 8012632:	460f      	mov	r7, r1
 8012634:	462b      	mov	r3, r5
 8012636:	ec51 0b19 	vmov	r0, r1, d9
 801263a:	f7ed fe57 	bl	80002ec <__adddf3>
 801263e:	4602      	mov	r2, r0
 8012640:	460b      	mov	r3, r1
 8012642:	2000      	movs	r0, #0
 8012644:	49bb      	ldr	r1, [pc, #748]	; (8012934 <__ieee754_pow+0x76c>)
 8012646:	f7ee f931 	bl	80008ac <__aeabi_ddiv>
 801264a:	ec41 0b1a 	vmov	d10, r0, r1
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
 8012652:	4630      	mov	r0, r6
 8012654:	4639      	mov	r1, r7
 8012656:	f7ed ffff 	bl	8000658 <__aeabi_dmul>
 801265a:	2300      	movs	r3, #0
 801265c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012660:	9302      	str	r3, [sp, #8]
 8012662:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012666:	46ab      	mov	fp, r5
 8012668:	106d      	asrs	r5, r5, #1
 801266a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801266e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012672:	ec41 0b18 	vmov	d8, r0, r1
 8012676:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801267a:	2200      	movs	r2, #0
 801267c:	4640      	mov	r0, r8
 801267e:	4649      	mov	r1, r9
 8012680:	4614      	mov	r4, r2
 8012682:	461d      	mov	r5, r3
 8012684:	f7ed ffe8 	bl	8000658 <__aeabi_dmul>
 8012688:	4602      	mov	r2, r0
 801268a:	460b      	mov	r3, r1
 801268c:	4630      	mov	r0, r6
 801268e:	4639      	mov	r1, r7
 8012690:	f7ed fe2a 	bl	80002e8 <__aeabi_dsub>
 8012694:	ec53 2b19 	vmov	r2, r3, d9
 8012698:	4606      	mov	r6, r0
 801269a:	460f      	mov	r7, r1
 801269c:	4620      	mov	r0, r4
 801269e:	4629      	mov	r1, r5
 80126a0:	f7ed fe22 	bl	80002e8 <__aeabi_dsub>
 80126a4:	4602      	mov	r2, r0
 80126a6:	460b      	mov	r3, r1
 80126a8:	4650      	mov	r0, sl
 80126aa:	4659      	mov	r1, fp
 80126ac:	f7ed fe1c 	bl	80002e8 <__aeabi_dsub>
 80126b0:	4642      	mov	r2, r8
 80126b2:	464b      	mov	r3, r9
 80126b4:	f7ed ffd0 	bl	8000658 <__aeabi_dmul>
 80126b8:	4602      	mov	r2, r0
 80126ba:	460b      	mov	r3, r1
 80126bc:	4630      	mov	r0, r6
 80126be:	4639      	mov	r1, r7
 80126c0:	f7ed fe12 	bl	80002e8 <__aeabi_dsub>
 80126c4:	ec53 2b1a 	vmov	r2, r3, d10
 80126c8:	f7ed ffc6 	bl	8000658 <__aeabi_dmul>
 80126cc:	ec53 2b18 	vmov	r2, r3, d8
 80126d0:	ec41 0b19 	vmov	d9, r0, r1
 80126d4:	ec51 0b18 	vmov	r0, r1, d8
 80126d8:	f7ed ffbe 	bl	8000658 <__aeabi_dmul>
 80126dc:	a37c      	add	r3, pc, #496	; (adr r3, 80128d0 <__ieee754_pow+0x708>)
 80126de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e2:	4604      	mov	r4, r0
 80126e4:	460d      	mov	r5, r1
 80126e6:	f7ed ffb7 	bl	8000658 <__aeabi_dmul>
 80126ea:	a37b      	add	r3, pc, #492	; (adr r3, 80128d8 <__ieee754_pow+0x710>)
 80126ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f0:	f7ed fdfc 	bl	80002ec <__adddf3>
 80126f4:	4622      	mov	r2, r4
 80126f6:	462b      	mov	r3, r5
 80126f8:	f7ed ffae 	bl	8000658 <__aeabi_dmul>
 80126fc:	a378      	add	r3, pc, #480	; (adr r3, 80128e0 <__ieee754_pow+0x718>)
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	f7ed fdf3 	bl	80002ec <__adddf3>
 8012706:	4622      	mov	r2, r4
 8012708:	462b      	mov	r3, r5
 801270a:	f7ed ffa5 	bl	8000658 <__aeabi_dmul>
 801270e:	a376      	add	r3, pc, #472	; (adr r3, 80128e8 <__ieee754_pow+0x720>)
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	f7ed fdea 	bl	80002ec <__adddf3>
 8012718:	4622      	mov	r2, r4
 801271a:	462b      	mov	r3, r5
 801271c:	f7ed ff9c 	bl	8000658 <__aeabi_dmul>
 8012720:	a373      	add	r3, pc, #460	; (adr r3, 80128f0 <__ieee754_pow+0x728>)
 8012722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012726:	f7ed fde1 	bl	80002ec <__adddf3>
 801272a:	4622      	mov	r2, r4
 801272c:	462b      	mov	r3, r5
 801272e:	f7ed ff93 	bl	8000658 <__aeabi_dmul>
 8012732:	a371      	add	r3, pc, #452	; (adr r3, 80128f8 <__ieee754_pow+0x730>)
 8012734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012738:	f7ed fdd8 	bl	80002ec <__adddf3>
 801273c:	4622      	mov	r2, r4
 801273e:	4606      	mov	r6, r0
 8012740:	460f      	mov	r7, r1
 8012742:	462b      	mov	r3, r5
 8012744:	4620      	mov	r0, r4
 8012746:	4629      	mov	r1, r5
 8012748:	f7ed ff86 	bl	8000658 <__aeabi_dmul>
 801274c:	4602      	mov	r2, r0
 801274e:	460b      	mov	r3, r1
 8012750:	4630      	mov	r0, r6
 8012752:	4639      	mov	r1, r7
 8012754:	f7ed ff80 	bl	8000658 <__aeabi_dmul>
 8012758:	4642      	mov	r2, r8
 801275a:	4604      	mov	r4, r0
 801275c:	460d      	mov	r5, r1
 801275e:	464b      	mov	r3, r9
 8012760:	ec51 0b18 	vmov	r0, r1, d8
 8012764:	f7ed fdc2 	bl	80002ec <__adddf3>
 8012768:	ec53 2b19 	vmov	r2, r3, d9
 801276c:	f7ed ff74 	bl	8000658 <__aeabi_dmul>
 8012770:	4622      	mov	r2, r4
 8012772:	462b      	mov	r3, r5
 8012774:	f7ed fdba 	bl	80002ec <__adddf3>
 8012778:	4642      	mov	r2, r8
 801277a:	4682      	mov	sl, r0
 801277c:	468b      	mov	fp, r1
 801277e:	464b      	mov	r3, r9
 8012780:	4640      	mov	r0, r8
 8012782:	4649      	mov	r1, r9
 8012784:	f7ed ff68 	bl	8000658 <__aeabi_dmul>
 8012788:	4b6b      	ldr	r3, [pc, #428]	; (8012938 <__ieee754_pow+0x770>)
 801278a:	2200      	movs	r2, #0
 801278c:	4606      	mov	r6, r0
 801278e:	460f      	mov	r7, r1
 8012790:	f7ed fdac 	bl	80002ec <__adddf3>
 8012794:	4652      	mov	r2, sl
 8012796:	465b      	mov	r3, fp
 8012798:	f7ed fda8 	bl	80002ec <__adddf3>
 801279c:	2000      	movs	r0, #0
 801279e:	4604      	mov	r4, r0
 80127a0:	460d      	mov	r5, r1
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4640      	mov	r0, r8
 80127a8:	4649      	mov	r1, r9
 80127aa:	f7ed ff55 	bl	8000658 <__aeabi_dmul>
 80127ae:	4b62      	ldr	r3, [pc, #392]	; (8012938 <__ieee754_pow+0x770>)
 80127b0:	4680      	mov	r8, r0
 80127b2:	4689      	mov	r9, r1
 80127b4:	2200      	movs	r2, #0
 80127b6:	4620      	mov	r0, r4
 80127b8:	4629      	mov	r1, r5
 80127ba:	f7ed fd95 	bl	80002e8 <__aeabi_dsub>
 80127be:	4632      	mov	r2, r6
 80127c0:	463b      	mov	r3, r7
 80127c2:	f7ed fd91 	bl	80002e8 <__aeabi_dsub>
 80127c6:	4602      	mov	r2, r0
 80127c8:	460b      	mov	r3, r1
 80127ca:	4650      	mov	r0, sl
 80127cc:	4659      	mov	r1, fp
 80127ce:	f7ed fd8b 	bl	80002e8 <__aeabi_dsub>
 80127d2:	ec53 2b18 	vmov	r2, r3, d8
 80127d6:	f7ed ff3f 	bl	8000658 <__aeabi_dmul>
 80127da:	4622      	mov	r2, r4
 80127dc:	4606      	mov	r6, r0
 80127de:	460f      	mov	r7, r1
 80127e0:	462b      	mov	r3, r5
 80127e2:	ec51 0b19 	vmov	r0, r1, d9
 80127e6:	f7ed ff37 	bl	8000658 <__aeabi_dmul>
 80127ea:	4602      	mov	r2, r0
 80127ec:	460b      	mov	r3, r1
 80127ee:	4630      	mov	r0, r6
 80127f0:	4639      	mov	r1, r7
 80127f2:	f7ed fd7b 	bl	80002ec <__adddf3>
 80127f6:	4606      	mov	r6, r0
 80127f8:	460f      	mov	r7, r1
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	4640      	mov	r0, r8
 8012800:	4649      	mov	r1, r9
 8012802:	f7ed fd73 	bl	80002ec <__adddf3>
 8012806:	a33e      	add	r3, pc, #248	; (adr r3, 8012900 <__ieee754_pow+0x738>)
 8012808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280c:	2000      	movs	r0, #0
 801280e:	4604      	mov	r4, r0
 8012810:	460d      	mov	r5, r1
 8012812:	f7ed ff21 	bl	8000658 <__aeabi_dmul>
 8012816:	4642      	mov	r2, r8
 8012818:	ec41 0b18 	vmov	d8, r0, r1
 801281c:	464b      	mov	r3, r9
 801281e:	4620      	mov	r0, r4
 8012820:	4629      	mov	r1, r5
 8012822:	f7ed fd61 	bl	80002e8 <__aeabi_dsub>
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	4630      	mov	r0, r6
 801282c:	4639      	mov	r1, r7
 801282e:	f7ed fd5b 	bl	80002e8 <__aeabi_dsub>
 8012832:	a335      	add	r3, pc, #212	; (adr r3, 8012908 <__ieee754_pow+0x740>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	f7ed ff0e 	bl	8000658 <__aeabi_dmul>
 801283c:	a334      	add	r3, pc, #208	; (adr r3, 8012910 <__ieee754_pow+0x748>)
 801283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012842:	4606      	mov	r6, r0
 8012844:	460f      	mov	r7, r1
 8012846:	4620      	mov	r0, r4
 8012848:	4629      	mov	r1, r5
 801284a:	f7ed ff05 	bl	8000658 <__aeabi_dmul>
 801284e:	4602      	mov	r2, r0
 8012850:	460b      	mov	r3, r1
 8012852:	4630      	mov	r0, r6
 8012854:	4639      	mov	r1, r7
 8012856:	f7ed fd49 	bl	80002ec <__adddf3>
 801285a:	9a07      	ldr	r2, [sp, #28]
 801285c:	4b37      	ldr	r3, [pc, #220]	; (801293c <__ieee754_pow+0x774>)
 801285e:	4413      	add	r3, r2
 8012860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012864:	f7ed fd42 	bl	80002ec <__adddf3>
 8012868:	4682      	mov	sl, r0
 801286a:	9805      	ldr	r0, [sp, #20]
 801286c:	468b      	mov	fp, r1
 801286e:	f7ed fe89 	bl	8000584 <__aeabi_i2d>
 8012872:	9a07      	ldr	r2, [sp, #28]
 8012874:	4b32      	ldr	r3, [pc, #200]	; (8012940 <__ieee754_pow+0x778>)
 8012876:	4413      	add	r3, r2
 8012878:	e9d3 8900 	ldrd	r8, r9, [r3]
 801287c:	4606      	mov	r6, r0
 801287e:	460f      	mov	r7, r1
 8012880:	4652      	mov	r2, sl
 8012882:	465b      	mov	r3, fp
 8012884:	ec51 0b18 	vmov	r0, r1, d8
 8012888:	f7ed fd30 	bl	80002ec <__adddf3>
 801288c:	4642      	mov	r2, r8
 801288e:	464b      	mov	r3, r9
 8012890:	f7ed fd2c 	bl	80002ec <__adddf3>
 8012894:	4632      	mov	r2, r6
 8012896:	463b      	mov	r3, r7
 8012898:	f7ed fd28 	bl	80002ec <__adddf3>
 801289c:	2000      	movs	r0, #0
 801289e:	4632      	mov	r2, r6
 80128a0:	463b      	mov	r3, r7
 80128a2:	4604      	mov	r4, r0
 80128a4:	460d      	mov	r5, r1
 80128a6:	f7ed fd1f 	bl	80002e8 <__aeabi_dsub>
 80128aa:	4642      	mov	r2, r8
 80128ac:	464b      	mov	r3, r9
 80128ae:	f7ed fd1b 	bl	80002e8 <__aeabi_dsub>
 80128b2:	ec53 2b18 	vmov	r2, r3, d8
 80128b6:	f7ed fd17 	bl	80002e8 <__aeabi_dsub>
 80128ba:	4602      	mov	r2, r0
 80128bc:	460b      	mov	r3, r1
 80128be:	4650      	mov	r0, sl
 80128c0:	4659      	mov	r1, fp
 80128c2:	e610      	b.n	80124e6 <__ieee754_pow+0x31e>
 80128c4:	2401      	movs	r4, #1
 80128c6:	e6a1      	b.n	801260c <__ieee754_pow+0x444>
 80128c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012918 <__ieee754_pow+0x750>
 80128cc:	e617      	b.n	80124fe <__ieee754_pow+0x336>
 80128ce:	bf00      	nop
 80128d0:	4a454eef 	.word	0x4a454eef
 80128d4:	3fca7e28 	.word	0x3fca7e28
 80128d8:	93c9db65 	.word	0x93c9db65
 80128dc:	3fcd864a 	.word	0x3fcd864a
 80128e0:	a91d4101 	.word	0xa91d4101
 80128e4:	3fd17460 	.word	0x3fd17460
 80128e8:	518f264d 	.word	0x518f264d
 80128ec:	3fd55555 	.word	0x3fd55555
 80128f0:	db6fabff 	.word	0xdb6fabff
 80128f4:	3fdb6db6 	.word	0x3fdb6db6
 80128f8:	33333303 	.word	0x33333303
 80128fc:	3fe33333 	.word	0x3fe33333
 8012900:	e0000000 	.word	0xe0000000
 8012904:	3feec709 	.word	0x3feec709
 8012908:	dc3a03fd 	.word	0xdc3a03fd
 801290c:	3feec709 	.word	0x3feec709
 8012910:	145b01f5 	.word	0x145b01f5
 8012914:	be3e2fe0 	.word	0xbe3e2fe0
 8012918:	00000000 	.word	0x00000000
 801291c:	3ff00000 	.word	0x3ff00000
 8012920:	7ff00000 	.word	0x7ff00000
 8012924:	43400000 	.word	0x43400000
 8012928:	0003988e 	.word	0x0003988e
 801292c:	000bb679 	.word	0x000bb679
 8012930:	08028e30 	.word	0x08028e30
 8012934:	3ff00000 	.word	0x3ff00000
 8012938:	40080000 	.word	0x40080000
 801293c:	08028e50 	.word	0x08028e50
 8012940:	08028e40 	.word	0x08028e40
 8012944:	a3b5      	add	r3, pc, #724	; (adr r3, 8012c1c <__ieee754_pow+0xa54>)
 8012946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294a:	4640      	mov	r0, r8
 801294c:	4649      	mov	r1, r9
 801294e:	f7ed fccd 	bl	80002ec <__adddf3>
 8012952:	4622      	mov	r2, r4
 8012954:	ec41 0b1a 	vmov	d10, r0, r1
 8012958:	462b      	mov	r3, r5
 801295a:	4630      	mov	r0, r6
 801295c:	4639      	mov	r1, r7
 801295e:	f7ed fcc3 	bl	80002e8 <__aeabi_dsub>
 8012962:	4602      	mov	r2, r0
 8012964:	460b      	mov	r3, r1
 8012966:	ec51 0b1a 	vmov	r0, r1, d10
 801296a:	f7ee f905 	bl	8000b78 <__aeabi_dcmpgt>
 801296e:	2800      	cmp	r0, #0
 8012970:	f47f ae04 	bne.w	801257c <__ieee754_pow+0x3b4>
 8012974:	4aa4      	ldr	r2, [pc, #656]	; (8012c08 <__ieee754_pow+0xa40>)
 8012976:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801297a:	4293      	cmp	r3, r2
 801297c:	f340 8108 	ble.w	8012b90 <__ieee754_pow+0x9c8>
 8012980:	151b      	asrs	r3, r3, #20
 8012982:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012986:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801298a:	fa4a f303 	asr.w	r3, sl, r3
 801298e:	445b      	add	r3, fp
 8012990:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012994:	4e9d      	ldr	r6, [pc, #628]	; (8012c0c <__ieee754_pow+0xa44>)
 8012996:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801299a:	4116      	asrs	r6, r2
 801299c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80129a0:	2000      	movs	r0, #0
 80129a2:	ea23 0106 	bic.w	r1, r3, r6
 80129a6:	f1c2 0214 	rsb	r2, r2, #20
 80129aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80129ae:	fa4a fa02 	asr.w	sl, sl, r2
 80129b2:	f1bb 0f00 	cmp.w	fp, #0
 80129b6:	4602      	mov	r2, r0
 80129b8:	460b      	mov	r3, r1
 80129ba:	4620      	mov	r0, r4
 80129bc:	4629      	mov	r1, r5
 80129be:	bfb8      	it	lt
 80129c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80129c4:	f7ed fc90 	bl	80002e8 <__aeabi_dsub>
 80129c8:	ec41 0b19 	vmov	d9, r0, r1
 80129cc:	4642      	mov	r2, r8
 80129ce:	464b      	mov	r3, r9
 80129d0:	ec51 0b19 	vmov	r0, r1, d9
 80129d4:	f7ed fc8a 	bl	80002ec <__adddf3>
 80129d8:	a37b      	add	r3, pc, #492	; (adr r3, 8012bc8 <__ieee754_pow+0xa00>)
 80129da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129de:	2000      	movs	r0, #0
 80129e0:	4604      	mov	r4, r0
 80129e2:	460d      	mov	r5, r1
 80129e4:	f7ed fe38 	bl	8000658 <__aeabi_dmul>
 80129e8:	ec53 2b19 	vmov	r2, r3, d9
 80129ec:	4606      	mov	r6, r0
 80129ee:	460f      	mov	r7, r1
 80129f0:	4620      	mov	r0, r4
 80129f2:	4629      	mov	r1, r5
 80129f4:	f7ed fc78 	bl	80002e8 <__aeabi_dsub>
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	4640      	mov	r0, r8
 80129fe:	4649      	mov	r1, r9
 8012a00:	f7ed fc72 	bl	80002e8 <__aeabi_dsub>
 8012a04:	a372      	add	r3, pc, #456	; (adr r3, 8012bd0 <__ieee754_pow+0xa08>)
 8012a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0a:	f7ed fe25 	bl	8000658 <__aeabi_dmul>
 8012a0e:	a372      	add	r3, pc, #456	; (adr r3, 8012bd8 <__ieee754_pow+0xa10>)
 8012a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a14:	4680      	mov	r8, r0
 8012a16:	4689      	mov	r9, r1
 8012a18:	4620      	mov	r0, r4
 8012a1a:	4629      	mov	r1, r5
 8012a1c:	f7ed fe1c 	bl	8000658 <__aeabi_dmul>
 8012a20:	4602      	mov	r2, r0
 8012a22:	460b      	mov	r3, r1
 8012a24:	4640      	mov	r0, r8
 8012a26:	4649      	mov	r1, r9
 8012a28:	f7ed fc60 	bl	80002ec <__adddf3>
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	460d      	mov	r5, r1
 8012a30:	4602      	mov	r2, r0
 8012a32:	460b      	mov	r3, r1
 8012a34:	4630      	mov	r0, r6
 8012a36:	4639      	mov	r1, r7
 8012a38:	f7ed fc58 	bl	80002ec <__adddf3>
 8012a3c:	4632      	mov	r2, r6
 8012a3e:	463b      	mov	r3, r7
 8012a40:	4680      	mov	r8, r0
 8012a42:	4689      	mov	r9, r1
 8012a44:	f7ed fc50 	bl	80002e8 <__aeabi_dsub>
 8012a48:	4602      	mov	r2, r0
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	4629      	mov	r1, r5
 8012a50:	f7ed fc4a 	bl	80002e8 <__aeabi_dsub>
 8012a54:	4642      	mov	r2, r8
 8012a56:	4606      	mov	r6, r0
 8012a58:	460f      	mov	r7, r1
 8012a5a:	464b      	mov	r3, r9
 8012a5c:	4640      	mov	r0, r8
 8012a5e:	4649      	mov	r1, r9
 8012a60:	f7ed fdfa 	bl	8000658 <__aeabi_dmul>
 8012a64:	a35e      	add	r3, pc, #376	; (adr r3, 8012be0 <__ieee754_pow+0xa18>)
 8012a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	460d      	mov	r5, r1
 8012a6e:	f7ed fdf3 	bl	8000658 <__aeabi_dmul>
 8012a72:	a35d      	add	r3, pc, #372	; (adr r3, 8012be8 <__ieee754_pow+0xa20>)
 8012a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a78:	f7ed fc36 	bl	80002e8 <__aeabi_dsub>
 8012a7c:	4622      	mov	r2, r4
 8012a7e:	462b      	mov	r3, r5
 8012a80:	f7ed fdea 	bl	8000658 <__aeabi_dmul>
 8012a84:	a35a      	add	r3, pc, #360	; (adr r3, 8012bf0 <__ieee754_pow+0xa28>)
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8a:	f7ed fc2f 	bl	80002ec <__adddf3>
 8012a8e:	4622      	mov	r2, r4
 8012a90:	462b      	mov	r3, r5
 8012a92:	f7ed fde1 	bl	8000658 <__aeabi_dmul>
 8012a96:	a358      	add	r3, pc, #352	; (adr r3, 8012bf8 <__ieee754_pow+0xa30>)
 8012a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9c:	f7ed fc24 	bl	80002e8 <__aeabi_dsub>
 8012aa0:	4622      	mov	r2, r4
 8012aa2:	462b      	mov	r3, r5
 8012aa4:	f7ed fdd8 	bl	8000658 <__aeabi_dmul>
 8012aa8:	a355      	add	r3, pc, #340	; (adr r3, 8012c00 <__ieee754_pow+0xa38>)
 8012aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aae:	f7ed fc1d 	bl	80002ec <__adddf3>
 8012ab2:	4622      	mov	r2, r4
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	f7ed fdcf 	bl	8000658 <__aeabi_dmul>
 8012aba:	4602      	mov	r2, r0
 8012abc:	460b      	mov	r3, r1
 8012abe:	4640      	mov	r0, r8
 8012ac0:	4649      	mov	r1, r9
 8012ac2:	f7ed fc11 	bl	80002e8 <__aeabi_dsub>
 8012ac6:	4604      	mov	r4, r0
 8012ac8:	460d      	mov	r5, r1
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	4640      	mov	r0, r8
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	f7ed fdc1 	bl	8000658 <__aeabi_dmul>
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	ec41 0b19 	vmov	d9, r0, r1
 8012adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	f7ed fc00 	bl	80002e8 <__aeabi_dsub>
 8012ae8:	4602      	mov	r2, r0
 8012aea:	460b      	mov	r3, r1
 8012aec:	ec51 0b19 	vmov	r0, r1, d9
 8012af0:	f7ed fedc 	bl	80008ac <__aeabi_ddiv>
 8012af4:	4632      	mov	r2, r6
 8012af6:	4604      	mov	r4, r0
 8012af8:	460d      	mov	r5, r1
 8012afa:	463b      	mov	r3, r7
 8012afc:	4640      	mov	r0, r8
 8012afe:	4649      	mov	r1, r9
 8012b00:	f7ed fdaa 	bl	8000658 <__aeabi_dmul>
 8012b04:	4632      	mov	r2, r6
 8012b06:	463b      	mov	r3, r7
 8012b08:	f7ed fbf0 	bl	80002ec <__adddf3>
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	460b      	mov	r3, r1
 8012b10:	4620      	mov	r0, r4
 8012b12:	4629      	mov	r1, r5
 8012b14:	f7ed fbe8 	bl	80002e8 <__aeabi_dsub>
 8012b18:	4642      	mov	r2, r8
 8012b1a:	464b      	mov	r3, r9
 8012b1c:	f7ed fbe4 	bl	80002e8 <__aeabi_dsub>
 8012b20:	460b      	mov	r3, r1
 8012b22:	4602      	mov	r2, r0
 8012b24:	493a      	ldr	r1, [pc, #232]	; (8012c10 <__ieee754_pow+0xa48>)
 8012b26:	2000      	movs	r0, #0
 8012b28:	f7ed fbde 	bl	80002e8 <__aeabi_dsub>
 8012b2c:	ec41 0b10 	vmov	d0, r0, r1
 8012b30:	ee10 3a90 	vmov	r3, s1
 8012b34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b3c:	da2b      	bge.n	8012b96 <__ieee754_pow+0x9ce>
 8012b3e:	4650      	mov	r0, sl
 8012b40:	f000 fc5a 	bl	80133f8 <scalbn>
 8012b44:	ec51 0b10 	vmov	r0, r1, d0
 8012b48:	ec53 2b18 	vmov	r2, r3, d8
 8012b4c:	f7ff bbed 	b.w	801232a <__ieee754_pow+0x162>
 8012b50:	4b30      	ldr	r3, [pc, #192]	; (8012c14 <__ieee754_pow+0xa4c>)
 8012b52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012b56:	429e      	cmp	r6, r3
 8012b58:	f77f af0c 	ble.w	8012974 <__ieee754_pow+0x7ac>
 8012b5c:	4b2e      	ldr	r3, [pc, #184]	; (8012c18 <__ieee754_pow+0xa50>)
 8012b5e:	440b      	add	r3, r1
 8012b60:	4303      	orrs	r3, r0
 8012b62:	d009      	beq.n	8012b78 <__ieee754_pow+0x9b0>
 8012b64:	ec51 0b18 	vmov	r0, r1, d8
 8012b68:	2200      	movs	r2, #0
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	f7ed ffe6 	bl	8000b3c <__aeabi_dcmplt>
 8012b70:	3800      	subs	r0, #0
 8012b72:	bf18      	it	ne
 8012b74:	2001      	movne	r0, #1
 8012b76:	e447      	b.n	8012408 <__ieee754_pow+0x240>
 8012b78:	4622      	mov	r2, r4
 8012b7a:	462b      	mov	r3, r5
 8012b7c:	f7ed fbb4 	bl	80002e8 <__aeabi_dsub>
 8012b80:	4642      	mov	r2, r8
 8012b82:	464b      	mov	r3, r9
 8012b84:	f7ed ffee 	bl	8000b64 <__aeabi_dcmpge>
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	f43f aef3 	beq.w	8012974 <__ieee754_pow+0x7ac>
 8012b8e:	e7e9      	b.n	8012b64 <__ieee754_pow+0x99c>
 8012b90:	f04f 0a00 	mov.w	sl, #0
 8012b94:	e71a      	b.n	80129cc <__ieee754_pow+0x804>
 8012b96:	ec51 0b10 	vmov	r0, r1, d0
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	e7d4      	b.n	8012b48 <__ieee754_pow+0x980>
 8012b9e:	491c      	ldr	r1, [pc, #112]	; (8012c10 <__ieee754_pow+0xa48>)
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	f7ff bb30 	b.w	8012206 <__ieee754_pow+0x3e>
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	2100      	movs	r1, #0
 8012baa:	f7ff bb2c 	b.w	8012206 <__ieee754_pow+0x3e>
 8012bae:	4630      	mov	r0, r6
 8012bb0:	4639      	mov	r1, r7
 8012bb2:	f7ff bb28 	b.w	8012206 <__ieee754_pow+0x3e>
 8012bb6:	9204      	str	r2, [sp, #16]
 8012bb8:	f7ff bb7a 	b.w	80122b0 <__ieee754_pow+0xe8>
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	f7ff bb64 	b.w	801228a <__ieee754_pow+0xc2>
 8012bc2:	bf00      	nop
 8012bc4:	f3af 8000 	nop.w
 8012bc8:	00000000 	.word	0x00000000
 8012bcc:	3fe62e43 	.word	0x3fe62e43
 8012bd0:	fefa39ef 	.word	0xfefa39ef
 8012bd4:	3fe62e42 	.word	0x3fe62e42
 8012bd8:	0ca86c39 	.word	0x0ca86c39
 8012bdc:	be205c61 	.word	0xbe205c61
 8012be0:	72bea4d0 	.word	0x72bea4d0
 8012be4:	3e663769 	.word	0x3e663769
 8012be8:	c5d26bf1 	.word	0xc5d26bf1
 8012bec:	3ebbbd41 	.word	0x3ebbbd41
 8012bf0:	af25de2c 	.word	0xaf25de2c
 8012bf4:	3f11566a 	.word	0x3f11566a
 8012bf8:	16bebd93 	.word	0x16bebd93
 8012bfc:	3f66c16c 	.word	0x3f66c16c
 8012c00:	5555553e 	.word	0x5555553e
 8012c04:	3fc55555 	.word	0x3fc55555
 8012c08:	3fe00000 	.word	0x3fe00000
 8012c0c:	000fffff 	.word	0x000fffff
 8012c10:	3ff00000 	.word	0x3ff00000
 8012c14:	4090cbff 	.word	0x4090cbff
 8012c18:	3f6f3400 	.word	0x3f6f3400
 8012c1c:	652b82fe 	.word	0x652b82fe
 8012c20:	3c971547 	.word	0x3c971547

08012c24 <__ieee754_sqrt>:
 8012c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c28:	ec55 4b10 	vmov	r4, r5, d0
 8012c2c:	4e55      	ldr	r6, [pc, #340]	; (8012d84 <__ieee754_sqrt+0x160>)
 8012c2e:	43ae      	bics	r6, r5
 8012c30:	ee10 0a10 	vmov	r0, s0
 8012c34:	ee10 3a10 	vmov	r3, s0
 8012c38:	462a      	mov	r2, r5
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	d110      	bne.n	8012c60 <__ieee754_sqrt+0x3c>
 8012c3e:	ee10 2a10 	vmov	r2, s0
 8012c42:	462b      	mov	r3, r5
 8012c44:	f7ed fd08 	bl	8000658 <__aeabi_dmul>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	4629      	mov	r1, r5
 8012c50:	f7ed fb4c 	bl	80002ec <__adddf3>
 8012c54:	4604      	mov	r4, r0
 8012c56:	460d      	mov	r5, r1
 8012c58:	ec45 4b10 	vmov	d0, r4, r5
 8012c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c60:	2d00      	cmp	r5, #0
 8012c62:	dc10      	bgt.n	8012c86 <__ieee754_sqrt+0x62>
 8012c64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c68:	4330      	orrs	r0, r6
 8012c6a:	d0f5      	beq.n	8012c58 <__ieee754_sqrt+0x34>
 8012c6c:	b15d      	cbz	r5, 8012c86 <__ieee754_sqrt+0x62>
 8012c6e:	ee10 2a10 	vmov	r2, s0
 8012c72:	462b      	mov	r3, r5
 8012c74:	ee10 0a10 	vmov	r0, s0
 8012c78:	f7ed fb36 	bl	80002e8 <__aeabi_dsub>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	f7ed fe14 	bl	80008ac <__aeabi_ddiv>
 8012c84:	e7e6      	b.n	8012c54 <__ieee754_sqrt+0x30>
 8012c86:	1512      	asrs	r2, r2, #20
 8012c88:	d074      	beq.n	8012d74 <__ieee754_sqrt+0x150>
 8012c8a:	07d4      	lsls	r4, r2, #31
 8012c8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012c90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012c94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012c98:	bf5e      	ittt	pl
 8012c9a:	0fda      	lsrpl	r2, r3, #31
 8012c9c:	005b      	lslpl	r3, r3, #1
 8012c9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012ca2:	2400      	movs	r4, #0
 8012ca4:	0fda      	lsrs	r2, r3, #31
 8012ca6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012caa:	107f      	asrs	r7, r7, #1
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	2516      	movs	r5, #22
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012cb6:	1886      	adds	r6, r0, r2
 8012cb8:	428e      	cmp	r6, r1
 8012cba:	bfde      	ittt	le
 8012cbc:	1b89      	suble	r1, r1, r6
 8012cbe:	18b0      	addle	r0, r6, r2
 8012cc0:	18a4      	addle	r4, r4, r2
 8012cc2:	0049      	lsls	r1, r1, #1
 8012cc4:	3d01      	subs	r5, #1
 8012cc6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012cca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012cce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012cd2:	d1f0      	bne.n	8012cb6 <__ieee754_sqrt+0x92>
 8012cd4:	462a      	mov	r2, r5
 8012cd6:	f04f 0e20 	mov.w	lr, #32
 8012cda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012cde:	4281      	cmp	r1, r0
 8012ce0:	eb06 0c05 	add.w	ip, r6, r5
 8012ce4:	dc02      	bgt.n	8012cec <__ieee754_sqrt+0xc8>
 8012ce6:	d113      	bne.n	8012d10 <__ieee754_sqrt+0xec>
 8012ce8:	459c      	cmp	ip, r3
 8012cea:	d811      	bhi.n	8012d10 <__ieee754_sqrt+0xec>
 8012cec:	f1bc 0f00 	cmp.w	ip, #0
 8012cf0:	eb0c 0506 	add.w	r5, ip, r6
 8012cf4:	da43      	bge.n	8012d7e <__ieee754_sqrt+0x15a>
 8012cf6:	2d00      	cmp	r5, #0
 8012cf8:	db41      	blt.n	8012d7e <__ieee754_sqrt+0x15a>
 8012cfa:	f100 0801 	add.w	r8, r0, #1
 8012cfe:	1a09      	subs	r1, r1, r0
 8012d00:	459c      	cmp	ip, r3
 8012d02:	bf88      	it	hi
 8012d04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012d08:	eba3 030c 	sub.w	r3, r3, ip
 8012d0c:	4432      	add	r2, r6
 8012d0e:	4640      	mov	r0, r8
 8012d10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012d14:	f1be 0e01 	subs.w	lr, lr, #1
 8012d18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012d24:	d1db      	bne.n	8012cde <__ieee754_sqrt+0xba>
 8012d26:	430b      	orrs	r3, r1
 8012d28:	d006      	beq.n	8012d38 <__ieee754_sqrt+0x114>
 8012d2a:	1c50      	adds	r0, r2, #1
 8012d2c:	bf13      	iteet	ne
 8012d2e:	3201      	addne	r2, #1
 8012d30:	3401      	addeq	r4, #1
 8012d32:	4672      	moveq	r2, lr
 8012d34:	f022 0201 	bicne.w	r2, r2, #1
 8012d38:	1063      	asrs	r3, r4, #1
 8012d3a:	0852      	lsrs	r2, r2, #1
 8012d3c:	07e1      	lsls	r1, r4, #31
 8012d3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012d42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012d46:	bf48      	it	mi
 8012d48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012d4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012d50:	4614      	mov	r4, r2
 8012d52:	e781      	b.n	8012c58 <__ieee754_sqrt+0x34>
 8012d54:	0ad9      	lsrs	r1, r3, #11
 8012d56:	3815      	subs	r0, #21
 8012d58:	055b      	lsls	r3, r3, #21
 8012d5a:	2900      	cmp	r1, #0
 8012d5c:	d0fa      	beq.n	8012d54 <__ieee754_sqrt+0x130>
 8012d5e:	02cd      	lsls	r5, r1, #11
 8012d60:	d50a      	bpl.n	8012d78 <__ieee754_sqrt+0x154>
 8012d62:	f1c2 0420 	rsb	r4, r2, #32
 8012d66:	fa23 f404 	lsr.w	r4, r3, r4
 8012d6a:	1e55      	subs	r5, r2, #1
 8012d6c:	4093      	lsls	r3, r2
 8012d6e:	4321      	orrs	r1, r4
 8012d70:	1b42      	subs	r2, r0, r5
 8012d72:	e78a      	b.n	8012c8a <__ieee754_sqrt+0x66>
 8012d74:	4610      	mov	r0, r2
 8012d76:	e7f0      	b.n	8012d5a <__ieee754_sqrt+0x136>
 8012d78:	0049      	lsls	r1, r1, #1
 8012d7a:	3201      	adds	r2, #1
 8012d7c:	e7ef      	b.n	8012d5e <__ieee754_sqrt+0x13a>
 8012d7e:	4680      	mov	r8, r0
 8012d80:	e7bd      	b.n	8012cfe <__ieee754_sqrt+0xda>
 8012d82:	bf00      	nop
 8012d84:	7ff00000 	.word	0x7ff00000

08012d88 <__ieee754_powf>:
 8012d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8c:	ee10 4a90 	vmov	r4, s1
 8012d90:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012d94:	ed2d 8b02 	vpush	{d8}
 8012d98:	ee10 6a10 	vmov	r6, s0
 8012d9c:	eeb0 8a40 	vmov.f32	s16, s0
 8012da0:	eef0 8a60 	vmov.f32	s17, s1
 8012da4:	d10c      	bne.n	8012dc0 <__ieee754_powf+0x38>
 8012da6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012daa:	0076      	lsls	r6, r6, #1
 8012dac:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012db0:	f240 8296 	bls.w	80132e0 <__ieee754_powf+0x558>
 8012db4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012db8:	ecbd 8b02 	vpop	{d8}
 8012dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012dc4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012dc8:	dcf4      	bgt.n	8012db4 <__ieee754_powf+0x2c>
 8012dca:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012dce:	dd08      	ble.n	8012de2 <__ieee754_powf+0x5a>
 8012dd0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012dd4:	d1ee      	bne.n	8012db4 <__ieee754_powf+0x2c>
 8012dd6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012dda:	0064      	lsls	r4, r4, #1
 8012ddc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012de0:	e7e6      	b.n	8012db0 <__ieee754_powf+0x28>
 8012de2:	2e00      	cmp	r6, #0
 8012de4:	da20      	bge.n	8012e28 <__ieee754_powf+0xa0>
 8012de6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012dea:	da2d      	bge.n	8012e48 <__ieee754_powf+0xc0>
 8012dec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012df0:	f2c0 827f 	blt.w	80132f2 <__ieee754_powf+0x56a>
 8012df4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012df8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012dfc:	fa48 f703 	asr.w	r7, r8, r3
 8012e00:	fa07 f303 	lsl.w	r3, r7, r3
 8012e04:	4543      	cmp	r3, r8
 8012e06:	f040 8274 	bne.w	80132f2 <__ieee754_powf+0x56a>
 8012e0a:	f007 0701 	and.w	r7, r7, #1
 8012e0e:	f1c7 0702 	rsb	r7, r7, #2
 8012e12:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012e16:	d11f      	bne.n	8012e58 <__ieee754_powf+0xd0>
 8012e18:	2c00      	cmp	r4, #0
 8012e1a:	f280 8267 	bge.w	80132ec <__ieee754_powf+0x564>
 8012e1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e22:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012e26:	e7c7      	b.n	8012db8 <__ieee754_powf+0x30>
 8012e28:	2700      	movs	r7, #0
 8012e2a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012e2e:	d1f0      	bne.n	8012e12 <__ieee754_powf+0x8a>
 8012e30:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012e34:	f000 8254 	beq.w	80132e0 <__ieee754_powf+0x558>
 8012e38:	dd08      	ble.n	8012e4c <__ieee754_powf+0xc4>
 8012e3a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8013144 <__ieee754_powf+0x3bc>
 8012e3e:	2c00      	cmp	r4, #0
 8012e40:	bfa8      	it	ge
 8012e42:	eeb0 0a68 	vmovge.f32	s0, s17
 8012e46:	e7b7      	b.n	8012db8 <__ieee754_powf+0x30>
 8012e48:	2702      	movs	r7, #2
 8012e4a:	e7ee      	b.n	8012e2a <__ieee754_powf+0xa2>
 8012e4c:	2c00      	cmp	r4, #0
 8012e4e:	f280 824a 	bge.w	80132e6 <__ieee754_powf+0x55e>
 8012e52:	eeb1 0a68 	vneg.f32	s0, s17
 8012e56:	e7af      	b.n	8012db8 <__ieee754_powf+0x30>
 8012e58:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012e5c:	d102      	bne.n	8012e64 <__ieee754_powf+0xdc>
 8012e5e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012e62:	e7a9      	b.n	8012db8 <__ieee754_powf+0x30>
 8012e64:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012e68:	eeb0 0a48 	vmov.f32	s0, s16
 8012e6c:	d107      	bne.n	8012e7e <__ieee754_powf+0xf6>
 8012e6e:	2e00      	cmp	r6, #0
 8012e70:	db05      	blt.n	8012e7e <__ieee754_powf+0xf6>
 8012e72:	ecbd 8b02 	vpop	{d8}
 8012e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7a:	f000 ba53 	b.w	8013324 <__ieee754_sqrtf>
 8012e7e:	f000 fb41 	bl	8013504 <fabsf>
 8012e82:	b125      	cbz	r5, 8012e8e <__ieee754_powf+0x106>
 8012e84:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012e88:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012e8c:	d116      	bne.n	8012ebc <__ieee754_powf+0x134>
 8012e8e:	2c00      	cmp	r4, #0
 8012e90:	bfbc      	itt	lt
 8012e92:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012e96:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012e9a:	2e00      	cmp	r6, #0
 8012e9c:	da8c      	bge.n	8012db8 <__ieee754_powf+0x30>
 8012e9e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012ea2:	ea55 0307 	orrs.w	r3, r5, r7
 8012ea6:	d104      	bne.n	8012eb2 <__ieee754_powf+0x12a>
 8012ea8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012eac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012eb0:	e782      	b.n	8012db8 <__ieee754_powf+0x30>
 8012eb2:	2f01      	cmp	r7, #1
 8012eb4:	d180      	bne.n	8012db8 <__ieee754_powf+0x30>
 8012eb6:	eeb1 0a40 	vneg.f32	s0, s0
 8012eba:	e77d      	b.n	8012db8 <__ieee754_powf+0x30>
 8012ebc:	0ff0      	lsrs	r0, r6, #31
 8012ebe:	3801      	subs	r0, #1
 8012ec0:	ea57 0300 	orrs.w	r3, r7, r0
 8012ec4:	d104      	bne.n	8012ed0 <__ieee754_powf+0x148>
 8012ec6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012eca:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012ece:	e773      	b.n	8012db8 <__ieee754_powf+0x30>
 8012ed0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012ed4:	dd74      	ble.n	8012fc0 <__ieee754_powf+0x238>
 8012ed6:	4b9c      	ldr	r3, [pc, #624]	; (8013148 <__ieee754_powf+0x3c0>)
 8012ed8:	429d      	cmp	r5, r3
 8012eda:	dc08      	bgt.n	8012eee <__ieee754_powf+0x166>
 8012edc:	2c00      	cmp	r4, #0
 8012ede:	da0b      	bge.n	8012ef8 <__ieee754_powf+0x170>
 8012ee0:	2000      	movs	r0, #0
 8012ee2:	ecbd 8b02 	vpop	{d8}
 8012ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eea:	f000 ba6b 	b.w	80133c4 <__math_oflowf>
 8012eee:	4b97      	ldr	r3, [pc, #604]	; (801314c <__ieee754_powf+0x3c4>)
 8012ef0:	429d      	cmp	r5, r3
 8012ef2:	dd08      	ble.n	8012f06 <__ieee754_powf+0x17e>
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	dcf3      	bgt.n	8012ee0 <__ieee754_powf+0x158>
 8012ef8:	2000      	movs	r0, #0
 8012efa:	ecbd 8b02 	vpop	{d8}
 8012efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f02:	f000 ba59 	b.w	80133b8 <__math_uflowf>
 8012f06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012f0e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013150 <__ieee754_powf+0x3c8>
 8012f12:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012f16:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012f1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f1e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012f22:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f2a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013154 <__ieee754_powf+0x3cc>
 8012f2e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012f32:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013158 <__ieee754_powf+0x3d0>
 8012f36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012f3a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801315c <__ieee754_powf+0x3d4>
 8012f3e:	eef0 6a67 	vmov.f32	s13, s15
 8012f42:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012f46:	ee16 3a90 	vmov	r3, s13
 8012f4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012f4e:	f023 030f 	bic.w	r3, r3, #15
 8012f52:	ee00 3a90 	vmov	s1, r3
 8012f56:	eee0 0a47 	vfms.f32	s1, s0, s14
 8012f5a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012f5e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012f62:	f024 040f 	bic.w	r4, r4, #15
 8012f66:	ee07 4a10 	vmov	s14, r4
 8012f6a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012f6e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012f72:	ee07 3a90 	vmov	s15, r3
 8012f76:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012f7a:	3f01      	subs	r7, #1
 8012f7c:	ea57 0200 	orrs.w	r2, r7, r0
 8012f80:	ee07 4a10 	vmov	s14, r4
 8012f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012f8c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012f90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012f94:	ee17 4a10 	vmov	r4, s14
 8012f98:	bf08      	it	eq
 8012f9a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8012f9e:	2c00      	cmp	r4, #0
 8012fa0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012fa4:	f340 817e 	ble.w	80132a4 <__ieee754_powf+0x51c>
 8012fa8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012fac:	f340 80f8 	ble.w	80131a0 <__ieee754_powf+0x418>
 8012fb0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb8:	bf4c      	ite	mi
 8012fba:	2001      	movmi	r0, #1
 8012fbc:	2000      	movpl	r0, #0
 8012fbe:	e790      	b.n	8012ee2 <__ieee754_powf+0x15a>
 8012fc0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8012fc4:	bf01      	itttt	eq
 8012fc6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013160 <__ieee754_powf+0x3d8>
 8012fca:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012fce:	f06f 0217 	mvneq.w	r2, #23
 8012fd2:	ee17 5a90 	vmoveq	r5, s15
 8012fd6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012fda:	bf18      	it	ne
 8012fdc:	2200      	movne	r2, #0
 8012fde:	3b7f      	subs	r3, #127	; 0x7f
 8012fe0:	4413      	add	r3, r2
 8012fe2:	4a60      	ldr	r2, [pc, #384]	; (8013164 <__ieee754_powf+0x3dc>)
 8012fe4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012fe8:	4295      	cmp	r5, r2
 8012fea:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8012fee:	dd06      	ble.n	8012ffe <__ieee754_powf+0x276>
 8012ff0:	4a5d      	ldr	r2, [pc, #372]	; (8013168 <__ieee754_powf+0x3e0>)
 8012ff2:	4295      	cmp	r5, r2
 8012ff4:	f340 80a4 	ble.w	8013140 <__ieee754_powf+0x3b8>
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012ffe:	2500      	movs	r5, #0
 8013000:	4a5a      	ldr	r2, [pc, #360]	; (801316c <__ieee754_powf+0x3e4>)
 8013002:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013006:	ee07 1a90 	vmov	s15, r1
 801300a:	ed92 7a00 	vldr	s14, [r2]
 801300e:	4a58      	ldr	r2, [pc, #352]	; (8013170 <__ieee754_powf+0x3e8>)
 8013010:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013014:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013018:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801301c:	1049      	asrs	r1, r1, #1
 801301e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013022:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013026:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801302a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801302e:	ee06 1a10 	vmov	s12, r1
 8013032:	ee65 4a26 	vmul.f32	s9, s10, s13
 8013036:	ee36 7a47 	vsub.f32	s14, s12, s14
 801303a:	ee14 6a90 	vmov	r6, s9
 801303e:	4016      	ands	r6, r2
 8013040:	ee05 6a90 	vmov	s11, r6
 8013044:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801304c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013174 <__ieee754_powf+0x3ec>
 8013050:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013054:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013058:	ee25 6a26 	vmul.f32	s12, s10, s13
 801305c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013178 <__ieee754_powf+0x3f0>
 8013060:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013064:	eddf 6a45 	vldr	s13, [pc, #276]	; 801317c <__ieee754_powf+0x3f4>
 8013068:	eee7 6a27 	vfma.f32	s13, s14, s15
 801306c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013150 <__ieee754_powf+0x3c8>
 8013070:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013074:	eddf 6a42 	vldr	s13, [pc, #264]	; 8013180 <__ieee754_powf+0x3f8>
 8013078:	eee7 6a27 	vfma.f32	s13, s14, s15
 801307c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013184 <__ieee754_powf+0x3fc>
 8013080:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013084:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013088:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801308c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013090:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013094:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013098:	eef0 7a45 	vmov.f32	s15, s10
 801309c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80130a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130a4:	ee17 1a90 	vmov	r1, s15
 80130a8:	4011      	ands	r1, r2
 80130aa:	ee07 1a90 	vmov	s15, r1
 80130ae:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80130b2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80130b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80130ba:	ee27 7a24 	vmul.f32	s14, s14, s9
 80130be:	eea6 7a27 	vfma.f32	s14, s12, s15
 80130c2:	eeb0 6a47 	vmov.f32	s12, s14
 80130c6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80130ca:	ee16 1a10 	vmov	r1, s12
 80130ce:	4011      	ands	r1, r2
 80130d0:	ee06 1a90 	vmov	s13, r1
 80130d4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80130d8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013188 <__ieee754_powf+0x400>
 80130dc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801318c <__ieee754_powf+0x404>
 80130e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80130e4:	ee06 1a10 	vmov	s12, r1
 80130e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80130ec:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013190 <__ieee754_powf+0x408>
 80130f0:	4928      	ldr	r1, [pc, #160]	; (8013194 <__ieee754_powf+0x40c>)
 80130f2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80130f6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80130fa:	edd1 7a00 	vldr	s15, [r1]
 80130fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013102:	ee07 3a90 	vmov	s15, r3
 8013106:	4b24      	ldr	r3, [pc, #144]	; (8013198 <__ieee754_powf+0x410>)
 8013108:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801310c:	eef0 7a47 	vmov.f32	s15, s14
 8013110:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013114:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013118:	edd5 0a00 	vldr	s1, [r5]
 801311c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013124:	ee17 3a90 	vmov	r3, s15
 8013128:	4013      	ands	r3, r2
 801312a:	ee07 3a90 	vmov	s15, r3
 801312e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013132:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8013136:	eee6 6a65 	vfms.f32	s13, s12, s11
 801313a:	ee77 7a66 	vsub.f32	s15, s14, s13
 801313e:	e70e      	b.n	8012f5e <__ieee754_powf+0x1d6>
 8013140:	2501      	movs	r5, #1
 8013142:	e75d      	b.n	8013000 <__ieee754_powf+0x278>
 8013144:	00000000 	.word	0x00000000
 8013148:	3f7ffff3 	.word	0x3f7ffff3
 801314c:	3f800007 	.word	0x3f800007
 8013150:	3eaaaaab 	.word	0x3eaaaaab
 8013154:	3fb8aa3b 	.word	0x3fb8aa3b
 8013158:	36eca570 	.word	0x36eca570
 801315c:	3fb8aa00 	.word	0x3fb8aa00
 8013160:	4b800000 	.word	0x4b800000
 8013164:	001cc471 	.word	0x001cc471
 8013168:	005db3d6 	.word	0x005db3d6
 801316c:	08028e60 	.word	0x08028e60
 8013170:	fffff000 	.word	0xfffff000
 8013174:	3e6c3255 	.word	0x3e6c3255
 8013178:	3e53f142 	.word	0x3e53f142
 801317c:	3e8ba305 	.word	0x3e8ba305
 8013180:	3edb6db7 	.word	0x3edb6db7
 8013184:	3f19999a 	.word	0x3f19999a
 8013188:	3f76384f 	.word	0x3f76384f
 801318c:	3f763800 	.word	0x3f763800
 8013190:	369dc3a0 	.word	0x369dc3a0
 8013194:	08028e70 	.word	0x08028e70
 8013198:	08028e68 	.word	0x08028e68
 801319c:	3338aa3c 	.word	0x3338aa3c
 80131a0:	f040 8095 	bne.w	80132ce <__ieee754_powf+0x546>
 80131a4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801319c <__ieee754_powf+0x414>
 80131a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131ac:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80131b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80131b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b8:	f73f aefa 	bgt.w	8012fb0 <__ieee754_powf+0x228>
 80131bc:	15db      	asrs	r3, r3, #23
 80131be:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80131c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80131c6:	4103      	asrs	r3, r0
 80131c8:	4423      	add	r3, r4
 80131ca:	494b      	ldr	r1, [pc, #300]	; (80132f8 <__ieee754_powf+0x570>)
 80131cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80131d0:	3a7f      	subs	r2, #127	; 0x7f
 80131d2:	4111      	asrs	r1, r2
 80131d4:	ea23 0101 	bic.w	r1, r3, r1
 80131d8:	ee07 1a10 	vmov	s14, r1
 80131dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80131e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80131e4:	f1c2 0217 	rsb	r2, r2, #23
 80131e8:	4110      	asrs	r0, r2
 80131ea:	2c00      	cmp	r4, #0
 80131ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131f0:	bfb8      	it	lt
 80131f2:	4240      	neglt	r0, r0
 80131f4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80131f8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80132fc <__ieee754_powf+0x574>
 80131fc:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013300 <__ieee754_powf+0x578>
 8013200:	ee17 3a10 	vmov	r3, s14
 8013204:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013208:	f023 030f 	bic.w	r3, r3, #15
 801320c:	ee07 3a10 	vmov	s14, r3
 8013210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013214:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013218:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801321c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013304 <__ieee754_powf+0x57c>
 8013220:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8013224:	eef0 7a40 	vmov.f32	s15, s0
 8013228:	eee7 7a26 	vfma.f32	s15, s14, s13
 801322c:	eeb0 6a67 	vmov.f32	s12, s15
 8013230:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013234:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013238:	ee30 0a46 	vsub.f32	s0, s0, s12
 801323c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013308 <__ieee754_powf+0x580>
 8013240:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801330c <__ieee754_powf+0x584>
 8013244:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013248:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013310 <__ieee754_powf+0x588>
 801324c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013250:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013314 <__ieee754_powf+0x58c>
 8013254:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013258:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013318 <__ieee754_powf+0x590>
 801325c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013260:	eef0 6a67 	vmov.f32	s13, s15
 8013264:	eee6 6a47 	vfms.f32	s13, s12, s14
 8013268:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801326c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8013270:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013274:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013278:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801327c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013280:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013284:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013288:	ee30 0a67 	vsub.f32	s0, s0, s15
 801328c:	ee10 3a10 	vmov	r3, s0
 8013290:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013298:	da1f      	bge.n	80132da <__ieee754_powf+0x552>
 801329a:	f000 f947 	bl	801352c <scalbnf>
 801329e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80132a2:	e589      	b.n	8012db8 <__ieee754_powf+0x30>
 80132a4:	4a1d      	ldr	r2, [pc, #116]	; (801331c <__ieee754_powf+0x594>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	dd07      	ble.n	80132ba <__ieee754_powf+0x532>
 80132aa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80132ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b2:	bf4c      	ite	mi
 80132b4:	2001      	movmi	r0, #1
 80132b6:	2000      	movpl	r0, #0
 80132b8:	e61f      	b.n	8012efa <__ieee754_powf+0x172>
 80132ba:	d108      	bne.n	80132ce <__ieee754_powf+0x546>
 80132bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80132c0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80132c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c8:	f6ff af78 	blt.w	80131bc <__ieee754_powf+0x434>
 80132cc:	e7ed      	b.n	80132aa <__ieee754_powf+0x522>
 80132ce:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80132d2:	f73f af73 	bgt.w	80131bc <__ieee754_powf+0x434>
 80132d6:	2000      	movs	r0, #0
 80132d8:	e78c      	b.n	80131f4 <__ieee754_powf+0x46c>
 80132da:	ee00 3a10 	vmov	s0, r3
 80132de:	e7de      	b.n	801329e <__ieee754_powf+0x516>
 80132e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80132e4:	e568      	b.n	8012db8 <__ieee754_powf+0x30>
 80132e6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013320 <__ieee754_powf+0x598>
 80132ea:	e565      	b.n	8012db8 <__ieee754_powf+0x30>
 80132ec:	eeb0 0a48 	vmov.f32	s0, s16
 80132f0:	e562      	b.n	8012db8 <__ieee754_powf+0x30>
 80132f2:	2700      	movs	r7, #0
 80132f4:	e58d      	b.n	8012e12 <__ieee754_powf+0x8a>
 80132f6:	bf00      	nop
 80132f8:	007fffff 	.word	0x007fffff
 80132fc:	35bfbe8c 	.word	0x35bfbe8c
 8013300:	3f317200 	.word	0x3f317200
 8013304:	3f317218 	.word	0x3f317218
 8013308:	b5ddea0e 	.word	0xb5ddea0e
 801330c:	3331bb4c 	.word	0x3331bb4c
 8013310:	388ab355 	.word	0x388ab355
 8013314:	bb360b61 	.word	0xbb360b61
 8013318:	3e2aaaab 	.word	0x3e2aaaab
 801331c:	43160000 	.word	0x43160000
 8013320:	00000000 	.word	0x00000000

08013324 <__ieee754_sqrtf>:
 8013324:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013328:	4770      	bx	lr

0801332a <with_errno>:
 801332a:	b570      	push	{r4, r5, r6, lr}
 801332c:	4604      	mov	r4, r0
 801332e:	460d      	mov	r5, r1
 8013330:	4616      	mov	r6, r2
 8013332:	f7fb ff3b 	bl	800f1ac <__errno>
 8013336:	4629      	mov	r1, r5
 8013338:	6006      	str	r6, [r0, #0]
 801333a:	4620      	mov	r0, r4
 801333c:	bd70      	pop	{r4, r5, r6, pc}

0801333e <xflow>:
 801333e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013340:	4614      	mov	r4, r2
 8013342:	461d      	mov	r5, r3
 8013344:	b108      	cbz	r0, 801334a <xflow+0xc>
 8013346:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801334a:	e9cd 2300 	strd	r2, r3, [sp]
 801334e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013352:	4620      	mov	r0, r4
 8013354:	4629      	mov	r1, r5
 8013356:	f7ed f97f 	bl	8000658 <__aeabi_dmul>
 801335a:	2222      	movs	r2, #34	; 0x22
 801335c:	b003      	add	sp, #12
 801335e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013362:	f7ff bfe2 	b.w	801332a <with_errno>

08013366 <__math_uflow>:
 8013366:	b508      	push	{r3, lr}
 8013368:	2200      	movs	r2, #0
 801336a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801336e:	f7ff ffe6 	bl	801333e <xflow>
 8013372:	ec41 0b10 	vmov	d0, r0, r1
 8013376:	bd08      	pop	{r3, pc}

08013378 <__math_oflow>:
 8013378:	b508      	push	{r3, lr}
 801337a:	2200      	movs	r2, #0
 801337c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013380:	f7ff ffdd 	bl	801333e <xflow>
 8013384:	ec41 0b10 	vmov	d0, r0, r1
 8013388:	bd08      	pop	{r3, pc}

0801338a <with_errnof>:
 801338a:	b513      	push	{r0, r1, r4, lr}
 801338c:	4604      	mov	r4, r0
 801338e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013392:	f7fb ff0b 	bl	800f1ac <__errno>
 8013396:	ed9d 0a01 	vldr	s0, [sp, #4]
 801339a:	6004      	str	r4, [r0, #0]
 801339c:	b002      	add	sp, #8
 801339e:	bd10      	pop	{r4, pc}

080133a0 <xflowf>:
 80133a0:	b130      	cbz	r0, 80133b0 <xflowf+0x10>
 80133a2:	eef1 7a40 	vneg.f32	s15, s0
 80133a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80133aa:	2022      	movs	r0, #34	; 0x22
 80133ac:	f7ff bfed 	b.w	801338a <with_errnof>
 80133b0:	eef0 7a40 	vmov.f32	s15, s0
 80133b4:	e7f7      	b.n	80133a6 <xflowf+0x6>
	...

080133b8 <__math_uflowf>:
 80133b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80133c0 <__math_uflowf+0x8>
 80133bc:	f7ff bff0 	b.w	80133a0 <xflowf>
 80133c0:	10000000 	.word	0x10000000

080133c4 <__math_oflowf>:
 80133c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80133cc <__math_oflowf+0x8>
 80133c8:	f7ff bfea 	b.w	80133a0 <xflowf>
 80133cc:	70000000 	.word	0x70000000

080133d0 <fabs>:
 80133d0:	ec51 0b10 	vmov	r0, r1, d0
 80133d4:	ee10 2a10 	vmov	r2, s0
 80133d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80133dc:	ec43 2b10 	vmov	d0, r2, r3
 80133e0:	4770      	bx	lr

080133e2 <finite>:
 80133e2:	b082      	sub	sp, #8
 80133e4:	ed8d 0b00 	vstr	d0, [sp]
 80133e8:	9801      	ldr	r0, [sp, #4]
 80133ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80133ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80133f2:	0fc0      	lsrs	r0, r0, #31
 80133f4:	b002      	add	sp, #8
 80133f6:	4770      	bx	lr

080133f8 <scalbn>:
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	ec55 4b10 	vmov	r4, r5, d0
 80133fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013402:	4606      	mov	r6, r0
 8013404:	462b      	mov	r3, r5
 8013406:	b99a      	cbnz	r2, 8013430 <scalbn+0x38>
 8013408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801340c:	4323      	orrs	r3, r4
 801340e:	d036      	beq.n	801347e <scalbn+0x86>
 8013410:	4b39      	ldr	r3, [pc, #228]	; (80134f8 <scalbn+0x100>)
 8013412:	4629      	mov	r1, r5
 8013414:	ee10 0a10 	vmov	r0, s0
 8013418:	2200      	movs	r2, #0
 801341a:	f7ed f91d 	bl	8000658 <__aeabi_dmul>
 801341e:	4b37      	ldr	r3, [pc, #220]	; (80134fc <scalbn+0x104>)
 8013420:	429e      	cmp	r6, r3
 8013422:	4604      	mov	r4, r0
 8013424:	460d      	mov	r5, r1
 8013426:	da10      	bge.n	801344a <scalbn+0x52>
 8013428:	a32b      	add	r3, pc, #172	; (adr r3, 80134d8 <scalbn+0xe0>)
 801342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342e:	e03a      	b.n	80134a6 <scalbn+0xae>
 8013430:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013434:	428a      	cmp	r2, r1
 8013436:	d10c      	bne.n	8013452 <scalbn+0x5a>
 8013438:	ee10 2a10 	vmov	r2, s0
 801343c:	4620      	mov	r0, r4
 801343e:	4629      	mov	r1, r5
 8013440:	f7ec ff54 	bl	80002ec <__adddf3>
 8013444:	4604      	mov	r4, r0
 8013446:	460d      	mov	r5, r1
 8013448:	e019      	b.n	801347e <scalbn+0x86>
 801344a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801344e:	460b      	mov	r3, r1
 8013450:	3a36      	subs	r2, #54	; 0x36
 8013452:	4432      	add	r2, r6
 8013454:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013458:	428a      	cmp	r2, r1
 801345a:	dd08      	ble.n	801346e <scalbn+0x76>
 801345c:	2d00      	cmp	r5, #0
 801345e:	a120      	add	r1, pc, #128	; (adr r1, 80134e0 <scalbn+0xe8>)
 8013460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013464:	da1c      	bge.n	80134a0 <scalbn+0xa8>
 8013466:	a120      	add	r1, pc, #128	; (adr r1, 80134e8 <scalbn+0xf0>)
 8013468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801346c:	e018      	b.n	80134a0 <scalbn+0xa8>
 801346e:	2a00      	cmp	r2, #0
 8013470:	dd08      	ble.n	8013484 <scalbn+0x8c>
 8013472:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801347a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801347e:	ec45 4b10 	vmov	d0, r4, r5
 8013482:	bd70      	pop	{r4, r5, r6, pc}
 8013484:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013488:	da19      	bge.n	80134be <scalbn+0xc6>
 801348a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801348e:	429e      	cmp	r6, r3
 8013490:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013494:	dd0a      	ble.n	80134ac <scalbn+0xb4>
 8013496:	a112      	add	r1, pc, #72	; (adr r1, 80134e0 <scalbn+0xe8>)
 8013498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d1e2      	bne.n	8013466 <scalbn+0x6e>
 80134a0:	a30f      	add	r3, pc, #60	; (adr r3, 80134e0 <scalbn+0xe8>)
 80134a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a6:	f7ed f8d7 	bl	8000658 <__aeabi_dmul>
 80134aa:	e7cb      	b.n	8013444 <scalbn+0x4c>
 80134ac:	a10a      	add	r1, pc, #40	; (adr r1, 80134d8 <scalbn+0xe0>)
 80134ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0b8      	beq.n	8013428 <scalbn+0x30>
 80134b6:	a10e      	add	r1, pc, #56	; (adr r1, 80134f0 <scalbn+0xf8>)
 80134b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134bc:	e7b4      	b.n	8013428 <scalbn+0x30>
 80134be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80134c2:	3236      	adds	r2, #54	; 0x36
 80134c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80134c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80134cc:	4620      	mov	r0, r4
 80134ce:	4b0c      	ldr	r3, [pc, #48]	; (8013500 <scalbn+0x108>)
 80134d0:	2200      	movs	r2, #0
 80134d2:	e7e8      	b.n	80134a6 <scalbn+0xae>
 80134d4:	f3af 8000 	nop.w
 80134d8:	c2f8f359 	.word	0xc2f8f359
 80134dc:	01a56e1f 	.word	0x01a56e1f
 80134e0:	8800759c 	.word	0x8800759c
 80134e4:	7e37e43c 	.word	0x7e37e43c
 80134e8:	8800759c 	.word	0x8800759c
 80134ec:	fe37e43c 	.word	0xfe37e43c
 80134f0:	c2f8f359 	.word	0xc2f8f359
 80134f4:	81a56e1f 	.word	0x81a56e1f
 80134f8:	43500000 	.word	0x43500000
 80134fc:	ffff3cb0 	.word	0xffff3cb0
 8013500:	3c900000 	.word	0x3c900000

08013504 <fabsf>:
 8013504:	ee10 3a10 	vmov	r3, s0
 8013508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801350c:	ee00 3a10 	vmov	s0, r3
 8013510:	4770      	bx	lr

08013512 <finitef>:
 8013512:	b082      	sub	sp, #8
 8013514:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013518:	9801      	ldr	r0, [sp, #4]
 801351a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801351e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013522:	bfac      	ite	ge
 8013524:	2000      	movge	r0, #0
 8013526:	2001      	movlt	r0, #1
 8013528:	b002      	add	sp, #8
 801352a:	4770      	bx	lr

0801352c <scalbnf>:
 801352c:	ee10 3a10 	vmov	r3, s0
 8013530:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013534:	d025      	beq.n	8013582 <scalbnf+0x56>
 8013536:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801353a:	d302      	bcc.n	8013542 <scalbnf+0x16>
 801353c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013540:	4770      	bx	lr
 8013542:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013546:	d122      	bne.n	801358e <scalbnf+0x62>
 8013548:	4b2a      	ldr	r3, [pc, #168]	; (80135f4 <scalbnf+0xc8>)
 801354a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80135f8 <scalbnf+0xcc>
 801354e:	4298      	cmp	r0, r3
 8013550:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013554:	db16      	blt.n	8013584 <scalbnf+0x58>
 8013556:	ee10 3a10 	vmov	r3, s0
 801355a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801355e:	3a19      	subs	r2, #25
 8013560:	4402      	add	r2, r0
 8013562:	2afe      	cmp	r2, #254	; 0xfe
 8013564:	dd15      	ble.n	8013592 <scalbnf+0x66>
 8013566:	ee10 3a10 	vmov	r3, s0
 801356a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80135fc <scalbnf+0xd0>
 801356e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013600 <scalbnf+0xd4>
 8013572:	2b00      	cmp	r3, #0
 8013574:	eeb0 7a67 	vmov.f32	s14, s15
 8013578:	bfb8      	it	lt
 801357a:	eef0 7a66 	vmovlt.f32	s15, s13
 801357e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013582:	4770      	bx	lr
 8013584:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013604 <scalbnf+0xd8>
 8013588:	ee20 0a27 	vmul.f32	s0, s0, s15
 801358c:	4770      	bx	lr
 801358e:	0dd2      	lsrs	r2, r2, #23
 8013590:	e7e6      	b.n	8013560 <scalbnf+0x34>
 8013592:	2a00      	cmp	r2, #0
 8013594:	dd06      	ble.n	80135a4 <scalbnf+0x78>
 8013596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801359a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801359e:	ee00 3a10 	vmov	s0, r3
 80135a2:	4770      	bx	lr
 80135a4:	f112 0f16 	cmn.w	r2, #22
 80135a8:	da1a      	bge.n	80135e0 <scalbnf+0xb4>
 80135aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80135ae:	4298      	cmp	r0, r3
 80135b0:	ee10 3a10 	vmov	r3, s0
 80135b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80135b8:	dd0a      	ble.n	80135d0 <scalbnf+0xa4>
 80135ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80135fc <scalbnf+0xd0>
 80135be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013600 <scalbnf+0xd4>
 80135c2:	eef0 7a40 	vmov.f32	s15, s0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	bf18      	it	ne
 80135ca:	eeb0 0a47 	vmovne.f32	s0, s14
 80135ce:	e7db      	b.n	8013588 <scalbnf+0x5c>
 80135d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013604 <scalbnf+0xd8>
 80135d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013608 <scalbnf+0xdc>
 80135d8:	eef0 7a40 	vmov.f32	s15, s0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	e7f3      	b.n	80135c8 <scalbnf+0x9c>
 80135e0:	3219      	adds	r2, #25
 80135e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80135e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80135ea:	eddf 7a08 	vldr	s15, [pc, #32]	; 801360c <scalbnf+0xe0>
 80135ee:	ee07 3a10 	vmov	s14, r3
 80135f2:	e7c4      	b.n	801357e <scalbnf+0x52>
 80135f4:	ffff3cb0 	.word	0xffff3cb0
 80135f8:	4c000000 	.word	0x4c000000
 80135fc:	7149f2ca 	.word	0x7149f2ca
 8013600:	f149f2ca 	.word	0xf149f2ca
 8013604:	0da24260 	.word	0x0da24260
 8013608:	8da24260 	.word	0x8da24260
 801360c:	33000000 	.word	0x33000000

08013610 <_close>:
 8013610:	4b02      	ldr	r3, [pc, #8]	; (801361c <_close+0xc>)
 8013612:	2258      	movs	r2, #88	; 0x58
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	f04f 30ff 	mov.w	r0, #4294967295
 801361a:	4770      	bx	lr
 801361c:	2000b370 	.word	0x2000b370

08013620 <_fstat>:
 8013620:	4b02      	ldr	r3, [pc, #8]	; (801362c <_fstat+0xc>)
 8013622:	2258      	movs	r2, #88	; 0x58
 8013624:	601a      	str	r2, [r3, #0]
 8013626:	f04f 30ff 	mov.w	r0, #4294967295
 801362a:	4770      	bx	lr
 801362c:	2000b370 	.word	0x2000b370

08013630 <_getpid>:
 8013630:	4b02      	ldr	r3, [pc, #8]	; (801363c <_getpid+0xc>)
 8013632:	2258      	movs	r2, #88	; 0x58
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	f04f 30ff 	mov.w	r0, #4294967295
 801363a:	4770      	bx	lr
 801363c:	2000b370 	.word	0x2000b370

08013640 <_isatty>:
 8013640:	4b02      	ldr	r3, [pc, #8]	; (801364c <_isatty+0xc>)
 8013642:	2258      	movs	r2, #88	; 0x58
 8013644:	601a      	str	r2, [r3, #0]
 8013646:	2000      	movs	r0, #0
 8013648:	4770      	bx	lr
 801364a:	bf00      	nop
 801364c:	2000b370 	.word	0x2000b370

08013650 <_kill>:
 8013650:	4b02      	ldr	r3, [pc, #8]	; (801365c <_kill+0xc>)
 8013652:	2258      	movs	r2, #88	; 0x58
 8013654:	601a      	str	r2, [r3, #0]
 8013656:	f04f 30ff 	mov.w	r0, #4294967295
 801365a:	4770      	bx	lr
 801365c:	2000b370 	.word	0x2000b370

08013660 <_lseek>:
 8013660:	4b02      	ldr	r3, [pc, #8]	; (801366c <_lseek+0xc>)
 8013662:	2258      	movs	r2, #88	; 0x58
 8013664:	601a      	str	r2, [r3, #0]
 8013666:	f04f 30ff 	mov.w	r0, #4294967295
 801366a:	4770      	bx	lr
 801366c:	2000b370 	.word	0x2000b370

08013670 <_read>:
 8013670:	4b02      	ldr	r3, [pc, #8]	; (801367c <_read+0xc>)
 8013672:	2258      	movs	r2, #88	; 0x58
 8013674:	601a      	str	r2, [r3, #0]
 8013676:	f04f 30ff 	mov.w	r0, #4294967295
 801367a:	4770      	bx	lr
 801367c:	2000b370 	.word	0x2000b370

08013680 <_write>:
 8013680:	4b02      	ldr	r3, [pc, #8]	; (801368c <_write+0xc>)
 8013682:	2258      	movs	r2, #88	; 0x58
 8013684:	601a      	str	r2, [r3, #0]
 8013686:	f04f 30ff 	mov.w	r0, #4294967295
 801368a:	4770      	bx	lr
 801368c:	2000b370 	.word	0x2000b370

08013690 <_exit>:
 8013690:	e7fe      	b.n	8013690 <_exit>
	...

08013694 <_init>:
 8013694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013696:	bf00      	nop
 8013698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801369a:	bc08      	pop	{r3}
 801369c:	469e      	mov	lr, r3
 801369e:	4770      	bx	lr

080136a0 <_fini>:
 80136a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a2:	bf00      	nop
 80136a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136a6:	bc08      	pop	{r3}
 80136a8:	469e      	mov	lr, r3
 80136aa:	4770      	bx	lr
