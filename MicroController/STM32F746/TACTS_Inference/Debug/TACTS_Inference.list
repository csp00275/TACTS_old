
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbfc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800ddd0  0800ddd0  0001ddd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2cc  0800e2cc  000204b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2cc  0800e2cc  0001e2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2d4  0800e2d4  000204b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2d4  0800e2d4  0001e2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2d8  0800e2d8  0001e2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b0  20000000  0800e2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  200004b0  0800e78c  000204b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a5c  0800e78c  00021a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada2  00000000  00000000  000204e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003126  00000000  00000000  0003b282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002838e  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016953  00000000  00000000  0006890e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef590  00000000  00000000  0007f261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e7f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a34  00000000  00000000  0016e844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004b0 	.word	0x200004b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ddb4 	.word	0x0800ddb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004b4 	.word	0x200004b4
 800020c:	0800ddb4 	.word	0x0800ddb4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_I2C1_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <MX_I2C1_Init+0x7c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f48:	f001 fafe 	bl	8002548 <HAL_I2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f52:	f000 fa4b 	bl	80013ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f5a:	f002 fd4f 	bl	80039fc <HAL_I2CEx_ConfigAnalogFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 fa42 	bl	80013ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f6c:	f002 fd91 	bl	8003a92 <HAL_I2CEx_ConfigDigitalFilter>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 fa39 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200004cc 	.word	0x200004cc
 8000f84:	40005400 	.word	0x40005400
 8000f88:	6000030d 	.word	0x6000030d

08000f8c <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6178      	str	r0, [r7, #20]
 8000f94:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f98:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f9c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000fa0:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	60da      	str	r2, [r3, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	edd3 6a04 	vldr	s13, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edd3 7a03 	vldr	s15, [r3, #12]
 800101c:	ed97 6a00 	vldr	s12, [r7]
 8001020:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edd3 7a04 	vldr	s15, [r3, #16]
 8001038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800103c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edd3 7a02 	vldr	s15, [r3, #8]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	ee07 3a90 	vmov	s15, r3
}
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fe8d 	bl	8001d8a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f920 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 f996 	bl	80013a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001078:	f000 fc04 	bl	8001884 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800107c:	f7ff ff46 	bl	8000f0c <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001080:	f000 f984 	bl	800138c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */




  initializeAllSensors(tca_addr, vl53l0x_s, filters);
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <main+0x44>)
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <main+0x48>)
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <main+0x4c>)
 800108a:	f000 fd5f 	bl	8001b4c <initializeAllSensors>

  startMsg();
 800108e:	f000 fc5f 	bl	8001950 <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001092:	2241      	movs	r2, #65	; 0x41
 8001094:	4908      	ldr	r1, [pc, #32]	; (80010b8 <main+0x50>)
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <main+0x54>)
 8001098:	f000 fc24 	bl	80018e4 <ReceiveUartMessage>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f7      	bne.n	8001092 <main+0x2a>
	  {
	      ProcessCommand(rxMsg);
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <main+0x50>)
 80010a4:	f000 f80c 	bl	80010c0 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80010a8:	e7f3      	b.n	8001092 <main+0x2a>
 80010aa:	bf00      	nop
 80010ac:	20001914 	.word	0x20001914
 80010b0:	20000654 	.word	0x20000654
 80010b4:	20000018 	.word	0x20000018
 80010b8:	200005ec 	.word	0x200005ec
 80010bc:	20000524 	.word	0x20000524

080010c0 <ProcessCommand>:
  }
  /* USER CODE END 3 */
}

void ProcessCommand(uint8_t *command)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {
 80010c8:	491a      	ldr	r1, [pc, #104]	; (8001134 <ProcessCommand+0x74>)
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff f8a0 	bl	8000210 <strcmp>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10b      	bne.n	80010ee <ProcessCommand+0x2e>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 80010d6:	4918      	ldr	r1, [pc, #96]	; (8001138 <ProcessCommand+0x78>)
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <ProcessCommand+0x7c>)
 80010da:	f00a fbf7 	bl	800b8cc <siprintf>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	4915      	ldr	r1, [pc, #84]	; (800113c <ProcessCommand+0x7c>)
 80010e6:	4816      	ldr	r0, [pc, #88]	; (8001140 <ProcessCommand+0x80>)
 80010e8:	f003 fe38 	bl	8004d5c <HAL_UART_Transmit>
    } else if (strcmp((char*)command, "2") == 0) {
    	SecondCommand();
    } else {
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 80010ec:	e01e      	b.n	800112c <ProcessCommand+0x6c>
    } else if (strcmp((char*)command, "1") == 0) {
 80010ee:	4915      	ldr	r1, [pc, #84]	; (8001144 <ProcessCommand+0x84>)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f88d 	bl	8000210 <strcmp>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <ProcessCommand+0x42>
    	FirstCommand();
 80010fc:	f000 f828 	bl	8001150 <FirstCommand>
}
 8001100:	e014      	b.n	800112c <ProcessCommand+0x6c>
    } else if (strcmp((char*)command, "2") == 0) {
 8001102:	4911      	ldr	r1, [pc, #68]	; (8001148 <ProcessCommand+0x88>)
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f883 	bl	8000210 <strcmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <ProcessCommand+0x56>
    	SecondCommand();
 8001110:	f000 f834 	bl	800117c <SecondCommand>
}
 8001114:	e00a      	b.n	800112c <ProcessCommand+0x6c>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <ProcessCommand+0x8c>)
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <ProcessCommand+0x7c>)
 800111a:	f00a fbd7 	bl	800b8cc <siprintf>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	4905      	ldr	r1, [pc, #20]	; (800113c <ProcessCommand+0x7c>)
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <ProcessCommand+0x80>)
 8001128:	f003 fe18 	bl	8004d5c <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800ddd0 	.word	0x0800ddd0
 8001138:	0800ddd8 	.word	0x0800ddd8
 800113c:	200005ac 	.word	0x200005ac
 8001140:	20000524 	.word	0x20000524
 8001144:	0800dde0 	.word	0x0800dde0
 8001148:	0800dde4 	.word	0x0800dde4
 800114c:	0800dde8 	.word	0x0800dde8

08001150 <FirstCommand>:


void FirstCommand()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "FirstCommand\n"), 100);
 8001154:	4906      	ldr	r1, [pc, #24]	; (8001170 <FirstCommand+0x20>)
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <FirstCommand+0x24>)
 8001158:	f00a fbb8 	bl	800b8cc <siprintf>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	2364      	movs	r3, #100	; 0x64
 8001162:	4904      	ldr	r1, [pc, #16]	; (8001174 <FirstCommand+0x24>)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <FirstCommand+0x28>)
 8001166:	f003 fdf9 	bl	8004d5c <HAL_UART_Transmit>

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	0800de08 	.word	0x0800de08
 8001174:	200005ac 	.word	0x200005ac
 8001178:	20000524 	.word	0x20000524

0800117c <SecondCommand>:

void SecondCommand()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001182:	4944      	ldr	r1, [pc, #272]	; (8001294 <SecondCommand+0x118>)
 8001184:	4844      	ldr	r0, [pc, #272]	; (8001298 <SecondCommand+0x11c>)
 8001186:	f00a fba1 	bl	800b8cc <siprintf>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	4941      	ldr	r1, [pc, #260]	; (8001298 <SecondCommand+0x11c>)
 8001192:	4842      	ldr	r0, [pc, #264]	; (800129c <SecondCommand+0x120>)
 8001194:	f003 fde2 	bl	8004d5c <HAL_UART_Transmit>

    uint32_t timeStart_s, timeEnd_s,timeDiff_s; // single
    uint32_t timeStart_a, timeEnd_a, timeDiff_a; // all

    timeStart_a = HAL_GetTick(); //
 8001198:	f000 fe48 	bl	8001e2c <HAL_GetTick>
 800119c:	61b8      	str	r0, [r7, #24]

    do {
    	timeStart_s = HAL_GetTick();
 800119e:	f000 fe45 	bl	8001e2c <HAL_GetTick>
 80011a2:	6178      	str	r0, [r7, #20]

  	  /// Read the VL53l0x data ///
        for (int i = 0; i < NUM_SENSOR; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	e042      	b.n	8001230 <SecondCommand+0xb4>

    	    uint8_t q = i / 12;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <SecondCommand+0x124>)
 80011ae:	fb82 1203 	smull	r1, r2, r2, r3
 80011b2:	1052      	asrs	r2, r2, #1
 80011b4:	17db      	asrs	r3, r3, #31
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	70fb      	strb	r3, [r7, #3]
    	    uint8_t r = i % 12;
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <SecondCommand+0x124>)
 80011be:	fb83 1302 	smull	r1, r3, r3, r2
 80011c2:	1059      	asrs	r1, r3, #1
 80011c4:	17d3      	asrs	r3, r2, #31
 80011c6:	1ac9      	subs	r1, r1, r3
 80011c8:	460b      	mov	r3, r1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	440b      	add	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	1ad1      	subs	r1, r2, r3
 80011d2:	460b      	mov	r3, r1
 80011d4:	70bb      	strb	r3, [r7, #2]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	78ba      	ldrb	r2, [r7, #2]
 80011de:	2a07      	cmp	r2, #7
 80011e0:	bf8c      	ite	hi
 80011e2:	2201      	movhi	r2, #1
 80011e4:	2200      	movls	r2, #0
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	4413      	add	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 80011ec:	78bb      	ldrb	r3, [r7, #2]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	d903      	bls.n	80011fa <SecondCommand+0x7e>
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	3b08      	subs	r3, #8
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	e000      	b.n	80011fc <SecondCommand+0x80>
 80011fa:	78bb      	ldrb	r3, [r7, #2]
 80011fc:	703b      	strb	r3, [r7, #0]

    	    resetTcaDevicesExcept(active_device, tca_addr);
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	4928      	ldr	r1, [pc, #160]	; (80012a4 <SecondCommand+0x128>)
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fbfe 	bl	8001a04 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 8001208:	7839      	ldrb	r1, [r7, #0]
 800120a:	787b      	ldrb	r3, [r7, #1]
 800120c:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <SecondCommand+0x128>)
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc24 	bl	8001a5c <setActiveTcaChannel>
            excuteVl53l0x(&vl53l0x_s[i],i);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <SecondCommand+0x12c>)
 8001220:	4413      	add	r3, r2
 8001222:	69f9      	ldr	r1, [r7, #28]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fd39 	bl	8001c9c <excuteVl53l0x>
        for (int i = 0; i < NUM_SENSOR; i++) {
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0b      	cmp	r3, #11
 8001234:	ddb9      	ble.n	80011aa <SecondCommand+0x2e>

        }

		timeEnd_s = HAL_GetTick();
 8001236:	f000 fdf9 	bl	8001e2c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]
		timeDiff_s = timeEnd_s - timeStart_s;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", timeDiff_s), 100);
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4919      	ldr	r1, [pc, #100]	; (80012ac <SecondCommand+0x130>)
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <SecondCommand+0x11c>)
 800124a:	f00a fb3f 	bl	800b8cc <siprintf>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	4910      	ldr	r1, [pc, #64]	; (8001298 <SecondCommand+0x11c>)
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <SecondCommand+0x120>)
 8001258:	f003 fd80 	bl	8004d5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 800125c:	4914      	ldr	r1, [pc, #80]	; (80012b0 <SecondCommand+0x134>)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <SecondCommand+0x11c>)
 8001260:	f00a fb34 	bl	800b8cc <siprintf>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	490b      	ldr	r1, [pc, #44]	; (8001298 <SecondCommand+0x11c>)
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <SecondCommand+0x120>)
 800126e:	f003 fd75 	bl	8004d5c <HAL_UART_Transmit>

		timeEnd_a = HAL_GetTick();
 8001272:	f000 fddb 	bl	8001e2c <HAL_GetTick>
 8001276:	60b8      	str	r0, [r7, #8]
		timeDiff_a = timeEnd_a - timeStart_a;
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	607b      	str	r3, [r7, #4]

    } while (timeDiff_a < 10000);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f242 720f 	movw	r2, #9999	; 0x270f
 8001286:	4293      	cmp	r3, r2
 8001288:	d989      	bls.n	800119e <SecondCommand+0x22>

}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800de18 	.word	0x0800de18
 8001298:	200005ac 	.word	0x200005ac
 800129c:	20000524 	.word	0x20000524
 80012a0:	2aaaaaab 	.word	0x2aaaaaab
 80012a4:	20000018 	.word	0x20000018
 80012a8:	20000654 	.word	0x20000654
 80012ac:	0800de28 	.word	0x0800de28
 80012b0:	0800de30 	.word	0x0800de30

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f009 fe90 	bl	800afe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <SystemClock_Config+0xd0>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a29      	ldr	r2, [pc, #164]	; (8001384 <SystemClock_Config+0xd0>)
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <SystemClock_Config+0xd0>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <SystemClock_Config+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <SystemClock_Config+0xd4>)
 80012f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <SystemClock_Config+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800131c:	2308      	movs	r3, #8
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001320:	23d8      	movs	r3, #216	; 0xd8
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fc4b 	bl	8003bcc <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800133c:	f000 f856 	bl	80013ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001340:	f002 fbf4 	bl	8003b2c <HAL_PWREx_EnableOverDrive>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800134a:	f000 f84f 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800135a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800135e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2107      	movs	r1, #7
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fed1 	bl	8004114 <HAL_RCC_ClockConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001378:	f000 f838 	bl	80013ec <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	; 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2025      	movs	r0, #37	; 0x25
 8001396:	f000 fe54 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800139a:	2025      	movs	r0, #37	; 0x25
 800139c:	f000 fe6d 	bl	800207a <HAL_NVIC_EnableIRQ>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_GPIO_Init+0x44>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <MX_GPIO_Init+0x44>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_GPIO_Init+0x44>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_GPIO_Init+0x44>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <MX_GPIO_Init+0x44>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_GPIO_Init+0x44>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 80013f4:	4905      	ldr	r1, [pc, #20]	; (800140c <Error_Handler+0x20>)
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <Error_Handler+0x24>)
 80013f8:	f00a fa68 	bl	800b8cc <siprintf>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	4903      	ldr	r1, [pc, #12]	; (8001410 <Error_Handler+0x24>)
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <Error_Handler+0x28>)
 8001406:	f003 fca9 	bl	8004d5c <HAL_UART_Transmit>
 800140a:	e7f3      	b.n	80013f4 <Error_Handler+0x8>
 800140c:	0800de34 	.word	0x0800de34
 8001410:	200005ac 	.word	0x200005ac
 8001414:	20000524 	.word	0x20000524

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x44>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_MspInit+0x44>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x44>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x44>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x44>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x44>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0aa      	sub	sp, #168	; 0xa8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2284      	movs	r2, #132	; 0x84
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f009 fdb1 	bl	800afe8 <memset>
  if(hi2c->Instance==I2C1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <HAL_I2C_MspInit+0xd4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d14c      	bne.n	800152a <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001494:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001496:	2300      	movs	r3, #0
 8001498:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f81e 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014aa:	f7ff ff9f 	bl	80013ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_I2C_MspInit+0xd8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_I2C_MspInit+0xd8>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_I2C_MspInit+0xd8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014ea:	4619      	mov	r1, r3
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <HAL_I2C_MspInit+0xdc>)
 80014ee:	f000 fe7f 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_I2C_MspInit+0xd8>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_I2C_MspInit+0xd8>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_I2C_MspInit+0xd8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	201f      	movs	r0, #31
 8001510:	f000 fd97 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001514:	201f      	movs	r0, #31
 8001516:	f000 fdb0 	bl	800207a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2020      	movs	r0, #32
 8001520:	f000 fd8f 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001524:	2020      	movs	r0, #32
 8001526:	f000 fda8 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	37a8      	adds	r7, #168	; 0xa8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40005400 	.word	0x40005400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0ac      	sub	sp, #176	; 0xb0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	2284      	movs	r2, #132	; 0x84
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f009 fd41 	bl	800afe8 <memset>
  if(huart->Instance==USART1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a32      	ldr	r2, [pc, #200]	; (8001634 <HAL_UART_MspInit+0xf4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d15c      	bne.n	800162a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001574:	2300      	movs	r3, #0
 8001576:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4618      	mov	r0, r3
 800157e:	f002 ffaf 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001588:	f7ff ff30 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_UART_MspInit+0xf8>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_UART_MspInit+0xf8>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6453      	str	r3, [r2, #68]	; 0x44
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_UART_MspInit+0xf8>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_UART_MspInit+0xf8>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a23      	ldr	r2, [pc, #140]	; (8001638 <HAL_UART_MspInit+0xf8>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_UART_MspInit+0xf8>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_UART_MspInit+0xf8>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_UART_MspInit+0xf8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_UART_MspInit+0xf8>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f6:	4619      	mov	r1, r3
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <HAL_UART_MspInit+0xfc>)
 80015fa:	f000 fdf9 	bl	80021f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001618:	2307      	movs	r3, #7
 800161a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001622:	4619      	mov	r1, r3
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <HAL_UART_MspInit+0x100>)
 8001626:	f000 fde3 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	37b0      	adds	r7, #176	; 0xb0
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40011000 	.word	0x40011000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40020000 	.word	0x40020000

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 fbb8 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <I2C1_EV_IRQHandler+0x10>)
 800169e:	f001 f9cd 	bl	8002a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200004cc 	.word	0x200004cc

080016ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <I2C1_ER_IRQHandler+0x10>)
 80016b2:	f001 f9dd 	bl	8002a70 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200004cc 	.word	0x200004cc

080016c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART1_IRQHandler+0x10>)
 80016c6:	f003 fc91 	bl	8004fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000524 	.word	0x20000524

080016d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ee:	f009 fc43 	bl	800af78 <__errno>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2216      	movs	r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_exit>:

void _exit (int status)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001716:	e7fe      	b.n	8001716 <_exit+0x12>

08001718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e00a      	b.n	8001740 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172a:	f3af 8000 	nop.w
 800172e:	4601      	mov	r1, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf0      	blt.n	800172a <_read+0x12>
  }

  return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf1      	blt.n	8001764 <_write+0x12>
  }
  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f009 fba8 	bl	800af78 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20050000 	.word	0x20050000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000520 	.word	0x20000520
 800185c:	20001a60 	.word	0x20001a60

08001860 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_USART1_UART_Init+0x58>)
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <MX_USART1_UART_Init+0x5c>)
 800188c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_USART1_UART_Init+0x58>)
 8001890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_USART1_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_USART1_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USART1_UART_Init+0x58>)
 80018c8:	f003 f9fa 	bl	8004cc0 <HAL_UART_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018d2:	f7ff fd8b 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000524 	.word	0x20000524
 80018e0:	40011000 	.word	0x40011000

080018e4 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80018f6:	f107 0115 	add.w	r1, r7, #21
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	2201      	movs	r2, #1
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f003 faae 	bl	8004e62 <HAL_UART_Receive>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f4      	bne.n	80018f6 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 800190c:	7d7b      	ldrb	r3, [r7, #21]
 800190e:	2b0a      	cmp	r3, #10
 8001910:	d106      	bne.n	8001920 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 8001912:	8afb      	ldrh	r3, [r7, #22]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e012      	b.n	8001946 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 8001920:	8afb      	ldrh	r3, [r7, #22]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4413      	add	r3, r2
 8001926:	7d7a      	ldrb	r2, [r7, #21]
 8001928:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 800192a:	8afb      	ldrh	r3, [r7, #22]
 800192c:	3301      	adds	r3, #1
 800192e:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 8001930:	8afa      	ldrh	r2, [r7, #22]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3de      	bcc.n	80018f6 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8001938:	8afb      	ldrh	r3, [r7, #22]
 800193a:	3b01      	subs	r3, #1
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	4413      	add	r3, r2
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <startMsg>:

void startMsg(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8001954:	4927      	ldr	r1, [pc, #156]	; (80019f4 <startMsg+0xa4>)
 8001956:	4828      	ldr	r0, [pc, #160]	; (80019f8 <startMsg+0xa8>)
 8001958:	f009 ffb8 	bl	800b8cc <siprintf>
 800195c:	4603      	mov	r3, r0
 800195e:	b29a      	uxth	r2, r3
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	4925      	ldr	r1, [pc, #148]	; (80019f8 <startMsg+0xa8>)
 8001964:	4825      	ldr	r0, [pc, #148]	; (80019fc <startMsg+0xac>)
 8001966:	f003 f9f9 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800196a:	4922      	ldr	r1, [pc, #136]	; (80019f4 <startMsg+0xa4>)
 800196c:	4822      	ldr	r0, [pc, #136]	; (80019f8 <startMsg+0xa8>)
 800196e:	f009 ffad 	bl	800b8cc <siprintf>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	491f      	ldr	r1, [pc, #124]	; (80019f8 <startMsg+0xa8>)
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <startMsg+0xac>)
 800197c:	f003 f9ee 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8001980:	491c      	ldr	r1, [pc, #112]	; (80019f4 <startMsg+0xa4>)
 8001982:	481d      	ldr	r0, [pc, #116]	; (80019f8 <startMsg+0xa8>)
 8001984:	f009 ffa2 	bl	800b8cc <siprintf>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	491a      	ldr	r1, [pc, #104]	; (80019f8 <startMsg+0xa8>)
 8001990:	481a      	ldr	r0, [pc, #104]	; (80019fc <startMsg+0xac>)
 8001992:	f003 f9e3 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 8001996:	491a      	ldr	r1, [pc, #104]	; (8001a00 <startMsg+0xb0>)
 8001998:	4817      	ldr	r0, [pc, #92]	; (80019f8 <startMsg+0xa8>)
 800199a:	f009 ff97 	bl	800b8cc <siprintf>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	2364      	movs	r3, #100	; 0x64
 80019a4:	4914      	ldr	r1, [pc, #80]	; (80019f8 <startMsg+0xa8>)
 80019a6:	4815      	ldr	r0, [pc, #84]	; (80019fc <startMsg+0xac>)
 80019a8:	f003 f9d8 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80019ac:	4911      	ldr	r1, [pc, #68]	; (80019f4 <startMsg+0xa4>)
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <startMsg+0xa8>)
 80019b0:	f009 ff8c 	bl	800b8cc <siprintf>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	490f      	ldr	r1, [pc, #60]	; (80019f8 <startMsg+0xa8>)
 80019bc:	480f      	ldr	r0, [pc, #60]	; (80019fc <startMsg+0xac>)
 80019be:	f003 f9cd 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80019c2:	490c      	ldr	r1, [pc, #48]	; (80019f4 <startMsg+0xa4>)
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <startMsg+0xa8>)
 80019c6:	f009 ff81 	bl	800b8cc <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	4909      	ldr	r1, [pc, #36]	; (80019f8 <startMsg+0xa8>)
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <startMsg+0xac>)
 80019d4:	f003 f9c2 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <startMsg+0xa4>)
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <startMsg+0xa8>)
 80019dc:	f009 ff76 	bl	800b8cc <siprintf>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	4904      	ldr	r1, [pc, #16]	; (80019f8 <startMsg+0xa8>)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <startMsg+0xac>)
 80019ea:	f003 f9b7 	bl	8004d5c <HAL_UART_Transmit>
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0800de3c 	.word	0x0800de3c
 80019f8:	200005ac 	.word	0x200005ac
 80019fc:	20000524 	.word	0x20000524
 8001a00:	0800de7c 	.word	0x0800de7c

08001a04 <resetTcaDevicesExcept>:

uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
uint8_t tca_ch_reset = 0x00;
uint8_t tca_addr[2] = {0x70,0x71};

void resetTcaDevicesExcept(uint8_t active_device, const uint8_t *tca_addr) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e015      	b.n	8001a42 <resetTcaDevicesExcept+0x3e>
        if (j != active_device) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d00e      	beq.n	8001a3c <resetTcaDevicesExcept+0x38>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	b299      	uxth	r1, r3
 8001a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <resetTcaDevicesExcept+0x50>)
 8001a36:	4808      	ldr	r0, [pc, #32]	; (8001a58 <resetTcaDevicesExcept+0x54>)
 8001a38:	f000 fe16 	bl	8002668 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d9e6      	bls.n	8001a16 <resetTcaDevicesExcept+0x12>
        }
    }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20001a04 	.word	0x20001a04
 8001a58:	200004cc 	.word	0x200004cc

08001a5c <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel, const uint8_t *tca_addr) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	4603      	mov	r3, r0
 8001a64:	603a      	str	r2, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	79bb      	ldrb	r3, [r7, #6]
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <setActiveTcaChannel+0x3c>)
 8001a7e:	441a      	add	r2, r3
 8001a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <setActiveTcaChannel+0x40>)
 8001a8a:	f000 fded 	bl	8002668 <HAL_I2C_Master_Transmit>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000010 	.word	0x20000010
 8001a9c:	200004cc 	.word	0x200004cc

08001aa0 <initializeVl53l0x>:

void initializeVl53l0x(VL53L0X_Dev_t *Dev) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	Dev->I2cHandle = &hi2c1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <initializeVl53l0x+0x98>)
 8001aac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2252      	movs	r2, #82	; 0x52
 8001ab4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	VL53L0X_WaitDeviceBooted( Dev );
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f004 fd29 	bl	8006510 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f004 fa40 	bl	8005f44 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f004 fba1 	bl	800620c <VL53L0X_StaticInit>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001aca:	2101      	movs	r1, #1
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f004 fdbd 	bl	800664c <VL53L0X_SetDeviceMode>
	VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <initializeVl53l0x+0x9c>)
 8001ad4:	491a      	ldr	r1, [pc, #104]	; (8001b40 <initializeVl53l0x+0xa0>)
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f005 fa3a 	bl	8006f50 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <initializeVl53l0x+0xa4>)
 8001ade:	491a      	ldr	r1, [pc, #104]	; (8001b48 <initializeVl53l0x+0xa8>)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f005 fec3 	bl	800786c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2100      	movs	r1, #0
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f005 f82a 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2101      	movs	r1, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f005 f825 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001afa:	f641 1299 	movw	r2, #6553	; 0x1999
 8001afe:	2101      	movs	r1, #1
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f005 f8cf 	bl	8006ca4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001b06:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f005 f8c9 	bl	8006ca4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8001b12:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f004 fdf6 	bl	8006708 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001b1c:	2212      	movs	r2, #18
 8001b1e:	2100      	movs	r1, #0
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f004 fe17 	bl	8006754 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001b26:	220e      	movs	r2, #14
 8001b28:	2101      	movs	r1, #1
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f004 fe12 	bl	8006754 <VL53L0X_SetVcselPulsePeriod>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200004cc 	.word	0x200004cc
 8001b3c:	20000652 	.word	0x20000652
 8001b40:	20000651 	.word	0x20000651
 8001b44:	20000650 	.word	0x20000650
 8001b48:	2000064c 	.word	0x2000064c

08001b4c <initializeAllSensors>:

void initializeAllSensors(uint8_t *tca_addr, VL53L0X_Dev_t *vl53l0x_s, KalmanFilter *filters) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	e011      	b.n	8001b82 <initializeAllSensors+0x36>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2301      	movs	r3, #1
 8001b74:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <initializeAllSensors+0x128>)
 8001b76:	4840      	ldr	r0, [pc, #256]	; (8001c78 <initializeAllSensors+0x12c>)
 8001b78:	f000 fd76 	bl	8002668 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d9ea      	bls.n	8001b5e <initializeAllSensors+0x12>
    }

    for (int i = 0; i < NUM_SENSOR; i++) {
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e069      	b.n	8001c62 <initializeAllSensors+0x116>
        uint8_t q = i / 12;
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <initializeAllSensors+0x130>)
 8001b92:	fb82 1203 	smull	r1, r2, r2, r3
 8001b96:	1052      	asrs	r2, r2, #1
 8001b98:	17db      	asrs	r3, r3, #31
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	75fb      	strb	r3, [r7, #23]
        uint8_t r = i % 12;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <initializeAllSensors+0x130>)
 8001ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba6:	1059      	asrs	r1, r3, #1
 8001ba8:	17d3      	asrs	r3, r2, #31
 8001baa:	1ac9      	subs	r1, r1, r3
 8001bac:	460b      	mov	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	1ad1      	subs	r1, r2, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	75bb      	strb	r3, [r7, #22]
        uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	7dba      	ldrb	r2, [r7, #22]
 8001bc2:	2a07      	cmp	r2, #7
 8001bc4:	bf8c      	ite	hi
 8001bc6:	2201      	movhi	r2, #1
 8001bc8:	2200      	movls	r2, #0
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	4413      	add	r3, r2
 8001bce:	757b      	strb	r3, [r7, #21]
        uint8_t channel = (r >= 8) ? r - 8 : r;
 8001bd0:	7dbb      	ldrb	r3, [r7, #22]
 8001bd2:	2b07      	cmp	r3, #7
 8001bd4:	d903      	bls.n	8001bde <initializeAllSensors+0x92>
 8001bd6:	7dbb      	ldrb	r3, [r7, #22]
 8001bd8:	3b08      	subs	r3, #8
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	e000      	b.n	8001be0 <initializeAllSensors+0x94>
 8001bde:	7dbb      	ldrb	r3, [r7, #22]
 8001be0:	753b      	strb	r3, [r7, #20]

        resetTcaDevicesExcept(active_device, tca_addr);
 8001be2:	7d7b      	ldrb	r3, [r7, #21]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff0c 	bl	8001a04 <resetTcaDevicesExcept>
        setActiveTcaChannel(active_device, channel, tca_addr);
 8001bec:	7d39      	ldrb	r1, [r7, #20]
 8001bee:	7d7b      	ldrb	r3, [r7, #21]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff32 	bl	8001a5c <setActiveTcaChannel>

        initializeVl53l0x(&vl53l0x_s[i]);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	4413      	add	r3, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff4a 	bl	8001aa0 <initializeVl53l0x>
        Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <initializeAllSensors+0x134>)
 8001c1e:	edd2 7a00 	vldr	s15, [r2]
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <initializeAllSensors+0x138>)
 8001c24:	ed92 7a00 	vldr	s14, [r2]
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <initializeAllSensors+0x13c>)
 8001c2a:	edd2 6a00 	vldr	s13, [r2]
 8001c2e:	eddf 1a17 	vldr	s3, [pc, #92]	; 8001c8c <initializeAllSensors+0x140>
 8001c32:	eeb0 1a66 	vmov.f32	s2, s13
 8001c36:	eef0 0a47 	vmov.f32	s1, s14
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f9a4 	bl	8000f8c <Kalman_Init>

        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r", i), 100);
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4912      	ldr	r1, [pc, #72]	; (8001c90 <initializeAllSensors+0x144>)
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <initializeAllSensors+0x148>)
 8001c4a:	f009 fe3f 	bl	800b8cc <siprintf>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	490f      	ldr	r1, [pc, #60]	; (8001c94 <initializeAllSensors+0x148>)
 8001c56:	4810      	ldr	r0, [pc, #64]	; (8001c98 <initializeAllSensors+0x14c>)
 8001c58:	f003 f880 	bl	8004d5c <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0b      	cmp	r3, #11
 8001c66:	dd92      	ble.n	8001b8e <initializeAllSensors+0x42>
    }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20001a04 	.word	0x20001a04
 8001c78:	200004cc 	.word	0x200004cc
 8001c7c:	2aaaaaab 	.word	0x2aaaaaab
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000008 	.word	0x20000008
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	00000000 	.word	0x00000000
 8001c90:	0800debc 	.word	0x0800debc
 8001c94:	200005ac 	.word	0x200005ac
 8001c98:	20000524 	.word	0x20000524

08001c9c <excuteVl53l0x>:

void excuteVl53l0x(VL53L0X_Dev_t *Dev,int i) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001ca6:	491e      	ldr	r1, [pc, #120]	; (8001d20 <excuteVl53l0x+0x84>)
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f005 fdf4 	bl	8007896 <VL53L0X_PerformContinuousRangingMeasurement>
    if (RangingData.RangeStatus == 0) {
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <excuteVl53l0x+0x84>)
 8001cb0:	7e1b      	ldrb	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d124      	bne.n	8001d00 <excuteVl53l0x+0x64>
        float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <excuteVl53l0x+0x88>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <excuteVl53l0x+0x84>)
 8001cc6:	8912      	ldrh	r2, [r2, #8]
 8001cc8:	ee07 2a90 	vmov	s15, r2
 8001ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f977 	bl	8000fc8 <Kalman_Estimate>
 8001cda:	ed87 0a03 	vstr	s0, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", filteredValue), 100);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7fe fc62 	bl	80005a8 <__aeabi_f2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <excuteVl53l0x+0x8c>)
 8001cea:	4810      	ldr	r0, [pc, #64]	; (8001d2c <excuteVl53l0x+0x90>)
 8001cec:	f009 fdee 	bl	800b8cc <siprintf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	490d      	ldr	r1, [pc, #52]	; (8001d2c <excuteVl53l0x+0x90>)
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <excuteVl53l0x+0x94>)
 8001cfa:	f003 f82f 	bl	8004d5c <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
    }
}
 8001cfe:	e00a      	b.n	8001d16 <excuteVl53l0x+0x7a>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <excuteVl53l0x+0x98>)
 8001d02:	480a      	ldr	r0, [pc, #40]	; (8001d2c <excuteVl53l0x+0x90>)
 8001d04:	f009 fde2 	bl	800b8cc <siprintf>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2364      	movs	r3, #100	; 0x64
 8001d0e:	4907      	ldr	r1, [pc, #28]	; (8001d2c <excuteVl53l0x+0x90>)
 8001d10:	4807      	ldr	r0, [pc, #28]	; (8001d30 <excuteVl53l0x+0x94>)
 8001d12:	f003 f823 	bl	8004d5c <HAL_UART_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000630 	.word	0x20000630
 8001d24:	20001914 	.word	0x20001914
 8001d28:	0800decc 	.word	0x0800decc
 8001d2c:	200005ac 	.word	0x200005ac
 8001d30:	20000524 	.word	0x20000524
 8001d34:	0800ded4 	.word	0x0800ded4

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3e:	490e      	ldr	r1, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d54:	4c0b      	ldr	r4, [pc, #44]	; (8001d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d62:	f7ff fd7d 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f009 f90d 	bl	800af84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f7ff f97d 	bl	8001068 <main>
  bx  lr    
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	200004b0 	.word	0x200004b0
  ldr r2, =_sidata
 8001d7c:	0800e2dc 	.word	0x0800e2dc
  ldr r2, =_sbss
 8001d80:	200004b0 	.word	0x200004b0
  ldr r4, =_ebss
 8001d84:	20001a5c 	.word	0x20001a5c

08001d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC_IRQHandler>

08001d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 f94c 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d94:	200f      	movs	r0, #15
 8001d96:	f000 f805 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9a:	f7ff fb3d 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f967 	bl	8002096 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 f92f 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000020 	.word	0x20000020
 8001e00:	2000001c 	.word	0x2000001c

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000020 	.word	0x20000020
 8001e28:	20001a08 	.word	0x20001a08

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20001a08 	.word	0x20001a08

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000020 	.word	0x20000020

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <__NVIC_SetPriorityGrouping+0x40>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <__NVIC_SetPriorityGrouping+0x40>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00
 8001ed0:	05fa0000 	.word	0x05fa0000

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff29 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff3e 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff31 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff feb6 	bl	8001e2c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e052      	b.n	8002186 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0216 	bic.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <HAL_DMA_Abort+0x62>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0208 	bic.w	r2, r2, #8
 800211e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002130:	e013      	b.n	800215a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002132:	f7ff fe7b 	bl	8001e2c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b05      	cmp	r3, #5
 800213e:	d90c      	bls.n	800215a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2203      	movs	r2, #3
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e015      	b.n	8002186 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e4      	bne.n	8002132 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	223f      	movs	r2, #63	; 0x3f
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d004      	beq.n	80021ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e00c      	b.n	80021c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2205      	movs	r2, #5
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e0:	b2db      	uxtb	r3, r3
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e175      	b.n	80024fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8164 	bne.w	80024f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x56>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80be 	beq.w	80024f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_GPIO_Init+0x324>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002392:	4a61      	ldr	r2, [pc, #388]	; (8002518 <HAL_GPIO_Init+0x328>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_GPIO_Init+0x32c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d037      	beq.n	800242e <HAL_GPIO_Init+0x23e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x330>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d031      	beq.n	800242a <HAL_GPIO_Init+0x23a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a56      	ldr	r2, [pc, #344]	; (8002524 <HAL_GPIO_Init+0x334>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x236>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a55      	ldr	r2, [pc, #340]	; (8002528 <HAL_GPIO_Init+0x338>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x232>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a54      	ldr	r2, [pc, #336]	; (800252c <HAL_GPIO_Init+0x33c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x22e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a53      	ldr	r2, [pc, #332]	; (8002530 <HAL_GPIO_Init+0x340>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x22a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x344>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x348>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x34c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x350>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x21a>
 8002406:	2309      	movs	r3, #9
 8002408:	e012      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800240a:	230a      	movs	r3, #10
 800240c:	e010      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800240e:	2308      	movs	r3, #8
 8002410:	e00e      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002412:	2307      	movs	r3, #7
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002416:	2306      	movs	r3, #6
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	; (8002518 <HAL_GPIO_Init+0x328>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_GPIO_Init+0x354>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a34      	ldr	r2, [pc, #208]	; (8002544 <HAL_GPIO_Init+0x354>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_GPIO_Init+0x354>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <HAL_GPIO_Init+0x354>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae86 	bls.w	8002210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40021c00 	.word	0x40021c00
 800253c:	40022000 	.word	0x40022000
 8002540:	40022400 	.word	0x40022400
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ff76 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e006      	b.n	80025d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d104      	bne.n	80025e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_I2C_Init+0x11c>)
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69d9      	ldr	r1, [r3, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	02008000 	.word	0x02008000

08002668 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	461a      	mov	r2, r3
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
 8002678:	4613      	mov	r3, r2
 800267a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b20      	cmp	r3, #32
 8002686:	f040 80da 	bne.w	800283e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_I2C_Master_Transmit+0x30>
 8002694:	2302      	movs	r3, #2
 8002696:	e0d3      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1d8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026a0:	f7ff fbc4 	bl	8001e2c <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2319      	movs	r3, #25
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fefb 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0be      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2221      	movs	r2, #33	; 0x21
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2210      	movs	r2, #16
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2bff      	cmp	r3, #255	; 0xff
 80026f2:	d90e      	bls.n	8002712 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	22ff      	movs	r2, #255	; 0xff
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	8979      	ldrh	r1, [r7, #10]
 8002702:	4b51      	ldr	r3, [pc, #324]	; (8002848 <HAL_I2C_Master_Transmit+0x1e0>)
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f001 f8e6 	bl	80038dc <I2C_TransferConfig>
 8002710:	e06c      	b.n	80027ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	4b48      	ldr	r3, [pc, #288]	; (8002848 <HAL_I2C_Master_Transmit+0x1e0>)
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f001 f8d5 	bl	80038dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002732:	e05b      	b.n	80027ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	6a39      	ldr	r1, [r7, #32]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fef8 	bl	800352e <I2C_WaitOnTXISFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e07b      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d034      	beq.n	80027ec <HAL_I2C_Master_Transmit+0x184>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d130      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2200      	movs	r2, #0
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fe8a 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e04d      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2bff      	cmp	r3, #255	; 0xff
 80027ac:	d90e      	bls.n	80027cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	22ff      	movs	r2, #255	; 0xff
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	8979      	ldrh	r1, [r7, #10]
 80027bc:	2300      	movs	r3, #0
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f001 f889 	bl	80038dc <I2C_TransferConfig>
 80027ca:	e00f      	b.n	80027ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f001 f878 	bl	80038dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d19e      	bne.n	8002734 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fed7 	bl	80035ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e01a      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2220      	movs	r2, #32
 8002810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_I2C_Master_Transmit+0x1e4>)
 800281e:	400b      	ands	r3, r1
 8002820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	80002000 	.word	0x80002000
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	f040 80db 	bne.w	8002a28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_I2C_Master_Receive+0x30>
 800287c:	2302      	movs	r3, #2
 800287e:	e0d4      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002888:	f7ff fad0 	bl	8001e2c <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2319      	movs	r3, #25
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fe07 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0bf      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2222      	movs	r2, #34	; 0x22
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2210      	movs	r2, #16
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2bff      	cmp	r3, #255	; 0xff
 80028da:	d90e      	bls.n	80028fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	4b52      	ldr	r3, [pc, #328]	; (8002a34 <HAL_I2C_Master_Receive+0x1e4>)
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fff2 	bl	80038dc <I2C_TransferConfig>
 80028f8:	e06d      	b.n	80029d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	b2da      	uxtb	r2, r3
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_I2C_Master_Receive+0x1e4>)
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 ffe1 	bl	80038dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800291a:	e05c      	b.n	80029d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	6a39      	ldr	r1, [r7, #32]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fe81 	bl	8003628 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e07c      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d034      	beq.n	80029d6 <HAL_I2C_Master_Receive+0x186>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d130      	bne.n	80029d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2200      	movs	r2, #0
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fd95 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e04d      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	2bff      	cmp	r3, #255	; 0xff
 8002996:	d90e      	bls.n	80029b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	8979      	ldrh	r1, [r7, #10]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 ff94 	bl	80038dc <I2C_TransferConfig>
 80029b4:	e00f      	b.n	80029d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 ff83 	bl	80038dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d19d      	bne.n	800291c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	6a39      	ldr	r1, [r7, #32]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fde2 	bl	80035ae <I2C_WaitOnSTOPFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01a      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_I2C_Master_Receive+0x1e8>)
 8002a08:	400b      	ands	r3, r1
 8002a0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	80002400 	.word	0x80002400
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	68f9      	ldr	r1, [r7, #12]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	0a9b      	lsrs	r3, r3, #10
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	09db      	lsrs	r3, r3, #7
 8002ac6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0208 	orr.w	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	0a5b      	lsrs	r3, r3, #9
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	09db      	lsrs	r3, r3, #7
 8002af4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f043 0202 	orr.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b10:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 030b 	and.w	r3, r3, #11
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002b22:	68f9      	ldr	r1, [r7, #12]
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb89 	bl	800323c <I2C_ITError>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
 8002b66:	4613      	mov	r3, r2
 8002b68:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <I2C_Slave_ISR_IT+0x24>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0ec      	b.n	8002db0 <I2C_Slave_ISR_IT+0x1fe>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002bf6:	6939      	ldr	r1, [r7, #16]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f9bf 	bl	8002f7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d04d      	beq.n	8002ca6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d047      	beq.n	8002ca6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d128      	bne.n	8002c72 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b28      	cmp	r3, #40	; 0x28
 8002c2a:	d108      	bne.n	8002c3e <I2C_Slave_ISR_IT+0x8c>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c32:	d104      	bne.n	8002c3e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c34:	6939      	ldr	r1, [r7, #16]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 faaa 	bl	8003190 <I2C_ITListenCplt>
 8002c3c:	e032      	b.n	8002ca4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b29      	cmp	r3, #41	; 0x29
 8002c48:	d10e      	bne.n	8002c68 <I2C_Slave_ISR_IT+0xb6>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c50:	d00a      	beq.n	8002c68 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2210      	movs	r2, #16
 8002c58:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fbe5 	bl	800342a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f92d 	bl	8002ec0 <I2C_ITSlaveSeqCplt>
 8002c66:	e01d      	b.n	8002ca4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c70:	e096      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <I2C_Slave_ISR_IT+0xe4>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c92:	f040 8085 	bne.w	8002da0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 facd 	bl	800323c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ca2:	e07d      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1ee>
 8002ca4:	e07c      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d030      	beq.n	8002d14 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02a      	beq.n	8002d14 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d14f      	bne.n	8002da4 <I2C_Slave_ISR_IT+0x1f2>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d0a:	d04b      	beq.n	8002da4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f8d7 	bl	8002ec0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d12:	e047      	b.n	8002da4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	08db      	lsrs	r3, r3, #3
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f842 	bl	8002db8 <I2C_ITAddrCplt>
 8002d34:	e037      	b.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d031      	beq.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02b      	beq.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d018      	beq.n	8002d8a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d88:	e00d      	b.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d90:	d002      	beq.n	8002d98 <I2C_Slave_ISR_IT+0x1e6>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f891 	bl	8002ec0 <I2C_ITSlaveSeqCplt>
 8002d9e:	e002      	b.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002da4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dce:	2b28      	cmp	r3, #40	; 0x28
 8002dd0:	d16a      	bne.n	8002ea8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002df0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002e0c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d138      	bne.n	8002e88 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	09db      	lsrs	r3, r3, #7
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	89bb      	ldrh	r3, [r7, #12]
 8002e1e:	4053      	eors	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11c      	bne.n	8002e64 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e2a:	897b      	ldrh	r3, [r7, #10]
 8002e2c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d13b      	bne.n	8002eb8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e56:	89ba      	ldrh	r2, [r7, #12]
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe7c 	bl	8002b5a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e62:	e029      	b.n	8002eb8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e64:	893b      	ldrh	r3, [r7, #8]
 8002e66:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fd67 	bl	8003940 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e7a:	89ba      	ldrh	r2, [r7, #12]
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff fe6a 	bl	8002b5a <HAL_I2C_AddrCallback>
}
 8002e86:	e017      	b.n	8002eb8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fd57 	bl	8003940 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e9a:	89ba      	ldrh	r2, [r7, #12]
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fe5a 	bl	8002b5a <HAL_I2C_AddrCallback>
}
 8002ea6:	e007      	b.n	8002eb8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2208      	movs	r2, #8
 8002eae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0b9b      	lsrs	r3, r3, #14
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e00d      	b.n	8002f12 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	0bdb      	lsrs	r3, r3, #15
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b29      	cmp	r3, #41	; 0x29
 8002f1c:	d112      	bne.n	8002f44 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2228      	movs	r2, #40	; 0x28
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2221      	movs	r2, #33	; 0x21
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fd06 	bl	8003940 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fdf8 	bl	8002b32 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f42:	e017      	b.n	8002f74 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f4e:	d111      	bne.n	8002f74 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2228      	movs	r2, #40	; 0x28
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2222      	movs	r2, #34	; 0x22
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f5e:	2102      	movs	r1, #2
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fced 	bl	8003940 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fde9 	bl	8002b46 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b21      	cmp	r3, #33	; 0x21
 8002fa6:	d002      	beq.n	8002fae <I2C_ITSlaveCplt+0x32>
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b29      	cmp	r3, #41	; 0x29
 8002fac:	d108      	bne.n	8002fc0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002fae:	f248 0101 	movw	r1, #32769	; 0x8001
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fcc4 	bl	8003940 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2221      	movs	r2, #33	; 0x21
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbe:	e00d      	b.n	8002fdc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b22      	cmp	r3, #34	; 0x22
 8002fc4:	d002      	beq.n	8002fcc <I2C_ITSlaveCplt+0x50>
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002fca:	d107      	bne.n	8002fdc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002fcc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fcb5 	bl	8003940 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2222      	movs	r2, #34	; 0x22
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b64      	ldr	r3, [pc, #400]	; (8003188 <I2C_ITSlaveCplt+0x20c>)
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa14 	bl	800342a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	0b9b      	lsrs	r3, r3, #14
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d013      	beq.n	8003036 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800301c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	2b00      	cmp	r3, #0
 8003024:	d020      	beq.n	8003068 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003034:	e018      	b.n	8003068 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	0bdb      	lsrs	r3, r3, #15
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003050:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8a7 	bl	800323c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b28      	cmp	r3, #40	; 0x28
 80030f8:	d141      	bne.n	800317e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f847 	bl	8003190 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003102:	e03c      	b.n	800317e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800310c:	d014      	beq.n	8003138 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fed6 	bl	8002ec0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a1d      	ldr	r2, [pc, #116]	; (800318c <I2C_ITSlaveCplt+0x210>)
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fd20 	bl	8002b76 <HAL_I2C_ListenCpltCallback>
}
 8003136:	e022      	b.n	800317e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b22      	cmp	r3, #34	; 0x22
 8003142:	d10e      	bne.n	8003162 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fcf3 	bl	8002b46 <HAL_I2C_SlaveRxCpltCallback>
}
 8003160:	e00d      	b.n	800317e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fcda 	bl	8002b32 <HAL_I2C_SlaveTxCpltCallback>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	fe00e800 	.word	0xfe00e800
 800318c:	ffff0000 	.word	0xffff0000

08003190 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a26      	ldr	r2, [pc, #152]	; (8003238 <I2C_ITListenCplt+0xa8>)
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800320e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fb94 	bl	8003940 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2210      	movs	r2, #16
 800321e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fca4 	bl	8002b76 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	ffff0000 	.word	0xffff0000

0800323c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a5d      	ldr	r2, [pc, #372]	; (80033d0 <I2C_ITError+0x194>)
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b28      	cmp	r3, #40	; 0x28
 8003272:	d005      	beq.n	8003280 <I2C_ITError+0x44>
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b29      	cmp	r3, #41	; 0x29
 8003278:	d002      	beq.n	8003280 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b2a      	cmp	r3, #42	; 0x2a
 800327e:	d10b      	bne.n	8003298 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003280:	2103      	movs	r1, #3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fb5c 	bl	8003940 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2228      	movs	r2, #40	; 0x28
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a50      	ldr	r2, [pc, #320]	; (80033d4 <I2C_ITError+0x198>)
 8003294:	635a      	str	r2, [r3, #52]	; 0x34
 8003296:	e011      	b.n	80032bc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003298:	f248 0103 	movw	r1, #32771	; 0x8003
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fb4f 	bl	8003940 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b60      	cmp	r3, #96	; 0x60
 80032ac:	d003      	beq.n	80032b6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d039      	beq.n	800333e <I2C_ITError+0x102>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b11      	cmp	r3, #17
 80032ce:	d002      	beq.n	80032d6 <I2C_ITError+0x9a>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b21      	cmp	r3, #33	; 0x21
 80032d4:	d133      	bne.n	800333e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e4:	d107      	bne.n	80032f6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe ff69 	bl	80021d2 <HAL_DMA_GetState>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d017      	beq.n	8003336 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <I2C_ITError+0x19c>)
 800330c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe ff37 	bl	800218e <HAL_DMA_Abort_IT>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04d      	beq.n	80033c2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003330:	4610      	mov	r0, r2
 8003332:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003334:	e045      	b.n	80033c2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f850 	bl	80033dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800333c:	e041      	b.n	80033c2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d039      	beq.n	80033ba <I2C_ITError+0x17e>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b12      	cmp	r3, #18
 800334a:	d002      	beq.n	8003352 <I2C_ITError+0x116>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b22      	cmp	r3, #34	; 0x22
 8003350:	d133      	bne.n	80033ba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003360:	d107      	bne.n	8003372 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003370:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe ff2b 	bl	80021d2 <HAL_DMA_GetState>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d017      	beq.n	80033b2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <I2C_ITError+0x19c>)
 8003388:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fef9 	bl	800218e <HAL_DMA_Abort_IT>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033b0:	e009      	b.n	80033c6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f812 	bl	80033dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033b8:	e005      	b.n	80033c6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f80e 	bl	80033dc <I2C_TreatErrorCallback>
  }
}
 80033c0:	e002      	b.n	80033c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033c6:	bf00      	nop
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	ffff0000 	.word	0xffff0000
 80033d4:	08002bb3 	.word	0x08002bb3
 80033d8:	08003473 	.word	0x08003473

080033dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d10e      	bne.n	800340e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fbc9 	bl	8002b9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800340c:	e009      	b.n	8003422 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fbb4 	bl	8002b8a <HAL_I2C_ErrorCallback>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d103      	bne.n	8003448 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d007      	beq.n	8003466 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	619a      	str	r2, [r3, #24]
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	2200      	movs	r2, #0
 800348e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	2200      	movs	r2, #0
 800349e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff9b 	bl	80033dc <I2C_TreatErrorCallback>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034be:	e022      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d01e      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fcb0 	bl	8001e2c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d113      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d0cd      	beq.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800353a:	e02c      	b.n	8003596 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f8eb 	bl	800371c <I2C_IsErrorOccurred>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e02a      	b.n	80035a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d01e      	beq.n	8003596 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7fe fc68 	bl	8001e2c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d113      	bne.n	8003596 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e007      	b.n	80035a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d1cb      	bne.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ba:	e028      	b.n	800360e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f8ab 	bl	800371c <I2C_IsErrorOccurred>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e026      	b.n	800361e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d0:	f7fe fc2c 	bl	8001e2c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d1cf      	bne.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003634:	e064      	b.n	8003700 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f86e 	bl	800371c <I2C_IsErrorOccurred>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e062      	b.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d138      	bne.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d105      	bne.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e04e      	b.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b10      	cmp	r3, #16
 800367e:	d107      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2204      	movs	r2, #4
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
 800368e:	e002      	b.n	8003696 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2220      	movs	r2, #32
 800369c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80036aa:	400b      	ands	r3, r1
 80036ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fbaf 	bl	8001e2c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10f      	bne.n	8003700 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d193      	bne.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	fe00e800 	.word	0xfe00e800

0800371c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d068      	beq.n	800381a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2210      	movs	r2, #16
 800374e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003750:	e049      	b.n	80037e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d045      	beq.n	80037e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fb67 	bl	8001e2c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_IsErrorOccurred+0x54>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13a      	bne.n	80037e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003782:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	d121      	bne.n	80037d8 <I2C_IsErrorOccurred+0xbc>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379a:	d01d      	beq.n	80037d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d01a      	beq.n	80037d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037b2:	f7fe fb3b 	bl	8001e2c <HAL_GetTick>
 80037b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b8:	e00e      	b.n	80037d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037ba:	f7fe fb37 	bl	8001e2c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b19      	cmp	r3, #25
 80037c6:	d907      	bls.n	80037d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80037d6:	e006      	b.n	80037e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d1e9      	bne.n	80037ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d003      	beq.n	80037fc <I2C_IsErrorOccurred+0xe0>
 80037f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0aa      	beq.n	8003752 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2220      	movs	r2, #32
 800380a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003880:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff fdca 	bl	800342a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <I2C_IsErrorOccurred+0x1bc>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	fe00e800 	.word	0xfe00e800

080038dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	4613      	mov	r3, r2
 80038ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038f4:	7a7b      	ldrb	r3, [r7, #9]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	4313      	orrs	r3, r2
 8003906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800390a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	0d5b      	lsrs	r3, r3, #21
 8003916:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <I2C_TransferConfig+0x60>)
 800391c:	430b      	orrs	r3, r1
 800391e:	43db      	mvns	r3, r3
 8003920:	ea02 0103 	and.w	r1, r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	03ff63ff 	.word	0x03ff63ff

08003940 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003960:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800396e:	2b28      	cmp	r3, #40	; 0x28
 8003970:	d003      	beq.n	800397a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003978:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800397a:	887b      	ldrh	r3, [r7, #2]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800398a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003998:	2b28      	cmp	r3, #40	; 0x28
 800399a:	d003      	beq.n	80039a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80039a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da03      	bge.n	80039b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d103      	bne.n	80039c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d103      	bne.n	80039d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f043 0320 	orr.w	r3, r3, #32
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d103      	bne.n	80039de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d138      	bne.n	8003a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e032      	b.n	8003a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d139      	bne.n	8003b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e033      	b.n	8003b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2224      	movs	r2, #36	; 0x24
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e000      	b.n	8003b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5a:	f7fe f967 	bl	8001e2c <HAL_GetTick>
 8003b5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b60:	e009      	b.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b62:	f7fe f963 	bl	8001e2c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b70:	d901      	bls.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e022      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d1ee      	bne.n	8003b62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe f94c 	bl	8001e2c <HAL_GetTick>
 8003b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b96:	e009      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b98:	f7fe f948 	bl	8001e2c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d901      	bls.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e007      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e291      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfc:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c08:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x130>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e26b      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x9c>
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7e      	ldr	r2, [pc, #504]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7b      	ldr	r2, [pc, #492]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe f8be 	bl	8001e2c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f8ba 	bl	8001e2c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e21f      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe f8aa 	bl	8001e2c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe f8a6 	bl	8001e2c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e20b      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x110>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d069      	beq.n	8003dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1df      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	493d      	ldr	r1, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe f85c 	bl	8001e2c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe f858 	bl	8001e2c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1bd      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4929      	ldr	r1, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe f838 	bl	8001e2c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe f834 	bl	8001e2c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e199      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d038      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fe f815 	bl	8001e2c <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fe f811 	bl	8001e2c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e176      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
 8003e24:	e01a      	b.n	8003e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fd fffb 	bl	8001e2c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fff7 	bl	8001e2c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d903      	bls.n	8003e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e15c      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
 8003e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b91      	ldr	r3, [pc, #580]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a87      	ldr	r2, [pc, #540]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e92:	4b82      	ldr	r3, [pc, #520]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e9e:	4b7f      	ldr	r3, [pc, #508]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7e      	ldr	r2, [pc, #504]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd ffbf 	bl	8001e2c <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd ffbb 	bl	8001e2c <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e120      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b75      	ldr	r3, [pc, #468]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x31a>
 8003ed8:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a69      	ldr	r2, [pc, #420]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b67      	ldr	r3, [pc, #412]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a66      	ldr	r2, [pc, #408]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x35e>
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a60      	ldr	r2, [pc, #384]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5a      	ldr	r2, [pc, #360]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a57      	ldr	r2, [pc, #348]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd ff6f 	bl	8001e2c <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd ff6b 	bl	8001e2c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0ce      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x386>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd ff59 	bl	8001e2c <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd ff55 	bl	8001e2c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b40      	ldr	r3, [pc, #256]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3c      	ldr	r3, [pc, #240]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a3b      	ldr	r2, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80a4 	beq.w	8004104 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	4b36      	ldr	r3, [pc, #216]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d06b      	beq.n	80040a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d149      	bne.n	8004064 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a30      	ldr	r2, [pc, #192]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd ff26 	bl	8001e2c <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd ff22 	bl	8001e2c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e087      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	4313      	orrs	r3, r2
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 800402a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800402e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8004036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fef6 	bl	8001e2c <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fef2 	bl	8001e2c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e057      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x478>
 8004062:	e04f      	b.n	8004104 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fedc 	bl	8001e2c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd fed8 	bl	8001e2c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e03d      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_RCC_OscConfig+0x4cc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x4ac>
 8004096:	e035      	b.n	8004104 <HAL_RCC_OscConfig+0x538>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x544>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d028      	beq.n	8004100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d121      	bne.n	8004100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d11a      	bne.n	8004100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	3b01      	subs	r3, #1
 80040ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800

08004114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0d0      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	4965      	ldr	r1, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d040      	beq.n	8004238 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d115      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e073      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06b      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4936      	ldr	r1, [pc, #216]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004208:	f7fd fe10 	bl	8001e2c <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fd fe0c 	bl	8001e2c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e053      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d210      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	4922      	ldr	r1, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1cc>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1d0>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1d4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fd6c 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	0800dedc 	.word	0x0800dedc
 80042e4:	20000000 	.word	0x20000000
 80042e8:	2000001c 	.word	0x2000001c

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b090      	sub	sp, #64	; 0x40
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
 80042f8:	2300      	movs	r3, #0
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042fc:	2300      	movs	r3, #0
 80042fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80a1 	bhi.w	8004458 <HAL_RCC_GetSysClockFreq+0x16c>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e09b      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b53      	ldr	r3, [pc, #332]	; (8004470 <HAL_RCC_GetSysClockFreq+0x184>)
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004324:	e09b      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_GetSysClockFreq+0x188>)
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800432a:	e098      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b4f      	ldr	r3, [pc, #316]	; (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004336:	4b4d      	ldr	r3, [pc, #308]	; (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d028      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b4a      	ldr	r3, [pc, #296]	; (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	627a      	str	r2, [r7, #36]	; 0x24
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004354:	2100      	movs	r1, #0
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_GetSysClockFreq+0x188>)
 8004358:	fb03 f201 	mul.w	r2, r3, r1
 800435c:	2300      	movs	r3, #0
 800435e:	fb00 f303 	mul.w	r3, r0, r3
 8004362:	4413      	add	r3, r2
 8004364:	4a43      	ldr	r2, [pc, #268]	; (8004474 <HAL_RCC_GetSysClockFreq+0x188>)
 8004366:	fba0 1202 	umull	r1, r2, r0, r2
 800436a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800436c:	460a      	mov	r2, r1
 800436e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004372:	4413      	add	r3, r2
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004378:	2200      	movs	r2, #0
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	61fa      	str	r2, [r7, #28]
 800437e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004386:	f7fc fc3f 	bl	8000c08 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4613      	mov	r3, r2
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004392:	e053      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	2200      	movs	r2, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	617a      	str	r2, [r7, #20]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043a6:	f04f 0b00 	mov.w	fp, #0
 80043aa:	4652      	mov	r2, sl
 80043ac:	465b      	mov	r3, fp
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043bc:	0150      	lsls	r0, r2, #5
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	ebb2 080a 	subs.w	r8, r2, sl
 80043c6:	eb63 090b 	sbc.w	r9, r3, fp
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043de:	ebb2 0408 	subs.w	r4, r2, r8
 80043e2:	eb63 0509 	sbc.w	r5, r3, r9
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	00eb      	lsls	r3, r5, #3
 80043f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f4:	00e2      	lsls	r2, r4, #3
 80043f6:	4614      	mov	r4, r2
 80043f8:	461d      	mov	r5, r3
 80043fa:	eb14 030a 	adds.w	r3, r4, sl
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	eb45 030b 	adc.w	r3, r5, fp
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004412:	4629      	mov	r1, r5
 8004414:	028b      	lsls	r3, r1, #10
 8004416:	4621      	mov	r1, r4
 8004418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800441c:	4621      	mov	r1, r4
 800441e:	028a      	lsls	r2, r1, #10
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	2200      	movs	r2, #0
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	60fa      	str	r2, [r7, #12]
 800442c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004430:	f7fc fbea 	bl	8000c08 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800444c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetSysClockFreq+0x184>)
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800445c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004460:	4618      	mov	r0, r3
 8004462:	3740      	adds	r7, #64	; 0x40
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	00f42400 	.word	0x00f42400
 8004474:	017d7840 	.word	0x017d7840

08004478 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000000 	.word	0x20000000

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004494:	f7ff fff0 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0a9b      	lsrs	r3, r3, #10
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4903      	ldr	r1, [pc, #12]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	0800deec 	.word	0x0800deec

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044bc:	f7ff ffdc 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0b5b      	lsrs	r3, r3, #13
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	0800deec 	.word	0x0800deec

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d012      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004508:	4b69      	ldr	r3, [pc, #420]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a68      	ldr	r2, [pc, #416]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004512:	6093      	str	r3, [r2, #8]
 8004514:	4b66      	ldr	r3, [pc, #408]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	4964      	ldr	r1, [pc, #400]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d017      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800453a:	4b5d      	ldr	r3, [pc, #372]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	4959      	ldr	r1, [pc, #356]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004558:	d101      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d017      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004576:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800457c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	494a      	ldr	r1, [pc, #296]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 808b 	beq.w	80046da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	4a39      	ldr	r2, [pc, #228]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6413      	str	r3, [r2, #64]	; 0x40
 80045d0:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045dc:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a34      	ldr	r2, [pc, #208]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e8:	f7fd fc20 	bl	8001e2c <HAL_GetTick>
 80045ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f0:	f7fd fc1c 	bl	8001e2c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	; 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e357      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004602:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d035      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d02e      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004634:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004642:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004654:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	d114      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fd fbe4 	bl	8001e2c <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fd fbe0 	bl	8001e2c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e319      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ee      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004696:	d111      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	4901      	ldr	r1, [pc, #4]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
 80046ae:	e00b      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40007000 	.word	0x40007000
 80046b8:	0ffffcff 	.word	0x0ffffcff
 80046bc:	4baa      	ldr	r3, [pc, #680]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4aa9      	ldr	r2, [pc, #676]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046c6:	6093      	str	r3, [r2, #8]
 80046c8:	4ba7      	ldr	r3, [pc, #668]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d4:	49a4      	ldr	r1, [pc, #656]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046e6:	4ba0      	ldr	r3, [pc, #640]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ec:	4a9e      	ldr	r2, [pc, #632]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046f6:	4b9c      	ldr	r3, [pc, #624]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	4999      	ldr	r1, [pc, #612]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004714:	4b94      	ldr	r3, [pc, #592]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004722:	4991      	ldr	r1, [pc, #580]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004736:	4b8c      	ldr	r3, [pc, #560]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004744:	4988      	ldr	r1, [pc, #544]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004758:	4b83      	ldr	r3, [pc, #524]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	4980      	ldr	r1, [pc, #512]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4977      	ldr	r1, [pc, #476]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479c:	4b72      	ldr	r3, [pc, #456]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	496f      	ldr	r1, [pc, #444]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047be:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f023 020c 	bic.w	r2, r3, #12
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047cc:	4966      	ldr	r1, [pc, #408]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	495e      	ldr	r1, [pc, #376]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004802:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	4955      	ldr	r1, [pc, #340]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004846:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	4944      	ldr	r1, [pc, #272]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	493c      	ldr	r1, [pc, #240]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	4933      	ldr	r1, [pc, #204]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ba:	492b      	ldr	r1, [pc, #172]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d011      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048dc:	4922      	ldr	r1, [pc, #136]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ec:	d101      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048fe:	2301      	movs	r3, #1
 8004900:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491c:	4912      	ldr	r1, [pc, #72]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004940:	4909      	ldr	r1, [pc, #36]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d006      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80d9 	beq.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800495c:	4b02      	ldr	r3, [pc, #8]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a01      	ldr	r2, [pc, #4]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004962:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004966:	e001      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004968:	40023800 	.word	0x40023800
 800496c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496e:	f7fd fa5d 	bl	8001e2c <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004976:	f7fd fa59 	bl	8001e2c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b64      	cmp	r3, #100	; 0x64
 8004982:	d901      	bls.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e194      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004988:	4b6c      	ldr	r3, [pc, #432]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f0      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d021      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d11d      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a8:	4b64      	ldr	r3, [pc, #400]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049b6:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	019a      	lsls	r2, r3, #6
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	431a      	orrs	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	071b      	lsls	r3, r3, #28
 80049dc:	4957      	ldr	r1, [pc, #348]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02e      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0e:	d129      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a10:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a1e:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a24:	0f1b      	lsrs	r3, r3, #28
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	019a      	lsls	r2, r3, #6
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	061b      	lsls	r3, r3, #24
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	071b      	lsls	r3, r3, #28
 8004a44:	493d      	ldr	r1, [pc, #244]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a4c:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a52:	f023 021f 	bic.w	r2, r3, #31
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4937      	ldr	r1, [pc, #220]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01d      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a70:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a76:	0e1b      	lsrs	r3, r3, #24
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a84:	0f1b      	lsrs	r3, r3, #28
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	019a      	lsls	r2, r3, #6
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	071b      	lsls	r3, r3, #28
 8004aa4:	4925      	ldr	r1, [pc, #148]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d011      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	019a      	lsls	r2, r3, #6
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	071b      	lsls	r3, r3, #28
 8004ad4:	4919      	ldr	r1, [pc, #100]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004adc:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae8:	f7fd f9a0 	bl	8001e2c <HAL_GetTick>
 8004aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004af0:	f7fd f99c 	bl	8001e2c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e0d7      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 80cd 	bne.w	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b22:	f7fd f983 	bl	8001e2c <HAL_GetTick>
 8004b26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b2a:	f7fd f97f 	bl	8001e2c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d903      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0ba      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b40:	4b5e      	ldr	r3, [pc, #376]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4c:	d0ed      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02e      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d12a      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b76:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b84:	4b4d      	ldr	r3, [pc, #308]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	0f1b      	lsrs	r3, r3, #28
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	019a      	lsls	r2, r3, #6
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	4944      	ldr	r1, [pc, #272]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bb2:	4b42      	ldr	r3, [pc, #264]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	493d      	ldr	r1, [pc, #244]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d022      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be0:	d11d      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004be2:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	0e1b      	lsrs	r3, r3, #24
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	0f1b      	lsrs	r3, r3, #28
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	019a      	lsls	r2, r3, #6
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	071b      	lsls	r3, r3, #28
 8004c16:	4929      	ldr	r1, [pc, #164]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d028      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c38:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	019a      	lsls	r2, r3, #6
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	431a      	orrs	r2, r3
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	071b      	lsls	r3, r3, #28
 8004c5e:	4917      	ldr	r1, [pc, #92]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4911      	ldr	r1, [pc, #68]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c88:	f7fd f8d0 	bl	8001e2c <HAL_GetTick>
 8004c8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c90:	f7fd f8cc 	bl	8001e2c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	; 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e007      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cae:	d1ef      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800

08004cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e040      	b.n	8004d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc fc2c 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fc66 	bl	80055d0 <UART_SetConfig>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e022      	b.n	8004d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 febe 	bl	8005a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 ff45 	bl	8005bdc <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d171      	bne.n	8004e58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Transmit+0x24>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e06a      	b.n	8004e5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2221      	movs	r2, #33	; 0x21
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d92:	f7fd f84b 	bl	8001e2c <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db0:	d108      	bne.n	8004dc4 <HAL_UART_Transmit+0x68>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e003      	b.n	8004dcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dcc:	e02c      	b.n	8004e28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 ff36 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e038      	b.n	8004e5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	3302      	adds	r3, #2
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e007      	b.n	8004e16 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	3301      	adds	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1cc      	bne.n	8004dce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 ff03 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e005      	b.n	8004e5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af02      	add	r7, sp, #8
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	f040 80b1 	bne.w	8004fe0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_Receive+0x28>
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e0a9      	b.n	8004fe2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2222      	movs	r2, #34	; 0x22
 8004e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ea4:	f7fc ffc2 	bl	8001e2c <HAL_GetTick>
 8004ea8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_UART_Receive+0x80>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_UART_Receive+0x76>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ed6:	e02d      	b.n	8004f34 <HAL_UART_Receive+0xd2>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ee0:	e028      	b.n	8004f34 <HAL_UART_Receive+0xd2>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10d      	bne.n	8004f06 <HAL_UART_Receive+0xa4>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Receive+0x9a>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	22ff      	movs	r2, #255	; 0xff
 8004ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004efa:	e01b      	b.n	8004f34 <HAL_UART_Receive+0xd2>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	227f      	movs	r2, #127	; 0x7f
 8004f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f04:	e016      	b.n	8004f34 <HAL_UART_Receive+0xd2>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0e:	d10d      	bne.n	8004f2c <HAL_UART_Receive+0xca>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_UART_Receive+0xc0>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	227f      	movs	r2, #127	; 0x7f
 8004f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f20:	e008      	b.n	8004f34 <HAL_UART_Receive+0xd2>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	223f      	movs	r2, #63	; 0x3f
 8004f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f2a:	e003      	b.n	8004f34 <HAL_UART_Receive+0xd2>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f44:	d108      	bne.n	8004f58 <HAL_UART_Receive+0xf6>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e003      	b.n	8004f60 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f60:	e032      	b.n	8004fc8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 fe6c 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e032      	b.n	8004fe2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10c      	bne.n	8004f9c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	8a7b      	ldrh	r3, [r7, #18]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	3302      	adds	r3, #2
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e00c      	b.n	8004fb6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	8a7b      	ldrh	r3, [r7, #18]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1c6      	bne.n	8004f62 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0ba      	sub	sp, #232	; 0xe8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005016:	f640 030f 	movw	r3, #2063	; 0x80f
 800501a:	4013      	ands	r3, r2
 800501c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d115      	bne.n	8005054 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00f      	beq.n	8005054 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8297 	beq.w	8005578 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4798      	blx	r3
      }
      return;
 8005052:	e291      	b.n	8005578 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8117 	beq.w	800528c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800505e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800506a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800506e:	4b85      	ldr	r3, [pc, #532]	; (8005284 <HAL_UART_IRQHandler+0x298>)
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 810a 	beq.w	800528c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d011      	beq.n	80050a8 <HAL_UART_IRQHandler+0xbc>
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00b      	beq.n	80050a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d011      	beq.n	80050d8 <HAL_UART_IRQHandler+0xec>
 80050b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2202      	movs	r2, #2
 80050c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ce:	f043 0204 	orr.w	r2, r3, #4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d011      	beq.n	8005108 <HAL_UART_IRQHandler+0x11c>
 80050e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2204      	movs	r2, #4
 80050f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fe:	f043 0202 	orr.w	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005124:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00b      	beq.n	8005144 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2208      	movs	r2, #8
 8005132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513a:	f043 0208 	orr.w	r2, r3, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <HAL_UART_IRQHandler+0x18a>
 8005150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00c      	beq.n	8005176 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 81fd 	beq.w	800557c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d04f      	beq.n	800526e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fe01 	bl	8005dd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d141      	bne.n	8005266 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3308      	adds	r3, #8
 80051e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800520e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800521a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1d9      	bne.n	80051e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	2b00      	cmp	r3, #0
 8005234:	d013      	beq.n	800525e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <HAL_UART_IRQHandler+0x29c>)
 800523c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005242:	4618      	mov	r0, r3
 8005244:	f7fc ffa3 	bl	800218e <HAL_DMA_Abort_IT>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005258:	4610      	mov	r0, r2
 800525a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	e00f      	b.n	800527e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9a0 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	e00b      	b.n	800527e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f99c 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	e007      	b.n	800527e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f998 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800527c:	e17e      	b.n	800557c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527e:	bf00      	nop
    return;
 8005280:	e17c      	b.n	800557c <HAL_UART_IRQHandler+0x590>
 8005282:	bf00      	nop
 8005284:	04000120 	.word	0x04000120
 8005288:	08005e9f 	.word	0x08005e9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	2b01      	cmp	r3, #1
 8005292:	f040 814c 	bne.w	800552e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8145 	beq.w	800552e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 813e 	beq.w	800552e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	f040 80b6 	bne.w	8005436 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8150 	beq.w	8005580 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ea:	429a      	cmp	r2, r3
 80052ec:	f080 8148 	bcs.w	8005580 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	f000 8086 	beq.w	8005414 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800531c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005336:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800533e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800534a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1da      	bne.n	8005308 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3308      	adds	r3, #8
 8005358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3308      	adds	r3, #8
 8005372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800537a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800537e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e1      	bne.n	8005352 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800539e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e3      	bne.n	800538e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e4:	f023 0310 	bic.w	r3, r3, #16
 80053e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80053f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e4      	bne.n	80053d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540e:	4618      	mov	r0, r3
 8005410:	f7fc fe4d 	bl	80020ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005426:	b29b      	uxth	r3, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	b29b      	uxth	r3, r3
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8c2 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005434:	e0a4      	b.n	8005580 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005442:	b29b      	uxth	r3, r3
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8096 	beq.w	8005584 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8091 	beq.w	8005584 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
 8005486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800548a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e4      	bne.n	8005462 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	623b      	str	r3, [r7, #32]
   return(result);
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054bc:	633a      	str	r2, [r7, #48]	; 0x30
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e3      	bne.n	8005498 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f023 0310 	bic.w	r3, r3, #16
 80054f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	617b      	str	r3, [r7, #20]
   return(result);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e4      	bne.n	80054e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f846 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800552c:	e02a      	b.n	8005584 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01c      	beq.n	8005588 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
    }
    return;
 8005556:	e017      	b.n	8005588 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d012      	beq.n	800558a <HAL_UART_IRQHandler+0x59e>
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00c      	beq.n	800558a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fcaa 	bl	8005eca <UART_EndTransmit_IT>
    return;
 8005576:	e008      	b.n	800558a <HAL_UART_IRQHandler+0x59e>
      return;
 8005578:	bf00      	nop
 800557a:	e006      	b.n	800558a <HAL_UART_IRQHandler+0x59e>
    return;
 800557c:	bf00      	nop
 800557e:	e004      	b.n	800558a <HAL_UART_IRQHandler+0x59e>
      return;
 8005580:	bf00      	nop
 8005582:	e002      	b.n	800558a <HAL_UART_IRQHandler+0x59e>
      return;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <HAL_UART_IRQHandler+0x59e>
    return;
 8005588:	bf00      	nop
  }

}
 800558a:	37e8      	adds	r7, #232	; 0xe8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4ba6      	ldr	r3, [pc, #664]	; (8005894 <UART_SetConfig+0x2c4>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	430b      	orrs	r3, r1
 8005606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	430a      	orrs	r2, r1
 8005640:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a94      	ldr	r2, [pc, #592]	; (8005898 <UART_SetConfig+0x2c8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d120      	bne.n	800568e <UART_SetConfig+0xbe>
 800564c:	4b93      	ldr	r3, [pc, #588]	; (800589c <UART_SetConfig+0x2cc>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b03      	cmp	r3, #3
 8005658:	d816      	bhi.n	8005688 <UART_SetConfig+0xb8>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <UART_SetConfig+0x90>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005671 	.word	0x08005671
 8005664:	0800567d 	.word	0x0800567d
 8005668:	08005677 	.word	0x08005677
 800566c:	08005683 	.word	0x08005683
 8005670:	2301      	movs	r3, #1
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e150      	b.n	8005918 <UART_SetConfig+0x348>
 8005676:	2302      	movs	r3, #2
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e14d      	b.n	8005918 <UART_SetConfig+0x348>
 800567c:	2304      	movs	r3, #4
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e14a      	b.n	8005918 <UART_SetConfig+0x348>
 8005682:	2308      	movs	r3, #8
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e147      	b.n	8005918 <UART_SetConfig+0x348>
 8005688:	2310      	movs	r3, #16
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e144      	b.n	8005918 <UART_SetConfig+0x348>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a83      	ldr	r2, [pc, #524]	; (80058a0 <UART_SetConfig+0x2d0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d132      	bne.n	80056fe <UART_SetConfig+0x12e>
 8005698:	4b80      	ldr	r3, [pc, #512]	; (800589c <UART_SetConfig+0x2cc>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d828      	bhi.n	80056f8 <UART_SetConfig+0x128>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0xdc>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	080056f9 	.word	0x080056f9
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	080056ed 	.word	0x080056ed
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	080056f9 	.word	0x080056f9
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	080056e7 	.word	0x080056e7
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	080056f9 	.word	0x080056f9
 80056dc:	080056f3 	.word	0x080056f3
 80056e0:	2300      	movs	r3, #0
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e118      	b.n	8005918 <UART_SetConfig+0x348>
 80056e6:	2302      	movs	r3, #2
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e115      	b.n	8005918 <UART_SetConfig+0x348>
 80056ec:	2304      	movs	r3, #4
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e112      	b.n	8005918 <UART_SetConfig+0x348>
 80056f2:	2308      	movs	r3, #8
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e10f      	b.n	8005918 <UART_SetConfig+0x348>
 80056f8:	2310      	movs	r3, #16
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e10c      	b.n	8005918 <UART_SetConfig+0x348>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a68      	ldr	r2, [pc, #416]	; (80058a4 <UART_SetConfig+0x2d4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d120      	bne.n	800574a <UART_SetConfig+0x17a>
 8005708:	4b64      	ldr	r3, [pc, #400]	; (800589c <UART_SetConfig+0x2cc>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005712:	2b30      	cmp	r3, #48	; 0x30
 8005714:	d013      	beq.n	800573e <UART_SetConfig+0x16e>
 8005716:	2b30      	cmp	r3, #48	; 0x30
 8005718:	d814      	bhi.n	8005744 <UART_SetConfig+0x174>
 800571a:	2b20      	cmp	r3, #32
 800571c:	d009      	beq.n	8005732 <UART_SetConfig+0x162>
 800571e:	2b20      	cmp	r3, #32
 8005720:	d810      	bhi.n	8005744 <UART_SetConfig+0x174>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <UART_SetConfig+0x15c>
 8005726:	2b10      	cmp	r3, #16
 8005728:	d006      	beq.n	8005738 <UART_SetConfig+0x168>
 800572a:	e00b      	b.n	8005744 <UART_SetConfig+0x174>
 800572c:	2300      	movs	r3, #0
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e0f2      	b.n	8005918 <UART_SetConfig+0x348>
 8005732:	2302      	movs	r3, #2
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e0ef      	b.n	8005918 <UART_SetConfig+0x348>
 8005738:	2304      	movs	r3, #4
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e0ec      	b.n	8005918 <UART_SetConfig+0x348>
 800573e:	2308      	movs	r3, #8
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e0e9      	b.n	8005918 <UART_SetConfig+0x348>
 8005744:	2310      	movs	r3, #16
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e0e6      	b.n	8005918 <UART_SetConfig+0x348>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a56      	ldr	r2, [pc, #344]	; (80058a8 <UART_SetConfig+0x2d8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d120      	bne.n	8005796 <UART_SetConfig+0x1c6>
 8005754:	4b51      	ldr	r3, [pc, #324]	; (800589c <UART_SetConfig+0x2cc>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800575e:	2bc0      	cmp	r3, #192	; 0xc0
 8005760:	d013      	beq.n	800578a <UART_SetConfig+0x1ba>
 8005762:	2bc0      	cmp	r3, #192	; 0xc0
 8005764:	d814      	bhi.n	8005790 <UART_SetConfig+0x1c0>
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d009      	beq.n	800577e <UART_SetConfig+0x1ae>
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d810      	bhi.n	8005790 <UART_SetConfig+0x1c0>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <UART_SetConfig+0x1a8>
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d006      	beq.n	8005784 <UART_SetConfig+0x1b4>
 8005776:	e00b      	b.n	8005790 <UART_SetConfig+0x1c0>
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e0cc      	b.n	8005918 <UART_SetConfig+0x348>
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e0c9      	b.n	8005918 <UART_SetConfig+0x348>
 8005784:	2304      	movs	r3, #4
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e0c6      	b.n	8005918 <UART_SetConfig+0x348>
 800578a:	2308      	movs	r3, #8
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e0c3      	b.n	8005918 <UART_SetConfig+0x348>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e0c0      	b.n	8005918 <UART_SetConfig+0x348>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a44      	ldr	r2, [pc, #272]	; (80058ac <UART_SetConfig+0x2dc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d125      	bne.n	80057ec <UART_SetConfig+0x21c>
 80057a0:	4b3e      	ldr	r3, [pc, #248]	; (800589c <UART_SetConfig+0x2cc>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ae:	d017      	beq.n	80057e0 <UART_SetConfig+0x210>
 80057b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b4:	d817      	bhi.n	80057e6 <UART_SetConfig+0x216>
 80057b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ba:	d00b      	beq.n	80057d4 <UART_SetConfig+0x204>
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c0:	d811      	bhi.n	80057e6 <UART_SetConfig+0x216>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <UART_SetConfig+0x1fe>
 80057c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ca:	d006      	beq.n	80057da <UART_SetConfig+0x20a>
 80057cc:	e00b      	b.n	80057e6 <UART_SetConfig+0x216>
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e0a1      	b.n	8005918 <UART_SetConfig+0x348>
 80057d4:	2302      	movs	r3, #2
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e09e      	b.n	8005918 <UART_SetConfig+0x348>
 80057da:	2304      	movs	r3, #4
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e09b      	b.n	8005918 <UART_SetConfig+0x348>
 80057e0:	2308      	movs	r3, #8
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e098      	b.n	8005918 <UART_SetConfig+0x348>
 80057e6:	2310      	movs	r3, #16
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e095      	b.n	8005918 <UART_SetConfig+0x348>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <UART_SetConfig+0x2e0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d125      	bne.n	8005842 <UART_SetConfig+0x272>
 80057f6:	4b29      	ldr	r3, [pc, #164]	; (800589c <UART_SetConfig+0x2cc>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005804:	d017      	beq.n	8005836 <UART_SetConfig+0x266>
 8005806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800580a:	d817      	bhi.n	800583c <UART_SetConfig+0x26c>
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005810:	d00b      	beq.n	800582a <UART_SetConfig+0x25a>
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d811      	bhi.n	800583c <UART_SetConfig+0x26c>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <UART_SetConfig+0x254>
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d006      	beq.n	8005830 <UART_SetConfig+0x260>
 8005822:	e00b      	b.n	800583c <UART_SetConfig+0x26c>
 8005824:	2301      	movs	r3, #1
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e076      	b.n	8005918 <UART_SetConfig+0x348>
 800582a:	2302      	movs	r3, #2
 800582c:	77fb      	strb	r3, [r7, #31]
 800582e:	e073      	b.n	8005918 <UART_SetConfig+0x348>
 8005830:	2304      	movs	r3, #4
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e070      	b.n	8005918 <UART_SetConfig+0x348>
 8005836:	2308      	movs	r3, #8
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e06d      	b.n	8005918 <UART_SetConfig+0x348>
 800583c:	2310      	movs	r3, #16
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e06a      	b.n	8005918 <UART_SetConfig+0x348>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <UART_SetConfig+0x2e4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d138      	bne.n	80058be <UART_SetConfig+0x2ee>
 800584c:	4b13      	ldr	r3, [pc, #76]	; (800589c <UART_SetConfig+0x2cc>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005856:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800585a:	d017      	beq.n	800588c <UART_SetConfig+0x2bc>
 800585c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005860:	d82a      	bhi.n	80058b8 <UART_SetConfig+0x2e8>
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	d00b      	beq.n	8005880 <UART_SetConfig+0x2b0>
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586c:	d824      	bhi.n	80058b8 <UART_SetConfig+0x2e8>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <UART_SetConfig+0x2aa>
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d006      	beq.n	8005886 <UART_SetConfig+0x2b6>
 8005878:	e01e      	b.n	80058b8 <UART_SetConfig+0x2e8>
 800587a:	2300      	movs	r3, #0
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e04b      	b.n	8005918 <UART_SetConfig+0x348>
 8005880:	2302      	movs	r3, #2
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e048      	b.n	8005918 <UART_SetConfig+0x348>
 8005886:	2304      	movs	r3, #4
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e045      	b.n	8005918 <UART_SetConfig+0x348>
 800588c:	2308      	movs	r3, #8
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e042      	b.n	8005918 <UART_SetConfig+0x348>
 8005892:	bf00      	nop
 8005894:	efff69f3 	.word	0xefff69f3
 8005898:	40011000 	.word	0x40011000
 800589c:	40023800 	.word	0x40023800
 80058a0:	40004400 	.word	0x40004400
 80058a4:	40004800 	.word	0x40004800
 80058a8:	40004c00 	.word	0x40004c00
 80058ac:	40005000 	.word	0x40005000
 80058b0:	40011400 	.word	0x40011400
 80058b4:	40007800 	.word	0x40007800
 80058b8:	2310      	movs	r3, #16
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e02c      	b.n	8005918 <UART_SetConfig+0x348>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <UART_SetConfig+0x4bc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d125      	bne.n	8005914 <UART_SetConfig+0x344>
 80058c8:	4b71      	ldr	r3, [pc, #452]	; (8005a90 <UART_SetConfig+0x4c0>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058d6:	d017      	beq.n	8005908 <UART_SetConfig+0x338>
 80058d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058dc:	d817      	bhi.n	800590e <UART_SetConfig+0x33e>
 80058de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e2:	d00b      	beq.n	80058fc <UART_SetConfig+0x32c>
 80058e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e8:	d811      	bhi.n	800590e <UART_SetConfig+0x33e>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <UART_SetConfig+0x326>
 80058ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f2:	d006      	beq.n	8005902 <UART_SetConfig+0x332>
 80058f4:	e00b      	b.n	800590e <UART_SetConfig+0x33e>
 80058f6:	2300      	movs	r3, #0
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e00d      	b.n	8005918 <UART_SetConfig+0x348>
 80058fc:	2302      	movs	r3, #2
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e00a      	b.n	8005918 <UART_SetConfig+0x348>
 8005902:	2304      	movs	r3, #4
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e007      	b.n	8005918 <UART_SetConfig+0x348>
 8005908:	2308      	movs	r3, #8
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e004      	b.n	8005918 <UART_SetConfig+0x348>
 800590e:	2310      	movs	r3, #16
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e001      	b.n	8005918 <UART_SetConfig+0x348>
 8005914:	2310      	movs	r3, #16
 8005916:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005920:	d15b      	bne.n	80059da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005922:	7ffb      	ldrb	r3, [r7, #31]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d828      	bhi.n	800597a <UART_SetConfig+0x3aa>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x360>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005965 	.word	0x08005965
 800593c:	0800597b 	.word	0x0800597b
 8005940:	0800596b 	.word	0x0800596b
 8005944:	0800597b 	.word	0x0800597b
 8005948:	0800597b 	.word	0x0800597b
 800594c:	0800597b 	.word	0x0800597b
 8005950:	08005973 	.word	0x08005973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe fd9c 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8005958:	61b8      	str	r0, [r7, #24]
        break;
 800595a:	e013      	b.n	8005984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7fe fdac 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 8005960:	61b8      	str	r0, [r7, #24]
        break;
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005964:	4b4b      	ldr	r3, [pc, #300]	; (8005a94 <UART_SetConfig+0x4c4>)
 8005966:	61bb      	str	r3, [r7, #24]
        break;
 8005968:	e00c      	b.n	8005984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe fcbf 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 800596e:	61b8      	str	r0, [r7, #24]
        break;
 8005970:	e008      	b.n	8005984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	61bb      	str	r3, [r7, #24]
        break;
 8005978:	e004      	b.n	8005984 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	77bb      	strb	r3, [r7, #30]
        break;
 8005982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d074      	beq.n	8005a74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	005a      	lsls	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d916      	bls.n	80059d4 <UART_SetConfig+0x404>
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ac:	d212      	bcs.n	80059d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f023 030f 	bic.w	r3, r3, #15
 80059b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	89fb      	ldrh	r3, [r7, #14]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	89fa      	ldrh	r2, [r7, #14]
 80059d0:	60da      	str	r2, [r3, #12]
 80059d2:	e04f      	b.n	8005a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	77bb      	strb	r3, [r7, #30]
 80059d8:	e04c      	b.n	8005a74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059da:	7ffb      	ldrb	r3, [r7, #31]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d828      	bhi.n	8005a32 <UART_SetConfig+0x462>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x418>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe fd40 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8005a10:	61b8      	str	r0, [r7, #24]
        break;
 8005a12:	e013      	b.n	8005a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe fd50 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 8005a18:	61b8      	str	r0, [r7, #24]
        break;
 8005a1a:	e00f      	b.n	8005a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <UART_SetConfig+0x4c4>)
 8005a1e:	61bb      	str	r3, [r7, #24]
        break;
 8005a20:	e00c      	b.n	8005a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe fc63 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 8005a26:	61b8      	str	r0, [r7, #24]
        break;
 8005a28:	e008      	b.n	8005a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	61bb      	str	r3, [r7, #24]
        break;
 8005a30:	e004      	b.n	8005a3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	77bb      	strb	r3, [r7, #30]
        break;
 8005a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d018      	beq.n	8005a74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085a      	lsrs	r2, r3, #1
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	441a      	add	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d909      	bls.n	8005a70 <UART_SetConfig+0x4a0>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a62:	d205      	bcs.n	8005a70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	e001      	b.n	8005a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40007c00 	.word	0x40007c00
 8005a90:	40023800 	.word	0x40023800
 8005a94:	00f42400 	.word	0x00f42400

08005a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01a      	beq.n	8005bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b96:	d10a      	bne.n	8005bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bec:	f7fc f91e 	bl	8001e2c <HAL_GetTick>
 8005bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d10e      	bne.n	8005c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f81b 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e011      	b.n	8005c42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b09c      	sub	sp, #112	; 0x70
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5a:	e0a7      	b.n	8005dac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	f000 80a3 	beq.w	8005dac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fc f8e1 	bl	8001e2c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d13f      	bne.n	8005cfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c90:	667b      	str	r3, [r7, #100]	; 0x64
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cce:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e068      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d050      	beq.n	8005dac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d18:	d148      	bne.n	8005dac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
 8005d44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	613b      	str	r3, [r7, #16]
   return(result);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d76:	623a      	str	r2, [r7, #32]
 8005d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	69f9      	ldr	r1, [r7, #28]
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e010      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f43f af48 	beq.w	8005c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3770      	adds	r7, #112	; 0x70
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b095      	sub	sp, #84	; 0x54
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3308      	adds	r3, #8
 8005e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d118      	bne.n	8005e7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	647b      	str	r3, [r7, #68]	; 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6979      	ldr	r1, [r7, #20]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	613b      	str	r3, [r7, #16]
   return(result);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e6      	bne.n	8005e4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e92:	bf00      	nop
 8005e94:	3754      	adds	r7, #84	; 0x54
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff fb71 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b088      	sub	sp, #32
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6979      	ldr	r1, [r7, #20]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	613b      	str	r3, [r7, #16]
   return(result);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e6      	bne.n	8005ed2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fb3d 	bl	8005590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f16:	bf00      	nop
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 fce1 	bl	80078f6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005f44:	b5b0      	push	{r4, r5, r7, lr}
 8005f46:	b096      	sub	sp, #88	; 0x58
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005f52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d107      	bne.n	8005f6a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2188      	movs	r1, #136	; 0x88
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f004 feda 	bl	800ad18 <VL53L0X_WrByte>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f78:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f82:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a9e      	ldr	r2, [pc, #632]	; (8006204 <VL53L0X_DataInit+0x2c0>)
 8005f8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a9d      	ldr	r2, [pc, #628]	; (8006208 <VL53L0X_DataInit+0x2c4>)
 8005f92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005f9c:	f107 0310 	add.w	r3, r7, #16
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fac2 	bl	800652c <VL53L0X_GetDeviceParameters>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005fae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d112      	bne.n	8005fdc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f103 0410 	add.w	r4, r3, #16
 8005fc4:	f107 0510 	add.w	r5, r7, #16
 8005fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2264      	movs	r2, #100	; 0x64
 8005fe0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005fea:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ff4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005ffe:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800600a:	2201      	movs	r2, #1
 800600c:	2180      	movs	r1, #128	; 0x80
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f004 fe82 	bl	800ad18 <VL53L0X_WrByte>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800601c:	4313      	orrs	r3, r2
 800601e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006022:	2201      	movs	r2, #1
 8006024:	21ff      	movs	r1, #255	; 0xff
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f004 fe76 	bl	800ad18 <VL53L0X_WrByte>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006034:	4313      	orrs	r3, r2
 8006036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800603a:	2200      	movs	r2, #0
 800603c:	2100      	movs	r1, #0
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f004 fe6a 	bl	800ad18 <VL53L0X_WrByte>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800604c:	4313      	orrs	r3, r2
 800604e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006052:	f107 030f 	add.w	r3, r7, #15
 8006056:	461a      	mov	r2, r3
 8006058:	2191      	movs	r1, #145	; 0x91
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f004 fede 	bl	800ae1c <VL53L0X_RdByte>
 8006060:	4603      	mov	r3, r0
 8006062:	461a      	mov	r2, r3
 8006064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006068:	4313      	orrs	r3, r2
 800606a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800606e:	7bfa      	ldrb	r2, [r7, #15]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006076:	2201      	movs	r2, #1
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f004 fe4c 	bl	800ad18 <VL53L0X_WrByte>
 8006080:	4603      	mov	r3, r0
 8006082:	461a      	mov	r2, r3
 8006084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006088:	4313      	orrs	r3, r2
 800608a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800608e:	2200      	movs	r2, #0
 8006090:	21ff      	movs	r1, #255	; 0xff
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f004 fe40 	bl	800ad18 <VL53L0X_WrByte>
 8006098:	4603      	mov	r3, r0
 800609a:	461a      	mov	r2, r3
 800609c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f004 fe34 	bl	800ad18 <VL53L0X_WrByte>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80060be:	2300      	movs	r3, #0
 80060c0:	653b      	str	r3, [r7, #80]	; 0x50
 80060c2:	e014      	b.n	80060ee <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80060c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d114      	bne.n	80060f6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80060cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2201      	movs	r2, #1
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fd35 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
 80060da:	4603      	mov	r3, r0
 80060dc:	461a      	mov	r2, r3
 80060de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80060e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ea:	3301      	adds	r3, #1
 80060ec:	653b      	str	r3, [r7, #80]	; 0x50
 80060ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	dde7      	ble.n	80060c4 <VL53L0X_DataInit+0x180>
 80060f4:	e000      	b.n	80060f8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80060f6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80060f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d107      	bne.n	8006110 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006100:	2200      	movs	r2, #0
 8006102:	2102      	movs	r1, #2
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fd1d 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006110:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006118:	2200      	movs	r2, #0
 800611a:	2103      	movs	r1, #3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fd11 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006128:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800612c:	2b00      	cmp	r3, #0
 800612e:	d107      	bne.n	8006140 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006130:	2200      	movs	r2, #0
 8006132:	2104      	movs	r1, #4
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fd05 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006140:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006144:	2b00      	cmp	r3, #0
 8006146:	d107      	bne.n	8006158 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006148:	2200      	movs	r2, #0
 800614a:	2105      	movs	r1, #5
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fcf9 	bl	8006b44 <VL53L0X_SetLimitCheckEnable>
 8006152:	4603      	mov	r3, r0
 8006154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006158:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006160:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fd9c 	bl	8006ca4 <VL53L0X_SetLimitCheckValue>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006172:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006176:	2b00      	cmp	r3, #0
 8006178:	d108      	bne.n	800618c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800617a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800617e:	2101      	movs	r1, #1
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fd8f 	bl	8006ca4 <VL53L0X_SetLimitCheckValue>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800618c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006194:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006198:	2102      	movs	r1, #2
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fd82 	bl	8006ca4 <VL53L0X_SetLimitCheckValue>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80061ae:	2200      	movs	r2, #0
 80061b0:	2103      	movs	r1, #3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fd76 	bl	8006ca4 <VL53L0X_SetLimitCheckValue>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10f      	bne.n	80061e6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	22ff      	movs	r2, #255	; 0xff
 80061ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	2101      	movs	r1, #1
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f004 fda0 	bl	800ad18 <VL53L0X_WrByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80061e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80061f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3758      	adds	r7, #88	; 0x58
 80061fe:	46bd      	mov	sp, r7
 8006200:	bdb0      	pop	{r4, r5, r7, pc}
 8006202:	bf00      	nop
 8006204:	00016b85 	.word	0x00016b85
 8006208:	000970a4 	.word	0x000970a4

0800620c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800620c:	b5b0      	push	{r4, r5, r7, lr}
 800620e:	b09e      	sub	sp, #120	; 0x78
 8006210:	af02      	add	r7, sp, #8
 8006212:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800621a:	f107 031c 	add.w	r3, r7, #28
 800621e:	2240      	movs	r2, #64	; 0x40
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f004 fee0 	bl	800afe8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006248:	2101      	movs	r1, #1
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f002 faa9 	bl	80087a2 <VL53L0X_get_info_from_device>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800625c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800626c:	2b01      	cmp	r3, #1
 800626e:	d80d      	bhi.n	800628c <VL53L0X_StaticInit+0x80>
 8006270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006274:	2b01      	cmp	r3, #1
 8006276:	d102      	bne.n	800627e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800627a:	2b20      	cmp	r3, #32
 800627c:	d806      	bhi.n	800628c <VL53L0X_StaticInit+0x80>
 800627e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10e      	bne.n	80062a4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d90b      	bls.n	80062a4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800628c:	f107 0218 	add.w	r2, r7, #24
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fd28 	bl	8007cec <VL53L0X_perform_ref_spad_management>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80062a2:	e009      	b.n	80062b8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80062a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a8:	461a      	mov	r2, r3
 80062aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 ff29 	bl	8008104 <VL53L0X_set_reference_spads>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80062b8:	4b94      	ldr	r3, [pc, #592]	; (800650c <VL53L0X_StaticInit+0x300>)
 80062ba:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80062bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10f      	bne.n	80062e4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80062ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80062ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80062dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80062de:	e001      	b.n	80062e4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80062e0:	4b8a      	ldr	r3, [pc, #552]	; (800650c <VL53L0X_StaticInit+0x300>)
 80062e2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80062e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80062ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f003 fdfc 	bl	8009eec <VL53L0X_load_tuning_settings>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80062fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	2304      	movs	r3, #4
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f8f1 	bl	80074f4 <VL53L0X_SetGpioConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006318:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800631c:	2b00      	cmp	r3, #0
 800631e:	d121      	bne.n	8006364 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006320:	2201      	movs	r2, #1
 8006322:	21ff      	movs	r1, #255	; 0xff
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f004 fcf7 	bl	800ad18 <VL53L0X_WrByte>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006330:	f107 031a 	add.w	r3, r7, #26
 8006334:	461a      	mov	r2, r3
 8006336:	2184      	movs	r1, #132	; 0x84
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f004 fd99 	bl	800ae70 <VL53L0X_RdWord>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006346:	4313      	orrs	r3, r2
 8006348:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800634c:	2200      	movs	r2, #0
 800634e:	21ff      	movs	r1, #255	; 0xff
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f004 fce1 	bl	800ad18 <VL53L0X_WrByte>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800635e:	4313      	orrs	r3, r2
 8006360:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006364:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800636c:	8b7b      	ldrh	r3, [r7, #26]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	461a      	mov	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006378:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800637c:	2b00      	cmp	r3, #0
 800637e:	d108      	bne.n	8006392 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006380:	f107 031c 	add.w	r3, r7, #28
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8d0 	bl	800652c <VL53L0X_GetDeviceParameters>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006392:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006396:	2b00      	cmp	r3, #0
 8006398:	d110      	bne.n	80063bc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800639a:	f107 0319 	add.w	r3, r7, #25
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f992 	bl	80066ca <VL53L0X_GetFractionEnable>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80063ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80063b4:	7e7a      	ldrb	r2, [r7, #25]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80063bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10e      	bne.n	80063e2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f103 0410 	add.w	r4, r3, #16
 80063ca:	f107 051c 	add.w	r5, r7, #28
 80063ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80063e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d111      	bne.n	800640e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80063ea:	f107 0319 	add.w	r3, r7, #25
 80063ee:	461a      	mov	r2, r3
 80063f0:	2101      	movs	r1, #1
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f004 fd12 	bl	800ae1c <VL53L0X_RdByte>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80063fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006406:	7e7a      	ldrb	r2, [r7, #25]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800640e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f9ca 	bl	80067b4 <VL53L0X_SetSequenceStepEnable>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006426:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800642e:	2200      	movs	r2, #0
 8006430:	2102      	movs	r1, #2
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9be 	bl	80067b4 <VL53L0X_SetSequenceStepEnable>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800643e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2203      	movs	r2, #3
 800644a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800644e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006456:	f107 0313 	add.w	r3, r7, #19
 800645a:	461a      	mov	r2, r3
 800645c:	2100      	movs	r1, #0
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f990 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800646a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006472:	7cfa      	ldrb	r2, [r7, #19]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800647a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006482:	f107 0313 	add.w	r3, r7, #19
 8006486:	461a      	mov	r2, r3
 8006488:	2101      	movs	r1, #1
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f97a 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 8006490:	4603      	mov	r3, r0
 8006492:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006496:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800649e:	7cfa      	ldrb	r2, [r7, #19]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80064a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80064ae:	f107 030c 	add.w	r3, r7, #12
 80064b2:	461a      	mov	r2, r3
 80064b4:	2103      	movs	r1, #3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 fef4 	bl	80092a4 <get_sequence_step_timeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80064d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80064da:	f107 030c 	add.w	r3, r7, #12
 80064de:	461a      	mov	r2, r3
 80064e0:	2104      	movs	r1, #4
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f002 fede 	bl	80092a4 <get_sequence_step_timeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006502:	4618      	mov	r0, r3
 8006504:	3770      	adds	r7, #112	; 0x70
 8006506:	46bd      	mov	sp, r7
 8006508:	bdb0      	pop	{r4, r5, r7, pc}
 800650a:	bf00      	nop
 800650c:	20000024 	.word	0x20000024

08006510 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006518:	239d      	movs	r3, #157	; 0x9d
 800651a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800651c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8b0 	bl	80066a4 <VL53L0X_GetDeviceMode>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d107      	bne.n	8006560 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	3308      	adds	r3, #8
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa78 	bl	8006a4c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800656e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	3310      	adds	r3, #16
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 faae 	bl	8006ade <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006582:	4603      	mov	r3, r0
 8006584:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d107      	bne.n	800659e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff fcc2 	bl	8005f1e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800659a:	4603      	mov	r3, r0
 800659c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d134      	bne.n	8006610 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80065a6:	2300      	movs	r3, #0
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	e02a      	b.n	8006602 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80065ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d12a      	bne.n	800660a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	b299      	uxth	r1, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3308      	adds	r3, #8
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4413      	add	r3, r2
 80065c2:	3304      	adds	r3, #4
 80065c4:	461a      	mov	r2, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fbce 	bl	8006d68 <VL53L0X_GetLimitCheckValue>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80065d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d117      	bne.n	800660e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	b299      	uxth	r1, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3318      	adds	r3, #24
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	461a      	mov	r2, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb35 	bl	8006c5c <VL53L0X_GetLimitCheckEnable>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3301      	adds	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b05      	cmp	r3, #5
 8006606:	ddd1      	ble.n	80065ac <VL53L0X_GetDeviceParameters+0x80>
 8006608:	e002      	b.n	8006610 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800660e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d107      	bne.n	8006628 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	333c      	adds	r3, #60	; 0x3c
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fc30 	bl	8006e84 <VL53L0X_GetWrapAroundCheckEnable>
 8006624:	4603      	mov	r3, r0
 8006626:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d107      	bne.n	8006640 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f879 	bl	800672e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b15      	cmp	r3, #21
 8006660:	bf8c      	ite	hi
 8006662:	2201      	movhi	r2, #1
 8006664:	2200      	movls	r2, #0
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	2a00      	cmp	r2, #0
 800666a:	d10e      	bne.n	800668a <VL53L0X_SetDeviceMode+0x3e>
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <VL53L0X_SetDeviceMode+0x54>)
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	78fa      	ldrb	r2, [r7, #3]
 8006686:	741a      	strb	r2, [r3, #16]
		break;
 8006688:	e001      	b.n	800668e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800668a:	23f8      	movs	r3, #248	; 0xf8
 800668c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800668e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	0030000b 	.word	0x0030000b

080066a4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7c1a      	ldrb	r2, [r3, #16]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80066ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	2109      	movs	r1, #9
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f004 fb9d 	bl	800ae1c <VL53L0X_RdByte>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80066e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80066fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f003 fa56 	bl	8009bca <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f003 fb23 	bl	8009d8a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
 8006760:	4613      	mov	r3, r2
 8006762:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006768:	78ba      	ldrb	r2, [r7, #2]
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 ff6b 	bl	800964a <VL53L0X_set_vcsel_pulse_period>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	460b      	mov	r3, r1
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006792:	2300      	movs	r3, #0
 8006794:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f003 f9dd 	bl	8009b5c <VL53L0X_get_vcsel_pulse_period>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80067a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
 80067c0:	4613      	mov	r3, r2
 80067c2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067d0:	f107 030f 	add.w	r3, r7, #15
 80067d4:	461a      	mov	r2, r3
 80067d6:	2101      	movs	r1, #1
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f004 fb1f 	bl	800ae1c <VL53L0X_RdByte>
 80067de:	4603      	mov	r3, r0
 80067e0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80067e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d15a      	bne.n	80068a4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80067ee:	78bb      	ldrb	r3, [r7, #2]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d12b      	bne.n	800684c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d825      	bhi.n	8006846 <VL53L0X_SetSequenceStepEnable+0x92>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006815 	.word	0x08006815
 8006804:	0800681f 	.word	0x0800681f
 8006808:	08006829 	.word	0x08006829
 800680c:	08006833 	.word	0x08006833
 8006810:	0800683d 	.word	0x0800683d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006814:	7dbb      	ldrb	r3, [r7, #22]
 8006816:	f043 0310 	orr.w	r3, r3, #16
 800681a:	75bb      	strb	r3, [r7, #22]
				break;
 800681c:	e043      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800681e:	7dbb      	ldrb	r3, [r7, #22]
 8006820:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006824:	75bb      	strb	r3, [r7, #22]
				break;
 8006826:	e03e      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006828:	7dbb      	ldrb	r3, [r7, #22]
 800682a:	f043 0304 	orr.w	r3, r3, #4
 800682e:	75bb      	strb	r3, [r7, #22]
				break;
 8006830:	e039      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006832:	7dbb      	ldrb	r3, [r7, #22]
 8006834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006838:	75bb      	strb	r3, [r7, #22]
				break;
 800683a:	e034      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800683c:	7dbb      	ldrb	r3, [r7, #22]
 800683e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006842:	75bb      	strb	r3, [r7, #22]
				break;
 8006844:	e02f      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006846:	23fc      	movs	r3, #252	; 0xfc
 8006848:	75fb      	strb	r3, [r7, #23]
 800684a:	e02c      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	2b04      	cmp	r3, #4
 8006850:	d825      	bhi.n	800689e <VL53L0X_SetSequenceStepEnable+0xea>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800686d 	.word	0x0800686d
 800685c:	08006877 	.word	0x08006877
 8006860:	08006881 	.word	0x08006881
 8006864:	0800688b 	.word	0x0800688b
 8006868:	08006895 	.word	0x08006895
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800686c:	7dbb      	ldrb	r3, [r7, #22]
 800686e:	f023 0310 	bic.w	r3, r3, #16
 8006872:	75bb      	strb	r3, [r7, #22]
				break;
 8006874:	e017      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006876:	7dbb      	ldrb	r3, [r7, #22]
 8006878:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800687c:	75bb      	strb	r3, [r7, #22]
				break;
 800687e:	e012      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006880:	7dbb      	ldrb	r3, [r7, #22]
 8006882:	f023 0304 	bic.w	r3, r3, #4
 8006886:	75bb      	strb	r3, [r7, #22]
				break;
 8006888:	e00d      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800688a:	7dbb      	ldrb	r3, [r7, #22]
 800688c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006890:	75bb      	strb	r3, [r7, #22]
				break;
 8006892:	e008      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006894:	7dbb      	ldrb	r3, [r7, #22]
 8006896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689a:	75bb      	strb	r3, [r7, #22]
				break;
 800689c:	e003      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800689e:	23fc      	movs	r3, #252	; 0xfc
 80068a0:	75fb      	strb	r3, [r7, #23]
 80068a2:	e000      	b.n	80068a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80068a4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	7dba      	ldrb	r2, [r7, #22]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d01e      	beq.n	80068ec <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80068ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d107      	bne.n	80068c6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80068b6:	7dbb      	ldrb	r3, [r7, #22]
 80068b8:	461a      	mov	r2, r3
 80068ba:	2101      	movs	r1, #1
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f004 fa2b 	bl	800ad18 <VL53L0X_WrByte>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80068c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	7dba      	ldrb	r2, [r7, #22]
 80068d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80068d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80068e4:	6939      	ldr	r1, [r7, #16]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff ff0e 	bl	8006708 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80068ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	72fb      	strb	r3, [r7, #11]
 8006906:	4613      	mov	r3, r2
 8006908:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	2b04      	cmp	r3, #4
 8006918:	d836      	bhi.n	8006988 <sequence_step_enabled+0x90>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <sequence_step_enabled+0x28>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006935 	.word	0x08006935
 8006924:	08006947 	.word	0x08006947
 8006928:	08006959 	.word	0x08006959
 800692c:	0800696b 	.word	0x0800696b
 8006930:	0800697d 	.word	0x0800697d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006934:	7abb      	ldrb	r3, [r7, #10]
 8006936:	111b      	asrs	r3, r3, #4
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	701a      	strb	r2, [r3, #0]
		break;
 8006944:	e022      	b.n	800698c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006946:	7abb      	ldrb	r3, [r7, #10]
 8006948:	10db      	asrs	r3, r3, #3
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	701a      	strb	r2, [r3, #0]
		break;
 8006956:	e019      	b.n	800698c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006958:	7abb      	ldrb	r3, [r7, #10]
 800695a:	109b      	asrs	r3, r3, #2
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	701a      	strb	r2, [r3, #0]
		break;
 8006968:	e010      	b.n	800698c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800696a:	7abb      	ldrb	r3, [r7, #10]
 800696c:	119b      	asrs	r3, r3, #6
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	701a      	strb	r2, [r3, #0]
		break;
 800697a:	e007      	b.n	800698c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800697c:	7abb      	ldrb	r3, [r7, #10]
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	b2da      	uxtb	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	701a      	strb	r2, [r3, #0]
		break;
 8006986:	e001      	b.n	800698c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006988:	23fc      	movs	r3, #252	; 0xfc
 800698a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800698c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006990:	4618      	mov	r0, r3
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80069ae:	f107 030e 	add.w	r3, r7, #14
 80069b2:	461a      	mov	r2, r3
 80069b4:	2101      	movs	r1, #1
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f004 fa30 	bl	800ae1c <VL53L0X_RdByte>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80069c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80069c8:	7bba      	ldrb	r2, [r7, #14]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2100      	movs	r1, #0
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff ff92 	bl	80068f8 <sequence_step_enabled>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80069d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80069e0:	7bba      	ldrb	r2, [r7, #14]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	3302      	adds	r3, #2
 80069e6:	2101      	movs	r1, #1
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff ff85 	bl	80068f8 <sequence_step_enabled>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80069f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d108      	bne.n	8006a0c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80069fa:	7bba      	ldrb	r2, [r7, #14]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	2102      	movs	r1, #2
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff ff78 	bl	80068f8 <sequence_step_enabled>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d108      	bne.n	8006a26 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006a14:	7bba      	ldrb	r2, [r7, #14]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	3303      	adds	r3, #3
 8006a1a:	2103      	movs	r1, #3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ff6b 	bl	80068f8 <sequence_step_enabled>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d108      	bne.n	8006a40 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006a2e:	7bba      	ldrb	r2, [r7, #14]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	3304      	adds	r3, #4
 8006a34:	2104      	movs	r1, #4
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff5e 	bl	80068f8 <sequence_step_enabled>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006a5a:	f107 030c 	add.w	r3, r7, #12
 8006a5e:	461a      	mov	r2, r3
 8006a60:	21f8      	movs	r1, #248	; 0xf8
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f004 fa04 	bl	800ae70 <VL53L0X_RdWord>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d108      	bne.n	8006a86 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f004 fa2f 	bl	800aee0 <VL53L0X_RdDWord>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10c      	bne.n	8006aa8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006a8e:	89bb      	ldrh	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	89ba      	ldrh	r2, [r7, #12]
 8006a98:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7f1b      	ldrb	r3, [r3, #28]
 8006ac6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	7bba      	ldrb	r2, [r7, #14]
 8006acc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006aec:	f107 030e 	add.w	r3, r7, #14
 8006af0:	461a      	mov	r2, r3
 8006af2:	2120      	movs	r1, #32
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f004 f9bb 	bl	800ae70 <VL53L0X_RdWord>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d118      	bne.n	8006b38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006b06:	89fb      	ldrh	r3, [r7, #14]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	771a      	strb	r2, [r3, #28]
 8006b1e:	e00b      	b.n	8006b38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006b20:	89fb      	ldrh	r3, [r7, #14]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	807b      	strh	r3, [r7, #2]
 8006b50:	4613      	mov	r3, r2
 8006b52:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006b64:	887b      	ldrh	r3, [r7, #2]
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d902      	bls.n	8006b70 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b6a:	23fc      	movs	r3, #252	; 0xfc
 8006b6c:	75fb      	strb	r3, [r7, #23]
 8006b6e:	e05b      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006b70:	787b      	ldrb	r3, [r7, #1]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73bb      	strb	r3, [r7, #14]
 8006b82:	e00a      	b.n	8006b9a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b84:	887b      	ldrh	r3, [r7, #2]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d841      	bhi.n	8006c24 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006bc1 	.word	0x08006bc1
 8006bac:	08006bcb 	.word	0x08006bcb
 8006bb0:	08006be1 	.word	0x08006be1
 8006bb4:	08006beb 	.word	0x08006beb
 8006bb8:	08006bf5 	.word	0x08006bf5
 8006bbc:	08006c0d 	.word	0x08006c0d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006bc8:	e02e      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2144      	movs	r1, #68	; 0x44
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f004 f8c3 	bl	800ad60 <VL53L0X_WrWord>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

			break;
 8006bde:	e023      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7bfa      	ldrb	r2, [r7, #15]
 8006be4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006be8:	e01e      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7bfa      	ldrb	r2, [r7, #15]
 8006bee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006bf2:	e019      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	22fe      	movs	r2, #254	; 0xfe
 8006bfe:	2160      	movs	r1, #96	; 0x60
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f004 f8d7 	bl	800adb4 <VL53L0X_UpdateByte>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006c0a:	e00d      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006c12:	7b7b      	ldrb	r3, [r7, #13]
 8006c14:	22ef      	movs	r2, #239	; 0xef
 8006c16:	2160      	movs	r1, #96	; 0x60
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f004 f8cb 	bl	800adb4 <VL53L0X_UpdateByte>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006c22:	e001      	b.n	8006c28 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c24:	23fc      	movs	r3, #252	; 0xfc
 8006c26:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10f      	bne.n	8006c50 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006c30:	787b      	ldrb	r3, [r7, #1]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c36:	887b      	ldrh	r3, [r7, #2]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c42:	e005      	b.n	8006c50 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	460b      	mov	r3, r1
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006c6e:	897b      	ldrh	r3, [r7, #10]
 8006c70:	2b05      	cmp	r3, #5
 8006c72:	d905      	bls.n	8006c80 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c74:	23fc      	movs	r3, #252	; 0xfc
 8006c76:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e008      	b.n	8006c92 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c80:	897b      	ldrh	r3, [r7, #10]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c8a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7dba      	ldrb	r2, [r7, #22]
 8006c90:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	460b      	mov	r3, r1
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006cc2:	7dbb      	ldrb	r3, [r7, #22]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d107      	bne.n	8006cd8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006cc8:	897b      	ldrh	r3, [r7, #10]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	e040      	b.n	8006d5a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006cd8:	897b      	ldrh	r3, [r7, #10]
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d830      	bhi.n	8006d40 <VL53L0X_SetLimitCheckValue+0x9c>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <VL53L0X_SetLimitCheckValue+0x40>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006cfd 	.word	0x08006cfd
 8006ce8:	08006d05 	.word	0x08006d05
 8006cec:	08006d1b 	.word	0x08006d1b
 8006cf0:	08006d23 	.word	0x08006d23
 8006cf4:	08006d2b 	.word	0x08006d2b
 8006cf8:	08006d2b 	.word	0x08006d2b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006d02:	e01f      	b.n	8006d44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2144      	movs	r1, #68	; 0x44
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f004 f826 	bl	800ad60 <VL53L0X_WrWord>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006d18:	e014      	b.n	8006d44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006d20:	e010      	b.n	8006d44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006d28:	e00c      	b.n	8006d44 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	2164      	movs	r1, #100	; 0x64
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f004 f813 	bl	800ad60 <VL53L0X_WrWord>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006d3e:	e001      	b.n	8006d44 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d40:	23fc      	movs	r3, #252	; 0xfc
 8006d42:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d4c:	897b      	ldrh	r3, [r7, #10]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	330c      	adds	r3, #12
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop

08006d68 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	460b      	mov	r3, r1
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006d7e:	897b      	ldrh	r3, [r7, #10]
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	d847      	bhi.n	8006e14 <VL53L0X_GetLimitCheckValue+0xac>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <VL53L0X_GetLimitCheckValue+0x24>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006db1 	.word	0x08006db1
 8006d94:	08006dd7 	.word	0x08006dd7
 8006d98:	08006de3 	.word	0x08006de3
 8006d9c:	08006def 	.word	0x08006def
 8006da0:	08006def 	.word	0x08006def

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	77bb      	strb	r3, [r7, #30]
		break;
 8006dae:	e033      	b.n	8006e18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006db0:	f107 0316 	add.w	r3, r7, #22
 8006db4:	461a      	mov	r2, r3
 8006db6:	2144      	movs	r1, #68	; 0x44
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f004 f859 	bl	800ae70 <VL53L0X_RdWord>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006dca:	8afb      	ldrh	r3, [r7, #22]
 8006dcc:	025b      	lsls	r3, r3, #9
 8006dce:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	77bb      	strb	r3, [r7, #30]
		break;
 8006dd4:	e020      	b.n	8006e18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	77bb      	strb	r3, [r7, #30]
		break;
 8006de0:	e01a      	b.n	8006e18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	77bb      	strb	r3, [r7, #30]
		break;
 8006dec:	e014      	b.n	8006e18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006dee:	f107 0316 	add.w	r3, r7, #22
 8006df2:	461a      	mov	r2, r3
 8006df4:	2164      	movs	r1, #100	; 0x64
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f004 f83a 	bl	800ae70 <VL53L0X_RdWord>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006e00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006e08:	8afb      	ldrh	r3, [r7, #22]
 8006e0a:	025b      	lsls	r3, r3, #9
 8006e0c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77bb      	strb	r3, [r7, #30]
		break;
 8006e12:	e001      	b.n	8006e18 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e14:	23fc      	movs	r3, #252	; 0xfc
 8006e16:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d12a      	bne.n	8006e76 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006e20:	7fbb      	ldrb	r3, [r7, #30]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d124      	bne.n	8006e70 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d110      	bne.n	8006e4e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006e2c:	897b      	ldrh	r3, [r7, #10]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	330c      	adds	r3, #12
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006e40:	897b      	ldrh	r3, [r7, #10]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006e4c:	e013      	b.n	8006e76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006e54:	897b      	ldrh	r3, [r7, #10]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006e62:	897b      	ldrh	r3, [r7, #10]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006e6e:	e002      	b.n	8006e76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e76:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop

08006e84 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006e92:	f107 030e 	add.w	r3, r7, #14
 8006e96:	461a      	mov	r2, r3
 8006e98:	2101      	movs	r1, #1
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f003 ffbe 	bl	800ae1c <VL53L0X_RdByte>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10e      	bne.n	8006eca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006eac:	7bba      	ldrb	r2, [r7, #14]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da03      	bge.n	8006ec4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d104      	bne.n	8006edc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781a      	ldrb	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006ef4:	f107 030e 	add.w	r3, r7, #14
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fbd2 	bl	80066a4 <VL53L0X_GetDeviceMode>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d107      	bne.n	8006f1c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f898 	bl	8007048 <VL53L0X_StartMeasurement>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fb6f 	bl	8008608 <VL53L0X_measurement_poll_for_completion>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2203      	movs	r2, #3
 8006f40:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006f60:	2301      	movs	r3, #1
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f001 fb11 	bl	800858e <VL53L0X_perform_ref_calibration>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006f92:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006f94:	7dbb      	ldrb	r3, [r7, #22]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d005      	beq.n	8006fa6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006f9a:	7dbb      	ldrb	r3, [r7, #22]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d002      	beq.n	8006fa6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006fa0:	7dbb      	ldrb	r3, [r7, #22]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d147      	bne.n	8007036 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006fa6:	f107 030c 	add.w	r3, r7, #12
 8006faa:	f107 0210 	add.w	r2, r7, #16
 8006fae:	2101      	movs	r1, #1
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fbc3 	bl	800773c <VL53L0X_GetInterruptThresholds>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006fc0:	d803      	bhi.n	8006fca <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006fc2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006fc4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006fc8:	d935      	bls.n	8007036 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d131      	bne.n	8007036 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006fd8:	491a      	ldr	r1, [pc, #104]	; (8007044 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 ff86 	bl	8009eec <VL53L0X_load_tuning_settings>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]
 8006fe4:	e027      	b.n	8007036 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	21ff      	movs	r1, #255	; 0xff
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f003 fe94 	bl	800ad18 <VL53L0X_WrByte>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2170      	movs	r1, #112	; 0x70
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f003 fe8a 	bl	800ad18 <VL53L0X_WrByte>
 8007004:	4603      	mov	r3, r0
 8007006:	461a      	mov	r2, r3
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	4313      	orrs	r3, r2
 800700c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800700e:	2200      	movs	r2, #0
 8007010:	21ff      	movs	r1, #255	; 0xff
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f003 fe80 	bl	800ad18 <VL53L0X_WrByte>
 8007018:	4603      	mov	r3, r0
 800701a:	461a      	mov	r2, r3
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	4313      	orrs	r3, r2
 8007020:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007022:	2200      	movs	r2, #0
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f003 fe76 	bl	800ad18 <VL53L0X_WrByte>
 800702c:	4603      	mov	r3, r0
 800702e:	461a      	mov	r2, r3
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	4313      	orrs	r3, r2
 8007034:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007036:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000118 	.word	0x20000118

08007048 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007050:	2300      	movs	r3, #0
 8007052:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007058:	f107 030e 	add.w	r3, r7, #14
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fb20 	bl	80066a4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007064:	2201      	movs	r2, #1
 8007066:	2180      	movs	r1, #128	; 0x80
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f003 fe55 	bl	800ad18 <VL53L0X_WrByte>
 800706e:	4603      	mov	r3, r0
 8007070:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007072:	2201      	movs	r2, #1
 8007074:	21ff      	movs	r1, #255	; 0xff
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f003 fe4e 	bl	800ad18 <VL53L0X_WrByte>
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007080:	2200      	movs	r2, #0
 8007082:	2100      	movs	r1, #0
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f003 fe47 	bl	800ad18 <VL53L0X_WrByte>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007094:	461a      	mov	r2, r3
 8007096:	2191      	movs	r1, #145	; 0x91
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f003 fe3d 	bl	800ad18 <VL53L0X_WrByte>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80070a2:	2201      	movs	r2, #1
 80070a4:	2100      	movs	r1, #0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f003 fe36 	bl	800ad18 <VL53L0X_WrByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80070b0:	2200      	movs	r2, #0
 80070b2:	21ff      	movs	r1, #255	; 0xff
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f003 fe2f 	bl	800ad18 <VL53L0X_WrByte>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80070be:	2200      	movs	r2, #0
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f003 fe28 	bl	800ad18 <VL53L0X_WrByte>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d054      	beq.n	800717c <VL53L0X_StartMeasurement+0x134>
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	dc6c      	bgt.n	80071b0 <VL53L0X_StartMeasurement+0x168>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <VL53L0X_StartMeasurement+0x98>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d034      	beq.n	8007148 <VL53L0X_StartMeasurement+0x100>
 80070de:	e067      	b.n	80071b0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80070e0:	2201      	movs	r2, #1
 80070e2:	2100      	movs	r1, #0
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f003 fe17 	bl	800ad18 <VL53L0X_WrByte>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80070f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d15d      	bne.n	80071b6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007104:	f107 030d 	add.w	r3, r7, #13
 8007108:	461a      	mov	r2, r3
 800710a:	2100      	movs	r1, #0
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f003 fe85 	bl	800ae1c <VL53L0X_RdByte>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3301      	adds	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800711c:	7b7a      	ldrb	r2, [r7, #13]
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	4013      	ands	r3, r2
 8007122:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007124:	7bfa      	ldrb	r2, [r7, #15]
 8007126:	429a      	cmp	r2, r3
 8007128:	d107      	bne.n	800713a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800712a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007138:	d3e1      	bcc.n	80070fe <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007140:	d339      	bcc.n	80071b6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007142:	23f9      	movs	r3, #249	; 0xf9
 8007144:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007146:	e036      	b.n	80071b6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007150:	2101      	movs	r1, #1
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ff12 	bl	8006f7c <VL53L0X_CheckAndLoadInterruptSettings>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800715c:	2202      	movs	r2, #2
 800715e:	2100      	movs	r1, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f003 fdd9 	bl	800ad18 <VL53L0X_WrByte>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800716a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d123      	bne.n	80071ba <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800717a:	e01e      	b.n	80071ba <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800717c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d105      	bne.n	8007190 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007184:	2101      	movs	r1, #1
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fef8 	bl	8006f7c <VL53L0X_CheckAndLoadInterruptSettings>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007190:	2204      	movs	r2, #4
 8007192:	2100      	movs	r1, #0
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f003 fdbf 	bl	800ad18 <VL53L0X_WrByte>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800719e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2204      	movs	r2, #4
 80071aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80071ae:	e006      	b.n	80071be <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80071b0:	23f8      	movs	r3, #248	; 0xf8
 80071b2:	75fb      	strb	r3, [r7, #23]
 80071b4:	e004      	b.n	80071c0 <VL53L0X_StartMeasurement+0x178>
		break;
 80071b6:	bf00      	nop
 80071b8:	e002      	b.n	80071c0 <VL53L0X_StartMeasurement+0x178>
		break;
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <VL53L0X_StartMeasurement+0x178>
		break;
 80071be:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80071c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80071e0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d112      	bne.n	800720e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80071e8:	f107 0308 	add.w	r3, r7, #8
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb1a 	bl	8007828 <VL53L0X_GetInterruptMaskStatus>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d103      	bne.n	8007206 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	e01c      	b.n	8007240 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e018      	b.n	8007240 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800720e:	f107 030d 	add.w	r3, r7, #13
 8007212:	461a      	mov	r2, r3
 8007214:	2114      	movs	r1, #20
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f003 fe00 	bl	800ae1c <VL53L0X_RdByte>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007228:	7b7b      	ldrb	r3, [r7, #13]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	e002      	b.n	8007240 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800724c:	b5b0      	push	{r4, r5, r7, lr}
 800724e:	b096      	sub	sp, #88	; 0x58
 8007250:	af02      	add	r7, sp, #8
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007256:	2300      	movs	r3, #0
 8007258:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800725c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007260:	230c      	movs	r3, #12
 8007262:	2114      	movs	r1, #20
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f003 fd2b 	bl	800acc0 <VL53L0X_ReadMulti>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007270:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 80d1 	bne.w	800741c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007286:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800728a:	b29b      	uxth	r3, r3
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	b29a      	uxth	r2, r3
 8007290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007294:	b29b      	uxth	r3, r3
 8007296:	4413      	add	r3, r2
 8007298:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2200      	movs	r2, #0
 80072a0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80072a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	025b      	lsls	r3, r3, #9
 80072b8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072be:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80072c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	4413      	add	r3, r2
 80072d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80072d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80072da:	025b      	lsls	r3, r3, #9
 80072dc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80072e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80072fe:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007300:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800730e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800731a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800731c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007320:	d046      	beq.n	80073b0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007322:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007324:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007330:	4a57      	ldr	r2, [pc, #348]	; (8007490 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007332:	fb82 1203 	smull	r1, r2, r2, r3
 8007336:	1192      	asrs	r2, r2, #6
 8007338:	17db      	asrs	r3, r3, #31
 800733a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800733c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7f1b      	ldrb	r3, [r3, #28]
 800734a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800734e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007352:	2b00      	cmp	r3, #0
 8007354:	d02c      	beq.n	80073b0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007356:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007358:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800735c:	fb02 f303 	mul.w	r3, r2, r3
 8007360:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007364:	429a      	cmp	r2, r3
 8007366:	d10d      	bne.n	8007384 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007368:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007370:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007374:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007378:	e016      	b.n	80073a8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800737a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800737e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007382:	e011      	b.n	80073a8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007384:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800738a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800738e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007390:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007394:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007398:	121b      	asrs	r3, r3, #8
 800739a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800739c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80073a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80073a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80073ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80073b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00d      	beq.n	80073d4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80073b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073bc:	089b      	lsrs	r3, r3, #2
 80073be:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80073c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	019b      	lsls	r3, r3, #6
 80073cc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	75da      	strb	r2, [r3, #23]
 80073d2:	e006      	b.n	80073e2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80073da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80073e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80073e6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80073ea:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f003 fa15 	bl	800a828 <VL53L0X_get_pal_range_status>
 80073fe:	4603      	mov	r3, r0
 8007400:	461a      	mov	r2, r3
 8007402:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007406:	4313      	orrs	r3, r2
 8007408:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800740c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007410:	2b00      	cmp	r3, #0
 8007412:	d103      	bne.n	800741c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007414:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800741c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007420:	2b00      	cmp	r3, #0
 8007422:	d12f      	bne.n	8007484 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f107 040c 	add.w	r4, r7, #12
 800742a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800742e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007436:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800743e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800744c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007452:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007458:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800745e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007464:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800746a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007474:	f107 050c 	add.w	r5, r7, #12
 8007478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800747a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800747c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007480:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007484:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007488:	4618      	mov	r0, r3
 800748a:	3750      	adds	r7, #80	; 0x50
 800748c:	46bd      	mov	sp, r7
 800748e:	bdb0      	pop	{r4, r5, r7, pc}
 8007490:	10624dd3 	.word	0x10624dd3

08007494 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80074a2:	2100      	movs	r1, #0
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff f8d1 	bl	800664c <VL53L0X_SetDeviceMode>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80074ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fd16 	bl	8006ee8 <VL53L0X_PerformSingleMeasurement>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80074c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff febe 	bl	800724c <VL53L0X_GetRangingMeasurementData>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80074d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f962 	bl	80077a8 <VL53L0X_ClearInterruptMask>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80074e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	461a      	mov	r2, r3
 8007502:	4603      	mov	r3, r0
 8007504:	70fb      	strb	r3, [r7, #3]
 8007506:	460b      	mov	r3, r1
 8007508:	70bb      	strb	r3, [r7, #2]
 800750a:	4613      	mov	r3, r2
 800750c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007518:	23f6      	movs	r3, #246	; 0xf6
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	e107      	b.n	800772e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800751e:	78bb      	ldrb	r3, [r7, #2]
 8007520:	2b14      	cmp	r3, #20
 8007522:	d110      	bne.n	8007546 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007524:	7e3b      	ldrb	r3, [r7, #24]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d102      	bne.n	8007530 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800752a:	2310      	movs	r3, #16
 800752c:	73bb      	strb	r3, [r7, #14]
 800752e:	e001      	b.n	8007534 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007530:	2301      	movs	r3, #1
 8007532:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	461a      	mov	r2, r3
 8007538:	2184      	movs	r1, #132	; 0x84
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f003 fbec 	bl	800ad18 <VL53L0X_WrByte>
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e0f3      	b.n	800772e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007546:	78bb      	ldrb	r3, [r7, #2]
 8007548:	2b15      	cmp	r3, #21
 800754a:	f040 8097 	bne.w	800767c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800754e:	2201      	movs	r2, #1
 8007550:	21ff      	movs	r1, #255	; 0xff
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f003 fbe0 	bl	800ad18 <VL53L0X_WrByte>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	4313      	orrs	r3, r2
 8007560:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f003 fbd6 	bl	800ad18 <VL53L0X_WrByte>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4313      	orrs	r3, r2
 8007574:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007576:	2200      	movs	r2, #0
 8007578:	21ff      	movs	r1, #255	; 0xff
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f003 fbcc 	bl	800ad18 <VL53L0X_WrByte>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	4313      	orrs	r3, r2
 8007588:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800758a:	2201      	movs	r2, #1
 800758c:	2180      	movs	r1, #128	; 0x80
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f003 fbc2 	bl	800ad18 <VL53L0X_WrByte>
 8007594:	4603      	mov	r3, r0
 8007596:	461a      	mov	r2, r3
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	4313      	orrs	r3, r2
 800759c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800759e:	2202      	movs	r2, #2
 80075a0:	2185      	movs	r1, #133	; 0x85
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f003 fbb8 	bl	800ad18 <VL53L0X_WrByte>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80075b2:	2204      	movs	r2, #4
 80075b4:	21ff      	movs	r1, #255	; 0xff
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f003 fbae 	bl	800ad18 <VL53L0X_WrByte>
 80075bc:	4603      	mov	r3, r0
 80075be:	461a      	mov	r2, r3
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80075c6:	2200      	movs	r2, #0
 80075c8:	21cd      	movs	r1, #205	; 0xcd
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f003 fba4 	bl	800ad18 <VL53L0X_WrByte>
 80075d0:	4603      	mov	r3, r0
 80075d2:	461a      	mov	r2, r3
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80075da:	2211      	movs	r2, #17
 80075dc:	21cc      	movs	r1, #204	; 0xcc
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f003 fb9a 	bl	800ad18 <VL53L0X_WrByte>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80075ee:	2207      	movs	r2, #7
 80075f0:	21ff      	movs	r1, #255	; 0xff
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f003 fb90 	bl	800ad18 <VL53L0X_WrByte>
 80075f8:	4603      	mov	r3, r0
 80075fa:	461a      	mov	r2, r3
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	4313      	orrs	r3, r2
 8007600:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007602:	2200      	movs	r2, #0
 8007604:	21be      	movs	r1, #190	; 0xbe
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f003 fb86 	bl	800ad18 <VL53L0X_WrByte>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	4313      	orrs	r3, r2
 8007614:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007616:	2206      	movs	r2, #6
 8007618:	21ff      	movs	r1, #255	; 0xff
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f003 fb7c 	bl	800ad18 <VL53L0X_WrByte>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	4313      	orrs	r3, r2
 8007628:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800762a:	2209      	movs	r2, #9
 800762c:	21cc      	movs	r1, #204	; 0xcc
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f003 fb72 	bl	800ad18 <VL53L0X_WrByte>
 8007634:	4603      	mov	r3, r0
 8007636:	461a      	mov	r2, r3
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4313      	orrs	r3, r2
 800763c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800763e:	2200      	movs	r2, #0
 8007640:	21ff      	movs	r1, #255	; 0xff
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f003 fb68 	bl	800ad18 <VL53L0X_WrByte>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	4313      	orrs	r3, r2
 8007650:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007652:	2201      	movs	r2, #1
 8007654:	21ff      	movs	r1, #255	; 0xff
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f003 fb5e 	bl	800ad18 <VL53L0X_WrByte>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	4313      	orrs	r3, r2
 8007664:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f003 fb54 	bl	800ad18 <VL53L0X_WrByte>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	4313      	orrs	r3, r2
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	e058      	b.n	800772e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800767c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d121      	bne.n	80076c8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007684:	787b      	ldrb	r3, [r7, #1]
 8007686:	2b04      	cmp	r3, #4
 8007688:	d81b      	bhi.n	80076c2 <VL53L0X_SetGpioConfig+0x1ce>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <VL53L0X_SetGpioConfig+0x19c>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a5 	.word	0x080076a5
 8007694:	080076ab 	.word	0x080076ab
 8007698:	080076b1 	.word	0x080076b1
 800769c:	080076b7 	.word	0x080076b7
 80076a0:	080076bd 	.word	0x080076bd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73bb      	strb	r3, [r7, #14]
				break;
 80076a8:	e00f      	b.n	80076ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73bb      	strb	r3, [r7, #14]
				break;
 80076ae:	e00c      	b.n	80076ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80076b0:	2302      	movs	r3, #2
 80076b2:	73bb      	strb	r3, [r7, #14]
				break;
 80076b4:	e009      	b.n	80076ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80076b6:	2303      	movs	r3, #3
 80076b8:	73bb      	strb	r3, [r7, #14]
				break;
 80076ba:	e006      	b.n	80076ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80076bc:	2304      	movs	r3, #4
 80076be:	73bb      	strb	r3, [r7, #14]
				break;
 80076c0:	e003      	b.n	80076ca <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80076c2:	23f5      	movs	r3, #245	; 0xf5
 80076c4:	73fb      	strb	r3, [r7, #15]
 80076c6:	e000      	b.n	80076ca <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80076c8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80076ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d107      	bne.n	80076e2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	461a      	mov	r2, r3
 80076d6:	210a      	movs	r1, #10
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f003 fb1d 	bl	800ad18 <VL53L0X_WrByte>
 80076de:	4603      	mov	r3, r0
 80076e0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80076e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10f      	bne.n	800770a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80076ea:	7e3b      	ldrb	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73bb      	strb	r3, [r7, #14]
 80076f4:	e001      	b.n	80076fa <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80076f6:	2310      	movs	r3, #16
 80076f8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	22ef      	movs	r2, #239	; 0xef
 80076fe:	2184      	movs	r1, #132	; 0x84
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f003 fb57 	bl	800adb4 <VL53L0X_UpdateByte>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800770a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	787a      	ldrb	r2, [r7, #1]
 8007716:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800771a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007722:	2100      	movs	r1, #0
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f83f 	bl	80077a8 <VL53L0X_ClearInterruptMask>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800772e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop

0800773c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	460b      	mov	r3, r1
 800774a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800774c:	2300      	movs	r3, #0
 800774e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	461a      	mov	r2, r3
 8007756:	210e      	movs	r1, #14
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f003 fb89 	bl	800ae70 <VL53L0X_RdWord>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007762:	8abb      	ldrh	r3, [r7, #20]
 8007764:	045b      	lsls	r3, r3, #17
 8007766:	461a      	mov	r2, r3
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <VL53L0X_GetInterruptThresholds+0x68>)
 800776a:	4013      	ands	r3, r2
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10f      	bne.n	8007798 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	461a      	mov	r2, r3
 800777e:	210c      	movs	r1, #12
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f003 fb75 	bl	800ae70 <VL53L0X_RdWord>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800778a:	8abb      	ldrh	r3, [r7, #20]
 800778c:	045b      	lsls	r3, r3, #17
 800778e:	461a      	mov	r2, r3
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007792:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007798:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	1ffe0000 	.word	0x1ffe0000

080077a8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80077ba:	2201      	movs	r2, #1
 80077bc:	210b      	movs	r1, #11
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f003 faaa 	bl	800ad18 <VL53L0X_WrByte>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80077c8:	2200      	movs	r2, #0
 80077ca:	210b      	movs	r1, #11
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f003 faa3 	bl	800ad18 <VL53L0X_WrByte>
 80077d2:	4603      	mov	r3, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	4313      	orrs	r3, r2
 80077da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80077dc:	f107 030d 	add.w	r3, r7, #13
 80077e0:	461a      	mov	r2, r3
 80077e2:	2113      	movs	r1, #19
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f003 fb19 	bl	800ae1c <VL53L0X_RdByte>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	3301      	adds	r3, #1
 80077f8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80077fa:	7b7b      	ldrb	r3, [r7, #13]
 80077fc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d803      	bhi.n	8007812 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800780a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0d3      	beq.n	80077ba <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007818:	23f4      	movs	r3, #244	; 0xf4
 800781a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800781c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007836:	f107 030e 	add.w	r3, r7, #14
 800783a:	461a      	mov	r2, r3
 800783c:	2113      	movs	r1, #19
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f003 faec 	bl	800ae1c <VL53L0X_RdByte>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	f003 0207 	and.w	r2, r3, #7
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	f003 0318 	and.w	r3, r3, #24
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800785c:	23fa      	movs	r3, #250	; 0xfa
 800785e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007878:	2300      	movs	r3, #0
 800787a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fa33 	bl	8007cec <VL53L0X_perform_ref_spad_management>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800788a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80078a0:	2101      	movs	r1, #1
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fe fed2 	bl	800664c <VL53L0X_SetDeviceMode>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80078ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 80078b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b8:	e019      	b.n	80078ee <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fbc4 	bl	8007048 <VL53L0X_StartMeasurement>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80078c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 80078cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d0:	e00d      	b.n	80078ee <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fcb9 	bl	800724c <VL53L0X_GetRangingMeasurementData>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80078de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 80078e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ea:	e000      	b.n	80078ee <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007904:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007908:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800790a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800790e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007910:	f107 0308 	add.w	r3, r7, #8
 8007914:	461a      	mov	r2, r3
 8007916:	2128      	movs	r1, #40	; 0x28
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f003 faa9 	bl	800ae70 <VL53L0X_RdWord>
 800791e:	4603      	mov	r3, r0
 8007920:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11e      	bne.n	8007968 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800792a:	893b      	ldrh	r3, [r7, #8]
 800792c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007930:	b29b      	uxth	r3, r3
 8007932:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007934:	893b      	ldrh	r3, [r7, #8]
 8007936:	461a      	mov	r2, r3
 8007938:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800793c:	429a      	cmp	r2, r3
 800793e:	dd0b      	ble.n	8007958 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007940:	893a      	ldrh	r2, [r7, #8]
 8007942:	897b      	ldrh	r3, [r7, #10]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	b21b      	sxth	r3, r3
 800794a:	461a      	mov	r2, r3
					* 250;
 800794c:	23fa      	movs	r3, #250	; 0xfa
 800794e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e007      	b.n	8007968 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007958:	893b      	ldrh	r3, [r7, #8]
 800795a:	b21b      	sxth	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	23fa      	movs	r3, #250	; 0xfa
 8007960:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007974:	b480      	push	{r7}
 8007976:	b08b      	sub	sp, #44	; 0x2c
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007982:	2308      	movs	r3, #8
 8007984:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	fbb2 f3f3 	udiv	r3, r2, r3
 800799a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	fb01 f202 	mul.w	r2, r1, r2
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
 80079b2:	e030      	b.n	8007a16 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	4413      	add	r3, r2
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80079c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d11e      	bne.n	8007a08 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80079ca:	7ffa      	ldrb	r2, [r7, #31]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	fa42 f303 	asr.w	r3, r2, r3
 80079d2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80079d8:	e016      	b.n	8007a08 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80079da:	7ffb      	ldrb	r3, [r7, #31]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <get_next_good_spad+0x88>
				success = 1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	fb03 f202 	mul.w	r2, r3, r2
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	4413      	add	r3, r2
 80079f4:	461a      	mov	r2, r3
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	601a      	str	r2, [r3, #0]
				break;
 80079fa:	e009      	b.n	8007a10 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80079fc:	7ffb      	ldrb	r3, [r7, #31]
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	3301      	adds	r3, #1
 8007a06:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007a08:	6a3a      	ldr	r2, [r7, #32]
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d3e4      	bcc.n	80079da <get_next_good_spad+0x66>
				coarseIndex++) {
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	3301      	adds	r3, #1
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d202      	bcs.n	8007a24 <get_next_good_spad+0xb0>
 8007a1e:	7fbb      	ldrb	r3, [r7, #30]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0c7      	beq.n	80079b4 <get_next_good_spad+0x40>
		}
	}
}
 8007a24:	bf00      	nop
 8007a26:	372c      	adds	r7, #44	; 0x2c
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	099b      	lsrs	r3, r3, #6
 8007a40:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007a42:	4a07      	ldr	r2, [pc, #28]	; (8007a60 <is_aperture+0x30>)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <is_aperture+0x22>
		isAperture = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	200002d0 	.word	0x200002d0

08007a64 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b089      	sub	sp, #36	; 0x24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007a74:	2308      	movs	r3, #8
 8007a76:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a80:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a8a:	69b9      	ldr	r1, [r7, #24]
 8007a8c:	fb01 f202 	mul.w	r2, r1, r2
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007a9c:	23ce      	movs	r3, #206	; 0xce
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e010      	b.n	8007ac4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b25a      	sxtb	r2, r3
 8007aac:	2101      	movs	r1, #1
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b259      	sxtb	r1, r3
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	4413      	add	r3, r2
 8007ac0:	b2ca      	uxtb	r2, r1
 8007ac2:	701a      	strb	r2, [r3, #0]

	return status;
 8007ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3724      	adds	r7, #36	; 0x24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007ade:	2306      	movs	r3, #6
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	21b0      	movs	r1, #176	; 0xb0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f003 f8bb 	bl	800ac60 <VL53L0X_WriteMulti>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007b04:	2306      	movs	r3, #6
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	21b0      	movs	r1, #176	; 0xb0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f003 f8d8 	bl	800acc0 <VL53L0X_ReadMulti>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08c      	sub	sp, #48	; 0x30
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	607a      	str	r2, [r7, #4]
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b38:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007b3e:	2300      	movs	r3, #0
 8007b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b42:	e02b      	b.n	8007b9c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007b44:	f107 031c 	add.w	r3, r7, #28
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff ff11 	bl	8007974 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d103      	bne.n	8007b62 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007b5a:	23ce      	movs	r3, #206	; 0xce
 8007b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007b60:	e020      	b.n	8007ba4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b68:	4413      	add	r3, r2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff ff60 	bl	8007a30 <is_aperture>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d003      	beq.n	8007b82 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007b7a:	23ce      	movs	r3, #206	; 0xce
 8007b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007b80:	e010      	b.n	8007ba4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007b86:	6a3a      	ldr	r2, [r7, #32]
 8007b88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b8a:	6838      	ldr	r0, [r7, #0]
 8007b8c:	f7ff ff6a 	bl	8007a64 <enable_spad_bit>
		currentSpad++;
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	3301      	adds	r3, #1
 8007b94:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	3301      	adds	r3, #1
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d3cf      	bcc.n	8007b44 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007baa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7ff ff8d 	bl	8007ad4 <set_ref_spad_map>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007bc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d121      	bne.n	8007c0c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007bc8:	f107 0314 	add.w	r3, r7, #20
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff ff93 	bl	8007afa <get_ref_spad_map>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007bde:	e011      	b.n	8007c04 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	4413      	add	r3, r2
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	f107 0114 	add.w	r1, r7, #20
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	440b      	add	r3, r1
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d003      	beq.n	8007bfe <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007bf6:	23ce      	movs	r3, #206	; 0xce
 8007bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007bfc:	e006      	b.n	8007c0c <enable_ref_spads+0xec>
			}
			i++;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	3301      	adds	r3, #1
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d3e9      	bcc.n	8007be0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007c0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3730      	adds	r7, #48	; 0x30
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007c34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007c40:	22c0      	movs	r2, #192	; 0xc0
 8007c42:	2101      	movs	r1, #1
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f003 f867 	bl	800ad18 <VL53L0X_WrByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007c58:	f107 0308 	add.w	r3, r7, #8
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fc18 	bl	8007494 <VL53L0X_PerformSingleRangingMeasurement>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007c6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d107      	bne.n	8007c82 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c72:	2201      	movs	r2, #1
 8007c74:	21ff      	movs	r1, #255	; 0xff
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f003 f84e 	bl	800ad18 <VL53L0X_WrByte>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007c82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	21b6      	movs	r1, #182	; 0xb6
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f003 f8ee 	bl	800ae70 <VL53L0X_RdWord>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007c9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d107      	bne.n	8007cb2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	21ff      	movs	r1, #255	; 0xff
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f003 f836 	bl	800ad18 <VL53L0X_WrByte>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007cb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d112      	bne.n	8007ce0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007cba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f003 f828 	bl	800ad18 <VL53L0X_WrByte>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cdc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3728      	adds	r7, #40	; 0x28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007cec:	b590      	push	{r4, r7, lr}
 8007cee:	b09d      	sub	sp, #116	; 0x74
 8007cf0:	af06      	add	r7, sp, #24
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007cfe:	23b4      	movs	r3, #180	; 0xb4
 8007d00:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007d04:	2303      	movs	r3, #3
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007d08:	232c      	movs	r3, #44	; 0x2c
 8007d0a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007d18:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007d1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007d26:	2306      	movs	r3, #6
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007d50:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007d52:	2300      	movs	r3, #0
 8007d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d56:	e009      	b.n	8007d6c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d68:	3301      	adds	r3, #1
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3f1      	bcc.n	8007d58 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d74:	2201      	movs	r2, #1
 8007d76:	21ff      	movs	r1, #255	; 0xff
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f002 ffcd 	bl	800ad18 <VL53L0X_WrByte>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007d84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d107      	bne.n	8007d9c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	214f      	movs	r1, #79	; 0x4f
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f002 ffc1 	bl	800ad18 <VL53L0X_WrByte>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d107      	bne.n	8007db4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007da4:	222c      	movs	r2, #44	; 0x2c
 8007da6:	214e      	movs	r1, #78	; 0x4e
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f002 ffb5 	bl	800ad18 <VL53L0X_WrByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007db4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d107      	bne.n	8007dcc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	21ff      	movs	r1, #255	; 0xff
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f002 ffa9 	bl	800ad18 <VL53L0X_WrByte>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007dcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007dd4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007dd8:	461a      	mov	r2, r3
 8007dda:	21b6      	movs	r1, #182	; 0xb6
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f002 ff9b 	bl	800ad18 <VL53L0X_WrByte>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007de8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d107      	bne.n	8007e00 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007df0:	2200      	movs	r2, #0
 8007df2:	2180      	movs	r1, #128	; 0x80
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f002 ff8f 	bl	800ad18 <VL53L0X_WrByte>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007e00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007e08:	f107 0210 	add.w	r2, r7, #16
 8007e0c:	f107 0111 	add.w	r1, r7, #17
 8007e10:	2300      	movs	r3, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fbbb 	bl	800858e <VL53L0X_perform_ref_calibration>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007e1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d121      	bne.n	8007e6a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e34:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007e42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007e46:	f107 0218 	add.w	r2, r7, #24
 8007e4a:	9204      	str	r2, [sp, #16]
 8007e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e4e:	9203      	str	r2, [sp, #12]
 8007e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e52:	9202      	str	r2, [sp, #8]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff fe5e 	bl	8007b20 <enable_ref_spads>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d174      	bne.n	8007f5c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007e76:	f107 0312 	add.w	r3, r7, #18
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fecb 	bl	8007c18 <perform_ref_signal_measurement>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007e88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d161      	bne.n	8007f54 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007e90:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007e92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d25d      	bcs.n	8007f54 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007e98:	2300      	movs	r3, #0
 8007e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e9c:	e009      	b.n	8007eb2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eae:	3301      	adds	r3, #1
 8007eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d3f1      	bcc.n	8007e9e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007eba:	e002      	b.n	8007ec2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007ec2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec8:	4413      	add	r3, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fdb0 	bl	8007a30 <is_aperture>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007ed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d3ee      	bcc.n	8007ebc <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007ef2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ef6:	f107 0218 	add.w	r2, r7, #24
 8007efa:	9204      	str	r2, [sp, #16]
 8007efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007efe:	9203      	str	r2, [sp, #12]
 8007f00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f02:	9202      	str	r2, [sp, #8]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fe06 	bl	8007b20 <enable_ref_spads>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007f1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11b      	bne.n	8007f5a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007f26:	f107 0312 	add.w	r3, r7, #18
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff fe73 	bl	8007c18 <perform_ref_signal_measurement>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007f38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10c      	bne.n	8007f5a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007f40:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007f42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d208      	bcs.n	8007f5a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007f52:	e002      	b.n	8007f5a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f58:	e000      	b.n	8007f5c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007f5a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007f5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f040 80af 	bne.w	80080c4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007f66:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007f68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	f240 80aa 	bls.w	80080c4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007f80:	f107 031c 	add.w	r3, r7, #28
 8007f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f86:	4618      	mov	r0, r3
 8007f88:	f003 f820 	bl	800afcc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007f8c:	8a7b      	ldrh	r3, [r7, #18]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfb8      	it	lt
 8007f98:	425b      	neglt	r3, r3
 8007f9a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007fa2:	e086      	b.n	80080b2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fb2:	f7ff fcdf 	bl	8007974 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d103      	bne.n	8007fc6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007fbe:	23ce      	movs	r3, #206	; 0xce
 8007fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007fc4:	e07e      	b.n	80080c4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007fc6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fd2e 	bl	8007a30 <is_aperture>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007fe4:	e06e      	b.n	80080c4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	3301      	adds	r3, #1
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007ff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fd32 	bl	8007a64 <enable_spad_bit>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008006:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10c      	bne.n	8008028 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800800e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008010:	3301      	adds	r3, #1
 8008012:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800801a:	4619      	mov	r1, r3
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff fd59 	bl	8007ad4 <set_ref_spad_map>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008028:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800802c:	2b00      	cmp	r3, #0
 800802e:	d146      	bne.n	80080be <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008030:	f107 0312 	add.w	r3, r7, #18
 8008034:	4619      	mov	r1, r3
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff fdee 	bl	8007c18 <perform_ref_signal_measurement>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008042:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008046:	2b00      	cmp	r3, #0
 8008048:	d13b      	bne.n	80080c2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800804a:	8a7b      	ldrh	r3, [r7, #18]
 800804c:	461a      	mov	r2, r3
 800804e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	bfb8      	it	lt
 8008056:	425b      	neglt	r3, r3
 8008058:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800805a:	8a7b      	ldrh	r3, [r7, #18]
 800805c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800805e:	429a      	cmp	r2, r3
 8008060:	d21c      	bcs.n	800809c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008066:	429a      	cmp	r2, r3
 8008068:	d914      	bls.n	8008094 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800806a:	f107 031c 	add.w	r3, r7, #28
 800806e:	4619      	mov	r1, r3
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fd2f 	bl	8007ad4 <set_ref_spad_map>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008082:	f107 011c 	add.w	r1, r7, #28
 8008086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008088:	4618      	mov	r0, r3
 800808a:	f002 ff9f 	bl	800afcc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800808e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008090:	3b01      	subs	r3, #1
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e00a      	b.n	80080b2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80080a6:	f107 031c 	add.w	r3, r7, #28
 80080aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ac:	4618      	mov	r0, r3
 80080ae:	f002 ff8d 	bl	800afcc <memcpy>
		while (!complete) {
 80080b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f43f af74 	beq.w	8007fa4 <VL53L0X_perform_ref_spad_management+0x2b8>
 80080bc:	e002      	b.n	80080c4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80080be:	bf00      	nop
 80080c0:	e000      	b.n	80080c4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80080c2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d115      	bne.n	80080f8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080d0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80080d8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80080f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	375c      	adds	r7, #92	; 0x5c
 8008100:	46bd      	mov	sp, r7
 8008102:	bd90      	pop	{r4, r7, pc}

08008104 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b093      	sub	sp, #76	; 0x4c
 8008108:	af06      	add	r7, sp, #24
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008112:	2300      	movs	r3, #0
 8008114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800811c:	23b4      	movs	r3, #180	; 0xb4
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008122:	2306      	movs	r3, #6
 8008124:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008126:	232c      	movs	r3, #44	; 0x2c
 8008128:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800812a:	2201      	movs	r2, #1
 800812c:	21ff      	movs	r1, #255	; 0xff
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f002 fdf2 	bl	800ad18 <VL53L0X_WrByte>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800813a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800813e:	2b00      	cmp	r3, #0
 8008140:	d107      	bne.n	8008152 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008142:	2200      	movs	r2, #0
 8008144:	214f      	movs	r1, #79	; 0x4f
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f002 fde6 	bl	800ad18 <VL53L0X_WrByte>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008152:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008156:	2b00      	cmp	r3, #0
 8008158:	d107      	bne.n	800816a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800815a:	222c      	movs	r2, #44	; 0x2c
 800815c:	214e      	movs	r1, #78	; 0x4e
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f002 fdda 	bl	800ad18 <VL53L0X_WrByte>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800816a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008172:	2200      	movs	r2, #0
 8008174:	21ff      	movs	r1, #255	; 0xff
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f002 fdce 	bl	800ad18 <VL53L0X_WrByte>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008182:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800818a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800818e:	461a      	mov	r2, r3
 8008190:	21b6      	movs	r1, #182	; 0xb6
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f002 fdc0 	bl	800ad18 <VL53L0X_WrByte>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
 80081a2:	e009      	b.n	80081b8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80081ae:	2200      	movs	r2, #0
 80081b0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	3301      	adds	r3, #1
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d3f1      	bcc.n	80081a4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d011      	beq.n	80081ea <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80081c6:	e002      	b.n	80081ce <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	3301      	adds	r3, #1
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80081ce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	4413      	add	r3, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff fc2a 	bl	8007a30 <is_aperture>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d103      	bne.n	80081ea <VL53L0X_set_reference_spads+0xe6>
 80081e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d3ee      	bcc.n	80081c8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80081f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081fa:	79f9      	ldrb	r1, [r7, #7]
 80081fc:	f107 0214 	add.w	r2, r7, #20
 8008200:	9204      	str	r2, [sp, #16]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	9203      	str	r2, [sp, #12]
 8008206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4623      	mov	r3, r4
 8008212:	4602      	mov	r2, r0
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fc83 	bl	8007b20 <enable_ref_spads>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008220:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10c      	bne.n	8008242 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	79fa      	ldrb	r2, [r7, #7]
 800823e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008242:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008246:	4618      	mov	r0, r3
 8008248:	3734      	adds	r7, #52	; 0x34
 800824a:	46bd      	mov	sp, r7
 800824c:	bd90      	pop	{r4, r7, pc}

0800824e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800825e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	b2db      	uxtb	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	2100      	movs	r1, #0
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f002 fd50 	bl	800ad18 <VL53L0X_WrByte>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800827c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9bf 	bl	8008608 <VL53L0X_measurement_poll_for_completion>
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800828e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008296:	2100      	movs	r1, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fa85 	bl	80077a8 <VL53L0X_ClearInterruptMask>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80082a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80082aa:	2200      	movs	r2, #0
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f002 fd32 	bl	800ad18 <VL53L0X_WrByte>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73fb      	strb	r3, [r7, #15]

	return Status;
 80082b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	4608      	mov	r0, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	461a      	mov	r2, r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	70fb      	strb	r3, [r7, #3]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70bb      	strb	r3, [r7, #2]
 80082da:	4613      	mov	r3, r2
 80082dc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80082e6:	2201      	movs	r2, #1
 80082e8:	21ff      	movs	r1, #255	; 0xff
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f002 fd14 	bl	800ad18 <VL53L0X_WrByte>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80082fa:	2200      	movs	r2, #0
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f002 fd0a 	bl	800ad18 <VL53L0X_WrByte>
 8008304:	4603      	mov	r3, r0
 8008306:	461a      	mov	r2, r3
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	4313      	orrs	r3, r2
 800830c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800830e:	2200      	movs	r2, #0
 8008310:	21ff      	movs	r1, #255	; 0xff
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f002 fd00 	bl	800ad18 <VL53L0X_WrByte>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	4313      	orrs	r3, r2
 8008320:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01e      	beq.n	8008366 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d009      	beq.n	8008344 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	21cb      	movs	r1, #203	; 0xcb
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f002 fd71 	bl	800ae1c <VL53L0X_RdByte>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	4313      	orrs	r3, r2
 8008342:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02a      	beq.n	80083a2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800834c:	f107 030e 	add.w	r3, r7, #14
 8008350:	461a      	mov	r2, r3
 8008352:	21ee      	movs	r1, #238	; 0xee
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f002 fd61 	bl	800ae1c <VL53L0X_RdByte>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	4313      	orrs	r3, r2
 8008362:	73fb      	strb	r3, [r7, #15]
 8008364:	e01d      	b.n	80083a2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800836e:	78bb      	ldrb	r3, [r7, #2]
 8008370:	461a      	mov	r2, r3
 8008372:	21cb      	movs	r1, #203	; 0xcb
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 fccf 	bl	800ad18 <VL53L0X_WrByte>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	4313      	orrs	r3, r2
 8008382:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008384:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800838c:	787b      	ldrb	r3, [r7, #1]
 800838e:	2280      	movs	r2, #128	; 0x80
 8008390:	21ee      	movs	r1, #238	; 0xee
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f002 fd0e 	bl	800adb4 <VL53L0X_UpdateByte>
 8008398:	4603      	mov	r3, r0
 800839a:	461a      	mov	r2, r3
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4313      	orrs	r3, r2
 80083a0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80083a2:	2201      	movs	r2, #1
 80083a4:	21ff      	movs	r1, #255	; 0xff
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 fcb6 	bl	800ad18 <VL53L0X_WrByte>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80083b6:	2201      	movs	r2, #1
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f002 fcac 	bl	800ad18 <VL53L0X_WrByte>
 80083c0:	4603      	mov	r3, r0
 80083c2:	461a      	mov	r2, r3
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083ca:	2200      	movs	r2, #0
 80083cc:	21ff      	movs	r1, #255	; 0xff
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f002 fca2 	bl	800ad18 <VL53L0X_WrByte>
 80083d4:	4603      	mov	r3, r0
 80083d6:	461a      	mov	r2, r3
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4313      	orrs	r3, r2
 80083dc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	f023 0310 	bic.w	r3, r3, #16
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	701a      	strb	r2, [r3, #0]

	return Status;
 80083ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b08a      	sub	sp, #40	; 0x28
 80083fa:	af04      	add	r7, sp, #16
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	4611      	mov	r1, r2
 8008402:	461a      	mov	r2, r3
 8008404:	460b      	mov	r3, r1
 8008406:	71fb      	strb	r3, [r7, #7]
 8008408:	4613      	mov	r3, r2
 800840a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800840c:	2300      	movs	r3, #0
 800840e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008420:	79bb      	ldrb	r3, [r7, #6]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800842c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800842e:	2201      	movs	r2, #1
 8008430:	2101      	movs	r1, #1
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f002 fc70 	bl	800ad18 <VL53L0X_WrByte>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800843c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008444:	2140      	movs	r1, #64	; 0x40
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff ff01 	bl	800824e <VL53L0X_perform_single_ref_calibration>
 800844c:	4603      	mov	r3, r0
 800844e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d115      	bne.n	8008484 <VL53L0X_perform_vhv_calibration+0x8e>
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d112      	bne.n	8008484 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800845e:	7d39      	ldrb	r1, [r7, #20]
 8008460:	7d7a      	ldrb	r2, [r7, #21]
 8008462:	2300      	movs	r3, #0
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	2301      	movs	r3, #1
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	f107 0313 	add.w	r3, r7, #19
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	460b      	mov	r3, r1
 8008476:	2101      	movs	r1, #1
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff ff23 	bl	80082c4 <VL53L0X_ref_calibration_io>
 800847e:	4603      	mov	r3, r0
 8008480:	75fb      	strb	r3, [r7, #23]
 8008482:	e002      	b.n	800848a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800848a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d112      	bne.n	80084b8 <VL53L0X_perform_vhv_calibration+0xc2>
 8008492:	79bb      	ldrb	r3, [r7, #6]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00f      	beq.n	80084b8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008498:	7dbb      	ldrb	r3, [r7, #22]
 800849a:	461a      	mov	r2, r3
 800849c:	2101      	movs	r1, #1
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f002 fc3a 	bl	800ad18 <VL53L0X_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80084a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	7dba      	ldrb	r2, [r7, #22]
 80084b4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80084b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af04      	add	r7, sp, #16
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4611      	mov	r1, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	460b      	mov	r3, r1
 80084d4:	71fb      	strb	r3, [r7, #7]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80084ea:	79bb      	ldrb	r3, [r7, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80084f6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80084f8:	2202      	movs	r2, #2
 80084fa:	2101      	movs	r1, #1
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f002 fc0b 	bl	800ad18 <VL53L0X_WrByte>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7ff fe9c 	bl	800824e <VL53L0X_perform_single_ref_calibration>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800851a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d115      	bne.n	800854e <VL53L0X_perform_phase_calibration+0x8a>
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d112      	bne.n	800854e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008528:	7d39      	ldrb	r1, [r7, #20]
 800852a:	7d7a      	ldrb	r2, [r7, #21]
 800852c:	2301      	movs	r3, #1
 800852e:	9303      	str	r3, [sp, #12]
 8008530:	2300      	movs	r3, #0
 8008532:	9302      	str	r3, [sp, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	f107 0313 	add.w	r3, r7, #19
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	460b      	mov	r3, r1
 8008540:	2101      	movs	r1, #1
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff febe 	bl	80082c4 <VL53L0X_ref_calibration_io>
 8008548:	4603      	mov	r3, r0
 800854a:	75fb      	strb	r3, [r7, #23]
 800854c:	e002      	b.n	8008554 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008554:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d112      	bne.n	8008582 <VL53L0X_perform_phase_calibration+0xbe>
 800855c:	79bb      	ldrb	r3, [r7, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00f      	beq.n	8008582 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008562:	7dbb      	ldrb	r3, [r7, #22]
 8008564:	461a      	mov	r2, r3
 8008566:	2101      	movs	r1, #1
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f002 fbd5 	bl	800ad18 <VL53L0X_WrByte>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d103      	bne.n	8008582 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	7dba      	ldrb	r2, [r7, #22]
 800857e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b086      	sub	sp, #24
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800859c:	2300      	movs	r3, #0
 800859e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80085aa:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	2300      	movs	r3, #0
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff ff1f 	bl	80083f6 <VL53L0X_perform_vhv_calibration>
 80085b8:	4603      	mov	r3, r0
 80085ba:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80085bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d107      	bne.n	80085d4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	2300      	movs	r3, #0
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff ff7a 	bl	80084c4 <VL53L0X_perform_phase_calibration>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80085d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10f      	bne.n	80085fc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80085dc:	7dbb      	ldrb	r3, [r7, #22]
 80085de:	461a      	mov	r2, r3
 80085e0:	2101      	movs	r1, #1
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f002 fb98 	bl	800ad18 <VL53L0X_WrByte>
 80085e8:	4603      	mov	r3, r0
 80085ea:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80085ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d103      	bne.n	80085fc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7dba      	ldrb	r2, [r7, #22]
 80085f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80085fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800861c:	f107 030f 	add.w	r3, r7, #15
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe fdd2 	bl	80071cc <VL53L0X_GetMeasurementDataReady>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800862c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d110      	bne.n	8008656 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d00f      	beq.n	800865a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3301      	adds	r3, #1
 800863e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008646:	d302      	bcc.n	800864e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008648:	23f9      	movs	r3, #249	; 0xf9
 800864a:	75fb      	strb	r3, [r7, #23]
			break;
 800864c:	e006      	b.n	800865c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f002 fc82 	bl	800af58 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008654:	e7e2      	b.n	800861c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008656:	bf00      	nop
 8008658:	e000      	b.n	800865c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800865a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800865c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	3301      	adds	r3, #1
 800867a:	b2db      	uxtb	r3, r3
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	4603      	mov	r3, r0
 8008696:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80086c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086c4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80086c6:	e002      	b.n	80086ce <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	089b      	lsrs	r3, r3, #2
 80086cc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d8f8      	bhi.n	80086c8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80086d6:	e017      	b.n	8008708 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d30b      	bcc.n	80086fc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	085b      	lsrs	r3, r3, #1
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	4413      	add	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	e002      	b.n	8008702 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	089b      	lsrs	r3, r3, #2
 8008706:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e4      	bne.n	80086d8 <VL53L0X_isqrt+0x24>
	}

	return res;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008728:	2200      	movs	r2, #0
 800872a:	2183      	movs	r1, #131	; 0x83
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f002 faf3 	bl	800ad18 <VL53L0X_WrByte>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	4313      	orrs	r3, r2
 800873a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800873c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11e      	bne.n	8008782 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008748:	f107 030f 	add.w	r3, r7, #15
 800874c:	461a      	mov	r2, r3
 800874e:	2183      	movs	r1, #131	; 0x83
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f002 fb63 	bl	800ae1c <VL53L0X_RdByte>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10a      	bne.n	8008776 <VL53L0X_device_read_strobe+0x5a>
 8008760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	3301      	adds	r3, #1
 800876c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008774:	d3e8      	bcc.n	8008748 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800877c:	d301      	bcc.n	8008782 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800877e:	23f9      	movs	r3, #249	; 0xf9
 8008780:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008782:	2201      	movs	r2, #1
 8008784:	2183      	movs	r1, #131	; 0x83
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f002 fac6 	bl	800ad18 <VL53L0X_WrByte>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	4313      	orrs	r3, r2
 8008794:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008796:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b098      	sub	sp, #96	; 0x60
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80087d2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80087d6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80087ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80087ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	f000 8408 	beq.w	8009008 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80087f8:	2201      	movs	r2, #1
 80087fa:	2180      	movs	r1, #128	; 0x80
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f002 fa8b 	bl	800ad18 <VL53L0X_WrByte>
 8008802:	4603      	mov	r3, r0
 8008804:	461a      	mov	r2, r3
 8008806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880a:	4313      	orrs	r3, r2
 800880c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008810:	2201      	movs	r2, #1
 8008812:	21ff      	movs	r1, #255	; 0xff
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f002 fa7f 	bl	800ad18 <VL53L0X_WrByte>
 800881a:	4603      	mov	r3, r0
 800881c:	461a      	mov	r2, r3
 800881e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008822:	4313      	orrs	r3, r2
 8008824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 fa73 	bl	800ad18 <VL53L0X_WrByte>
 8008832:	4603      	mov	r3, r0
 8008834:	461a      	mov	r2, r3
 8008836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800883a:	4313      	orrs	r3, r2
 800883c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008840:	2206      	movs	r2, #6
 8008842:	21ff      	movs	r1, #255	; 0xff
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f002 fa67 	bl	800ad18 <VL53L0X_WrByte>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008852:	4313      	orrs	r3, r2
 8008854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008858:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800885c:	461a      	mov	r2, r3
 800885e:	2183      	movs	r1, #131	; 0x83
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f002 fadb 	bl	800ae1c <VL53L0X_RdByte>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800886e:	4313      	orrs	r3, r2
 8008870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008878:	f043 0304 	orr.w	r3, r3, #4
 800887c:	b2db      	uxtb	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	2183      	movs	r1, #131	; 0x83
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f002 fa48 	bl	800ad18 <VL53L0X_WrByte>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008890:	4313      	orrs	r3, r2
 8008892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008896:	2207      	movs	r2, #7
 8008898:	21ff      	movs	r1, #255	; 0xff
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f002 fa3c 	bl	800ad18 <VL53L0X_WrByte>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088a8:	4313      	orrs	r3, r2
 80088aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80088ae:	2201      	movs	r2, #1
 80088b0:	2181      	movs	r1, #129	; 0x81
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f002 fa30 	bl	800ad18 <VL53L0X_WrByte>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 fb46 	bl	800af58 <VL53L0X_PollingDelay>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80088da:	2201      	movs	r2, #1
 80088dc:	2180      	movs	r1, #128	; 0x80
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f002 fa1a 	bl	800ad18 <VL53L0X_WrByte>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8098 	beq.w	8008a2e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80088fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008902:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008906:	2b00      	cmp	r3, #0
 8008908:	f040 8091 	bne.w	8008a2e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800890c:	226b      	movs	r2, #107	; 0x6b
 800890e:	2194      	movs	r1, #148	; 0x94
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f002 fa01 	bl	800ad18 <VL53L0X_WrByte>
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
 800891a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800891e:	4313      	orrs	r3, r2
 8008920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fef9 	bl	800871c <VL53L0X_device_read_strobe>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008932:	4313      	orrs	r3, r2
 8008934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800893c:	461a      	mov	r2, r3
 800893e:	2190      	movs	r1, #144	; 0x90
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f002 facd 	bl	800aee0 <VL53L0X_RdDWord>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894e:	4313      	orrs	r3, r2
 8008950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800895e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	0bdb      	lsrs	r3, r3, #15
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008970:	2224      	movs	r2, #36	; 0x24
 8008972:	2194      	movs	r1, #148	; 0x94
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f002 f9cf 	bl	800ad18 <VL53L0X_WrByte>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008982:	4313      	orrs	r3, r2
 8008984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fec7 	bl	800871c <VL53L0X_device_read_strobe>
 800898e:	4603      	mov	r3, r0
 8008990:	461a      	mov	r2, r3
 8008992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008996:	4313      	orrs	r3, r2
 8008998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800899c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089a0:	461a      	mov	r2, r3
 80089a2:	2190      	movs	r1, #144	; 0x90
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f002 fa9b 	bl	800aee0 <VL53L0X_RdDWord>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	0e1b      	lsrs	r3, r3, #24
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	0a1b      	lsrs	r3, r3, #8
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80089d6:	2225      	movs	r2, #37	; 0x25
 80089d8:	2194      	movs	r1, #148	; 0x94
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f002 f99c 	bl	800ad18 <VL53L0X_WrByte>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e8:	4313      	orrs	r3, r2
 80089ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff fe94 	bl	800871c <VL53L0X_device_read_strobe>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a06:	461a      	mov	r2, r3
 8008a08:	2190      	movs	r1, #144	; 0x90
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f002 fa68 	bl	800aee0 <VL53L0X_RdDWord>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	0e1b      	lsrs	r3, r3, #24
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	0c1b      	lsrs	r3, r3, #16
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8189 	beq.w	8008d4c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008a3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a3e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 8182 	bne.w	8008d4c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008a48:	2202      	movs	r2, #2
 8008a4a:	2194      	movs	r1, #148	; 0x94
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f002 f963 	bl	800ad18 <VL53L0X_WrByte>
 8008a52:	4603      	mov	r3, r0
 8008a54:	461a      	mov	r2, r3
 8008a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff fe5b 	bl	800871c <VL53L0X_device_read_strobe>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008a74:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008a78:	461a      	mov	r2, r3
 8008a7a:	2190      	movs	r1, #144	; 0x90
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f002 f9cd 	bl	800ae1c <VL53L0X_RdByte>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008a90:	227b      	movs	r2, #123	; 0x7b
 8008a92:	2194      	movs	r1, #148	; 0x94
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f002 f93f 	bl	800ad18 <VL53L0X_WrByte>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fe37 	bl	800871c <VL53L0X_device_read_strobe>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008abc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	2190      	movs	r1, #144	; 0x90
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 f9a9 	bl	800ae1c <VL53L0X_RdByte>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008ad8:	2277      	movs	r2, #119	; 0x77
 8008ada:	2194      	movs	r1, #148	; 0x94
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 f91b 	bl	800ad18 <VL53L0X_WrByte>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fe13 	bl	800871c <VL53L0X_device_read_strobe>
 8008af6:	4603      	mov	r3, r0
 8008af8:	461a      	mov	r2, r3
 8008afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2190      	movs	r1, #144	; 0x90
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f002 f9e7 	bl	800aee0 <VL53L0X_RdDWord>
 8008b12:	4603      	mov	r3, r0
 8008b14:	461a      	mov	r2, r3
 8008b16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	0e5b      	lsrs	r3, r3, #25
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	0c9b      	lsrs	r3, r3, #18
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	0adb      	lsrs	r3, r3, #11
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	091b      	lsrs	r3, r3, #4
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008b6a:	2278      	movs	r2, #120	; 0x78
 8008b6c:	2194      	movs	r1, #148	; 0x94
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f002 f8d2 	bl	800ad18 <VL53L0X_WrByte>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff fdca 	bl	800871c <VL53L0X_device_read_strobe>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b90:	4313      	orrs	r3, r2
 8008b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2190      	movs	r1, #144	; 0x90
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f002 f99e 	bl	800aee0 <VL53L0X_RdDWord>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	0f5b      	lsrs	r3, r3, #29
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbc:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008bbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bc2:	4413      	add	r3, r2
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	0d9b      	lsrs	r3, r3, #22
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	0bdb      	lsrs	r3, r3, #15
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	0a1b      	lsrs	r3, r3, #8
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	085b      	lsrs	r3, r3, #1
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	019b      	lsls	r3, r3, #6
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008c12:	2279      	movs	r2, #121	; 0x79
 8008c14:	2194      	movs	r1, #148	; 0x94
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f002 f87e 	bl	800ad18 <VL53L0X_WrByte>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c24:	4313      	orrs	r3, r2
 8008c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fd76 	bl	800871c <VL53L0X_device_read_strobe>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c42:	461a      	mov	r2, r3
 8008c44:	2190      	movs	r1, #144	; 0x90
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f002 f94a 	bl	800aee0 <VL53L0X_RdDWord>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c54:	4313      	orrs	r3, r2
 8008c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	0e9b      	lsrs	r3, r3, #26
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c64:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c6a:	4413      	add	r3, r2
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	0cdb      	lsrs	r3, r3, #19
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	0b1b      	lsrs	r3, r3, #12
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008cac:	227a      	movs	r2, #122	; 0x7a
 8008cae:	2194      	movs	r1, #148	; 0x94
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f002 f831 	bl	800ad18 <VL53L0X_WrByte>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fd29 	bl	800871c <VL53L0X_device_read_strobe>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cdc:	461a      	mov	r2, r3
 8008cde:	2190      	movs	r1, #144	; 0x90
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f002 f8fd 	bl	800aee0 <VL53L0X_RdDWord>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	0f9b      	lsrs	r3, r3, #30
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfe:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d04:	4413      	add	r3, r2
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	0ddb      	lsrs	r3, r3, #23
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	0a5b      	lsrs	r3, r3, #9
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	089b      	lsrs	r3, r3, #2
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 80f1 	beq.w	8008f3a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d5c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f040 80ea 	bne.w	8008f3a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008d66:	227b      	movs	r2, #123	; 0x7b
 8008d68:	2194      	movs	r1, #148	; 0x94
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 ffd4 	bl	800ad18 <VL53L0X_WrByte>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fccc 	bl	800871c <VL53L0X_device_read_strobe>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d96:	461a      	mov	r2, r3
 8008d98:	2190      	movs	r1, #144	; 0x90
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f002 f8a0 	bl	800aee0 <VL53L0X_RdDWord>
 8008da0:	4603      	mov	r3, r0
 8008da2:	461a      	mov	r2, r3
 8008da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da8:	4313      	orrs	r3, r2
 8008daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008dae:	227c      	movs	r2, #124	; 0x7c
 8008db0:	2194      	movs	r1, #148	; 0x94
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 ffb0 	bl	800ad18 <VL53L0X_WrByte>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fca8 	bl	800871c <VL53L0X_device_read_strobe>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dde:	461a      	mov	r2, r3
 8008de0:	2190      	movs	r1, #144	; 0x90
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f002 f87c 	bl	800aee0 <VL53L0X_RdDWord>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008df0:	4313      	orrs	r3, r2
 8008df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008df6:	2273      	movs	r2, #115	; 0x73
 8008df8:	2194      	movs	r1, #148	; 0x94
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 ff8c 	bl	800ad18 <VL53L0X_WrByte>
 8008e00:	4603      	mov	r3, r0
 8008e02:	461a      	mov	r2, r3
 8008e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fc84 	bl	800871c <VL53L0X_device_read_strobe>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e26:	461a      	mov	r2, r3
 8008e28:	2190      	movs	r1, #144	; 0x90
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 f858 	bl	800aee0 <VL53L0X_RdDWord>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008e46:	2274      	movs	r2, #116	; 0x74
 8008e48:	2194      	movs	r1, #148	; 0x94
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 ff64 	bl	800ad18 <VL53L0X_WrByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff fc5c 	bl	800871c <VL53L0X_device_read_strobe>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e76:	461a      	mov	r2, r3
 8008e78:	2190      	movs	r1, #144	; 0x90
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f002 f830 	bl	800aee0 <VL53L0X_RdDWord>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008e92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e94:	4313      	orrs	r3, r2
 8008e96:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008e98:	2275      	movs	r2, #117	; 0x75
 8008e9a:	2194      	movs	r1, #148	; 0x94
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 ff3b 	bl	800ad18 <VL53L0X_WrByte>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff fc33 	bl	800871c <VL53L0X_device_read_strobe>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2190      	movs	r1, #144	; 0x90
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f002 f807 	bl	800aee0 <VL53L0X_RdDWord>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008ee8:	2276      	movs	r2, #118	; 0x76
 8008eea:	2194      	movs	r1, #148	; 0x94
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 ff13 	bl	800ad18 <VL53L0X_WrByte>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008efa:	4313      	orrs	r3, r2
 8008efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fc0b 	bl	800871c <VL53L0X_device_read_strobe>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2190      	movs	r1, #144	; 0x90
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 ffdf 	bl	800aee0 <VL53L0X_RdDWord>
 8008f22:	4603      	mov	r3, r0
 8008f24:	461a      	mov	r2, r3
 8008f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f36:	4313      	orrs	r3, r2
 8008f38:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2181      	movs	r1, #129	; 0x81
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 feea 	bl	800ad18 <VL53L0X_WrByte>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008f52:	2206      	movs	r2, #6
 8008f54:	21ff      	movs	r1, #255	; 0xff
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 fede 	bl	800ad18 <VL53L0X_WrByte>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008f6a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2183      	movs	r1, #131	; 0x83
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 ff52 	bl	800ae1c <VL53L0X_RdByte>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f80:	4313      	orrs	r3, r2
 8008f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008f86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f8a:	f023 0304 	bic.w	r3, r3, #4
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	2183      	movs	r1, #131	; 0x83
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 febf 	bl	800ad18 <VL53L0X_WrByte>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008fa8:	2201      	movs	r2, #1
 8008faa:	21ff      	movs	r1, #255	; 0xff
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 feb3 	bl	800ad18 <VL53L0X_WrByte>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fea7 	bl	800ad18 <VL53L0X_WrByte>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	21ff      	movs	r1, #255	; 0xff
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fe9b 	bl	800ad18 <VL53L0X_WrByte>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2180      	movs	r1, #128	; 0x80
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fe8f 	bl	800ad18 <VL53L0X_WrByte>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009002:	4313      	orrs	r3, r2
 8009004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009008:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 808f 	bne.w	8009130 <VL53L0X_get_info_from_device+0x98e>
 8009012:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009016:	2b07      	cmp	r3, #7
 8009018:	f000 808a 	beq.w	8009130 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d024      	beq.n	8009070 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800902a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800902e:	2b00      	cmp	r3, #0
 8009030:	d11e      	bne.n	8009070 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009038:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009042:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009046:	2300      	movs	r3, #0
 8009048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800904a:	e00e      	b.n	800906a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800904c:	f107 0208 	add.w	r2, r7, #8
 8009050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009052:	4413      	add	r3, r2
 8009054:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905a:	4413      	add	r3, r2
 800905c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009060:	460a      	mov	r2, r1
 8009062:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009066:	3301      	adds	r3, #1
 8009068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2b05      	cmp	r3, #5
 800906e:	dded      	ble.n	800904c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d018      	beq.n	80090ac <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800907a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800907e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009082:	2b00      	cmp	r3, #0
 8009084:	d112      	bne.n	80090ac <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009086:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009090:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	33f3      	adds	r3, #243	; 0xf3
 800909e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80090a0:	f107 0310 	add.w	r3, r7, #16
 80090a4:	4619      	mov	r1, r3
 80090a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090a8:	f002 fc30 	bl	800b90c <strcpy>

		}

		if (((option & 4) == 4) &&
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d030      	beq.n	8009118 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80090b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090ba:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d12a      	bne.n	8009118 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80090c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80090ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80090d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090d4:	025b      	lsls	r3, r3, #9
 80090d6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80090e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d011      	beq.n	8009110 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80090ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80090f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090fa:	fb02 f303 	mul.w	r3, r2, r3
 80090fe:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009100:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009104:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009108:	425b      	negs	r3, r3
 800910a:	b29b      	uxth	r3, r3
 800910c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009110:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009118:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	4313      	orrs	r3, r2
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009126:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009130:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009134:	4618      	mov	r0, r3
 8009136:	3760      	adds	r7, #96	; 0x60
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009148:	f240 6277 	movw	r2, #1655	; 0x677
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009154:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009158:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	fb02 f303 	mul.w	r3, r2, r3
 8009168:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800916a:	68bb      	ldr	r3, [r7, #8]
}
 800916c:	4618      	mov	r0, r3
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d017      	beq.n	80091c2 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3b01      	subs	r3, #1
 8009196:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009198:	e005      	b.n	80091a6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	085b      	lsrs	r3, r3, #1
 800919e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	3301      	adds	r3, #1
 80091a4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f4      	bne.n	800919a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80091be:	4413      	add	r3, r2
 80091c0:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80091c2:	8afb      	ldrh	r3, [r7, #22]

}
 80091c4:	4618      	mov	r0, r3
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80091e2:	88fa      	ldrh	r2, [r7, #6]
 80091e4:	0a12      	lsrs	r2, r2, #8
 80091e6:	b292      	uxth	r2, r2
 80091e8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80091ee:	68fb      	ldr	r3, [r7, #12]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	4619      	mov	r1, r3
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff ff92 	bl	800913c <VL53L0X_calc_macro_period_ps>
 8009218:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <VL53L0X_calc_timeout_mclks+0x50>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	099b      	lsrs	r3, r3, #6
 8009228:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009230:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	441a      	add	r2, r3
	timeout_period_mclks =
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009240:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009242:	69fb      	ldr	r3, [r7, #28]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	10624dd3 	.word	0x10624dd3

08009250 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	807b      	strh	r3, [r7, #2]
 800925c:	4613      	mov	r3, r2
 800925e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009264:	787b      	ldrb	r3, [r7, #1]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ff67 	bl	800913c <VL53L0X_calc_macro_period_ps>
 800926e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009276:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <VL53L0X_calc_timeout_us+0x50>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	099b      	lsrs	r3, r3, #6
 800927e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009280:	887b      	ldrh	r3, [r7, #2]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800928c:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <VL53L0X_calc_timeout_us+0x50>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	099b      	lsrs	r3, r3, #6
 8009294:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009296:	697b      	ldr	r3, [r7, #20]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	10624dd3 	.word	0x10624dd3

080092a4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08c      	sub	sp, #48	; 0x30
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	460b      	mov	r3, r1
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80092ca:	7afb      	ldrb	r3, [r7, #11]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <get_sequence_step_timeout+0x38>
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d002      	beq.n	80092dc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80092d6:	7afb      	ldrb	r3, [r7, #11]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d128      	bne.n	800932e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80092dc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80092e0:	461a      	mov	r2, r3
 80092e2:	2100      	movs	r1, #0
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f7fd fa4d 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80092f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d109      	bne.n	800930c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80092f8:	f107 0320 	add.w	r3, r7, #32
 80092fc:	461a      	mov	r2, r3
 80092fe:	2146      	movs	r1, #70	; 0x46
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f001 fd8b 	bl	800ae1c <VL53L0X_RdByte>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800930c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009310:	b29b      	uxth	r3, r3
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff ff5c 	bl	80091d0 <VL53L0X_decode_timeout>
 8009318:	4603      	mov	r3, r0
 800931a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800931c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009322:	4619      	mov	r1, r3
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff ff93 	bl	8009250 <VL53L0X_calc_timeout_us>
 800932a:	62b8      	str	r0, [r7, #40]	; 0x28
 800932c:	e092      	b.n	8009454 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d135      	bne.n	80093a0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009334:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009338:	461a      	mov	r2, r3
 800933a:	2100      	movs	r1, #0
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7fd fa21 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009348:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8081 	bne.w	8009454 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009352:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009356:	461a      	mov	r2, r3
 8009358:	2100      	movs	r1, #0
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7fd fa12 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009366:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800936e:	f107 031e 	add.w	r3, r7, #30
 8009372:	461a      	mov	r2, r3
 8009374:	2151      	movs	r1, #81	; 0x51
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f001 fd7a 	bl	800ae70 <VL53L0X_RdWord>
 800937c:	4603      	mov	r3, r0
 800937e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009382:	8bfb      	ldrh	r3, [r7, #30]
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff ff23 	bl	80091d0 <VL53L0X_decode_timeout>
 800938a:	4603      	mov	r3, r0
 800938c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800938e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009394:	4619      	mov	r1, r3
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff ff5a 	bl	8009250 <VL53L0X_calc_timeout_us>
 800939c:	62b8      	str	r0, [r7, #40]	; 0x28
 800939e:	e059      	b.n	8009454 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	d156      	bne.n	8009454 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	4619      	mov	r1, r3
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7fd faf5 	bl	800699c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01d      	beq.n	80093f8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80093bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80093c0:	461a      	mov	r2, r3
 80093c2:	2100      	movs	r1, #0
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7fd f9dd 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80093d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10f      	bne.n	80093f8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80093d8:	f107 031e 	add.w	r3, r7, #30
 80093dc:	461a      	mov	r2, r3
 80093de:	2151      	movs	r1, #81	; 0x51
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f001 fd45 	bl	800ae70 <VL53L0X_RdWord>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80093ec:	8bfb      	ldrh	r3, [r7, #30]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff feee 	bl	80091d0 <VL53L0X_decode_timeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80093f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009400:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009404:	461a      	mov	r2, r3
 8009406:	2101      	movs	r1, #1
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7fd f9bb 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 800940e:	4603      	mov	r3, r0
 8009410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009414:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10f      	bne.n	800943c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800941c:	f107 031c 	add.w	r3, r7, #28
 8009420:	461a      	mov	r2, r3
 8009422:	2171      	movs	r1, #113	; 0x71
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f001 fd23 	bl	800ae70 <VL53L0X_RdWord>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009430:	8bbb      	ldrh	r3, [r7, #28]
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fecc 	bl	80091d0 <VL53L0X_decode_timeout>
 8009438:	4603      	mov	r3, r0
 800943a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800943c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800943e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009444:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800944a:	4619      	mov	r1, r3
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f7ff feff 	bl	8009250 <VL53L0X_calc_timeout_us>
 8009452:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009458:	601a      	str	r2, [r3, #0]

	return Status;
 800945a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800945e:	4618      	mov	r0, r3
 8009460:	3730      	adds	r7, #48	; 0x30
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b08a      	sub	sp, #40	; 0x28
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	460b      	mov	r3, r1
 8009470:	607a      	str	r2, [r7, #4]
 8009472:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009474:	2300      	movs	r3, #0
 8009476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <set_sequence_step_timeout+0x26>
 8009480:	7afb      	ldrb	r3, [r7, #11]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d002      	beq.n	800948c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d138      	bne.n	80094fe <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800948c:	f107 031b 	add.w	r3, r7, #27
 8009490:	461a      	mov	r2, r3
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f7fd f975 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 800949a:	4603      	mov	r3, r0
 800949c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80094a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d11a      	bne.n	80094de <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80094a8:	7efb      	ldrb	r3, [r7, #27]
 80094aa:	461a      	mov	r2, r3
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7ff fea4 	bl	80091fc <VL53L0X_calc_timeout_mclks>
 80094b4:	4603      	mov	r3, r0
 80094b6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80094b8:	8bbb      	ldrh	r3, [r7, #28]
 80094ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094be:	d903      	bls.n	80094c8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80094c0:	23ff      	movs	r3, #255	; 0xff
 80094c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80094c6:	e004      	b.n	80094d2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80094c8:	8bbb      	ldrh	r3, [r7, #28]
 80094ca:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80094cc:	3b01      	subs	r3, #1
 80094ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80094d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80094de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 80ab 	bne.w	800963e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80094e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094ec:	461a      	mov	r2, r3
 80094ee:	2146      	movs	r1, #70	; 0x46
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f001 fc11 	bl	800ad18 <VL53L0X_WrByte>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80094fc:	e09f      	b.n	800963e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	2b03      	cmp	r3, #3
 8009502:	d135      	bne.n	8009570 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11b      	bne.n	8009544 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800950c:	f107 031b 	add.w	r3, r7, #27
 8009510:	461a      	mov	r2, r3
 8009512:	2100      	movs	r1, #0
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7fd f935 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009520:	7efb      	ldrb	r3, [r7, #27]
 8009522:	461a      	mov	r2, r3
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fe68 	bl	80091fc <VL53L0X_calc_timeout_mclks>
 800952c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800952e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fe20 	bl	8009178 <VL53L0X_encode_timeout>
 8009538:	4603      	mov	r3, r0
 800953a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800953c:	8b3a      	ldrh	r2, [r7, #24]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009544:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009548:	2b00      	cmp	r3, #0
 800954a:	d108      	bne.n	800955e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800954c:	8b3b      	ldrh	r3, [r7, #24]
 800954e:	461a      	mov	r2, r3
 8009550:	2151      	movs	r1, #81	; 0x51
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f001 fc04 	bl	800ad60 <VL53L0X_WrWord>
 8009558:	4603      	mov	r3, r0
 800955a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800955e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009562:	2b00      	cmp	r3, #0
 8009564:	d16b      	bne.n	800963e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800956e:	e066      	b.n	800963e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009570:	7afb      	ldrb	r3, [r7, #11]
 8009572:	2b04      	cmp	r3, #4
 8009574:	d160      	bne.n	8009638 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009576:	f107 0310 	add.w	r3, r7, #16
 800957a:	4619      	mov	r1, r3
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7fd fa0d 	bl	800699c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009586:	7cfb      	ldrb	r3, [r7, #19]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01d      	beq.n	80095c8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800958c:	f107 031b 	add.w	r3, r7, #27
 8009590:	461a      	mov	r2, r3
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7fd f8f5 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80095a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10f      	bne.n	80095c8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80095a8:	f107 0318 	add.w	r3, r7, #24
 80095ac:	461a      	mov	r2, r3
 80095ae:	2151      	movs	r1, #81	; 0x51
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 fc5d 	bl	800ae70 <VL53L0X_RdWord>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80095bc:	8b3b      	ldrh	r3, [r7, #24]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fe06 	bl	80091d0 <VL53L0X_decode_timeout>
 80095c4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80095c6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80095c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d109      	bne.n	80095e4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80095d0:	f107 031b 	add.w	r3, r7, #27
 80095d4:	461a      	mov	r2, r3
 80095d6:	2101      	movs	r1, #1
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7fd f8d3 	bl	8006784 <VL53L0X_GetVcselPulsePeriod>
 80095de:	4603      	mov	r3, r0
 80095e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80095e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d128      	bne.n	800963e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80095ec:	7efb      	ldrb	r3, [r7, #27]
 80095ee:	461a      	mov	r2, r3
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f7ff fe02 	bl	80091fc <VL53L0X_calc_timeout_mclks>
 80095f8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80095fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095fc:	6a3a      	ldr	r2, [r7, #32]
 80095fe:	4413      	add	r3, r2
 8009600:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009602:	6a38      	ldr	r0, [r7, #32]
 8009604:	f7ff fdb8 	bl	8009178 <VL53L0X_encode_timeout>
 8009608:	4603      	mov	r3, r0
 800960a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800960c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009614:	8bfb      	ldrh	r3, [r7, #30]
 8009616:	461a      	mov	r2, r3
 8009618:	2171      	movs	r1, #113	; 0x71
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f001 fba0 	bl	800ad60 <VL53L0X_WrWord>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009626:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800962a:	2b00      	cmp	r3, #0
 800962c:	d107      	bne.n	800963e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009636:	e002      	b.n	800963e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009638:	23fc      	movs	r3, #252	; 0xfc
 800963a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800963e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009642:	4618      	mov	r0, r3
 8009644:	3728      	adds	r7, #40	; 0x28
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b08a      	sub	sp, #40	; 0x28
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
 8009656:	4613      	mov	r3, r2
 8009658:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800965a:	2300      	movs	r3, #0
 800965c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009660:	230c      	movs	r3, #12
 8009662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009666:	2312      	movs	r3, #18
 8009668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800966c:	2308      	movs	r3, #8
 800966e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009672:	230e      	movs	r3, #14
 8009674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800967c:	78bb      	ldrb	r3, [r7, #2]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009688:	23fc      	movs	r3, #252	; 0xfc
 800968a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800968e:	e020      	b.n	80096d2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10d      	bne.n	80096b2 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009696:	78ba      	ldrb	r2, [r7, #2]
 8009698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800969c:	429a      	cmp	r2, r3
 800969e:	d304      	bcc.n	80096aa <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80096a0:	78ba      	ldrb	r2, [r7, #2]
 80096a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d903      	bls.n	80096b2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096aa:	23fc      	movs	r3, #252	; 0xfc
 80096ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096b0:	e00f      	b.n	80096d2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d10c      	bne.n	80096d2 <VL53L0X_set_vcsel_pulse_period+0x88>
 80096b8:	78ba      	ldrb	r2, [r7, #2]
 80096ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096be:	429a      	cmp	r2, r3
 80096c0:	d304      	bcc.n	80096cc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80096c2:	78ba      	ldrb	r2, [r7, #2]
 80096c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d902      	bls.n	80096d2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096cc:	23fc      	movs	r3, #252	; 0xfc
 80096ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80096d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80096da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096de:	e239      	b.n	8009b54 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d150      	bne.n	8009788 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80096e6:	78bb      	ldrb	r3, [r7, #2]
 80096e8:	2b0c      	cmp	r3, #12
 80096ea:	d110      	bne.n	800970e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80096ec:	2218      	movs	r2, #24
 80096ee:	2157      	movs	r1, #87	; 0x57
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 fb11 	bl	800ad18 <VL53L0X_WrByte>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80096fc:	2208      	movs	r2, #8
 80096fe:	2156      	movs	r1, #86	; 0x56
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f001 fb09 	bl	800ad18 <VL53L0X_WrByte>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800970c:	e17f      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800970e:	78bb      	ldrb	r3, [r7, #2]
 8009710:	2b0e      	cmp	r3, #14
 8009712:	d110      	bne.n	8009736 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009714:	2230      	movs	r2, #48	; 0x30
 8009716:	2157      	movs	r1, #87	; 0x57
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fafd 	bl	800ad18 <VL53L0X_WrByte>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009724:	2208      	movs	r2, #8
 8009726:	2156      	movs	r1, #86	; 0x56
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 faf5 	bl	800ad18 <VL53L0X_WrByte>
 800972e:	4603      	mov	r3, r0
 8009730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009734:	e16b      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009736:	78bb      	ldrb	r3, [r7, #2]
 8009738:	2b10      	cmp	r3, #16
 800973a:	d110      	bne.n	800975e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800973c:	2240      	movs	r2, #64	; 0x40
 800973e:	2157      	movs	r1, #87	; 0x57
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f001 fae9 	bl	800ad18 <VL53L0X_WrByte>
 8009746:	4603      	mov	r3, r0
 8009748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800974c:	2208      	movs	r2, #8
 800974e:	2156      	movs	r1, #86	; 0x56
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fae1 	bl	800ad18 <VL53L0X_WrByte>
 8009756:	4603      	mov	r3, r0
 8009758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800975c:	e157      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800975e:	78bb      	ldrb	r3, [r7, #2]
 8009760:	2b12      	cmp	r3, #18
 8009762:	f040 8154 	bne.w	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009766:	2250      	movs	r2, #80	; 0x50
 8009768:	2157      	movs	r1, #87	; 0x57
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 fad4 	bl	800ad18 <VL53L0X_WrByte>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009776:	2208      	movs	r2, #8
 8009778:	2156      	movs	r1, #86	; 0x56
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 facc 	bl	800ad18 <VL53L0X_WrByte>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009786:	e142      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	2b01      	cmp	r3, #1
 800978c:	f040 813f 	bne.w	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009790:	78bb      	ldrb	r3, [r7, #2]
 8009792:	2b08      	cmp	r3, #8
 8009794:	d14c      	bne.n	8009830 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009796:	2210      	movs	r2, #16
 8009798:	2148      	movs	r1, #72	; 0x48
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fabc 	bl	800ad18 <VL53L0X_WrByte>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80097a6:	2208      	movs	r2, #8
 80097a8:	2147      	movs	r1, #71	; 0x47
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 fab4 	bl	800ad18 <VL53L0X_WrByte>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80097b6:	2202      	movs	r2, #2
 80097b8:	2132      	movs	r1, #50	; 0x32
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 faac 	bl	800ad18 <VL53L0X_WrByte>
 80097c0:	4603      	mov	r3, r0
 80097c2:	461a      	mov	r2, r3
 80097c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80097ce:	220c      	movs	r2, #12
 80097d0:	2130      	movs	r1, #48	; 0x30
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 faa0 	bl	800ad18 <VL53L0X_WrByte>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097e0:	4313      	orrs	r3, r2
 80097e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80097e6:	2201      	movs	r2, #1
 80097e8:	21ff      	movs	r1, #255	; 0xff
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fa94 	bl	800ad18 <VL53L0X_WrByte>
 80097f0:	4603      	mov	r3, r0
 80097f2:	461a      	mov	r2, r3
 80097f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f8:	4313      	orrs	r3, r2
 80097fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80097fe:	2230      	movs	r2, #48	; 0x30
 8009800:	2130      	movs	r1, #48	; 0x30
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 fa88 	bl	800ad18 <VL53L0X_WrByte>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009810:	4313      	orrs	r3, r2
 8009812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009816:	2200      	movs	r2, #0
 8009818:	21ff      	movs	r1, #255	; 0xff
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fa7c 	bl	800ad18 <VL53L0X_WrByte>
 8009820:	4603      	mov	r3, r0
 8009822:	461a      	mov	r2, r3
 8009824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009828:	4313      	orrs	r3, r2
 800982a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800982e:	e0ee      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009830:	78bb      	ldrb	r3, [r7, #2]
 8009832:	2b0a      	cmp	r3, #10
 8009834:	d14c      	bne.n	80098d0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009836:	2228      	movs	r2, #40	; 0x28
 8009838:	2148      	movs	r1, #72	; 0x48
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 fa6c 	bl	800ad18 <VL53L0X_WrByte>
 8009840:	4603      	mov	r3, r0
 8009842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009846:	2208      	movs	r2, #8
 8009848:	2147      	movs	r1, #71	; 0x47
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f001 fa64 	bl	800ad18 <VL53L0X_WrByte>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009856:	2203      	movs	r2, #3
 8009858:	2132      	movs	r1, #50	; 0x32
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 fa5c 	bl	800ad18 <VL53L0X_WrByte>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009868:	4313      	orrs	r3, r2
 800986a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800986e:	2209      	movs	r2, #9
 8009870:	2130      	movs	r1, #48	; 0x30
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 fa50 	bl	800ad18 <VL53L0X_WrByte>
 8009878:	4603      	mov	r3, r0
 800987a:	461a      	mov	r2, r3
 800987c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009880:	4313      	orrs	r3, r2
 8009882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009886:	2201      	movs	r2, #1
 8009888:	21ff      	movs	r1, #255	; 0xff
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 fa44 	bl	800ad18 <VL53L0X_WrByte>
 8009890:	4603      	mov	r3, r0
 8009892:	461a      	mov	r2, r3
 8009894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009898:	4313      	orrs	r3, r2
 800989a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800989e:	2220      	movs	r2, #32
 80098a0:	2130      	movs	r1, #48	; 0x30
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 fa38 	bl	800ad18 <VL53L0X_WrByte>
 80098a8:	4603      	mov	r3, r0
 80098aa:	461a      	mov	r2, r3
 80098ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098b0:	4313      	orrs	r3, r2
 80098b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80098b6:	2200      	movs	r2, #0
 80098b8:	21ff      	movs	r1, #255	; 0xff
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fa2c 	bl	800ad18 <VL53L0X_WrByte>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c8:	4313      	orrs	r3, r2
 80098ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098ce:	e09e      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80098d0:	78bb      	ldrb	r3, [r7, #2]
 80098d2:	2b0c      	cmp	r3, #12
 80098d4:	d14c      	bne.n	8009970 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80098d6:	2238      	movs	r2, #56	; 0x38
 80098d8:	2148      	movs	r1, #72	; 0x48
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fa1c 	bl	800ad18 <VL53L0X_WrByte>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80098e6:	2208      	movs	r2, #8
 80098e8:	2147      	movs	r1, #71	; 0x47
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f001 fa14 	bl	800ad18 <VL53L0X_WrByte>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80098f6:	2203      	movs	r2, #3
 80098f8:	2132      	movs	r1, #50	; 0x32
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fa0c 	bl	800ad18 <VL53L0X_WrByte>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009908:	4313      	orrs	r3, r2
 800990a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800990e:	2208      	movs	r2, #8
 8009910:	2130      	movs	r1, #48	; 0x30
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 fa00 	bl	800ad18 <VL53L0X_WrByte>
 8009918:	4603      	mov	r3, r0
 800991a:	461a      	mov	r2, r3
 800991c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009920:	4313      	orrs	r3, r2
 8009922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009926:	2201      	movs	r2, #1
 8009928:	21ff      	movs	r1, #255	; 0xff
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 f9f4 	bl	800ad18 <VL53L0X_WrByte>
 8009930:	4603      	mov	r3, r0
 8009932:	461a      	mov	r2, r3
 8009934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009938:	4313      	orrs	r3, r2
 800993a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800993e:	2220      	movs	r2, #32
 8009940:	2130      	movs	r1, #48	; 0x30
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 f9e8 	bl	800ad18 <VL53L0X_WrByte>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009950:	4313      	orrs	r3, r2
 8009952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009956:	2200      	movs	r2, #0
 8009958:	21ff      	movs	r1, #255	; 0xff
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 f9dc 	bl	800ad18 <VL53L0X_WrByte>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009968:	4313      	orrs	r3, r2
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800996e:	e04e      	b.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009970:	78bb      	ldrb	r3, [r7, #2]
 8009972:	2b0e      	cmp	r3, #14
 8009974:	d14b      	bne.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009976:	2248      	movs	r2, #72	; 0x48
 8009978:	2148      	movs	r1, #72	; 0x48
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f001 f9cc 	bl	800ad18 <VL53L0X_WrByte>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009986:	2208      	movs	r2, #8
 8009988:	2147      	movs	r1, #71	; 0x47
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 f9c4 	bl	800ad18 <VL53L0X_WrByte>
 8009990:	4603      	mov	r3, r0
 8009992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009996:	2203      	movs	r2, #3
 8009998:	2132      	movs	r1, #50	; 0x32
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 f9bc 	bl	800ad18 <VL53L0X_WrByte>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461a      	mov	r2, r3
 80099a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a8:	4313      	orrs	r3, r2
 80099aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80099ae:	2207      	movs	r2, #7
 80099b0:	2130      	movs	r1, #48	; 0x30
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 f9b0 	bl	800ad18 <VL53L0X_WrByte>
 80099b8:	4603      	mov	r3, r0
 80099ba:	461a      	mov	r2, r3
 80099bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c0:	4313      	orrs	r3, r2
 80099c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80099c6:	2201      	movs	r2, #1
 80099c8:	21ff      	movs	r1, #255	; 0xff
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 f9a4 	bl	800ad18 <VL53L0X_WrByte>
 80099d0:	4603      	mov	r3, r0
 80099d2:	461a      	mov	r2, r3
 80099d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099d8:	4313      	orrs	r3, r2
 80099da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80099de:	2220      	movs	r2, #32
 80099e0:	2130      	movs	r1, #48	; 0x30
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 f998 	bl	800ad18 <VL53L0X_WrByte>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80099f6:	2200      	movs	r2, #0
 80099f8:	21ff      	movs	r1, #255	; 0xff
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 f98c 	bl	800ad18 <VL53L0X_WrByte>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009a0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d17f      	bne.n	8009b16 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009a16:	78bb      	ldrb	r3, [r7, #2]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fe38 	bl	800868e <VL53L0X_encode_vcsel_period>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d045      	beq.n	8009aba <VL53L0X_set_vcsel_pulse_period+0x470>
 8009a2e:	e06e      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009a30:	f107 0314 	add.w	r3, r7, #20
 8009a34:	461a      	mov	r2, r3
 8009a36:	2103      	movs	r1, #3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fc33 	bl	80092a4 <get_sequence_step_timeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009a44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d109      	bne.n	8009a60 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009a4c:	f107 0310 	add.w	r3, r7, #16
 8009a50:	461a      	mov	r2, r3
 8009a52:	2102      	movs	r1, #2
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff fc25 	bl	80092a4 <get_sequence_step_timeout>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d109      	bne.n	8009a7c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009a68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2150      	movs	r1, #80	; 0x50
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 f951 	bl	800ad18 <VL53L0X_WrByte>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d108      	bne.n	8009a96 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	461a      	mov	r2, r3
 8009a88:	2103      	movs	r1, #3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fceb 	bl	8009466 <set_sequence_step_timeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d108      	bne.n	8009ab0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fcde 	bl	8009466 <set_sequence_step_timeout>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	78ba      	ldrb	r2, [r7, #2]
 8009ab4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009ab8:	e02e      	b.n	8009b18 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009aba:	f107 0318 	add.w	r3, r7, #24
 8009abe:	461a      	mov	r2, r3
 8009ac0:	2104      	movs	r1, #4
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff fbee 	bl	80092a4 <get_sequence_step_timeout>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009ace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009ad6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009ada:	461a      	mov	r2, r3
 8009adc:	2170      	movs	r1, #112	; 0x70
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 f91a 	bl	800ad18 <VL53L0X_WrByte>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009aea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d108      	bne.n	8009b04 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	461a      	mov	r2, r3
 8009af6:	2104      	movs	r1, #4
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff fcb4 	bl	8009466 <set_sequence_step_timeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	78ba      	ldrb	r2, [r7, #2]
 8009b08:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009b0c:	e004      	b.n	8009b18 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b0e:	23fc      	movs	r3, #252	; 0xfc
 8009b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b14:	e000      	b.n	8009b18 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009b16:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d109      	bne.n	8009b34 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009b26:	69f9      	ldr	r1, [r7, #28]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fc fded 	bl	8006708 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009b3c:	f107 010f 	add.w	r1, r7, #15
 8009b40:	2301      	movs	r3, #1
 8009b42:	2200      	movs	r2, #0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7fe fcbd 	bl	80084c4 <VL53L0X_perform_phase_calibration>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3728      	adds	r7, #40	; 0x28
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	460b      	mov	r3, r1
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d00a      	beq.n	8009b8e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009b78:	e013      	b.n	8009ba2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009b7a:	f107 0316 	add.w	r3, r7, #22
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2150      	movs	r1, #80	; 0x50
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f001 f94a 	bl	800ae1c <VL53L0X_RdByte>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009b8c:	e00b      	b.n	8009ba6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009b8e:	f107 0316 	add.w	r3, r7, #22
 8009b92:	461a      	mov	r2, r3
 8009b94:	2170      	movs	r1, #112	; 0x70
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f001 f940 	bl	800ae1c <VL53L0X_RdByte>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009ba0:	e001      	b.n	8009ba6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ba2:	23fc      	movs	r3, #252	; 0xfc
 8009ba4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d107      	bne.n	8009bbe <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009bae:	7dbb      	ldrb	r3, [r7, #22]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fd59 	bl	8008668 <VL53L0X_decode_vcsel_period>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	701a      	strb	r2, [r3, #0]

	return Status;
 8009bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b092      	sub	sp, #72	; 0x48
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009bda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009bde:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009be0:	f240 7376 	movw	r3, #1910	; 0x776
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009be6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009bea:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009bec:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009bf2:	f240 234e 	movw	r3, #590	; 0x24e
 8009bf6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009bf8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009bfe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009c04:	f240 2326 	movw	r3, #550	; 0x226
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009c0e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009c12:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d205      	bcs.n	8009c2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c20:	23fc      	movs	r3, #252	; 0xfc
 8009c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009c26:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009c2a:	e0aa      	b.n	8009d82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009c38:	f107 0314 	add.w	r3, r7, #20
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7fc feac 	bl	800699c <VL53L0X_GetSequenceStepEnables>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009c4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d15b      	bne.n	8009d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009c52:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d105      	bne.n	8009c64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009c58:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009c5e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d052      	beq.n	8009d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009c64:	f107 0310 	add.w	r3, r7, #16
 8009c68:	461a      	mov	r2, r3
 8009c6a:	2102      	movs	r1, #2
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fb19 	bl	80092a4 <get_sequence_step_timeout>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009c78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009c80:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009c84:	e07d      	b.n	8009d82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009c86:	7d3b      	ldrb	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00f      	beq.n	8009cac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009c8c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c90:	4413      	add	r3, r2
 8009c92:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009c94:	69fa      	ldr	r2, [r7, #28]
 8009c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d204      	bcs.n	8009ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ca4:	e002      	b.n	8009cac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ca6:	23fc      	movs	r3, #252	; 0xfc
 8009ca8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009cac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d002      	beq.n	8009cba <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009cb4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009cb8:	e063      	b.n	8009d82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009cba:	7dbb      	ldrb	r3, [r7, #22]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d011      	beq.n	8009ce4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	4413      	add	r3, r2
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d204      	bcs.n	8009cdc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009cd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8009cda:	e016      	b.n	8009d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009cdc:	23fc      	movs	r3, #252	; 0xfc
 8009cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ce2:	e012      	b.n	8009d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009ce4:	7d7b      	ldrb	r3, [r7, #21]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00f      	beq.n	8009d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cee:	4413      	add	r3, r2
 8009cf0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d204      	bcs.n	8009d04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	643b      	str	r3, [r7, #64]	; 0x40
 8009d02:	e002      	b.n	8009d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d04:	23fc      	movs	r3, #252	; 0xfc
 8009d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009d0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009d12:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009d16:	e034      	b.n	8009d82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d019      	beq.n	8009d52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009d1e:	f107 030c 	add.w	r3, r7, #12
 8009d22:	461a      	mov	r2, r3
 8009d24:	2103      	movs	r1, #3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fabc 	bl	80092a4 <get_sequence_step_timeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d36:	4413      	add	r3, r2
 8009d38:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d204      	bcs.n	8009d4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	643b      	str	r3, [r7, #64]	; 0x40
 8009d4a:	e002      	b.n	8009d52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d4c:	23fc      	movs	r3, #252	; 0xfc
 8009d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009d52:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d111      	bne.n	8009d7e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009d5a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00e      	beq.n	8009d7e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d6a:	2104      	movs	r1, #4
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff fb7a 	bl	8009466 <set_sequence_step_timeout>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009d7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3748      	adds	r7, #72	; 0x48
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b090      	sub	sp, #64	; 0x40
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009d9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009d9e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009da0:	f240 7376 	movw	r3, #1910	; 0x776
 8009da4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009da6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009daa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009dac:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009db0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009db2:	f240 234e 	movw	r3, #590	; 0x24e
 8009db6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009db8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009dbe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009dc4:	f240 2326 	movw	r3, #550	; 0x226
 8009dc8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd2:	441a      	add	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009dd8:	f107 0318 	add.w	r3, r7, #24
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7fc fddc 	bl	800699c <VL53L0X_GetSequenceStepEnables>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009dea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009df2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009df6:	e075      	b.n	8009ee4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009df8:	7e3b      	ldrb	r3, [r7, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d105      	bne.n	8009e0a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009dfe:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009e04:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d030      	beq.n	8009e6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009e0a:	f107 0310 	add.w	r3, r7, #16
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2102      	movs	r1, #2
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fa46 	bl	80092a4 <get_sequence_step_timeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009e1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d122      	bne.n	8009e6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009e26:	7e3b      	ldrb	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009e30:	6939      	ldr	r1, [r7, #16]
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009e36:	441a      	add	r2, r3
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009e3c:	7ebb      	ldrb	r3, [r7, #26]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d009      	beq.n	8009e56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009e46:	6939      	ldr	r1, [r7, #16]
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	440b      	add	r3, r1
 8009e4c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009e4e:	441a      	add	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e00a      	b.n	8009e6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009e56:	7e7b      	ldrb	r3, [r7, #25]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d007      	beq.n	8009e6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009e60:	6939      	ldr	r1, [r7, #16]
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009e66:	441a      	add	r2, r3
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d114      	bne.n	8009e9e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009e74:	7efb      	ldrb	r3, [r7, #27]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009e7a:	f107 030c 	add.w	r3, r7, #12
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2103      	movs	r1, #3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fa0e 	bl	80092a4 <get_sequence_step_timeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009e92:	68f9      	ldr	r1, [r7, #12]
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009e98:	441a      	add	r2, r3
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d114      	bne.n	8009ed0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009ea6:	7f3b      	ldrb	r3, [r7, #28]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d011      	beq.n	8009ed0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009eac:	f107 0314 	add.w	r3, r7, #20
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	2104      	movs	r1, #4
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff f9f5 	bl	80092a4 <get_sequence_step_timeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009ec4:	6979      	ldr	r1, [r7, #20]
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009eca:	441a      	add	r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ed0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ee0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3740      	adds	r7, #64	; 0x40
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009efe:	e0c6      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	4413      	add	r3, r2
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009f10:	7cfb      	ldrb	r3, [r7, #19]
 8009f12:	2bff      	cmp	r3, #255	; 0xff
 8009f14:	f040 808d 	bne.w	800a032 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	747b      	strb	r3, [r7, #17]
			Index++;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	3301      	adds	r3, #1
 8009f26:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009f28:	7c7b      	ldrb	r3, [r7, #17]
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d87e      	bhi.n	800a02c <VL53L0X_load_tuning_settings+0x140>
 8009f2e:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <VL53L0X_load_tuning_settings+0x48>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009f45 	.word	0x08009f45
 8009f38:	08009f7f 	.word	0x08009f7f
 8009f3c:	08009fb9 	.word	0x08009fb9
 8009f40:	08009ff3 	.word	0x08009ff3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	4413      	add	r3, r2
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	743b      	strb	r3, [r7, #16]
				Index++;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	3301      	adds	r3, #1
 8009f52:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4413      	add	r3, r2
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	3301      	adds	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009f64:	7c3b      	ldrb	r3, [r7, #16]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	4413      	add	r3, r2
 8009f72:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	89ba      	ldrh	r2, [r7, #12]
 8009f78:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009f7c:	e087      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	4413      	add	r3, r2
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	743b      	strb	r3, [r7, #16]
				Index++;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	4413      	add	r3, r2
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009f9e:	7c3b      	ldrb	r3, [r7, #16]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4413      	add	r3, r2
 8009fac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	89ba      	ldrh	r2, [r7, #12]
 8009fb2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009fb6:	e06a      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	743b      	strb	r3, [r7, #16]
				Index++;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	4413      	add	r3, r2
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009fd8:	7c3b      	ldrb	r3, [r7, #16]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	4413      	add	r3, r2
 8009fe6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	89ba      	ldrh	r2, [r7, #12]
 8009fec:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009ff0:	e04d      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	743b      	strb	r3, [r7, #16]
				Index++;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	3301      	adds	r3, #1
 800a000:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4413      	add	r3, r2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	3301      	adds	r3, #1
 800a010:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a012:	7c3b      	ldrb	r3, [r7, #16]
 800a014:	b29b      	uxth	r3, r3
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	b29a      	uxth	r2, r3
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	4413      	add	r3, r2
 800a020:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	89ba      	ldrh	r2, [r7, #12]
 800a026:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a02a:	e030      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a02c:	23fc      	movs	r3, #252	; 0xfc
 800a02e:	77fb      	strb	r3, [r7, #31]
 800a030:	e02d      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a032:	7cfb      	ldrb	r3, [r7, #19]
 800a034:	2b04      	cmp	r3, #4
 800a036:	d828      	bhi.n	800a08a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	4413      	add	r3, r2
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	3301      	adds	r3, #1
 800a046:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a048:	2300      	movs	r3, #0
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	e00f      	b.n	800a06e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	4413      	add	r3, r2
 800a054:	7819      	ldrb	r1, [r3, #0]
 800a056:	f107 0208 	add.w	r2, r7, #8
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	4413      	add	r3, r2
 800a05e:	460a      	mov	r2, r1
 800a060:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	3301      	adds	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	3301      	adds	r3, #1
 800a06c:	61bb      	str	r3, [r7, #24]
 800a06e:	7cfb      	ldrb	r3, [r7, #19]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	429a      	cmp	r2, r3
 800a074:	dbeb      	blt.n	800a04e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a076:	7cfb      	ldrb	r3, [r7, #19]
 800a078:	f107 0208 	add.w	r2, r7, #8
 800a07c:	7cb9      	ldrb	r1, [r7, #18]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fdee 	bl	800ac60 <VL53L0X_WriteMulti>
 800a084:	4603      	mov	r3, r0
 800a086:	77fb      	strb	r3, [r7, #31]
 800a088:	e001      	b.n	800a08e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a08a:	23fc      	movs	r3, #252	; 0xfc
 800a08c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	4413      	add	r3, r2
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d004      	beq.n	800a0a4 <VL53L0X_load_tuning_settings+0x1b8>
 800a09a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f43f af2e 	beq.w	8009f00 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3720      	adds	r7, #32
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a0c6:	f107 0313 	add.w	r3, r7, #19
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7fc fcf1 	bl	8006ab4 <VL53L0X_GetXTalkCompensationEnable>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a0d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d111      	bne.n	800a102 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a0de:	7cfb      	ldrb	r3, [r7, #19]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00e      	beq.n	800a102 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	8a9b      	ldrh	r3, [r3, #20]
 800a0ee:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	3380      	adds	r3, #128	; 0x80
 800a0fc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a102:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b086      	sub	sp, #24
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	461a      	mov	r2, r3
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff ffbe 	bl	800a0b0 <VL53L0X_get_total_xtalk_rate>
 800a134:	4603      	mov	r3, r0
 800a136:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d105      	bne.n	800a14c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	441a      	add	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	601a      	str	r2, [r3, #0]

	return Status;
 800a14c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b09a      	sub	sp, #104	; 0x68
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a166:	2312      	movs	r3, #18
 800a168:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a16a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a16e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a170:	2342      	movs	r3, #66	; 0x42
 800a172:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a174:	2306      	movs	r3, #6
 800a176:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a178:	2307      	movs	r3, #7
 800a17a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a190:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a196:	fb02 f303 	mul.w	r3, r2, r3
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19e:	3380      	adds	r3, #128	; 0x80
 800a1a0:	0a1b      	lsrs	r3, r3, #8
 800a1a2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a8:	fb02 f303 	mul.w	r3, r2, r3
 800a1ac:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01a      	beq.n	800a1ee <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	029b      	lsls	r3, r3, #10
 800a1bc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a1c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c4:	4413      	add	r3, r2
 800a1c6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a1c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a1d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	4413      	add	r3, r2
 800a1da:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1de:	fb03 f303 	mul.w	r3, r3, r3
 800a1e2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a1ea:	0c1b      	lsrs	r3, r3, #16
 800a1ec:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
 800a1f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a1fe:	0c1b      	lsrs	r3, r3, #16
 800a200:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	fb03 f303 	mul.w	r3, r3, r3
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a20a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a20c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a216:	085a      	lsrs	r2, r3, #1
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	441a      	add	r2, r3
 800a21c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a234:	d302      	bcc.n	800a23c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a236:	4b54      	ldr	r3, [pc, #336]	; (800a388 <VL53L0X_calc_dmax+0x230>)
 800a238:	663b      	str	r3, [r7, #96]	; 0x60
 800a23a:	e015      	b.n	800a268 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a23c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a23e:	085a      	lsrs	r2, r3, #1
 800a240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a242:	441a      	add	r2, r3
 800a244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a246:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a24c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a24e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a250:	fb02 f303 	mul.w	r3, r2, r3
 800a254:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a258:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a25c:	0c1b      	lsrs	r3, r3, #16
 800a25e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a262:	fb03 f303 	mul.w	r3, r3, r3
 800a266:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a26a:	039b      	lsls	r3, r3, #14
 800a26c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a270:	4a46      	ldr	r2, [pc, #280]	; (800a38c <VL53L0X_calc_dmax+0x234>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	099b      	lsrs	r3, r3, #6
 800a278:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	fb03 f303 	mul.w	r3, r3, r3
 800a280:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a284:	fb03 f303 	mul.w	r3, r3, r3
 800a288:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	3308      	adds	r3, #8
 800a28e:	091b      	lsrs	r3, r3, #4
 800a290:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29c:	4613      	mov	r3, r2
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	4413      	add	r3, r2
 800a2a2:	011b      	lsls	r3, r3, #4
 800a2a4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a2ac:	0b9b      	lsrs	r3, r3, #14
 800a2ae:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2b4:	4413      	add	r3, r2
 800a2b6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a2b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ba:	085b      	lsrs	r3, r3, #1
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	4413      	add	r3, r2
 800a2c0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ca:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	039b      	lsls	r3, r3, #14
 800a2d0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	085b      	lsrs	r3, r3, #1
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	4413      	add	r3, r2
 800a2da:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2ea:	fb02 f303 	mul.w	r3, r2, r3
 800a2ee:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a2f6:	4a25      	ldr	r2, [pc, #148]	; (800a38c <VL53L0X_calc_dmax+0x234>)
 800a2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fc:	099b      	lsrs	r3, r3, #6
 800a2fe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a30c:	4a1f      	ldr	r2, [pc, #124]	; (800a38c <VL53L0X_calc_dmax+0x234>)
 800a30e:	fba2 2303 	umull	r2, r3, r2, r3
 800a312:	099b      	lsrs	r3, r3, #6
 800a314:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a318:	3380      	adds	r3, #128	; 0x80
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	085a      	lsrs	r2, r3, #1
 800a328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32a:	441a      	add	r2, r3
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a332:	65bb      	str	r3, [r7, #88]	; 0x58
 800a334:	e001      	b.n	800a33a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a33a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a33c:	f7fe f9ba 	bl	80086b4 <VL53L0X_isqrt>
 800a340:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	085a      	lsrs	r2, r3, #1
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	441a      	add	r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	fbb2 f3f3 	udiv	r3, r2, r3
 800a356:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a358:	e001      	b.n	800a35e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a35e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a360:	f7fe f9a8 	bl	80086b4 <VL53L0X_isqrt>
 800a364:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a370:	429a      	cmp	r2, r3
 800a372:	d902      	bls.n	800a37a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a376:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a378:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a37a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3768      	adds	r7, #104	; 0x68
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	fff00000 	.word	0xfff00000
 800a38c:	10624dd3 	.word	0x10624dd3

0800a390 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b0b4      	sub	sp, #208	; 0xd0
 800a394:	af04      	add	r7, sp, #16
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a39e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a3a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a3a6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a3aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a3ae:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a3b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a3b6:	f241 235c 	movw	r3, #4700	; 0x125c
 800a3ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a3be:	4b9e      	ldr	r3, [pc, #632]	; (800a638 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a3c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a3c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a3c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a3ca:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a3ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a3d8:	4b98      	ldr	r3, [pc, #608]	; (800a63c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a3da:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a3dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a3e2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a3e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a3e8:	f240 6377 	movw	r3, #1655	; 0x677
 800a3ec:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a402:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a406:	0c1b      	lsrs	r3, r3, #16
 800a408:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a410:	f107 0310 	add.w	r3, r7, #16
 800a414:	461a      	mov	r2, r3
 800a416:	68b9      	ldr	r1, [r7, #8]
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fe78 	bl	800a10e <VL53L0X_get_total_signal_rate>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a424:	f107 0314 	add.w	r3, r7, #20
 800a428:	461a      	mov	r2, r3
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff fe3f 	bl	800a0b0 <VL53L0X_get_total_xtalk_rate>
 800a432:	4603      	mov	r3, r0
 800a434:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a43e:	fb02 f303 	mul.w	r3, r2, r3
 800a442:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a446:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a44a:	0c1b      	lsrs	r3, r3, #16
 800a44c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a454:	fb02 f303 	mul.w	r3, r2, r3
 800a458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a45c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	429a      	cmp	r2, r3
 800a464:	d902      	bls.n	800a46c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a46c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a470:	2b00      	cmp	r3, #0
 800a472:	d168      	bne.n	800a546 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a47a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a484:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a488:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a48c:	461a      	mov	r2, r3
 800a48e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7fe feb2 	bl	80091fc <VL53L0X_calc_timeout_mclks>
 800a498:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a4a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a4aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a4ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7fe fe9f 	bl	80091fc <VL53L0X_calc_timeout_mclks>
 800a4be:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a4c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a4ca:	2b08      	cmp	r3, #8
 800a4cc:	d102      	bne.n	800a4d4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a4d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a4da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
 800a4e2:	02db      	lsls	r3, r3, #11
 800a4e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a4e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a4ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a4f0:	4a53      	ldr	r2, [pc, #332]	; (800a640 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f6:	099b      	lsrs	r3, r3, #6
 800a4f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a4fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a500:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a502:	fb02 f303 	mul.w	r3, r2, r3
 800a506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a50a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a50e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a512:	4a4b      	ldr	r2, [pc, #300]	; (800a640 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a514:	fba2 2303 	umull	r2, r3, r2, r3
 800a518:	099b      	lsrs	r3, r3, #6
 800a51a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	3380      	adds	r3, #128	; 0x80
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a538:	3380      	adds	r3, #128	; 0x80
 800a53a:	0a1b      	lsrs	r3, r3, #8
 800a53c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a546:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a54e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a552:	e15e      	b.n	800a812 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10c      	bne.n	800a574 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a560:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a568:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	e14c      	b.n	800a80e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a586:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58a:	041a      	lsls	r2, r3, #16
 800a58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a59a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d902      	bls.n	800a5a6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a5a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a5a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a5aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a5ae:	fb02 f303 	mul.w	r3, r2, r3
 800a5b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a5b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe f876 	bl	80086b4 <VL53L0X_isqrt>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	891b      	ldrh	r3, [r3, #8]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5d6:	fb02 f303 	mul.w	r3, r2, r3
 800a5da:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a5dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5de:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a5e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5e4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a5e6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a5e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a5ec:	4a14      	ldr	r2, [pc, #80]	; (800a640 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f2:	099b      	lsrs	r3, r3, #6
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a5f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5f8:	041b      	lsls	r3, r3, #16
 800a5fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5fe:	4a10      	ldr	r2, [pc, #64]	; (800a640 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a600:	fba2 2303 	umull	r2, r3, r2, r3
 800a604:	099b      	lsrs	r3, r3, #6
 800a606:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60a:	021b      	lsls	r3, r3, #8
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a60e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	fbb2 f3f3 	udiv	r3, r2, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfb8      	it	lt
 800a61a:	425b      	neglt	r3, r3
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	7e1b      	ldrb	r3, [r3, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a62c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a634:	e033      	b.n	800a69e <VL53L0X_calc_sigma_estimate+0x30e>
 800a636:	bf00      	nop
 800a638:	028f87ae 	.word	0x028f87ae
 800a63c:	0006999a 	.word	0x0006999a
 800a640:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a654:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a66a:	4413      	add	r3, r2
 800a66c:	0c1b      	lsrs	r3, r3, #16
 800a66e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a676:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a67a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a67e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a682:	085b      	lsrs	r3, r3, #1
 800a684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a68c:	fb03 f303 	mul.w	r3, r3, r3
 800a690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a698:	0b9b      	lsrs	r3, r3, #14
 800a69a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a69e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a6b0:	0c1b      	lsrs	r3, r3, #16
 800a6b2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	fb03 f303 	mul.w	r3, r3, r3
 800a6ba:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a6bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a6c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	fb03 f303 	mul.w	r3, r3, r3
 800a6d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	4413      	add	r3, r2
 800a6da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6de:	f7fd ffe9 	bl	80086b4 <VL53L0X_isqrt>
 800a6e2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	3332      	adds	r3, #50	; 0x32
 800a6ee:	4a4b      	ldr	r2, [pc, #300]	; (800a81c <VL53L0X_calc_sigma_estimate+0x48c>)
 800a6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f4:	095a      	lsrs	r2, r3, #5
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a704:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a708:	fb02 f303 	mul.w	r3, r2, r3
 800a70c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a710:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a714:	f241 3388 	movw	r3, #5000	; 0x1388
 800a718:	4413      	add	r3, r2
 800a71a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a71e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a722:	4a3f      	ldr	r2, [pc, #252]	; (800a820 <VL53L0X_calc_sigma_estimate+0x490>)
 800a724:	fba2 2303 	umull	r2, r3, r2, r3
 800a728:	0b5b      	lsrs	r3, r3, #13
 800a72a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a72e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a734:	429a      	cmp	r2, r3
 800a736:	d902      	bls.n	800a73e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a73a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a73e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a746:	4413      	add	r3, r2
 800a748:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a74c:	4a35      	ldr	r2, [pc, #212]	; (800a824 <VL53L0X_calc_sigma_estimate+0x494>)
 800a74e:	fba2 2303 	umull	r2, r3, r2, r3
 800a752:	099b      	lsrs	r3, r3, #6
 800a754:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a75e:	441a      	add	r2, r3
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	fbb2 f3f3 	udiv	r3, r2, r3
 800a766:	4618      	mov	r0, r3
 800a768:	f7fd ffa4 	bl	80086b4 <VL53L0X_isqrt>
 800a76c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	021b      	lsls	r3, r3, #8
 800a772:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a77a:	4a2a      	ldr	r2, [pc, #168]	; (800a824 <VL53L0X_calc_sigma_estimate+0x494>)
 800a77c:	fba2 2303 	umull	r2, r3, r2, r3
 800a780:	099b      	lsrs	r3, r3, #6
 800a782:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a788:	fb03 f303 	mul.w	r3, r3, r3
 800a78c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	fb03 f303 	mul.w	r3, r3, r3
 800a794:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	4413      	add	r3, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fd ff89 	bl	80086b4 <VL53L0X_isqrt>
 800a7a2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7aa:	fb02 f303 	mul.w	r3, r2, r3
 800a7ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a7b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d009      	beq.n	800a7cc <VL53L0X_calc_sigma_estimate+0x43c>
 800a7b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d005      	beq.n	800a7cc <VL53L0X_calc_sigma_estimate+0x43c>
 800a7c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a7c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d903      	bls.n	800a7d4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a7cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a7d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a7da:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a7e6:	6939      	ldr	r1, [r7, #16]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a800:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fca8 	bl	800a158 <VL53L0X_calc_dmax>
 800a808:	4603      	mov	r3, r0
 800a80a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a80e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a812:	4618      	mov	r0, r3
 800a814:	37c0      	adds	r7, #192	; 0xc0
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	51eb851f 	.word	0x51eb851f
 800a820:	d1b71759 	.word	0xd1b71759
 800a824:	10624dd3 	.word	0x10624dd3

0800a828 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b090      	sub	sp, #64	; 0x40
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	461a      	mov	r2, r3
 800a834:	460b      	mov	r3, r1
 800a836:	72fb      	strb	r3, [r7, #11]
 800a838:	4613      	mov	r3, r2
 800a83a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a842:	2300      	movs	r3, #0
 800a844:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a87a:	7afb      	ldrb	r3, [r7, #11]
 800a87c:	10db      	asrs	r3, r3, #3
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a888:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d017      	beq.n	800a8c0 <VL53L0X_get_pal_range_status+0x98>
 800a890:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a894:	2b05      	cmp	r3, #5
 800a896:	d013      	beq.n	800a8c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a898:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a89c:	2b07      	cmp	r3, #7
 800a89e:	d00f      	beq.n	800a8c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a8a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8a4:	2b0c      	cmp	r3, #12
 800a8a6:	d00b      	beq.n	800a8c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a8a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8ac:	2b0d      	cmp	r3, #13
 800a8ae:	d007      	beq.n	800a8c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a8b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8b4:	2b0e      	cmp	r3, #14
 800a8b6:	d003      	beq.n	800a8c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a8b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8bc:	2b0f      	cmp	r3, #15
 800a8be:	d103      	bne.n	800a8c8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a8c6:	e002      	b.n	800a8ce <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a8ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d109      	bne.n	800a8ea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a8d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a8da:	461a      	mov	r2, r3
 800a8dc:	2100      	movs	r1, #0
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f7fc f9bc 	bl	8006c5c <VL53L0X_GetLimitCheckEnable>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a8ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d02e      	beq.n	800a950 <VL53L0X_get_pal_range_status+0x128>
 800a8f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d12a      	bne.n	800a950 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a8fa:	f107 0310 	add.w	r3, r7, #16
 800a8fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a902:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7ff fd43 	bl	800a390 <VL53L0X_calc_sigma_estimate>
 800a90a:	4603      	mov	r3, r0
 800a90c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a910:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a920:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a924:	2b00      	cmp	r3, #0
 800a926:	d113      	bne.n	800a950 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a928:	f107 0320 	add.w	r3, r7, #32
 800a92c:	461a      	mov	r2, r3
 800a92e:	2100      	movs	r1, #0
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7fc fa19 	bl	8006d68 <VL53L0X_GetLimitCheckValue>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d006      	beq.n	800a950 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a944:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a946:	429a      	cmp	r2, r3
 800a948:	d902      	bls.n	800a950 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a950:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a954:	2b00      	cmp	r3, #0
 800a956:	d109      	bne.n	800a96c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a958:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a95c:	461a      	mov	r2, r3
 800a95e:	2102      	movs	r1, #2
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7fc f97b 	bl	8006c5c <VL53L0X_GetLimitCheckEnable>
 800a966:	4603      	mov	r3, r0
 800a968:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a96c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a970:	2b00      	cmp	r3, #0
 800a972:	d044      	beq.n	800a9fe <VL53L0X_get_pal_range_status+0x1d6>
 800a974:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d140      	bne.n	800a9fe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a97c:	f107 031c 	add.w	r3, r7, #28
 800a980:	461a      	mov	r2, r3
 800a982:	2102      	movs	r1, #2
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7fc f9ef 	bl	8006d68 <VL53L0X_GetLimitCheckValue>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a990:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a994:	2b00      	cmp	r3, #0
 800a996:	d107      	bne.n	800a9a8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a998:	2201      	movs	r2, #1
 800a99a:	21ff      	movs	r1, #255	; 0xff
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f9bb 	bl	800ad18 <VL53L0X_WrByte>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a9a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d109      	bne.n	800a9c4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a9b0:	f107 0316 	add.w	r3, r7, #22
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	21b6      	movs	r1, #182	; 0xb6
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 fa59 	bl	800ae70 <VL53L0X_RdWord>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a9c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d107      	bne.n	800a9dc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	21ff      	movs	r1, #255	; 0xff
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f9a1 	bl	800ad18 <VL53L0X_WrByte>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a9dc:	8afb      	ldrh	r3, [r7, #22]
 800a9de:	025b      	lsls	r3, r3, #9
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a9f0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d902      	bls.n	800a9fe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a9fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aa06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2103      	movs	r1, #3
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7fc f924 	bl	8006c5c <VL53L0X_GetLimitCheckEnable>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800aa1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d023      	beq.n	800aa6a <VL53L0X_get_pal_range_status+0x242>
 800aa22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d11f      	bne.n	800aa6a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800aa2a:	893b      	ldrh	r3, [r7, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d102      	bne.n	800aa36 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	637b      	str	r3, [r7, #52]	; 0x34
 800aa34:	e005      	b.n	800aa42 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	021a      	lsls	r2, r3, #8
 800aa3a:	893b      	ldrh	r3, [r7, #8]
 800aa3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa40:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800aa42:	f107 0318 	add.w	r3, r7, #24
 800aa46:	461a      	mov	r2, r3
 800aa48:	2103      	movs	r1, #3
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7fc f98c 	bl	8006d68 <VL53L0X_GetLimitCheckValue>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800aa5c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800aa5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d202      	bcs.n	800aa6a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d14a      	bne.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800aa72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d103      	bne.n	800aa82 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800aa7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa7c:	22ff      	movs	r2, #255	; 0xff
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	e042      	b.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800aa82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d007      	beq.n	800aa9a <VL53L0X_get_pal_range_status+0x272>
 800aa8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d003      	beq.n	800aa9a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800aa92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d103      	bne.n	800aaa2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800aa9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa9c:	2205      	movs	r2, #5
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	e032      	b.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800aaa2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aaa6:	2b06      	cmp	r3, #6
 800aaa8:	d003      	beq.n	800aab2 <VL53L0X_get_pal_range_status+0x28a>
 800aaaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	d103      	bne.n	800aaba <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800aab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab4:	2204      	movs	r2, #4
 800aab6:	701a      	strb	r2, [r3, #0]
 800aab8:	e026      	b.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800aaba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	d007      	beq.n	800aad2 <VL53L0X_get_pal_range_status+0x2aa>
 800aac2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aac6:	2b0a      	cmp	r3, #10
 800aac8:	d003      	beq.n	800aad2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800aaca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d103      	bne.n	800aada <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800aad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad4:	2203      	movs	r2, #3
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	e016      	b.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800aada:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d003      	beq.n	800aaea <VL53L0X_get_pal_range_status+0x2c2>
 800aae2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d103      	bne.n	800aaf2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800aaea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaec:	2202      	movs	r2, #2
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e00a      	b.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800aaf2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d103      	bne.n	800ab02 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800aafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafc:	2201      	movs	r2, #1
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	e002      	b.n	800ab08 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ab02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ab08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ab10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab12:	2200      	movs	r2, #0
 800ab14:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ab16:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7fc f89c 	bl	8006c5c <VL53L0X_GetLimitCheckEnable>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d14f      	bne.n	800abd2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ab32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <VL53L0X_get_pal_range_status+0x31a>
 800ab3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d103      	bne.n	800ab4a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab48:	e002      	b.n	800ab50 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ab56:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ab5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	d003      	beq.n	800ab6a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ab62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d103      	bne.n	800ab72 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab70:	e002      	b.n	800ab78 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ab7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ab82:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <VL53L0X_get_pal_range_status+0x36a>
 800ab8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d103      	bne.n	800ab9a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ab92:	2301      	movs	r3, #1
 800ab94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab98:	e002      	b.n	800aba0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800abaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <VL53L0X_get_pal_range_status+0x392>
 800abb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d103      	bne.n	800abc2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc0:	e002      	b.n	800abc8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800abce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3740      	adds	r7, #64	; 0x40
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800abde:	b580      	push	{r7, lr}
 800abe0:	b088      	sub	sp, #32
 800abe2:	af02      	add	r7, sp, #8
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	330a      	adds	r3, #10
 800abee:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800abfc:	b299      	uxth	r1, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	4613      	mov	r3, r2
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	f7f7 fd2d 	bl	8002668 <HAL_I2C_Master_Transmit>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ac12:	693b      	ldr	r3, [r7, #16]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	330a      	adds	r3, #10
 800ac2c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	b299      	uxth	r1, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	f7f7 fdff 	bl	8002850 <HAL_I2C_Master_Receive>
 800ac52:	4603      	mov	r3, r0
 800ac54:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ac56:	693b      	ldr	r3, [r7, #16]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b3f      	cmp	r3, #63	; 0x3f
 800ac78:	d902      	bls.n	800ac80 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ac7a:	f06f 0303 	mvn.w	r3, #3
 800ac7e:	e016      	b.n	800acae <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ac80:	4a0d      	ldr	r2, [pc, #52]	; (800acb8 <VL53L0X_WriteMulti+0x58>)
 800ac82:	7afb      	ldrb	r3, [r7, #11]
 800ac84:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	480c      	ldr	r0, [pc, #48]	; (800acbc <VL53L0X_WriteMulti+0x5c>)
 800ac8c:	f000 f99e 	bl	800afcc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	461a      	mov	r2, r3
 800ac96:	4908      	ldr	r1, [pc, #32]	; (800acb8 <VL53L0X_WriteMulti+0x58>)
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f7ff ffa0 	bl	800abde <_I2CWrite>
 800ac9e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aca6:	23ec      	movs	r3, #236	; 0xec
 800aca8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800acaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20001a0c 	.word	0x20001a0c
 800acbc:	20001a0d 	.word	0x20001a0d

0800acc0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	607a      	str	r2, [r7, #4]
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	460b      	mov	r3, r1
 800acce:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acd0:	2300      	movs	r3, #0
 800acd2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800acd4:	f107 030b 	add.w	r3, r7, #11
 800acd8:	2201      	movs	r2, #1
 800acda:	4619      	mov	r1, r3
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ff7e 	bl	800abde <_I2CWrite>
 800ace2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acea:	23ec      	movs	r3, #236	; 0xec
 800acec:	75fb      	strb	r3, [r7, #23]
        goto done;
 800acee:	e00c      	b.n	800ad0a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff ff91 	bl	800ac1c <_I2CRead>
 800acfa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad02:	23ec      	movs	r3, #236	; 0xec
 800ad04:	75fb      	strb	r3, [r7, #23]
 800ad06:	e000      	b.n	800ad0a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ad08:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ad0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
 800ad24:	4613      	mov	r3, r2
 800ad26:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ad2c:	4a0b      	ldr	r2, [pc, #44]	; (800ad5c <VL53L0X_WrByte+0x44>)
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ad32:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <VL53L0X_WrByte+0x44>)
 800ad34:	78bb      	ldrb	r3, [r7, #2]
 800ad36:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ad38:	2202      	movs	r2, #2
 800ad3a:	4908      	ldr	r1, [pc, #32]	; (800ad5c <VL53L0X_WrByte+0x44>)
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff ff4e 	bl	800abde <_I2CWrite>
 800ad42:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad4a:	23ec      	movs	r3, #236	; 0xec
 800ad4c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ad4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20001a0c 	.word	0x20001a0c

0800ad60 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ad74:	4a0e      	ldr	r2, [pc, #56]	; (800adb0 <VL53L0X_WrWord+0x50>)
 800ad76:	78fb      	ldrb	r3, [r7, #3]
 800ad78:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ad7a:	883b      	ldrh	r3, [r7, #0]
 800ad7c:	0a1b      	lsrs	r3, r3, #8
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	4b0b      	ldr	r3, [pc, #44]	; (800adb0 <VL53L0X_WrWord+0x50>)
 800ad84:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ad86:	883b      	ldrh	r3, [r7, #0]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	4b09      	ldr	r3, [pc, #36]	; (800adb0 <VL53L0X_WrWord+0x50>)
 800ad8c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ad8e:	2203      	movs	r2, #3
 800ad90:	4907      	ldr	r1, [pc, #28]	; (800adb0 <VL53L0X_WrWord+0x50>)
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff ff23 	bl	800abde <_I2CWrite>
 800ad98:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ada0:	23ec      	movs	r3, #236	; 0xec
 800ada2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ada4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20001a0c 	.word	0x20001a0c

0800adb4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	4608      	mov	r0, r1
 800adbe:	4611      	mov	r1, r2
 800adc0:	461a      	mov	r2, r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	70fb      	strb	r3, [r7, #3]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70bb      	strb	r3, [r7, #2]
 800adca:	4613      	mov	r3, r2
 800adcc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800add2:	f107 020e 	add.w	r2, r7, #14
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f81e 	bl	800ae1c <VL53L0X_RdByte>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ade4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d110      	bne.n	800ae0e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800adec:	7bba      	ldrb	r2, [r7, #14]
 800adee:	78bb      	ldrb	r3, [r7, #2]
 800adf0:	4013      	ands	r3, r2
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	787b      	ldrb	r3, [r7, #1]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800adfc:	7bba      	ldrb	r2, [r7, #14]
 800adfe:	78fb      	ldrb	r3, [r7, #3]
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff ff88 	bl	800ad18 <VL53L0X_WrByte>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
 800ae0c:	e000      	b.n	800ae10 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ae0e:	bf00      	nop
done:
    return Status;
 800ae10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	460b      	mov	r3, r1
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ae2e:	f107 030b 	add.w	r3, r7, #11
 800ae32:	2201      	movs	r2, #1
 800ae34:	4619      	mov	r1, r3
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff fed1 	bl	800abde <_I2CWrite>
 800ae3c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae44:	23ec      	movs	r3, #236	; 0xec
 800ae46:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ae48:	e00c      	b.n	800ae64 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fee4 	bl	800ac1c <_I2CRead>
 800ae54:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae5c:	23ec      	movs	r3, #236	; 0xec
 800ae5e:	75fb      	strb	r3, [r7, #23]
 800ae60:	e000      	b.n	800ae64 <VL53L0X_RdByte+0x48>
    }
done:
 800ae62:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ae64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ae82:	f107 030b 	add.w	r3, r7, #11
 800ae86:	2201      	movs	r2, #1
 800ae88:	4619      	mov	r1, r3
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7ff fea7 	bl	800abde <_I2CWrite>
 800ae90:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae98:	23ec      	movs	r3, #236	; 0xec
 800ae9a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ae9c:	e017      	b.n	800aece <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ae9e:	2202      	movs	r2, #2
 800aea0:	490e      	ldr	r1, [pc, #56]	; (800aedc <VL53L0X_RdWord+0x6c>)
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff feba 	bl	800ac1c <_I2CRead>
 800aea8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aeb0:	23ec      	movs	r3, #236	; 0xec
 800aeb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aeb4:	e00b      	b.n	800aece <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800aeb6:	4b09      	ldr	r3, [pc, #36]	; (800aedc <VL53L0X_RdWord+0x6c>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <VL53L0X_RdWord+0x6c>)
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	4413      	add	r3, r2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800aece:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20001a0c 	.word	0x20001a0c

0800aee0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	460b      	mov	r3, r1
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aef2:	f107 030b 	add.w	r3, r7, #11
 800aef6:	2201      	movs	r2, #1
 800aef8:	4619      	mov	r1, r3
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7ff fe6f 	bl	800abde <_I2CWrite>
 800af00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af08:	23ec      	movs	r3, #236	; 0xec
 800af0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af0c:	e01b      	b.n	800af46 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800af0e:	2204      	movs	r2, #4
 800af10:	4910      	ldr	r1, [pc, #64]	; (800af54 <VL53L0X_RdDWord+0x74>)
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fe82 	bl	800ac1c <_I2CRead>
 800af18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af20:	23ec      	movs	r3, #236	; 0xec
 800af22:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af24:	e00f      	b.n	800af46 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800af26:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <VL53L0X_RdDWord+0x74>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	061a      	lsls	r2, r3, #24
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <VL53L0X_RdDWord+0x74>)
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	041b      	lsls	r3, r3, #16
 800af32:	441a      	add	r2, r3
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <VL53L0X_RdDWord+0x74>)
 800af36:	789b      	ldrb	r3, [r3, #2]
 800af38:	021b      	lsls	r3, r3, #8
 800af3a:	4413      	add	r3, r2
 800af3c:	4a05      	ldr	r2, [pc, #20]	; (800af54 <VL53L0X_RdDWord+0x74>)
 800af3e:	78d2      	ldrb	r2, [r2, #3]
 800af40:	441a      	add	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800af46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20001a0c 	.word	0x20001a0c

0800af58 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800af64:	2002      	movs	r0, #2
 800af66:	f7f6 ff6d 	bl	8001e44 <HAL_Delay>
    return status;
 800af6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <__errno>:
 800af78:	4b01      	ldr	r3, [pc, #4]	; (800af80 <__errno+0x8>)
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	200002e0 	.word	0x200002e0

0800af84 <__libc_init_array>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4d0d      	ldr	r5, [pc, #52]	; (800afbc <__libc_init_array+0x38>)
 800af88:	4c0d      	ldr	r4, [pc, #52]	; (800afc0 <__libc_init_array+0x3c>)
 800af8a:	1b64      	subs	r4, r4, r5
 800af8c:	10a4      	asrs	r4, r4, #2
 800af8e:	2600      	movs	r6, #0
 800af90:	42a6      	cmp	r6, r4
 800af92:	d109      	bne.n	800afa8 <__libc_init_array+0x24>
 800af94:	4d0b      	ldr	r5, [pc, #44]	; (800afc4 <__libc_init_array+0x40>)
 800af96:	4c0c      	ldr	r4, [pc, #48]	; (800afc8 <__libc_init_array+0x44>)
 800af98:	f002 ff0c 	bl	800ddb4 <_init>
 800af9c:	1b64      	subs	r4, r4, r5
 800af9e:	10a4      	asrs	r4, r4, #2
 800afa0:	2600      	movs	r6, #0
 800afa2:	42a6      	cmp	r6, r4
 800afa4:	d105      	bne.n	800afb2 <__libc_init_array+0x2e>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afac:	4798      	blx	r3
 800afae:	3601      	adds	r6, #1
 800afb0:	e7ee      	b.n	800af90 <__libc_init_array+0xc>
 800afb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb6:	4798      	blx	r3
 800afb8:	3601      	adds	r6, #1
 800afba:	e7f2      	b.n	800afa2 <__libc_init_array+0x1e>
 800afbc:	0800e2d4 	.word	0x0800e2d4
 800afc0:	0800e2d4 	.word	0x0800e2d4
 800afc4:	0800e2d4 	.word	0x0800e2d4
 800afc8:	0800e2d8 	.word	0x0800e2d8

0800afcc <memcpy>:
 800afcc:	440a      	add	r2, r1
 800afce:	4291      	cmp	r1, r2
 800afd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd4:	d100      	bne.n	800afd8 <memcpy+0xc>
 800afd6:	4770      	bx	lr
 800afd8:	b510      	push	{r4, lr}
 800afda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe2:	4291      	cmp	r1, r2
 800afe4:	d1f9      	bne.n	800afda <memcpy+0xe>
 800afe6:	bd10      	pop	{r4, pc}

0800afe8 <memset>:
 800afe8:	4402      	add	r2, r0
 800afea:	4603      	mov	r3, r0
 800afec:	4293      	cmp	r3, r2
 800afee:	d100      	bne.n	800aff2 <memset+0xa>
 800aff0:	4770      	bx	lr
 800aff2:	f803 1b01 	strb.w	r1, [r3], #1
 800aff6:	e7f9      	b.n	800afec <memset+0x4>

0800aff8 <__cvt>:
 800aff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	ec55 4b10 	vmov	r4, r5, d0
 800b000:	2d00      	cmp	r5, #0
 800b002:	460e      	mov	r6, r1
 800b004:	4619      	mov	r1, r3
 800b006:	462b      	mov	r3, r5
 800b008:	bfbb      	ittet	lt
 800b00a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b00e:	461d      	movlt	r5, r3
 800b010:	2300      	movge	r3, #0
 800b012:	232d      	movlt	r3, #45	; 0x2d
 800b014:	700b      	strb	r3, [r1, #0]
 800b016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b01c:	4691      	mov	r9, r2
 800b01e:	f023 0820 	bic.w	r8, r3, #32
 800b022:	bfbc      	itt	lt
 800b024:	4622      	movlt	r2, r4
 800b026:	4614      	movlt	r4, r2
 800b028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b02c:	d005      	beq.n	800b03a <__cvt+0x42>
 800b02e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b032:	d100      	bne.n	800b036 <__cvt+0x3e>
 800b034:	3601      	adds	r6, #1
 800b036:	2102      	movs	r1, #2
 800b038:	e000      	b.n	800b03c <__cvt+0x44>
 800b03a:	2103      	movs	r1, #3
 800b03c:	ab03      	add	r3, sp, #12
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	ab02      	add	r3, sp, #8
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	ec45 4b10 	vmov	d0, r4, r5
 800b048:	4653      	mov	r3, sl
 800b04a:	4632      	mov	r2, r6
 800b04c:	f000 fcf4 	bl	800ba38 <_dtoa_r>
 800b050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b054:	4607      	mov	r7, r0
 800b056:	d102      	bne.n	800b05e <__cvt+0x66>
 800b058:	f019 0f01 	tst.w	r9, #1
 800b05c:	d022      	beq.n	800b0a4 <__cvt+0xac>
 800b05e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b062:	eb07 0906 	add.w	r9, r7, r6
 800b066:	d110      	bne.n	800b08a <__cvt+0x92>
 800b068:	783b      	ldrb	r3, [r7, #0]
 800b06a:	2b30      	cmp	r3, #48	; 0x30
 800b06c:	d10a      	bne.n	800b084 <__cvt+0x8c>
 800b06e:	2200      	movs	r2, #0
 800b070:	2300      	movs	r3, #0
 800b072:	4620      	mov	r0, r4
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 fd57 	bl	8000b28 <__aeabi_dcmpeq>
 800b07a:	b918      	cbnz	r0, 800b084 <__cvt+0x8c>
 800b07c:	f1c6 0601 	rsb	r6, r6, #1
 800b080:	f8ca 6000 	str.w	r6, [sl]
 800b084:	f8da 3000 	ldr.w	r3, [sl]
 800b088:	4499      	add	r9, r3
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fd49 	bl	8000b28 <__aeabi_dcmpeq>
 800b096:	b108      	cbz	r0, 800b09c <__cvt+0xa4>
 800b098:	f8cd 900c 	str.w	r9, [sp, #12]
 800b09c:	2230      	movs	r2, #48	; 0x30
 800b09e:	9b03      	ldr	r3, [sp, #12]
 800b0a0:	454b      	cmp	r3, r9
 800b0a2:	d307      	bcc.n	800b0b4 <__cvt+0xbc>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a8:	1bdb      	subs	r3, r3, r7
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	b004      	add	sp, #16
 800b0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b4:	1c59      	adds	r1, r3, #1
 800b0b6:	9103      	str	r1, [sp, #12]
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e7f0      	b.n	800b09e <__cvt+0xa6>

0800b0bc <__exponent>:
 800b0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	bfb8      	it	lt
 800b0c4:	4249      	neglt	r1, r1
 800b0c6:	f803 2b02 	strb.w	r2, [r3], #2
 800b0ca:	bfb4      	ite	lt
 800b0cc:	222d      	movlt	r2, #45	; 0x2d
 800b0ce:	222b      	movge	r2, #43	; 0x2b
 800b0d0:	2909      	cmp	r1, #9
 800b0d2:	7042      	strb	r2, [r0, #1]
 800b0d4:	dd2a      	ble.n	800b12c <__exponent+0x70>
 800b0d6:	f10d 0407 	add.w	r4, sp, #7
 800b0da:	46a4      	mov	ip, r4
 800b0dc:	270a      	movs	r7, #10
 800b0de:	46a6      	mov	lr, r4
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b0e6:	fb07 1516 	mls	r5, r7, r6, r1
 800b0ea:	3530      	adds	r5, #48	; 0x30
 800b0ec:	2a63      	cmp	r2, #99	; 0x63
 800b0ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	dcf1      	bgt.n	800b0de <__exponent+0x22>
 800b0fa:	3130      	adds	r1, #48	; 0x30
 800b0fc:	f1ae 0502 	sub.w	r5, lr, #2
 800b100:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b104:	1c44      	adds	r4, r0, #1
 800b106:	4629      	mov	r1, r5
 800b108:	4561      	cmp	r1, ip
 800b10a:	d30a      	bcc.n	800b122 <__exponent+0x66>
 800b10c:	f10d 0209 	add.w	r2, sp, #9
 800b110:	eba2 020e 	sub.w	r2, r2, lr
 800b114:	4565      	cmp	r5, ip
 800b116:	bf88      	it	hi
 800b118:	2200      	movhi	r2, #0
 800b11a:	4413      	add	r3, r2
 800b11c:	1a18      	subs	r0, r3, r0
 800b11e:	b003      	add	sp, #12
 800b120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b122:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b12a:	e7ed      	b.n	800b108 <__exponent+0x4c>
 800b12c:	2330      	movs	r3, #48	; 0x30
 800b12e:	3130      	adds	r1, #48	; 0x30
 800b130:	7083      	strb	r3, [r0, #2]
 800b132:	70c1      	strb	r1, [r0, #3]
 800b134:	1d03      	adds	r3, r0, #4
 800b136:	e7f1      	b.n	800b11c <__exponent+0x60>

0800b138 <_printf_float>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	ed2d 8b02 	vpush	{d8}
 800b140:	b08d      	sub	sp, #52	; 0x34
 800b142:	460c      	mov	r4, r1
 800b144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b148:	4616      	mov	r6, r2
 800b14a:	461f      	mov	r7, r3
 800b14c:	4605      	mov	r5, r0
 800b14e:	f001 fa61 	bl	800c614 <_localeconv_r>
 800b152:	f8d0 a000 	ldr.w	sl, [r0]
 800b156:	4650      	mov	r0, sl
 800b158:	f7f5 f864 	bl	8000224 <strlen>
 800b15c:	2300      	movs	r3, #0
 800b15e:	930a      	str	r3, [sp, #40]	; 0x28
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	9305      	str	r3, [sp, #20]
 800b164:	f8d8 3000 	ldr.w	r3, [r8]
 800b168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b16c:	3307      	adds	r3, #7
 800b16e:	f023 0307 	bic.w	r3, r3, #7
 800b172:	f103 0208 	add.w	r2, r3, #8
 800b176:	f8c8 2000 	str.w	r2, [r8]
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b190:	ee08 0a10 	vmov	s16, r0
 800b194:	4b9f      	ldr	r3, [pc, #636]	; (800b414 <_printf_float+0x2dc>)
 800b196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	f7f5 fcf5 	bl	8000b8c <__aeabi_dcmpun>
 800b1a2:	bb88      	cbnz	r0, 800b208 <_printf_float+0xd0>
 800b1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a8:	4b9a      	ldr	r3, [pc, #616]	; (800b414 <_printf_float+0x2dc>)
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ae:	f7f5 fccf 	bl	8000b50 <__aeabi_dcmple>
 800b1b2:	bb48      	cbnz	r0, 800b208 <_printf_float+0xd0>
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	f7f5 fcbe 	bl	8000b3c <__aeabi_dcmplt>
 800b1c0:	b110      	cbz	r0, 800b1c8 <_printf_float+0x90>
 800b1c2:	232d      	movs	r3, #45	; 0x2d
 800b1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c8:	4b93      	ldr	r3, [pc, #588]	; (800b418 <_printf_float+0x2e0>)
 800b1ca:	4894      	ldr	r0, [pc, #592]	; (800b41c <_printf_float+0x2e4>)
 800b1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b1d0:	bf94      	ite	ls
 800b1d2:	4698      	movls	r8, r3
 800b1d4:	4680      	movhi	r8, r0
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	9b05      	ldr	r3, [sp, #20]
 800b1dc:	f023 0204 	bic.w	r2, r3, #4
 800b1e0:	6022      	str	r2, [r4, #0]
 800b1e2:	f04f 0900 	mov.w	r9, #0
 800b1e6:	9700      	str	r7, [sp, #0]
 800b1e8:	4633      	mov	r3, r6
 800b1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f9d8 	bl	800b5a4 <_printf_common>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	f040 8090 	bne.w	800b31a <_printf_float+0x1e2>
 800b1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fe:	b00d      	add	sp, #52	; 0x34
 800b200:	ecbd 8b02 	vpop	{d8}
 800b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 fcbc 	bl	8000b8c <__aeabi_dcmpun>
 800b214:	b140      	cbz	r0, 800b228 <_printf_float+0xf0>
 800b216:	464b      	mov	r3, r9
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbc      	itt	lt
 800b21c:	232d      	movlt	r3, #45	; 0x2d
 800b21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b222:	487f      	ldr	r0, [pc, #508]	; (800b420 <_printf_float+0x2e8>)
 800b224:	4b7f      	ldr	r3, [pc, #508]	; (800b424 <_printf_float+0x2ec>)
 800b226:	e7d1      	b.n	800b1cc <_printf_float+0x94>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b22e:	9206      	str	r2, [sp, #24]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	d13f      	bne.n	800b2b4 <_printf_float+0x17c>
 800b234:	2306      	movs	r3, #6
 800b236:	6063      	str	r3, [r4, #4]
 800b238:	9b05      	ldr	r3, [sp, #20]
 800b23a:	6861      	ldr	r1, [r4, #4]
 800b23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b240:	2300      	movs	r3, #0
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	ab0a      	add	r3, sp, #40	; 0x28
 800b246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b24a:	ab09      	add	r3, sp, #36	; 0x24
 800b24c:	ec49 8b10 	vmov	d0, r8, r9
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	6022      	str	r2, [r4, #0]
 800b254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b258:	4628      	mov	r0, r5
 800b25a:	f7ff fecd 	bl	800aff8 <__cvt>
 800b25e:	9b06      	ldr	r3, [sp, #24]
 800b260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b262:	2b47      	cmp	r3, #71	; 0x47
 800b264:	4680      	mov	r8, r0
 800b266:	d108      	bne.n	800b27a <_printf_float+0x142>
 800b268:	1cc8      	adds	r0, r1, #3
 800b26a:	db02      	blt.n	800b272 <_printf_float+0x13a>
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	4299      	cmp	r1, r3
 800b270:	dd41      	ble.n	800b2f6 <_printf_float+0x1be>
 800b272:	f1ab 0b02 	sub.w	fp, fp, #2
 800b276:	fa5f fb8b 	uxtb.w	fp, fp
 800b27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b27e:	d820      	bhi.n	800b2c2 <_printf_float+0x18a>
 800b280:	3901      	subs	r1, #1
 800b282:	465a      	mov	r2, fp
 800b284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b288:	9109      	str	r1, [sp, #36]	; 0x24
 800b28a:	f7ff ff17 	bl	800b0bc <__exponent>
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	1813      	adds	r3, r2, r0
 800b292:	2a01      	cmp	r2, #1
 800b294:	4681      	mov	r9, r0
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	dc02      	bgt.n	800b2a0 <_printf_float+0x168>
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	07d2      	lsls	r2, r2, #31
 800b29e:	d501      	bpl.n	800b2a4 <_printf_float+0x16c>
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d09c      	beq.n	800b1e6 <_printf_float+0xae>
 800b2ac:	232d      	movs	r3, #45	; 0x2d
 800b2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b2:	e798      	b.n	800b1e6 <_printf_float+0xae>
 800b2b4:	9a06      	ldr	r2, [sp, #24]
 800b2b6:	2a47      	cmp	r2, #71	; 0x47
 800b2b8:	d1be      	bne.n	800b238 <_printf_float+0x100>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1bc      	bne.n	800b238 <_printf_float+0x100>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e7b9      	b.n	800b236 <_printf_float+0xfe>
 800b2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b2c6:	d118      	bne.n	800b2fa <_printf_float+0x1c2>
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	6863      	ldr	r3, [r4, #4]
 800b2cc:	dd0b      	ble.n	800b2e6 <_printf_float+0x1ae>
 800b2ce:	6121      	str	r1, [r4, #16]
 800b2d0:	b913      	cbnz	r3, 800b2d8 <_printf_float+0x1a0>
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	07d0      	lsls	r0, r2, #31
 800b2d6:	d502      	bpl.n	800b2de <_printf_float+0x1a6>
 800b2d8:	3301      	adds	r3, #1
 800b2da:	440b      	add	r3, r1
 800b2dc:	6123      	str	r3, [r4, #16]
 800b2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	e7de      	b.n	800b2a4 <_printf_float+0x16c>
 800b2e6:	b913      	cbnz	r3, 800b2ee <_printf_float+0x1b6>
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	07d2      	lsls	r2, r2, #31
 800b2ec:	d501      	bpl.n	800b2f2 <_printf_float+0x1ba>
 800b2ee:	3302      	adds	r3, #2
 800b2f0:	e7f4      	b.n	800b2dc <_printf_float+0x1a4>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e7f2      	b.n	800b2dc <_printf_float+0x1a4>
 800b2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	db05      	blt.n	800b30c <_printf_float+0x1d4>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	6121      	str	r1, [r4, #16]
 800b304:	07d8      	lsls	r0, r3, #31
 800b306:	d5ea      	bpl.n	800b2de <_printf_float+0x1a6>
 800b308:	1c4b      	adds	r3, r1, #1
 800b30a:	e7e7      	b.n	800b2dc <_printf_float+0x1a4>
 800b30c:	2900      	cmp	r1, #0
 800b30e:	bfd4      	ite	le
 800b310:	f1c1 0202 	rsble	r2, r1, #2
 800b314:	2201      	movgt	r2, #1
 800b316:	4413      	add	r3, r2
 800b318:	e7e0      	b.n	800b2dc <_printf_float+0x1a4>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	055a      	lsls	r2, r3, #21
 800b31e:	d407      	bmi.n	800b330 <_printf_float+0x1f8>
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	4642      	mov	r2, r8
 800b324:	4631      	mov	r1, r6
 800b326:	4628      	mov	r0, r5
 800b328:	47b8      	blx	r7
 800b32a:	3001      	adds	r0, #1
 800b32c:	d12c      	bne.n	800b388 <_printf_float+0x250>
 800b32e:	e764      	b.n	800b1fa <_printf_float+0xc2>
 800b330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b334:	f240 80e0 	bls.w	800b4f8 <_printf_float+0x3c0>
 800b338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b33c:	2200      	movs	r2, #0
 800b33e:	2300      	movs	r3, #0
 800b340:	f7f5 fbf2 	bl	8000b28 <__aeabi_dcmpeq>
 800b344:	2800      	cmp	r0, #0
 800b346:	d034      	beq.n	800b3b2 <_printf_float+0x27a>
 800b348:	4a37      	ldr	r2, [pc, #220]	; (800b428 <_printf_float+0x2f0>)
 800b34a:	2301      	movs	r3, #1
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	47b8      	blx	r7
 800b352:	3001      	adds	r0, #1
 800b354:	f43f af51 	beq.w	800b1fa <_printf_float+0xc2>
 800b358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b35c:	429a      	cmp	r2, r3
 800b35e:	db02      	blt.n	800b366 <_printf_float+0x22e>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	07d8      	lsls	r0, r3, #31
 800b364:	d510      	bpl.n	800b388 <_printf_float+0x250>
 800b366:	ee18 3a10 	vmov	r3, s16
 800b36a:	4652      	mov	r2, sl
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f af41 	beq.w	800b1fa <_printf_float+0xc2>
 800b378:	f04f 0800 	mov.w	r8, #0
 800b37c:	f104 091a 	add.w	r9, r4, #26
 800b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b382:	3b01      	subs	r3, #1
 800b384:	4543      	cmp	r3, r8
 800b386:	dc09      	bgt.n	800b39c <_printf_float+0x264>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	079b      	lsls	r3, r3, #30
 800b38c:	f100 8105 	bmi.w	800b59a <_printf_float+0x462>
 800b390:	68e0      	ldr	r0, [r4, #12]
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	4298      	cmp	r0, r3
 800b396:	bfb8      	it	lt
 800b398:	4618      	movlt	r0, r3
 800b39a:	e730      	b.n	800b1fe <_printf_float+0xc6>
 800b39c:	2301      	movs	r3, #1
 800b39e:	464a      	mov	r2, r9
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	47b8      	blx	r7
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f43f af27 	beq.w	800b1fa <_printf_float+0xc2>
 800b3ac:	f108 0801 	add.w	r8, r8, #1
 800b3b0:	e7e6      	b.n	800b380 <_printf_float+0x248>
 800b3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dc39      	bgt.n	800b42c <_printf_float+0x2f4>
 800b3b8:	4a1b      	ldr	r2, [pc, #108]	; (800b428 <_printf_float+0x2f0>)
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f af19 	beq.w	800b1fa <_printf_float+0xc2>
 800b3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	d102      	bne.n	800b3d6 <_printf_float+0x29e>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	07d9      	lsls	r1, r3, #31
 800b3d4:	d5d8      	bpl.n	800b388 <_printf_float+0x250>
 800b3d6:	ee18 3a10 	vmov	r3, s16
 800b3da:	4652      	mov	r2, sl
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4628      	mov	r0, r5
 800b3e0:	47b8      	blx	r7
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	f43f af09 	beq.w	800b1fa <_printf_float+0xc2>
 800b3e8:	f04f 0900 	mov.w	r9, #0
 800b3ec:	f104 0a1a 	add.w	sl, r4, #26
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	425b      	negs	r3, r3
 800b3f4:	454b      	cmp	r3, r9
 800b3f6:	dc01      	bgt.n	800b3fc <_printf_float+0x2c4>
 800b3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fa:	e792      	b.n	800b322 <_printf_float+0x1ea>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	4652      	mov	r2, sl
 800b400:	4631      	mov	r1, r6
 800b402:	4628      	mov	r0, r5
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	f43f aef7 	beq.w	800b1fa <_printf_float+0xc2>
 800b40c:	f109 0901 	add.w	r9, r9, #1
 800b410:	e7ee      	b.n	800b3f0 <_printf_float+0x2b8>
 800b412:	bf00      	nop
 800b414:	7fefffff 	.word	0x7fefffff
 800b418:	0800def8 	.word	0x0800def8
 800b41c:	0800defc 	.word	0x0800defc
 800b420:	0800df04 	.word	0x0800df04
 800b424:	0800df00 	.word	0x0800df00
 800b428:	0800df08 	.word	0x0800df08
 800b42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b430:	429a      	cmp	r2, r3
 800b432:	bfa8      	it	ge
 800b434:	461a      	movge	r2, r3
 800b436:	2a00      	cmp	r2, #0
 800b438:	4691      	mov	r9, r2
 800b43a:	dc37      	bgt.n	800b4ac <_printf_float+0x374>
 800b43c:	f04f 0b00 	mov.w	fp, #0
 800b440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b444:	f104 021a 	add.w	r2, r4, #26
 800b448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b44a:	9305      	str	r3, [sp, #20]
 800b44c:	eba3 0309 	sub.w	r3, r3, r9
 800b450:	455b      	cmp	r3, fp
 800b452:	dc33      	bgt.n	800b4bc <_printf_float+0x384>
 800b454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b458:	429a      	cmp	r2, r3
 800b45a:	db3b      	blt.n	800b4d4 <_printf_float+0x39c>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	07da      	lsls	r2, r3, #31
 800b460:	d438      	bmi.n	800b4d4 <_printf_float+0x39c>
 800b462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b464:	9a05      	ldr	r2, [sp, #20]
 800b466:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b468:	1a9a      	subs	r2, r3, r2
 800b46a:	eba3 0901 	sub.w	r9, r3, r1
 800b46e:	4591      	cmp	r9, r2
 800b470:	bfa8      	it	ge
 800b472:	4691      	movge	r9, r2
 800b474:	f1b9 0f00 	cmp.w	r9, #0
 800b478:	dc35      	bgt.n	800b4e6 <_printf_float+0x3ae>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b482:	f104 0a1a 	add.w	sl, r4, #26
 800b486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	eba3 0309 	sub.w	r3, r3, r9
 800b490:	4543      	cmp	r3, r8
 800b492:	f77f af79 	ble.w	800b388 <_printf_float+0x250>
 800b496:	2301      	movs	r3, #1
 800b498:	4652      	mov	r2, sl
 800b49a:	4631      	mov	r1, r6
 800b49c:	4628      	mov	r0, r5
 800b49e:	47b8      	blx	r7
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	f43f aeaa 	beq.w	800b1fa <_printf_float+0xc2>
 800b4a6:	f108 0801 	add.w	r8, r8, #1
 800b4aa:	e7ec      	b.n	800b486 <_printf_float+0x34e>
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	47b8      	blx	r7
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d1c0      	bne.n	800b43c <_printf_float+0x304>
 800b4ba:	e69e      	b.n	800b1fa <_printf_float+0xc2>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	9205      	str	r2, [sp, #20]
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	f43f ae97 	beq.w	800b1fa <_printf_float+0xc2>
 800b4cc:	9a05      	ldr	r2, [sp, #20]
 800b4ce:	f10b 0b01 	add.w	fp, fp, #1
 800b4d2:	e7b9      	b.n	800b448 <_printf_float+0x310>
 800b4d4:	ee18 3a10 	vmov	r3, s16
 800b4d8:	4652      	mov	r2, sl
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4628      	mov	r0, r5
 800b4de:	47b8      	blx	r7
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d1be      	bne.n	800b462 <_printf_float+0x32a>
 800b4e4:	e689      	b.n	800b1fa <_printf_float+0xc2>
 800b4e6:	9a05      	ldr	r2, [sp, #20]
 800b4e8:	464b      	mov	r3, r9
 800b4ea:	4442      	add	r2, r8
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	47b8      	blx	r7
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	d1c1      	bne.n	800b47a <_printf_float+0x342>
 800b4f6:	e680      	b.n	800b1fa <_printf_float+0xc2>
 800b4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4fa:	2a01      	cmp	r2, #1
 800b4fc:	dc01      	bgt.n	800b502 <_printf_float+0x3ca>
 800b4fe:	07db      	lsls	r3, r3, #31
 800b500:	d538      	bpl.n	800b574 <_printf_float+0x43c>
 800b502:	2301      	movs	r3, #1
 800b504:	4642      	mov	r2, r8
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	f43f ae74 	beq.w	800b1fa <_printf_float+0xc2>
 800b512:	ee18 3a10 	vmov	r3, s16
 800b516:	4652      	mov	r2, sl
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f ae6b 	beq.w	800b1fa <_printf_float+0xc2>
 800b524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b528:	2200      	movs	r2, #0
 800b52a:	2300      	movs	r3, #0
 800b52c:	f7f5 fafc 	bl	8000b28 <__aeabi_dcmpeq>
 800b530:	b9d8      	cbnz	r0, 800b56a <_printf_float+0x432>
 800b532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b534:	f108 0201 	add.w	r2, r8, #1
 800b538:	3b01      	subs	r3, #1
 800b53a:	4631      	mov	r1, r6
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b8      	blx	r7
 800b540:	3001      	adds	r0, #1
 800b542:	d10e      	bne.n	800b562 <_printf_float+0x42a>
 800b544:	e659      	b.n	800b1fa <_printf_float+0xc2>
 800b546:	2301      	movs	r3, #1
 800b548:	4652      	mov	r2, sl
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	f43f ae52 	beq.w	800b1fa <_printf_float+0xc2>
 800b556:	f108 0801 	add.w	r8, r8, #1
 800b55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55c:	3b01      	subs	r3, #1
 800b55e:	4543      	cmp	r3, r8
 800b560:	dcf1      	bgt.n	800b546 <_printf_float+0x40e>
 800b562:	464b      	mov	r3, r9
 800b564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b568:	e6dc      	b.n	800b324 <_printf_float+0x1ec>
 800b56a:	f04f 0800 	mov.w	r8, #0
 800b56e:	f104 0a1a 	add.w	sl, r4, #26
 800b572:	e7f2      	b.n	800b55a <_printf_float+0x422>
 800b574:	2301      	movs	r3, #1
 800b576:	4642      	mov	r2, r8
 800b578:	e7df      	b.n	800b53a <_printf_float+0x402>
 800b57a:	2301      	movs	r3, #1
 800b57c:	464a      	mov	r2, r9
 800b57e:	4631      	mov	r1, r6
 800b580:	4628      	mov	r0, r5
 800b582:	47b8      	blx	r7
 800b584:	3001      	adds	r0, #1
 800b586:	f43f ae38 	beq.w	800b1fa <_printf_float+0xc2>
 800b58a:	f108 0801 	add.w	r8, r8, #1
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b592:	1a5b      	subs	r3, r3, r1
 800b594:	4543      	cmp	r3, r8
 800b596:	dcf0      	bgt.n	800b57a <_printf_float+0x442>
 800b598:	e6fa      	b.n	800b390 <_printf_float+0x258>
 800b59a:	f04f 0800 	mov.w	r8, #0
 800b59e:	f104 0919 	add.w	r9, r4, #25
 800b5a2:	e7f4      	b.n	800b58e <_printf_float+0x456>

0800b5a4 <_printf_common>:
 800b5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a8:	4616      	mov	r6, r2
 800b5aa:	4699      	mov	r9, r3
 800b5ac:	688a      	ldr	r2, [r1, #8]
 800b5ae:	690b      	ldr	r3, [r1, #16]
 800b5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	bfb8      	it	lt
 800b5b8:	4613      	movlt	r3, r2
 800b5ba:	6033      	str	r3, [r6, #0]
 800b5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5c0:	4607      	mov	r7, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	b10a      	cbz	r2, 800b5ca <_printf_common+0x26>
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	6033      	str	r3, [r6, #0]
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	0699      	lsls	r1, r3, #26
 800b5ce:	bf42      	ittt	mi
 800b5d0:	6833      	ldrmi	r3, [r6, #0]
 800b5d2:	3302      	addmi	r3, #2
 800b5d4:	6033      	strmi	r3, [r6, #0]
 800b5d6:	6825      	ldr	r5, [r4, #0]
 800b5d8:	f015 0506 	ands.w	r5, r5, #6
 800b5dc:	d106      	bne.n	800b5ec <_printf_common+0x48>
 800b5de:	f104 0a19 	add.w	sl, r4, #25
 800b5e2:	68e3      	ldr	r3, [r4, #12]
 800b5e4:	6832      	ldr	r2, [r6, #0]
 800b5e6:	1a9b      	subs	r3, r3, r2
 800b5e8:	42ab      	cmp	r3, r5
 800b5ea:	dc26      	bgt.n	800b63a <_printf_common+0x96>
 800b5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5f0:	1e13      	subs	r3, r2, #0
 800b5f2:	6822      	ldr	r2, [r4, #0]
 800b5f4:	bf18      	it	ne
 800b5f6:	2301      	movne	r3, #1
 800b5f8:	0692      	lsls	r2, r2, #26
 800b5fa:	d42b      	bmi.n	800b654 <_printf_common+0xb0>
 800b5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b600:	4649      	mov	r1, r9
 800b602:	4638      	mov	r0, r7
 800b604:	47c0      	blx	r8
 800b606:	3001      	adds	r0, #1
 800b608:	d01e      	beq.n	800b648 <_printf_common+0xa4>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	68e5      	ldr	r5, [r4, #12]
 800b60e:	6832      	ldr	r2, [r6, #0]
 800b610:	f003 0306 	and.w	r3, r3, #6
 800b614:	2b04      	cmp	r3, #4
 800b616:	bf08      	it	eq
 800b618:	1aad      	subeq	r5, r5, r2
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	6922      	ldr	r2, [r4, #16]
 800b61e:	bf0c      	ite	eq
 800b620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b624:	2500      	movne	r5, #0
 800b626:	4293      	cmp	r3, r2
 800b628:	bfc4      	itt	gt
 800b62a:	1a9b      	subgt	r3, r3, r2
 800b62c:	18ed      	addgt	r5, r5, r3
 800b62e:	2600      	movs	r6, #0
 800b630:	341a      	adds	r4, #26
 800b632:	42b5      	cmp	r5, r6
 800b634:	d11a      	bne.n	800b66c <_printf_common+0xc8>
 800b636:	2000      	movs	r0, #0
 800b638:	e008      	b.n	800b64c <_printf_common+0xa8>
 800b63a:	2301      	movs	r3, #1
 800b63c:	4652      	mov	r2, sl
 800b63e:	4649      	mov	r1, r9
 800b640:	4638      	mov	r0, r7
 800b642:	47c0      	blx	r8
 800b644:	3001      	adds	r0, #1
 800b646:	d103      	bne.n	800b650 <_printf_common+0xac>
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b650:	3501      	adds	r5, #1
 800b652:	e7c6      	b.n	800b5e2 <_printf_common+0x3e>
 800b654:	18e1      	adds	r1, r4, r3
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	2030      	movs	r0, #48	; 0x30
 800b65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b65e:	4422      	add	r2, r4
 800b660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b668:	3302      	adds	r3, #2
 800b66a:	e7c7      	b.n	800b5fc <_printf_common+0x58>
 800b66c:	2301      	movs	r3, #1
 800b66e:	4622      	mov	r2, r4
 800b670:	4649      	mov	r1, r9
 800b672:	4638      	mov	r0, r7
 800b674:	47c0      	blx	r8
 800b676:	3001      	adds	r0, #1
 800b678:	d0e6      	beq.n	800b648 <_printf_common+0xa4>
 800b67a:	3601      	adds	r6, #1
 800b67c:	e7d9      	b.n	800b632 <_printf_common+0x8e>
	...

0800b680 <_printf_i>:
 800b680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b684:	7e0f      	ldrb	r7, [r1, #24]
 800b686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b688:	2f78      	cmp	r7, #120	; 0x78
 800b68a:	4691      	mov	r9, r2
 800b68c:	4680      	mov	r8, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	469a      	mov	sl, r3
 800b692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b696:	d807      	bhi.n	800b6a8 <_printf_i+0x28>
 800b698:	2f62      	cmp	r7, #98	; 0x62
 800b69a:	d80a      	bhi.n	800b6b2 <_printf_i+0x32>
 800b69c:	2f00      	cmp	r7, #0
 800b69e:	f000 80d8 	beq.w	800b852 <_printf_i+0x1d2>
 800b6a2:	2f58      	cmp	r7, #88	; 0x58
 800b6a4:	f000 80a3 	beq.w	800b7ee <_printf_i+0x16e>
 800b6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6b0:	e03a      	b.n	800b728 <_printf_i+0xa8>
 800b6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6b6:	2b15      	cmp	r3, #21
 800b6b8:	d8f6      	bhi.n	800b6a8 <_printf_i+0x28>
 800b6ba:	a101      	add	r1, pc, #4	; (adr r1, 800b6c0 <_printf_i+0x40>)
 800b6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6c0:	0800b719 	.word	0x0800b719
 800b6c4:	0800b72d 	.word	0x0800b72d
 800b6c8:	0800b6a9 	.word	0x0800b6a9
 800b6cc:	0800b6a9 	.word	0x0800b6a9
 800b6d0:	0800b6a9 	.word	0x0800b6a9
 800b6d4:	0800b6a9 	.word	0x0800b6a9
 800b6d8:	0800b72d 	.word	0x0800b72d
 800b6dc:	0800b6a9 	.word	0x0800b6a9
 800b6e0:	0800b6a9 	.word	0x0800b6a9
 800b6e4:	0800b6a9 	.word	0x0800b6a9
 800b6e8:	0800b6a9 	.word	0x0800b6a9
 800b6ec:	0800b839 	.word	0x0800b839
 800b6f0:	0800b75d 	.word	0x0800b75d
 800b6f4:	0800b81b 	.word	0x0800b81b
 800b6f8:	0800b6a9 	.word	0x0800b6a9
 800b6fc:	0800b6a9 	.word	0x0800b6a9
 800b700:	0800b85b 	.word	0x0800b85b
 800b704:	0800b6a9 	.word	0x0800b6a9
 800b708:	0800b75d 	.word	0x0800b75d
 800b70c:	0800b6a9 	.word	0x0800b6a9
 800b710:	0800b6a9 	.word	0x0800b6a9
 800b714:	0800b823 	.word	0x0800b823
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	1d1a      	adds	r2, r3, #4
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	602a      	str	r2, [r5, #0]
 800b720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b728:	2301      	movs	r3, #1
 800b72a:	e0a3      	b.n	800b874 <_printf_i+0x1f4>
 800b72c:	6820      	ldr	r0, [r4, #0]
 800b72e:	6829      	ldr	r1, [r5, #0]
 800b730:	0606      	lsls	r6, r0, #24
 800b732:	f101 0304 	add.w	r3, r1, #4
 800b736:	d50a      	bpl.n	800b74e <_printf_i+0xce>
 800b738:	680e      	ldr	r6, [r1, #0]
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	2e00      	cmp	r6, #0
 800b73e:	da03      	bge.n	800b748 <_printf_i+0xc8>
 800b740:	232d      	movs	r3, #45	; 0x2d
 800b742:	4276      	negs	r6, r6
 800b744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b748:	485e      	ldr	r0, [pc, #376]	; (800b8c4 <_printf_i+0x244>)
 800b74a:	230a      	movs	r3, #10
 800b74c:	e019      	b.n	800b782 <_printf_i+0x102>
 800b74e:	680e      	ldr	r6, [r1, #0]
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b756:	bf18      	it	ne
 800b758:	b236      	sxthne	r6, r6
 800b75a:	e7ef      	b.n	800b73c <_printf_i+0xbc>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	6820      	ldr	r0, [r4, #0]
 800b760:	1d19      	adds	r1, r3, #4
 800b762:	6029      	str	r1, [r5, #0]
 800b764:	0601      	lsls	r1, r0, #24
 800b766:	d501      	bpl.n	800b76c <_printf_i+0xec>
 800b768:	681e      	ldr	r6, [r3, #0]
 800b76a:	e002      	b.n	800b772 <_printf_i+0xf2>
 800b76c:	0646      	lsls	r6, r0, #25
 800b76e:	d5fb      	bpl.n	800b768 <_printf_i+0xe8>
 800b770:	881e      	ldrh	r6, [r3, #0]
 800b772:	4854      	ldr	r0, [pc, #336]	; (800b8c4 <_printf_i+0x244>)
 800b774:	2f6f      	cmp	r7, #111	; 0x6f
 800b776:	bf0c      	ite	eq
 800b778:	2308      	moveq	r3, #8
 800b77a:	230a      	movne	r3, #10
 800b77c:	2100      	movs	r1, #0
 800b77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b782:	6865      	ldr	r5, [r4, #4]
 800b784:	60a5      	str	r5, [r4, #8]
 800b786:	2d00      	cmp	r5, #0
 800b788:	bfa2      	ittt	ge
 800b78a:	6821      	ldrge	r1, [r4, #0]
 800b78c:	f021 0104 	bicge.w	r1, r1, #4
 800b790:	6021      	strge	r1, [r4, #0]
 800b792:	b90e      	cbnz	r6, 800b798 <_printf_i+0x118>
 800b794:	2d00      	cmp	r5, #0
 800b796:	d04d      	beq.n	800b834 <_printf_i+0x1b4>
 800b798:	4615      	mov	r5, r2
 800b79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b79e:	fb03 6711 	mls	r7, r3, r1, r6
 800b7a2:	5dc7      	ldrb	r7, [r0, r7]
 800b7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7a8:	4637      	mov	r7, r6
 800b7aa:	42bb      	cmp	r3, r7
 800b7ac:	460e      	mov	r6, r1
 800b7ae:	d9f4      	bls.n	800b79a <_printf_i+0x11a>
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d10b      	bne.n	800b7cc <_printf_i+0x14c>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	07de      	lsls	r6, r3, #31
 800b7b8:	d508      	bpl.n	800b7cc <_printf_i+0x14c>
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	6861      	ldr	r1, [r4, #4]
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	bfde      	ittt	le
 800b7c2:	2330      	movle	r3, #48	; 0x30
 800b7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7cc:	1b52      	subs	r2, r2, r5
 800b7ce:	6122      	str	r2, [r4, #16]
 800b7d0:	f8cd a000 	str.w	sl, [sp]
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	aa03      	add	r2, sp, #12
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4640      	mov	r0, r8
 800b7dc:	f7ff fee2 	bl	800b5a4 <_printf_common>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d14c      	bne.n	800b87e <_printf_i+0x1fe>
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	b004      	add	sp, #16
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	4835      	ldr	r0, [pc, #212]	; (800b8c4 <_printf_i+0x244>)
 800b7f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7f4:	6829      	ldr	r1, [r5, #0]
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7fc:	6029      	str	r1, [r5, #0]
 800b7fe:	061d      	lsls	r5, r3, #24
 800b800:	d514      	bpl.n	800b82c <_printf_i+0x1ac>
 800b802:	07df      	lsls	r7, r3, #31
 800b804:	bf44      	itt	mi
 800b806:	f043 0320 	orrmi.w	r3, r3, #32
 800b80a:	6023      	strmi	r3, [r4, #0]
 800b80c:	b91e      	cbnz	r6, 800b816 <_printf_i+0x196>
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	f023 0320 	bic.w	r3, r3, #32
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	2310      	movs	r3, #16
 800b818:	e7b0      	b.n	800b77c <_printf_i+0xfc>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	f043 0320 	orr.w	r3, r3, #32
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	2378      	movs	r3, #120	; 0x78
 800b824:	4828      	ldr	r0, [pc, #160]	; (800b8c8 <_printf_i+0x248>)
 800b826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b82a:	e7e3      	b.n	800b7f4 <_printf_i+0x174>
 800b82c:	0659      	lsls	r1, r3, #25
 800b82e:	bf48      	it	mi
 800b830:	b2b6      	uxthmi	r6, r6
 800b832:	e7e6      	b.n	800b802 <_printf_i+0x182>
 800b834:	4615      	mov	r5, r2
 800b836:	e7bb      	b.n	800b7b0 <_printf_i+0x130>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	6826      	ldr	r6, [r4, #0]
 800b83c:	6961      	ldr	r1, [r4, #20]
 800b83e:	1d18      	adds	r0, r3, #4
 800b840:	6028      	str	r0, [r5, #0]
 800b842:	0635      	lsls	r5, r6, #24
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	d501      	bpl.n	800b84c <_printf_i+0x1cc>
 800b848:	6019      	str	r1, [r3, #0]
 800b84a:	e002      	b.n	800b852 <_printf_i+0x1d2>
 800b84c:	0670      	lsls	r0, r6, #25
 800b84e:	d5fb      	bpl.n	800b848 <_printf_i+0x1c8>
 800b850:	8019      	strh	r1, [r3, #0]
 800b852:	2300      	movs	r3, #0
 800b854:	6123      	str	r3, [r4, #16]
 800b856:	4615      	mov	r5, r2
 800b858:	e7ba      	b.n	800b7d0 <_printf_i+0x150>
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	1d1a      	adds	r2, r3, #4
 800b85e:	602a      	str	r2, [r5, #0]
 800b860:	681d      	ldr	r5, [r3, #0]
 800b862:	6862      	ldr	r2, [r4, #4]
 800b864:	2100      	movs	r1, #0
 800b866:	4628      	mov	r0, r5
 800b868:	f7f4 fcea 	bl	8000240 <memchr>
 800b86c:	b108      	cbz	r0, 800b872 <_printf_i+0x1f2>
 800b86e:	1b40      	subs	r0, r0, r5
 800b870:	6060      	str	r0, [r4, #4]
 800b872:	6863      	ldr	r3, [r4, #4]
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	2300      	movs	r3, #0
 800b878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b87c:	e7a8      	b.n	800b7d0 <_printf_i+0x150>
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	462a      	mov	r2, r5
 800b882:	4649      	mov	r1, r9
 800b884:	4640      	mov	r0, r8
 800b886:	47d0      	blx	sl
 800b888:	3001      	adds	r0, #1
 800b88a:	d0ab      	beq.n	800b7e4 <_printf_i+0x164>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	079b      	lsls	r3, r3, #30
 800b890:	d413      	bmi.n	800b8ba <_printf_i+0x23a>
 800b892:	68e0      	ldr	r0, [r4, #12]
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	4298      	cmp	r0, r3
 800b898:	bfb8      	it	lt
 800b89a:	4618      	movlt	r0, r3
 800b89c:	e7a4      	b.n	800b7e8 <_printf_i+0x168>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	47d0      	blx	sl
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	d09b      	beq.n	800b7e4 <_printf_i+0x164>
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	9903      	ldr	r1, [sp, #12]
 800b8b2:	1a5b      	subs	r3, r3, r1
 800b8b4:	42ab      	cmp	r3, r5
 800b8b6:	dcf2      	bgt.n	800b89e <_printf_i+0x21e>
 800b8b8:	e7eb      	b.n	800b892 <_printf_i+0x212>
 800b8ba:	2500      	movs	r5, #0
 800b8bc:	f104 0619 	add.w	r6, r4, #25
 800b8c0:	e7f5      	b.n	800b8ae <_printf_i+0x22e>
 800b8c2:	bf00      	nop
 800b8c4:	0800df0a 	.word	0x0800df0a
 800b8c8:	0800df1b 	.word	0x0800df1b

0800b8cc <siprintf>:
 800b8cc:	b40e      	push	{r1, r2, r3}
 800b8ce:	b500      	push	{lr}
 800b8d0:	b09c      	sub	sp, #112	; 0x70
 800b8d2:	ab1d      	add	r3, sp, #116	; 0x74
 800b8d4:	9002      	str	r0, [sp, #8]
 800b8d6:	9006      	str	r0, [sp, #24]
 800b8d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8dc:	4809      	ldr	r0, [pc, #36]	; (800b904 <siprintf+0x38>)
 800b8de:	9107      	str	r1, [sp, #28]
 800b8e0:	9104      	str	r1, [sp, #16]
 800b8e2:	4909      	ldr	r1, [pc, #36]	; (800b908 <siprintf+0x3c>)
 800b8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e8:	9105      	str	r1, [sp, #20]
 800b8ea:	6800      	ldr	r0, [r0, #0]
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	a902      	add	r1, sp, #8
 800b8f0:	f001 fb72 	bl	800cfd8 <_svfiprintf_r>
 800b8f4:	9b02      	ldr	r3, [sp, #8]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	b01c      	add	sp, #112	; 0x70
 800b8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b900:	b003      	add	sp, #12
 800b902:	4770      	bx	lr
 800b904:	200002e0 	.word	0x200002e0
 800b908:	ffff0208 	.word	0xffff0208

0800b90c <strcpy>:
 800b90c:	4603      	mov	r3, r0
 800b90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b912:	f803 2b01 	strb.w	r2, [r3], #1
 800b916:	2a00      	cmp	r2, #0
 800b918:	d1f9      	bne.n	800b90e <strcpy+0x2>
 800b91a:	4770      	bx	lr

0800b91c <quorem>:
 800b91c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	6903      	ldr	r3, [r0, #16]
 800b922:	690c      	ldr	r4, [r1, #16]
 800b924:	42a3      	cmp	r3, r4
 800b926:	4607      	mov	r7, r0
 800b928:	f2c0 8081 	blt.w	800ba2e <quorem+0x112>
 800b92c:	3c01      	subs	r4, #1
 800b92e:	f101 0814 	add.w	r8, r1, #20
 800b932:	f100 0514 	add.w	r5, r0, #20
 800b936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b944:	3301      	adds	r3, #1
 800b946:	429a      	cmp	r2, r3
 800b948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b94c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b950:	fbb2 f6f3 	udiv	r6, r2, r3
 800b954:	d331      	bcc.n	800b9ba <quorem+0x9e>
 800b956:	f04f 0e00 	mov.w	lr, #0
 800b95a:	4640      	mov	r0, r8
 800b95c:	46ac      	mov	ip, r5
 800b95e:	46f2      	mov	sl, lr
 800b960:	f850 2b04 	ldr.w	r2, [r0], #4
 800b964:	b293      	uxth	r3, r2
 800b966:	fb06 e303 	mla	r3, r6, r3, lr
 800b96a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b96e:	b29b      	uxth	r3, r3
 800b970:	ebaa 0303 	sub.w	r3, sl, r3
 800b974:	f8dc a000 	ldr.w	sl, [ip]
 800b978:	0c12      	lsrs	r2, r2, #16
 800b97a:	fa13 f38a 	uxtah	r3, r3, sl
 800b97e:	fb06 e202 	mla	r2, r6, r2, lr
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b98a:	b292      	uxth	r2, r2
 800b98c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b994:	f8bd 3000 	ldrh.w	r3, [sp]
 800b998:	4581      	cmp	r9, r0
 800b99a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b99e:	f84c 3b04 	str.w	r3, [ip], #4
 800b9a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9a6:	d2db      	bcs.n	800b960 <quorem+0x44>
 800b9a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9ac:	b92b      	cbnz	r3, 800b9ba <quorem+0x9e>
 800b9ae:	9b01      	ldr	r3, [sp, #4]
 800b9b0:	3b04      	subs	r3, #4
 800b9b2:	429d      	cmp	r5, r3
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	d32e      	bcc.n	800ba16 <quorem+0xfa>
 800b9b8:	613c      	str	r4, [r7, #16]
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	f001 f8b8 	bl	800cb30 <__mcmp>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	db24      	blt.n	800ba0e <quorem+0xf2>
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f04f 0c00 	mov.w	ip, #0
 800b9cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9d0:	f8d0 e000 	ldr.w	lr, [r0]
 800b9d4:	b293      	uxth	r3, r2
 800b9d6:	ebac 0303 	sub.w	r3, ip, r3
 800b9da:	0c12      	lsrs	r2, r2, #16
 800b9dc:	fa13 f38e 	uxtah	r3, r3, lr
 800b9e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b9e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9ee:	45c1      	cmp	r9, r8
 800b9f0:	f840 3b04 	str.w	r3, [r0], #4
 800b9f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b9f8:	d2e8      	bcs.n	800b9cc <quorem+0xb0>
 800b9fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba02:	b922      	cbnz	r2, 800ba0e <quorem+0xf2>
 800ba04:	3b04      	subs	r3, #4
 800ba06:	429d      	cmp	r5, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	d30a      	bcc.n	800ba22 <quorem+0x106>
 800ba0c:	613c      	str	r4, [r7, #16]
 800ba0e:	4630      	mov	r0, r6
 800ba10:	b003      	add	sp, #12
 800ba12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba16:	6812      	ldr	r2, [r2, #0]
 800ba18:	3b04      	subs	r3, #4
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	d1cc      	bne.n	800b9b8 <quorem+0x9c>
 800ba1e:	3c01      	subs	r4, #1
 800ba20:	e7c7      	b.n	800b9b2 <quorem+0x96>
 800ba22:	6812      	ldr	r2, [r2, #0]
 800ba24:	3b04      	subs	r3, #4
 800ba26:	2a00      	cmp	r2, #0
 800ba28:	d1f0      	bne.n	800ba0c <quorem+0xf0>
 800ba2a:	3c01      	subs	r4, #1
 800ba2c:	e7eb      	b.n	800ba06 <quorem+0xea>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	e7ee      	b.n	800ba10 <quorem+0xf4>
 800ba32:	0000      	movs	r0, r0
 800ba34:	0000      	movs	r0, r0
	...

0800ba38 <_dtoa_r>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	ed2d 8b04 	vpush	{d8-d9}
 800ba40:	ec57 6b10 	vmov	r6, r7, d0
 800ba44:	b093      	sub	sp, #76	; 0x4c
 800ba46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba4c:	9106      	str	r1, [sp, #24]
 800ba4e:	ee10 aa10 	vmov	sl, s0
 800ba52:	4604      	mov	r4, r0
 800ba54:	9209      	str	r2, [sp, #36]	; 0x24
 800ba56:	930c      	str	r3, [sp, #48]	; 0x30
 800ba58:	46bb      	mov	fp, r7
 800ba5a:	b975      	cbnz	r5, 800ba7a <_dtoa_r+0x42>
 800ba5c:	2010      	movs	r0, #16
 800ba5e:	f000 fddd 	bl	800c61c <malloc>
 800ba62:	4602      	mov	r2, r0
 800ba64:	6260      	str	r0, [r4, #36]	; 0x24
 800ba66:	b920      	cbnz	r0, 800ba72 <_dtoa_r+0x3a>
 800ba68:	4ba7      	ldr	r3, [pc, #668]	; (800bd08 <_dtoa_r+0x2d0>)
 800ba6a:	21ea      	movs	r1, #234	; 0xea
 800ba6c:	48a7      	ldr	r0, [pc, #668]	; (800bd0c <_dtoa_r+0x2d4>)
 800ba6e:	f001 fbc3 	bl	800d1f8 <__assert_func>
 800ba72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba76:	6005      	str	r5, [r0, #0]
 800ba78:	60c5      	str	r5, [r0, #12]
 800ba7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba7c:	6819      	ldr	r1, [r3, #0]
 800ba7e:	b151      	cbz	r1, 800ba96 <_dtoa_r+0x5e>
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	604a      	str	r2, [r1, #4]
 800ba84:	2301      	movs	r3, #1
 800ba86:	4093      	lsls	r3, r2
 800ba88:	608b      	str	r3, [r1, #8]
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 fe0e 	bl	800c6ac <_Bfree>
 800ba90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	1e3b      	subs	r3, r7, #0
 800ba98:	bfaa      	itet	ge
 800ba9a:	2300      	movge	r3, #0
 800ba9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800baa0:	f8c8 3000 	strge.w	r3, [r8]
 800baa4:	4b9a      	ldr	r3, [pc, #616]	; (800bd10 <_dtoa_r+0x2d8>)
 800baa6:	bfbc      	itt	lt
 800baa8:	2201      	movlt	r2, #1
 800baaa:	f8c8 2000 	strlt.w	r2, [r8]
 800baae:	ea33 030b 	bics.w	r3, r3, fp
 800bab2:	d11b      	bne.n	800baec <_dtoa_r+0xb4>
 800bab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bab6:	f242 730f 	movw	r3, #9999	; 0x270f
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bac0:	4333      	orrs	r3, r6
 800bac2:	f000 8592 	beq.w	800c5ea <_dtoa_r+0xbb2>
 800bac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bac8:	b963      	cbnz	r3, 800bae4 <_dtoa_r+0xac>
 800baca:	4b92      	ldr	r3, [pc, #584]	; (800bd14 <_dtoa_r+0x2dc>)
 800bacc:	e022      	b.n	800bb14 <_dtoa_r+0xdc>
 800bace:	4b92      	ldr	r3, [pc, #584]	; (800bd18 <_dtoa_r+0x2e0>)
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	3308      	adds	r3, #8
 800bad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bad6:	6013      	str	r3, [r2, #0]
 800bad8:	9801      	ldr	r0, [sp, #4]
 800bada:	b013      	add	sp, #76	; 0x4c
 800badc:	ecbd 8b04 	vpop	{d8-d9}
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	4b8b      	ldr	r3, [pc, #556]	; (800bd14 <_dtoa_r+0x2dc>)
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	3303      	adds	r3, #3
 800baea:	e7f3      	b.n	800bad4 <_dtoa_r+0x9c>
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	4650      	mov	r0, sl
 800baf2:	4659      	mov	r1, fp
 800baf4:	f7f5 f818 	bl	8000b28 <__aeabi_dcmpeq>
 800baf8:	ec4b ab19 	vmov	d9, sl, fp
 800bafc:	4680      	mov	r8, r0
 800bafe:	b158      	cbz	r0, 800bb18 <_dtoa_r+0xe0>
 800bb00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb02:	2301      	movs	r3, #1
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 856b 	beq.w	800c5e4 <_dtoa_r+0xbac>
 800bb0e:	4883      	ldr	r0, [pc, #524]	; (800bd1c <_dtoa_r+0x2e4>)
 800bb10:	6018      	str	r0, [r3, #0]
 800bb12:	1e43      	subs	r3, r0, #1
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	e7df      	b.n	800bad8 <_dtoa_r+0xa0>
 800bb18:	ec4b ab10 	vmov	d0, sl, fp
 800bb1c:	aa10      	add	r2, sp, #64	; 0x40
 800bb1e:	a911      	add	r1, sp, #68	; 0x44
 800bb20:	4620      	mov	r0, r4
 800bb22:	f001 f8ab 	bl	800cc7c <__d2b>
 800bb26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bb2a:	ee08 0a10 	vmov	s16, r0
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	f000 8084 	beq.w	800bc3c <_dtoa_r+0x204>
 800bb34:	ee19 3a90 	vmov	r3, s19
 800bb38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb40:	4656      	mov	r6, sl
 800bb42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bb4e:	4b74      	ldr	r3, [pc, #464]	; (800bd20 <_dtoa_r+0x2e8>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	f7f4 fbc7 	bl	80002e8 <__aeabi_dsub>
 800bb5a:	a365      	add	r3, pc, #404	; (adr r3, 800bcf0 <_dtoa_r+0x2b8>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f7f4 fd7a 	bl	8000658 <__aeabi_dmul>
 800bb64:	a364      	add	r3, pc, #400	; (adr r3, 800bcf8 <_dtoa_r+0x2c0>)
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	f7f4 fbbf 	bl	80002ec <__adddf3>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	4628      	mov	r0, r5
 800bb72:	460f      	mov	r7, r1
 800bb74:	f7f4 fd06 	bl	8000584 <__aeabi_i2d>
 800bb78:	a361      	add	r3, pc, #388	; (adr r3, 800bd00 <_dtoa_r+0x2c8>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fd6b 	bl	8000658 <__aeabi_dmul>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4630      	mov	r0, r6
 800bb88:	4639      	mov	r1, r7
 800bb8a:	f7f4 fbaf 	bl	80002ec <__adddf3>
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460f      	mov	r7, r1
 800bb92:	f7f5 f811 	bl	8000bb8 <__aeabi_d2iz>
 800bb96:	2200      	movs	r2, #0
 800bb98:	9000      	str	r0, [sp, #0]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	4639      	mov	r1, r7
 800bba0:	f7f4 ffcc 	bl	8000b3c <__aeabi_dcmplt>
 800bba4:	b150      	cbz	r0, 800bbbc <_dtoa_r+0x184>
 800bba6:	9800      	ldr	r0, [sp, #0]
 800bba8:	f7f4 fcec 	bl	8000584 <__aeabi_i2d>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	f7f4 ffba 	bl	8000b28 <__aeabi_dcmpeq>
 800bbb4:	b910      	cbnz	r0, 800bbbc <_dtoa_r+0x184>
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	9b00      	ldr	r3, [sp, #0]
 800bbbe:	2b16      	cmp	r3, #22
 800bbc0:	d85a      	bhi.n	800bc78 <_dtoa_r+0x240>
 800bbc2:	9a00      	ldr	r2, [sp, #0]
 800bbc4:	4b57      	ldr	r3, [pc, #348]	; (800bd24 <_dtoa_r+0x2ec>)
 800bbc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	ec51 0b19 	vmov	r0, r1, d9
 800bbd2:	f7f4 ffb3 	bl	8000b3c <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d050      	beq.n	800bc7c <_dtoa_r+0x244>
 800bbda:	9b00      	ldr	r3, [sp, #0]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbe6:	1b5d      	subs	r5, r3, r5
 800bbe8:	1e6b      	subs	r3, r5, #1
 800bbea:	9305      	str	r3, [sp, #20]
 800bbec:	bf45      	ittet	mi
 800bbee:	f1c5 0301 	rsbmi	r3, r5, #1
 800bbf2:	9304      	strmi	r3, [sp, #16]
 800bbf4:	2300      	movpl	r3, #0
 800bbf6:	2300      	movmi	r3, #0
 800bbf8:	bf4c      	ite	mi
 800bbfa:	9305      	strmi	r3, [sp, #20]
 800bbfc:	9304      	strpl	r3, [sp, #16]
 800bbfe:	9b00      	ldr	r3, [sp, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	db3d      	blt.n	800bc80 <_dtoa_r+0x248>
 800bc04:	9b05      	ldr	r3, [sp, #20]
 800bc06:	9a00      	ldr	r2, [sp, #0]
 800bc08:	920a      	str	r2, [sp, #40]	; 0x28
 800bc0a:	4413      	add	r3, r2
 800bc0c:	9305      	str	r3, [sp, #20]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9307      	str	r3, [sp, #28]
 800bc12:	9b06      	ldr	r3, [sp, #24]
 800bc14:	2b09      	cmp	r3, #9
 800bc16:	f200 8089 	bhi.w	800bd2c <_dtoa_r+0x2f4>
 800bc1a:	2b05      	cmp	r3, #5
 800bc1c:	bfc4      	itt	gt
 800bc1e:	3b04      	subgt	r3, #4
 800bc20:	9306      	strgt	r3, [sp, #24]
 800bc22:	9b06      	ldr	r3, [sp, #24]
 800bc24:	f1a3 0302 	sub.w	r3, r3, #2
 800bc28:	bfcc      	ite	gt
 800bc2a:	2500      	movgt	r5, #0
 800bc2c:	2501      	movle	r5, #1
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	f200 8087 	bhi.w	800bd42 <_dtoa_r+0x30a>
 800bc34:	e8df f003 	tbb	[pc, r3]
 800bc38:	59383a2d 	.word	0x59383a2d
 800bc3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc40:	441d      	add	r5, r3
 800bc42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	bfc1      	itttt	gt
 800bc4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bc52:	fa0b f303 	lslgt.w	r3, fp, r3
 800bc56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc5a:	bfda      	itte	le
 800bc5c:	f1c3 0320 	rsble	r3, r3, #32
 800bc60:	fa06 f003 	lslle.w	r0, r6, r3
 800bc64:	4318      	orrgt	r0, r3
 800bc66:	f7f4 fc7d 	bl	8000564 <__aeabi_ui2d>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bc72:	3d01      	subs	r5, #1
 800bc74:	930e      	str	r3, [sp, #56]	; 0x38
 800bc76:	e76a      	b.n	800bb4e <_dtoa_r+0x116>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e7b2      	b.n	800bbe2 <_dtoa_r+0x1aa>
 800bc7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc7e:	e7b1      	b.n	800bbe4 <_dtoa_r+0x1ac>
 800bc80:	9b04      	ldr	r3, [sp, #16]
 800bc82:	9a00      	ldr	r2, [sp, #0]
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	4253      	negs	r3, r2
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc90:	e7bf      	b.n	800bc12 <_dtoa_r+0x1da>
 800bc92:	2300      	movs	r3, #0
 800bc94:	9308      	str	r3, [sp, #32]
 800bc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dc55      	bgt.n	800bd48 <_dtoa_r+0x310>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bca2:	461a      	mov	r2, r3
 800bca4:	9209      	str	r2, [sp, #36]	; 0x24
 800bca6:	e00c      	b.n	800bcc2 <_dtoa_r+0x28a>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e7f3      	b.n	800bc94 <_dtoa_r+0x25c>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcb0:	9308      	str	r3, [sp, #32]
 800bcb2:	9b00      	ldr	r3, [sp, #0]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	9302      	str	r3, [sp, #8]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	bfb8      	it	lt
 800bcc0:	2301      	movlt	r3, #1
 800bcc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	6042      	str	r2, [r0, #4]
 800bcc8:	2204      	movs	r2, #4
 800bcca:	f102 0614 	add.w	r6, r2, #20
 800bcce:	429e      	cmp	r6, r3
 800bcd0:	6841      	ldr	r1, [r0, #4]
 800bcd2:	d93d      	bls.n	800bd50 <_dtoa_r+0x318>
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fca9 	bl	800c62c <_Balloc>
 800bcda:	9001      	str	r0, [sp, #4]
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d13b      	bne.n	800bd58 <_dtoa_r+0x320>
 800bce0:	4b11      	ldr	r3, [pc, #68]	; (800bd28 <_dtoa_r+0x2f0>)
 800bce2:	4602      	mov	r2, r0
 800bce4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bce8:	e6c0      	b.n	800ba6c <_dtoa_r+0x34>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e7df      	b.n	800bcae <_dtoa_r+0x276>
 800bcee:	bf00      	nop
 800bcf0:	636f4361 	.word	0x636f4361
 800bcf4:	3fd287a7 	.word	0x3fd287a7
 800bcf8:	8b60c8b3 	.word	0x8b60c8b3
 800bcfc:	3fc68a28 	.word	0x3fc68a28
 800bd00:	509f79fb 	.word	0x509f79fb
 800bd04:	3fd34413 	.word	0x3fd34413
 800bd08:	0800df39 	.word	0x0800df39
 800bd0c:	0800df50 	.word	0x0800df50
 800bd10:	7ff00000 	.word	0x7ff00000
 800bd14:	0800df35 	.word	0x0800df35
 800bd18:	0800df2c 	.word	0x0800df2c
 800bd1c:	0800df09 	.word	0x0800df09
 800bd20:	3ff80000 	.word	0x3ff80000
 800bd24:	0800e040 	.word	0x0800e040
 800bd28:	0800dfab 	.word	0x0800dfab
 800bd2c:	2501      	movs	r5, #1
 800bd2e:	2300      	movs	r3, #0
 800bd30:	9306      	str	r3, [sp, #24]
 800bd32:	9508      	str	r5, [sp, #32]
 800bd34:	f04f 33ff 	mov.w	r3, #4294967295
 800bd38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2312      	movs	r3, #18
 800bd40:	e7b0      	b.n	800bca4 <_dtoa_r+0x26c>
 800bd42:	2301      	movs	r3, #1
 800bd44:	9308      	str	r3, [sp, #32]
 800bd46:	e7f5      	b.n	800bd34 <_dtoa_r+0x2fc>
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd4e:	e7b8      	b.n	800bcc2 <_dtoa_r+0x28a>
 800bd50:	3101      	adds	r1, #1
 800bd52:	6041      	str	r1, [r0, #4]
 800bd54:	0052      	lsls	r2, r2, #1
 800bd56:	e7b8      	b.n	800bcca <_dtoa_r+0x292>
 800bd58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd5a:	9a01      	ldr	r2, [sp, #4]
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	2b0e      	cmp	r3, #14
 800bd62:	f200 809d 	bhi.w	800bea0 <_dtoa_r+0x468>
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	f000 809a 	beq.w	800bea0 <_dtoa_r+0x468>
 800bd6c:	9b00      	ldr	r3, [sp, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	dd32      	ble.n	800bdd8 <_dtoa_r+0x3a0>
 800bd72:	4ab7      	ldr	r2, [pc, #732]	; (800c050 <_dtoa_r+0x618>)
 800bd74:	f003 030f 	and.w	r3, r3, #15
 800bd78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd80:	9b00      	ldr	r3, [sp, #0]
 800bd82:	05d8      	lsls	r0, r3, #23
 800bd84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bd88:	d516      	bpl.n	800bdb8 <_dtoa_r+0x380>
 800bd8a:	4bb2      	ldr	r3, [pc, #712]	; (800c054 <_dtoa_r+0x61c>)
 800bd8c:	ec51 0b19 	vmov	r0, r1, d9
 800bd90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd94:	f7f4 fd8a 	bl	80008ac <__aeabi_ddiv>
 800bd98:	f007 070f 	and.w	r7, r7, #15
 800bd9c:	4682      	mov	sl, r0
 800bd9e:	468b      	mov	fp, r1
 800bda0:	2503      	movs	r5, #3
 800bda2:	4eac      	ldr	r6, [pc, #688]	; (800c054 <_dtoa_r+0x61c>)
 800bda4:	b957      	cbnz	r7, 800bdbc <_dtoa_r+0x384>
 800bda6:	4642      	mov	r2, r8
 800bda8:	464b      	mov	r3, r9
 800bdaa:	4650      	mov	r0, sl
 800bdac:	4659      	mov	r1, fp
 800bdae:	f7f4 fd7d 	bl	80008ac <__aeabi_ddiv>
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	468b      	mov	fp, r1
 800bdb6:	e028      	b.n	800be0a <_dtoa_r+0x3d2>
 800bdb8:	2502      	movs	r5, #2
 800bdba:	e7f2      	b.n	800bda2 <_dtoa_r+0x36a>
 800bdbc:	07f9      	lsls	r1, r7, #31
 800bdbe:	d508      	bpl.n	800bdd2 <_dtoa_r+0x39a>
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdc8:	f7f4 fc46 	bl	8000658 <__aeabi_dmul>
 800bdcc:	3501      	adds	r5, #1
 800bdce:	4680      	mov	r8, r0
 800bdd0:	4689      	mov	r9, r1
 800bdd2:	107f      	asrs	r7, r7, #1
 800bdd4:	3608      	adds	r6, #8
 800bdd6:	e7e5      	b.n	800bda4 <_dtoa_r+0x36c>
 800bdd8:	f000 809b 	beq.w	800bf12 <_dtoa_r+0x4da>
 800bddc:	9b00      	ldr	r3, [sp, #0]
 800bdde:	4f9d      	ldr	r7, [pc, #628]	; (800c054 <_dtoa_r+0x61c>)
 800bde0:	425e      	negs	r6, r3
 800bde2:	4b9b      	ldr	r3, [pc, #620]	; (800c050 <_dtoa_r+0x618>)
 800bde4:	f006 020f 	and.w	r2, r6, #15
 800bde8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	ec51 0b19 	vmov	r0, r1, d9
 800bdf4:	f7f4 fc30 	bl	8000658 <__aeabi_dmul>
 800bdf8:	1136      	asrs	r6, r6, #4
 800bdfa:	4682      	mov	sl, r0
 800bdfc:	468b      	mov	fp, r1
 800bdfe:	2300      	movs	r3, #0
 800be00:	2502      	movs	r5, #2
 800be02:	2e00      	cmp	r6, #0
 800be04:	d17a      	bne.n	800befc <_dtoa_r+0x4c4>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1d3      	bne.n	800bdb2 <_dtoa_r+0x37a>
 800be0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 8082 	beq.w	800bf16 <_dtoa_r+0x4de>
 800be12:	4b91      	ldr	r3, [pc, #580]	; (800c058 <_dtoa_r+0x620>)
 800be14:	2200      	movs	r2, #0
 800be16:	4650      	mov	r0, sl
 800be18:	4659      	mov	r1, fp
 800be1a:	f7f4 fe8f 	bl	8000b3c <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d079      	beq.n	800bf16 <_dtoa_r+0x4de>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d076      	beq.n	800bf16 <_dtoa_r+0x4de>
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	dd36      	ble.n	800be9c <_dtoa_r+0x464>
 800be2e:	9b00      	ldr	r3, [sp, #0]
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	1e5f      	subs	r7, r3, #1
 800be36:	2200      	movs	r2, #0
 800be38:	4b88      	ldr	r3, [pc, #544]	; (800c05c <_dtoa_r+0x624>)
 800be3a:	f7f4 fc0d 	bl	8000658 <__aeabi_dmul>
 800be3e:	9e02      	ldr	r6, [sp, #8]
 800be40:	4682      	mov	sl, r0
 800be42:	468b      	mov	fp, r1
 800be44:	3501      	adds	r5, #1
 800be46:	4628      	mov	r0, r5
 800be48:	f7f4 fb9c 	bl	8000584 <__aeabi_i2d>
 800be4c:	4652      	mov	r2, sl
 800be4e:	465b      	mov	r3, fp
 800be50:	f7f4 fc02 	bl	8000658 <__aeabi_dmul>
 800be54:	4b82      	ldr	r3, [pc, #520]	; (800c060 <_dtoa_r+0x628>)
 800be56:	2200      	movs	r2, #0
 800be58:	f7f4 fa48 	bl	80002ec <__adddf3>
 800be5c:	46d0      	mov	r8, sl
 800be5e:	46d9      	mov	r9, fp
 800be60:	4682      	mov	sl, r0
 800be62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800be66:	2e00      	cmp	r6, #0
 800be68:	d158      	bne.n	800bf1c <_dtoa_r+0x4e4>
 800be6a:	4b7e      	ldr	r3, [pc, #504]	; (800c064 <_dtoa_r+0x62c>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	4640      	mov	r0, r8
 800be70:	4649      	mov	r1, r9
 800be72:	f7f4 fa39 	bl	80002e8 <__aeabi_dsub>
 800be76:	4652      	mov	r2, sl
 800be78:	465b      	mov	r3, fp
 800be7a:	4680      	mov	r8, r0
 800be7c:	4689      	mov	r9, r1
 800be7e:	f7f4 fe7b 	bl	8000b78 <__aeabi_dcmpgt>
 800be82:	2800      	cmp	r0, #0
 800be84:	f040 8295 	bne.w	800c3b2 <_dtoa_r+0x97a>
 800be88:	4652      	mov	r2, sl
 800be8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be8e:	4640      	mov	r0, r8
 800be90:	4649      	mov	r1, r9
 800be92:	f7f4 fe53 	bl	8000b3c <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f040 8289 	bne.w	800c3ae <_dtoa_r+0x976>
 800be9c:	ec5b ab19 	vmov	sl, fp, d9
 800bea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f2c0 8148 	blt.w	800c138 <_dtoa_r+0x700>
 800bea8:	9a00      	ldr	r2, [sp, #0]
 800beaa:	2a0e      	cmp	r2, #14
 800beac:	f300 8144 	bgt.w	800c138 <_dtoa_r+0x700>
 800beb0:	4b67      	ldr	r3, [pc, #412]	; (800c050 <_dtoa_r+0x618>)
 800beb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800beba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f280 80d5 	bge.w	800c06c <_dtoa_r+0x634>
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f300 80d1 	bgt.w	800c06c <_dtoa_r+0x634>
 800beca:	f040 826f 	bne.w	800c3ac <_dtoa_r+0x974>
 800bece:	4b65      	ldr	r3, [pc, #404]	; (800c064 <_dtoa_r+0x62c>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	4640      	mov	r0, r8
 800bed4:	4649      	mov	r1, r9
 800bed6:	f7f4 fbbf 	bl	8000658 <__aeabi_dmul>
 800beda:	4652      	mov	r2, sl
 800bedc:	465b      	mov	r3, fp
 800bede:	f7f4 fe41 	bl	8000b64 <__aeabi_dcmpge>
 800bee2:	9e03      	ldr	r6, [sp, #12]
 800bee4:	4637      	mov	r7, r6
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 8245 	bne.w	800c376 <_dtoa_r+0x93e>
 800beec:	9d01      	ldr	r5, [sp, #4]
 800beee:	2331      	movs	r3, #49	; 0x31
 800bef0:	f805 3b01 	strb.w	r3, [r5], #1
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	3301      	adds	r3, #1
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	e240      	b.n	800c37e <_dtoa_r+0x946>
 800befc:	07f2      	lsls	r2, r6, #31
 800befe:	d505      	bpl.n	800bf0c <_dtoa_r+0x4d4>
 800bf00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf04:	f7f4 fba8 	bl	8000658 <__aeabi_dmul>
 800bf08:	3501      	adds	r5, #1
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	1076      	asrs	r6, r6, #1
 800bf0e:	3708      	adds	r7, #8
 800bf10:	e777      	b.n	800be02 <_dtoa_r+0x3ca>
 800bf12:	2502      	movs	r5, #2
 800bf14:	e779      	b.n	800be0a <_dtoa_r+0x3d2>
 800bf16:	9f00      	ldr	r7, [sp, #0]
 800bf18:	9e03      	ldr	r6, [sp, #12]
 800bf1a:	e794      	b.n	800be46 <_dtoa_r+0x40e>
 800bf1c:	9901      	ldr	r1, [sp, #4]
 800bf1e:	4b4c      	ldr	r3, [pc, #304]	; (800c050 <_dtoa_r+0x618>)
 800bf20:	4431      	add	r1, r6
 800bf22:	910d      	str	r1, [sp, #52]	; 0x34
 800bf24:	9908      	ldr	r1, [sp, #32]
 800bf26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	d043      	beq.n	800bfba <_dtoa_r+0x582>
 800bf32:	494d      	ldr	r1, [pc, #308]	; (800c068 <_dtoa_r+0x630>)
 800bf34:	2000      	movs	r0, #0
 800bf36:	f7f4 fcb9 	bl	80008ac <__aeabi_ddiv>
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	465b      	mov	r3, fp
 800bf3e:	f7f4 f9d3 	bl	80002e8 <__aeabi_dsub>
 800bf42:	9d01      	ldr	r5, [sp, #4]
 800bf44:	4682      	mov	sl, r0
 800bf46:	468b      	mov	fp, r1
 800bf48:	4649      	mov	r1, r9
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	f7f4 fe34 	bl	8000bb8 <__aeabi_d2iz>
 800bf50:	4606      	mov	r6, r0
 800bf52:	f7f4 fb17 	bl	8000584 <__aeabi_i2d>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	f7f4 f9c3 	bl	80002e8 <__aeabi_dsub>
 800bf62:	3630      	adds	r6, #48	; 0x30
 800bf64:	f805 6b01 	strb.w	r6, [r5], #1
 800bf68:	4652      	mov	r2, sl
 800bf6a:	465b      	mov	r3, fp
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	4689      	mov	r9, r1
 800bf70:	f7f4 fde4 	bl	8000b3c <__aeabi_dcmplt>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d163      	bne.n	800c040 <_dtoa_r+0x608>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	4936      	ldr	r1, [pc, #216]	; (800c058 <_dtoa_r+0x620>)
 800bf7e:	2000      	movs	r0, #0
 800bf80:	f7f4 f9b2 	bl	80002e8 <__aeabi_dsub>
 800bf84:	4652      	mov	r2, sl
 800bf86:	465b      	mov	r3, fp
 800bf88:	f7f4 fdd8 	bl	8000b3c <__aeabi_dcmplt>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f040 80b5 	bne.w	800c0fc <_dtoa_r+0x6c4>
 800bf92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf94:	429d      	cmp	r5, r3
 800bf96:	d081      	beq.n	800be9c <_dtoa_r+0x464>
 800bf98:	4b30      	ldr	r3, [pc, #192]	; (800c05c <_dtoa_r+0x624>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	4659      	mov	r1, fp
 800bfa0:	f7f4 fb5a 	bl	8000658 <__aeabi_dmul>
 800bfa4:	4b2d      	ldr	r3, [pc, #180]	; (800c05c <_dtoa_r+0x624>)
 800bfa6:	4682      	mov	sl, r0
 800bfa8:	468b      	mov	fp, r1
 800bfaa:	4640      	mov	r0, r8
 800bfac:	4649      	mov	r1, r9
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f7f4 fb52 	bl	8000658 <__aeabi_dmul>
 800bfb4:	4680      	mov	r8, r0
 800bfb6:	4689      	mov	r9, r1
 800bfb8:	e7c6      	b.n	800bf48 <_dtoa_r+0x510>
 800bfba:	4650      	mov	r0, sl
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	f7f4 fb4b 	bl	8000658 <__aeabi_dmul>
 800bfc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfc4:	9d01      	ldr	r5, [sp, #4]
 800bfc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfc8:	4682      	mov	sl, r0
 800bfca:	468b      	mov	fp, r1
 800bfcc:	4649      	mov	r1, r9
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f7f4 fdf2 	bl	8000bb8 <__aeabi_d2iz>
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	f7f4 fad5 	bl	8000584 <__aeabi_i2d>
 800bfda:	3630      	adds	r6, #48	; 0x30
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	f7f4 f980 	bl	80002e8 <__aeabi_dsub>
 800bfe8:	f805 6b01 	strb.w	r6, [r5], #1
 800bfec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfee:	429d      	cmp	r5, r3
 800bff0:	4680      	mov	r8, r0
 800bff2:	4689      	mov	r9, r1
 800bff4:	f04f 0200 	mov.w	r2, #0
 800bff8:	d124      	bne.n	800c044 <_dtoa_r+0x60c>
 800bffa:	4b1b      	ldr	r3, [pc, #108]	; (800c068 <_dtoa_r+0x630>)
 800bffc:	4650      	mov	r0, sl
 800bffe:	4659      	mov	r1, fp
 800c000:	f7f4 f974 	bl	80002ec <__adddf3>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4640      	mov	r0, r8
 800c00a:	4649      	mov	r1, r9
 800c00c:	f7f4 fdb4 	bl	8000b78 <__aeabi_dcmpgt>
 800c010:	2800      	cmp	r0, #0
 800c012:	d173      	bne.n	800c0fc <_dtoa_r+0x6c4>
 800c014:	4652      	mov	r2, sl
 800c016:	465b      	mov	r3, fp
 800c018:	4913      	ldr	r1, [pc, #76]	; (800c068 <_dtoa_r+0x630>)
 800c01a:	2000      	movs	r0, #0
 800c01c:	f7f4 f964 	bl	80002e8 <__aeabi_dsub>
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	4640      	mov	r0, r8
 800c026:	4649      	mov	r1, r9
 800c028:	f7f4 fd88 	bl	8000b3c <__aeabi_dcmplt>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f43f af35 	beq.w	800be9c <_dtoa_r+0x464>
 800c032:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c034:	1e6b      	subs	r3, r5, #1
 800c036:	930f      	str	r3, [sp, #60]	; 0x3c
 800c038:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c03c:	2b30      	cmp	r3, #48	; 0x30
 800c03e:	d0f8      	beq.n	800c032 <_dtoa_r+0x5fa>
 800c040:	9700      	str	r7, [sp, #0]
 800c042:	e049      	b.n	800c0d8 <_dtoa_r+0x6a0>
 800c044:	4b05      	ldr	r3, [pc, #20]	; (800c05c <_dtoa_r+0x624>)
 800c046:	f7f4 fb07 	bl	8000658 <__aeabi_dmul>
 800c04a:	4680      	mov	r8, r0
 800c04c:	4689      	mov	r9, r1
 800c04e:	e7bd      	b.n	800bfcc <_dtoa_r+0x594>
 800c050:	0800e040 	.word	0x0800e040
 800c054:	0800e018 	.word	0x0800e018
 800c058:	3ff00000 	.word	0x3ff00000
 800c05c:	40240000 	.word	0x40240000
 800c060:	401c0000 	.word	0x401c0000
 800c064:	40140000 	.word	0x40140000
 800c068:	3fe00000 	.word	0x3fe00000
 800c06c:	9d01      	ldr	r5, [sp, #4]
 800c06e:	4656      	mov	r6, sl
 800c070:	465f      	mov	r7, fp
 800c072:	4642      	mov	r2, r8
 800c074:	464b      	mov	r3, r9
 800c076:	4630      	mov	r0, r6
 800c078:	4639      	mov	r1, r7
 800c07a:	f7f4 fc17 	bl	80008ac <__aeabi_ddiv>
 800c07e:	f7f4 fd9b 	bl	8000bb8 <__aeabi_d2iz>
 800c082:	4682      	mov	sl, r0
 800c084:	f7f4 fa7e 	bl	8000584 <__aeabi_i2d>
 800c088:	4642      	mov	r2, r8
 800c08a:	464b      	mov	r3, r9
 800c08c:	f7f4 fae4 	bl	8000658 <__aeabi_dmul>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4630      	mov	r0, r6
 800c096:	4639      	mov	r1, r7
 800c098:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c09c:	f7f4 f924 	bl	80002e8 <__aeabi_dsub>
 800c0a0:	f805 6b01 	strb.w	r6, [r5], #1
 800c0a4:	9e01      	ldr	r6, [sp, #4]
 800c0a6:	9f03      	ldr	r7, [sp, #12]
 800c0a8:	1bae      	subs	r6, r5, r6
 800c0aa:	42b7      	cmp	r7, r6
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	d135      	bne.n	800c11e <_dtoa_r+0x6e6>
 800c0b2:	f7f4 f91b 	bl	80002ec <__adddf3>
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	464b      	mov	r3, r9
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	f7f4 fd5b 	bl	8000b78 <__aeabi_dcmpgt>
 800c0c2:	b9d0      	cbnz	r0, 800c0fa <_dtoa_r+0x6c2>
 800c0c4:	4642      	mov	r2, r8
 800c0c6:	464b      	mov	r3, r9
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fd2c 	bl	8000b28 <__aeabi_dcmpeq>
 800c0d0:	b110      	cbz	r0, 800c0d8 <_dtoa_r+0x6a0>
 800c0d2:	f01a 0f01 	tst.w	sl, #1
 800c0d6:	d110      	bne.n	800c0fa <_dtoa_r+0x6c2>
 800c0d8:	4620      	mov	r0, r4
 800c0da:	ee18 1a10 	vmov	r1, s16
 800c0de:	f000 fae5 	bl	800c6ac <_Bfree>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9800      	ldr	r0, [sp, #0]
 800c0e6:	702b      	strb	r3, [r5, #0]
 800c0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	6018      	str	r0, [r3, #0]
 800c0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f43f acf1 	beq.w	800bad8 <_dtoa_r+0xa0>
 800c0f6:	601d      	str	r5, [r3, #0]
 800c0f8:	e4ee      	b.n	800bad8 <_dtoa_r+0xa0>
 800c0fa:	9f00      	ldr	r7, [sp, #0]
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	461d      	mov	r5, r3
 800c100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c104:	2a39      	cmp	r2, #57	; 0x39
 800c106:	d106      	bne.n	800c116 <_dtoa_r+0x6de>
 800c108:	9a01      	ldr	r2, [sp, #4]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d1f7      	bne.n	800c0fe <_dtoa_r+0x6c6>
 800c10e:	9901      	ldr	r1, [sp, #4]
 800c110:	2230      	movs	r2, #48	; 0x30
 800c112:	3701      	adds	r7, #1
 800c114:	700a      	strb	r2, [r1, #0]
 800c116:	781a      	ldrb	r2, [r3, #0]
 800c118:	3201      	adds	r2, #1
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	e790      	b.n	800c040 <_dtoa_r+0x608>
 800c11e:	4ba6      	ldr	r3, [pc, #664]	; (800c3b8 <_dtoa_r+0x980>)
 800c120:	2200      	movs	r2, #0
 800c122:	f7f4 fa99 	bl	8000658 <__aeabi_dmul>
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	4606      	mov	r6, r0
 800c12c:	460f      	mov	r7, r1
 800c12e:	f7f4 fcfb 	bl	8000b28 <__aeabi_dcmpeq>
 800c132:	2800      	cmp	r0, #0
 800c134:	d09d      	beq.n	800c072 <_dtoa_r+0x63a>
 800c136:	e7cf      	b.n	800c0d8 <_dtoa_r+0x6a0>
 800c138:	9a08      	ldr	r2, [sp, #32]
 800c13a:	2a00      	cmp	r2, #0
 800c13c:	f000 80d7 	beq.w	800c2ee <_dtoa_r+0x8b6>
 800c140:	9a06      	ldr	r2, [sp, #24]
 800c142:	2a01      	cmp	r2, #1
 800c144:	f300 80ba 	bgt.w	800c2bc <_dtoa_r+0x884>
 800c148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c14a:	2a00      	cmp	r2, #0
 800c14c:	f000 80b2 	beq.w	800c2b4 <_dtoa_r+0x87c>
 800c150:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c154:	9e07      	ldr	r6, [sp, #28]
 800c156:	9d04      	ldr	r5, [sp, #16]
 800c158:	9a04      	ldr	r2, [sp, #16]
 800c15a:	441a      	add	r2, r3
 800c15c:	9204      	str	r2, [sp, #16]
 800c15e:	9a05      	ldr	r2, [sp, #20]
 800c160:	2101      	movs	r1, #1
 800c162:	441a      	add	r2, r3
 800c164:	4620      	mov	r0, r4
 800c166:	9205      	str	r2, [sp, #20]
 800c168:	f000 fb58 	bl	800c81c <__i2b>
 800c16c:	4607      	mov	r7, r0
 800c16e:	2d00      	cmp	r5, #0
 800c170:	dd0c      	ble.n	800c18c <_dtoa_r+0x754>
 800c172:	9b05      	ldr	r3, [sp, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	dd09      	ble.n	800c18c <_dtoa_r+0x754>
 800c178:	42ab      	cmp	r3, r5
 800c17a:	9a04      	ldr	r2, [sp, #16]
 800c17c:	bfa8      	it	ge
 800c17e:	462b      	movge	r3, r5
 800c180:	1ad2      	subs	r2, r2, r3
 800c182:	9204      	str	r2, [sp, #16]
 800c184:	9a05      	ldr	r2, [sp, #20]
 800c186:	1aed      	subs	r5, r5, r3
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	9305      	str	r3, [sp, #20]
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	b31b      	cbz	r3, 800c1d8 <_dtoa_r+0x7a0>
 800c190:	9b08      	ldr	r3, [sp, #32]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 80af 	beq.w	800c2f6 <_dtoa_r+0x8be>
 800c198:	2e00      	cmp	r6, #0
 800c19a:	dd13      	ble.n	800c1c4 <_dtoa_r+0x78c>
 800c19c:	4639      	mov	r1, r7
 800c19e:	4632      	mov	r2, r6
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 fbfb 	bl	800c99c <__pow5mult>
 800c1a6:	ee18 2a10 	vmov	r2, s16
 800c1aa:	4601      	mov	r1, r0
 800c1ac:	4607      	mov	r7, r0
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f000 fb4a 	bl	800c848 <__multiply>
 800c1b4:	ee18 1a10 	vmov	r1, s16
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fa76 	bl	800c6ac <_Bfree>
 800c1c0:	ee08 8a10 	vmov	s16, r8
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	1b9a      	subs	r2, r3, r6
 800c1c8:	d006      	beq.n	800c1d8 <_dtoa_r+0x7a0>
 800c1ca:	ee18 1a10 	vmov	r1, s16
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 fbe4 	bl	800c99c <__pow5mult>
 800c1d4:	ee08 0a10 	vmov	s16, r0
 800c1d8:	2101      	movs	r1, #1
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 fb1e 	bl	800c81c <__i2b>
 800c1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	f340 8088 	ble.w	800c2fa <_dtoa_r+0x8c2>
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	4601      	mov	r1, r0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 fbd4 	bl	800c99c <__pow5mult>
 800c1f4:	9b06      	ldr	r3, [sp, #24]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	f340 8081 	ble.w	800c300 <_dtoa_r+0x8c8>
 800c1fe:	f04f 0800 	mov.w	r8, #0
 800c202:	6933      	ldr	r3, [r6, #16]
 800c204:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c208:	6918      	ldr	r0, [r3, #16]
 800c20a:	f000 fab7 	bl	800c77c <__hi0bits>
 800c20e:	f1c0 0020 	rsb	r0, r0, #32
 800c212:	9b05      	ldr	r3, [sp, #20]
 800c214:	4418      	add	r0, r3
 800c216:	f010 001f 	ands.w	r0, r0, #31
 800c21a:	f000 8092 	beq.w	800c342 <_dtoa_r+0x90a>
 800c21e:	f1c0 0320 	rsb	r3, r0, #32
 800c222:	2b04      	cmp	r3, #4
 800c224:	f340 808a 	ble.w	800c33c <_dtoa_r+0x904>
 800c228:	f1c0 001c 	rsb	r0, r0, #28
 800c22c:	9b04      	ldr	r3, [sp, #16]
 800c22e:	4403      	add	r3, r0
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	9b05      	ldr	r3, [sp, #20]
 800c234:	4403      	add	r3, r0
 800c236:	4405      	add	r5, r0
 800c238:	9305      	str	r3, [sp, #20]
 800c23a:	9b04      	ldr	r3, [sp, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dd07      	ble.n	800c250 <_dtoa_r+0x818>
 800c240:	ee18 1a10 	vmov	r1, s16
 800c244:	461a      	mov	r2, r3
 800c246:	4620      	mov	r0, r4
 800c248:	f000 fc02 	bl	800ca50 <__lshift>
 800c24c:	ee08 0a10 	vmov	s16, r0
 800c250:	9b05      	ldr	r3, [sp, #20]
 800c252:	2b00      	cmp	r3, #0
 800c254:	dd05      	ble.n	800c262 <_dtoa_r+0x82a>
 800c256:	4631      	mov	r1, r6
 800c258:	461a      	mov	r2, r3
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 fbf8 	bl	800ca50 <__lshift>
 800c260:	4606      	mov	r6, r0
 800c262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c264:	2b00      	cmp	r3, #0
 800c266:	d06e      	beq.n	800c346 <_dtoa_r+0x90e>
 800c268:	ee18 0a10 	vmov	r0, s16
 800c26c:	4631      	mov	r1, r6
 800c26e:	f000 fc5f 	bl	800cb30 <__mcmp>
 800c272:	2800      	cmp	r0, #0
 800c274:	da67      	bge.n	800c346 <_dtoa_r+0x90e>
 800c276:	9b00      	ldr	r3, [sp, #0]
 800c278:	3b01      	subs	r3, #1
 800c27a:	ee18 1a10 	vmov	r1, s16
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	220a      	movs	r2, #10
 800c282:	2300      	movs	r3, #0
 800c284:	4620      	mov	r0, r4
 800c286:	f000 fa33 	bl	800c6f0 <__multadd>
 800c28a:	9b08      	ldr	r3, [sp, #32]
 800c28c:	ee08 0a10 	vmov	s16, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 81b1 	beq.w	800c5f8 <_dtoa_r+0xbc0>
 800c296:	2300      	movs	r3, #0
 800c298:	4639      	mov	r1, r7
 800c29a:	220a      	movs	r2, #10
 800c29c:	4620      	mov	r0, r4
 800c29e:	f000 fa27 	bl	800c6f0 <__multadd>
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	f300 808e 	bgt.w	800c3c8 <_dtoa_r+0x990>
 800c2ac:	9b06      	ldr	r3, [sp, #24]
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	dc51      	bgt.n	800c356 <_dtoa_r+0x91e>
 800c2b2:	e089      	b.n	800c3c8 <_dtoa_r+0x990>
 800c2b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2ba:	e74b      	b.n	800c154 <_dtoa_r+0x71c>
 800c2bc:	9b03      	ldr	r3, [sp, #12]
 800c2be:	1e5e      	subs	r6, r3, #1
 800c2c0:	9b07      	ldr	r3, [sp, #28]
 800c2c2:	42b3      	cmp	r3, r6
 800c2c4:	bfbf      	itttt	lt
 800c2c6:	9b07      	ldrlt	r3, [sp, #28]
 800c2c8:	9607      	strlt	r6, [sp, #28]
 800c2ca:	1af2      	sublt	r2, r6, r3
 800c2cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c2ce:	bfb6      	itet	lt
 800c2d0:	189b      	addlt	r3, r3, r2
 800c2d2:	1b9e      	subge	r6, r3, r6
 800c2d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	bfb8      	it	lt
 800c2da:	2600      	movlt	r6, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfb7      	itett	lt
 800c2e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c2e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c2e8:	1a9d      	sublt	r5, r3, r2
 800c2ea:	2300      	movlt	r3, #0
 800c2ec:	e734      	b.n	800c158 <_dtoa_r+0x720>
 800c2ee:	9e07      	ldr	r6, [sp, #28]
 800c2f0:	9d04      	ldr	r5, [sp, #16]
 800c2f2:	9f08      	ldr	r7, [sp, #32]
 800c2f4:	e73b      	b.n	800c16e <_dtoa_r+0x736>
 800c2f6:	9a07      	ldr	r2, [sp, #28]
 800c2f8:	e767      	b.n	800c1ca <_dtoa_r+0x792>
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	dc18      	bgt.n	800c332 <_dtoa_r+0x8fa>
 800c300:	f1ba 0f00 	cmp.w	sl, #0
 800c304:	d115      	bne.n	800c332 <_dtoa_r+0x8fa>
 800c306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c30a:	b993      	cbnz	r3, 800c332 <_dtoa_r+0x8fa>
 800c30c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c310:	0d1b      	lsrs	r3, r3, #20
 800c312:	051b      	lsls	r3, r3, #20
 800c314:	b183      	cbz	r3, 800c338 <_dtoa_r+0x900>
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	3301      	adds	r3, #1
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	9b05      	ldr	r3, [sp, #20]
 800c31e:	3301      	adds	r3, #1
 800c320:	9305      	str	r3, [sp, #20]
 800c322:	f04f 0801 	mov.w	r8, #1
 800c326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f47f af6a 	bne.w	800c202 <_dtoa_r+0x7ca>
 800c32e:	2001      	movs	r0, #1
 800c330:	e76f      	b.n	800c212 <_dtoa_r+0x7da>
 800c332:	f04f 0800 	mov.w	r8, #0
 800c336:	e7f6      	b.n	800c326 <_dtoa_r+0x8ee>
 800c338:	4698      	mov	r8, r3
 800c33a:	e7f4      	b.n	800c326 <_dtoa_r+0x8ee>
 800c33c:	f43f af7d 	beq.w	800c23a <_dtoa_r+0x802>
 800c340:	4618      	mov	r0, r3
 800c342:	301c      	adds	r0, #28
 800c344:	e772      	b.n	800c22c <_dtoa_r+0x7f4>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	dc37      	bgt.n	800c3bc <_dtoa_r+0x984>
 800c34c:	9b06      	ldr	r3, [sp, #24]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	dd34      	ble.n	800c3bc <_dtoa_r+0x984>
 800c352:	9b03      	ldr	r3, [sp, #12]
 800c354:	9302      	str	r3, [sp, #8]
 800c356:	9b02      	ldr	r3, [sp, #8]
 800c358:	b96b      	cbnz	r3, 800c376 <_dtoa_r+0x93e>
 800c35a:	4631      	mov	r1, r6
 800c35c:	2205      	movs	r2, #5
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 f9c6 	bl	800c6f0 <__multadd>
 800c364:	4601      	mov	r1, r0
 800c366:	4606      	mov	r6, r0
 800c368:	ee18 0a10 	vmov	r0, s16
 800c36c:	f000 fbe0 	bl	800cb30 <__mcmp>
 800c370:	2800      	cmp	r0, #0
 800c372:	f73f adbb 	bgt.w	800beec <_dtoa_r+0x4b4>
 800c376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c378:	9d01      	ldr	r5, [sp, #4]
 800c37a:	43db      	mvns	r3, r3
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	f04f 0800 	mov.w	r8, #0
 800c382:	4631      	mov	r1, r6
 800c384:	4620      	mov	r0, r4
 800c386:	f000 f991 	bl	800c6ac <_Bfree>
 800c38a:	2f00      	cmp	r7, #0
 800c38c:	f43f aea4 	beq.w	800c0d8 <_dtoa_r+0x6a0>
 800c390:	f1b8 0f00 	cmp.w	r8, #0
 800c394:	d005      	beq.n	800c3a2 <_dtoa_r+0x96a>
 800c396:	45b8      	cmp	r8, r7
 800c398:	d003      	beq.n	800c3a2 <_dtoa_r+0x96a>
 800c39a:	4641      	mov	r1, r8
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 f985 	bl	800c6ac <_Bfree>
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 f981 	bl	800c6ac <_Bfree>
 800c3aa:	e695      	b.n	800c0d8 <_dtoa_r+0x6a0>
 800c3ac:	2600      	movs	r6, #0
 800c3ae:	4637      	mov	r7, r6
 800c3b0:	e7e1      	b.n	800c376 <_dtoa_r+0x93e>
 800c3b2:	9700      	str	r7, [sp, #0]
 800c3b4:	4637      	mov	r7, r6
 800c3b6:	e599      	b.n	800beec <_dtoa_r+0x4b4>
 800c3b8:	40240000 	.word	0x40240000
 800c3bc:	9b08      	ldr	r3, [sp, #32]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 80ca 	beq.w	800c558 <_dtoa_r+0xb20>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	2d00      	cmp	r5, #0
 800c3ca:	dd05      	ble.n	800c3d8 <_dtoa_r+0x9a0>
 800c3cc:	4639      	mov	r1, r7
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 fb3d 	bl	800ca50 <__lshift>
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	f1b8 0f00 	cmp.w	r8, #0
 800c3dc:	d05b      	beq.n	800c496 <_dtoa_r+0xa5e>
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f000 f923 	bl	800c62c <_Balloc>
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	b928      	cbnz	r0, 800c3f6 <_dtoa_r+0x9be>
 800c3ea:	4b87      	ldr	r3, [pc, #540]	; (800c608 <_dtoa_r+0xbd0>)
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c3f2:	f7ff bb3b 	b.w	800ba6c <_dtoa_r+0x34>
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	3202      	adds	r2, #2
 800c3fa:	0092      	lsls	r2, r2, #2
 800c3fc:	f107 010c 	add.w	r1, r7, #12
 800c400:	300c      	adds	r0, #12
 800c402:	f7fe fde3 	bl	800afcc <memcpy>
 800c406:	2201      	movs	r2, #1
 800c408:	4629      	mov	r1, r5
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 fb20 	bl	800ca50 <__lshift>
 800c410:	9b01      	ldr	r3, [sp, #4]
 800c412:	f103 0901 	add.w	r9, r3, #1
 800c416:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c41a:	4413      	add	r3, r2
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	f00a 0301 	and.w	r3, sl, #1
 800c422:	46b8      	mov	r8, r7
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	4607      	mov	r7, r0
 800c428:	4631      	mov	r1, r6
 800c42a:	ee18 0a10 	vmov	r0, s16
 800c42e:	f7ff fa75 	bl	800b91c <quorem>
 800c432:	4641      	mov	r1, r8
 800c434:	9002      	str	r0, [sp, #8]
 800c436:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c43a:	ee18 0a10 	vmov	r0, s16
 800c43e:	f000 fb77 	bl	800cb30 <__mcmp>
 800c442:	463a      	mov	r2, r7
 800c444:	9003      	str	r0, [sp, #12]
 800c446:	4631      	mov	r1, r6
 800c448:	4620      	mov	r0, r4
 800c44a:	f000 fb8d 	bl	800cb68 <__mdiff>
 800c44e:	68c2      	ldr	r2, [r0, #12]
 800c450:	f109 3bff 	add.w	fp, r9, #4294967295
 800c454:	4605      	mov	r5, r0
 800c456:	bb02      	cbnz	r2, 800c49a <_dtoa_r+0xa62>
 800c458:	4601      	mov	r1, r0
 800c45a:	ee18 0a10 	vmov	r0, s16
 800c45e:	f000 fb67 	bl	800cb30 <__mcmp>
 800c462:	4602      	mov	r2, r0
 800c464:	4629      	mov	r1, r5
 800c466:	4620      	mov	r0, r4
 800c468:	9207      	str	r2, [sp, #28]
 800c46a:	f000 f91f 	bl	800c6ac <_Bfree>
 800c46e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c472:	ea43 0102 	orr.w	r1, r3, r2
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	430b      	orrs	r3, r1
 800c47a:	464d      	mov	r5, r9
 800c47c:	d10f      	bne.n	800c49e <_dtoa_r+0xa66>
 800c47e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c482:	d02a      	beq.n	800c4da <_dtoa_r+0xaa2>
 800c484:	9b03      	ldr	r3, [sp, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	dd02      	ble.n	800c490 <_dtoa_r+0xa58>
 800c48a:	9b02      	ldr	r3, [sp, #8]
 800c48c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c490:	f88b a000 	strb.w	sl, [fp]
 800c494:	e775      	b.n	800c382 <_dtoa_r+0x94a>
 800c496:	4638      	mov	r0, r7
 800c498:	e7ba      	b.n	800c410 <_dtoa_r+0x9d8>
 800c49a:	2201      	movs	r2, #1
 800c49c:	e7e2      	b.n	800c464 <_dtoa_r+0xa2c>
 800c49e:	9b03      	ldr	r3, [sp, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	db04      	blt.n	800c4ae <_dtoa_r+0xa76>
 800c4a4:	9906      	ldr	r1, [sp, #24]
 800c4a6:	430b      	orrs	r3, r1
 800c4a8:	9904      	ldr	r1, [sp, #16]
 800c4aa:	430b      	orrs	r3, r1
 800c4ac:	d122      	bne.n	800c4f4 <_dtoa_r+0xabc>
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	ddee      	ble.n	800c490 <_dtoa_r+0xa58>
 800c4b2:	ee18 1a10 	vmov	r1, s16
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fac9 	bl	800ca50 <__lshift>
 800c4be:	4631      	mov	r1, r6
 800c4c0:	ee08 0a10 	vmov	s16, r0
 800c4c4:	f000 fb34 	bl	800cb30 <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dc03      	bgt.n	800c4d4 <_dtoa_r+0xa9c>
 800c4cc:	d1e0      	bne.n	800c490 <_dtoa_r+0xa58>
 800c4ce:	f01a 0f01 	tst.w	sl, #1
 800c4d2:	d0dd      	beq.n	800c490 <_dtoa_r+0xa58>
 800c4d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4d8:	d1d7      	bne.n	800c48a <_dtoa_r+0xa52>
 800c4da:	2339      	movs	r3, #57	; 0x39
 800c4dc:	f88b 3000 	strb.w	r3, [fp]
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	461d      	mov	r5, r3
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c4ea:	2a39      	cmp	r2, #57	; 0x39
 800c4ec:	d071      	beq.n	800c5d2 <_dtoa_r+0xb9a>
 800c4ee:	3201      	adds	r2, #1
 800c4f0:	701a      	strb	r2, [r3, #0]
 800c4f2:	e746      	b.n	800c382 <_dtoa_r+0x94a>
 800c4f4:	2a00      	cmp	r2, #0
 800c4f6:	dd07      	ble.n	800c508 <_dtoa_r+0xad0>
 800c4f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4fc:	d0ed      	beq.n	800c4da <_dtoa_r+0xaa2>
 800c4fe:	f10a 0301 	add.w	r3, sl, #1
 800c502:	f88b 3000 	strb.w	r3, [fp]
 800c506:	e73c      	b.n	800c382 <_dtoa_r+0x94a>
 800c508:	9b05      	ldr	r3, [sp, #20]
 800c50a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c50e:	4599      	cmp	r9, r3
 800c510:	d047      	beq.n	800c5a2 <_dtoa_r+0xb6a>
 800c512:	ee18 1a10 	vmov	r1, s16
 800c516:	2300      	movs	r3, #0
 800c518:	220a      	movs	r2, #10
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f8e8 	bl	800c6f0 <__multadd>
 800c520:	45b8      	cmp	r8, r7
 800c522:	ee08 0a10 	vmov	s16, r0
 800c526:	f04f 0300 	mov.w	r3, #0
 800c52a:	f04f 020a 	mov.w	r2, #10
 800c52e:	4641      	mov	r1, r8
 800c530:	4620      	mov	r0, r4
 800c532:	d106      	bne.n	800c542 <_dtoa_r+0xb0a>
 800c534:	f000 f8dc 	bl	800c6f0 <__multadd>
 800c538:	4680      	mov	r8, r0
 800c53a:	4607      	mov	r7, r0
 800c53c:	f109 0901 	add.w	r9, r9, #1
 800c540:	e772      	b.n	800c428 <_dtoa_r+0x9f0>
 800c542:	f000 f8d5 	bl	800c6f0 <__multadd>
 800c546:	4639      	mov	r1, r7
 800c548:	4680      	mov	r8, r0
 800c54a:	2300      	movs	r3, #0
 800c54c:	220a      	movs	r2, #10
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 f8ce 	bl	800c6f0 <__multadd>
 800c554:	4607      	mov	r7, r0
 800c556:	e7f1      	b.n	800c53c <_dtoa_r+0xb04>
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	9302      	str	r3, [sp, #8]
 800c55c:	9d01      	ldr	r5, [sp, #4]
 800c55e:	ee18 0a10 	vmov	r0, s16
 800c562:	4631      	mov	r1, r6
 800c564:	f7ff f9da 	bl	800b91c <quorem>
 800c568:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	f805 ab01 	strb.w	sl, [r5], #1
 800c572:	1aea      	subs	r2, r5, r3
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	4293      	cmp	r3, r2
 800c578:	dd09      	ble.n	800c58e <_dtoa_r+0xb56>
 800c57a:	ee18 1a10 	vmov	r1, s16
 800c57e:	2300      	movs	r3, #0
 800c580:	220a      	movs	r2, #10
 800c582:	4620      	mov	r0, r4
 800c584:	f000 f8b4 	bl	800c6f0 <__multadd>
 800c588:	ee08 0a10 	vmov	s16, r0
 800c58c:	e7e7      	b.n	800c55e <_dtoa_r+0xb26>
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfc8      	it	gt
 800c594:	461d      	movgt	r5, r3
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	bfd8      	it	le
 800c59a:	2501      	movle	r5, #1
 800c59c:	441d      	add	r5, r3
 800c59e:	f04f 0800 	mov.w	r8, #0
 800c5a2:	ee18 1a10 	vmov	r1, s16
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 fa51 	bl	800ca50 <__lshift>
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	ee08 0a10 	vmov	s16, r0
 800c5b4:	f000 fabc 	bl	800cb30 <__mcmp>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	dc91      	bgt.n	800c4e0 <_dtoa_r+0xaa8>
 800c5bc:	d102      	bne.n	800c5c4 <_dtoa_r+0xb8c>
 800c5be:	f01a 0f01 	tst.w	sl, #1
 800c5c2:	d18d      	bne.n	800c4e0 <_dtoa_r+0xaa8>
 800c5c4:	462b      	mov	r3, r5
 800c5c6:	461d      	mov	r5, r3
 800c5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5cc:	2a30      	cmp	r2, #48	; 0x30
 800c5ce:	d0fa      	beq.n	800c5c6 <_dtoa_r+0xb8e>
 800c5d0:	e6d7      	b.n	800c382 <_dtoa_r+0x94a>
 800c5d2:	9a01      	ldr	r2, [sp, #4]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d184      	bne.n	800c4e2 <_dtoa_r+0xaaa>
 800c5d8:	9b00      	ldr	r3, [sp, #0]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	2331      	movs	r3, #49	; 0x31
 800c5e0:	7013      	strb	r3, [r2, #0]
 800c5e2:	e6ce      	b.n	800c382 <_dtoa_r+0x94a>
 800c5e4:	4b09      	ldr	r3, [pc, #36]	; (800c60c <_dtoa_r+0xbd4>)
 800c5e6:	f7ff ba95 	b.w	800bb14 <_dtoa_r+0xdc>
 800c5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f47f aa6e 	bne.w	800bace <_dtoa_r+0x96>
 800c5f2:	4b07      	ldr	r3, [pc, #28]	; (800c610 <_dtoa_r+0xbd8>)
 800c5f4:	f7ff ba8e 	b.w	800bb14 <_dtoa_r+0xdc>
 800c5f8:	9b02      	ldr	r3, [sp, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dcae      	bgt.n	800c55c <_dtoa_r+0xb24>
 800c5fe:	9b06      	ldr	r3, [sp, #24]
 800c600:	2b02      	cmp	r3, #2
 800c602:	f73f aea8 	bgt.w	800c356 <_dtoa_r+0x91e>
 800c606:	e7a9      	b.n	800c55c <_dtoa_r+0xb24>
 800c608:	0800dfab 	.word	0x0800dfab
 800c60c:	0800df08 	.word	0x0800df08
 800c610:	0800df2c 	.word	0x0800df2c

0800c614 <_localeconv_r>:
 800c614:	4800      	ldr	r0, [pc, #0]	; (800c618 <_localeconv_r+0x4>)
 800c616:	4770      	bx	lr
 800c618:	20000434 	.word	0x20000434

0800c61c <malloc>:
 800c61c:	4b02      	ldr	r3, [pc, #8]	; (800c628 <malloc+0xc>)
 800c61e:	4601      	mov	r1, r0
 800c620:	6818      	ldr	r0, [r3, #0]
 800c622:	f000 bc09 	b.w	800ce38 <_malloc_r>
 800c626:	bf00      	nop
 800c628:	200002e0 	.word	0x200002e0

0800c62c <_Balloc>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c630:	4604      	mov	r4, r0
 800c632:	460d      	mov	r5, r1
 800c634:	b976      	cbnz	r6, 800c654 <_Balloc+0x28>
 800c636:	2010      	movs	r0, #16
 800c638:	f7ff fff0 	bl	800c61c <malloc>
 800c63c:	4602      	mov	r2, r0
 800c63e:	6260      	str	r0, [r4, #36]	; 0x24
 800c640:	b920      	cbnz	r0, 800c64c <_Balloc+0x20>
 800c642:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <_Balloc+0x78>)
 800c644:	4818      	ldr	r0, [pc, #96]	; (800c6a8 <_Balloc+0x7c>)
 800c646:	2166      	movs	r1, #102	; 0x66
 800c648:	f000 fdd6 	bl	800d1f8 <__assert_func>
 800c64c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c650:	6006      	str	r6, [r0, #0]
 800c652:	60c6      	str	r6, [r0, #12]
 800c654:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c656:	68f3      	ldr	r3, [r6, #12]
 800c658:	b183      	cbz	r3, 800c67c <_Balloc+0x50>
 800c65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c662:	b9b8      	cbnz	r0, 800c694 <_Balloc+0x68>
 800c664:	2101      	movs	r1, #1
 800c666:	fa01 f605 	lsl.w	r6, r1, r5
 800c66a:	1d72      	adds	r2, r6, #5
 800c66c:	0092      	lsls	r2, r2, #2
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 fb60 	bl	800cd34 <_calloc_r>
 800c674:	b160      	cbz	r0, 800c690 <_Balloc+0x64>
 800c676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c67a:	e00e      	b.n	800c69a <_Balloc+0x6e>
 800c67c:	2221      	movs	r2, #33	; 0x21
 800c67e:	2104      	movs	r1, #4
 800c680:	4620      	mov	r0, r4
 800c682:	f000 fb57 	bl	800cd34 <_calloc_r>
 800c686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c688:	60f0      	str	r0, [r6, #12]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1e4      	bne.n	800c65a <_Balloc+0x2e>
 800c690:	2000      	movs	r0, #0
 800c692:	bd70      	pop	{r4, r5, r6, pc}
 800c694:	6802      	ldr	r2, [r0, #0]
 800c696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c69a:	2300      	movs	r3, #0
 800c69c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6a0:	e7f7      	b.n	800c692 <_Balloc+0x66>
 800c6a2:	bf00      	nop
 800c6a4:	0800df39 	.word	0x0800df39
 800c6a8:	0800dfbc 	.word	0x0800dfbc

0800c6ac <_Bfree>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	b976      	cbnz	r6, 800c6d4 <_Bfree+0x28>
 800c6b6:	2010      	movs	r0, #16
 800c6b8:	f7ff ffb0 	bl	800c61c <malloc>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	6268      	str	r0, [r5, #36]	; 0x24
 800c6c0:	b920      	cbnz	r0, 800c6cc <_Bfree+0x20>
 800c6c2:	4b09      	ldr	r3, [pc, #36]	; (800c6e8 <_Bfree+0x3c>)
 800c6c4:	4809      	ldr	r0, [pc, #36]	; (800c6ec <_Bfree+0x40>)
 800c6c6:	218a      	movs	r1, #138	; 0x8a
 800c6c8:	f000 fd96 	bl	800d1f8 <__assert_func>
 800c6cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6d0:	6006      	str	r6, [r0, #0]
 800c6d2:	60c6      	str	r6, [r0, #12]
 800c6d4:	b13c      	cbz	r4, 800c6e6 <_Bfree+0x3a>
 800c6d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6d8:	6862      	ldr	r2, [r4, #4]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6e0:	6021      	str	r1, [r4, #0]
 800c6e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	0800df39 	.word	0x0800df39
 800c6ec:	0800dfbc 	.word	0x0800dfbc

0800c6f0 <__multadd>:
 800c6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f4:	690d      	ldr	r5, [r1, #16]
 800c6f6:	4607      	mov	r7, r0
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	461e      	mov	r6, r3
 800c6fc:	f101 0c14 	add.w	ip, r1, #20
 800c700:	2000      	movs	r0, #0
 800c702:	f8dc 3000 	ldr.w	r3, [ip]
 800c706:	b299      	uxth	r1, r3
 800c708:	fb02 6101 	mla	r1, r2, r1, r6
 800c70c:	0c1e      	lsrs	r6, r3, #16
 800c70e:	0c0b      	lsrs	r3, r1, #16
 800c710:	fb02 3306 	mla	r3, r2, r6, r3
 800c714:	b289      	uxth	r1, r1
 800c716:	3001      	adds	r0, #1
 800c718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c71c:	4285      	cmp	r5, r0
 800c71e:	f84c 1b04 	str.w	r1, [ip], #4
 800c722:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c726:	dcec      	bgt.n	800c702 <__multadd+0x12>
 800c728:	b30e      	cbz	r6, 800c76e <__multadd+0x7e>
 800c72a:	68a3      	ldr	r3, [r4, #8]
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	dc19      	bgt.n	800c764 <__multadd+0x74>
 800c730:	6861      	ldr	r1, [r4, #4]
 800c732:	4638      	mov	r0, r7
 800c734:	3101      	adds	r1, #1
 800c736:	f7ff ff79 	bl	800c62c <_Balloc>
 800c73a:	4680      	mov	r8, r0
 800c73c:	b928      	cbnz	r0, 800c74a <__multadd+0x5a>
 800c73e:	4602      	mov	r2, r0
 800c740:	4b0c      	ldr	r3, [pc, #48]	; (800c774 <__multadd+0x84>)
 800c742:	480d      	ldr	r0, [pc, #52]	; (800c778 <__multadd+0x88>)
 800c744:	21b5      	movs	r1, #181	; 0xb5
 800c746:	f000 fd57 	bl	800d1f8 <__assert_func>
 800c74a:	6922      	ldr	r2, [r4, #16]
 800c74c:	3202      	adds	r2, #2
 800c74e:	f104 010c 	add.w	r1, r4, #12
 800c752:	0092      	lsls	r2, r2, #2
 800c754:	300c      	adds	r0, #12
 800c756:	f7fe fc39 	bl	800afcc <memcpy>
 800c75a:	4621      	mov	r1, r4
 800c75c:	4638      	mov	r0, r7
 800c75e:	f7ff ffa5 	bl	800c6ac <_Bfree>
 800c762:	4644      	mov	r4, r8
 800c764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c768:	3501      	adds	r5, #1
 800c76a:	615e      	str	r6, [r3, #20]
 800c76c:	6125      	str	r5, [r4, #16]
 800c76e:	4620      	mov	r0, r4
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c774:	0800dfab 	.word	0x0800dfab
 800c778:	0800dfbc 	.word	0x0800dfbc

0800c77c <__hi0bits>:
 800c77c:	0c03      	lsrs	r3, r0, #16
 800c77e:	041b      	lsls	r3, r3, #16
 800c780:	b9d3      	cbnz	r3, 800c7b8 <__hi0bits+0x3c>
 800c782:	0400      	lsls	r0, r0, #16
 800c784:	2310      	movs	r3, #16
 800c786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c78a:	bf04      	itt	eq
 800c78c:	0200      	lsleq	r0, r0, #8
 800c78e:	3308      	addeq	r3, #8
 800c790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c794:	bf04      	itt	eq
 800c796:	0100      	lsleq	r0, r0, #4
 800c798:	3304      	addeq	r3, #4
 800c79a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c79e:	bf04      	itt	eq
 800c7a0:	0080      	lsleq	r0, r0, #2
 800c7a2:	3302      	addeq	r3, #2
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	db05      	blt.n	800c7b4 <__hi0bits+0x38>
 800c7a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7ac:	f103 0301 	add.w	r3, r3, #1
 800c7b0:	bf08      	it	eq
 800c7b2:	2320      	moveq	r3, #32
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	4770      	bx	lr
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e7e4      	b.n	800c786 <__hi0bits+0xa>

0800c7bc <__lo0bits>:
 800c7bc:	6803      	ldr	r3, [r0, #0]
 800c7be:	f013 0207 	ands.w	r2, r3, #7
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	d00b      	beq.n	800c7de <__lo0bits+0x22>
 800c7c6:	07da      	lsls	r2, r3, #31
 800c7c8:	d423      	bmi.n	800c812 <__lo0bits+0x56>
 800c7ca:	0798      	lsls	r0, r3, #30
 800c7cc:	bf49      	itett	mi
 800c7ce:	085b      	lsrmi	r3, r3, #1
 800c7d0:	089b      	lsrpl	r3, r3, #2
 800c7d2:	2001      	movmi	r0, #1
 800c7d4:	600b      	strmi	r3, [r1, #0]
 800c7d6:	bf5c      	itt	pl
 800c7d8:	600b      	strpl	r3, [r1, #0]
 800c7da:	2002      	movpl	r0, #2
 800c7dc:	4770      	bx	lr
 800c7de:	b298      	uxth	r0, r3
 800c7e0:	b9a8      	cbnz	r0, 800c80e <__lo0bits+0x52>
 800c7e2:	0c1b      	lsrs	r3, r3, #16
 800c7e4:	2010      	movs	r0, #16
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	b90a      	cbnz	r2, 800c7ee <__lo0bits+0x32>
 800c7ea:	3008      	adds	r0, #8
 800c7ec:	0a1b      	lsrs	r3, r3, #8
 800c7ee:	071a      	lsls	r2, r3, #28
 800c7f0:	bf04      	itt	eq
 800c7f2:	091b      	lsreq	r3, r3, #4
 800c7f4:	3004      	addeq	r0, #4
 800c7f6:	079a      	lsls	r2, r3, #30
 800c7f8:	bf04      	itt	eq
 800c7fa:	089b      	lsreq	r3, r3, #2
 800c7fc:	3002      	addeq	r0, #2
 800c7fe:	07da      	lsls	r2, r3, #31
 800c800:	d403      	bmi.n	800c80a <__lo0bits+0x4e>
 800c802:	085b      	lsrs	r3, r3, #1
 800c804:	f100 0001 	add.w	r0, r0, #1
 800c808:	d005      	beq.n	800c816 <__lo0bits+0x5a>
 800c80a:	600b      	str	r3, [r1, #0]
 800c80c:	4770      	bx	lr
 800c80e:	4610      	mov	r0, r2
 800c810:	e7e9      	b.n	800c7e6 <__lo0bits+0x2a>
 800c812:	2000      	movs	r0, #0
 800c814:	4770      	bx	lr
 800c816:	2020      	movs	r0, #32
 800c818:	4770      	bx	lr
	...

0800c81c <__i2b>:
 800c81c:	b510      	push	{r4, lr}
 800c81e:	460c      	mov	r4, r1
 800c820:	2101      	movs	r1, #1
 800c822:	f7ff ff03 	bl	800c62c <_Balloc>
 800c826:	4602      	mov	r2, r0
 800c828:	b928      	cbnz	r0, 800c836 <__i2b+0x1a>
 800c82a:	4b05      	ldr	r3, [pc, #20]	; (800c840 <__i2b+0x24>)
 800c82c:	4805      	ldr	r0, [pc, #20]	; (800c844 <__i2b+0x28>)
 800c82e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c832:	f000 fce1 	bl	800d1f8 <__assert_func>
 800c836:	2301      	movs	r3, #1
 800c838:	6144      	str	r4, [r0, #20]
 800c83a:	6103      	str	r3, [r0, #16]
 800c83c:	bd10      	pop	{r4, pc}
 800c83e:	bf00      	nop
 800c840:	0800dfab 	.word	0x0800dfab
 800c844:	0800dfbc 	.word	0x0800dfbc

0800c848 <__multiply>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	4691      	mov	r9, r2
 800c84e:	690a      	ldr	r2, [r1, #16]
 800c850:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c854:	429a      	cmp	r2, r3
 800c856:	bfb8      	it	lt
 800c858:	460b      	movlt	r3, r1
 800c85a:	460c      	mov	r4, r1
 800c85c:	bfbc      	itt	lt
 800c85e:	464c      	movlt	r4, r9
 800c860:	4699      	movlt	r9, r3
 800c862:	6927      	ldr	r7, [r4, #16]
 800c864:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c868:	68a3      	ldr	r3, [r4, #8]
 800c86a:	6861      	ldr	r1, [r4, #4]
 800c86c:	eb07 060a 	add.w	r6, r7, sl
 800c870:	42b3      	cmp	r3, r6
 800c872:	b085      	sub	sp, #20
 800c874:	bfb8      	it	lt
 800c876:	3101      	addlt	r1, #1
 800c878:	f7ff fed8 	bl	800c62c <_Balloc>
 800c87c:	b930      	cbnz	r0, 800c88c <__multiply+0x44>
 800c87e:	4602      	mov	r2, r0
 800c880:	4b44      	ldr	r3, [pc, #272]	; (800c994 <__multiply+0x14c>)
 800c882:	4845      	ldr	r0, [pc, #276]	; (800c998 <__multiply+0x150>)
 800c884:	f240 115d 	movw	r1, #349	; 0x15d
 800c888:	f000 fcb6 	bl	800d1f8 <__assert_func>
 800c88c:	f100 0514 	add.w	r5, r0, #20
 800c890:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c894:	462b      	mov	r3, r5
 800c896:	2200      	movs	r2, #0
 800c898:	4543      	cmp	r3, r8
 800c89a:	d321      	bcc.n	800c8e0 <__multiply+0x98>
 800c89c:	f104 0314 	add.w	r3, r4, #20
 800c8a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c8a4:	f109 0314 	add.w	r3, r9, #20
 800c8a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c8ac:	9202      	str	r2, [sp, #8]
 800c8ae:	1b3a      	subs	r2, r7, r4
 800c8b0:	3a15      	subs	r2, #21
 800c8b2:	f022 0203 	bic.w	r2, r2, #3
 800c8b6:	3204      	adds	r2, #4
 800c8b8:	f104 0115 	add.w	r1, r4, #21
 800c8bc:	428f      	cmp	r7, r1
 800c8be:	bf38      	it	cc
 800c8c0:	2204      	movcc	r2, #4
 800c8c2:	9201      	str	r2, [sp, #4]
 800c8c4:	9a02      	ldr	r2, [sp, #8]
 800c8c6:	9303      	str	r3, [sp, #12]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d80c      	bhi.n	800c8e6 <__multiply+0x9e>
 800c8cc:	2e00      	cmp	r6, #0
 800c8ce:	dd03      	ble.n	800c8d8 <__multiply+0x90>
 800c8d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d05a      	beq.n	800c98e <__multiply+0x146>
 800c8d8:	6106      	str	r6, [r0, #16]
 800c8da:	b005      	add	sp, #20
 800c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e0:	f843 2b04 	str.w	r2, [r3], #4
 800c8e4:	e7d8      	b.n	800c898 <__multiply+0x50>
 800c8e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8ea:	f1ba 0f00 	cmp.w	sl, #0
 800c8ee:	d024      	beq.n	800c93a <__multiply+0xf2>
 800c8f0:	f104 0e14 	add.w	lr, r4, #20
 800c8f4:	46a9      	mov	r9, r5
 800c8f6:	f04f 0c00 	mov.w	ip, #0
 800c8fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c8fe:	f8d9 1000 	ldr.w	r1, [r9]
 800c902:	fa1f fb82 	uxth.w	fp, r2
 800c906:	b289      	uxth	r1, r1
 800c908:	fb0a 110b 	mla	r1, sl, fp, r1
 800c90c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c910:	f8d9 2000 	ldr.w	r2, [r9]
 800c914:	4461      	add	r1, ip
 800c916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c91a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c91e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c922:	b289      	uxth	r1, r1
 800c924:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c928:	4577      	cmp	r7, lr
 800c92a:	f849 1b04 	str.w	r1, [r9], #4
 800c92e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c932:	d8e2      	bhi.n	800c8fa <__multiply+0xb2>
 800c934:	9a01      	ldr	r2, [sp, #4]
 800c936:	f845 c002 	str.w	ip, [r5, r2]
 800c93a:	9a03      	ldr	r2, [sp, #12]
 800c93c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c940:	3304      	adds	r3, #4
 800c942:	f1b9 0f00 	cmp.w	r9, #0
 800c946:	d020      	beq.n	800c98a <__multiply+0x142>
 800c948:	6829      	ldr	r1, [r5, #0]
 800c94a:	f104 0c14 	add.w	ip, r4, #20
 800c94e:	46ae      	mov	lr, r5
 800c950:	f04f 0a00 	mov.w	sl, #0
 800c954:	f8bc b000 	ldrh.w	fp, [ip]
 800c958:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c95c:	fb09 220b 	mla	r2, r9, fp, r2
 800c960:	4492      	add	sl, r2
 800c962:	b289      	uxth	r1, r1
 800c964:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c968:	f84e 1b04 	str.w	r1, [lr], #4
 800c96c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c970:	f8be 1000 	ldrh.w	r1, [lr]
 800c974:	0c12      	lsrs	r2, r2, #16
 800c976:	fb09 1102 	mla	r1, r9, r2, r1
 800c97a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c97e:	4567      	cmp	r7, ip
 800c980:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c984:	d8e6      	bhi.n	800c954 <__multiply+0x10c>
 800c986:	9a01      	ldr	r2, [sp, #4]
 800c988:	50a9      	str	r1, [r5, r2]
 800c98a:	3504      	adds	r5, #4
 800c98c:	e79a      	b.n	800c8c4 <__multiply+0x7c>
 800c98e:	3e01      	subs	r6, #1
 800c990:	e79c      	b.n	800c8cc <__multiply+0x84>
 800c992:	bf00      	nop
 800c994:	0800dfab 	.word	0x0800dfab
 800c998:	0800dfbc 	.word	0x0800dfbc

0800c99c <__pow5mult>:
 800c99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a0:	4615      	mov	r5, r2
 800c9a2:	f012 0203 	ands.w	r2, r2, #3
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	d007      	beq.n	800c9bc <__pow5mult+0x20>
 800c9ac:	4c25      	ldr	r4, [pc, #148]	; (800ca44 <__pow5mult+0xa8>)
 800c9ae:	3a01      	subs	r2, #1
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9b6:	f7ff fe9b 	bl	800c6f0 <__multadd>
 800c9ba:	4607      	mov	r7, r0
 800c9bc:	10ad      	asrs	r5, r5, #2
 800c9be:	d03d      	beq.n	800ca3c <__pow5mult+0xa0>
 800c9c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9c2:	b97c      	cbnz	r4, 800c9e4 <__pow5mult+0x48>
 800c9c4:	2010      	movs	r0, #16
 800c9c6:	f7ff fe29 	bl	800c61c <malloc>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6270      	str	r0, [r6, #36]	; 0x24
 800c9ce:	b928      	cbnz	r0, 800c9dc <__pow5mult+0x40>
 800c9d0:	4b1d      	ldr	r3, [pc, #116]	; (800ca48 <__pow5mult+0xac>)
 800c9d2:	481e      	ldr	r0, [pc, #120]	; (800ca4c <__pow5mult+0xb0>)
 800c9d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9d8:	f000 fc0e 	bl	800d1f8 <__assert_func>
 800c9dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9e0:	6004      	str	r4, [r0, #0]
 800c9e2:	60c4      	str	r4, [r0, #12]
 800c9e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9ec:	b94c      	cbnz	r4, 800ca02 <__pow5mult+0x66>
 800c9ee:	f240 2171 	movw	r1, #625	; 0x271
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7ff ff12 	bl	800c81c <__i2b>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9fe:	4604      	mov	r4, r0
 800ca00:	6003      	str	r3, [r0, #0]
 800ca02:	f04f 0900 	mov.w	r9, #0
 800ca06:	07eb      	lsls	r3, r5, #31
 800ca08:	d50a      	bpl.n	800ca20 <__pow5mult+0x84>
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7ff ff1a 	bl	800c848 <__multiply>
 800ca14:	4639      	mov	r1, r7
 800ca16:	4680      	mov	r8, r0
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7ff fe47 	bl	800c6ac <_Bfree>
 800ca1e:	4647      	mov	r7, r8
 800ca20:	106d      	asrs	r5, r5, #1
 800ca22:	d00b      	beq.n	800ca3c <__pow5mult+0xa0>
 800ca24:	6820      	ldr	r0, [r4, #0]
 800ca26:	b938      	cbnz	r0, 800ca38 <__pow5mult+0x9c>
 800ca28:	4622      	mov	r2, r4
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f7ff ff0b 	bl	800c848 <__multiply>
 800ca32:	6020      	str	r0, [r4, #0]
 800ca34:	f8c0 9000 	str.w	r9, [r0]
 800ca38:	4604      	mov	r4, r0
 800ca3a:	e7e4      	b.n	800ca06 <__pow5mult+0x6a>
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca42:	bf00      	nop
 800ca44:	0800e108 	.word	0x0800e108
 800ca48:	0800df39 	.word	0x0800df39
 800ca4c:	0800dfbc 	.word	0x0800dfbc

0800ca50 <__lshift>:
 800ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca54:	460c      	mov	r4, r1
 800ca56:	6849      	ldr	r1, [r1, #4]
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca5e:	68a3      	ldr	r3, [r4, #8]
 800ca60:	4607      	mov	r7, r0
 800ca62:	4691      	mov	r9, r2
 800ca64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca68:	f108 0601 	add.w	r6, r8, #1
 800ca6c:	42b3      	cmp	r3, r6
 800ca6e:	db0b      	blt.n	800ca88 <__lshift+0x38>
 800ca70:	4638      	mov	r0, r7
 800ca72:	f7ff fddb 	bl	800c62c <_Balloc>
 800ca76:	4605      	mov	r5, r0
 800ca78:	b948      	cbnz	r0, 800ca8e <__lshift+0x3e>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	4b2a      	ldr	r3, [pc, #168]	; (800cb28 <__lshift+0xd8>)
 800ca7e:	482b      	ldr	r0, [pc, #172]	; (800cb2c <__lshift+0xdc>)
 800ca80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca84:	f000 fbb8 	bl	800d1f8 <__assert_func>
 800ca88:	3101      	adds	r1, #1
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	e7ee      	b.n	800ca6c <__lshift+0x1c>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f100 0114 	add.w	r1, r0, #20
 800ca94:	f100 0210 	add.w	r2, r0, #16
 800ca98:	4618      	mov	r0, r3
 800ca9a:	4553      	cmp	r3, sl
 800ca9c:	db37      	blt.n	800cb0e <__lshift+0xbe>
 800ca9e:	6920      	ldr	r0, [r4, #16]
 800caa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caa4:	f104 0314 	add.w	r3, r4, #20
 800caa8:	f019 091f 	ands.w	r9, r9, #31
 800caac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cab0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cab4:	d02f      	beq.n	800cb16 <__lshift+0xc6>
 800cab6:	f1c9 0e20 	rsb	lr, r9, #32
 800caba:	468a      	mov	sl, r1
 800cabc:	f04f 0c00 	mov.w	ip, #0
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	fa02 f209 	lsl.w	r2, r2, r9
 800cac6:	ea42 020c 	orr.w	r2, r2, ip
 800caca:	f84a 2b04 	str.w	r2, [sl], #4
 800cace:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad2:	4298      	cmp	r0, r3
 800cad4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cad8:	d8f2      	bhi.n	800cac0 <__lshift+0x70>
 800cada:	1b03      	subs	r3, r0, r4
 800cadc:	3b15      	subs	r3, #21
 800cade:	f023 0303 	bic.w	r3, r3, #3
 800cae2:	3304      	adds	r3, #4
 800cae4:	f104 0215 	add.w	r2, r4, #21
 800cae8:	4290      	cmp	r0, r2
 800caea:	bf38      	it	cc
 800caec:	2304      	movcc	r3, #4
 800caee:	f841 c003 	str.w	ip, [r1, r3]
 800caf2:	f1bc 0f00 	cmp.w	ip, #0
 800caf6:	d001      	beq.n	800cafc <__lshift+0xac>
 800caf8:	f108 0602 	add.w	r6, r8, #2
 800cafc:	3e01      	subs	r6, #1
 800cafe:	4638      	mov	r0, r7
 800cb00:	612e      	str	r6, [r5, #16]
 800cb02:	4621      	mov	r1, r4
 800cb04:	f7ff fdd2 	bl	800c6ac <_Bfree>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb12:	3301      	adds	r3, #1
 800cb14:	e7c1      	b.n	800ca9a <__lshift+0x4a>
 800cb16:	3904      	subs	r1, #4
 800cb18:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb20:	4298      	cmp	r0, r3
 800cb22:	d8f9      	bhi.n	800cb18 <__lshift+0xc8>
 800cb24:	e7ea      	b.n	800cafc <__lshift+0xac>
 800cb26:	bf00      	nop
 800cb28:	0800dfab 	.word	0x0800dfab
 800cb2c:	0800dfbc 	.word	0x0800dfbc

0800cb30 <__mcmp>:
 800cb30:	b530      	push	{r4, r5, lr}
 800cb32:	6902      	ldr	r2, [r0, #16]
 800cb34:	690c      	ldr	r4, [r1, #16]
 800cb36:	1b12      	subs	r2, r2, r4
 800cb38:	d10e      	bne.n	800cb58 <__mcmp+0x28>
 800cb3a:	f100 0314 	add.w	r3, r0, #20
 800cb3e:	3114      	adds	r1, #20
 800cb40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb50:	42a5      	cmp	r5, r4
 800cb52:	d003      	beq.n	800cb5c <__mcmp+0x2c>
 800cb54:	d305      	bcc.n	800cb62 <__mcmp+0x32>
 800cb56:	2201      	movs	r2, #1
 800cb58:	4610      	mov	r0, r2
 800cb5a:	bd30      	pop	{r4, r5, pc}
 800cb5c:	4283      	cmp	r3, r0
 800cb5e:	d3f3      	bcc.n	800cb48 <__mcmp+0x18>
 800cb60:	e7fa      	b.n	800cb58 <__mcmp+0x28>
 800cb62:	f04f 32ff 	mov.w	r2, #4294967295
 800cb66:	e7f7      	b.n	800cb58 <__mcmp+0x28>

0800cb68 <__mdiff>:
 800cb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	4606      	mov	r6, r0
 800cb70:	4611      	mov	r1, r2
 800cb72:	4620      	mov	r0, r4
 800cb74:	4690      	mov	r8, r2
 800cb76:	f7ff ffdb 	bl	800cb30 <__mcmp>
 800cb7a:	1e05      	subs	r5, r0, #0
 800cb7c:	d110      	bne.n	800cba0 <__mdiff+0x38>
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4630      	mov	r0, r6
 800cb82:	f7ff fd53 	bl	800c62c <_Balloc>
 800cb86:	b930      	cbnz	r0, 800cb96 <__mdiff+0x2e>
 800cb88:	4b3a      	ldr	r3, [pc, #232]	; (800cc74 <__mdiff+0x10c>)
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	f240 2132 	movw	r1, #562	; 0x232
 800cb90:	4839      	ldr	r0, [pc, #228]	; (800cc78 <__mdiff+0x110>)
 800cb92:	f000 fb31 	bl	800d1f8 <__assert_func>
 800cb96:	2301      	movs	r3, #1
 800cb98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba0:	bfa4      	itt	ge
 800cba2:	4643      	movge	r3, r8
 800cba4:	46a0      	movge	r8, r4
 800cba6:	4630      	mov	r0, r6
 800cba8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbac:	bfa6      	itte	ge
 800cbae:	461c      	movge	r4, r3
 800cbb0:	2500      	movge	r5, #0
 800cbb2:	2501      	movlt	r5, #1
 800cbb4:	f7ff fd3a 	bl	800c62c <_Balloc>
 800cbb8:	b920      	cbnz	r0, 800cbc4 <__mdiff+0x5c>
 800cbba:	4b2e      	ldr	r3, [pc, #184]	; (800cc74 <__mdiff+0x10c>)
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbc2:	e7e5      	b.n	800cb90 <__mdiff+0x28>
 800cbc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cbc8:	6926      	ldr	r6, [r4, #16]
 800cbca:	60c5      	str	r5, [r0, #12]
 800cbcc:	f104 0914 	add.w	r9, r4, #20
 800cbd0:	f108 0514 	add.w	r5, r8, #20
 800cbd4:	f100 0e14 	add.w	lr, r0, #20
 800cbd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cbdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cbe0:	f108 0210 	add.w	r2, r8, #16
 800cbe4:	46f2      	mov	sl, lr
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbf0:	fa1f f883 	uxth.w	r8, r3
 800cbf4:	fa11 f18b 	uxtah	r1, r1, fp
 800cbf8:	0c1b      	lsrs	r3, r3, #16
 800cbfa:	eba1 0808 	sub.w	r8, r1, r8
 800cbfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc06:	fa1f f888 	uxth.w	r8, r8
 800cc0a:	1419      	asrs	r1, r3, #16
 800cc0c:	454e      	cmp	r6, r9
 800cc0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc12:	f84a 3b04 	str.w	r3, [sl], #4
 800cc16:	d8e7      	bhi.n	800cbe8 <__mdiff+0x80>
 800cc18:	1b33      	subs	r3, r6, r4
 800cc1a:	3b15      	subs	r3, #21
 800cc1c:	f023 0303 	bic.w	r3, r3, #3
 800cc20:	3304      	adds	r3, #4
 800cc22:	3415      	adds	r4, #21
 800cc24:	42a6      	cmp	r6, r4
 800cc26:	bf38      	it	cc
 800cc28:	2304      	movcc	r3, #4
 800cc2a:	441d      	add	r5, r3
 800cc2c:	4473      	add	r3, lr
 800cc2e:	469e      	mov	lr, r3
 800cc30:	462e      	mov	r6, r5
 800cc32:	4566      	cmp	r6, ip
 800cc34:	d30e      	bcc.n	800cc54 <__mdiff+0xec>
 800cc36:	f10c 0203 	add.w	r2, ip, #3
 800cc3a:	1b52      	subs	r2, r2, r5
 800cc3c:	f022 0203 	bic.w	r2, r2, #3
 800cc40:	3d03      	subs	r5, #3
 800cc42:	45ac      	cmp	ip, r5
 800cc44:	bf38      	it	cc
 800cc46:	2200      	movcc	r2, #0
 800cc48:	441a      	add	r2, r3
 800cc4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc4e:	b17b      	cbz	r3, 800cc70 <__mdiff+0x108>
 800cc50:	6107      	str	r7, [r0, #16]
 800cc52:	e7a3      	b.n	800cb9c <__mdiff+0x34>
 800cc54:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc58:	fa11 f288 	uxtah	r2, r1, r8
 800cc5c:	1414      	asrs	r4, r2, #16
 800cc5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc62:	b292      	uxth	r2, r2
 800cc64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc68:	f84e 2b04 	str.w	r2, [lr], #4
 800cc6c:	1421      	asrs	r1, r4, #16
 800cc6e:	e7e0      	b.n	800cc32 <__mdiff+0xca>
 800cc70:	3f01      	subs	r7, #1
 800cc72:	e7ea      	b.n	800cc4a <__mdiff+0xe2>
 800cc74:	0800dfab 	.word	0x0800dfab
 800cc78:	0800dfbc 	.word	0x0800dfbc

0800cc7c <__d2b>:
 800cc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc80:	4689      	mov	r9, r1
 800cc82:	2101      	movs	r1, #1
 800cc84:	ec57 6b10 	vmov	r6, r7, d0
 800cc88:	4690      	mov	r8, r2
 800cc8a:	f7ff fccf 	bl	800c62c <_Balloc>
 800cc8e:	4604      	mov	r4, r0
 800cc90:	b930      	cbnz	r0, 800cca0 <__d2b+0x24>
 800cc92:	4602      	mov	r2, r0
 800cc94:	4b25      	ldr	r3, [pc, #148]	; (800cd2c <__d2b+0xb0>)
 800cc96:	4826      	ldr	r0, [pc, #152]	; (800cd30 <__d2b+0xb4>)
 800cc98:	f240 310a 	movw	r1, #778	; 0x30a
 800cc9c:	f000 faac 	bl	800d1f8 <__assert_func>
 800cca0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cca4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cca8:	bb35      	cbnz	r5, 800ccf8 <__d2b+0x7c>
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	d028      	beq.n	800cd02 <__d2b+0x86>
 800ccb0:	4668      	mov	r0, sp
 800ccb2:	9600      	str	r6, [sp, #0]
 800ccb4:	f7ff fd82 	bl	800c7bc <__lo0bits>
 800ccb8:	9900      	ldr	r1, [sp, #0]
 800ccba:	b300      	cbz	r0, 800ccfe <__d2b+0x82>
 800ccbc:	9a01      	ldr	r2, [sp, #4]
 800ccbe:	f1c0 0320 	rsb	r3, r0, #32
 800ccc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc6:	430b      	orrs	r3, r1
 800ccc8:	40c2      	lsrs	r2, r0
 800ccca:	6163      	str	r3, [r4, #20]
 800cccc:	9201      	str	r2, [sp, #4]
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	61a3      	str	r3, [r4, #24]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bf14      	ite	ne
 800ccd6:	2202      	movne	r2, #2
 800ccd8:	2201      	moveq	r2, #1
 800ccda:	6122      	str	r2, [r4, #16]
 800ccdc:	b1d5      	cbz	r5, 800cd14 <__d2b+0x98>
 800ccde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cce2:	4405      	add	r5, r0
 800cce4:	f8c9 5000 	str.w	r5, [r9]
 800cce8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccec:	f8c8 0000 	str.w	r0, [r8]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	b003      	add	sp, #12
 800ccf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccfc:	e7d5      	b.n	800ccaa <__d2b+0x2e>
 800ccfe:	6161      	str	r1, [r4, #20]
 800cd00:	e7e5      	b.n	800ccce <__d2b+0x52>
 800cd02:	a801      	add	r0, sp, #4
 800cd04:	f7ff fd5a 	bl	800c7bc <__lo0bits>
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	6163      	str	r3, [r4, #20]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	6122      	str	r2, [r4, #16]
 800cd10:	3020      	adds	r0, #32
 800cd12:	e7e3      	b.n	800ccdc <__d2b+0x60>
 800cd14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd1c:	f8c9 0000 	str.w	r0, [r9]
 800cd20:	6918      	ldr	r0, [r3, #16]
 800cd22:	f7ff fd2b 	bl	800c77c <__hi0bits>
 800cd26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd2a:	e7df      	b.n	800ccec <__d2b+0x70>
 800cd2c:	0800dfab 	.word	0x0800dfab
 800cd30:	0800dfbc 	.word	0x0800dfbc

0800cd34 <_calloc_r>:
 800cd34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd36:	fba1 2402 	umull	r2, r4, r1, r2
 800cd3a:	b94c      	cbnz	r4, 800cd50 <_calloc_r+0x1c>
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	9201      	str	r2, [sp, #4]
 800cd40:	f000 f87a 	bl	800ce38 <_malloc_r>
 800cd44:	9a01      	ldr	r2, [sp, #4]
 800cd46:	4605      	mov	r5, r0
 800cd48:	b930      	cbnz	r0, 800cd58 <_calloc_r+0x24>
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	b003      	add	sp, #12
 800cd4e:	bd30      	pop	{r4, r5, pc}
 800cd50:	220c      	movs	r2, #12
 800cd52:	6002      	str	r2, [r0, #0]
 800cd54:	2500      	movs	r5, #0
 800cd56:	e7f8      	b.n	800cd4a <_calloc_r+0x16>
 800cd58:	4621      	mov	r1, r4
 800cd5a:	f7fe f945 	bl	800afe8 <memset>
 800cd5e:	e7f4      	b.n	800cd4a <_calloc_r+0x16>

0800cd60 <_free_r>:
 800cd60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd62:	2900      	cmp	r1, #0
 800cd64:	d044      	beq.n	800cdf0 <_free_r+0x90>
 800cd66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd6a:	9001      	str	r0, [sp, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd72:	bfb8      	it	lt
 800cd74:	18e4      	addlt	r4, r4, r3
 800cd76:	f000 fa9b 	bl	800d2b0 <__malloc_lock>
 800cd7a:	4a1e      	ldr	r2, [pc, #120]	; (800cdf4 <_free_r+0x94>)
 800cd7c:	9801      	ldr	r0, [sp, #4]
 800cd7e:	6813      	ldr	r3, [r2, #0]
 800cd80:	b933      	cbnz	r3, 800cd90 <_free_r+0x30>
 800cd82:	6063      	str	r3, [r4, #4]
 800cd84:	6014      	str	r4, [r2, #0]
 800cd86:	b003      	add	sp, #12
 800cd88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd8c:	f000 ba96 	b.w	800d2bc <__malloc_unlock>
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	d908      	bls.n	800cda6 <_free_r+0x46>
 800cd94:	6825      	ldr	r5, [r4, #0]
 800cd96:	1961      	adds	r1, r4, r5
 800cd98:	428b      	cmp	r3, r1
 800cd9a:	bf01      	itttt	eq
 800cd9c:	6819      	ldreq	r1, [r3, #0]
 800cd9e:	685b      	ldreq	r3, [r3, #4]
 800cda0:	1949      	addeq	r1, r1, r5
 800cda2:	6021      	streq	r1, [r4, #0]
 800cda4:	e7ed      	b.n	800cd82 <_free_r+0x22>
 800cda6:	461a      	mov	r2, r3
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	b10b      	cbz	r3, 800cdb0 <_free_r+0x50>
 800cdac:	42a3      	cmp	r3, r4
 800cdae:	d9fa      	bls.n	800cda6 <_free_r+0x46>
 800cdb0:	6811      	ldr	r1, [r2, #0]
 800cdb2:	1855      	adds	r5, r2, r1
 800cdb4:	42a5      	cmp	r5, r4
 800cdb6:	d10b      	bne.n	800cdd0 <_free_r+0x70>
 800cdb8:	6824      	ldr	r4, [r4, #0]
 800cdba:	4421      	add	r1, r4
 800cdbc:	1854      	adds	r4, r2, r1
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	6011      	str	r1, [r2, #0]
 800cdc2:	d1e0      	bne.n	800cd86 <_free_r+0x26>
 800cdc4:	681c      	ldr	r4, [r3, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	6053      	str	r3, [r2, #4]
 800cdca:	4421      	add	r1, r4
 800cdcc:	6011      	str	r1, [r2, #0]
 800cdce:	e7da      	b.n	800cd86 <_free_r+0x26>
 800cdd0:	d902      	bls.n	800cdd8 <_free_r+0x78>
 800cdd2:	230c      	movs	r3, #12
 800cdd4:	6003      	str	r3, [r0, #0]
 800cdd6:	e7d6      	b.n	800cd86 <_free_r+0x26>
 800cdd8:	6825      	ldr	r5, [r4, #0]
 800cdda:	1961      	adds	r1, r4, r5
 800cddc:	428b      	cmp	r3, r1
 800cdde:	bf04      	itt	eq
 800cde0:	6819      	ldreq	r1, [r3, #0]
 800cde2:	685b      	ldreq	r3, [r3, #4]
 800cde4:	6063      	str	r3, [r4, #4]
 800cde6:	bf04      	itt	eq
 800cde8:	1949      	addeq	r1, r1, r5
 800cdea:	6021      	streq	r1, [r4, #0]
 800cdec:	6054      	str	r4, [r2, #4]
 800cdee:	e7ca      	b.n	800cd86 <_free_r+0x26>
 800cdf0:	b003      	add	sp, #12
 800cdf2:	bd30      	pop	{r4, r5, pc}
 800cdf4:	20001a4c 	.word	0x20001a4c

0800cdf8 <sbrk_aligned>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	4e0e      	ldr	r6, [pc, #56]	; (800ce34 <sbrk_aligned+0x3c>)
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	6831      	ldr	r1, [r6, #0]
 800ce00:	4605      	mov	r5, r0
 800ce02:	b911      	cbnz	r1, 800ce0a <sbrk_aligned+0x12>
 800ce04:	f000 f9e8 	bl	800d1d8 <_sbrk_r>
 800ce08:	6030      	str	r0, [r6, #0]
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	f000 f9e3 	bl	800d1d8 <_sbrk_r>
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	d00a      	beq.n	800ce2c <sbrk_aligned+0x34>
 800ce16:	1cc4      	adds	r4, r0, #3
 800ce18:	f024 0403 	bic.w	r4, r4, #3
 800ce1c:	42a0      	cmp	r0, r4
 800ce1e:	d007      	beq.n	800ce30 <sbrk_aligned+0x38>
 800ce20:	1a21      	subs	r1, r4, r0
 800ce22:	4628      	mov	r0, r5
 800ce24:	f000 f9d8 	bl	800d1d8 <_sbrk_r>
 800ce28:	3001      	adds	r0, #1
 800ce2a:	d101      	bne.n	800ce30 <sbrk_aligned+0x38>
 800ce2c:	f04f 34ff 	mov.w	r4, #4294967295
 800ce30:	4620      	mov	r0, r4
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	20001a50 	.word	0x20001a50

0800ce38 <_malloc_r>:
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	1ccd      	adds	r5, r1, #3
 800ce3e:	f025 0503 	bic.w	r5, r5, #3
 800ce42:	3508      	adds	r5, #8
 800ce44:	2d0c      	cmp	r5, #12
 800ce46:	bf38      	it	cc
 800ce48:	250c      	movcc	r5, #12
 800ce4a:	2d00      	cmp	r5, #0
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	db01      	blt.n	800ce54 <_malloc_r+0x1c>
 800ce50:	42a9      	cmp	r1, r5
 800ce52:	d905      	bls.n	800ce60 <_malloc_r+0x28>
 800ce54:	230c      	movs	r3, #12
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	2600      	movs	r6, #0
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce60:	4e2e      	ldr	r6, [pc, #184]	; (800cf1c <_malloc_r+0xe4>)
 800ce62:	f000 fa25 	bl	800d2b0 <__malloc_lock>
 800ce66:	6833      	ldr	r3, [r6, #0]
 800ce68:	461c      	mov	r4, r3
 800ce6a:	bb34      	cbnz	r4, 800ceba <_malloc_r+0x82>
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	4638      	mov	r0, r7
 800ce70:	f7ff ffc2 	bl	800cdf8 <sbrk_aligned>
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	4604      	mov	r4, r0
 800ce78:	d14d      	bne.n	800cf16 <_malloc_r+0xde>
 800ce7a:	6834      	ldr	r4, [r6, #0]
 800ce7c:	4626      	mov	r6, r4
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	d140      	bne.n	800cf04 <_malloc_r+0xcc>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	4631      	mov	r1, r6
 800ce86:	4638      	mov	r0, r7
 800ce88:	eb04 0803 	add.w	r8, r4, r3
 800ce8c:	f000 f9a4 	bl	800d1d8 <_sbrk_r>
 800ce90:	4580      	cmp	r8, r0
 800ce92:	d13a      	bne.n	800cf0a <_malloc_r+0xd2>
 800ce94:	6821      	ldr	r1, [r4, #0]
 800ce96:	3503      	adds	r5, #3
 800ce98:	1a6d      	subs	r5, r5, r1
 800ce9a:	f025 0503 	bic.w	r5, r5, #3
 800ce9e:	3508      	adds	r5, #8
 800cea0:	2d0c      	cmp	r5, #12
 800cea2:	bf38      	it	cc
 800cea4:	250c      	movcc	r5, #12
 800cea6:	4629      	mov	r1, r5
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f7ff ffa5 	bl	800cdf8 <sbrk_aligned>
 800ceae:	3001      	adds	r0, #1
 800ceb0:	d02b      	beq.n	800cf0a <_malloc_r+0xd2>
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	442b      	add	r3, r5
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	e00e      	b.n	800ced8 <_malloc_r+0xa0>
 800ceba:	6822      	ldr	r2, [r4, #0]
 800cebc:	1b52      	subs	r2, r2, r5
 800cebe:	d41e      	bmi.n	800cefe <_malloc_r+0xc6>
 800cec0:	2a0b      	cmp	r2, #11
 800cec2:	d916      	bls.n	800cef2 <_malloc_r+0xba>
 800cec4:	1961      	adds	r1, r4, r5
 800cec6:	42a3      	cmp	r3, r4
 800cec8:	6025      	str	r5, [r4, #0]
 800ceca:	bf18      	it	ne
 800cecc:	6059      	strne	r1, [r3, #4]
 800cece:	6863      	ldr	r3, [r4, #4]
 800ced0:	bf08      	it	eq
 800ced2:	6031      	streq	r1, [r6, #0]
 800ced4:	5162      	str	r2, [r4, r5]
 800ced6:	604b      	str	r3, [r1, #4]
 800ced8:	4638      	mov	r0, r7
 800ceda:	f104 060b 	add.w	r6, r4, #11
 800cede:	f000 f9ed 	bl	800d2bc <__malloc_unlock>
 800cee2:	f026 0607 	bic.w	r6, r6, #7
 800cee6:	1d23      	adds	r3, r4, #4
 800cee8:	1af2      	subs	r2, r6, r3
 800ceea:	d0b6      	beq.n	800ce5a <_malloc_r+0x22>
 800ceec:	1b9b      	subs	r3, r3, r6
 800ceee:	50a3      	str	r3, [r4, r2]
 800cef0:	e7b3      	b.n	800ce5a <_malloc_r+0x22>
 800cef2:	6862      	ldr	r2, [r4, #4]
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	bf0c      	ite	eq
 800cef8:	6032      	streq	r2, [r6, #0]
 800cefa:	605a      	strne	r2, [r3, #4]
 800cefc:	e7ec      	b.n	800ced8 <_malloc_r+0xa0>
 800cefe:	4623      	mov	r3, r4
 800cf00:	6864      	ldr	r4, [r4, #4]
 800cf02:	e7b2      	b.n	800ce6a <_malloc_r+0x32>
 800cf04:	4634      	mov	r4, r6
 800cf06:	6876      	ldr	r6, [r6, #4]
 800cf08:	e7b9      	b.n	800ce7e <_malloc_r+0x46>
 800cf0a:	230c      	movs	r3, #12
 800cf0c:	603b      	str	r3, [r7, #0]
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f000 f9d4 	bl	800d2bc <__malloc_unlock>
 800cf14:	e7a1      	b.n	800ce5a <_malloc_r+0x22>
 800cf16:	6025      	str	r5, [r4, #0]
 800cf18:	e7de      	b.n	800ced8 <_malloc_r+0xa0>
 800cf1a:	bf00      	nop
 800cf1c:	20001a4c 	.word	0x20001a4c

0800cf20 <__ssputs_r>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	688e      	ldr	r6, [r1, #8]
 800cf26:	429e      	cmp	r6, r3
 800cf28:	4682      	mov	sl, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4690      	mov	r8, r2
 800cf2e:	461f      	mov	r7, r3
 800cf30:	d838      	bhi.n	800cfa4 <__ssputs_r+0x84>
 800cf32:	898a      	ldrh	r2, [r1, #12]
 800cf34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf38:	d032      	beq.n	800cfa0 <__ssputs_r+0x80>
 800cf3a:	6825      	ldr	r5, [r4, #0]
 800cf3c:	6909      	ldr	r1, [r1, #16]
 800cf3e:	eba5 0901 	sub.w	r9, r5, r1
 800cf42:	6965      	ldr	r5, [r4, #20]
 800cf44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	444b      	add	r3, r9
 800cf50:	106d      	asrs	r5, r5, #1
 800cf52:	429d      	cmp	r5, r3
 800cf54:	bf38      	it	cc
 800cf56:	461d      	movcc	r5, r3
 800cf58:	0553      	lsls	r3, r2, #21
 800cf5a:	d531      	bpl.n	800cfc0 <__ssputs_r+0xa0>
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	f7ff ff6b 	bl	800ce38 <_malloc_r>
 800cf62:	4606      	mov	r6, r0
 800cf64:	b950      	cbnz	r0, 800cf7c <__ssputs_r+0x5c>
 800cf66:	230c      	movs	r3, #12
 800cf68:	f8ca 3000 	str.w	r3, [sl]
 800cf6c:	89a3      	ldrh	r3, [r4, #12]
 800cf6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf72:	81a3      	strh	r3, [r4, #12]
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf7c:	6921      	ldr	r1, [r4, #16]
 800cf7e:	464a      	mov	r2, r9
 800cf80:	f7fe f824 	bl	800afcc <memcpy>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	6126      	str	r6, [r4, #16]
 800cf92:	6165      	str	r5, [r4, #20]
 800cf94:	444e      	add	r6, r9
 800cf96:	eba5 0509 	sub.w	r5, r5, r9
 800cf9a:	6026      	str	r6, [r4, #0]
 800cf9c:	60a5      	str	r5, [r4, #8]
 800cf9e:	463e      	mov	r6, r7
 800cfa0:	42be      	cmp	r6, r7
 800cfa2:	d900      	bls.n	800cfa6 <__ssputs_r+0x86>
 800cfa4:	463e      	mov	r6, r7
 800cfa6:	6820      	ldr	r0, [r4, #0]
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	4641      	mov	r1, r8
 800cfac:	f000 f966 	bl	800d27c <memmove>
 800cfb0:	68a3      	ldr	r3, [r4, #8]
 800cfb2:	1b9b      	subs	r3, r3, r6
 800cfb4:	60a3      	str	r3, [r4, #8]
 800cfb6:	6823      	ldr	r3, [r4, #0]
 800cfb8:	4433      	add	r3, r6
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	e7db      	b.n	800cf78 <__ssputs_r+0x58>
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	f000 f981 	bl	800d2c8 <_realloc_r>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d1e1      	bne.n	800cf90 <__ssputs_r+0x70>
 800cfcc:	6921      	ldr	r1, [r4, #16]
 800cfce:	4650      	mov	r0, sl
 800cfd0:	f7ff fec6 	bl	800cd60 <_free_r>
 800cfd4:	e7c7      	b.n	800cf66 <__ssputs_r+0x46>
	...

0800cfd8 <_svfiprintf_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	4698      	mov	r8, r3
 800cfde:	898b      	ldrh	r3, [r1, #12]
 800cfe0:	061b      	lsls	r3, r3, #24
 800cfe2:	b09d      	sub	sp, #116	; 0x74
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	4614      	mov	r4, r2
 800cfea:	d50e      	bpl.n	800d00a <_svfiprintf_r+0x32>
 800cfec:	690b      	ldr	r3, [r1, #16]
 800cfee:	b963      	cbnz	r3, 800d00a <_svfiprintf_r+0x32>
 800cff0:	2140      	movs	r1, #64	; 0x40
 800cff2:	f7ff ff21 	bl	800ce38 <_malloc_r>
 800cff6:	6028      	str	r0, [r5, #0]
 800cff8:	6128      	str	r0, [r5, #16]
 800cffa:	b920      	cbnz	r0, 800d006 <_svfiprintf_r+0x2e>
 800cffc:	230c      	movs	r3, #12
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	e0d1      	b.n	800d1aa <_svfiprintf_r+0x1d2>
 800d006:	2340      	movs	r3, #64	; 0x40
 800d008:	616b      	str	r3, [r5, #20]
 800d00a:	2300      	movs	r3, #0
 800d00c:	9309      	str	r3, [sp, #36]	; 0x24
 800d00e:	2320      	movs	r3, #32
 800d010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d014:	f8cd 800c 	str.w	r8, [sp, #12]
 800d018:	2330      	movs	r3, #48	; 0x30
 800d01a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1c4 <_svfiprintf_r+0x1ec>
 800d01e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d022:	f04f 0901 	mov.w	r9, #1
 800d026:	4623      	mov	r3, r4
 800d028:	469a      	mov	sl, r3
 800d02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d02e:	b10a      	cbz	r2, 800d034 <_svfiprintf_r+0x5c>
 800d030:	2a25      	cmp	r2, #37	; 0x25
 800d032:	d1f9      	bne.n	800d028 <_svfiprintf_r+0x50>
 800d034:	ebba 0b04 	subs.w	fp, sl, r4
 800d038:	d00b      	beq.n	800d052 <_svfiprintf_r+0x7a>
 800d03a:	465b      	mov	r3, fp
 800d03c:	4622      	mov	r2, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff ff6d 	bl	800cf20 <__ssputs_r>
 800d046:	3001      	adds	r0, #1
 800d048:	f000 80aa 	beq.w	800d1a0 <_svfiprintf_r+0x1c8>
 800d04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d04e:	445a      	add	r2, fp
 800d050:	9209      	str	r2, [sp, #36]	; 0x24
 800d052:	f89a 3000 	ldrb.w	r3, [sl]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80a2 	beq.w	800d1a0 <_svfiprintf_r+0x1c8>
 800d05c:	2300      	movs	r3, #0
 800d05e:	f04f 32ff 	mov.w	r2, #4294967295
 800d062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d066:	f10a 0a01 	add.w	sl, sl, #1
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	9307      	str	r3, [sp, #28]
 800d06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d072:	931a      	str	r3, [sp, #104]	; 0x68
 800d074:	4654      	mov	r4, sl
 800d076:	2205      	movs	r2, #5
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	4851      	ldr	r0, [pc, #324]	; (800d1c4 <_svfiprintf_r+0x1ec>)
 800d07e:	f7f3 f8df 	bl	8000240 <memchr>
 800d082:	9a04      	ldr	r2, [sp, #16]
 800d084:	b9d8      	cbnz	r0, 800d0be <_svfiprintf_r+0xe6>
 800d086:	06d0      	lsls	r0, r2, #27
 800d088:	bf44      	itt	mi
 800d08a:	2320      	movmi	r3, #32
 800d08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d090:	0711      	lsls	r1, r2, #28
 800d092:	bf44      	itt	mi
 800d094:	232b      	movmi	r3, #43	; 0x2b
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d09a:	f89a 3000 	ldrb.w	r3, [sl]
 800d09e:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a0:	d015      	beq.n	800d0ce <_svfiprintf_r+0xf6>
 800d0a2:	9a07      	ldr	r2, [sp, #28]
 800d0a4:	4654      	mov	r4, sl
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	f04f 0c0a 	mov.w	ip, #10
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b2:	3b30      	subs	r3, #48	; 0x30
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	d94e      	bls.n	800d156 <_svfiprintf_r+0x17e>
 800d0b8:	b1b0      	cbz	r0, 800d0e8 <_svfiprintf_r+0x110>
 800d0ba:	9207      	str	r2, [sp, #28]
 800d0bc:	e014      	b.n	800d0e8 <_svfiprintf_r+0x110>
 800d0be:	eba0 0308 	sub.w	r3, r0, r8
 800d0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	9304      	str	r3, [sp, #16]
 800d0ca:	46a2      	mov	sl, r4
 800d0cc:	e7d2      	b.n	800d074 <_svfiprintf_r+0x9c>
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	1d19      	adds	r1, r3, #4
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	9103      	str	r1, [sp, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	bfbb      	ittet	lt
 800d0da:	425b      	neglt	r3, r3
 800d0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d0e0:	9307      	strge	r3, [sp, #28]
 800d0e2:	9307      	strlt	r3, [sp, #28]
 800d0e4:	bfb8      	it	lt
 800d0e6:	9204      	strlt	r2, [sp, #16]
 800d0e8:	7823      	ldrb	r3, [r4, #0]
 800d0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ec:	d10c      	bne.n	800d108 <_svfiprintf_r+0x130>
 800d0ee:	7863      	ldrb	r3, [r4, #1]
 800d0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f2:	d135      	bne.n	800d160 <_svfiprintf_r+0x188>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	1d1a      	adds	r2, r3, #4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	9203      	str	r2, [sp, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bfb8      	it	lt
 800d100:	f04f 33ff 	movlt.w	r3, #4294967295
 800d104:	3402      	adds	r4, #2
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1d4 <_svfiprintf_r+0x1fc>
 800d10c:	7821      	ldrb	r1, [r4, #0]
 800d10e:	2203      	movs	r2, #3
 800d110:	4650      	mov	r0, sl
 800d112:	f7f3 f895 	bl	8000240 <memchr>
 800d116:	b140      	cbz	r0, 800d12a <_svfiprintf_r+0x152>
 800d118:	2340      	movs	r3, #64	; 0x40
 800d11a:	eba0 000a 	sub.w	r0, r0, sl
 800d11e:	fa03 f000 	lsl.w	r0, r3, r0
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	4303      	orrs	r3, r0
 800d126:	3401      	adds	r4, #1
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12e:	4826      	ldr	r0, [pc, #152]	; (800d1c8 <_svfiprintf_r+0x1f0>)
 800d130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d134:	2206      	movs	r2, #6
 800d136:	f7f3 f883 	bl	8000240 <memchr>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d038      	beq.n	800d1b0 <_svfiprintf_r+0x1d8>
 800d13e:	4b23      	ldr	r3, [pc, #140]	; (800d1cc <_svfiprintf_r+0x1f4>)
 800d140:	bb1b      	cbnz	r3, 800d18a <_svfiprintf_r+0x1b2>
 800d142:	9b03      	ldr	r3, [sp, #12]
 800d144:	3307      	adds	r3, #7
 800d146:	f023 0307 	bic.w	r3, r3, #7
 800d14a:	3308      	adds	r3, #8
 800d14c:	9303      	str	r3, [sp, #12]
 800d14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d150:	4433      	add	r3, r6
 800d152:	9309      	str	r3, [sp, #36]	; 0x24
 800d154:	e767      	b.n	800d026 <_svfiprintf_r+0x4e>
 800d156:	fb0c 3202 	mla	r2, ip, r2, r3
 800d15a:	460c      	mov	r4, r1
 800d15c:	2001      	movs	r0, #1
 800d15e:	e7a5      	b.n	800d0ac <_svfiprintf_r+0xd4>
 800d160:	2300      	movs	r3, #0
 800d162:	3401      	adds	r4, #1
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	4619      	mov	r1, r3
 800d168:	f04f 0c0a 	mov.w	ip, #10
 800d16c:	4620      	mov	r0, r4
 800d16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d172:	3a30      	subs	r2, #48	; 0x30
 800d174:	2a09      	cmp	r2, #9
 800d176:	d903      	bls.n	800d180 <_svfiprintf_r+0x1a8>
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d0c5      	beq.n	800d108 <_svfiprintf_r+0x130>
 800d17c:	9105      	str	r1, [sp, #20]
 800d17e:	e7c3      	b.n	800d108 <_svfiprintf_r+0x130>
 800d180:	fb0c 2101 	mla	r1, ip, r1, r2
 800d184:	4604      	mov	r4, r0
 800d186:	2301      	movs	r3, #1
 800d188:	e7f0      	b.n	800d16c <_svfiprintf_r+0x194>
 800d18a:	ab03      	add	r3, sp, #12
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	462a      	mov	r2, r5
 800d190:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <_svfiprintf_r+0x1f8>)
 800d192:	a904      	add	r1, sp, #16
 800d194:	4638      	mov	r0, r7
 800d196:	f7fd ffcf 	bl	800b138 <_printf_float>
 800d19a:	1c42      	adds	r2, r0, #1
 800d19c:	4606      	mov	r6, r0
 800d19e:	d1d6      	bne.n	800d14e <_svfiprintf_r+0x176>
 800d1a0:	89ab      	ldrh	r3, [r5, #12]
 800d1a2:	065b      	lsls	r3, r3, #25
 800d1a4:	f53f af2c 	bmi.w	800d000 <_svfiprintf_r+0x28>
 800d1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1aa:	b01d      	add	sp, #116	; 0x74
 800d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	4b06      	ldr	r3, [pc, #24]	; (800d1d0 <_svfiprintf_r+0x1f8>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	f7fe fa60 	bl	800b680 <_printf_i>
 800d1c0:	e7eb      	b.n	800d19a <_svfiprintf_r+0x1c2>
 800d1c2:	bf00      	nop
 800d1c4:	0800e114 	.word	0x0800e114
 800d1c8:	0800e11e 	.word	0x0800e11e
 800d1cc:	0800b139 	.word	0x0800b139
 800d1d0:	0800cf21 	.word	0x0800cf21
 800d1d4:	0800e11a 	.word	0x0800e11a

0800d1d8 <_sbrk_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d06      	ldr	r5, [pc, #24]	; (800d1f4 <_sbrk_r+0x1c>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	602b      	str	r3, [r5, #0]
 800d1e4:	f7f4 fb06 	bl	80017f4 <_sbrk>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_sbrk_r+0x1a>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_sbrk_r+0x1a>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	20001a54 	.word	0x20001a54

0800d1f8 <__assert_func>:
 800d1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1fa:	4614      	mov	r4, r2
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4b09      	ldr	r3, [pc, #36]	; (800d224 <__assert_func+0x2c>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4605      	mov	r5, r0
 800d204:	68d8      	ldr	r0, [r3, #12]
 800d206:	b14c      	cbz	r4, 800d21c <__assert_func+0x24>
 800d208:	4b07      	ldr	r3, [pc, #28]	; (800d228 <__assert_func+0x30>)
 800d20a:	9100      	str	r1, [sp, #0]
 800d20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d210:	4906      	ldr	r1, [pc, #24]	; (800d22c <__assert_func+0x34>)
 800d212:	462b      	mov	r3, r5
 800d214:	f000 f80e 	bl	800d234 <fiprintf>
 800d218:	f000 faac 	bl	800d774 <abort>
 800d21c:	4b04      	ldr	r3, [pc, #16]	; (800d230 <__assert_func+0x38>)
 800d21e:	461c      	mov	r4, r3
 800d220:	e7f3      	b.n	800d20a <__assert_func+0x12>
 800d222:	bf00      	nop
 800d224:	200002e0 	.word	0x200002e0
 800d228:	0800e125 	.word	0x0800e125
 800d22c:	0800e132 	.word	0x0800e132
 800d230:	0800e160 	.word	0x0800e160

0800d234 <fiprintf>:
 800d234:	b40e      	push	{r1, r2, r3}
 800d236:	b503      	push	{r0, r1, lr}
 800d238:	4601      	mov	r1, r0
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	4805      	ldr	r0, [pc, #20]	; (800d254 <fiprintf+0x20>)
 800d23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d242:	6800      	ldr	r0, [r0, #0]
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	f000 f897 	bl	800d378 <_vfiprintf_r>
 800d24a:	b002      	add	sp, #8
 800d24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d250:	b003      	add	sp, #12
 800d252:	4770      	bx	lr
 800d254:	200002e0 	.word	0x200002e0

0800d258 <__ascii_mbtowc>:
 800d258:	b082      	sub	sp, #8
 800d25a:	b901      	cbnz	r1, 800d25e <__ascii_mbtowc+0x6>
 800d25c:	a901      	add	r1, sp, #4
 800d25e:	b142      	cbz	r2, 800d272 <__ascii_mbtowc+0x1a>
 800d260:	b14b      	cbz	r3, 800d276 <__ascii_mbtowc+0x1e>
 800d262:	7813      	ldrb	r3, [r2, #0]
 800d264:	600b      	str	r3, [r1, #0]
 800d266:	7812      	ldrb	r2, [r2, #0]
 800d268:	1e10      	subs	r0, r2, #0
 800d26a:	bf18      	it	ne
 800d26c:	2001      	movne	r0, #1
 800d26e:	b002      	add	sp, #8
 800d270:	4770      	bx	lr
 800d272:	4610      	mov	r0, r2
 800d274:	e7fb      	b.n	800d26e <__ascii_mbtowc+0x16>
 800d276:	f06f 0001 	mvn.w	r0, #1
 800d27a:	e7f8      	b.n	800d26e <__ascii_mbtowc+0x16>

0800d27c <memmove>:
 800d27c:	4288      	cmp	r0, r1
 800d27e:	b510      	push	{r4, lr}
 800d280:	eb01 0402 	add.w	r4, r1, r2
 800d284:	d902      	bls.n	800d28c <memmove+0x10>
 800d286:	4284      	cmp	r4, r0
 800d288:	4623      	mov	r3, r4
 800d28a:	d807      	bhi.n	800d29c <memmove+0x20>
 800d28c:	1e43      	subs	r3, r0, #1
 800d28e:	42a1      	cmp	r1, r4
 800d290:	d008      	beq.n	800d2a4 <memmove+0x28>
 800d292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d29a:	e7f8      	b.n	800d28e <memmove+0x12>
 800d29c:	4402      	add	r2, r0
 800d29e:	4601      	mov	r1, r0
 800d2a0:	428a      	cmp	r2, r1
 800d2a2:	d100      	bne.n	800d2a6 <memmove+0x2a>
 800d2a4:	bd10      	pop	{r4, pc}
 800d2a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2ae:	e7f7      	b.n	800d2a0 <memmove+0x24>

0800d2b0 <__malloc_lock>:
 800d2b0:	4801      	ldr	r0, [pc, #4]	; (800d2b8 <__malloc_lock+0x8>)
 800d2b2:	f000 bc1f 	b.w	800daf4 <__retarget_lock_acquire_recursive>
 800d2b6:	bf00      	nop
 800d2b8:	20001a58 	.word	0x20001a58

0800d2bc <__malloc_unlock>:
 800d2bc:	4801      	ldr	r0, [pc, #4]	; (800d2c4 <__malloc_unlock+0x8>)
 800d2be:	f000 bc1a 	b.w	800daf6 <__retarget_lock_release_recursive>
 800d2c2:	bf00      	nop
 800d2c4:	20001a58 	.word	0x20001a58

0800d2c8 <_realloc_r>:
 800d2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	460e      	mov	r6, r1
 800d2d2:	b921      	cbnz	r1, 800d2de <_realloc_r+0x16>
 800d2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d8:	4611      	mov	r1, r2
 800d2da:	f7ff bdad 	b.w	800ce38 <_malloc_r>
 800d2de:	b92a      	cbnz	r2, 800d2ec <_realloc_r+0x24>
 800d2e0:	f7ff fd3e 	bl	800cd60 <_free_r>
 800d2e4:	4625      	mov	r5, r4
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ec:	f000 fc6a 	bl	800dbc4 <_malloc_usable_size_r>
 800d2f0:	4284      	cmp	r4, r0
 800d2f2:	4607      	mov	r7, r0
 800d2f4:	d802      	bhi.n	800d2fc <_realloc_r+0x34>
 800d2f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2fa:	d812      	bhi.n	800d322 <_realloc_r+0x5a>
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4640      	mov	r0, r8
 800d300:	f7ff fd9a 	bl	800ce38 <_malloc_r>
 800d304:	4605      	mov	r5, r0
 800d306:	2800      	cmp	r0, #0
 800d308:	d0ed      	beq.n	800d2e6 <_realloc_r+0x1e>
 800d30a:	42bc      	cmp	r4, r7
 800d30c:	4622      	mov	r2, r4
 800d30e:	4631      	mov	r1, r6
 800d310:	bf28      	it	cs
 800d312:	463a      	movcs	r2, r7
 800d314:	f7fd fe5a 	bl	800afcc <memcpy>
 800d318:	4631      	mov	r1, r6
 800d31a:	4640      	mov	r0, r8
 800d31c:	f7ff fd20 	bl	800cd60 <_free_r>
 800d320:	e7e1      	b.n	800d2e6 <_realloc_r+0x1e>
 800d322:	4635      	mov	r5, r6
 800d324:	e7df      	b.n	800d2e6 <_realloc_r+0x1e>

0800d326 <__sfputc_r>:
 800d326:	6893      	ldr	r3, [r2, #8]
 800d328:	3b01      	subs	r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	b410      	push	{r4}
 800d32e:	6093      	str	r3, [r2, #8]
 800d330:	da08      	bge.n	800d344 <__sfputc_r+0x1e>
 800d332:	6994      	ldr	r4, [r2, #24]
 800d334:	42a3      	cmp	r3, r4
 800d336:	db01      	blt.n	800d33c <__sfputc_r+0x16>
 800d338:	290a      	cmp	r1, #10
 800d33a:	d103      	bne.n	800d344 <__sfputc_r+0x1e>
 800d33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d340:	f000 b94a 	b.w	800d5d8 <__swbuf_r>
 800d344:	6813      	ldr	r3, [r2, #0]
 800d346:	1c58      	adds	r0, r3, #1
 800d348:	6010      	str	r0, [r2, #0]
 800d34a:	7019      	strb	r1, [r3, #0]
 800d34c:	4608      	mov	r0, r1
 800d34e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <__sfputs_r>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	4606      	mov	r6, r0
 800d358:	460f      	mov	r7, r1
 800d35a:	4614      	mov	r4, r2
 800d35c:	18d5      	adds	r5, r2, r3
 800d35e:	42ac      	cmp	r4, r5
 800d360:	d101      	bne.n	800d366 <__sfputs_r+0x12>
 800d362:	2000      	movs	r0, #0
 800d364:	e007      	b.n	800d376 <__sfputs_r+0x22>
 800d366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36a:	463a      	mov	r2, r7
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7ff ffda 	bl	800d326 <__sfputc_r>
 800d372:	1c43      	adds	r3, r0, #1
 800d374:	d1f3      	bne.n	800d35e <__sfputs_r+0xa>
 800d376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d378 <_vfiprintf_r>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	460d      	mov	r5, r1
 800d37e:	b09d      	sub	sp, #116	; 0x74
 800d380:	4614      	mov	r4, r2
 800d382:	4698      	mov	r8, r3
 800d384:	4606      	mov	r6, r0
 800d386:	b118      	cbz	r0, 800d390 <_vfiprintf_r+0x18>
 800d388:	6983      	ldr	r3, [r0, #24]
 800d38a:	b90b      	cbnz	r3, 800d390 <_vfiprintf_r+0x18>
 800d38c:	f000 fb14 	bl	800d9b8 <__sinit>
 800d390:	4b89      	ldr	r3, [pc, #548]	; (800d5b8 <_vfiprintf_r+0x240>)
 800d392:	429d      	cmp	r5, r3
 800d394:	d11b      	bne.n	800d3ce <_vfiprintf_r+0x56>
 800d396:	6875      	ldr	r5, [r6, #4]
 800d398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d39a:	07d9      	lsls	r1, r3, #31
 800d39c:	d405      	bmi.n	800d3aa <_vfiprintf_r+0x32>
 800d39e:	89ab      	ldrh	r3, [r5, #12]
 800d3a0:	059a      	lsls	r2, r3, #22
 800d3a2:	d402      	bmi.n	800d3aa <_vfiprintf_r+0x32>
 800d3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3a6:	f000 fba5 	bl	800daf4 <__retarget_lock_acquire_recursive>
 800d3aa:	89ab      	ldrh	r3, [r5, #12]
 800d3ac:	071b      	lsls	r3, r3, #28
 800d3ae:	d501      	bpl.n	800d3b4 <_vfiprintf_r+0x3c>
 800d3b0:	692b      	ldr	r3, [r5, #16]
 800d3b2:	b9eb      	cbnz	r3, 800d3f0 <_vfiprintf_r+0x78>
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f000 f96e 	bl	800d698 <__swsetup_r>
 800d3bc:	b1c0      	cbz	r0, 800d3f0 <_vfiprintf_r+0x78>
 800d3be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3c0:	07dc      	lsls	r4, r3, #31
 800d3c2:	d50e      	bpl.n	800d3e2 <_vfiprintf_r+0x6a>
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c8:	b01d      	add	sp, #116	; 0x74
 800d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ce:	4b7b      	ldr	r3, [pc, #492]	; (800d5bc <_vfiprintf_r+0x244>)
 800d3d0:	429d      	cmp	r5, r3
 800d3d2:	d101      	bne.n	800d3d8 <_vfiprintf_r+0x60>
 800d3d4:	68b5      	ldr	r5, [r6, #8]
 800d3d6:	e7df      	b.n	800d398 <_vfiprintf_r+0x20>
 800d3d8:	4b79      	ldr	r3, [pc, #484]	; (800d5c0 <_vfiprintf_r+0x248>)
 800d3da:	429d      	cmp	r5, r3
 800d3dc:	bf08      	it	eq
 800d3de:	68f5      	ldreq	r5, [r6, #12]
 800d3e0:	e7da      	b.n	800d398 <_vfiprintf_r+0x20>
 800d3e2:	89ab      	ldrh	r3, [r5, #12]
 800d3e4:	0598      	lsls	r0, r3, #22
 800d3e6:	d4ed      	bmi.n	800d3c4 <_vfiprintf_r+0x4c>
 800d3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3ea:	f000 fb84 	bl	800daf6 <__retarget_lock_release_recursive>
 800d3ee:	e7e9      	b.n	800d3c4 <_vfiprintf_r+0x4c>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f4:	2320      	movs	r3, #32
 800d3f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3fe:	2330      	movs	r3, #48	; 0x30
 800d400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d5c4 <_vfiprintf_r+0x24c>
 800d404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d408:	f04f 0901 	mov.w	r9, #1
 800d40c:	4623      	mov	r3, r4
 800d40e:	469a      	mov	sl, r3
 800d410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d414:	b10a      	cbz	r2, 800d41a <_vfiprintf_r+0xa2>
 800d416:	2a25      	cmp	r2, #37	; 0x25
 800d418:	d1f9      	bne.n	800d40e <_vfiprintf_r+0x96>
 800d41a:	ebba 0b04 	subs.w	fp, sl, r4
 800d41e:	d00b      	beq.n	800d438 <_vfiprintf_r+0xc0>
 800d420:	465b      	mov	r3, fp
 800d422:	4622      	mov	r2, r4
 800d424:	4629      	mov	r1, r5
 800d426:	4630      	mov	r0, r6
 800d428:	f7ff ff94 	bl	800d354 <__sfputs_r>
 800d42c:	3001      	adds	r0, #1
 800d42e:	f000 80aa 	beq.w	800d586 <_vfiprintf_r+0x20e>
 800d432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d434:	445a      	add	r2, fp
 800d436:	9209      	str	r2, [sp, #36]	; 0x24
 800d438:	f89a 3000 	ldrb.w	r3, [sl]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 80a2 	beq.w	800d586 <_vfiprintf_r+0x20e>
 800d442:	2300      	movs	r3, #0
 800d444:	f04f 32ff 	mov.w	r2, #4294967295
 800d448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d44c:	f10a 0a01 	add.w	sl, sl, #1
 800d450:	9304      	str	r3, [sp, #16]
 800d452:	9307      	str	r3, [sp, #28]
 800d454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d458:	931a      	str	r3, [sp, #104]	; 0x68
 800d45a:	4654      	mov	r4, sl
 800d45c:	2205      	movs	r2, #5
 800d45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d462:	4858      	ldr	r0, [pc, #352]	; (800d5c4 <_vfiprintf_r+0x24c>)
 800d464:	f7f2 feec 	bl	8000240 <memchr>
 800d468:	9a04      	ldr	r2, [sp, #16]
 800d46a:	b9d8      	cbnz	r0, 800d4a4 <_vfiprintf_r+0x12c>
 800d46c:	06d1      	lsls	r1, r2, #27
 800d46e:	bf44      	itt	mi
 800d470:	2320      	movmi	r3, #32
 800d472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d476:	0713      	lsls	r3, r2, #28
 800d478:	bf44      	itt	mi
 800d47a:	232b      	movmi	r3, #43	; 0x2b
 800d47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d480:	f89a 3000 	ldrb.w	r3, [sl]
 800d484:	2b2a      	cmp	r3, #42	; 0x2a
 800d486:	d015      	beq.n	800d4b4 <_vfiprintf_r+0x13c>
 800d488:	9a07      	ldr	r2, [sp, #28]
 800d48a:	4654      	mov	r4, sl
 800d48c:	2000      	movs	r0, #0
 800d48e:	f04f 0c0a 	mov.w	ip, #10
 800d492:	4621      	mov	r1, r4
 800d494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d498:	3b30      	subs	r3, #48	; 0x30
 800d49a:	2b09      	cmp	r3, #9
 800d49c:	d94e      	bls.n	800d53c <_vfiprintf_r+0x1c4>
 800d49e:	b1b0      	cbz	r0, 800d4ce <_vfiprintf_r+0x156>
 800d4a0:	9207      	str	r2, [sp, #28]
 800d4a2:	e014      	b.n	800d4ce <_vfiprintf_r+0x156>
 800d4a4:	eba0 0308 	sub.w	r3, r0, r8
 800d4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	9304      	str	r3, [sp, #16]
 800d4b0:	46a2      	mov	sl, r4
 800d4b2:	e7d2      	b.n	800d45a <_vfiprintf_r+0xe2>
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	1d19      	adds	r1, r3, #4
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	9103      	str	r1, [sp, #12]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	bfbb      	ittet	lt
 800d4c0:	425b      	neglt	r3, r3
 800d4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800d4c6:	9307      	strge	r3, [sp, #28]
 800d4c8:	9307      	strlt	r3, [sp, #28]
 800d4ca:	bfb8      	it	lt
 800d4cc:	9204      	strlt	r2, [sp, #16]
 800d4ce:	7823      	ldrb	r3, [r4, #0]
 800d4d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d4d2:	d10c      	bne.n	800d4ee <_vfiprintf_r+0x176>
 800d4d4:	7863      	ldrb	r3, [r4, #1]
 800d4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d8:	d135      	bne.n	800d546 <_vfiprintf_r+0x1ce>
 800d4da:	9b03      	ldr	r3, [sp, #12]
 800d4dc:	1d1a      	adds	r2, r3, #4
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	9203      	str	r2, [sp, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	bfb8      	it	lt
 800d4e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4ea:	3402      	adds	r4, #2
 800d4ec:	9305      	str	r3, [sp, #20]
 800d4ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d5d4 <_vfiprintf_r+0x25c>
 800d4f2:	7821      	ldrb	r1, [r4, #0]
 800d4f4:	2203      	movs	r2, #3
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	f7f2 fea2 	bl	8000240 <memchr>
 800d4fc:	b140      	cbz	r0, 800d510 <_vfiprintf_r+0x198>
 800d4fe:	2340      	movs	r3, #64	; 0x40
 800d500:	eba0 000a 	sub.w	r0, r0, sl
 800d504:	fa03 f000 	lsl.w	r0, r3, r0
 800d508:	9b04      	ldr	r3, [sp, #16]
 800d50a:	4303      	orrs	r3, r0
 800d50c:	3401      	adds	r4, #1
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d514:	482c      	ldr	r0, [pc, #176]	; (800d5c8 <_vfiprintf_r+0x250>)
 800d516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d51a:	2206      	movs	r2, #6
 800d51c:	f7f2 fe90 	bl	8000240 <memchr>
 800d520:	2800      	cmp	r0, #0
 800d522:	d03f      	beq.n	800d5a4 <_vfiprintf_r+0x22c>
 800d524:	4b29      	ldr	r3, [pc, #164]	; (800d5cc <_vfiprintf_r+0x254>)
 800d526:	bb1b      	cbnz	r3, 800d570 <_vfiprintf_r+0x1f8>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	3307      	adds	r3, #7
 800d52c:	f023 0307 	bic.w	r3, r3, #7
 800d530:	3308      	adds	r3, #8
 800d532:	9303      	str	r3, [sp, #12]
 800d534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d536:	443b      	add	r3, r7
 800d538:	9309      	str	r3, [sp, #36]	; 0x24
 800d53a:	e767      	b.n	800d40c <_vfiprintf_r+0x94>
 800d53c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d540:	460c      	mov	r4, r1
 800d542:	2001      	movs	r0, #1
 800d544:	e7a5      	b.n	800d492 <_vfiprintf_r+0x11a>
 800d546:	2300      	movs	r3, #0
 800d548:	3401      	adds	r4, #1
 800d54a:	9305      	str	r3, [sp, #20]
 800d54c:	4619      	mov	r1, r3
 800d54e:	f04f 0c0a 	mov.w	ip, #10
 800d552:	4620      	mov	r0, r4
 800d554:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d558:	3a30      	subs	r2, #48	; 0x30
 800d55a:	2a09      	cmp	r2, #9
 800d55c:	d903      	bls.n	800d566 <_vfiprintf_r+0x1ee>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d0c5      	beq.n	800d4ee <_vfiprintf_r+0x176>
 800d562:	9105      	str	r1, [sp, #20]
 800d564:	e7c3      	b.n	800d4ee <_vfiprintf_r+0x176>
 800d566:	fb0c 2101 	mla	r1, ip, r1, r2
 800d56a:	4604      	mov	r4, r0
 800d56c:	2301      	movs	r3, #1
 800d56e:	e7f0      	b.n	800d552 <_vfiprintf_r+0x1da>
 800d570:	ab03      	add	r3, sp, #12
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	462a      	mov	r2, r5
 800d576:	4b16      	ldr	r3, [pc, #88]	; (800d5d0 <_vfiprintf_r+0x258>)
 800d578:	a904      	add	r1, sp, #16
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7fd fddc 	bl	800b138 <_printf_float>
 800d580:	4607      	mov	r7, r0
 800d582:	1c78      	adds	r0, r7, #1
 800d584:	d1d6      	bne.n	800d534 <_vfiprintf_r+0x1bc>
 800d586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d588:	07d9      	lsls	r1, r3, #31
 800d58a:	d405      	bmi.n	800d598 <_vfiprintf_r+0x220>
 800d58c:	89ab      	ldrh	r3, [r5, #12]
 800d58e:	059a      	lsls	r2, r3, #22
 800d590:	d402      	bmi.n	800d598 <_vfiprintf_r+0x220>
 800d592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d594:	f000 faaf 	bl	800daf6 <__retarget_lock_release_recursive>
 800d598:	89ab      	ldrh	r3, [r5, #12]
 800d59a:	065b      	lsls	r3, r3, #25
 800d59c:	f53f af12 	bmi.w	800d3c4 <_vfiprintf_r+0x4c>
 800d5a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5a2:	e711      	b.n	800d3c8 <_vfiprintf_r+0x50>
 800d5a4:	ab03      	add	r3, sp, #12
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	462a      	mov	r2, r5
 800d5aa:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <_vfiprintf_r+0x258>)
 800d5ac:	a904      	add	r1, sp, #16
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	f7fe f866 	bl	800b680 <_printf_i>
 800d5b4:	e7e4      	b.n	800d580 <_vfiprintf_r+0x208>
 800d5b6:	bf00      	nop
 800d5b8:	0800e28c 	.word	0x0800e28c
 800d5bc:	0800e2ac 	.word	0x0800e2ac
 800d5c0:	0800e26c 	.word	0x0800e26c
 800d5c4:	0800e114 	.word	0x0800e114
 800d5c8:	0800e11e 	.word	0x0800e11e
 800d5cc:	0800b139 	.word	0x0800b139
 800d5d0:	0800d355 	.word	0x0800d355
 800d5d4:	0800e11a 	.word	0x0800e11a

0800d5d8 <__swbuf_r>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	460e      	mov	r6, r1
 800d5dc:	4614      	mov	r4, r2
 800d5de:	4605      	mov	r5, r0
 800d5e0:	b118      	cbz	r0, 800d5ea <__swbuf_r+0x12>
 800d5e2:	6983      	ldr	r3, [r0, #24]
 800d5e4:	b90b      	cbnz	r3, 800d5ea <__swbuf_r+0x12>
 800d5e6:	f000 f9e7 	bl	800d9b8 <__sinit>
 800d5ea:	4b21      	ldr	r3, [pc, #132]	; (800d670 <__swbuf_r+0x98>)
 800d5ec:	429c      	cmp	r4, r3
 800d5ee:	d12b      	bne.n	800d648 <__swbuf_r+0x70>
 800d5f0:	686c      	ldr	r4, [r5, #4]
 800d5f2:	69a3      	ldr	r3, [r4, #24]
 800d5f4:	60a3      	str	r3, [r4, #8]
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	071a      	lsls	r2, r3, #28
 800d5fa:	d52f      	bpl.n	800d65c <__swbuf_r+0x84>
 800d5fc:	6923      	ldr	r3, [r4, #16]
 800d5fe:	b36b      	cbz	r3, 800d65c <__swbuf_r+0x84>
 800d600:	6923      	ldr	r3, [r4, #16]
 800d602:	6820      	ldr	r0, [r4, #0]
 800d604:	1ac0      	subs	r0, r0, r3
 800d606:	6963      	ldr	r3, [r4, #20]
 800d608:	b2f6      	uxtb	r6, r6
 800d60a:	4283      	cmp	r3, r0
 800d60c:	4637      	mov	r7, r6
 800d60e:	dc04      	bgt.n	800d61a <__swbuf_r+0x42>
 800d610:	4621      	mov	r1, r4
 800d612:	4628      	mov	r0, r5
 800d614:	f000 f93c 	bl	800d890 <_fflush_r>
 800d618:	bb30      	cbnz	r0, 800d668 <__swbuf_r+0x90>
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	60a3      	str	r3, [r4, #8]
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	6022      	str	r2, [r4, #0]
 800d626:	701e      	strb	r6, [r3, #0]
 800d628:	6963      	ldr	r3, [r4, #20]
 800d62a:	3001      	adds	r0, #1
 800d62c:	4283      	cmp	r3, r0
 800d62e:	d004      	beq.n	800d63a <__swbuf_r+0x62>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	07db      	lsls	r3, r3, #31
 800d634:	d506      	bpl.n	800d644 <__swbuf_r+0x6c>
 800d636:	2e0a      	cmp	r6, #10
 800d638:	d104      	bne.n	800d644 <__swbuf_r+0x6c>
 800d63a:	4621      	mov	r1, r4
 800d63c:	4628      	mov	r0, r5
 800d63e:	f000 f927 	bl	800d890 <_fflush_r>
 800d642:	b988      	cbnz	r0, 800d668 <__swbuf_r+0x90>
 800d644:	4638      	mov	r0, r7
 800d646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <__swbuf_r+0x9c>)
 800d64a:	429c      	cmp	r4, r3
 800d64c:	d101      	bne.n	800d652 <__swbuf_r+0x7a>
 800d64e:	68ac      	ldr	r4, [r5, #8]
 800d650:	e7cf      	b.n	800d5f2 <__swbuf_r+0x1a>
 800d652:	4b09      	ldr	r3, [pc, #36]	; (800d678 <__swbuf_r+0xa0>)
 800d654:	429c      	cmp	r4, r3
 800d656:	bf08      	it	eq
 800d658:	68ec      	ldreq	r4, [r5, #12]
 800d65a:	e7ca      	b.n	800d5f2 <__swbuf_r+0x1a>
 800d65c:	4621      	mov	r1, r4
 800d65e:	4628      	mov	r0, r5
 800d660:	f000 f81a 	bl	800d698 <__swsetup_r>
 800d664:	2800      	cmp	r0, #0
 800d666:	d0cb      	beq.n	800d600 <__swbuf_r+0x28>
 800d668:	f04f 37ff 	mov.w	r7, #4294967295
 800d66c:	e7ea      	b.n	800d644 <__swbuf_r+0x6c>
 800d66e:	bf00      	nop
 800d670:	0800e28c 	.word	0x0800e28c
 800d674:	0800e2ac 	.word	0x0800e2ac
 800d678:	0800e26c 	.word	0x0800e26c

0800d67c <__ascii_wctomb>:
 800d67c:	b149      	cbz	r1, 800d692 <__ascii_wctomb+0x16>
 800d67e:	2aff      	cmp	r2, #255	; 0xff
 800d680:	bf85      	ittet	hi
 800d682:	238a      	movhi	r3, #138	; 0x8a
 800d684:	6003      	strhi	r3, [r0, #0]
 800d686:	700a      	strbls	r2, [r1, #0]
 800d688:	f04f 30ff 	movhi.w	r0, #4294967295
 800d68c:	bf98      	it	ls
 800d68e:	2001      	movls	r0, #1
 800d690:	4770      	bx	lr
 800d692:	4608      	mov	r0, r1
 800d694:	4770      	bx	lr
	...

0800d698 <__swsetup_r>:
 800d698:	4b32      	ldr	r3, [pc, #200]	; (800d764 <__swsetup_r+0xcc>)
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	681d      	ldr	r5, [r3, #0]
 800d69e:	4606      	mov	r6, r0
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	b125      	cbz	r5, 800d6ae <__swsetup_r+0x16>
 800d6a4:	69ab      	ldr	r3, [r5, #24]
 800d6a6:	b913      	cbnz	r3, 800d6ae <__swsetup_r+0x16>
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f000 f985 	bl	800d9b8 <__sinit>
 800d6ae:	4b2e      	ldr	r3, [pc, #184]	; (800d768 <__swsetup_r+0xd0>)
 800d6b0:	429c      	cmp	r4, r3
 800d6b2:	d10f      	bne.n	800d6d4 <__swsetup_r+0x3c>
 800d6b4:	686c      	ldr	r4, [r5, #4]
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6bc:	0719      	lsls	r1, r3, #28
 800d6be:	d42c      	bmi.n	800d71a <__swsetup_r+0x82>
 800d6c0:	06dd      	lsls	r5, r3, #27
 800d6c2:	d411      	bmi.n	800d6e8 <__swsetup_r+0x50>
 800d6c4:	2309      	movs	r3, #9
 800d6c6:	6033      	str	r3, [r6, #0]
 800d6c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d2:	e03e      	b.n	800d752 <__swsetup_r+0xba>
 800d6d4:	4b25      	ldr	r3, [pc, #148]	; (800d76c <__swsetup_r+0xd4>)
 800d6d6:	429c      	cmp	r4, r3
 800d6d8:	d101      	bne.n	800d6de <__swsetup_r+0x46>
 800d6da:	68ac      	ldr	r4, [r5, #8]
 800d6dc:	e7eb      	b.n	800d6b6 <__swsetup_r+0x1e>
 800d6de:	4b24      	ldr	r3, [pc, #144]	; (800d770 <__swsetup_r+0xd8>)
 800d6e0:	429c      	cmp	r4, r3
 800d6e2:	bf08      	it	eq
 800d6e4:	68ec      	ldreq	r4, [r5, #12]
 800d6e6:	e7e6      	b.n	800d6b6 <__swsetup_r+0x1e>
 800d6e8:	0758      	lsls	r0, r3, #29
 800d6ea:	d512      	bpl.n	800d712 <__swsetup_r+0x7a>
 800d6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ee:	b141      	cbz	r1, 800d702 <__swsetup_r+0x6a>
 800d6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	d002      	beq.n	800d6fe <__swsetup_r+0x66>
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f7ff fb31 	bl	800cd60 <_free_r>
 800d6fe:	2300      	movs	r3, #0
 800d700:	6363      	str	r3, [r4, #52]	; 0x34
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d708:	81a3      	strh	r3, [r4, #12]
 800d70a:	2300      	movs	r3, #0
 800d70c:	6063      	str	r3, [r4, #4]
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f043 0308 	orr.w	r3, r3, #8
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	b94b      	cbnz	r3, 800d732 <__swsetup_r+0x9a>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d728:	d003      	beq.n	800d732 <__swsetup_r+0x9a>
 800d72a:	4621      	mov	r1, r4
 800d72c:	4630      	mov	r0, r6
 800d72e:	f000 fa09 	bl	800db44 <__smakebuf_r>
 800d732:	89a0      	ldrh	r0, [r4, #12]
 800d734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d738:	f010 0301 	ands.w	r3, r0, #1
 800d73c:	d00a      	beq.n	800d754 <__swsetup_r+0xbc>
 800d73e:	2300      	movs	r3, #0
 800d740:	60a3      	str	r3, [r4, #8]
 800d742:	6963      	ldr	r3, [r4, #20]
 800d744:	425b      	negs	r3, r3
 800d746:	61a3      	str	r3, [r4, #24]
 800d748:	6923      	ldr	r3, [r4, #16]
 800d74a:	b943      	cbnz	r3, 800d75e <__swsetup_r+0xc6>
 800d74c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d750:	d1ba      	bne.n	800d6c8 <__swsetup_r+0x30>
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	0781      	lsls	r1, r0, #30
 800d756:	bf58      	it	pl
 800d758:	6963      	ldrpl	r3, [r4, #20]
 800d75a:	60a3      	str	r3, [r4, #8]
 800d75c:	e7f4      	b.n	800d748 <__swsetup_r+0xb0>
 800d75e:	2000      	movs	r0, #0
 800d760:	e7f7      	b.n	800d752 <__swsetup_r+0xba>
 800d762:	bf00      	nop
 800d764:	200002e0 	.word	0x200002e0
 800d768:	0800e28c 	.word	0x0800e28c
 800d76c:	0800e2ac 	.word	0x0800e2ac
 800d770:	0800e26c 	.word	0x0800e26c

0800d774 <abort>:
 800d774:	b508      	push	{r3, lr}
 800d776:	2006      	movs	r0, #6
 800d778:	f000 fa54 	bl	800dc24 <raise>
 800d77c:	2001      	movs	r0, #1
 800d77e:	f7f3 ffc1 	bl	8001704 <_exit>
	...

0800d784 <__sflush_r>:
 800d784:	898a      	ldrh	r2, [r1, #12]
 800d786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78a:	4605      	mov	r5, r0
 800d78c:	0710      	lsls	r0, r2, #28
 800d78e:	460c      	mov	r4, r1
 800d790:	d458      	bmi.n	800d844 <__sflush_r+0xc0>
 800d792:	684b      	ldr	r3, [r1, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	dc05      	bgt.n	800d7a4 <__sflush_r+0x20>
 800d798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dc02      	bgt.n	800d7a4 <__sflush_r+0x20>
 800d79e:	2000      	movs	r0, #0
 800d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7a6:	2e00      	cmp	r6, #0
 800d7a8:	d0f9      	beq.n	800d79e <__sflush_r+0x1a>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7b0:	682f      	ldr	r7, [r5, #0]
 800d7b2:	602b      	str	r3, [r5, #0]
 800d7b4:	d032      	beq.n	800d81c <__sflush_r+0x98>
 800d7b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	075a      	lsls	r2, r3, #29
 800d7bc:	d505      	bpl.n	800d7ca <__sflush_r+0x46>
 800d7be:	6863      	ldr	r3, [r4, #4]
 800d7c0:	1ac0      	subs	r0, r0, r3
 800d7c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7c4:	b10b      	cbz	r3, 800d7ca <__sflush_r+0x46>
 800d7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7c8:	1ac0      	subs	r0, r0, r3
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7d0:	6a21      	ldr	r1, [r4, #32]
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	47b0      	blx	r6
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	89a3      	ldrh	r3, [r4, #12]
 800d7da:	d106      	bne.n	800d7ea <__sflush_r+0x66>
 800d7dc:	6829      	ldr	r1, [r5, #0]
 800d7de:	291d      	cmp	r1, #29
 800d7e0:	d82c      	bhi.n	800d83c <__sflush_r+0xb8>
 800d7e2:	4a2a      	ldr	r2, [pc, #168]	; (800d88c <__sflush_r+0x108>)
 800d7e4:	40ca      	lsrs	r2, r1
 800d7e6:	07d6      	lsls	r6, r2, #31
 800d7e8:	d528      	bpl.n	800d83c <__sflush_r+0xb8>
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	6062      	str	r2, [r4, #4]
 800d7ee:	04d9      	lsls	r1, r3, #19
 800d7f0:	6922      	ldr	r2, [r4, #16]
 800d7f2:	6022      	str	r2, [r4, #0]
 800d7f4:	d504      	bpl.n	800d800 <__sflush_r+0x7c>
 800d7f6:	1c42      	adds	r2, r0, #1
 800d7f8:	d101      	bne.n	800d7fe <__sflush_r+0x7a>
 800d7fa:	682b      	ldr	r3, [r5, #0]
 800d7fc:	b903      	cbnz	r3, 800d800 <__sflush_r+0x7c>
 800d7fe:	6560      	str	r0, [r4, #84]	; 0x54
 800d800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d802:	602f      	str	r7, [r5, #0]
 800d804:	2900      	cmp	r1, #0
 800d806:	d0ca      	beq.n	800d79e <__sflush_r+0x1a>
 800d808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d80c:	4299      	cmp	r1, r3
 800d80e:	d002      	beq.n	800d816 <__sflush_r+0x92>
 800d810:	4628      	mov	r0, r5
 800d812:	f7ff faa5 	bl	800cd60 <_free_r>
 800d816:	2000      	movs	r0, #0
 800d818:	6360      	str	r0, [r4, #52]	; 0x34
 800d81a:	e7c1      	b.n	800d7a0 <__sflush_r+0x1c>
 800d81c:	6a21      	ldr	r1, [r4, #32]
 800d81e:	2301      	movs	r3, #1
 800d820:	4628      	mov	r0, r5
 800d822:	47b0      	blx	r6
 800d824:	1c41      	adds	r1, r0, #1
 800d826:	d1c7      	bne.n	800d7b8 <__sflush_r+0x34>
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d0c4      	beq.n	800d7b8 <__sflush_r+0x34>
 800d82e:	2b1d      	cmp	r3, #29
 800d830:	d001      	beq.n	800d836 <__sflush_r+0xb2>
 800d832:	2b16      	cmp	r3, #22
 800d834:	d101      	bne.n	800d83a <__sflush_r+0xb6>
 800d836:	602f      	str	r7, [r5, #0]
 800d838:	e7b1      	b.n	800d79e <__sflush_r+0x1a>
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d840:	81a3      	strh	r3, [r4, #12]
 800d842:	e7ad      	b.n	800d7a0 <__sflush_r+0x1c>
 800d844:	690f      	ldr	r7, [r1, #16]
 800d846:	2f00      	cmp	r7, #0
 800d848:	d0a9      	beq.n	800d79e <__sflush_r+0x1a>
 800d84a:	0793      	lsls	r3, r2, #30
 800d84c:	680e      	ldr	r6, [r1, #0]
 800d84e:	bf08      	it	eq
 800d850:	694b      	ldreq	r3, [r1, #20]
 800d852:	600f      	str	r7, [r1, #0]
 800d854:	bf18      	it	ne
 800d856:	2300      	movne	r3, #0
 800d858:	eba6 0807 	sub.w	r8, r6, r7
 800d85c:	608b      	str	r3, [r1, #8]
 800d85e:	f1b8 0f00 	cmp.w	r8, #0
 800d862:	dd9c      	ble.n	800d79e <__sflush_r+0x1a>
 800d864:	6a21      	ldr	r1, [r4, #32]
 800d866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d868:	4643      	mov	r3, r8
 800d86a:	463a      	mov	r2, r7
 800d86c:	4628      	mov	r0, r5
 800d86e:	47b0      	blx	r6
 800d870:	2800      	cmp	r0, #0
 800d872:	dc06      	bgt.n	800d882 <__sflush_r+0xfe>
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295
 800d880:	e78e      	b.n	800d7a0 <__sflush_r+0x1c>
 800d882:	4407      	add	r7, r0
 800d884:	eba8 0800 	sub.w	r8, r8, r0
 800d888:	e7e9      	b.n	800d85e <__sflush_r+0xda>
 800d88a:	bf00      	nop
 800d88c:	20400001 	.word	0x20400001

0800d890 <_fflush_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	690b      	ldr	r3, [r1, #16]
 800d894:	4605      	mov	r5, r0
 800d896:	460c      	mov	r4, r1
 800d898:	b913      	cbnz	r3, 800d8a0 <_fflush_r+0x10>
 800d89a:	2500      	movs	r5, #0
 800d89c:	4628      	mov	r0, r5
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	b118      	cbz	r0, 800d8aa <_fflush_r+0x1a>
 800d8a2:	6983      	ldr	r3, [r0, #24]
 800d8a4:	b90b      	cbnz	r3, 800d8aa <_fflush_r+0x1a>
 800d8a6:	f000 f887 	bl	800d9b8 <__sinit>
 800d8aa:	4b14      	ldr	r3, [pc, #80]	; (800d8fc <_fflush_r+0x6c>)
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	d11b      	bne.n	800d8e8 <_fflush_r+0x58>
 800d8b0:	686c      	ldr	r4, [r5, #4]
 800d8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d0ef      	beq.n	800d89a <_fflush_r+0xa>
 800d8ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8bc:	07d0      	lsls	r0, r2, #31
 800d8be:	d404      	bmi.n	800d8ca <_fflush_r+0x3a>
 800d8c0:	0599      	lsls	r1, r3, #22
 800d8c2:	d402      	bmi.n	800d8ca <_fflush_r+0x3a>
 800d8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8c6:	f000 f915 	bl	800daf4 <__retarget_lock_acquire_recursive>
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	f7ff ff59 	bl	800d784 <__sflush_r>
 800d8d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8d4:	07da      	lsls	r2, r3, #31
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	d4e0      	bmi.n	800d89c <_fflush_r+0xc>
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	059b      	lsls	r3, r3, #22
 800d8de:	d4dd      	bmi.n	800d89c <_fflush_r+0xc>
 800d8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8e2:	f000 f908 	bl	800daf6 <__retarget_lock_release_recursive>
 800d8e6:	e7d9      	b.n	800d89c <_fflush_r+0xc>
 800d8e8:	4b05      	ldr	r3, [pc, #20]	; (800d900 <_fflush_r+0x70>)
 800d8ea:	429c      	cmp	r4, r3
 800d8ec:	d101      	bne.n	800d8f2 <_fflush_r+0x62>
 800d8ee:	68ac      	ldr	r4, [r5, #8]
 800d8f0:	e7df      	b.n	800d8b2 <_fflush_r+0x22>
 800d8f2:	4b04      	ldr	r3, [pc, #16]	; (800d904 <_fflush_r+0x74>)
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	bf08      	it	eq
 800d8f8:	68ec      	ldreq	r4, [r5, #12]
 800d8fa:	e7da      	b.n	800d8b2 <_fflush_r+0x22>
 800d8fc:	0800e28c 	.word	0x0800e28c
 800d900:	0800e2ac 	.word	0x0800e2ac
 800d904:	0800e26c 	.word	0x0800e26c

0800d908 <std>:
 800d908:	2300      	movs	r3, #0
 800d90a:	b510      	push	{r4, lr}
 800d90c:	4604      	mov	r4, r0
 800d90e:	e9c0 3300 	strd	r3, r3, [r0]
 800d912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d916:	6083      	str	r3, [r0, #8]
 800d918:	8181      	strh	r1, [r0, #12]
 800d91a:	6643      	str	r3, [r0, #100]	; 0x64
 800d91c:	81c2      	strh	r2, [r0, #14]
 800d91e:	6183      	str	r3, [r0, #24]
 800d920:	4619      	mov	r1, r3
 800d922:	2208      	movs	r2, #8
 800d924:	305c      	adds	r0, #92	; 0x5c
 800d926:	f7fd fb5f 	bl	800afe8 <memset>
 800d92a:	4b05      	ldr	r3, [pc, #20]	; (800d940 <std+0x38>)
 800d92c:	6263      	str	r3, [r4, #36]	; 0x24
 800d92e:	4b05      	ldr	r3, [pc, #20]	; (800d944 <std+0x3c>)
 800d930:	62a3      	str	r3, [r4, #40]	; 0x28
 800d932:	4b05      	ldr	r3, [pc, #20]	; (800d948 <std+0x40>)
 800d934:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d936:	4b05      	ldr	r3, [pc, #20]	; (800d94c <std+0x44>)
 800d938:	6224      	str	r4, [r4, #32]
 800d93a:	6323      	str	r3, [r4, #48]	; 0x30
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	bf00      	nop
 800d940:	0800dc5d 	.word	0x0800dc5d
 800d944:	0800dc7f 	.word	0x0800dc7f
 800d948:	0800dcb7 	.word	0x0800dcb7
 800d94c:	0800dcdb 	.word	0x0800dcdb

0800d950 <_cleanup_r>:
 800d950:	4901      	ldr	r1, [pc, #4]	; (800d958 <_cleanup_r+0x8>)
 800d952:	f000 b8af 	b.w	800dab4 <_fwalk_reent>
 800d956:	bf00      	nop
 800d958:	0800d891 	.word	0x0800d891

0800d95c <__sfmoreglue>:
 800d95c:	b570      	push	{r4, r5, r6, lr}
 800d95e:	2268      	movs	r2, #104	; 0x68
 800d960:	1e4d      	subs	r5, r1, #1
 800d962:	4355      	muls	r5, r2
 800d964:	460e      	mov	r6, r1
 800d966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d96a:	f7ff fa65 	bl	800ce38 <_malloc_r>
 800d96e:	4604      	mov	r4, r0
 800d970:	b140      	cbz	r0, 800d984 <__sfmoreglue+0x28>
 800d972:	2100      	movs	r1, #0
 800d974:	e9c0 1600 	strd	r1, r6, [r0]
 800d978:	300c      	adds	r0, #12
 800d97a:	60a0      	str	r0, [r4, #8]
 800d97c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d980:	f7fd fb32 	bl	800afe8 <memset>
 800d984:	4620      	mov	r0, r4
 800d986:	bd70      	pop	{r4, r5, r6, pc}

0800d988 <__sfp_lock_acquire>:
 800d988:	4801      	ldr	r0, [pc, #4]	; (800d990 <__sfp_lock_acquire+0x8>)
 800d98a:	f000 b8b3 	b.w	800daf4 <__retarget_lock_acquire_recursive>
 800d98e:	bf00      	nop
 800d990:	20001a59 	.word	0x20001a59

0800d994 <__sfp_lock_release>:
 800d994:	4801      	ldr	r0, [pc, #4]	; (800d99c <__sfp_lock_release+0x8>)
 800d996:	f000 b8ae 	b.w	800daf6 <__retarget_lock_release_recursive>
 800d99a:	bf00      	nop
 800d99c:	20001a59 	.word	0x20001a59

0800d9a0 <__sinit_lock_acquire>:
 800d9a0:	4801      	ldr	r0, [pc, #4]	; (800d9a8 <__sinit_lock_acquire+0x8>)
 800d9a2:	f000 b8a7 	b.w	800daf4 <__retarget_lock_acquire_recursive>
 800d9a6:	bf00      	nop
 800d9a8:	20001a5a 	.word	0x20001a5a

0800d9ac <__sinit_lock_release>:
 800d9ac:	4801      	ldr	r0, [pc, #4]	; (800d9b4 <__sinit_lock_release+0x8>)
 800d9ae:	f000 b8a2 	b.w	800daf6 <__retarget_lock_release_recursive>
 800d9b2:	bf00      	nop
 800d9b4:	20001a5a 	.word	0x20001a5a

0800d9b8 <__sinit>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f7ff fff0 	bl	800d9a0 <__sinit_lock_acquire>
 800d9c0:	69a3      	ldr	r3, [r4, #24]
 800d9c2:	b11b      	cbz	r3, 800d9cc <__sinit+0x14>
 800d9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c8:	f7ff bff0 	b.w	800d9ac <__sinit_lock_release>
 800d9cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d9d0:	6523      	str	r3, [r4, #80]	; 0x50
 800d9d2:	4b13      	ldr	r3, [pc, #76]	; (800da20 <__sinit+0x68>)
 800d9d4:	4a13      	ldr	r2, [pc, #76]	; (800da24 <__sinit+0x6c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d9da:	42a3      	cmp	r3, r4
 800d9dc:	bf04      	itt	eq
 800d9de:	2301      	moveq	r3, #1
 800d9e0:	61a3      	streq	r3, [r4, #24]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 f820 	bl	800da28 <__sfp>
 800d9e8:	6060      	str	r0, [r4, #4]
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f000 f81c 	bl	800da28 <__sfp>
 800d9f0:	60a0      	str	r0, [r4, #8]
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 f818 	bl	800da28 <__sfp>
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	60e0      	str	r0, [r4, #12]
 800d9fc:	2104      	movs	r1, #4
 800d9fe:	6860      	ldr	r0, [r4, #4]
 800da00:	f7ff ff82 	bl	800d908 <std>
 800da04:	68a0      	ldr	r0, [r4, #8]
 800da06:	2201      	movs	r2, #1
 800da08:	2109      	movs	r1, #9
 800da0a:	f7ff ff7d 	bl	800d908 <std>
 800da0e:	68e0      	ldr	r0, [r4, #12]
 800da10:	2202      	movs	r2, #2
 800da12:	2112      	movs	r1, #18
 800da14:	f7ff ff78 	bl	800d908 <std>
 800da18:	2301      	movs	r3, #1
 800da1a:	61a3      	str	r3, [r4, #24]
 800da1c:	e7d2      	b.n	800d9c4 <__sinit+0xc>
 800da1e:	bf00      	nop
 800da20:	0800def4 	.word	0x0800def4
 800da24:	0800d951 	.word	0x0800d951

0800da28 <__sfp>:
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2a:	4607      	mov	r7, r0
 800da2c:	f7ff ffac 	bl	800d988 <__sfp_lock_acquire>
 800da30:	4b1e      	ldr	r3, [pc, #120]	; (800daac <__sfp+0x84>)
 800da32:	681e      	ldr	r6, [r3, #0]
 800da34:	69b3      	ldr	r3, [r6, #24]
 800da36:	b913      	cbnz	r3, 800da3e <__sfp+0x16>
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff ffbd 	bl	800d9b8 <__sinit>
 800da3e:	3648      	adds	r6, #72	; 0x48
 800da40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da44:	3b01      	subs	r3, #1
 800da46:	d503      	bpl.n	800da50 <__sfp+0x28>
 800da48:	6833      	ldr	r3, [r6, #0]
 800da4a:	b30b      	cbz	r3, 800da90 <__sfp+0x68>
 800da4c:	6836      	ldr	r6, [r6, #0]
 800da4e:	e7f7      	b.n	800da40 <__sfp+0x18>
 800da50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da54:	b9d5      	cbnz	r5, 800da8c <__sfp+0x64>
 800da56:	4b16      	ldr	r3, [pc, #88]	; (800dab0 <__sfp+0x88>)
 800da58:	60e3      	str	r3, [r4, #12]
 800da5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da5e:	6665      	str	r5, [r4, #100]	; 0x64
 800da60:	f000 f847 	bl	800daf2 <__retarget_lock_init_recursive>
 800da64:	f7ff ff96 	bl	800d994 <__sfp_lock_release>
 800da68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da70:	6025      	str	r5, [r4, #0]
 800da72:	61a5      	str	r5, [r4, #24]
 800da74:	2208      	movs	r2, #8
 800da76:	4629      	mov	r1, r5
 800da78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da7c:	f7fd fab4 	bl	800afe8 <memset>
 800da80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da88:	4620      	mov	r0, r4
 800da8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da8c:	3468      	adds	r4, #104	; 0x68
 800da8e:	e7d9      	b.n	800da44 <__sfp+0x1c>
 800da90:	2104      	movs	r1, #4
 800da92:	4638      	mov	r0, r7
 800da94:	f7ff ff62 	bl	800d95c <__sfmoreglue>
 800da98:	4604      	mov	r4, r0
 800da9a:	6030      	str	r0, [r6, #0]
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d1d5      	bne.n	800da4c <__sfp+0x24>
 800daa0:	f7ff ff78 	bl	800d994 <__sfp_lock_release>
 800daa4:	230c      	movs	r3, #12
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	e7ee      	b.n	800da88 <__sfp+0x60>
 800daaa:	bf00      	nop
 800daac:	0800def4 	.word	0x0800def4
 800dab0:	ffff0001 	.word	0xffff0001

0800dab4 <_fwalk_reent>:
 800dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab8:	4606      	mov	r6, r0
 800daba:	4688      	mov	r8, r1
 800dabc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dac0:	2700      	movs	r7, #0
 800dac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dac6:	f1b9 0901 	subs.w	r9, r9, #1
 800daca:	d505      	bpl.n	800dad8 <_fwalk_reent+0x24>
 800dacc:	6824      	ldr	r4, [r4, #0]
 800dace:	2c00      	cmp	r4, #0
 800dad0:	d1f7      	bne.n	800dac2 <_fwalk_reent+0xe>
 800dad2:	4638      	mov	r0, r7
 800dad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad8:	89ab      	ldrh	r3, [r5, #12]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d907      	bls.n	800daee <_fwalk_reent+0x3a>
 800dade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dae2:	3301      	adds	r3, #1
 800dae4:	d003      	beq.n	800daee <_fwalk_reent+0x3a>
 800dae6:	4629      	mov	r1, r5
 800dae8:	4630      	mov	r0, r6
 800daea:	47c0      	blx	r8
 800daec:	4307      	orrs	r7, r0
 800daee:	3568      	adds	r5, #104	; 0x68
 800daf0:	e7e9      	b.n	800dac6 <_fwalk_reent+0x12>

0800daf2 <__retarget_lock_init_recursive>:
 800daf2:	4770      	bx	lr

0800daf4 <__retarget_lock_acquire_recursive>:
 800daf4:	4770      	bx	lr

0800daf6 <__retarget_lock_release_recursive>:
 800daf6:	4770      	bx	lr

0800daf8 <__swhatbuf_r>:
 800daf8:	b570      	push	{r4, r5, r6, lr}
 800dafa:	460e      	mov	r6, r1
 800dafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db00:	2900      	cmp	r1, #0
 800db02:	b096      	sub	sp, #88	; 0x58
 800db04:	4614      	mov	r4, r2
 800db06:	461d      	mov	r5, r3
 800db08:	da08      	bge.n	800db1c <__swhatbuf_r+0x24>
 800db0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db0e:	2200      	movs	r2, #0
 800db10:	602a      	str	r2, [r5, #0]
 800db12:	061a      	lsls	r2, r3, #24
 800db14:	d410      	bmi.n	800db38 <__swhatbuf_r+0x40>
 800db16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db1a:	e00e      	b.n	800db3a <__swhatbuf_r+0x42>
 800db1c:	466a      	mov	r2, sp
 800db1e:	f000 f903 	bl	800dd28 <_fstat_r>
 800db22:	2800      	cmp	r0, #0
 800db24:	dbf1      	blt.n	800db0a <__swhatbuf_r+0x12>
 800db26:	9a01      	ldr	r2, [sp, #4]
 800db28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db30:	425a      	negs	r2, r3
 800db32:	415a      	adcs	r2, r3
 800db34:	602a      	str	r2, [r5, #0]
 800db36:	e7ee      	b.n	800db16 <__swhatbuf_r+0x1e>
 800db38:	2340      	movs	r3, #64	; 0x40
 800db3a:	2000      	movs	r0, #0
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	b016      	add	sp, #88	; 0x58
 800db40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db44 <__smakebuf_r>:
 800db44:	898b      	ldrh	r3, [r1, #12]
 800db46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db48:	079d      	lsls	r5, r3, #30
 800db4a:	4606      	mov	r6, r0
 800db4c:	460c      	mov	r4, r1
 800db4e:	d507      	bpl.n	800db60 <__smakebuf_r+0x1c>
 800db50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	6123      	str	r3, [r4, #16]
 800db58:	2301      	movs	r3, #1
 800db5a:	6163      	str	r3, [r4, #20]
 800db5c:	b002      	add	sp, #8
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
 800db60:	ab01      	add	r3, sp, #4
 800db62:	466a      	mov	r2, sp
 800db64:	f7ff ffc8 	bl	800daf8 <__swhatbuf_r>
 800db68:	9900      	ldr	r1, [sp, #0]
 800db6a:	4605      	mov	r5, r0
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff f963 	bl	800ce38 <_malloc_r>
 800db72:	b948      	cbnz	r0, 800db88 <__smakebuf_r+0x44>
 800db74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db78:	059a      	lsls	r2, r3, #22
 800db7a:	d4ef      	bmi.n	800db5c <__smakebuf_r+0x18>
 800db7c:	f023 0303 	bic.w	r3, r3, #3
 800db80:	f043 0302 	orr.w	r3, r3, #2
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	e7e3      	b.n	800db50 <__smakebuf_r+0xc>
 800db88:	4b0d      	ldr	r3, [pc, #52]	; (800dbc0 <__smakebuf_r+0x7c>)
 800db8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	6020      	str	r0, [r4, #0]
 800db90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db94:	81a3      	strh	r3, [r4, #12]
 800db96:	9b00      	ldr	r3, [sp, #0]
 800db98:	6163      	str	r3, [r4, #20]
 800db9a:	9b01      	ldr	r3, [sp, #4]
 800db9c:	6120      	str	r0, [r4, #16]
 800db9e:	b15b      	cbz	r3, 800dbb8 <__smakebuf_r+0x74>
 800dba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dba4:	4630      	mov	r0, r6
 800dba6:	f000 f8d1 	bl	800dd4c <_isatty_r>
 800dbaa:	b128      	cbz	r0, 800dbb8 <__smakebuf_r+0x74>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	f023 0303 	bic.w	r3, r3, #3
 800dbb2:	f043 0301 	orr.w	r3, r3, #1
 800dbb6:	81a3      	strh	r3, [r4, #12]
 800dbb8:	89a0      	ldrh	r0, [r4, #12]
 800dbba:	4305      	orrs	r5, r0
 800dbbc:	81a5      	strh	r5, [r4, #12]
 800dbbe:	e7cd      	b.n	800db5c <__smakebuf_r+0x18>
 800dbc0:	0800d951 	.word	0x0800d951

0800dbc4 <_malloc_usable_size_r>:
 800dbc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc8:	1f18      	subs	r0, r3, #4
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bfbc      	itt	lt
 800dbce:	580b      	ldrlt	r3, [r1, r0]
 800dbd0:	18c0      	addlt	r0, r0, r3
 800dbd2:	4770      	bx	lr

0800dbd4 <_raise_r>:
 800dbd4:	291f      	cmp	r1, #31
 800dbd6:	b538      	push	{r3, r4, r5, lr}
 800dbd8:	4604      	mov	r4, r0
 800dbda:	460d      	mov	r5, r1
 800dbdc:	d904      	bls.n	800dbe8 <_raise_r+0x14>
 800dbde:	2316      	movs	r3, #22
 800dbe0:	6003      	str	r3, [r0, #0]
 800dbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbea:	b112      	cbz	r2, 800dbf2 <_raise_r+0x1e>
 800dbec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbf0:	b94b      	cbnz	r3, 800dc06 <_raise_r+0x32>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 f830 	bl	800dc58 <_getpid_r>
 800dbf8:	462a      	mov	r2, r5
 800dbfa:	4601      	mov	r1, r0
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc02:	f000 b817 	b.w	800dc34 <_kill_r>
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d00a      	beq.n	800dc20 <_raise_r+0x4c>
 800dc0a:	1c59      	adds	r1, r3, #1
 800dc0c:	d103      	bne.n	800dc16 <_raise_r+0x42>
 800dc0e:	2316      	movs	r3, #22
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	2001      	movs	r0, #1
 800dc14:	e7e7      	b.n	800dbe6 <_raise_r+0x12>
 800dc16:	2400      	movs	r4, #0
 800dc18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	4798      	blx	r3
 800dc20:	2000      	movs	r0, #0
 800dc22:	e7e0      	b.n	800dbe6 <_raise_r+0x12>

0800dc24 <raise>:
 800dc24:	4b02      	ldr	r3, [pc, #8]	; (800dc30 <raise+0xc>)
 800dc26:	4601      	mov	r1, r0
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	f7ff bfd3 	b.w	800dbd4 <_raise_r>
 800dc2e:	bf00      	nop
 800dc30:	200002e0 	.word	0x200002e0

0800dc34 <_kill_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d07      	ldr	r5, [pc, #28]	; (800dc54 <_kill_r+0x20>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	4611      	mov	r1, r2
 800dc40:	602b      	str	r3, [r5, #0]
 800dc42:	f7f3 fd4f 	bl	80016e4 <_kill>
 800dc46:	1c43      	adds	r3, r0, #1
 800dc48:	d102      	bne.n	800dc50 <_kill_r+0x1c>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	b103      	cbz	r3, 800dc50 <_kill_r+0x1c>
 800dc4e:	6023      	str	r3, [r4, #0]
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	bf00      	nop
 800dc54:	20001a54 	.word	0x20001a54

0800dc58 <_getpid_r>:
 800dc58:	f7f3 bd3c 	b.w	80016d4 <_getpid>

0800dc5c <__sread>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	460c      	mov	r4, r1
 800dc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc64:	f000 f894 	bl	800dd90 <_read_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	bfab      	itete	ge
 800dc6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc6e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc70:	181b      	addge	r3, r3, r0
 800dc72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc76:	bfac      	ite	ge
 800dc78:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc7a:	81a3      	strhlt	r3, [r4, #12]
 800dc7c:	bd10      	pop	{r4, pc}

0800dc7e <__swrite>:
 800dc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc82:	461f      	mov	r7, r3
 800dc84:	898b      	ldrh	r3, [r1, #12]
 800dc86:	05db      	lsls	r3, r3, #23
 800dc88:	4605      	mov	r5, r0
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	4616      	mov	r6, r2
 800dc8e:	d505      	bpl.n	800dc9c <__swrite+0x1e>
 800dc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc94:	2302      	movs	r3, #2
 800dc96:	2200      	movs	r2, #0
 800dc98:	f000 f868 	bl	800dd6c <_lseek_r>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	4632      	mov	r2, r6
 800dcaa:	463b      	mov	r3, r7
 800dcac:	4628      	mov	r0, r5
 800dcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb2:	f000 b817 	b.w	800dce4 <_write_r>

0800dcb6 <__sseek>:
 800dcb6:	b510      	push	{r4, lr}
 800dcb8:	460c      	mov	r4, r1
 800dcba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcbe:	f000 f855 	bl	800dd6c <_lseek_r>
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	bf15      	itete	ne
 800dcc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800dcca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcd2:	81a3      	strheq	r3, [r4, #12]
 800dcd4:	bf18      	it	ne
 800dcd6:	81a3      	strhne	r3, [r4, #12]
 800dcd8:	bd10      	pop	{r4, pc}

0800dcda <__sclose>:
 800dcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcde:	f000 b813 	b.w	800dd08 <_close_r>
	...

0800dce4 <_write_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4d07      	ldr	r5, [pc, #28]	; (800dd04 <_write_r+0x20>)
 800dce8:	4604      	mov	r4, r0
 800dcea:	4608      	mov	r0, r1
 800dcec:	4611      	mov	r1, r2
 800dcee:	2200      	movs	r2, #0
 800dcf0:	602a      	str	r2, [r5, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f7f3 fd2d 	bl	8001752 <_write>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_write_r+0x1e>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_write_r+0x1e>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	20001a54 	.word	0x20001a54

0800dd08 <_close_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d06      	ldr	r5, [pc, #24]	; (800dd24 <_close_r+0x1c>)
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4604      	mov	r4, r0
 800dd10:	4608      	mov	r0, r1
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	f7f3 fd39 	bl	800178a <_close>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_close_r+0x1a>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_close_r+0x1a>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	20001a54 	.word	0x20001a54

0800dd28 <_fstat_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4d07      	ldr	r5, [pc, #28]	; (800dd48 <_fstat_r+0x20>)
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4608      	mov	r0, r1
 800dd32:	4611      	mov	r1, r2
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	f7f3 fd34 	bl	80017a2 <_fstat>
 800dd3a:	1c43      	adds	r3, r0, #1
 800dd3c:	d102      	bne.n	800dd44 <_fstat_r+0x1c>
 800dd3e:	682b      	ldr	r3, [r5, #0]
 800dd40:	b103      	cbz	r3, 800dd44 <_fstat_r+0x1c>
 800dd42:	6023      	str	r3, [r4, #0]
 800dd44:	bd38      	pop	{r3, r4, r5, pc}
 800dd46:	bf00      	nop
 800dd48:	20001a54 	.word	0x20001a54

0800dd4c <_isatty_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d06      	ldr	r5, [pc, #24]	; (800dd68 <_isatty_r+0x1c>)
 800dd50:	2300      	movs	r3, #0
 800dd52:	4604      	mov	r4, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	602b      	str	r3, [r5, #0]
 800dd58:	f7f3 fd33 	bl	80017c2 <_isatty>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_isatty_r+0x1a>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_isatty_r+0x1a>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	20001a54 	.word	0x20001a54

0800dd6c <_lseek_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	; (800dd8c <_lseek_r+0x20>)
 800dd70:	4604      	mov	r4, r0
 800dd72:	4608      	mov	r0, r1
 800dd74:	4611      	mov	r1, r2
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f7f3 fd2c 	bl	80017d8 <_lseek>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_lseek_r+0x1e>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_lseek_r+0x1e>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	20001a54 	.word	0x20001a54

0800dd90 <_read_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	; (800ddb0 <_read_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f3 fcba 	bl	8001718 <_read>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_read_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_read_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	20001a54 	.word	0x20001a54

0800ddb4 <_init>:
 800ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb6:	bf00      	nop
 800ddb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddba:	bc08      	pop	{r3}
 800ddbc:	469e      	mov	lr, r3
 800ddbe:	4770      	bx	lr

0800ddc0 <_fini>:
 800ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc2:	bf00      	nop
 800ddc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc6:	bc08      	pop	{r3}
 800ddc8:	469e      	mov	lr, r3
 800ddca:	4770      	bx	lr
