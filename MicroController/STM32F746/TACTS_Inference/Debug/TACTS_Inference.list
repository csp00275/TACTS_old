
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012480  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018de4  08012660  08012660  00022660  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b444  0802b444  00041a58  2**0
                  CONTENTS
  4 .ARM          00000008  0802b444  0802b444  0003b444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b44c  0802b44c  00041a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b44c  0802b44c  0003b44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b450  0802b450  0003b450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001a58  20000000  0802b454  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003178  20001a60  0802ceac  00041a60  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20004bd8  0802ceac  00044bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00041a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c4e  00000000  00000000  00041a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4a  00000000  00000000  000626d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00066520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00067858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fbe  00000000  00000000  000689d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aeae  00000000  00000000  0009298e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7a9  00000000  00000000  000ad83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e0  00000000  00000000  001aa038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001b0318  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001b03e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001a60 	.word	0x20001a60
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012638 	.word	0x08012638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001a64 	.word	0x20001a64
 800020c:	08012638 	.word	0x08012638

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a8 	b.w	8000f70 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83a 	bl	8000ca0 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_f2lz>:
 8000c38:	ee07 0a90 	vmov	s15, r0
 8000c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	d401      	bmi.n	8000c4a <__aeabi_f2lz+0x12>
 8000c46:	f000 b80b 	b.w	8000c60 <__aeabi_f2ulz>
 8000c4a:	eef1 7a67 	vneg.f32	s15, s15
 8000c4e:	b508      	push	{r3, lr}
 8000c50:	ee17 0a90 	vmov	r0, s15
 8000c54:	f000 f804 	bl	8000c60 <__aeabi_f2ulz>
 8000c58:	4240      	negs	r0, r0
 8000c5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5e:	bd08      	pop	{r3, pc}

08000c60 <__aeabi_f2ulz>:
 8000c60:	b5d0      	push	{r4, r6, r7, lr}
 8000c62:	f7ff fca1 	bl	80005a8 <__aeabi_f2d>
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__aeabi_f2ulz+0x38>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	f7ff fcf3 	bl	8000658 <__aeabi_dmul>
 8000c72:	f000 f97f 	bl	8000f74 <__aeabi_d2uiz>
 8000c76:	4604      	mov	r4, r0
 8000c78:	f7ff fc74 	bl	8000564 <__aeabi_ui2d>
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <__aeabi_f2ulz+0x3c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f7ff fcea 	bl	8000658 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4630      	mov	r0, r6
 8000c8a:	4639      	mov	r1, r7
 8000c8c:	f7ff fb2c 	bl	80002e8 <__aeabi_dsub>
 8000c90:	f000 f970 	bl	8000f74 <__aeabi_d2uiz>
 8000c94:	4621      	mov	r1, r4
 8000c96:	bdd0      	pop	{r4, r6, r7, pc}
 8000c98:	3df00000 	.word	0x3df00000
 8000c9c:	41f00000 	.word	0x41f00000

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9d08      	ldr	r5, [sp, #32]
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	468e      	mov	lr, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <__udivmoddi4+0xaa>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	d969      	bls.n	8000d88 <__udivmoddi4+0xe8>
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b152      	cbz	r2, 8000cd0 <__udivmoddi4+0x30>
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	f1c2 0120 	rsb	r1, r2, #32
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cca:	ea41 0e03 	orr.w	lr, r1, r3
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	0c21      	lsrs	r1, r4, #16
 8000cd6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cda:	fa1f f78c 	uxth.w	r7, ip
 8000cde:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce6:	fb06 f107 	mul.w	r1, r6, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d90a      	bls.n	8000d04 <__udivmoddi4+0x64>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 811f 	bcs.w	8000f38 <__udivmoddi4+0x298>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 811c 	bls.w	8000f38 <__udivmoddi4+0x298>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 f707 	mul.w	r7, r0, r7
 8000d18:	42a7      	cmp	r7, r4
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x92>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	f080 810a 	bcs.w	8000f3c <__udivmoddi4+0x29c>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f240 8107 	bls.w	8000f3c <__udivmoddi4+0x29c>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	1be4      	subs	r4, r4, r7
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa4>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0xc2>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	f000 80ef 	beq.w	8000f32 <__udivmoddi4+0x292>
 8000d54:	2600      	movs	r6, #0
 8000d56:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	fab3 f683 	clz	r6, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d14a      	bne.n	8000e00 <__udivmoddi4+0x160>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xd4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f200 80f9 	bhi.w	8000f66 <__udivmoddi4+0x2c6>
 8000d74:	1a84      	subs	r4, r0, r2
 8000d76:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d0e0      	beq.n	8000d44 <__udivmoddi4+0xa4>
 8000d82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d86:	e7dd      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xec>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	f040 8092 	bne.w	8000eba <__udivmoddi4+0x21a>
 8000d96:	eba1 010c 	sub.w	r1, r1, ip
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2601      	movs	r6, #1
 8000da4:	0c20      	lsrs	r0, r4, #16
 8000da6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000daa:	fb07 1113 	mls	r1, r7, r3, r1
 8000dae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db2:	fb0e f003 	mul.w	r0, lr, r3
 8000db6:	4288      	cmp	r0, r1
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x12c>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x12a>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2c0>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x156>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x154>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000df4:	4608      	mov	r0, r1
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfe:	e79c      	b.n	8000d3a <__udivmoddi4+0x9a>
 8000e00:	f1c6 0720 	rsb	r7, r6, #32
 8000e04:	40b3      	lsls	r3, r6
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e12:	fa01 f306 	lsl.w	r3, r1, r6
 8000e16:	431c      	orrs	r4, r3
 8000e18:	40f9      	lsrs	r1, r7
 8000e1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e26:	0c20      	lsrs	r0, r4, #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e34:	fb08 f00e 	mul.w	r0, r8, lr
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b8>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2bc>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2bc>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1a09      	subs	r1, r1, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e60:	fb09 1110 	mls	r1, r9, r0, r1
 8000e64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e6c:	458e      	cmp	lr, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1e2>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7a:	458e      	cmp	lr, r1
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e86:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8a:	eba1 010e 	sub.w	r1, r1, lr
 8000e8e:	42a1      	cmp	r1, r4
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46a6      	mov	lr, r4
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x2a4>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x2a0>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x212>
 8000e9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eaa:	40f1      	lsrs	r1, r6
 8000eac:	431f      	orrs	r7, r3
 8000eae:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	f1c2 0320 	rsb	r3, r2, #32
 8000ebe:	40d8      	lsrs	r0, r3
 8000ec0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed8:	fb07 3610 	mls	r6, r7, r0, r3
 8000edc:	0c0b      	lsrs	r3, r1, #16
 8000ede:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x260>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b8>
 8000ef8:	429e      	cmp	r6, r3
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b8>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	b289      	uxth	r1, r1
 8000f04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f08:	fb07 3316 	mls	r3, r7, r6, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb06 f30e 	mul.w	r3, r6, lr
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x28a>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000f26:	3e02      	subs	r6, #2
 8000f28:	4461      	add	r1, ip
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0x104>
 8000f32:	462e      	mov	r6, r5
 8000f34:	4628      	mov	r0, r5
 8000f36:	e705      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	e6e3      	b.n	8000d04 <__udivmoddi4+0x64>
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	e6f8      	b.n	8000d32 <__udivmoddi4+0x92>
 8000f40:	454b      	cmp	r3, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f8>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f8>
 8000f50:	4646      	mov	r6, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x28a>
 8000f54:	4620      	mov	r0, r4
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1e2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x260>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b8>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	4461      	add	r1, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x12c>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e709      	b.n	8000d7e <__udivmoddi4+0xde>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x156>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <aiInit+0x64>)
 8000fbc:	603b      	str	r3, [r7, #0]
    err = ai_threeline_create_and_init(&allLine, acts, NULL);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <aiInit+0x68>)
 8000fc6:	f00a ffcd 	bl	800bf64 <ai_threeline_create_and_init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	607b      	str	r3, [r7, #4]
    if (err.type != AI_ERROR_NONE) {
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00a      	beq.n	8000fea <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "threeLine aiInit Error \n"), 100);
 8000fd4:	4912      	ldr	r1, [pc, #72]	; (8001020 <aiInit+0x6c>)
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <aiInit+0x70>)
 8000fd8:	f00e fda2 	bl	800fb20 <siprintf>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	4910      	ldr	r1, [pc, #64]	; (8001024 <aiInit+0x70>)
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <aiInit+0x74>)
 8000fe6:	f004 fced 	bl	80059c4 <HAL_UART_Transmit>
    }

#if NUM_SENSOR == 24
    ai_input = ai_twoline_inputs_get(allLine, NULL);
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <aiInit+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00b f88f 	bl	800c114 <ai_twoline_inputs_get>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <aiInit+0x78>)
 8000ffa:	6013      	str	r3, [r2, #0]
    ai_output = ai_twoline_outputs_get(allLine, NULL);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <aiInit+0x68>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00b f8a0 	bl	800c148 <ai_twoline_outputs_get>
 8001008:	4603      	mov	r3, r0
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <aiInit+0x7c>)
 800100c:	6013      	str	r3, [r2, #0]

#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20001a80 	.word	0x20001a80
 800101c:	20001a7c 	.word	0x20001a7c
 8001020:	08012660 	.word	0x08012660
 8001024:	2000227c 	.word	0x2000227c
 8001028:	200021f4 	.word	0x200021f4
 800102c:	20002170 	.word	0x20002170
 8001030:	20002174 	.word	0x20002174

08001034 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <aiRun+0x38>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <aiRun+0x3c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	605a      	str	r2, [r3, #4]

#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <aiRun+0x40>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <aiRun+0x38>)
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <aiRun+0x3c>)
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f00b f88e 	bl	800c17c <ai_twoline_run>
 8001060:	60f8      	str	r0, [r7, #12]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif

    return 0;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20002170 	.word	0x20002170
 8001070:	20002174 	.word	0x20002174
 8001074:	20001a7c 	.word	0x20001a7c

08001078 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_I2C1_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_I2C1_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_I2C1_Init+0x74>)
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <MX_I2C1_Init+0x7c>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_I2C1_Init+0x74>)
 8001090:	2201      	movs	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_I2C1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <MX_I2C1_Init+0x74>)
 80010b4:	f002 f83c 	bl	8003130 <HAL_I2C_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010be:	f000 feff 	bl	8001ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_I2C1_Init+0x74>)
 80010c6:	f003 fa8d 	bl	80045e4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d0:	f000 fef6 	bl	8001ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_I2C1_Init+0x74>)
 80010d8:	f003 facf 	bl	800467a <HAL_I2CEx_ConfigDigitalFilter>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 feed 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20002178 	.word	0x20002178
 80010f0:	40005400 	.word	0x40005400
 80010f4:	6000030d 	.word	0x6000030d

080010f8 <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6178      	str	r0, [r7, #20]
 8001100:	ed87 0a04 	vstr	s0, [r7, #16]
 8001104:	edc7 0a03 	vstr	s1, [r7, #12]
 8001108:	ed87 1a02 	vstr	s2, [r7, #8]
 800110c:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
    kf->P = P;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]
}
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a02 	vldr	s14, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edd3 6a02 	vldr	s13, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 7a01 	vldr	s15, [r3, #4]
 8001168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	ed93 7a03 	vldr	s14, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edd3 7a03 	vldr	s15, [r3, #12]
 8001188:	ed97 6a00 	vldr	s12, [r7]
 800118c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	ee07 3a90 	vmov	s15, r3
}
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011d8:	f3bf 8f4f 	dsb	sy
}
 80011dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011de:	f3bf 8f6f 	isb	sy
}
 80011e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <SCB_EnableICache+0x48>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ec:	f3bf 8f4f 	dsb	sy
}
 80011f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f2:	f3bf 8f6f 	isb	sy
}
 80011f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <SCB_EnableICache+0x48>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <SCB_EnableICache+0x48>)
 80011fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001202:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001204:	f3bf 8f4f 	dsb	sy
}
 8001208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800120a:	f3bf 8f6f 	isb	sy
}
 800120e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <SCB_EnableDCache+0x84>)
 8001228:	2200      	movs	r2, #0
 800122a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800122e:	f3bf 8f4f 	dsb	sy
}
 8001232:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <SCB_EnableDCache+0x84>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0b5b      	lsrs	r3, r3, #13
 8001240:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001244:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800124e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001258:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800125e:	4911      	ldr	r1, [pc, #68]	; (80012a4 <SCB_EnableDCache+0x84>)
 8001260:	4313      	orrs	r3, r2
 8001262:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ef      	bne.n	8001250 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e5a      	subs	r2, r3, #1
 8001274:	60fa      	str	r2, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1e5      	bne.n	8001246 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800127a:	f3bf 8f4f 	dsb	sy
}
 800127e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <SCB_EnableDCache+0x84>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <SCB_EnableDCache+0x84>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800128c:	f3bf 8f4f 	dsb	sy
}
 8001290:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001292:	f3bf 8f6f 	isb	sy
}
 8001296:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <ProcessCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ProcessCommand(uint8_t *command)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {
 80012b0:	4929      	ldr	r1, [pc, #164]	; (8001358 <ProcessCommand+0xb0>)
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7fe ffac 	bl	8000210 <strcmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <ProcessCommand+0x2e>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 80012be:	4927      	ldr	r1, [pc, #156]	; (800135c <ProcessCommand+0xb4>)
 80012c0:	4827      	ldr	r0, [pc, #156]	; (8001360 <ProcessCommand+0xb8>)
 80012c2:	f00e fc2d 	bl	800fb20 <siprintf>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	4924      	ldr	r1, [pc, #144]	; (8001360 <ProcessCommand+0xb8>)
 80012ce:	4825      	ldr	r0, [pc, #148]	; (8001364 <ProcessCommand+0xbc>)
 80012d0:	f004 fb78 	bl	80059c4 <HAL_UART_Transmit>
    }else if (strcmp((char*)command, "5") == 0) {
		FifthCommand();
    }else {
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 80012d4:	e03c      	b.n	8001350 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "1") == 0) {
 80012d6:	4924      	ldr	r1, [pc, #144]	; (8001368 <ProcessCommand+0xc0>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7fe ff99 	bl	8000210 <strcmp>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <ProcessCommand+0x42>
    	FirstCommand();
 80012e4:	f000 f84c 	bl	8001380 <FirstCommand>
}
 80012e8:	e032      	b.n	8001350 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "2") == 0) {
 80012ea:	4920      	ldr	r1, [pc, #128]	; (800136c <ProcessCommand+0xc4>)
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7fe ff8f 	bl	8000210 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <ProcessCommand+0x56>
    	SecondCommand();
 80012f8:	f000 f8de 	bl	80014b8 <SecondCommand>
}
 80012fc:	e028      	b.n	8001350 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "3") == 0) {
 80012fe:	491c      	ldr	r1, [pc, #112]	; (8001370 <ProcessCommand+0xc8>)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7fe ff85 	bl	8000210 <strcmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <ProcessCommand+0x6a>
		ThirdCommand();
 800130c:	f000 fa82 	bl	8001814 <ThirdCommand>
}
 8001310:	e01e      	b.n	8001350 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "4") == 0) {
 8001312:	4918      	ldr	r1, [pc, #96]	; (8001374 <ProcessCommand+0xcc>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7fe ff7b 	bl	8000210 <strcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <ProcessCommand+0x7e>
		FourthCommand();
 8001320:	f000 fb6c 	bl	80019fc <FourthCommand>
}
 8001324:	e014      	b.n	8001350 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "5") == 0) {
 8001326:	4914      	ldr	r1, [pc, #80]	; (8001378 <ProcessCommand+0xd0>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7fe ff71 	bl	8000210 <strcmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <ProcessCommand+0x92>
		FifthCommand();
 8001334:	f000 fcbe 	bl	8001cb4 <FifthCommand>
}
 8001338:	e00a      	b.n	8001350 <ProcessCommand+0xa8>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 800133a:	4910      	ldr	r1, [pc, #64]	; (800137c <ProcessCommand+0xd4>)
 800133c:	4808      	ldr	r0, [pc, #32]	; (8001360 <ProcessCommand+0xb8>)
 800133e:	f00e fbef 	bl	800fb20 <siprintf>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	2364      	movs	r3, #100	; 0x64
 8001348:	4905      	ldr	r1, [pc, #20]	; (8001360 <ProcessCommand+0xb8>)
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <ProcessCommand+0xbc>)
 800134c:	f004 fb3a 	bl	80059c4 <HAL_UART_Transmit>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0801267c 	.word	0x0801267c
 800135c:	08012684 	.word	0x08012684
 8001360:	2000227c 	.word	0x2000227c
 8001364:	200021f4 	.word	0x200021f4
 8001368:	0801268c 	.word	0x0801268c
 800136c:	08012690 	.word	0x08012690
 8001370:	08012694 	.word	0x08012694
 8001374:	08012698 	.word	0x08012698
 8001378:	0801269c 	.word	0x0801269c
 800137c:	080126a0 	.word	0x080126a0

08001380 <FirstCommand>:

void FirstCommand()
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001386:	4944      	ldr	r1, [pc, #272]	; (8001498 <FirstCommand+0x118>)
 8001388:	4844      	ldr	r0, [pc, #272]	; (800149c <FirstCommand+0x11c>)
 800138a:	f00e fbc9 	bl	800fb20 <siprintf>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	4941      	ldr	r1, [pc, #260]	; (800149c <FirstCommand+0x11c>)
 8001396:	4842      	ldr	r0, [pc, #264]	; (80014a0 <FirstCommand+0x120>)
 8001398:	f004 fb14 	bl	80059c4 <HAL_UART_Transmit>

    uint32_t timeStart_s, timeEnd_s,timeDiff_s; // single
    uint32_t timeStart_a, timeEnd_a, timeDiff_a; // all

    timeStart_a = HAL_GetTick();
 800139c:	f001 fa50 	bl	8002840 <HAL_GetTick>
 80013a0:	61b8      	str	r0, [r7, #24]
    do {
    	timeStart_s = HAL_GetTick();
 80013a2:	f001 fa4d 	bl	8002840 <HAL_GetTick>
 80013a6:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e042      	b.n	8001434 <FirstCommand+0xb4>
    	    uint8_t q = i / 12;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4a3c      	ldr	r2, [pc, #240]	; (80014a4 <FirstCommand+0x124>)
 80013b2:	fb82 1203 	smull	r1, r2, r2, r3
 80013b6:	1052      	asrs	r2, r2, #1
 80013b8:	17db      	asrs	r3, r3, #31
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	70fb      	strb	r3, [r7, #3]
    	    uint8_t r = i % 12;
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <FirstCommand+0x124>)
 80013c2:	fb83 1302 	smull	r1, r3, r3, r2
 80013c6:	1059      	asrs	r1, r3, #1
 80013c8:	17d3      	asrs	r3, r2, #31
 80013ca:	1ac9      	subs	r1, r1, r3
 80013cc:	460b      	mov	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	1ad1      	subs	r1, r2, r3
 80013d6:	460b      	mov	r3, r1
 80013d8:	70bb      	strb	r3, [r7, #2]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	78ba      	ldrb	r2, [r7, #2]
 80013e2:	2a07      	cmp	r2, #7
 80013e4:	bf8c      	ite	hi
 80013e6:	2201      	movhi	r2, #1
 80013e8:	2200      	movls	r2, #0
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	4413      	add	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 80013f0:	78bb      	ldrb	r3, [r7, #2]
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d903      	bls.n	80013fe <FirstCommand+0x7e>
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	3b08      	subs	r3, #8
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	e000      	b.n	8001400 <FirstCommand+0x80>
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	703b      	strb	r3, [r7, #0]
    	    resetTcaDevicesExcept(active_device, tca_addr);
 8001402:	787b      	ldrb	r3, [r7, #1]
 8001404:	4928      	ldr	r1, [pc, #160]	; (80014a8 <FirstCommand+0x128>)
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f806 	bl	8002418 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 800140c:	7839      	ldrb	r1, [r7, #0]
 800140e:	787b      	ldrb	r3, [r7, #1]
 8001410:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <FirstCommand+0x128>)
 8001412:	4618      	mov	r0, r3
 8001414:	f001 f82c 	bl	8002470 <setActiveTcaChannel>
            excuteVl53l0x(&vl53l0x_s[i],i);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <FirstCommand+0x12c>)
 8001424:	4413      	add	r3, r2
 8001426:	69f9      	ldr	r1, [r7, #28]
 8001428:	4618      	mov	r0, r3
 800142a:	f001 f941 	bl	80026b0 <excuteVl53l0x>
        for (int i = 0; i < NUM_SENSOR; i++) {
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b17      	cmp	r3, #23
 8001438:	ddb9      	ble.n	80013ae <FirstCommand+0x2e>
        }
		timeEnd_s = HAL_GetTick();
 800143a:	f001 fa01 	bl	8002840 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]
		timeDiff_s = timeEnd_s - timeStart_s;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", timeDiff_s), 100);
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4919      	ldr	r1, [pc, #100]	; (80014b0 <FirstCommand+0x130>)
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <FirstCommand+0x11c>)
 800144e:	f00e fb67 	bl	800fb20 <siprintf>
 8001452:	4603      	mov	r3, r0
 8001454:	b29a      	uxth	r2, r3
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	4910      	ldr	r1, [pc, #64]	; (800149c <FirstCommand+0x11c>)
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <FirstCommand+0x120>)
 800145c:	f004 fab2 	bl	80059c4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001460:	4914      	ldr	r1, [pc, #80]	; (80014b4 <FirstCommand+0x134>)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <FirstCommand+0x11c>)
 8001464:	f00e fb5c 	bl	800fb20 <siprintf>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	490b      	ldr	r1, [pc, #44]	; (800149c <FirstCommand+0x11c>)
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <FirstCommand+0x120>)
 8001472:	f004 faa7 	bl	80059c4 <HAL_UART_Transmit>
		timeEnd_a = HAL_GetTick();
 8001476:	f001 f9e3 	bl	8002840 <HAL_GetTick>
 800147a:	60b8      	str	r0, [r7, #8]
		timeDiff_a = timeEnd_a - timeStart_a;
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	607b      	str	r3, [r7, #4]
    } while (timeDiff_a < 10000);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f242 720f 	movw	r2, #9999	; 0x270f
 800148a:	4293      	cmp	r3, r2
 800148c:	d989      	bls.n	80013a2 <FirstCommand+0x22>
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	080126c0 	.word	0x080126c0
 800149c:	2000227c 	.word	0x2000227c
 80014a0:	200021f4 	.word	0x200021f4
 80014a4:	2aaaaaab 	.word	0x2aaaaaab
 80014a8:	20000018 	.word	0x20000018
 80014ac:	20002324 	.word	0x20002324
 80014b0:	080126d0 	.word	0x080126d0
 80014b4:	080126d8 	.word	0x080126d8

080014b8 <SecondCommand>:

void SecondCommand()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80014be:	498e      	ldr	r1, [pc, #568]	; (80016f8 <SecondCommand+0x240>)
 80014c0:	488e      	ldr	r0, [pc, #568]	; (80016fc <SecondCommand+0x244>)
 80014c2:	f00e fb2d 	bl	800fb20 <siprintf>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	498b      	ldr	r1, [pc, #556]	; (80016fc <SecondCommand+0x244>)
 80014ce:	488c      	ldr	r0, [pc, #560]	; (8001700 <SecondCommand+0x248>)
 80014d0:	f004 fa78 	bl	80059c4 <HAL_UART_Transmit>

    uint32_t timeStart_s, timeEnd_s,timeDiff_s; // single
    uint32_t timeStart_a, timeEnd_a, timeDiff_a; // all

    timeStart_a = HAL_GetTick();
 80014d4:	f001 f9b4 	bl	8002840 <HAL_GetTick>
 80014d8:	6278      	str	r0, [r7, #36]	; 0x24
    for (int count =0; count <100;count ++){
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
 80014de:	e185      	b.n	80017ec <SecondCommand+0x334>
    	timeStart_s = HAL_GetTick();
 80014e0:	f001 f9ae 	bl	8002840 <HAL_GetTick>
 80014e4:	6238      	str	r0, [r7, #32]
    	uint8_t tofCount =0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (int i = 0; i < NUM_SENSOR; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f0:	e0a4      	b.n	800163c <SecondCommand+0x184>
    	    uint8_t q = i / 12;
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	4a83      	ldr	r2, [pc, #524]	; (8001704 <SecondCommand+0x24c>)
 80014f6:	fb82 1203 	smull	r1, r2, r2, r3
 80014fa:	1052      	asrs	r2, r2, #1
 80014fc:	17db      	asrs	r3, r3, #31
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	72fb      	strb	r3, [r7, #11]
    	    uint8_t r = i % 12;
 8001502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001504:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <SecondCommand+0x24c>)
 8001506:	fb83 1302 	smull	r1, r3, r3, r2
 800150a:	1059      	asrs	r1, r3, #1
 800150c:	17d3      	asrs	r3, r2, #31
 800150e:	1ac9      	subs	r1, r1, r3
 8001510:	460b      	mov	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	440b      	add	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	1ad1      	subs	r1, r2, r3
 800151a:	460b      	mov	r3, r1
 800151c:	72bb      	strb	r3, [r7, #10]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	7aba      	ldrb	r2, [r7, #10]
 8001526:	2a07      	cmp	r2, #7
 8001528:	bf8c      	ite	hi
 800152a:	2201      	movhi	r2, #1
 800152c:	2200      	movls	r2, #0
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	4413      	add	r3, r2
 8001532:	727b      	strb	r3, [r7, #9]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001534:	7abb      	ldrb	r3, [r7, #10]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d903      	bls.n	8001542 <SecondCommand+0x8a>
 800153a:	7abb      	ldrb	r3, [r7, #10]
 800153c:	3b08      	subs	r3, #8
 800153e:	b2db      	uxtb	r3, r3
 8001540:	e000      	b.n	8001544 <SecondCommand+0x8c>
 8001542:	7abb      	ldrb	r3, [r7, #10]
 8001544:	723b      	strb	r3, [r7, #8]
    	    resetTcaDevicesExcept(active_device, tca_addr);
 8001546:	7a7b      	ldrb	r3, [r7, #9]
 8001548:	496f      	ldr	r1, [pc, #444]	; (8001708 <SecondCommand+0x250>)
 800154a:	4618      	mov	r0, r3
 800154c:	f000 ff64 	bl	8002418 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 8001550:	7a39      	ldrb	r1, [r7, #8]
 8001552:	7a7b      	ldrb	r3, [r7, #9]
 8001554:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <SecondCommand+0x250>)
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff8a 	bl	8002470 <setActiveTcaChannel>
            Dev = &vl53l0x_s[i];
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	4a69      	ldr	r2, [pc, #420]	; (800170c <SecondCommand+0x254>)
 8001568:	4413      	add	r3, r2
 800156a:	4a69      	ldr	r2, [pc, #420]	; (8001710 <SecondCommand+0x258>)
 800156c:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 us
 800156e:	4b68      	ldr	r3, [pc, #416]	; (8001710 <SecondCommand+0x258>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4968      	ldr	r1, [pc, #416]	; (8001714 <SecondCommand+0x25c>)
 8001574:	4618      	mov	r0, r3
 8001576:	f006 ffc2 	bl	80084fe <VL53L0X_PerformContinuousRangingMeasurement>

            if (RangingData.RangeStatus == 0) {
 800157a:	4b66      	ldr	r3, [pc, #408]	; (8001714 <SecondCommand+0x25c>)
 800157c:	7e1b      	ldrb	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d14d      	bne.n	800161e <SecondCommand+0x166>
                float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8001582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4a62      	ldr	r2, [pc, #392]	; (8001718 <SecondCommand+0x260>)
 800158e:	4413      	add	r3, r2
 8001590:	4a60      	ldr	r2, [pc, #384]	; (8001714 <SecondCommand+0x25c>)
 8001592:	8912      	ldrh	r2, [r2, #8]
 8001594:	ee07 2a90 	vmov	s15, r2
 8001598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fdc7 	bl	8001134 <Kalman_Estimate>
 80015a6:	ed87 0a01 	vstr	s0, [r7, #4]
                in_data[i]=filteredValue;
 80015aa:	4a5c      	ldr	r2, [pc, #368]	; (800171c <SecondCommand+0x264>)
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", in_data[i]), 1000);
 80015b6:	4a59      	ldr	r2, [pc, #356]	; (800171c <SecondCommand+0x264>)
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fff1 	bl	80005a8 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4955      	ldr	r1, [pc, #340]	; (8001720 <SecondCommand+0x268>)
 80015cc:	484b      	ldr	r0, [pc, #300]	; (80016fc <SecondCommand+0x244>)
 80015ce:	f00e faa7 	bl	800fb20 <siprintf>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	4948      	ldr	r1, [pc, #288]	; (80016fc <SecondCommand+0x244>)
 80015dc:	4848      	ldr	r0, [pc, #288]	; (8001700 <SecondCommand+0x248>)
 80015de:	f004 f9f1 	bl	80059c4 <HAL_UART_Transmit>
                in_data[i]= (filteredValue-Xmean[i])/Xstd[i];
 80015e2:	4a50      	ldr	r2, [pc, #320]	; (8001724 <SecondCommand+0x26c>)
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015f6:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <SecondCommand+0x270>)
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001606:	4a45      	ldr	r2, [pc, #276]	; (800171c <SecondCommand+0x264>)
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001612:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001616:	3301      	adds	r3, #1
 8001618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800161c:	e00b      	b.n	8001636 <SecondCommand+0x17e>
            }else{
               HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "99 "), 1000);
 800161e:	4943      	ldr	r1, [pc, #268]	; (800172c <SecondCommand+0x274>)
 8001620:	4836      	ldr	r0, [pc, #216]	; (80016fc <SecondCommand+0x244>)
 8001622:	f00e fa7d 	bl	800fb20 <siprintf>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	4933      	ldr	r1, [pc, #204]	; (80016fc <SecondCommand+0x244>)
 8001630:	4833      	ldr	r0, [pc, #204]	; (8001700 <SecondCommand+0x248>)
 8001632:	f004 f9c7 	bl	80059c4 <HAL_UART_Transmit>
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	3301      	adds	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	2b17      	cmp	r3, #23
 8001640:	f77f af57 	ble.w	80014f2 <SecondCommand+0x3a>
            }
        }

		timeEnd_s = HAL_GetTick();
 8001644:	f001 f8fc 	bl	8002840 <HAL_GetTick>
 8001648:	61f8      	str	r0, [r7, #28]
		timeDiff_s = timeEnd_s - timeStart_s;
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	61bb      	str	r3, [r7, #24]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", timeDiff_s), 1000);
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4936      	ldr	r1, [pc, #216]	; (8001730 <SecondCommand+0x278>)
 8001656:	4829      	ldr	r0, [pc, #164]	; (80016fc <SecondCommand+0x244>)
 8001658:	f00e fa62 	bl	800fb20 <siprintf>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001664:	4925      	ldr	r1, [pc, #148]	; (80016fc <SecondCommand+0x244>)
 8001666:	4826      	ldr	r0, [pc, #152]	; (8001700 <SecondCommand+0x248>)
 8001668:	f004 f9ac 	bl	80059c4 <HAL_UART_Transmit>



		if(tofCount == NUM_SENSOR){
 800166c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001670:	2b18      	cmp	r3, #24
 8001672:	f040 80a6 	bne.w	80017c2 <SecondCommand+0x30a>
		aiRun(in_data,out_data);
 8001676:	492f      	ldr	r1, [pc, #188]	; (8001734 <SecondCommand+0x27c>)
 8001678:	4828      	ldr	r0, [pc, #160]	; (800171c <SecondCommand+0x264>)
 800167a:	f7ff fcdb 	bl	8001034 <aiRun>
		out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <SecondCommand+0x27c>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SecondCommand+0x280>)
 800168e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <SecondCommand+0x280>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800169c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <SecondCommand+0x280>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <SecondCommand+0x27c>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
		out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <SecondCommand+0x27c>)
 80016ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80016be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <SecondCommand+0x284>)
 80016c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <SecondCommand+0x284>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <SecondCommand+0x284>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <SecondCommand+0x27c>)
 80016ee:	edc3 7a01 	vstr	s15, [r3, #4]
		for(int k=0; k<4;k++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f6:	e03c      	b.n	8001772 <SecondCommand+0x2ba>
 80016f8:	080126c0 	.word	0x080126c0
 80016fc:	2000227c 	.word	0x2000227c
 8001700:	200021f4 	.word	0x200021f4
 8001704:	2aaaaaab 	.word	0x2aaaaaab
 8001708:	20000018 	.word	0x20000018
 800170c:	20002324 	.word	0x20002324
 8001710:	200048a4 	.word	0x200048a4
 8001714:	20002300 	.word	0x20002300
 8001718:	200048a8 	.word	0x200048a8
 800171c:	20002100 	.word	0x20002100
 8001720:	080126dc 	.word	0x080126dc
 8001724:	2000001c 	.word	0x2000001c
 8001728:	2000007c 	.word	0x2000007c
 800172c:	080126e4 	.word	0x080126e4
 8001730:	080126d0 	.word	0x080126d0
 8001734:	20002160 	.word	0x20002160
 8001738:	200000dc 	.word	0x200000dc
 800173c:	200000e4 	.word	0x200000e4
	        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <SecondCommand+0x348>)
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe ff2c 	bl	80005a8 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	492b      	ldr	r1, [pc, #172]	; (8001804 <SecondCommand+0x34c>)
 8001756:	482c      	ldr	r0, [pc, #176]	; (8001808 <SecondCommand+0x350>)
 8001758:	f00e f9e2 	bl	800fb20 <siprintf>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001764:	4928      	ldr	r1, [pc, #160]	; (8001808 <SecondCommand+0x350>)
 8001766:	4829      	ldr	r0, [pc, #164]	; (800180c <SecondCommand+0x354>)
 8001768:	f004 f92c 	bl	80059c4 <HAL_UART_Transmit>
		for(int k=0; k<4;k++){
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	3301      	adds	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	2b03      	cmp	r3, #3
 8001776:	dde3      	ble.n	8001740 <SecondCommand+0x288>
		}
		float sqSum= out_data[3]*out_data[3] + out_data[4]*out_data[4];
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <SecondCommand+0x348>)
 800177a:	ed93 7a03 	vldr	s14, [r3, #12]
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <SecondCommand+0x348>)
 8001780:	edd3 7a03 	vldr	s15, [r3, #12]
 8001784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <SecondCommand+0x348>)
 800178a:	edd3 6a04 	vldr	s13, [r3, #16]
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <SecondCommand+0x348>)
 8001790:	edd3 7a04 	vldr	s15, [r3, #16]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	edc7 7a05 	vstr	s15, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 80017a0:	6978      	ldr	r0, [r7, #20]
 80017a2:	f7fe ff01 	bl	80005a8 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4916      	ldr	r1, [pc, #88]	; (8001804 <SecondCommand+0x34c>)
 80017ac:	4816      	ldr	r0, [pc, #88]	; (8001808 <SecondCommand+0x350>)
 80017ae:	f00e f9b7 	bl	800fb20 <siprintf>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	4913      	ldr	r1, [pc, #76]	; (8001808 <SecondCommand+0x350>)
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <SecondCommand+0x354>)
 80017be:	f004 f901 	bl	80059c4 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 80017c2:	4913      	ldr	r1, [pc, #76]	; (8001810 <SecondCommand+0x358>)
 80017c4:	4810      	ldr	r0, [pc, #64]	; (8001808 <SecondCommand+0x350>)
 80017c6:	f00e f9ab 	bl	800fb20 <siprintf>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	490d      	ldr	r1, [pc, #52]	; (8001808 <SecondCommand+0x350>)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <SecondCommand+0x354>)
 80017d4:	f004 f8f6 	bl	80059c4 <HAL_UART_Transmit>
		timeEnd_a = HAL_GetTick();
 80017d8:	f001 f832 	bl	8002840 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]
		timeDiff_a = timeEnd_a - timeStart_a;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	60fb      	str	r3, [r7, #12]
    for (int count =0; count <100;count ++){
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	3301      	adds	r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	2b63      	cmp	r3, #99	; 0x63
 80017f0:	f77f ae76 	ble.w	80014e0 <SecondCommand+0x28>

    }

}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3738      	adds	r7, #56	; 0x38
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20002160 	.word	0x20002160
 8001804:	080126dc 	.word	0x080126dc
 8001808:	2000227c 	.word	0x2000227c
 800180c:	200021f4 	.word	0x200021f4
 8001810:	080126d8 	.word	0x080126d8

08001814 <ThirdCommand>:

void ThirdCommand(){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 800181a:	496f      	ldr	r1, [pc, #444]	; (80019d8 <ThirdCommand+0x1c4>)
 800181c:	486f      	ldr	r0, [pc, #444]	; (80019dc <ThirdCommand+0x1c8>)
 800181e:	f00e f97f 	bl	800fb20 <siprintf>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	496c      	ldr	r1, [pc, #432]	; (80019dc <ThirdCommand+0x1c8>)
 800182c:	486c      	ldr	r0, [pc, #432]	; (80019e0 <ThirdCommand+0x1cc>)
 800182e:	f004 f8c9 	bl	80059c4 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	e02e      	b.n	8001896 <ThirdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001838:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <ThirdCommand+0x1d0>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe feb0 	bl	80005a8 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4966      	ldr	r1, [pc, #408]	; (80019e8 <ThirdCommand+0x1d4>)
 800184e:	4863      	ldr	r0, [pc, #396]	; (80019dc <ThirdCommand+0x1c8>)
 8001850:	f00e f966 	bl	800fb20 <siprintf>
 8001854:	4603      	mov	r3, r0
 8001856:	b29a      	uxth	r2, r3
 8001858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185c:	495f      	ldr	r1, [pc, #380]	; (80019dc <ThirdCommand+0x1c8>)
 800185e:	4860      	ldr	r0, [pc, #384]	; (80019e0 <ThirdCommand+0x1cc>)
 8001860:	f004 f8b0 	bl	80059c4 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	425a      	negs	r2, r3
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	f002 0207 	and.w	r2, r2, #7
 8001870:	bf58      	it	pl
 8001872:	4253      	negpl	r3, r2
 8001874:	2b07      	cmp	r3, #7
 8001876:	d10b      	bne.n	8001890 <ThirdCommand+0x7c>
 8001878:	495c      	ldr	r1, [pc, #368]	; (80019ec <ThirdCommand+0x1d8>)
 800187a:	4858      	ldr	r0, [pc, #352]	; (80019dc <ThirdCommand+0x1c8>)
 800187c:	f00e f950 	bl	800fb20 <siprintf>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001888:	4954      	ldr	r1, [pc, #336]	; (80019dc <ThirdCommand+0x1c8>)
 800188a:	4855      	ldr	r0, [pc, #340]	; (80019e0 <ThirdCommand+0x1cc>)
 800188c:	f004 f89a 	bl	80059c4 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b17      	cmp	r3, #23
 800189a:	d9cd      	bls.n	8001838 <ThirdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	e02e      	b.n	8001900 <ThirdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 80018a2:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <ThirdCommand+0x1dc>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe7b 	bl	80005a8 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	494c      	ldr	r1, [pc, #304]	; (80019e8 <ThirdCommand+0x1d4>)
 80018b8:	4848      	ldr	r0, [pc, #288]	; (80019dc <ThirdCommand+0x1c8>)
 80018ba:	f00e f931 	bl	800fb20 <siprintf>
 80018be:	4603      	mov	r3, r0
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	4945      	ldr	r1, [pc, #276]	; (80019dc <ThirdCommand+0x1c8>)
 80018c8:	4845      	ldr	r0, [pc, #276]	; (80019e0 <ThirdCommand+0x1cc>)
 80018ca:	f004 f87b 	bl	80059c4 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	425a      	negs	r2, r3
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	f002 0207 	and.w	r2, r2, #7
 80018da:	bf58      	it	pl
 80018dc:	4253      	negpl	r3, r2
 80018de:	2b07      	cmp	r3, #7
 80018e0:	d10b      	bne.n	80018fa <ThirdCommand+0xe6>
 80018e2:	4942      	ldr	r1, [pc, #264]	; (80019ec <ThirdCommand+0x1d8>)
 80018e4:	483d      	ldr	r0, [pc, #244]	; (80019dc <ThirdCommand+0x1c8>)
 80018e6:	f00e f91b 	bl	800fb20 <siprintf>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	493a      	ldr	r1, [pc, #232]	; (80019dc <ThirdCommand+0x1c8>)
 80018f4:	483a      	ldr	r0, [pc, #232]	; (80019e0 <ThirdCommand+0x1cc>)
 80018f6:	f004 f865 	bl	80059c4 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b17      	cmp	r3, #23
 8001904:	d9cd      	bls.n	80018a2 <ThirdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <ThirdCommand+0x1e0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe4c 	bl	80005a8 <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4934      	ldr	r1, [pc, #208]	; (80019e8 <ThirdCommand+0x1d4>)
 8001916:	4831      	ldr	r0, [pc, #196]	; (80019dc <ThirdCommand+0x1c8>)
 8001918:	f00e f902 	bl	800fb20 <siprintf>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001924:	492d      	ldr	r1, [pc, #180]	; (80019dc <ThirdCommand+0x1c8>)
 8001926:	482e      	ldr	r0, [pc, #184]	; (80019e0 <ThirdCommand+0x1cc>)
 8001928:	f004 f84c 	bl	80059c4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <ThirdCommand+0x1e0>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe39 	bl	80005a8 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	492b      	ldr	r1, [pc, #172]	; (80019e8 <ThirdCommand+0x1d4>)
 800193c:	4827      	ldr	r0, [pc, #156]	; (80019dc <ThirdCommand+0x1c8>)
 800193e:	f00e f8ef 	bl	800fb20 <siprintf>
 8001942:	4603      	mov	r3, r0
 8001944:	b29a      	uxth	r2, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	4924      	ldr	r1, [pc, #144]	; (80019dc <ThirdCommand+0x1c8>)
 800194c:	4824      	ldr	r0, [pc, #144]	; (80019e0 <ThirdCommand+0x1cc>)
 800194e:	f004 f839 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001952:	4926      	ldr	r1, [pc, #152]	; (80019ec <ThirdCommand+0x1d8>)
 8001954:	4821      	ldr	r0, [pc, #132]	; (80019dc <ThirdCommand+0x1c8>)
 8001956:	f00e f8e3 	bl	800fb20 <siprintf>
 800195a:	4603      	mov	r3, r0
 800195c:	b29a      	uxth	r2, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <ThirdCommand+0x1c8>)
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <ThirdCommand+0x1cc>)
 8001966:	f004 f82d 	bl	80059c4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <ThirdCommand+0x1e4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe1a 	bl	80005a8 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	491b      	ldr	r1, [pc, #108]	; (80019e8 <ThirdCommand+0x1d4>)
 800197a:	4818      	ldr	r0, [pc, #96]	; (80019dc <ThirdCommand+0x1c8>)
 800197c:	f00e f8d0 	bl	800fb20 <siprintf>
 8001980:	4603      	mov	r3, r0
 8001982:	b29a      	uxth	r2, r3
 8001984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001988:	4914      	ldr	r1, [pc, #80]	; (80019dc <ThirdCommand+0x1c8>)
 800198a:	4815      	ldr	r0, [pc, #84]	; (80019e0 <ThirdCommand+0x1cc>)
 800198c:	f004 f81a 	bl	80059c4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <ThirdCommand+0x1e4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fe07 	bl	80005a8 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4912      	ldr	r1, [pc, #72]	; (80019e8 <ThirdCommand+0x1d4>)
 80019a0:	480e      	ldr	r0, [pc, #56]	; (80019dc <ThirdCommand+0x1c8>)
 80019a2:	f00e f8bd 	bl	800fb20 <siprintf>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	490b      	ldr	r1, [pc, #44]	; (80019dc <ThirdCommand+0x1c8>)
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <ThirdCommand+0x1cc>)
 80019b2:	f004 f807 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <ThirdCommand+0x1d8>)
 80019b8:	4808      	ldr	r0, [pc, #32]	; (80019dc <ThirdCommand+0x1c8>)
 80019ba:	f00e f8b1 	bl	800fb20 <siprintf>
 80019be:	4603      	mov	r3, r0
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	4905      	ldr	r1, [pc, #20]	; (80019dc <ThirdCommand+0x1c8>)
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <ThirdCommand+0x1cc>)
 80019ca:	f003 fffb 	bl	80059c4 <HAL_UART_Transmit>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	080126e8 	.word	0x080126e8
 80019dc:	2000227c 	.word	0x2000227c
 80019e0:	200021f4 	.word	0x200021f4
 80019e4:	2000001c 	.word	0x2000001c
 80019e8:	080126dc 	.word	0x080126dc
 80019ec:	080126d8 	.word	0x080126d8
 80019f0:	2000007c 	.word	0x2000007c
 80019f4:	200000dc 	.word	0x200000dc
 80019f8:	200000e4 	.word	0x200000e4

080019fc <FourthCommand>:

void FourthCommand(){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0

    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "only result\r\n"), 100);
 8001a02:	499a      	ldr	r1, [pc, #616]	; (8001c6c <FourthCommand+0x270>)
 8001a04:	489a      	ldr	r0, [pc, #616]	; (8001c70 <FourthCommand+0x274>)
 8001a06:	f00e f88b 	bl	800fb20 <siprintf>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	2364      	movs	r3, #100	; 0x64
 8001a10:	4997      	ldr	r1, [pc, #604]	; (8001c70 <FourthCommand+0x274>)
 8001a12:	4898      	ldr	r0, [pc, #608]	; (8001c74 <FourthCommand+0x278>)
 8001a14:	f003 ffd6 	bl	80059c4 <HAL_UART_Transmit>

    for (int count =0; count <100000;count ++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e11c      	b.n	8001c58 <FourthCommand+0x25c>
    	uint8_t tofCount =0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e07f      	b.n	8001b28 <FourthCommand+0x12c>
    	    uint8_t q = i / 12;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4a93      	ldr	r2, [pc, #588]	; (8001c78 <FourthCommand+0x27c>)
 8001a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a30:	1052      	asrs	r2, r2, #1
 8001a32:	17db      	asrs	r3, r3, #31
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	72fb      	strb	r3, [r7, #11]
    	    uint8_t r = i % 12;
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <FourthCommand+0x27c>)
 8001a3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a40:	1059      	asrs	r1, r3, #1
 8001a42:	17d3      	asrs	r3, r2, #31
 8001a44:	1ac9      	subs	r1, r1, r3
 8001a46:	460b      	mov	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	1ad1      	subs	r1, r2, r3
 8001a50:	460b      	mov	r3, r1
 8001a52:	72bb      	strb	r3, [r7, #10]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	7aba      	ldrb	r2, [r7, #10]
 8001a5c:	2a07      	cmp	r2, #7
 8001a5e:	bf8c      	ite	hi
 8001a60:	2201      	movhi	r2, #1
 8001a62:	2200      	movls	r2, #0
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	4413      	add	r3, r2
 8001a68:	727b      	strb	r3, [r7, #9]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001a6a:	7abb      	ldrb	r3, [r7, #10]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d903      	bls.n	8001a78 <FourthCommand+0x7c>
 8001a70:	7abb      	ldrb	r3, [r7, #10]
 8001a72:	3b08      	subs	r3, #8
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e000      	b.n	8001a7a <FourthCommand+0x7e>
 8001a78:	7abb      	ldrb	r3, [r7, #10]
 8001a7a:	723b      	strb	r3, [r7, #8]
    	    resetTcaDevicesExcept(active_device, tca_addr);
 8001a7c:	7a7b      	ldrb	r3, [r7, #9]
 8001a7e:	497f      	ldr	r1, [pc, #508]	; (8001c7c <FourthCommand+0x280>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fcc9 	bl	8002418 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 8001a86:	7a39      	ldrb	r1, [r7, #8]
 8001a88:	7a7b      	ldrb	r3, [r7, #9]
 8001a8a:	4a7c      	ldr	r2, [pc, #496]	; (8001c7c <FourthCommand+0x280>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fcef 	bl	8002470 <setActiveTcaChannel>
            Dev = &vl53l0x_s[i];
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	4a78      	ldr	r2, [pc, #480]	; (8001c80 <FourthCommand+0x284>)
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a78      	ldr	r2, [pc, #480]	; (8001c84 <FourthCommand+0x288>)
 8001aa2:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 us
 8001aa4:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <FourthCommand+0x288>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4977      	ldr	r1, [pc, #476]	; (8001c88 <FourthCommand+0x28c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f006 fd27 	bl	80084fe <VL53L0X_PerformContinuousRangingMeasurement>

            if (RangingData.RangeStatus == 0) {
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <FourthCommand+0x28c>)
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d134      	bne.n	8001b22 <FourthCommand+0x126>
                float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <FourthCommand+0x290>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a70      	ldr	r2, [pc, #448]	; (8001c88 <FourthCommand+0x28c>)
 8001ac8:	8912      	ldrh	r2, [r2, #8]
 8001aca:	ee07 2a90 	vmov	s15, r2
 8001ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb2c 	bl	8001134 <Kalman_Estimate>
 8001adc:	ed87 0a01 	vstr	s0, [r7, #4]
                in_data[i]=filteredValue;
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	; (8001c90 <FourthCommand+0x294>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	601a      	str	r2, [r3, #0]
                in_data[i]= (filteredValue-Xmean[i])/Xstd[i];
 8001aec:	4a69      	ldr	r2, [pc, #420]	; (8001c94 <FourthCommand+0x298>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001afc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b00:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <FourthCommand+0x29c>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b10:	4a5f      	ldr	r2, [pc, #380]	; (8001c90 <FourthCommand+0x294>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001b1c:	7efb      	ldrb	r3, [r7, #27]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b17      	cmp	r3, #23
 8001b2c:	f77f af7c 	ble.w	8001a28 <FourthCommand+0x2c>
            }
        }

		if(tofCount == NUM_SENSOR){
 8001b30:	7efb      	ldrb	r3, [r7, #27]
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	f040 8082 	bne.w	8001c3c <FourthCommand+0x240>
		aiRun(in_data,out_data);
 8001b38:	4958      	ldr	r1, [pc, #352]	; (8001c9c <FourthCommand+0x2a0>)
 8001b3a:	4855      	ldr	r0, [pc, #340]	; (8001c90 <FourthCommand+0x294>)
 8001b3c:	f7ff fa7a 	bl	8001034 <aiRun>
		out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <FourthCommand+0x2a0>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b4e:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <FourthCommand+0x2a4>)
 8001b50:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b54:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <FourthCommand+0x2a4>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <FourthCommand+0x2a4>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <FourthCommand+0x2a0>)
 8001b76:	edc3 7a00 	vstr	s15, [r3]
		out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <FourthCommand+0x2a0>)
 8001b7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b88:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <FourthCommand+0x2a8>)
 8001b8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <FourthCommand+0x2a8>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ba0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <FourthCommand+0x2a8>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <FourthCommand+0x2a0>)
 8001bb0:	edc3 7a01 	vstr	s15, [r3, #4]
		for(int k=0; k<4;k++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e018      	b.n	8001bec <FourthCommand+0x1f0>
	        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8001bba:	4a38      	ldr	r2, [pc, #224]	; (8001c9c <FourthCommand+0x2a0>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcef 	bl	80005a8 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4936      	ldr	r1, [pc, #216]	; (8001ca8 <FourthCommand+0x2ac>)
 8001bd0:	4827      	ldr	r0, [pc, #156]	; (8001c70 <FourthCommand+0x274>)
 8001bd2:	f00d ffa5 	bl	800fb20 <siprintf>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <FourthCommand+0x274>)
 8001be0:	4824      	ldr	r0, [pc, #144]	; (8001c74 <FourthCommand+0x278>)
 8001be2:	f003 feef 	bl	80059c4 <HAL_UART_Transmit>
		for(int k=0; k<4;k++){
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	3301      	adds	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	dde3      	ble.n	8001bba <FourthCommand+0x1be>
		}
		float sqSum= out_data[3]*out_data[3] + out_data[4]*out_data[4];
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <FourthCommand+0x2a0>)
 8001bf4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <FourthCommand+0x2a0>)
 8001bfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <FourthCommand+0x2a0>)
 8001c04:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <FourthCommand+0x2a0>)
 8001c0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7fe fcc4 	bl	80005a8 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4920      	ldr	r1, [pc, #128]	; (8001ca8 <FourthCommand+0x2ac>)
 8001c26:	4812      	ldr	r0, [pc, #72]	; (8001c70 <FourthCommand+0x274>)
 8001c28:	f00d ff7a 	bl	800fb20 <siprintf>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <FourthCommand+0x274>)
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <FourthCommand+0x278>)
 8001c38:	f003 fec4 	bl	80059c4 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001c3c:	491b      	ldr	r1, [pc, #108]	; (8001cac <FourthCommand+0x2b0>)
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <FourthCommand+0x274>)
 8001c40:	f00d ff6e 	bl	800fb20 <siprintf>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	4909      	ldr	r1, [pc, #36]	; (8001c70 <FourthCommand+0x274>)
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <FourthCommand+0x278>)
 8001c4e:	f003 feb9 	bl	80059c4 <HAL_UART_Transmit>
    for (int count =0; count <100000;count ++){
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <FourthCommand+0x2b4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f77f aede 	ble.w	8001a1e <FourthCommand+0x22>

    }


}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	080126fc 	.word	0x080126fc
 8001c70:	2000227c 	.word	0x2000227c
 8001c74:	200021f4 	.word	0x200021f4
 8001c78:	2aaaaaab 	.word	0x2aaaaaab
 8001c7c:	20000018 	.word	0x20000018
 8001c80:	20002324 	.word	0x20002324
 8001c84:	200048a4 	.word	0x200048a4
 8001c88:	20002300 	.word	0x20002300
 8001c8c:	200048a8 	.word	0x200048a8
 8001c90:	20002100 	.word	0x20002100
 8001c94:	2000001c 	.word	0x2000001c
 8001c98:	2000007c 	.word	0x2000007c
 8001c9c:	20002160 	.word	0x20002160
 8001ca0:	200000dc 	.word	0x200000dc
 8001ca4:	200000e4 	.word	0x200000e4
 8001ca8:	080126dc 	.word	0x080126dc
 8001cac:	080126d8 	.word	0x080126d8
 8001cb0:	0001869f 	.word	0x0001869f

08001cb4 <FifthCommand>:
void FifthCommand(){
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001cc8:	f7ff fa84 	bl	80011d4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001ccc:	f7ff faa8 	bl	8001220 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f000 fd65 	bl	800279e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f82a 	bl	8001d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f000 f8c2 	bl	8001e60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cdc:	f000 facc 	bl	8002278 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001ce0:	f7ff f9ca 	bl	8001078 <MX_I2C1_Init>
  MX_CRC_Init();
 8001ce4:	f000 f89a 	bl	8001e1c <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ce8:	f000 f88c 	bl	8001e04 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  initializeAllSensors(tca_addr, vl53l0x_s, filters);
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <main+0x54>)
 8001cee:	490b      	ldr	r1, [pc, #44]	; (8001d1c <main+0x58>)
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <main+0x5c>)
 8001cf2:	f000 fc35 	bl	8002560 <initializeAllSensors>
  aiInit();
 8001cf6:	f7ff f95d 	bl	8000fb4 <aiInit>
  startMsg();
 8001cfa:	f000 fb23 	bl	8002344 <startMsg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001cfe:	2241      	movs	r2, #65	; 0x41
 8001d00:	4908      	ldr	r1, [pc, #32]	; (8001d24 <main+0x60>)
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <main+0x64>)
 8001d04:	f000 fae8 	bl	80022d8 <ReceiveUartMessage>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f7      	bne.n	8001cfe <main+0x3a>
	  {
	      ProcessCommand(rxMsg);
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <main+0x60>)
 8001d10:	f7ff faca 	bl	80012a8 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001d14:	e7f3      	b.n	8001cfe <main+0x3a>
 8001d16:	bf00      	nop
 8001d18:	200048a8 	.word	0x200048a8
 8001d1c:	20002324 	.word	0x20002324
 8001d20:	20000018 	.word	0x20000018
 8001d24:	200022bc 	.word	0x200022bc
 8001d28:	200021f4 	.word	0x200021f4

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b094      	sub	sp, #80	; 0x50
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	2230      	movs	r2, #48	; 0x30
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00d f98e 	bl	800f05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <SystemClock_Config+0xd0>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <SystemClock_Config+0xd0>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <SystemClock_Config+0xd0>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <SystemClock_Config+0xd4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <SystemClock_Config+0xd4>)
 8001d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <SystemClock_Config+0xd4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d94:	2308      	movs	r3, #8
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001d98:	23d8      	movs	r3, #216	; 0xd8
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fd03 	bl	80047b4 <HAL_RCC_OscConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001db4:	f000 f884 	bl	8001ec0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001db8:	f002 fcac 	bl	8004714 <HAL_PWREx_EnableOverDrive>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001dc2:	f000 f87d 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ddc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2107      	movs	r1, #7
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 ff89 	bl	8004cfc <HAL_RCC_ClockConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001df0:	f000 f866 	bl	8001ec0 <Error_Handler>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3750      	adds	r7, #80	; 0x50
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2025      	movs	r0, #37	; 0x25
 8001e0e:	f000 fe22 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e12:	2025      	movs	r0, #37	; 0x25
 8001e14:	f000 fe3b 	bl	8002a8e <HAL_NVIC_EnableIRQ>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <MX_CRC_Init+0x40>)
 8001e24:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_CRC_Init+0x3c>)
 8001e46:	f000 fe3d 	bl	8002ac4 <HAL_CRC_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001e50:	f000 f836 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200021cc 	.word	0x200021cc
 8001e5c:	40023000 	.word	0x40023000

08001e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_GPIO_Init+0x5c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8001ec8:	4905      	ldr	r1, [pc, #20]	; (8001ee0 <Error_Handler+0x20>)
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <Error_Handler+0x24>)
 8001ecc:	f00d fe28 	bl	800fb20 <siprintf>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	2364      	movs	r3, #100	; 0x64
 8001ed6:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <Error_Handler+0x24>)
 8001ed8:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <Error_Handler+0x28>)
 8001eda:	f003 fd73 	bl	80059c4 <HAL_UART_Transmit>
 8001ede:	e7f3      	b.n	8001ec8 <Error_Handler+0x8>
 8001ee0:	0801270c 	.word	0x0801270c
 8001ee4:	2000227c 	.word	0x2000227c
 8001ee8:	200021f4 	.word	0x200021f4

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_MspInit+0x44>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_MspInit+0x44>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_MspInit+0x44>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_MspInit+0x44>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_MspInit+0x44>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_MspInit+0x44>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_CRC_MspInit+0x38>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10b      	bne.n	8001f5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_CRC_MspInit+0x3c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_CRC_MspInit+0x3c>)
 8001f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_CRC_MspInit+0x3c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023000 	.word	0x40023000
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0aa      	sub	sp, #168	; 0xa8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2284      	movs	r2, #132	; 0x84
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00d f861 	bl	800f05c <memset>
  if(hi2c->Instance==I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <HAL_I2C_MspInit+0xd4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d14c      	bne.n	800203e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 f8c8 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fbe:	f7ff ff7f 	bl	8001ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_I2C_MspInit+0xd8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_I2C_MspInit+0xd8>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_I2C_MspInit+0xd8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ffe:	4619      	mov	r1, r3
 8002000:	4813      	ldr	r0, [pc, #76]	; (8002050 <HAL_I2C_MspInit+0xdc>)
 8002002:	f000 fee9 	bl	8002dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_I2C_MspInit+0xd8>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_I2C_MspInit+0xd8>)
 800200c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_I2C_MspInit+0xd8>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	201f      	movs	r0, #31
 8002024:	f000 fd17 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002028:	201f      	movs	r0, #31
 800202a:	f000 fd30 	bl	8002a8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2020      	movs	r0, #32
 8002034:	f000 fd0f 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002038:	2020      	movs	r0, #32
 800203a:	f000 fd28 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	37a8      	adds	r7, #168	; 0xa8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40005400 	.word	0x40005400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020400 	.word	0x40020400

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0ac      	sub	sp, #176	; 0xb0
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	2284      	movs	r2, #132	; 0x84
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f00c fff1 	bl	800f05c <memset>
  if(huart->Instance==USART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_UART_MspInit+0xf4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d15c      	bne.n	800213e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002084:	2340      	movs	r3, #64	; 0x40
 8002086:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002088:	2300      	movs	r3, #0
 800208a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f859 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800209c:	f7ff ff10 	bl	8001ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	4a29      	ldr	r2, [pc, #164]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020a6:	f043 0310 	orr.w	r3, r3, #16
 80020aa:	6453      	str	r3, [r2, #68]	; 0x44
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	6313      	str	r3, [r2, #48]	; 0x30
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_UART_MspInit+0xf8>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002100:	2307      	movs	r3, #7
 8002102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800210a:	4619      	mov	r1, r3
 800210c:	4810      	ldr	r0, [pc, #64]	; (8002150 <HAL_UART_MspInit+0xfc>)
 800210e:	f000 fe63 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800212c:	2307      	movs	r3, #7
 800212e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002136:	4619      	mov	r1, r3
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <HAL_UART_MspInit+0x100>)
 800213a:	f000 fe4d 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	37b0      	adds	r7, #176	; 0xb0
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40011000 	.word	0x40011000
 800214c:	40023800 	.word	0x40023800
 8002150:	40020400 	.word	0x40020400
 8002154:	40020000 	.word	0x40020000

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f000 fb38 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <I2C1_EV_IRQHandler+0x10>)
 80021b2:	f001 fa37 	bl	8003624 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20002178 	.word	0x20002178

080021c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <I2C1_ER_IRQHandler+0x10>)
 80021c6:	f001 fa47 	bl	8003658 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20002178 	.word	0x20002178

080021d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <USART1_IRQHandler+0x10>)
 80021da:	f003 fd3b 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200021f4 	.word	0x200021f4

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f00c fee0 	bl	800efdc <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20050000 	.word	0x20050000
 8002248:	00000800 	.word	0x00000800
 800224c:	200021f0 	.word	0x200021f0
 8002250:	20004bd8 	.word	0x20004bd8

08002254 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <MX_USART1_UART_Init+0x5c>)
 8002280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 8002284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 800229e:	220c      	movs	r2, #12
 80022a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_USART1_UART_Init+0x58>)
 80022bc:	f003 fb34 	bl	8005928 <HAL_UART_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022c6:	f7ff fdfb 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200021f4 	.word	0x200021f4
 80022d4:	40011000 	.word	0x40011000

080022d8 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80022ea:	f107 0115 	add.w	r1, r7, #21
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	2201      	movs	r2, #1
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f003 fbe8 	bl	8005aca <HAL_UART_Receive>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f4      	bne.n	80022ea <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8002300:	7d7b      	ldrb	r3, [r7, #21]
 8002302:	2b0a      	cmp	r3, #10
 8002304:	d106      	bne.n	8002314 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 8002306:	8afb      	ldrh	r3, [r7, #22]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	4413      	add	r3, r2
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	e012      	b.n	800233a <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 8002314:	8afb      	ldrh	r3, [r7, #22]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4413      	add	r3, r2
 800231a:	7d7a      	ldrb	r2, [r7, #21]
 800231c:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 800231e:	8afb      	ldrh	r3, [r7, #22]
 8002320:	3301      	adds	r3, #1
 8002322:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 8002324:	8afa      	ldrh	r2, [r7, #22]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3de      	bcc.n	80022ea <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 800232c:	8afb      	ldrh	r3, [r7, #22]
 800232e:	3b01      	subs	r3, #1
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4413      	add	r3, r2
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <startMsg>:

void startMsg(){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002348:	492c      	ldr	r1, [pc, #176]	; (80023fc <startMsg+0xb8>)
 800234a:	482d      	ldr	r0, [pc, #180]	; (8002400 <startMsg+0xbc>)
 800234c:	f00d fbe8 	bl	800fb20 <siprintf>
 8002350:	4603      	mov	r3, r0
 8002352:	b29a      	uxth	r2, r3
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	492a      	ldr	r1, [pc, #168]	; (8002400 <startMsg+0xbc>)
 8002358:	482a      	ldr	r0, [pc, #168]	; (8002404 <startMsg+0xc0>)
 800235a:	f003 fb33 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800235e:	4927      	ldr	r1, [pc, #156]	; (80023fc <startMsg+0xb8>)
 8002360:	4827      	ldr	r0, [pc, #156]	; (8002400 <startMsg+0xbc>)
 8002362:	f00d fbdd 	bl	800fb20 <siprintf>
 8002366:	4603      	mov	r3, r0
 8002368:	b29a      	uxth	r2, r3
 800236a:	2364      	movs	r3, #100	; 0x64
 800236c:	4924      	ldr	r1, [pc, #144]	; (8002400 <startMsg+0xbc>)
 800236e:	4825      	ldr	r0, [pc, #148]	; (8002404 <startMsg+0xc0>)
 8002370:	f003 fb28 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 8002374:	4924      	ldr	r1, [pc, #144]	; (8002408 <startMsg+0xc4>)
 8002376:	4822      	ldr	r0, [pc, #136]	; (8002400 <startMsg+0xbc>)
 8002378:	f00d fbd2 	bl	800fb20 <siprintf>
 800237c:	4603      	mov	r3, r0
 800237e:	b29a      	uxth	r2, r3
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	491f      	ldr	r1, [pc, #124]	; (8002400 <startMsg+0xbc>)
 8002384:	481f      	ldr	r0, [pc, #124]	; (8002404 <startMsg+0xc0>)
 8002386:	f003 fb1d 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 800238a:	4920      	ldr	r1, [pc, #128]	; (800240c <startMsg+0xc8>)
 800238c:	481c      	ldr	r0, [pc, #112]	; (8002400 <startMsg+0xbc>)
 800238e:	f00d fbc7 	bl	800fb20 <siprintf>
 8002392:	4603      	mov	r3, r0
 8002394:	b29a      	uxth	r2, r3
 8002396:	2364      	movs	r3, #100	; 0x64
 8002398:	4919      	ldr	r1, [pc, #100]	; (8002400 <startMsg+0xbc>)
 800239a:	481a      	ldr	r0, [pc, #104]	; (8002404 <startMsg+0xc0>)
 800239c:	f003 fb12 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 80023a0:	491b      	ldr	r1, [pc, #108]	; (8002410 <startMsg+0xcc>)
 80023a2:	4817      	ldr	r0, [pc, #92]	; (8002400 <startMsg+0xbc>)
 80023a4:	f00d fbbc 	bl	800fb20 <siprintf>
 80023a8:	4603      	mov	r3, r0
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	2364      	movs	r3, #100	; 0x64
 80023ae:	4914      	ldr	r1, [pc, #80]	; (8002400 <startMsg+0xbc>)
 80023b0:	4814      	ldr	r0, [pc, #80]	; (8002404 <startMsg+0xc0>)
 80023b2:	f003 fb07 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 80023b6:	4917      	ldr	r1, [pc, #92]	; (8002414 <startMsg+0xd0>)
 80023b8:	4811      	ldr	r0, [pc, #68]	; (8002400 <startMsg+0xbc>)
 80023ba:	f00d fbb1 	bl	800fb20 <siprintf>
 80023be:	4603      	mov	r3, r0
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	2364      	movs	r3, #100	; 0x64
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <startMsg+0xbc>)
 80023c6:	480f      	ldr	r0, [pc, #60]	; (8002404 <startMsg+0xc0>)
 80023c8:	f003 fafc 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80023cc:	490b      	ldr	r1, [pc, #44]	; (80023fc <startMsg+0xb8>)
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <startMsg+0xbc>)
 80023d0:	f00d fba6 	bl	800fb20 <siprintf>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	2364      	movs	r3, #100	; 0x64
 80023da:	4909      	ldr	r1, [pc, #36]	; (8002400 <startMsg+0xbc>)
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <startMsg+0xc0>)
 80023de:	f003 faf1 	bl	80059c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80023e2:	4906      	ldr	r1, [pc, #24]	; (80023fc <startMsg+0xb8>)
 80023e4:	4806      	ldr	r0, [pc, #24]	; (8002400 <startMsg+0xbc>)
 80023e6:	f00d fb9b 	bl	800fb20 <siprintf>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	2364      	movs	r3, #100	; 0x64
 80023f0:	4903      	ldr	r1, [pc, #12]	; (8002400 <startMsg+0xbc>)
 80023f2:	4804      	ldr	r0, [pc, #16]	; (8002404 <startMsg+0xc0>)
 80023f4:	f003 fae6 	bl	80059c4 <HAL_UART_Transmit>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08012714 	.word	0x08012714
 8002400:	2000227c 	.word	0x2000227c
 8002404:	200021f4 	.word	0x200021f4
 8002408:	08012754 	.word	0x08012754
 800240c:	08012794 	.word	0x08012794
 8002410:	080127d4 	.word	0x080127d4
 8002414:	08012814 	.word	0x08012814

08002418 <resetTcaDevicesExcept>:
	float Xstd[48] = {1.84552, 1.48231, 0.88235, 1.14766, 1.35136, 1.37877, 1.31405, 1.34979, 2.09637, 1.19606, 1.9971, 1.40785, 1.67254, 1.81214, 1.58725, 1.43326, 1.35542, 1.59694, 1.79312, 2.55519, 2.56928, 2.17124, 2.09336, 1.68093, 1.59378, 1.65623, 1.25722, 1.37048, 1.52434, 1.61955, 1.8085, 2.19229, 2.55473, 2.08254, 1.93683, 1.90604, 1.50199, 1.33379, 1.32529, 1.49702, 1.52882, 1.18115, 1.47583, 2.32719, 1.2934, 1.69155, 1.4315, 1.53544};
	float Fminmax[2]={ 15.92, 167.45 };
	float Zminmax[2]={ 0, 160 };
#endif

void resetTcaDevicesExcept(uint8_t active_device, const uint8_t *tca_addr) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af02      	add	r7, sp, #8
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e015      	b.n	8002456 <resetTcaDevicesExcept+0x3e>
        if (j != active_device) {
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	429a      	cmp	r2, r3
 8002430:	d00e      	beq.n	8002450 <resetTcaDevicesExcept+0x38>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	4413      	add	r3, r2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	b299      	uxth	r1, r3
 8002440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <resetTcaDevicesExcept+0x50>)
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <resetTcaDevicesExcept+0x54>)
 800244c:	f000 ff00 	bl	8003250 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3301      	adds	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d9e6      	bls.n	800242a <resetTcaDevicesExcept+0x12>
        }
    }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20004a88 	.word	0x20004a88
 800246c:	20002178 	.word	0x20002178

08002470 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel, const uint8_t *tca_addr) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
 8002476:	4603      	mov	r3, r0
 8002478:	603a      	str	r2, [r7, #0]
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	460b      	mov	r3, r1
 800247e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	b299      	uxth	r1, r3
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <setActiveTcaChannel+0x3c>)
 8002492:	441a      	add	r2, r3
 8002494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2301      	movs	r3, #1
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <setActiveTcaChannel+0x40>)
 800249e:	f000 fed7 	bl	8003250 <HAL_I2C_Master_Transmit>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000010 	.word	0x20000010
 80024b0:	20002178 	.word	0x20002178

080024b4 <initializeVl53l0x>:

void initializeVl53l0x(VL53L0X_Dev_t *Dev) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	Dev->I2cHandle = &hi2c1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a23      	ldr	r2, [pc, #140]	; (800254c <initializeVl53l0x+0x98>)
 80024c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2252      	movs	r2, #82	; 0x52
 80024c8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	VL53L0X_WaitDeviceBooted( Dev );
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f004 fe53 	bl	8007178 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f004 fb6a 	bl	8006bac <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f004 fccb 	bl	8006e74 <VL53L0X_StaticInit>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80024de:	2101      	movs	r1, #1
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f004 fee7 	bl	80072b4 <VL53L0X_SetDeviceMode>
	VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <initializeVl53l0x+0x9c>)
 80024e8:	491a      	ldr	r1, [pc, #104]	; (8002554 <initializeVl53l0x+0xa0>)
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f005 fb64 	bl	8007bb8 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 80024f0:	4a19      	ldr	r2, [pc, #100]	; (8002558 <initializeVl53l0x+0xa4>)
 80024f2:	491a      	ldr	r1, [pc, #104]	; (800255c <initializeVl53l0x+0xa8>)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f005 ffed 	bl	80084d4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80024fa:	2201      	movs	r2, #1
 80024fc:	2100      	movs	r1, #0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f005 f954 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002504:	2201      	movs	r2, #1
 8002506:	2101      	movs	r1, #1
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f005 f94f 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800250e:	f641 1299 	movw	r2, #6553	; 0x1999
 8002512:	2101      	movs	r1, #1
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f005 f9f9 	bl	800790c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800251a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800251e:	2100      	movs	r1, #0
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f005 f9f3 	bl	800790c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8002526:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f004 ff20 	bl	8007370 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002530:	2212      	movs	r2, #18
 8002532:	2100      	movs	r1, #0
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f004 ff41 	bl	80073bc <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800253a:	220e      	movs	r2, #14
 800253c:	2101      	movs	r1, #1
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f004 ff3c 	bl	80073bc <VL53L0X_SetVcselPulsePeriod>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20002178 	.word	0x20002178
 8002550:	20002322 	.word	0x20002322
 8002554:	20002321 	.word	0x20002321
 8002558:	20002320 	.word	0x20002320
 800255c:	2000231c 	.word	0x2000231c

08002560 <initializeAllSensors>:

void initializeAllSensors(uint8_t *tca_addr, VL53L0X_Dev_t *vl53l0x_s, KalmanFilter *filters) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
    for (int j = 0; j < sizeof(tca_addr)/sizeof(tca_addr[0]); ++j) {
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e011      	b.n	8002596 <initializeAllSensors+0x36>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	b299      	uxth	r1, r3
 8002580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2301      	movs	r3, #1
 8002588:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <initializeAllSensors+0x128>)
 800258a:	4840      	ldr	r0, [pc, #256]	; (800268c <initializeAllSensors+0x12c>)
 800258c:	f000 fe60 	bl	8003250 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr)/sizeof(tca_addr[0]); ++j) {
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3301      	adds	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d9ea      	bls.n	8002572 <initializeAllSensors+0x12>
    }

    for (int i = 0; i < NUM_SENSOR; i++) {
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	e069      	b.n	8002676 <initializeAllSensors+0x116>
        uint8_t q = i / 12;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4a3a      	ldr	r2, [pc, #232]	; (8002690 <initializeAllSensors+0x130>)
 80025a6:	fb82 1203 	smull	r1, r2, r2, r3
 80025aa:	1052      	asrs	r2, r2, #1
 80025ac:	17db      	asrs	r3, r3, #31
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	75fb      	strb	r3, [r7, #23]
        uint8_t r = i % 12;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <initializeAllSensors+0x130>)
 80025b6:	fb83 1302 	smull	r1, r3, r3, r2
 80025ba:	1059      	asrs	r1, r3, #1
 80025bc:	17d3      	asrs	r3, r2, #31
 80025be:	1ac9      	subs	r1, r1, r3
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	1ad1      	subs	r1, r2, r3
 80025ca:	460b      	mov	r3, r1
 80025cc:	75bb      	strb	r3, [r7, #22]
        uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	7dba      	ldrb	r2, [r7, #22]
 80025d6:	2a07      	cmp	r2, #7
 80025d8:	bf8c      	ite	hi
 80025da:	2201      	movhi	r2, #1
 80025dc:	2200      	movls	r2, #0
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	4413      	add	r3, r2
 80025e2:	757b      	strb	r3, [r7, #21]
        uint8_t channel = (r >= 8) ? r - 8 : r;
 80025e4:	7dbb      	ldrb	r3, [r7, #22]
 80025e6:	2b07      	cmp	r3, #7
 80025e8:	d903      	bls.n	80025f2 <initializeAllSensors+0x92>
 80025ea:	7dbb      	ldrb	r3, [r7, #22]
 80025ec:	3b08      	subs	r3, #8
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	e000      	b.n	80025f4 <initializeAllSensors+0x94>
 80025f2:	7dbb      	ldrb	r3, [r7, #22]
 80025f4:	753b      	strb	r3, [r7, #20]

        resetTcaDevicesExcept(active_device, tca_addr);
 80025f6:	7d7b      	ldrb	r3, [r7, #21]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff0c 	bl	8002418 <resetTcaDevicesExcept>
        setActiveTcaChannel(active_device, channel, tca_addr);
 8002600:	7d39      	ldrb	r1, [r7, #20]
 8002602:	7d7b      	ldrb	r3, [r7, #21]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff32 	bl	8002470 <setActiveTcaChannel>

        initializeVl53l0x(&vl53l0x_s[i]);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4413      	add	r3, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff4a 	bl	80024b4 <initializeVl53l0x>
        Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <initializeAllSensors+0x134>)
 8002632:	edd2 7a00 	vldr	s15, [r2]
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <initializeAllSensors+0x138>)
 8002638:	ed92 7a00 	vldr	s14, [r2]
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <initializeAllSensors+0x13c>)
 800263e:	edd2 6a00 	vldr	s13, [r2]
 8002642:	eddf 1a17 	vldr	s3, [pc, #92]	; 80026a0 <initializeAllSensors+0x140>
 8002646:	eeb0 1a66 	vmov.f32	s2, s13
 800264a:	eef0 0a47 	vmov.f32	s1, s14
 800264e:	eeb0 0a67 	vmov.f32	s0, s15
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fd50 	bl	80010f8 <Kalman_Init>

        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r", i), 100);
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4912      	ldr	r1, [pc, #72]	; (80026a4 <initializeAllSensors+0x144>)
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <initializeAllSensors+0x148>)
 800265e:	f00d fa5f 	bl	800fb20 <siprintf>
 8002662:	4603      	mov	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	2364      	movs	r3, #100	; 0x64
 8002668:	490f      	ldr	r1, [pc, #60]	; (80026a8 <initializeAllSensors+0x148>)
 800266a:	4810      	ldr	r0, [pc, #64]	; (80026ac <initializeAllSensors+0x14c>)
 800266c:	f003 f9aa 	bl	80059c4 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	3301      	adds	r3, #1
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b17      	cmp	r3, #23
 800267a:	dd92      	ble.n	80025a2 <initializeAllSensors+0x42>
    }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20004a88 	.word	0x20004a88
 800268c:	20002178 	.word	0x20002178
 8002690:	2aaaaaab 	.word	0x2aaaaaab
 8002694:	20000004 	.word	0x20000004
 8002698:	20000008 	.word	0x20000008
 800269c:	2000000c 	.word	0x2000000c
 80026a0:	00000000 	.word	0x00000000
 80026a4:	08012854 	.word	0x08012854
 80026a8:	2000227c 	.word	0x2000227c
 80026ac:	200021f4 	.word	0x200021f4

080026b0 <excuteVl53l0x>:

void excuteVl53l0x(VL53L0X_Dev_t *Dev,int i) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80026ba:	491e      	ldr	r1, [pc, #120]	; (8002734 <excuteVl53l0x+0x84>)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f005 ff1e 	bl	80084fe <VL53L0X_PerformContinuousRangingMeasurement>
    if (RangingData.RangeStatus == 0) {
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <excuteVl53l0x+0x84>)
 80026c4:	7e1b      	ldrb	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d124      	bne.n	8002714 <excuteVl53l0x+0x64>
        float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4a18      	ldr	r2, [pc, #96]	; (8002738 <excuteVl53l0x+0x88>)
 80026d6:	4413      	add	r3, r2
 80026d8:	4a16      	ldr	r2, [pc, #88]	; (8002734 <excuteVl53l0x+0x84>)
 80026da:	8912      	ldrh	r2, [r2, #8]
 80026dc:	ee07 2a90 	vmov	s15, r2
 80026e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fd23 	bl	8001134 <Kalman_Estimate>
 80026ee:	ed87 0a03 	vstr	s0, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", filteredValue), 100);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7fd ff58 	bl	80005a8 <__aeabi_f2d>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	490f      	ldr	r1, [pc, #60]	; (800273c <excuteVl53l0x+0x8c>)
 80026fe:	4810      	ldr	r0, [pc, #64]	; (8002740 <excuteVl53l0x+0x90>)
 8002700:	f00d fa0e 	bl	800fb20 <siprintf>
 8002704:	4603      	mov	r3, r0
 8002706:	b29a      	uxth	r2, r3
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	490d      	ldr	r1, [pc, #52]	; (8002740 <excuteVl53l0x+0x90>)
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <excuteVl53l0x+0x94>)
 800270e:	f003 f959 	bl	80059c4 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
    }
}
 8002712:	e00a      	b.n	800272a <excuteVl53l0x+0x7a>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <excuteVl53l0x+0x98>)
 8002716:	480a      	ldr	r0, [pc, #40]	; (8002740 <excuteVl53l0x+0x90>)
 8002718:	f00d fa02 	bl	800fb20 <siprintf>
 800271c:	4603      	mov	r3, r0
 800271e:	b29a      	uxth	r2, r3
 8002720:	2364      	movs	r3, #100	; 0x64
 8002722:	4907      	ldr	r1, [pc, #28]	; (8002740 <excuteVl53l0x+0x90>)
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <excuteVl53l0x+0x94>)
 8002726:	f003 f94d 	bl	80059c4 <HAL_UART_Transmit>
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20002300 	.word	0x20002300
 8002738:	200048a8 	.word	0x200048a8
 800273c:	08012864 	.word	0x08012864
 8002740:	2000227c 	.word	0x2000227c
 8002744:	200021f4 	.word	0x200021f4
 8002748:	0801286c 	.word	0x0801286c

0800274c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800274c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002750:	480d      	ldr	r0, [pc, #52]	; (8002788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002752:	490e      	ldr	r1, [pc, #56]	; (800278c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002754:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002758:	e002      	b.n	8002760 <LoopCopyDataInit>

0800275a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800275c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275e:	3304      	adds	r3, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002764:	d3f9      	bcc.n	800275a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002768:	4c0b      	ldr	r4, [pc, #44]	; (8002798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800276c:	e001      	b.n	8002772 <LoopFillZerobss>

0800276e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002770:	3204      	adds	r2, #4

08002772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002774:	d3fb      	bcc.n	800276e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002776:	f7ff fd6d 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277a:	f00c fc35 	bl	800efe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277e:	f7ff faa1 	bl	8001cc4 <main>
  bx  lr    
 8002782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002784:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800278c:	20001a58 	.word	0x20001a58
  ldr r2, =_sidata
 8002790:	0802b454 	.word	0x0802b454
  ldr r2, =_sbss
 8002794:	20001a60 	.word	0x20001a60
  ldr r4, =_ebss
 8002798:	20004bd8 	.word	0x20004bd8

0800279c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC_IRQHandler>

0800279e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a2:	2003      	movs	r0, #3
 80027a4:	f000 f94c 	bl	8002a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a8:	200f      	movs	r0, #15
 80027aa:	f000 f805 	bl	80027b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ae:	f7ff fb9d 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x54>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x58>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f967 	bl	8002aaa <HAL_SYSTICK_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00e      	b.n	8002804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d80a      	bhi.n	8002802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f000 f92f 	bl	8002a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <HAL_InitTick+0x5c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000000 	.word	0x20000000
 8002810:	200000f0 	.word	0x200000f0
 8002814:	200000ec 	.word	0x200000ec

08002818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x20>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x24>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_IncTick+0x24>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	200000f0 	.word	0x200000f0
 800283c:	20004a8c 	.word	0x20004a8c

08002840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_GetTick+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20004a8c 	.word	0x20004a8c

08002858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff ffee 	bl	8002840 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d005      	beq.n	800287e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_Delay+0x44>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800287e:	bf00      	nop
 8002880:	f7ff ffde 	bl	8002840 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	429a      	cmp	r2, r3
 800288e:	d8f7      	bhi.n	8002880 <HAL_Delay+0x28>
  {
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200000f0 	.word	0x200000f0

080028a0 <__NVIC_SetPriorityGrouping>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <__NVIC_SetPriorityGrouping+0x40>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028bc:	4013      	ands	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <__NVIC_SetPriorityGrouping+0x40>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60d3      	str	r3, [r2, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00
 80028e4:	05fa0000 	.word	0x05fa0000

080028e8 <__NVIC_GetPriorityGrouping>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <__NVIC_GetPriorityGrouping+0x18>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	f003 0307 	and.w	r3, r3, #7
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_EnableIRQ>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	2b00      	cmp	r3, #0
 8002914:	db0b      	blt.n	800292e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	f003 021f 	and.w	r2, r3, #31
 800291c:	4907      	ldr	r1, [pc, #28]	; (800293c <__NVIC_EnableIRQ+0x38>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2001      	movs	r0, #1
 8002926:	fa00 f202 	lsl.w	r2, r0, r2
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	; (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0c:	d301      	bcc.n	8002a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00f      	b.n	8002a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <SysTick_Config+0x40>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f7ff ff8e 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <SysTick_Config+0x40>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <SysTick_Config+0x40>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff29 	bl	80028a0 <__NVIC_SetPriorityGrouping>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a68:	f7ff ff3e 	bl	80028e8 <__NVIC_GetPriorityGrouping>
 8002a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff8e 	bl	8002994 <NVIC_EncodePriority>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff5d 	bl	8002940 <__NVIC_SetPriority>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff31 	bl	8002904 <__NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffa2 	bl	80029fc <SysTick_Config>
 8002ab8:	4603      	mov	r3, r0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e054      	b.n	8002b80 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7f5b      	ldrb	r3, [r3, #29]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fa24 	bl	8001f34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_CRC_Init+0xc4>)
 8002b00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0218 	bic.w	r2, r2, #24
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	e00c      	b.n	8002b2e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f834 	bl	8002b8c <HAL_CRCEx_Polynomial_Set>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e028      	b.n	8002b80 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	795b      	ldrb	r3, [r3, #5]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	611a      	str	r2, [r3, #16]
 8002b40:	e004      	b.n	8002b4c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6912      	ldr	r2, [r2, #16]
 8002b4a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	04c11db7 	.word	0x04c11db7

08002b8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b9c:	231f      	movs	r3, #31
 8002b9e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ba0:	bf00      	nop
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	613a      	str	r2, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b18      	cmp	r3, #24
 8002bc4:	d846      	bhi.n	8002c54 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002bc6:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <HAL_CRCEx_Polynomial_Set+0x40>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002c5b 	.word	0x08002c5b
 8002bd0:	08002c55 	.word	0x08002c55
 8002bd4:	08002c55 	.word	0x08002c55
 8002bd8:	08002c55 	.word	0x08002c55
 8002bdc:	08002c55 	.word	0x08002c55
 8002be0:	08002c55 	.word	0x08002c55
 8002be4:	08002c55 	.word	0x08002c55
 8002be8:	08002c55 	.word	0x08002c55
 8002bec:	08002c49 	.word	0x08002c49
 8002bf0:	08002c55 	.word	0x08002c55
 8002bf4:	08002c55 	.word	0x08002c55
 8002bf8:	08002c55 	.word	0x08002c55
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002c55 	.word	0x08002c55
 8002c04:	08002c55 	.word	0x08002c55
 8002c08:	08002c55 	.word	0x08002c55
 8002c0c:	08002c3d 	.word	0x08002c3d
 8002c10:	08002c55 	.word	0x08002c55
 8002c14:	08002c55 	.word	0x08002c55
 8002c18:	08002c55 	.word	0x08002c55
 8002c1c:	08002c55 	.word	0x08002c55
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002c55 	.word	0x08002c55
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c31 	.word	0x08002c31
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d913      	bls.n	8002c5e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c3a:	e010      	b.n	8002c5e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	d90f      	bls.n	8002c62 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c46:	e00c      	b.n	8002c62 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d90b      	bls.n	8002c66 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c52:	e008      	b.n	8002c66 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
      break;
 8002c58:	e006      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e004      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e002      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c66:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 0118 	bic.w	r1, r3, #24
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ca6:	f7ff fdcb 	bl	8002840 <HAL_GetTick>
 8002caa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d008      	beq.n	8002cca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e052      	b.n	8002d70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0216 	bic.w	r2, r2, #22
 8002cd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_DMA_Abort+0x62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0208 	bic.w	r2, r2, #8
 8002d08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1a:	e013      	b.n	8002d44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1c:	f7ff fd90 	bl	8002840 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d90c      	bls.n	8002d44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e015      	b.n	8002d70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e4      	bne.n	8002d1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	223f      	movs	r2, #63	; 0x3f
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d004      	beq.n	8002d96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00c      	b.n	8002db0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dca:	b2db      	uxtb	r3, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e175      	b.n	80030e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f040 8164 	bne.w	80030de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d005      	beq.n	8002e2e <HAL_GPIO_Init+0x56>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d130      	bne.n	8002e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0201 	and.w	r2, r3, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d017      	beq.n	8002ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d123      	bne.n	8002f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	69b9      	ldr	r1, [r7, #24]
 8002f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80be 	beq.w	80030de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a65      	ldr	r2, [pc, #404]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f7a:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_GPIO_Init+0x328>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_GPIO_Init+0x32c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d037      	beq.n	8003016 <HAL_GPIO_Init+0x23e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_GPIO_Init+0x330>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_GPIO_Init+0x23a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a56      	ldr	r2, [pc, #344]	; (800310c <HAL_GPIO_Init+0x334>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <HAL_GPIO_Init+0x236>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a55      	ldr	r2, [pc, #340]	; (8003110 <HAL_GPIO_Init+0x338>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d025      	beq.n	800300a <HAL_GPIO_Init+0x232>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a54      	ldr	r2, [pc, #336]	; (8003114 <HAL_GPIO_Init+0x33c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_GPIO_Init+0x22e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a53      	ldr	r2, [pc, #332]	; (8003118 <HAL_GPIO_Init+0x340>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x22a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_GPIO_Init+0x344>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x226>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_GPIO_Init+0x348>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x222>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a50      	ldr	r2, [pc, #320]	; (8003124 <HAL_GPIO_Init+0x34c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x21e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4f      	ldr	r2, [pc, #316]	; (8003128 <HAL_GPIO_Init+0x350>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x21a>
 8002fee:	2309      	movs	r3, #9
 8002ff0:	e012      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	e010      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e00e      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e00c      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e00a      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003002:	2305      	movs	r3, #5
 8003004:	e008      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003006:	2304      	movs	r3, #4
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x240>
 800300a:	2303      	movs	r3, #3
 800300c:	e004      	b.n	8003018 <HAL_GPIO_Init+0x240>
 800300e:	2302      	movs	r3, #2
 8003010:	e002      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003016:	2300      	movs	r3, #0
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f002 0203 	and.w	r2, r2, #3
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4093      	lsls	r3, r2
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003028:	4935      	ldr	r1, [pc, #212]	; (8003100 <HAL_GPIO_Init+0x328>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_GPIO_Init+0x354>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305a:	4a34      	ldr	r2, [pc, #208]	; (800312c <HAL_GPIO_Init+0x354>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_GPIO_Init+0x354>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_GPIO_Init+0x354>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_GPIO_Init+0x354>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_GPIO_Init+0x354>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_GPIO_Init+0x354>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <HAL_GPIO_Init+0x354>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3301      	adds	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	f67f ae86 	bls.w	8002df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40013800 	.word	0x40013800
 8003104:	40020000 	.word	0x40020000
 8003108:	40020400 	.word	0x40020400
 800310c:	40020800 	.word	0x40020800
 8003110:	40020c00 	.word	0x40020c00
 8003114:	40021000 	.word	0x40021000
 8003118:	40021400 	.word	0x40021400
 800311c:	40021800 	.word	0x40021800
 8003120:	40021c00 	.word	0x40021c00
 8003124:	40022000 	.word	0x40022000
 8003128:	40022400 	.word	0x40022400
 800312c:	40013c00 	.word	0x40013c00

08003130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe ff0c 	bl	8001f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003180:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003190:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	e006      	b.n	80031b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d104      	bne.n	80031ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_I2C_Init+0x11c>)
 80031d6:	430b      	orrs	r3, r1
 80031d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69d9      	ldr	r1, [r3, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	02008000 	.word	0x02008000

08003250 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	460b      	mov	r3, r1
 800325e:	817b      	strh	r3, [r7, #10]
 8003260:	4613      	mov	r3, r2
 8003262:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	f040 80da 	bne.w	8003426 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2C_Master_Transmit+0x30>
 800327c:	2302      	movs	r3, #2
 800327e:	e0d3      	b.n	8003428 <HAL_I2C_Master_Transmit+0x1d8>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003288:	f7ff fada 	bl	8002840 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2319      	movs	r3, #25
 8003294:	2201      	movs	r2, #1
 8003296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fefb 	bl	8004096 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0be      	b.n	8003428 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2221      	movs	r2, #33	; 0x21
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2210      	movs	r2, #16
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	893a      	ldrh	r2, [r7, #8]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2bff      	cmp	r3, #255	; 0xff
 80032da:	d90e      	bls.n	80032fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_I2C_Master_Transmit+0x1e0>)
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f001 f8e6 	bl	80044c4 <I2C_TransferConfig>
 80032f8:	e06c      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	4b48      	ldr	r3, [pc, #288]	; (8003430 <HAL_I2C_Master_Transmit+0x1e0>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f001 f8d5 	bl	80044c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800331a:	e05b      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6a39      	ldr	r1, [r7, #32]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fef8 	bl	8004116 <I2C_WaitOnTXISFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e07b      	b.n	8003428 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d034      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x184>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d130      	bne.n	80033d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fe8a 	bl	8004096 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e04d      	b.n	8003428 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2bff      	cmp	r3, #255	; 0xff
 8003394:	d90e      	bls.n	80033b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	2300      	movs	r3, #0
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f001 f889 	bl	80044c4 <I2C_TransferConfig>
 80033b2:	e00f      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f001 f878 	bl	80044c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d19e      	bne.n	800331c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	6a39      	ldr	r1, [r7, #32]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fed7 	bl	8004196 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e01a      	b.n	8003428 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2220      	movs	r2, #32
 80033f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_I2C_Master_Transmit+0x1e4>)
 8003406:	400b      	ands	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	80002000 	.word	0x80002000
 8003434:	fe00e800 	.word	0xfe00e800

08003438 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	461a      	mov	r2, r3
 8003444:	460b      	mov	r3, r1
 8003446:	817b      	strh	r3, [r7, #10]
 8003448:	4613      	mov	r3, r2
 800344a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	f040 80db 	bne.w	8003610 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2C_Master_Receive+0x30>
 8003464:	2302      	movs	r3, #2
 8003466:	e0d4      	b.n	8003612 <HAL_I2C_Master_Receive+0x1da>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003470:	f7ff f9e6 	bl	8002840 <HAL_GetTick>
 8003474:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2319      	movs	r3, #25
 800347c:	2201      	movs	r2, #1
 800347e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fe07 	bl	8004096 <I2C_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0bf      	b.n	8003612 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2222      	movs	r2, #34	; 0x22
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2210      	movs	r2, #16
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	893a      	ldrh	r2, [r7, #8]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2bff      	cmp	r3, #255	; 0xff
 80034c2:	d90e      	bls.n	80034e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	22ff      	movs	r2, #255	; 0xff
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	8979      	ldrh	r1, [r7, #10]
 80034d2:	4b52      	ldr	r3, [pc, #328]	; (800361c <HAL_I2C_Master_Receive+0x1e4>)
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fff2 	bl	80044c4 <I2C_TransferConfig>
 80034e0:	e06d      	b.n	80035be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	8979      	ldrh	r1, [r7, #10]
 80034f4:	4b49      	ldr	r3, [pc, #292]	; (800361c <HAL_I2C_Master_Receive+0x1e4>)
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 ffe1 	bl	80044c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003502:	e05c      	b.n	80035be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6a39      	ldr	r1, [r7, #32]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fe81 	bl	8004210 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e07c      	b.n	8003612 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d034      	beq.n	80035be <HAL_I2C_Master_Receive+0x186>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	d130      	bne.n	80035be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2200      	movs	r2, #0
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fd95 	bl	8004096 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e04d      	b.n	8003612 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2bff      	cmp	r3, #255	; 0xff
 800357e:	d90e      	bls.n	800359e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	b2da      	uxtb	r2, r3
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 ff94 	bl	80044c4 <I2C_TransferConfig>
 800359c:	e00f      	b.n	80035be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 ff83 	bl	80044c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d19d      	bne.n	8003504 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	6a39      	ldr	r1, [r7, #32]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fde2 	bl	8004196 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e01a      	b.n	8003612 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2220      	movs	r2, #32
 80035e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_I2C_Master_Receive+0x1e8>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	80002400 	.word	0x80002400
 8003620:	fe00e800 	.word	0xfe00e800

08003624 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
  }
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	09db      	lsrs	r3, r3, #7
 8003680:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800369c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0a9b      	lsrs	r3, r3, #10
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	09db      	lsrs	r3, r3, #7
 80036ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	0a5b      	lsrs	r3, r3, #9
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	09db      	lsrs	r3, r3, #7
 80036dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0202 	orr.w	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 030b 	and.w	r3, r3, #11
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800370a:	68f9      	ldr	r1, [r7, #12]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb89 	bl	8003e24 <I2C_ITError>
  }
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
 800374e:	4613      	mov	r3, r2
 8003750:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <I2C_Slave_ISR_IT+0x24>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0ec      	b.n	8003998 <I2C_Slave_ISR_IT+0x1fe>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80037de:	6939      	ldr	r1, [r7, #16]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f9bf 	bl	8003b64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04d      	beq.n	800388e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d047      	beq.n	800388e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d128      	bne.n	800385a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b28      	cmp	r3, #40	; 0x28
 8003812:	d108      	bne.n	8003826 <I2C_Slave_ISR_IT+0x8c>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800381a:	d104      	bne.n	8003826 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800381c:	6939      	ldr	r1, [r7, #16]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 faaa 	bl	8003d78 <I2C_ITListenCplt>
 8003824:	e032      	b.n	800388c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b29      	cmp	r3, #41	; 0x29
 8003830:	d10e      	bne.n	8003850 <I2C_Slave_ISR_IT+0xb6>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003838:	d00a      	beq.n	8003850 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fbe5 	bl	8004012 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f92d 	bl	8003aa8 <I2C_ITSlaveSeqCplt>
 800384e:	e01d      	b.n	800388c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003858:	e096      	b.n	8003988 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <I2C_Slave_ISR_IT+0xe4>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387a:	f040 8085 	bne.w	8003988 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	4619      	mov	r1, r3
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 facd 	bl	8003e24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800388a:	e07d      	b.n	8003988 <I2C_Slave_ISR_IT+0x1ee>
 800388c:	e07c      	b.n	8003988 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d030      	beq.n	80038fc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02a      	beq.n	80038fc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d018      	beq.n	80038e2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d14f      	bne.n	800398c <I2C_Slave_ISR_IT+0x1f2>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038f2:	d04b      	beq.n	800398c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f8d7 	bl	8003aa8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80038fa:	e047      	b.n	800398c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	08db      	lsrs	r3, r3, #3
 800390c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003914:	6939      	ldr	r1, [r7, #16]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f842 	bl	80039a0 <I2C_ITAddrCplt>
 800391c:	e037      	b.n	800398e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d031      	beq.n	800398e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02b      	beq.n	800398e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d018      	beq.n	8003972 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003970:	e00d      	b.n	800398e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003978:	d002      	beq.n	8003980 <I2C_Slave_ISR_IT+0x1e6>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f891 	bl	8003aa8 <I2C_ITSlaveSeqCplt>
 8003986:	e002      	b.n	800398e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800398c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039b6:	2b28      	cmp	r3, #40	; 0x28
 80039b8:	d16a      	bne.n	8003a90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80039d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80039f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d138      	bne.n	8003a70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	09db      	lsrs	r3, r3, #7
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	89bb      	ldrh	r3, [r7, #12]
 8003a06:	4053      	eors	r3, r2
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f003 0306 	and.w	r3, r3, #6
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11c      	bne.n	8003a4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d13b      	bne.n	8003aa0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2208      	movs	r2, #8
 8003a34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a3e:	89ba      	ldrh	r2, [r7, #12]
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fe7c 	bl	8003742 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a4a:	e029      	b.n	8003aa0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003a4c:	893b      	ldrh	r3, [r7, #8]
 8003a4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fd67 	bl	8004528 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a62:	89ba      	ldrh	r2, [r7, #12]
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fe6a 	bl	8003742 <HAL_I2C_AddrCallback>
}
 8003a6e:	e017      	b.n	8003aa0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fd57 	bl	8004528 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a82:	89ba      	ldrh	r2, [r7, #12]
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fe5a 	bl	8003742 <HAL_I2C_AddrCallback>
}
 8003a8e:	e007      	b.n	8003aa0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2208      	movs	r2, #8
 8003a96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	0b9b      	lsrs	r3, r3, #14
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e00d      	b.n	8003afa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0bdb      	lsrs	r3, r3, #15
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b29      	cmp	r3, #41	; 0x29
 8003b04:	d112      	bne.n	8003b2c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2228      	movs	r2, #40	; 0x28
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b14:	2101      	movs	r1, #1
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fd06 	bl	8004528 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fdf8 	bl	800371a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b2a:	e017      	b.n	8003b5c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b2a      	cmp	r3, #42	; 0x2a
 8003b36:	d111      	bne.n	8003b5c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2228      	movs	r2, #40	; 0x28
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2222      	movs	r2, #34	; 0x22
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b46:	2102      	movs	r1, #2
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fced 	bl	8004528 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fde9 	bl	800372e <HAL_I2C_SlaveRxCpltCallback>
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2220      	movs	r2, #32
 8003b88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b21      	cmp	r3, #33	; 0x21
 8003b8e:	d002      	beq.n	8003b96 <I2C_ITSlaveCplt+0x32>
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b29      	cmp	r3, #41	; 0x29
 8003b94:	d108      	bne.n	8003ba8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b96:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fcc4 	bl	8004528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2221      	movs	r2, #33	; 0x21
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba6:	e00d      	b.n	8003bc4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b22      	cmp	r3, #34	; 0x22
 8003bac:	d002      	beq.n	8003bb4 <I2C_ITSlaveCplt+0x50>
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb2:	d107      	bne.n	8003bc4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bb4:	f248 0102 	movw	r1, #32770	; 0x8002
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fcb5 	bl	8004528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2222      	movs	r2, #34	; 0x22
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <I2C_ITSlaveCplt+0x20c>)
 8003be0:	400b      	ands	r3, r1
 8003be2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fa14 	bl	8004012 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	0b9b      	lsrs	r3, r3, #14
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d013      	beq.n	8003c1e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d020      	beq.n	8003c50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c1c:	e018      	b.n	8003c50 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	0bdb      	lsrs	r3, r3, #15
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d012      	beq.n	8003c50 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8a7 	bl	8003e24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b28      	cmp	r3, #40	; 0x28
 8003ce0:	d141      	bne.n	8003d66 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ce2:	6979      	ldr	r1, [r7, #20]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f847 	bl	8003d78 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cea:	e03c      	b.n	8003d66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf4:	d014      	beq.n	8003d20 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff fed6 	bl	8003aa8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <I2C_ITSlaveCplt+0x210>)
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fd20 	bl	800375e <HAL_I2C_ListenCpltCallback>
}
 8003d1e:	e022      	b.n	8003d66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b22      	cmp	r3, #34	; 0x22
 8003d2a:	d10e      	bne.n	8003d4a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fcf3 	bl	800372e <HAL_I2C_SlaveRxCpltCallback>
}
 8003d48:	e00d      	b.n	8003d66 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fcda 	bl	800371a <HAL_I2C_SlaveTxCpltCallback>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	fe00e800 	.word	0xfe00e800
 8003d74:	ffff0000 	.word	0xffff0000

08003d78 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <I2C_ITListenCplt+0xa8>)
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d022      	beq.n	8003df6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003df6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fb94 	bl	8004528 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2210      	movs	r2, #16
 8003e06:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fca4 	bl	800375e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	ffff0000 	.word	0xffff0000

08003e24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a5d      	ldr	r2, [pc, #372]	; (8003fb8 <I2C_ITError+0x194>)
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b28      	cmp	r3, #40	; 0x28
 8003e5a:	d005      	beq.n	8003e68 <I2C_ITError+0x44>
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b29      	cmp	r3, #41	; 0x29
 8003e60:	d002      	beq.n	8003e68 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b2a      	cmp	r3, #42	; 0x2a
 8003e66:	d10b      	bne.n	8003e80 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e68:	2103      	movs	r1, #3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fb5c 	bl	8004528 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2228      	movs	r2, #40	; 0x28
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a50      	ldr	r2, [pc, #320]	; (8003fbc <I2C_ITError+0x198>)
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7e:	e011      	b.n	8003ea4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e80:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fb4f 	bl	8004528 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b60      	cmp	r3, #96	; 0x60
 8003e94:	d003      	beq.n	8003e9e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d039      	beq.n	8003f26 <I2C_ITError+0x102>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b11      	cmp	r3, #17
 8003eb6:	d002      	beq.n	8003ebe <I2C_ITError+0x9a>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b21      	cmp	r3, #33	; 0x21
 8003ebc:	d133      	bne.n	8003f26 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ecc:	d107      	bne.n	8003ede <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003edc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe ff6a 	bl	8002dbc <HAL_DMA_GetState>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d017      	beq.n	8003f1e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4a33      	ldr	r2, [pc, #204]	; (8003fc0 <I2C_ITError+0x19c>)
 8003ef4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe ff38 	bl	8002d78 <HAL_DMA_Abort_IT>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d04d      	beq.n	8003faa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f1c:	e045      	b.n	8003faa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f850 	bl	8003fc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f24:	e041      	b.n	8003faa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d039      	beq.n	8003fa2 <I2C_ITError+0x17e>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b12      	cmp	r3, #18
 8003f32:	d002      	beq.n	8003f3a <I2C_ITError+0x116>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b22      	cmp	r3, #34	; 0x22
 8003f38:	d133      	bne.n	8003fa2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f48:	d107      	bne.n	8003f5a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe ff2c 	bl	8002dbc <HAL_DMA_GetState>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d017      	beq.n	8003f9a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <I2C_ITError+0x19c>)
 8003f70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fefa 	bl	8002d78 <HAL_DMA_Abort_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f98:	e009      	b.n	8003fae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f812 	bl	8003fc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fa0:	e005      	b.n	8003fae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f80e 	bl	8003fc4 <I2C_TreatErrorCallback>
  }
}
 8003fa8:	e002      	b.n	8003fb0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fae:	bf00      	nop
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	ffff0000 	.word	0xffff0000
 8003fbc:	0800379b 	.word	0x0800379b
 8003fc0:	0800405b 	.word	0x0800405b

08003fc4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d10e      	bne.n	8003ff6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fbc9 	bl	8003786 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff4:	e009      	b.n	800400a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fbb4 	bl	8003772 <HAL_I2C_ErrorCallback>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b02      	cmp	r3, #2
 8004026:	d103      	bne.n	8004030 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d007      	beq.n	800404e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	619a      	str	r2, [r3, #24]
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	2200      	movs	r2, #0
 8004076:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	2200      	movs	r2, #0
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff ff9b 	bl	8003fc4 <I2C_TreatErrorCallback>
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a6:	e022      	b.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d01e      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe fbc6 	bl	8002840 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d113      	bne.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00f      	b.n	800410e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	429a      	cmp	r2, r3
 800410a:	d0cd      	beq.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004122:	e02c      	b.n	800417e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f8eb 	bl	8004304 <I2C_IsErrorOccurred>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e02a      	b.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d01e      	beq.n	800417e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004140:	f7fe fb7e 	bl	8002840 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d113      	bne.n	800417e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e007      	b.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b02      	cmp	r3, #2
 800418a:	d1cb      	bne.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a2:	e028      	b.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f8ab 	bl	8004304 <I2C_IsErrorOccurred>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e026      	b.n	8004206 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7fe fb42 	bl	8002840 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d113      	bne.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e007      	b.n	8004206 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b20      	cmp	r3, #32
 8004202:	d1cf      	bne.n	80041a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800421c:	e064      	b.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f86e 	bl	8004304 <I2C_IsErrorOccurred>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e062      	b.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b20      	cmp	r3, #32
 800423e:	d138      	bne.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d105      	bne.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e04e      	b.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d107      	bne.n	8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2210      	movs	r2, #16
 800426e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2204      	movs	r2, #4
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
 8004276:	e002      	b.n	800427e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2220      	movs	r2, #32
 8004284:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004292:	400b      	ands	r3, r1
 8004294:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e022      	b.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fe fac5 	bl	8002840 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10f      	bne.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e007      	b.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d193      	bne.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	fe00e800 	.word	0xfe00e800

08004304 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d068      	beq.n	8004402 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2210      	movs	r2, #16
 8004336:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004338:	e049      	b.n	80043ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d045      	beq.n	80043ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe fa7d 	bl	8002840 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_IsErrorOccurred+0x54>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d13a      	bne.n	80043ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800436a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d121      	bne.n	80043c0 <I2C_IsErrorOccurred+0xbc>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004382:	d01d      	beq.n	80043c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	2b20      	cmp	r3, #32
 8004388:	d01a      	beq.n	80043c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004398:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800439a:	f7fe fa51 	bl	8002840 <HAL_GetTick>
 800439e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a0:	e00e      	b.n	80043c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043a2:	f7fe fa4d 	bl	8002840 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b19      	cmp	r3, #25
 80043ae:	d907      	bls.n	80043c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	f043 0320 	orr.w	r3, r3, #32
 80043b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80043be:	e006      	b.n	80043ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d1e9      	bne.n	80043a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d003      	beq.n	80043e4 <I2C_IsErrorOccurred+0xe0>
 80043dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0aa      	beq.n	800433a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2220      	movs	r2, #32
 80043f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f043 0304 	orr.w	r3, r3, #4
 80043fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f043 0308 	orr.w	r3, r3, #8
 800443c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004468:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01c      	beq.n	80044b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fdca 	bl	8004012 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <I2C_IsErrorOccurred+0x1bc>)
 800448a:	400b      	ands	r3, r1
 800448c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80044b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3728      	adds	r7, #40	; 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	fe00e800 	.word	0xfe00e800

080044c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	4613      	mov	r3, r2
 80044d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044d6:	897b      	ldrh	r3, [r7, #10]
 80044d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044dc:	7a7b      	ldrb	r3, [r7, #9]
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	0d5b      	lsrs	r3, r3, #21
 80044fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <I2C_TransferConfig+0x60>)
 8004504:	430b      	orrs	r3, r1
 8004506:	43db      	mvns	r3, r3
 8004508:	ea02 0103 	and.w	r1, r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	03ff63ff 	.word	0x03ff63ff

08004528 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004538:	887b      	ldrh	r3, [r7, #2]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00f      	beq.n	8004562 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004548:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004556:	2b28      	cmp	r3, #40	; 0x28
 8004558:	d003      	beq.n	8004562 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004560:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004572:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004580:	2b28      	cmp	r3, #40	; 0x28
 8004582:	d003      	beq.n	800458c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800458a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800458c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004590:	2b00      	cmp	r3, #0
 8004592:	da03      	bge.n	800459c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800459a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800459c:	887b      	ldrh	r3, [r7, #2]
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d103      	bne.n	80045aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d103      	bne.n	80045b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f043 0320 	orr.w	r3, r3, #32
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d103      	bne.n	80045c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43da      	mvns	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d138      	bne.n	800466c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004604:	2302      	movs	r3, #2
 8004606:	e032      	b.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d139      	bne.n	8004704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800469a:	2302      	movs	r3, #2
 800469c:	e033      	b.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	4b23      	ldr	r3, [pc, #140]	; (80047ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a22      	ldr	r2, [pc, #136]	; (80047ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_PWREx_EnableOverDrive+0x98>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004742:	f7fe f87d 	bl	8002840 <HAL_GetTick>
 8004746:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004748:	e009      	b.n	800475e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800474a:	f7fe f879 	bl	8002840 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004758:	d901      	bls.n	800475e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e022      	b.n	80047a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800475e:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d1ee      	bne.n	800474a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004778:	f7fe f862 	bl	8002840 <HAL_GetTick>
 800477c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800477e:	e009      	b.n	8004794 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004780:	f7fe f85e 	bl	8002840 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800478e:	d901      	bls.n	8004794 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e007      	b.n	80047a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a0:	d1ee      	bne.n	8004780 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000

080047b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047bc:	2300      	movs	r3, #0
 80047be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e291      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8087 	beq.w	80048e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d8:	4b96      	ldr	r3, [pc, #600]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d00c      	beq.n	80047fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e4:	4b93      	ldr	r3, [pc, #588]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d112      	bne.n	8004816 <HAL_RCC_OscConfig+0x62>
 80047f0:	4b90      	ldr	r3, [pc, #576]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fc:	d10b      	bne.n	8004816 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fe:	4b8d      	ldr	r3, [pc, #564]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d06c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x130>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d168      	bne.n	80048e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e26b      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x7a>
 8004820:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a83      	ldr	r2, [pc, #524]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e02e      	b.n	800488c <HAL_RCC_OscConfig+0xd8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x9c>
 8004836:	4b7f      	ldr	r3, [pc, #508]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a7e      	ldr	r2, [pc, #504]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800483c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b7c      	ldr	r3, [pc, #496]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7b      	ldr	r2, [pc, #492]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0xd8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0xc0>
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a75      	ldr	r2, [pc, #468]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a72      	ldr	r2, [pc, #456]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0xd8>
 8004874:	4b6f      	ldr	r3, [pc, #444]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6e      	ldr	r2, [pc, #440]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a6b      	ldr	r2, [pc, #428]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd ffd4 	bl	8002840 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fd ffd0 	bl	8002840 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e21f      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0xe8>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd ffc0 	bl	8002840 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fd ffbc 	bl	8002840 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e20b      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	4b57      	ldr	r3, [pc, #348]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x110>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d069      	beq.n	80049c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fe:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d11c      	bne.n	8004944 <HAL_RCC_OscConfig+0x190>
 800490a:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d116      	bne.n	8004944 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_RCC_OscConfig+0x17a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d001      	beq.n	800492e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e1df      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	493d      	ldr	r1, [pc, #244]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	e040      	b.n	80049c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d023      	beq.n	8004994 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a38      	ldr	r2, [pc, #224]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd ff72 	bl	8002840 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004960:	f7fd ff6e 	bl	8002840 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1bd      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4929      	ldr	r1, [pc, #164]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
 8004992:	e018      	b.n	80049c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd ff4e 	bl	8002840 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a8:	f7fd ff4a 	bl	8002840 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e199      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d038      	beq.n	8004a44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d019      	beq.n	8004a0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80049dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fd ff2b 	bl	8002840 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ee:	f7fd ff27 	bl	8002840 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e176      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x23a>
 8004a0c:	e01a      	b.n	8004a44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_RCC_OscConfig+0x280>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fd ff11 	bl	8002840 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a22:	f7fd ff0d 	bl	8002840 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d903      	bls.n	8004a38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e15c      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
 8004a34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a38:	4b91      	ldr	r3, [pc, #580]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1ee      	bne.n	8004a22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a4 	beq.w	8004b9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a52:	4b8b      	ldr	r3, [pc, #556]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5e:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a87      	ldr	r2, [pc, #540]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b85      	ldr	r3, [pc, #532]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7a:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x4d0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d118      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a86:	4b7f      	ldr	r3, [pc, #508]	; (8004c84 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7e      	ldr	r2, [pc, #504]	; (8004c84 <HAL_RCC_OscConfig+0x4d0>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a92:	f7fd fed5 	bl	8002840 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9a:	f7fd fed1 	bl	8002840 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b64      	cmp	r3, #100	; 0x64
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e120      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aac:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x4d0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_OscConfig+0x31a>
 8004ac0:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	e02d      	b.n	8004b2a <HAL_RCC_OscConfig+0x376>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x33c>
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a69      	ldr	r2, [pc, #420]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	4b67      	ldr	r3, [pc, #412]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a66      	ldr	r2, [pc, #408]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004ae8:	f023 0304 	bic.w	r3, r3, #4
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	e01c      	b.n	8004b2a <HAL_RCC_OscConfig+0x376>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	d10c      	bne.n	8004b12 <HAL_RCC_OscConfig+0x35e>
 8004af8:	4b61      	ldr	r3, [pc, #388]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a60      	ldr	r2, [pc, #384]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	4b5e      	ldr	r3, [pc, #376]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	4a5d      	ldr	r2, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b10:	e00b      	b.n	8004b2a <HAL_RCC_OscConfig+0x376>
 8004b12:	4b5b      	ldr	r3, [pc, #364]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a5a      	ldr	r2, [pc, #360]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	4b58      	ldr	r3, [pc, #352]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d015      	beq.n	8004b5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd fe85 	bl	8002840 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd fe81 	bl	8002840 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e0ce      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ee      	beq.n	8004b3a <HAL_RCC_OscConfig+0x386>
 8004b5c:	e014      	b.n	8004b88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fe6f 	bl	8002840 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fd fe6b 	bl	8002840 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0b8      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7c:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1ee      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8e:	4b3c      	ldr	r3, [pc, #240]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80a4 	beq.w	8004cec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba4:	4b36      	ldr	r3, [pc, #216]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d06b      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d149      	bne.n	8004c4c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb8:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fe3c 	bl	8002840 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fd fe38 	bl	8002840 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e087      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	3b01      	subs	r3, #1
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c16:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fd fe0c 	bl	8002840 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fd fe08 	bl	8002840 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e057      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x478>
 8004c4a:	e04f      	b.n	8004cec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fdf2 	bl	8002840 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd fdee 	bl	8002840 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e03d      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4ac>
 8004c7e:	e035      	b.n	8004cec <HAL_RCC_OscConfig+0x538>
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x544>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d121      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0d0      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d910      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	4965      	ldr	r1, [pc, #404]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0b8      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d74:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	494d      	ldr	r1, [pc, #308]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d040      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e073      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06b      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4936      	ldr	r1, [pc, #216]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fd fd26 	bl	8002840 <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fd fd22 	bl	8002840 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e053      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d210      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 020f 	bic.w	r2, r3, #15
 8004e36:	4922      	ldr	r1, [pc, #136]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e032      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4916      	ldr	r1, [pc, #88]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e8e:	f000 f821 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e92:	4602      	mov	r2, r0
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	490a      	ldr	r1, [pc, #40]	; (8004ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ea0:	5ccb      	ldrb	r3, [r1, r3]
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1d0>)
 8004ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1d4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd fc82 	bl	80027b8 <HAL_InitTick>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023c00 	.word	0x40023c00
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	080128a4 	.word	0x080128a4
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	200000ec 	.word	0x200000ec

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b094      	sub	sp, #80	; 0x50
 8004eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eec:	4b79      	ldr	r3, [pc, #484]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d00d      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x40>
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	f200 80e1 	bhi.w	80050c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x34>
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d003      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f06:	e0db      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f08:	4b73      	ldr	r3, [pc, #460]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0c:	e0db      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f0e:	4b73      	ldr	r3, [pc, #460]	; (80050dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f12:	e0d8      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f14:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2a:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	2200      	movs	r2, #0
 8004f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3e:	2300      	movs	r3, #0
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
 8004f42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	f04f 0000 	mov.w	r0, #0
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	0159      	lsls	r1, r3, #5
 8004f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f58:	0150      	lsls	r0, r2, #5
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4621      	mov	r1, r4
 8004f60:	1a51      	subs	r1, r2, r1
 8004f62:	6139      	str	r1, [r7, #16]
 8004f64:	4629      	mov	r1, r5
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f78:	4659      	mov	r1, fp
 8004f7a:	018b      	lsls	r3, r1, #6
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f82:	4651      	mov	r1, sl
 8004f84:	018a      	lsls	r2, r1, #6
 8004f86:	4651      	mov	r1, sl
 8004f88:	ebb2 0801 	subs.w	r8, r2, r1
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	4699      	mov	r9, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	eb18 0303 	adds.w	r3, r8, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	eb49 0303 	adc.w	r3, r9, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	024b      	lsls	r3, r1, #9
 8004fca:	4621      	mov	r1, r4
 8004fcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	024a      	lsls	r2, r1, #9
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fda:	2200      	movs	r2, #0
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fe4:	f7fb fe10 	bl	8000c08 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff0:	e058      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	2300      	movs	r3, #0
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
 8005008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	f04f 0000 	mov.w	r0, #0
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800501e:	0150      	lsls	r0, r2, #5
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4641      	mov	r1, r8
 8005026:	ebb2 0a01 	subs.w	sl, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800503c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005044:	ebb2 040a 	subs.w	r4, r2, sl
 8005048:	eb63 050b 	sbc.w	r5, r3, fp
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	00eb      	lsls	r3, r5, #3
 8005056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505a:	00e2      	lsls	r2, r4, #3
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	4643      	mov	r3, r8
 8005062:	18e3      	adds	r3, r4, r3
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	464b      	mov	r3, r9
 8005068:	eb45 0303 	adc.w	r3, r5, r3
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800507a:	4629      	mov	r1, r5
 800507c:	028b      	lsls	r3, r1, #10
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005084:	4621      	mov	r1, r4
 8005086:	028a      	lsls	r2, r1, #10
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2200      	movs	r2, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	61fa      	str	r2, [r7, #28]
 8005094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005098:	f7fb fdb6 	bl	8000c08 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	3301      	adds	r3, #1
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80050b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050be:	e002      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3750      	adds	r7, #80	; 0x50
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	00f42400 	.word	0x00f42400
 80050dc:	007a1200 	.word	0x007a1200

080050e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e4:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000000 	.word	0x20000000

080050f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050fc:	f7ff fff0 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0a9b      	lsrs	r3, r3, #10
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4903      	ldr	r1, [pc, #12]	; (800511c <HAL_RCC_GetPCLK1Freq+0x24>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	080128b4 	.word	0x080128b4

08005120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005124:	f7ff ffdc 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0b5b      	lsrs	r3, r3, #13
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4903      	ldr	r1, [pc, #12]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40023800 	.word	0x40023800
 8005144:	080128b4 	.word	0x080128b4

08005148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d012      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005170:	4b69      	ldr	r3, [pc, #420]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4a68      	ldr	r2, [pc, #416]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800517a:	6093      	str	r3, [r2, #8]
 800517c:	4b66      	ldr	r3, [pc, #408]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005184:	4964      	ldr	r1, [pc, #400]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005186:	4313      	orrs	r3, r2
 8005188:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d017      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051a2:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b0:	4959      	ldr	r1, [pc, #356]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c0:	d101      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d017      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051de:	4b4e      	ldr	r3, [pc, #312]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	494a      	ldr	r1, [pc, #296]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051fc:	d101      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800521a:	2301      	movs	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 808b 	beq.w	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800522c:	4b3a      	ldr	r3, [pc, #232]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	4a39      	ldr	r2, [pc, #228]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005236:	6413      	str	r3, [r2, #64]	; 0x40
 8005238:	4b37      	ldr	r3, [pc, #220]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005244:	4b35      	ldr	r3, [pc, #212]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a34      	ldr	r2, [pc, #208]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800524a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005250:	f7fd faf6 	bl	8002840 <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005258:	f7fd faf2 	bl	8002840 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e357      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800526a:	4b2c      	ldr	r3, [pc, #176]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005276:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d035      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d02e      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005294:	4b20      	ldr	r3, [pc, #128]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052bc:	4b16      	ldr	r3, [pc, #88]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d114      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fd faba 	bl	8002840 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	e00a      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d0:	f7fd fab6 	bl	8002840 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e319      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ee      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052fe:	d111      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800530e:	400b      	ands	r3, r1
 8005310:	4901      	ldr	r1, [pc, #4]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
 8005316:	e00b      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005318:	40023800 	.word	0x40023800
 800531c:	40007000 	.word	0x40007000
 8005320:	0ffffcff 	.word	0x0ffffcff
 8005324:	4baa      	ldr	r3, [pc, #680]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4aa9      	ldr	r2, [pc, #676]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	4ba7      	ldr	r3, [pc, #668]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	49a4      	ldr	r1, [pc, #656]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533e:	4313      	orrs	r3, r2
 8005340:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d010      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800534e:	4ba0      	ldr	r3, [pc, #640]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005354:	4a9e      	ldr	r2, [pc, #632]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800535a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800535e:	4b9c      	ldr	r3, [pc, #624]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005360:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	4999      	ldr	r1, [pc, #612]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800537c:	4b94      	ldr	r3, [pc, #592]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538a:	4991      	ldr	r1, [pc, #580]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800539e:	4b8c      	ldr	r3, [pc, #560]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ac:	4988      	ldr	r1, [pc, #544]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053c0:	4b83      	ldr	r3, [pc, #524]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	4980      	ldr	r1, [pc, #512]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053e2:	4b7b      	ldr	r3, [pc, #492]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4977      	ldr	r1, [pc, #476]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005404:	4b72      	ldr	r3, [pc, #456]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f023 0203 	bic.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	496f      	ldr	r1, [pc, #444]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005426:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f023 020c 	bic.w	r2, r3, #12
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	4966      	ldr	r1, [pc, #408]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005448:	4b61      	ldr	r3, [pc, #388]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	495e      	ldr	r1, [pc, #376]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800546a:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005478:	4955      	ldr	r1, [pc, #340]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800548c:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	494d      	ldr	r1, [pc, #308]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054ae:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	4944      	ldr	r1, [pc, #272]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054d0:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054de:	493c      	ldr	r1, [pc, #240]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	4933      	ldr	r1, [pc, #204]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005522:	492b      	ldr	r1, [pc, #172]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d011      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005544:	4922      	ldr	r1, [pc, #136]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005566:	2301      	movs	r3, #1
 8005568:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005576:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005584:	4912      	ldr	r1, [pc, #72]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a8:	4909      	ldr	r1, [pc, #36]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d006      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80d9 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a01      	ldr	r2, [pc, #4]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ce:	e001      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80055d0:	40023800 	.word	0x40023800
 80055d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d6:	f7fd f933 	bl	8002840 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055de:	f7fd f92f 	bl	8002840 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d901      	bls.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e194      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f0:	4b6c      	ldr	r3, [pc, #432]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d021      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11d      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800561e:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005624:	0e1b      	lsrs	r3, r3, #24
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	019a      	lsls	r2, r3, #6
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	061b      	lsls	r3, r3, #24
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	071b      	lsls	r3, r3, #28
 8005644:	4957      	ldr	r1, [pc, #348]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02e      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005676:	d129      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005678:	4b4a      	ldr	r3, [pc, #296]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568c:	0f1b      	lsrs	r3, r3, #28
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	019a      	lsls	r2, r3, #6
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	071b      	lsls	r3, r3, #28
 80056ac:	493d      	ldr	r1, [pc, #244]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056b4:	4b3b      	ldr	r3, [pc, #236]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ba:	f023 021f 	bic.w	r2, r3, #31
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	3b01      	subs	r3, #1
 80056c4:	4937      	ldr	r1, [pc, #220]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01d      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056de:	0e1b      	lsrs	r3, r3, #24
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056e6:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ec:	0f1b      	lsrs	r3, r3, #28
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	019a      	lsls	r2, r3, #6
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	431a      	orrs	r2, r3
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	431a      	orrs	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	071b      	lsls	r3, r3, #28
 800570c:	4925      	ldr	r1, [pc, #148]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d011      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	019a      	lsls	r2, r3, #6
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	061b      	lsls	r3, r3, #24
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	071b      	lsls	r3, r3, #28
 800573c:	4919      	ldr	r1, [pc, #100]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800574a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005750:	f7fd f876 	bl	8002840 <HAL_GetTick>
 8005754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005756:	e008      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005758:	f7fd f872 	bl	8002840 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	; 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e0d7      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 80cd 	bne.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578a:	f7fd f859 	bl	8002840 <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005790:	e00a      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005792:	f7fd f855 	bl	8002840 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b64      	cmp	r3, #100	; 0x64
 800579e:	d903      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0ba      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80057a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a8:	4b5e      	ldr	r3, [pc, #376]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b4:	d0ed      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d02e      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d12a      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057de:	4b51      	ldr	r3, [pc, #324]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057ec:	4b4d      	ldr	r3, [pc, #308]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	0f1b      	lsrs	r3, r3, #28
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	019a      	lsls	r2, r3, #6
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	061b      	lsls	r3, r3, #24
 800580c:	431a      	orrs	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	071b      	lsls	r3, r3, #28
 8005812:	4944      	ldr	r1, [pc, #272]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800581a:	4b42      	ldr	r3, [pc, #264]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800581c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005820:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	3b01      	subs	r3, #1
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	493d      	ldr	r1, [pc, #244]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d022      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005848:	d11d      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800584a:	4b36      	ldr	r3, [pc, #216]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	0e1b      	lsrs	r3, r3, #24
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005858:	4b32      	ldr	r3, [pc, #200]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	0f1b      	lsrs	r3, r3, #28
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	019a      	lsls	r2, r3, #6
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	431a      	orrs	r2, r3
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	071b      	lsls	r3, r3, #28
 800587e:	4929      	ldr	r1, [pc, #164]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d028      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	0e1b      	lsrs	r3, r3, #24
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058a0:	4b20      	ldr	r3, [pc, #128]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	0c1b      	lsrs	r3, r3, #16
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	019a      	lsls	r2, r3, #6
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	431a      	orrs	r2, r3
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	4917      	ldr	r1, [pc, #92]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4911      	ldr	r1, [pc, #68]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a0e      	ldr	r2, [pc, #56]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f0:	f7fc ffa6 	bl	8002840 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f8:	f7fc ffa2 	bl	8002840 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e007      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005916:	d1ef      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800

08005928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e040      	b.n	80059bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc fb82 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2224      	movs	r2, #36	; 0x24
 8005954:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fc66 	bl	8006238 <UART_SetConfig>
 800596c:	4603      	mov	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e022      	b.n	80059bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 febe 	bl	8006700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 ff45 	bl	8006844 <UART_CheckIdleState>
 80059ba:	4603      	mov	r3, r0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d171      	bne.n	8005ac0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_UART_Transmit+0x24>
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e06a      	b.n	8005ac2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2221      	movs	r2, #33	; 0x21
 80059f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fa:	f7fc ff21 	bl	8002840 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a18:	d108      	bne.n	8005a2c <HAL_UART_Transmit+0x68>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e003      	b.n	8005a34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a34:	e02c      	b.n	8005a90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 ff36 	bl	80068b2 <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e038      	b.n	8005ac2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e007      	b.n	8005a7e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1cc      	bne.n	8005a36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 ff03 	bl	80068b2 <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e005      	b.n	8005ac2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b08a      	sub	sp, #40	; 0x28
 8005ace:	af02      	add	r7, sp, #8
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 80b1 	bne.w	8005c48 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Receive+0x28>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e0a9      	b.n	8005c4a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2222      	movs	r2, #34	; 0x22
 8005b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b0c:	f7fc fe98 	bl	8002840 <HAL_GetTick>
 8005b10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	88fa      	ldrh	r2, [r7, #6]
 8005b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d10e      	bne.n	8005b4a <HAL_UART_Receive+0x80>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <HAL_UART_Receive+0x76>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b3e:	e02d      	b.n	8005b9c <HAL_UART_Receive+0xd2>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	22ff      	movs	r2, #255	; 0xff
 8005b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b48:	e028      	b.n	8005b9c <HAL_UART_Receive+0xd2>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <HAL_UART_Receive+0xa4>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <HAL_UART_Receive+0x9a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b62:	e01b      	b.n	8005b9c <HAL_UART_Receive+0xd2>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	227f      	movs	r2, #127	; 0x7f
 8005b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b6c:	e016      	b.n	8005b9c <HAL_UART_Receive+0xd2>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b76:	d10d      	bne.n	8005b94 <HAL_UART_Receive+0xca>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_UART_Receive+0xc0>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	227f      	movs	r2, #127	; 0x7f
 8005b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b88:	e008      	b.n	8005b9c <HAL_UART_Receive+0xd2>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	223f      	movs	r2, #63	; 0x3f
 8005b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b92:	e003      	b.n	8005b9c <HAL_UART_Receive+0xd2>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ba2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bac:	d108      	bne.n	8005bc0 <HAL_UART_Receive+0xf6>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	e003      	b.n	8005bc8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005bc8:	e032      	b.n	8005c30 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fe6c 	bl	80068b2 <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e032      	b.n	8005c4a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10c      	bne.n	8005c04 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	8a7b      	ldrh	r3, [r7, #18]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	3302      	adds	r3, #2
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e00c      	b.n	8005c1e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	8a7b      	ldrh	r3, [r7, #18]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	4013      	ands	r3, r2
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1c6      	bne.n	8005bca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e000      	b.n	8005c4a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
  }
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b0ba      	sub	sp, #232	; 0xe8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c82:	4013      	ands	r3, r2
 8005c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d115      	bne.n	8005cbc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00f      	beq.n	8005cbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d009      	beq.n	8005cbc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8297 	beq.w	80061e0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
      }
      return;
 8005cba:	e291      	b.n	80061e0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8117 	beq.w	8005ef4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cd6:	4b85      	ldr	r3, [pc, #532]	; (8005eec <HAL_UART_IRQHandler+0x298>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 810a 	beq.w	8005ef4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d011      	beq.n	8005d10 <HAL_UART_IRQHandler+0xbc>
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d011      	beq.n	8005d40 <HAL_UART_IRQHandler+0xec>
 8005d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d36:	f043 0204 	orr.w	r2, r3, #4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d011      	beq.n	8005d70 <HAL_UART_IRQHandler+0x11c>
 8005d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d66:	f043 0202 	orr.w	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d017      	beq.n	8005dac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2208      	movs	r2, #8
 8005d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da2:	f043 0208 	orr.w	r2, r3, #8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d012      	beq.n	8005dde <HAL_UART_IRQHandler+0x18a>
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 81fd 	beq.w	80061e4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d005      	beq.n	8005e36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04f      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fe01 	bl	8006a3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d141      	bne.n	8005ece <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3308      	adds	r3, #8
 8005e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1d9      	bne.n	8005e4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d013      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <HAL_UART_IRQHandler+0x29c>)
 8005ea4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fc ff64 	bl	8002d78 <HAL_DMA_Abort_IT>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e00f      	b.n	8005ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9a0 	bl	800620c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	e00b      	b.n	8005ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f99c 	bl	800620c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	e007      	b.n	8005ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f998 	bl	800620c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005ee4:	e17e      	b.n	80061e4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee6:	bf00      	nop
    return;
 8005ee8:	e17c      	b.n	80061e4 <HAL_UART_IRQHandler+0x590>
 8005eea:	bf00      	nop
 8005eec:	04000120 	.word	0x04000120
 8005ef0:	08006b07 	.word	0x08006b07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	f040 814c 	bne.w	8006196 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8145 	beq.w	8006196 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 813e 	beq.w	8006196 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2210      	movs	r2, #16
 8005f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	f040 80b6 	bne.w	800609e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8150 	beq.w	80061e8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f52:	429a      	cmp	r2, r3
 8005f54:	f080 8148 	bcs.w	80061e8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6c:	f000 8086 	beq.w	800607c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1da      	bne.n	8005f70 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e1      	bne.n	8005fba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800601a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800601c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e3      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800604a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604c:	f023 0310 	bic.w	r3, r3, #16
 8006050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800605e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006060:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800606c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e4      	bne.n	800603c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006076:	4618      	mov	r0, r3
 8006078:	f7fc fe0e 	bl	8002c98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800608e:	b29b      	uxth	r3, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	b29b      	uxth	r3, r3
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8c2 	bl	8006220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800609c:	e0a4      	b.n	80061e8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8096 	beq.w	80061ec <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80060c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8091 	beq.w	80061ec <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e4      	bne.n	80060ca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	623b      	str	r3, [r7, #32]
   return(result);
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006124:	633a      	str	r2, [r7, #48]	; 0x30
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800612a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e3      	bne.n	8006100 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60fb      	str	r3, [r7, #12]
   return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	69b9      	ldr	r1, [r7, #24]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	617b      	str	r3, [r7, #20]
   return(result);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e4      	bne.n	800614c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f846 	bl	8006220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006194:	e02a      	b.n	80061ec <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01c      	beq.n	80061f0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
    }
    return;
 80061be:	e017      	b.n	80061f0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d012      	beq.n	80061f2 <HAL_UART_IRQHandler+0x59e>
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fcaa 	bl	8006b32 <UART_EndTransmit_IT>
    return;
 80061de:	e008      	b.n	80061f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80061e0:	bf00      	nop
 80061e2:	e006      	b.n	80061f2 <HAL_UART_IRQHandler+0x59e>
    return;
 80061e4:	bf00      	nop
 80061e6:	e004      	b.n	80061f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <HAL_UART_IRQHandler+0x59e>
    return;
 80061f0:	bf00      	nop
  }

}
 80061f2:	37e8      	adds	r7, #232	; 0xe8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4ba6      	ldr	r3, [pc, #664]	; (80064fc <UART_SetConfig+0x2c4>)
 8006264:	4013      	ands	r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	6979      	ldr	r1, [r7, #20]
 800626c:	430b      	orrs	r3, r1
 800626e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a94      	ldr	r2, [pc, #592]	; (8006500 <UART_SetConfig+0x2c8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d120      	bne.n	80062f6 <UART_SetConfig+0xbe>
 80062b4:	4b93      	ldr	r3, [pc, #588]	; (8006504 <UART_SetConfig+0x2cc>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d816      	bhi.n	80062f0 <UART_SetConfig+0xb8>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x90>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062e5 	.word	0x080062e5
 80062d0:	080062df 	.word	0x080062df
 80062d4:	080062eb 	.word	0x080062eb
 80062d8:	2301      	movs	r3, #1
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e150      	b.n	8006580 <UART_SetConfig+0x348>
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e14d      	b.n	8006580 <UART_SetConfig+0x348>
 80062e4:	2304      	movs	r3, #4
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e14a      	b.n	8006580 <UART_SetConfig+0x348>
 80062ea:	2308      	movs	r3, #8
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e147      	b.n	8006580 <UART_SetConfig+0x348>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e144      	b.n	8006580 <UART_SetConfig+0x348>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a83      	ldr	r2, [pc, #524]	; (8006508 <UART_SetConfig+0x2d0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d132      	bne.n	8006366 <UART_SetConfig+0x12e>
 8006300:	4b80      	ldr	r3, [pc, #512]	; (8006504 <UART_SetConfig+0x2cc>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b0c      	cmp	r3, #12
 800630c:	d828      	bhi.n	8006360 <UART_SetConfig+0x128>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0xdc>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006349 	.word	0x08006349
 8006318:	08006361 	.word	0x08006361
 800631c:	08006361 	.word	0x08006361
 8006320:	08006361 	.word	0x08006361
 8006324:	08006355 	.word	0x08006355
 8006328:	08006361 	.word	0x08006361
 800632c:	08006361 	.word	0x08006361
 8006330:	08006361 	.word	0x08006361
 8006334:	0800634f 	.word	0x0800634f
 8006338:	08006361 	.word	0x08006361
 800633c:	08006361 	.word	0x08006361
 8006340:	08006361 	.word	0x08006361
 8006344:	0800635b 	.word	0x0800635b
 8006348:	2300      	movs	r3, #0
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e118      	b.n	8006580 <UART_SetConfig+0x348>
 800634e:	2302      	movs	r3, #2
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e115      	b.n	8006580 <UART_SetConfig+0x348>
 8006354:	2304      	movs	r3, #4
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e112      	b.n	8006580 <UART_SetConfig+0x348>
 800635a:	2308      	movs	r3, #8
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e10f      	b.n	8006580 <UART_SetConfig+0x348>
 8006360:	2310      	movs	r3, #16
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e10c      	b.n	8006580 <UART_SetConfig+0x348>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a68      	ldr	r2, [pc, #416]	; (800650c <UART_SetConfig+0x2d4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d120      	bne.n	80063b2 <UART_SetConfig+0x17a>
 8006370:	4b64      	ldr	r3, [pc, #400]	; (8006504 <UART_SetConfig+0x2cc>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800637a:	2b30      	cmp	r3, #48	; 0x30
 800637c:	d013      	beq.n	80063a6 <UART_SetConfig+0x16e>
 800637e:	2b30      	cmp	r3, #48	; 0x30
 8006380:	d814      	bhi.n	80063ac <UART_SetConfig+0x174>
 8006382:	2b20      	cmp	r3, #32
 8006384:	d009      	beq.n	800639a <UART_SetConfig+0x162>
 8006386:	2b20      	cmp	r3, #32
 8006388:	d810      	bhi.n	80063ac <UART_SetConfig+0x174>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <UART_SetConfig+0x15c>
 800638e:	2b10      	cmp	r3, #16
 8006390:	d006      	beq.n	80063a0 <UART_SetConfig+0x168>
 8006392:	e00b      	b.n	80063ac <UART_SetConfig+0x174>
 8006394:	2300      	movs	r3, #0
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e0f2      	b.n	8006580 <UART_SetConfig+0x348>
 800639a:	2302      	movs	r3, #2
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e0ef      	b.n	8006580 <UART_SetConfig+0x348>
 80063a0:	2304      	movs	r3, #4
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e0ec      	b.n	8006580 <UART_SetConfig+0x348>
 80063a6:	2308      	movs	r3, #8
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e0e9      	b.n	8006580 <UART_SetConfig+0x348>
 80063ac:	2310      	movs	r3, #16
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e0e6      	b.n	8006580 <UART_SetConfig+0x348>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a56      	ldr	r2, [pc, #344]	; (8006510 <UART_SetConfig+0x2d8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d120      	bne.n	80063fe <UART_SetConfig+0x1c6>
 80063bc:	4b51      	ldr	r3, [pc, #324]	; (8006504 <UART_SetConfig+0x2cc>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063c6:	2bc0      	cmp	r3, #192	; 0xc0
 80063c8:	d013      	beq.n	80063f2 <UART_SetConfig+0x1ba>
 80063ca:	2bc0      	cmp	r3, #192	; 0xc0
 80063cc:	d814      	bhi.n	80063f8 <UART_SetConfig+0x1c0>
 80063ce:	2b80      	cmp	r3, #128	; 0x80
 80063d0:	d009      	beq.n	80063e6 <UART_SetConfig+0x1ae>
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d810      	bhi.n	80063f8 <UART_SetConfig+0x1c0>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <UART_SetConfig+0x1a8>
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d006      	beq.n	80063ec <UART_SetConfig+0x1b4>
 80063de:	e00b      	b.n	80063f8 <UART_SetConfig+0x1c0>
 80063e0:	2300      	movs	r3, #0
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e0cc      	b.n	8006580 <UART_SetConfig+0x348>
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e0c9      	b.n	8006580 <UART_SetConfig+0x348>
 80063ec:	2304      	movs	r3, #4
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e0c6      	b.n	8006580 <UART_SetConfig+0x348>
 80063f2:	2308      	movs	r3, #8
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e0c3      	b.n	8006580 <UART_SetConfig+0x348>
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e0c0      	b.n	8006580 <UART_SetConfig+0x348>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a44      	ldr	r2, [pc, #272]	; (8006514 <UART_SetConfig+0x2dc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d125      	bne.n	8006454 <UART_SetConfig+0x21c>
 8006408:	4b3e      	ldr	r3, [pc, #248]	; (8006504 <UART_SetConfig+0x2cc>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006416:	d017      	beq.n	8006448 <UART_SetConfig+0x210>
 8006418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800641c:	d817      	bhi.n	800644e <UART_SetConfig+0x216>
 800641e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006422:	d00b      	beq.n	800643c <UART_SetConfig+0x204>
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	d811      	bhi.n	800644e <UART_SetConfig+0x216>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <UART_SetConfig+0x1fe>
 800642e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006432:	d006      	beq.n	8006442 <UART_SetConfig+0x20a>
 8006434:	e00b      	b.n	800644e <UART_SetConfig+0x216>
 8006436:	2300      	movs	r3, #0
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e0a1      	b.n	8006580 <UART_SetConfig+0x348>
 800643c:	2302      	movs	r3, #2
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e09e      	b.n	8006580 <UART_SetConfig+0x348>
 8006442:	2304      	movs	r3, #4
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e09b      	b.n	8006580 <UART_SetConfig+0x348>
 8006448:	2308      	movs	r3, #8
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e098      	b.n	8006580 <UART_SetConfig+0x348>
 800644e:	2310      	movs	r3, #16
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e095      	b.n	8006580 <UART_SetConfig+0x348>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2f      	ldr	r2, [pc, #188]	; (8006518 <UART_SetConfig+0x2e0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d125      	bne.n	80064aa <UART_SetConfig+0x272>
 800645e:	4b29      	ldr	r3, [pc, #164]	; (8006504 <UART_SetConfig+0x2cc>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800646c:	d017      	beq.n	800649e <UART_SetConfig+0x266>
 800646e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006472:	d817      	bhi.n	80064a4 <UART_SetConfig+0x26c>
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006478:	d00b      	beq.n	8006492 <UART_SetConfig+0x25a>
 800647a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647e:	d811      	bhi.n	80064a4 <UART_SetConfig+0x26c>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <UART_SetConfig+0x254>
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006488:	d006      	beq.n	8006498 <UART_SetConfig+0x260>
 800648a:	e00b      	b.n	80064a4 <UART_SetConfig+0x26c>
 800648c:	2301      	movs	r3, #1
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e076      	b.n	8006580 <UART_SetConfig+0x348>
 8006492:	2302      	movs	r3, #2
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e073      	b.n	8006580 <UART_SetConfig+0x348>
 8006498:	2304      	movs	r3, #4
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e070      	b.n	8006580 <UART_SetConfig+0x348>
 800649e:	2308      	movs	r3, #8
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e06d      	b.n	8006580 <UART_SetConfig+0x348>
 80064a4:	2310      	movs	r3, #16
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e06a      	b.n	8006580 <UART_SetConfig+0x348>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1b      	ldr	r2, [pc, #108]	; (800651c <UART_SetConfig+0x2e4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d138      	bne.n	8006526 <UART_SetConfig+0x2ee>
 80064b4:	4b13      	ldr	r3, [pc, #76]	; (8006504 <UART_SetConfig+0x2cc>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064c2:	d017      	beq.n	80064f4 <UART_SetConfig+0x2bc>
 80064c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064c8:	d82a      	bhi.n	8006520 <UART_SetConfig+0x2e8>
 80064ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ce:	d00b      	beq.n	80064e8 <UART_SetConfig+0x2b0>
 80064d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d4:	d824      	bhi.n	8006520 <UART_SetConfig+0x2e8>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <UART_SetConfig+0x2aa>
 80064da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064de:	d006      	beq.n	80064ee <UART_SetConfig+0x2b6>
 80064e0:	e01e      	b.n	8006520 <UART_SetConfig+0x2e8>
 80064e2:	2300      	movs	r3, #0
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e04b      	b.n	8006580 <UART_SetConfig+0x348>
 80064e8:	2302      	movs	r3, #2
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e048      	b.n	8006580 <UART_SetConfig+0x348>
 80064ee:	2304      	movs	r3, #4
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e045      	b.n	8006580 <UART_SetConfig+0x348>
 80064f4:	2308      	movs	r3, #8
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e042      	b.n	8006580 <UART_SetConfig+0x348>
 80064fa:	bf00      	nop
 80064fc:	efff69f3 	.word	0xefff69f3
 8006500:	40011000 	.word	0x40011000
 8006504:	40023800 	.word	0x40023800
 8006508:	40004400 	.word	0x40004400
 800650c:	40004800 	.word	0x40004800
 8006510:	40004c00 	.word	0x40004c00
 8006514:	40005000 	.word	0x40005000
 8006518:	40011400 	.word	0x40011400
 800651c:	40007800 	.word	0x40007800
 8006520:	2310      	movs	r3, #16
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e02c      	b.n	8006580 <UART_SetConfig+0x348>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a72      	ldr	r2, [pc, #456]	; (80066f4 <UART_SetConfig+0x4bc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d125      	bne.n	800657c <UART_SetConfig+0x344>
 8006530:	4b71      	ldr	r3, [pc, #452]	; (80066f8 <UART_SetConfig+0x4c0>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800653a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800653e:	d017      	beq.n	8006570 <UART_SetConfig+0x338>
 8006540:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006544:	d817      	bhi.n	8006576 <UART_SetConfig+0x33e>
 8006546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654a:	d00b      	beq.n	8006564 <UART_SetConfig+0x32c>
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	d811      	bhi.n	8006576 <UART_SetConfig+0x33e>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <UART_SetConfig+0x326>
 8006556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655a:	d006      	beq.n	800656a <UART_SetConfig+0x332>
 800655c:	e00b      	b.n	8006576 <UART_SetConfig+0x33e>
 800655e:	2300      	movs	r3, #0
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e00d      	b.n	8006580 <UART_SetConfig+0x348>
 8006564:	2302      	movs	r3, #2
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e00a      	b.n	8006580 <UART_SetConfig+0x348>
 800656a:	2304      	movs	r3, #4
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e007      	b.n	8006580 <UART_SetConfig+0x348>
 8006570:	2308      	movs	r3, #8
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e004      	b.n	8006580 <UART_SetConfig+0x348>
 8006576:	2310      	movs	r3, #16
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e001      	b.n	8006580 <UART_SetConfig+0x348>
 800657c:	2310      	movs	r3, #16
 800657e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006588:	d15b      	bne.n	8006642 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800658a:	7ffb      	ldrb	r3, [r7, #31]
 800658c:	2b08      	cmp	r3, #8
 800658e:	d828      	bhi.n	80065e2 <UART_SetConfig+0x3aa>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x360>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065cd 	.word	0x080065cd
 80065a4:	080065e3 	.word	0x080065e3
 80065a8:	080065d3 	.word	0x080065d3
 80065ac:	080065e3 	.word	0x080065e3
 80065b0:	080065e3 	.word	0x080065e3
 80065b4:	080065e3 	.word	0x080065e3
 80065b8:	080065db 	.word	0x080065db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065bc:	f7fe fd9c 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 80065c0:	61b8      	str	r0, [r7, #24]
        break;
 80065c2:	e013      	b.n	80065ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c4:	f7fe fdac 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 80065c8:	61b8      	str	r0, [r7, #24]
        break;
 80065ca:	e00f      	b.n	80065ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065cc:	4b4b      	ldr	r3, [pc, #300]	; (80066fc <UART_SetConfig+0x4c4>)
 80065ce:	61bb      	str	r3, [r7, #24]
        break;
 80065d0:	e00c      	b.n	80065ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d2:	f7fe fc7f 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 80065d6:	61b8      	str	r0, [r7, #24]
        break;
 80065d8:	e008      	b.n	80065ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065de:	61bb      	str	r3, [r7, #24]
        break;
 80065e0:	e004      	b.n	80065ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	77bb      	strb	r3, [r7, #30]
        break;
 80065ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d074      	beq.n	80066dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	005a      	lsls	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	441a      	add	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b0f      	cmp	r3, #15
 800660c:	d916      	bls.n	800663c <UART_SetConfig+0x404>
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006614:	d212      	bcs.n	800663c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f023 030f 	bic.w	r3, r3, #15
 800661e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	b29b      	uxth	r3, r3
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	b29a      	uxth	r2, r3
 800662c:	89fb      	ldrh	r3, [r7, #14]
 800662e:	4313      	orrs	r3, r2
 8006630:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	89fa      	ldrh	r2, [r7, #14]
 8006638:	60da      	str	r2, [r3, #12]
 800663a:	e04f      	b.n	80066dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	77bb      	strb	r3, [r7, #30]
 8006640:	e04c      	b.n	80066dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006642:	7ffb      	ldrb	r3, [r7, #31]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d828      	bhi.n	800669a <UART_SetConfig+0x462>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x418>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006675 	.word	0x08006675
 8006654:	0800667d 	.word	0x0800667d
 8006658:	08006685 	.word	0x08006685
 800665c:	0800669b 	.word	0x0800669b
 8006660:	0800668b 	.word	0x0800668b
 8006664:	0800669b 	.word	0x0800669b
 8006668:	0800669b 	.word	0x0800669b
 800666c:	0800669b 	.word	0x0800669b
 8006670:	08006693 	.word	0x08006693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fe fd40 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8006678:	61b8      	str	r0, [r7, #24]
        break;
 800667a:	e013      	b.n	80066a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800667c:	f7fe fd50 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 8006680:	61b8      	str	r0, [r7, #24]
        break;
 8006682:	e00f      	b.n	80066a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006684:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <UART_SetConfig+0x4c4>)
 8006686:	61bb      	str	r3, [r7, #24]
        break;
 8006688:	e00c      	b.n	80066a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668a:	f7fe fc23 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 800668e:	61b8      	str	r0, [r7, #24]
        break;
 8006690:	e008      	b.n	80066a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006696:	61bb      	str	r3, [r7, #24]
        break;
 8006698:	e004      	b.n	80066a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	77bb      	strb	r3, [r7, #30]
        break;
 80066a2:	bf00      	nop
    }

    if (pclk != 0U)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d018      	beq.n	80066dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	085a      	lsrs	r2, r3, #1
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	441a      	add	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b0f      	cmp	r3, #15
 80066c2:	d909      	bls.n	80066d8 <UART_SetConfig+0x4a0>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ca:	d205      	bcs.n	80066d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	e001      	b.n	80066dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40007c00 	.word	0x40007c00
 80066f8:	40023800 	.word	0x40023800
 80066fc:	00f42400 	.word	0x00f42400

08006700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01a      	beq.n	8006816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fe:	d10a      	bne.n	8006816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006854:	f7fb fff4 	bl	8002840 <HAL_GetTick>
 8006858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d10e      	bne.n	8006886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f81b 	bl	80068b2 <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e011      	b.n	80068aa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b09c      	sub	sp, #112	; 0x70
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c2:	e0a7      	b.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ca:	f000 80a3 	beq.w	8006a14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fb ffb7 	bl	8002840 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80068de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d13f      	bne.n	8006964 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f8:	667b      	str	r3, [r7, #100]	; 0x64
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006904:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e6      	bne.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	663b      	str	r3, [r7, #96]	; 0x60
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006936:	64ba      	str	r2, [r7, #72]	; 0x48
 8006938:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800693c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e5      	bne.n	8006916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e068      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d050      	beq.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006980:	d148      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069aa:	637b      	str	r3, [r7, #52]	; 0x34
 80069ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e6      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	613b      	str	r3, [r7, #16]
   return(result);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069de:	623a      	str	r2, [r7, #32]
 80069e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	69f9      	ldr	r1, [r7, #28]
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e010      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f43f af48 	beq.w	80068c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3770      	adds	r7, #112	; 0x70
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b095      	sub	sp, #84	; 0x54
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a64:	643b      	str	r3, [r7, #64]	; 0x40
 8006a66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e6      	bne.n	8006a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d118      	bne.n	8006ae6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f023 0310 	bic.w	r3, r3, #16
 8006ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006afa:	bf00      	nop
 8006afc:	3754      	adds	r7, #84	; 0x54
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fb71 	bl	800620c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b088      	sub	sp, #32
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e6      	bne.n	8006b3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff fb3d 	bl	80061f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7e:	bf00      	nop
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fce1 	bl	800855e <VL53L0X_get_offset_calibration_data_micro_meter>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006bac:	b5b0      	push	{r4, r5, r7, lr}
 8006bae:	b096      	sub	sp, #88	; 0x58
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006bba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2188      	movs	r1, #136	; 0x88
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f004 feda 	bl	800b980 <VL53L0X_WrByte>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006bea:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a9e      	ldr	r2, [pc, #632]	; (8006e6c <VL53L0X_DataInit+0x2c0>)
 8006bf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a9d      	ldr	r2, [pc, #628]	; (8006e70 <VL53L0X_DataInit+0x2c4>)
 8006bfa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006c04:	f107 0310 	add.w	r3, r7, #16
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fac2 	bl	8007194 <VL53L0X_GetDeviceParameters>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006c16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d112      	bne.n	8006c44 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006c22:	2300      	movs	r3, #0
 8006c24:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f103 0410 	add.w	r4, r3, #16
 8006c2c:	f107 0510 	add.w	r5, r7, #16
 8006c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2264      	movs	r2, #100	; 0x64
 8006c48:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006c52:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006c5c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006c66:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c72:	2201      	movs	r2, #1
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f004 fe82 	bl	800b980 <VL53L0X_WrByte>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	21ff      	movs	r1, #255	; 0xff
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f004 fe76 	bl	800b980 <VL53L0X_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f004 fe6a 	bl	800b980 <VL53L0X_WrByte>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006cba:	f107 030f 	add.w	r3, r7, #15
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2191      	movs	r1, #145	; 0x91
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f004 fede 	bl	800ba84 <VL53L0X_RdByte>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f004 fe4c 	bl	800b980 <VL53L0X_WrByte>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	461a      	mov	r2, r3
 8006cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	21ff      	movs	r1, #255	; 0xff
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f004 fe40 	bl	800b980 <VL53L0X_WrByte>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2180      	movs	r1, #128	; 0x80
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f004 fe34 	bl	800b980 <VL53L0X_WrByte>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d26:	2300      	movs	r3, #0
 8006d28:	653b      	str	r3, [r7, #80]	; 0x50
 8006d2a:	e014      	b.n	8006d56 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006d2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d114      	bne.n	8006d5e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fd35 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d52:	3301      	adds	r3, #1
 8006d54:	653b      	str	r3, [r7, #80]	; 0x50
 8006d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	dde7      	ble.n	8006d2c <VL53L0X_DataInit+0x180>
 8006d5c:	e000      	b.n	8006d60 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006d5e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006d60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fd1d 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006d78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d107      	bne.n	8006d90 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006d80:	2200      	movs	r2, #0
 8006d82:	2103      	movs	r1, #3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fd11 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006d90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d107      	bne.n	8006da8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2104      	movs	r1, #4
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fd05 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006da8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d107      	bne.n	8006dc0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006db0:	2200      	movs	r2, #0
 8006db2:	2105      	movs	r1, #5
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fcf9 	bl	80077ac <VL53L0X_SetLimitCheckEnable>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006dc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d108      	bne.n	8006dda <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006dc8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006dcc:	2100      	movs	r1, #0
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fd9c 	bl	800790c <VL53L0X_SetLimitCheckValue>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006dda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006de6:	2101      	movs	r1, #1
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fd8f 	bl	800790c <VL53L0X_SetLimitCheckValue>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006df4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006dfc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006e00:	2102      	movs	r1, #2
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fd82 	bl	800790c <VL53L0X_SetLimitCheckValue>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d107      	bne.n	8006e26 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006e16:	2200      	movs	r2, #0
 8006e18:	2103      	movs	r1, #3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fd76 	bl	800790c <VL53L0X_SetLimitCheckValue>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	22ff      	movs	r2, #255	; 0xff
 8006e32:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f004 fda0 	bl	800b980 <VL53L0X_WrByte>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006e4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006e5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3758      	adds	r7, #88	; 0x58
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bdb0      	pop	{r4, r5, r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	00016b85 	.word	0x00016b85
 8006e70:	000970a4 	.word	0x000970a4

08006e74 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006e74:	b5b0      	push	{r4, r5, r7, lr}
 8006e76:	b09e      	sub	sp, #120	; 0x78
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006e82:	f107 031c 	add.w	r3, r7, #28
 8006e86:	2240      	movs	r2, #64	; 0x40
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f008 f8e6 	bl	800f05c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f002 faa9 	bl	800940a <VL53L0X_get_info_from_device>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006ec4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d80d      	bhi.n	8006ef4 <VL53L0X_StaticInit+0x80>
 8006ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d102      	bne.n	8006ee6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d806      	bhi.n	8006ef4 <VL53L0X_StaticInit+0x80>
 8006ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10e      	bne.n	8006f0c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef0:	2b0c      	cmp	r3, #12
 8006ef2:	d90b      	bls.n	8006f0c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006ef4:	f107 0218 	add.w	r2, r7, #24
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fd28 	bl	8008954 <VL53L0X_perform_ref_spad_management>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006f0a:	e009      	b.n	8006f20 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f10:	461a      	mov	r2, r3
 8006f12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 ff29 	bl	8008d6c <VL53L0X_set_reference_spads>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006f20:	4b94      	ldr	r3, [pc, #592]	; (8007174 <VL53L0X_StaticInit+0x300>)
 8006f22:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006f24:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10f      	bne.n	8006f4c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006f32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006f36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f46:	e001      	b.n	8006f4c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006f48:	4b8a      	ldr	r3, [pc, #552]	; (8007174 <VL53L0X_StaticInit+0x300>)
 8006f4a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006f4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006f54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f003 fdfc 	bl	800ab54 <VL53L0X_load_tuning_settings>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2304      	movs	r3, #4
 8006f70:	2200      	movs	r2, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f8f1 	bl	800815c <VL53L0X_SetGpioConfig>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f80:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d121      	bne.n	8006fcc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f88:	2201      	movs	r2, #1
 8006f8a:	21ff      	movs	r1, #255	; 0xff
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f004 fcf7 	bl	800b980 <VL53L0X_WrByte>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006f98:	f107 031a 	add.w	r3, r7, #26
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2184      	movs	r1, #132	; 0x84
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f004 fd99 	bl	800bad8 <VL53L0X_RdWord>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	21ff      	movs	r1, #255	; 0xff
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f004 fce1 	bl	800b980 <VL53L0X_WrByte>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fcc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006fd4:	8b7b      	ldrh	r3, [r7, #26]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006fe0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d108      	bne.n	8006ffa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006fe8:	f107 031c 	add.w	r3, r7, #28
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8d0 	bl	8007194 <VL53L0X_GetDeviceParameters>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006ffa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d110      	bne.n	8007024 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007002:	f107 0319 	add.w	r3, r7, #25
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f992 	bl	8007332 <VL53L0X_GetFractionEnable>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007014:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007018:	2b00      	cmp	r3, #0
 800701a:	d103      	bne.n	8007024 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800701c:	7e7a      	ldrb	r2, [r7, #25]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007024:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10e      	bne.n	800704a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f103 0410 	add.w	r4, r3, #16
 8007032:	f107 051c 	add.w	r5, r7, #28
 8007036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800703c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007042:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800704a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800704e:	2b00      	cmp	r3, #0
 8007050:	d111      	bne.n	8007076 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007052:	f107 0319 	add.w	r3, r7, #25
 8007056:	461a      	mov	r2, r3
 8007058:	2101      	movs	r1, #1
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f004 fd12 	bl	800ba84 <VL53L0X_RdByte>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007066:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800706e:	7e7a      	ldrb	r2, [r7, #25]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007076:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800707a:	2b00      	cmp	r3, #0
 800707c:	d107      	bne.n	800708e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800707e:	2200      	movs	r2, #0
 8007080:	2100      	movs	r1, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f9ca 	bl	800741c <VL53L0X_SetSequenceStepEnable>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800708e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007092:	2b00      	cmp	r3, #0
 8007094:	d107      	bne.n	80070a6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007096:	2200      	movs	r2, #0
 8007098:	2102      	movs	r1, #2
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9be 	bl	800741c <VL53L0X_SetSequenceStepEnable>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80070a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2203      	movs	r2, #3
 80070b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80070b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80070be:	f107 0313 	add.w	r3, r7, #19
 80070c2:	461a      	mov	r2, r3
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f990 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80070da:	7cfa      	ldrb	r2, [r7, #19]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80070e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80070ea:	f107 0313 	add.w	r3, r7, #19
 80070ee:	461a      	mov	r2, r3
 80070f0:	2101      	movs	r1, #1
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f97a 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007106:	7cfa      	ldrb	r2, [r7, #19]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800710e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007116:	f107 030c 	add.w	r3, r7, #12
 800711a:	461a      	mov	r2, r3
 800711c:	2103      	movs	r1, #3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f002 fef4 	bl	8009f0c <get_sequence_step_timeout>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800712a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800713a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8007142:	f107 030c 	add.w	r3, r7, #12
 8007146:	461a      	mov	r2, r3
 8007148:	2104      	movs	r1, #4
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f002 fede 	bl	8009f0c <get_sequence_step_timeout>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007156:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007166:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800716a:	4618      	mov	r0, r3
 800716c:	3770      	adds	r7, #112	; 0x70
 800716e:	46bd      	mov	sp, r7
 8007170:	bdb0      	pop	{r4, r5, r7, pc}
 8007172:	bf00      	nop
 8007174:	200000f4 	.word	0x200000f4

08007178 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8007180:	239d      	movs	r3, #157	; 0x9d
 8007182:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f8b0 	bl	800730c <VL53L0X_GetDeviceMode>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80071b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d107      	bne.n	80071c8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa78 	bl	80076b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80071c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2200      	movs	r2, #0
 80071d4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80071d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	3310      	adds	r3, #16
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 faae 	bl	8007746 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80071ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	3314      	adds	r3, #20
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff fcc2 	bl	8006b86 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007202:	4603      	mov	r3, r0
 8007204:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d134      	bne.n	8007278 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	e02a      	b.n	800726a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d12a      	bne.n	8007272 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	b299      	uxth	r1, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3308      	adds	r3, #8
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	4413      	add	r3, r2
 800722a:	3304      	adds	r3, #4
 800722c:	461a      	mov	r2, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fbce 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	4313      	orrs	r3, r2
 800723c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800723e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d117      	bne.n	8007276 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	b299      	uxth	r1, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	3318      	adds	r3, #24
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	4413      	add	r3, r2
 8007252:	461a      	mov	r2, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fb35 	bl	80078c4 <VL53L0X_GetLimitCheckEnable>
 800725a:	4603      	mov	r3, r0
 800725c:	461a      	mov	r2, r3
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	4313      	orrs	r3, r2
 8007262:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3301      	adds	r3, #1
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b05      	cmp	r3, #5
 800726e:	ddd1      	ble.n	8007214 <VL53L0X_GetDeviceParameters+0x80>
 8007270:	e002      	b.n	8007278 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007272:	bf00      	nop
 8007274:	e000      	b.n	8007278 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007276:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	333c      	adds	r3, #60	; 0x3c
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fc30 	bl	8007aec <VL53L0X_GetWrapAroundCheckEnable>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f879 	bl	8007396 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2b15      	cmp	r3, #21
 80072c8:	bf8c      	ite	hi
 80072ca:	2201      	movhi	r2, #1
 80072cc:	2200      	movls	r2, #0
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	d10e      	bne.n	80072f2 <VL53L0X_SetDeviceMode+0x3e>
 80072d4:	2201      	movs	r2, #1
 80072d6:	409a      	lsls	r2, r3
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <VL53L0X_SetDeviceMode+0x54>)
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bf14      	ite	ne
 80072e0:	2301      	movne	r3, #1
 80072e2:	2300      	moveq	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	741a      	strb	r2, [r3, #16]
		break;
 80072f0:	e001      	b.n	80072f6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80072f2:	23f8      	movs	r3, #248	; 0xf8
 80072f4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	0030000b 	.word	0x0030000b

0800730c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7c1a      	ldrb	r2, [r3, #16]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	2109      	movs	r1, #9
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f004 fb9d 	bl	800ba84 <VL53L0X_RdByte>
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800734e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f003 fa56 	bl	800a832 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800738a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f003 fb23 	bl	800a9f2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80073b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
 80073c8:	4613      	mov	r3, r2
 80073ca:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80073d0:	78ba      	ldrb	r2, [r7, #2]
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f002 ff6b 	bl	800a2b2 <VL53L0X_set_vcsel_pulse_period>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80073e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	460b      	mov	r3, r1
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4619      	mov	r1, r3
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f003 f9dd 	bl	800a7c4 <VL53L0X_get_vcsel_pulse_period>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800740e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
 8007428:	4613      	mov	r3, r2
 800742a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007438:	f107 030f 	add.w	r3, r7, #15
 800743c:	461a      	mov	r2, r3
 800743e:	2101      	movs	r1, #1
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f004 fb1f 	bl	800ba84 <VL53L0X_RdByte>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800744e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d15a      	bne.n	800750c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007456:	78bb      	ldrb	r3, [r7, #2]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d12b      	bne.n	80074b4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d825      	bhi.n	80074ae <VL53L0X_SetSequenceStepEnable+0x92>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800747d 	.word	0x0800747d
 800746c:	08007487 	.word	0x08007487
 8007470:	08007491 	.word	0x08007491
 8007474:	0800749b 	.word	0x0800749b
 8007478:	080074a5 	.word	0x080074a5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800747c:	7dbb      	ldrb	r3, [r7, #22]
 800747e:	f043 0310 	orr.w	r3, r3, #16
 8007482:	75bb      	strb	r3, [r7, #22]
				break;
 8007484:	e043      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007486:	7dbb      	ldrb	r3, [r7, #22]
 8007488:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800748c:	75bb      	strb	r3, [r7, #22]
				break;
 800748e:	e03e      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007490:	7dbb      	ldrb	r3, [r7, #22]
 8007492:	f043 0304 	orr.w	r3, r3, #4
 8007496:	75bb      	strb	r3, [r7, #22]
				break;
 8007498:	e039      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800749a:	7dbb      	ldrb	r3, [r7, #22]
 800749c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a0:	75bb      	strb	r3, [r7, #22]
				break;
 80074a2:	e034      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80074a4:	7dbb      	ldrb	r3, [r7, #22]
 80074a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074aa:	75bb      	strb	r3, [r7, #22]
				break;
 80074ac:	e02f      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074ae:	23fc      	movs	r3, #252	; 0xfc
 80074b0:	75fb      	strb	r3, [r7, #23]
 80074b2:	e02c      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d825      	bhi.n	8007506 <VL53L0X_SetSequenceStepEnable+0xea>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d5 	.word	0x080074d5
 80074c4:	080074df 	.word	0x080074df
 80074c8:	080074e9 	.word	0x080074e9
 80074cc:	080074f3 	.word	0x080074f3
 80074d0:	080074fd 	.word	0x080074fd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80074d4:	7dbb      	ldrb	r3, [r7, #22]
 80074d6:	f023 0310 	bic.w	r3, r3, #16
 80074da:	75bb      	strb	r3, [r7, #22]
				break;
 80074dc:	e017      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80074de:	7dbb      	ldrb	r3, [r7, #22]
 80074e0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80074e4:	75bb      	strb	r3, [r7, #22]
				break;
 80074e6:	e012      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80074e8:	7dbb      	ldrb	r3, [r7, #22]
 80074ea:	f023 0304 	bic.w	r3, r3, #4
 80074ee:	75bb      	strb	r3, [r7, #22]
				break;
 80074f0:	e00d      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80074f2:	7dbb      	ldrb	r3, [r7, #22]
 80074f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f8:	75bb      	strb	r3, [r7, #22]
				break;
 80074fa:	e008      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80074fc:	7dbb      	ldrb	r3, [r7, #22]
 80074fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007502:	75bb      	strb	r3, [r7, #22]
				break;
 8007504:	e003      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007506:	23fc      	movs	r3, #252	; 0xfc
 8007508:	75fb      	strb	r3, [r7, #23]
 800750a:	e000      	b.n	800750e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800750c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	7dba      	ldrb	r2, [r7, #22]
 8007512:	429a      	cmp	r2, r3
 8007514:	d01e      	beq.n	8007554 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007516:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d107      	bne.n	800752e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800751e:	7dbb      	ldrb	r3, [r7, #22]
 8007520:	461a      	mov	r2, r3
 8007522:	2101      	movs	r1, #1
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f004 fa2b 	bl	800b980 <VL53L0X_WrByte>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800752e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d103      	bne.n	800753e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7dba      	ldrb	r2, [r7, #22]
 800753a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800753e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800754c:	6939      	ldr	r1, [r7, #16]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff ff0e 	bl	8007370 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	72fb      	strb	r3, [r7, #11]
 800756e:	4613      	mov	r3, r2
 8007570:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	2b04      	cmp	r3, #4
 8007580:	d836      	bhi.n	80075f0 <sequence_step_enabled+0x90>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <sequence_step_enabled+0x28>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	0800759d 	.word	0x0800759d
 800758c:	080075af 	.word	0x080075af
 8007590:	080075c1 	.word	0x080075c1
 8007594:	080075d3 	.word	0x080075d3
 8007598:	080075e5 	.word	0x080075e5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800759c:	7abb      	ldrb	r3, [r7, #10]
 800759e:	111b      	asrs	r3, r3, #4
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	701a      	strb	r2, [r3, #0]
		break;
 80075ac:	e022      	b.n	80075f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80075ae:	7abb      	ldrb	r3, [r7, #10]
 80075b0:	10db      	asrs	r3, r3, #3
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	701a      	strb	r2, [r3, #0]
		break;
 80075be:	e019      	b.n	80075f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80075c0:	7abb      	ldrb	r3, [r7, #10]
 80075c2:	109b      	asrs	r3, r3, #2
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	701a      	strb	r2, [r3, #0]
		break;
 80075d0:	e010      	b.n	80075f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80075d2:	7abb      	ldrb	r3, [r7, #10]
 80075d4:	119b      	asrs	r3, r3, #6
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	701a      	strb	r2, [r3, #0]
		break;
 80075e2:	e007      	b.n	80075f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80075e4:	7abb      	ldrb	r3, [r7, #10]
 80075e6:	09db      	lsrs	r3, r3, #7
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	701a      	strb	r2, [r3, #0]
		break;
 80075ee:	e001      	b.n	80075f4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075f0:	23fc      	movs	r3, #252	; 0xfc
 80075f2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007616:	f107 030e 	add.w	r3, r7, #14
 800761a:	461a      	mov	r2, r3
 800761c:	2101      	movs	r1, #1
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f004 fa30 	bl	800ba84 <VL53L0X_RdByte>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007630:	7bba      	ldrb	r2, [r7, #14]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff ff92 	bl	8007560 <sequence_step_enabled>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007648:	7bba      	ldrb	r2, [r7, #14]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	3302      	adds	r3, #2
 800764e:	2101      	movs	r1, #1
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff ff85 	bl	8007560 <sequence_step_enabled>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800765a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d108      	bne.n	8007674 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007662:	7bba      	ldrb	r2, [r7, #14]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	2102      	movs	r1, #2
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff ff78 	bl	8007560 <sequence_step_enabled>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d108      	bne.n	800768e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800767c:	7bba      	ldrb	r2, [r7, #14]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	3303      	adds	r3, #3
 8007682:	2103      	movs	r1, #3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff6b 	bl	8007560 <sequence_step_enabled>
 800768a:	4603      	mov	r3, r0
 800768c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800768e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d108      	bne.n	80076a8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007696:	7bba      	ldrb	r2, [r7, #14]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	3304      	adds	r3, #4
 800769c:	2104      	movs	r1, #4
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff ff5e 	bl	8007560 <sequence_step_enabled>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80076c2:	f107 030c 	add.w	r3, r7, #12
 80076c6:	461a      	mov	r2, r3
 80076c8:	21f8      	movs	r1, #248	; 0xf8
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f004 fa04 	bl	800bad8 <VL53L0X_RdWord>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80076d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d108      	bne.n	80076ee <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80076dc:	f107 0308 	add.w	r3, r7, #8
 80076e0:	461a      	mov	r2, r3
 80076e2:	2104      	movs	r1, #4
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f004 fa2f 	bl	800bb48 <VL53L0X_RdDWord>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10c      	bne.n	8007710 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80076f6:	89bb      	ldrh	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	89ba      	ldrh	r2, [r7, #12]
 8007700:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7f1b      	ldrb	r3, [r3, #28]
 800772e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	7bba      	ldrb	r2, [r7, #14]
 8007734:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007736:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007754:	f107 030e 	add.w	r3, r7, #14
 8007758:	461a      	mov	r2, r3
 800775a:	2120      	movs	r1, #32
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f004 f9bb 	bl	800bad8 <VL53L0X_RdWord>
 8007762:	4603      	mov	r3, r0
 8007764:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d118      	bne.n	80077a0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800776e:	89fb      	ldrh	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	771a      	strb	r2, [r3, #28]
 8007786:	e00b      	b.n	80077a0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007788:	89fb      	ldrh	r3, [r7, #14]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
 80077b8:	4613      	mov	r3, r2
 80077ba:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80077cc:	887b      	ldrh	r3, [r7, #2]
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d902      	bls.n	80077d8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077d2:	23fc      	movs	r3, #252	; 0xfc
 80077d4:	75fb      	strb	r3, [r7, #23]
 80077d6:	e05b      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80077d8:	787b      	ldrb	r3, [r7, #1]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73bb      	strb	r3, [r7, #14]
 80077ea:	e00a      	b.n	8007802 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80077ec:	887b      	ldrh	r3, [r7, #2]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	330c      	adds	r3, #12
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	2b05      	cmp	r3, #5
 8007806:	d841      	bhi.n	800788c <VL53L0X_SetLimitCheckEnable+0xe0>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <VL53L0X_SetLimitCheckEnable+0x64>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007829 	.word	0x08007829
 8007814:	08007833 	.word	0x08007833
 8007818:	08007849 	.word	0x08007849
 800781c:	08007853 	.word	0x08007853
 8007820:	0800785d 	.word	0x0800785d
 8007824:	08007875 	.word	0x08007875

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7bfa      	ldrb	r2, [r7, #15]
 800782c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007830:	e02e      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	2144      	movs	r1, #68	; 0x44
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f004 f8c3 	bl	800b9c8 <VL53L0X_WrWord>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

			break;
 8007846:	e023      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7bfa      	ldrb	r2, [r7, #15]
 800784c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007850:	e01e      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7bfa      	ldrb	r2, [r7, #15]
 8007856:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800785a:	e019      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007862:	7b7b      	ldrb	r3, [r7, #13]
 8007864:	22fe      	movs	r2, #254	; 0xfe
 8007866:	2160      	movs	r1, #96	; 0x60
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f004 f8d7 	bl	800ba1c <VL53L0X_UpdateByte>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007872:	e00d      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800787a:	7b7b      	ldrb	r3, [r7, #13]
 800787c:	22ef      	movs	r2, #239	; 0xef
 800787e:	2160      	movs	r1, #96	; 0x60
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f004 f8cb 	bl	800ba1c <VL53L0X_UpdateByte>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800788a:	e001      	b.n	8007890 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800788c:	23fc      	movs	r3, #252	; 0xfc
 800788e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10f      	bne.n	80078b8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007898:	787b      	ldrb	r3, [r7, #1]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800789e:	887b      	ldrh	r3, [r7, #2]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80078aa:	e005      	b.n	80078b8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	4413      	add	r3, r2
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80078d6:	897b      	ldrh	r3, [r7, #10]
 80078d8:	2b05      	cmp	r3, #5
 80078da:	d905      	bls.n	80078e8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078dc:	23fc      	movs	r3, #252	; 0xfc
 80078de:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e008      	b.n	80078fa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80078e8:	897b      	ldrh	r3, [r7, #10]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7dba      	ldrb	r2, [r7, #22]
 80078f8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	460b      	mov	r3, r1
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4413      	add	r3, r2
 8007924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007928:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800792a:	7dbb      	ldrb	r3, [r7, #22]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	330c      	adds	r3, #12
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	e040      	b.n	80079c2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007940:	897b      	ldrh	r3, [r7, #10]
 8007942:	2b05      	cmp	r3, #5
 8007944:	d830      	bhi.n	80079a8 <VL53L0X_SetLimitCheckValue+0x9c>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <VL53L0X_SetLimitCheckValue+0x40>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007965 	.word	0x08007965
 8007950:	0800796d 	.word	0x0800796d
 8007954:	08007983 	.word	0x08007983
 8007958:	0800798b 	.word	0x0800798b
 800795c:	08007993 	.word	0x08007993
 8007960:	08007993 	.word	0x08007993

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800796a:	e01f      	b.n	80079ac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007970:	b29b      	uxth	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	2144      	movs	r1, #68	; 0x44
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f004 f826 	bl	800b9c8 <VL53L0X_WrWord>
 800797c:	4603      	mov	r3, r0
 800797e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007980:	e014      	b.n	80079ac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007988:	e010      	b.n	80079ac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007990:	e00c      	b.n	80079ac <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007996:	b29b      	uxth	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	2164      	movs	r1, #100	; 0x64
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f004 f813 	bl	800b9c8 <VL53L0X_WrWord>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80079a6:	e001      	b.n	80079ac <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079a8:	23fc      	movs	r3, #252	; 0xfc
 80079aa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80079ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079b4:	897b      	ldrh	r3, [r7, #10]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	330c      	adds	r3, #12
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	460b      	mov	r3, r1
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079de:	2300      	movs	r3, #0
 80079e0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80079e6:	897b      	ldrh	r3, [r7, #10]
 80079e8:	2b05      	cmp	r3, #5
 80079ea:	d847      	bhi.n	8007a7c <VL53L0X_GetLimitCheckValue+0xac>
 80079ec:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <VL53L0X_GetLimitCheckValue+0x24>)
 80079ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f2:	bf00      	nop
 80079f4:	08007a0d 	.word	0x08007a0d
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007a3f 	.word	0x08007a3f
 8007a00:	08007a4b 	.word	0x08007a4b
 8007a04:	08007a57 	.word	0x08007a57
 8007a08:	08007a57 	.word	0x08007a57

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a10:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	77bb      	strb	r3, [r7, #30]
		break;
 8007a16:	e033      	b.n	8007a80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a18:	f107 0316 	add.w	r3, r7, #22
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2144      	movs	r1, #68	; 0x44
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f004 f859 	bl	800bad8 <VL53L0X_RdWord>
 8007a26:	4603      	mov	r3, r0
 8007a28:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	025b      	lsls	r3, r3, #9
 8007a36:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	77bb      	strb	r3, [r7, #30]
		break;
 8007a3c:	e020      	b.n	8007a80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	77bb      	strb	r3, [r7, #30]
		break;
 8007a48:	e01a      	b.n	8007a80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	77bb      	strb	r3, [r7, #30]
		break;
 8007a54:	e014      	b.n	8007a80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a56:	f107 0316 	add.w	r3, r7, #22
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2164      	movs	r1, #100	; 0x64
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f004 f83a 	bl	800bad8 <VL53L0X_RdWord>
 8007a64:	4603      	mov	r3, r0
 8007a66:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d102      	bne.n	8007a76 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	025b      	lsls	r3, r3, #9
 8007a74:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	77bb      	strb	r3, [r7, #30]
		break;
 8007a7a:	e001      	b.n	8007a80 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a7c:	23fc      	movs	r3, #252	; 0xfc
 8007a7e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d12a      	bne.n	8007ade <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007a88:	7fbb      	ldrb	r3, [r7, #30]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d124      	bne.n	8007ad8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d110      	bne.n	8007ab6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007a94:	897b      	ldrh	r3, [r7, #10]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007aa8:	897b      	ldrh	r3, [r7, #10]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007ab4:	e013      	b.n	8007ade <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007abc:	897b      	ldrh	r3, [r7, #10]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007aca:	897b      	ldrh	r3, [r7, #10]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007ad6:	e002      	b.n	8007ade <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ade:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop

08007aec <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007afa:	f107 030e 	add.w	r3, r7, #14
 8007afe:	461a      	mov	r2, r3
 8007b00:	2101      	movs	r1, #1
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f003 ffbe 	bl	800ba84 <VL53L0X_RdByte>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10e      	bne.n	8007b32 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007b14:	7bba      	ldrb	r2, [r7, #14]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	b25b      	sxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	da03      	bge.n	8007b2c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2201      	movs	r2, #1
 8007b28:	701a      	strb	r2, [r3, #0]
 8007b2a:	e002      	b.n	8007b32 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007b5c:	f107 030e 	add.w	r3, r7, #14
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fbd2 	bl	800730c <VL53L0X_GetDeviceMode>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f898 	bl	8007cb0 <VL53L0X_StartMeasurement>
 8007b80:	4603      	mov	r3, r0
 8007b82:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fb6f 	bl	8009270 <VL53L0X_measurement_poll_for_completion>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2203      	movs	r2, #3
 8007ba8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007bc8:	2301      	movs	r3, #1
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f001 fb11 	bl	80091f6 <VL53L0X_perform_ref_calibration>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007bfa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007bfc:	7dbb      	ldrb	r3, [r7, #22]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d005      	beq.n	8007c0e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007c02:	7dbb      	ldrb	r3, [r7, #22]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d002      	beq.n	8007c0e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007c08:	7dbb      	ldrb	r3, [r7, #22]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d147      	bne.n	8007c9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	f107 0210 	add.w	r2, r7, #16
 8007c16:	2101      	movs	r1, #1
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fbc3 	bl	80083a4 <VL53L0X_GetInterruptThresholds>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007c28:	d803      	bhi.n	8007c32 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007c2a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007c2c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007c30:	d935      	bls.n	8007c9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d131      	bne.n	8007c9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d006      	beq.n	8007c4e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007c40:	491a      	ldr	r1, [pc, #104]	; (8007cac <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f002 ff86 	bl	800ab54 <VL53L0X_load_tuning_settings>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	e027      	b.n	8007c9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007c4e:	2204      	movs	r2, #4
 8007c50:	21ff      	movs	r1, #255	; 0xff
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f003 fe94 	bl	800b980 <VL53L0X_WrByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2170      	movs	r1, #112	; 0x70
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f003 fe8a 	bl	800b980 <VL53L0X_WrByte>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c76:	2200      	movs	r2, #0
 8007c78:	21ff      	movs	r1, #255	; 0xff
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f003 fe80 	bl	800b980 <VL53L0X_WrByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2180      	movs	r1, #128	; 0x80
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f003 fe76 	bl	800b980 <VL53L0X_WrByte>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200001e8 	.word	0x200001e8

08007cb0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007cc0:	f107 030e 	add.w	r3, r7, #14
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff fb20 	bl	800730c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007ccc:	2201      	movs	r2, #1
 8007cce:	2180      	movs	r1, #128	; 0x80
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f003 fe55 	bl	800b980 <VL53L0X_WrByte>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cda:	2201      	movs	r2, #1
 8007cdc:	21ff      	movs	r1, #255	; 0xff
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f003 fe4e 	bl	800b980 <VL53L0X_WrByte>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f003 fe47 	bl	800b980 <VL53L0X_WrByte>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2191      	movs	r1, #145	; 0x91
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f003 fe3d 	bl	800b980 <VL53L0X_WrByte>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f003 fe36 	bl	800b980 <VL53L0X_WrByte>
 8007d14:	4603      	mov	r3, r0
 8007d16:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d18:	2200      	movs	r2, #0
 8007d1a:	21ff      	movs	r1, #255	; 0xff
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f003 fe2f 	bl	800b980 <VL53L0X_WrByte>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007d26:	2200      	movs	r2, #0
 8007d28:	2180      	movs	r1, #128	; 0x80
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f003 fe28 	bl	800b980 <VL53L0X_WrByte>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d054      	beq.n	8007de4 <VL53L0X_StartMeasurement+0x134>
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	dc6c      	bgt.n	8007e18 <VL53L0X_StartMeasurement+0x168>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <VL53L0X_StartMeasurement+0x98>
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d034      	beq.n	8007db0 <VL53L0X_StartMeasurement+0x100>
 8007d46:	e067      	b.n	8007e18 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007d48:	2201      	movs	r2, #1
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f003 fe17 	bl	800b980 <VL53L0X_WrByte>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d15d      	bne.n	8007e1e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007d6c:	f107 030d 	add.w	r3, r7, #13
 8007d70:	461a      	mov	r2, r3
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f003 fe85 	bl	800ba84 <VL53L0X_RdByte>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007d84:	7b7a      	ldrb	r2, [r7, #13]
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007d8c:	7bfa      	ldrb	r2, [r7, #15]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d107      	bne.n	8007da2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d103      	bne.n	8007da2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007da0:	d3e1      	bcc.n	8007d66 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007da8:	d339      	bcc.n	8007e1e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007daa:	23f9      	movs	r3, #249	; 0xf9
 8007dac:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007dae:	e036      	b.n	8007e1e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007db8:	2101      	movs	r1, #1
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff ff12 	bl	8007be4 <VL53L0X_CheckAndLoadInterruptSettings>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f003 fdd9 	bl	800b980 <VL53L0X_WrByte>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d123      	bne.n	8007e22 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2204      	movs	r2, #4
 8007dde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007de2:	e01e      	b.n	8007e22 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d105      	bne.n	8007df8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007dec:	2101      	movs	r1, #1
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fef8 	bl	8007be4 <VL53L0X_CheckAndLoadInterruptSettings>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007df8:	2204      	movs	r2, #4
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f003 fdbf 	bl	800b980 <VL53L0X_WrByte>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2204      	movs	r2, #4
 8007e12:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007e16:	e006      	b.n	8007e26 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007e18:	23f8      	movs	r3, #248	; 0xf8
 8007e1a:	75fb      	strb	r3, [r7, #23]
 8007e1c:	e004      	b.n	8007e28 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e26:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007e48:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d112      	bne.n	8007e76 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fb1a 	bl	8008490 <VL53L0X_GetInterruptMaskStatus>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d103      	bne.n	8007e6e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	e01c      	b.n	8007ea8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	e018      	b.n	8007ea8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007e76:	f107 030d 	add.w	r3, r7, #13
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	2114      	movs	r1, #20
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f003 fe00 	bl	800ba84 <VL53L0X_RdByte>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10b      	bne.n	8007ea8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007e90:	7b7b      	ldrb	r3, [r7, #13]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	e002      	b.n	8007ea8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007eb4:	b5b0      	push	{r4, r5, r7, lr}
 8007eb6:	b096      	sub	sp, #88	; 0x58
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007ec4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ec8:	230c      	movs	r3, #12
 8007eca:	2114      	movs	r1, #20
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f003 fd2b 	bl	800b928 <VL53L0X_ReadMulti>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007ed8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 80d1 	bne.w	8008084 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007eee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4413      	add	r3, r2
 8007f00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007f0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4413      	add	r3, r2
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	025b      	lsls	r3, r3, #9
 8007f20:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f26:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007f28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	4413      	add	r3, r2
 8007f3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007f3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f42:	025b      	lsls	r3, r3, #9
 8007f44:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007f4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007f66:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007f68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007f76:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007f7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f88:	d046      	beq.n	8008018 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007f8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007f8c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007f90:	fb02 f303 	mul.w	r3, r2, r3
 8007f94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f98:	4a57      	ldr	r2, [pc, #348]	; (80080f8 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8007f9e:	1192      	asrs	r2, r2, #6
 8007fa0:	17db      	asrs	r3, r3, #31
 8007fa2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007fa4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	7f1b      	ldrb	r3, [r3, #28]
 8007fb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007fb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d02c      	beq.n	8008018 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007fbe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007fc0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007fc4:	fb02 f303 	mul.w	r3, r2, r3
 8007fc8:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d10d      	bne.n	8007fec <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007fd0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007fd8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007fdc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007fe0:	e016      	b.n	8008010 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007fe2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007fe6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007fea:	e011      	b.n	8008010 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007fec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007ff6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ff8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007ffc:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008000:	121b      	asrs	r3, r3, #8
 8008002:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008006:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800800c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008014:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008018:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00d      	beq.n	800803c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008020:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800802c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008030:	b2db      	uxtb	r3, r3
 8008032:	019b      	lsls	r3, r3, #6
 8008034:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	75da      	strb	r2, [r3, #23]
 800803a:	e006      	b.n	800804a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008042:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2200      	movs	r2, #0
 8008048:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800804a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800804e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008052:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f003 fa15 	bl	800b490 <VL53L0X_get_pal_range_status>
 8008066:	4603      	mov	r3, r0
 8008068:	461a      	mov	r2, r3
 800806a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800806e:	4313      	orrs	r3, r2
 8008070:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008074:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800807c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008084:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008088:	2b00      	cmp	r3, #0
 800808a:	d12f      	bne.n	80080ec <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f107 040c 	add.w	r4, r7, #12
 8008092:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800809a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800809e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80080a6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80080ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80080b4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80080ba:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80080c0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80080c6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80080cc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80080d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80080dc:	f107 050c 	add.w	r5, r7, #12
 80080e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3750      	adds	r7, #80	; 0x50
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bdb0      	pop	{r4, r5, r7, pc}
 80080f8:	10624dd3 	.word	0x10624dd3

080080fc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800810a:	2100      	movs	r1, #0
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff f8d1 	bl	80072b4 <VL53L0X_SetDeviceMode>
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fd16 	bl	8007b50 <VL53L0X_PerformSingleMeasurement>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d105      	bne.n	800813c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff febe 	bl	8007eb4 <VL53L0X_GetRangingMeasurementData>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800813c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f962 	bl	8008410 <VL53L0X_ClearInterruptMask>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	461a      	mov	r2, r3
 800816a:	4603      	mov	r3, r0
 800816c:	70fb      	strb	r3, [r7, #3]
 800816e:	460b      	mov	r3, r1
 8008170:	70bb      	strb	r3, [r7, #2]
 8008172:	4613      	mov	r3, r2
 8008174:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008180:	23f6      	movs	r3, #246	; 0xf6
 8008182:	73fb      	strb	r3, [r7, #15]
 8008184:	e107      	b.n	8008396 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008186:	78bb      	ldrb	r3, [r7, #2]
 8008188:	2b14      	cmp	r3, #20
 800818a:	d110      	bne.n	80081ae <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800818c:	7e3b      	ldrb	r3, [r7, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d102      	bne.n	8008198 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008192:	2310      	movs	r3, #16
 8008194:	73bb      	strb	r3, [r7, #14]
 8008196:	e001      	b.n	800819c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008198:	2301      	movs	r3, #1
 800819a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	461a      	mov	r2, r3
 80081a0:	2184      	movs	r1, #132	; 0x84
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f003 fbec 	bl	800b980 <VL53L0X_WrByte>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]
 80081ac:	e0f3      	b.n	8008396 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80081ae:	78bb      	ldrb	r3, [r7, #2]
 80081b0:	2b15      	cmp	r3, #21
 80081b2:	f040 8097 	bne.w	80082e4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80081b6:	2201      	movs	r2, #1
 80081b8:	21ff      	movs	r1, #255	; 0xff
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f003 fbe0 	bl	800b980 <VL53L0X_WrByte>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80081ca:	2200      	movs	r2, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f003 fbd6 	bl	800b980 <VL53L0X_WrByte>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	4313      	orrs	r3, r2
 80081dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80081de:	2200      	movs	r2, #0
 80081e0:	21ff      	movs	r1, #255	; 0xff
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f003 fbcc 	bl	800b980 <VL53L0X_WrByte>
 80081e8:	4603      	mov	r3, r0
 80081ea:	461a      	mov	r2, r3
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80081f2:	2201      	movs	r2, #1
 80081f4:	2180      	movs	r1, #128	; 0x80
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f003 fbc2 	bl	800b980 <VL53L0X_WrByte>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4313      	orrs	r3, r2
 8008204:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008206:	2202      	movs	r2, #2
 8008208:	2185      	movs	r1, #133	; 0x85
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f003 fbb8 	bl	800b980 <VL53L0X_WrByte>
 8008210:	4603      	mov	r3, r0
 8008212:	461a      	mov	r2, r3
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	4313      	orrs	r3, r2
 8008218:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800821a:	2204      	movs	r2, #4
 800821c:	21ff      	movs	r1, #255	; 0xff
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f003 fbae 	bl	800b980 <VL53L0X_WrByte>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	4313      	orrs	r3, r2
 800822c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800822e:	2200      	movs	r2, #0
 8008230:	21cd      	movs	r1, #205	; 0xcd
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f003 fba4 	bl	800b980 <VL53L0X_WrByte>
 8008238:	4603      	mov	r3, r0
 800823a:	461a      	mov	r2, r3
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	4313      	orrs	r3, r2
 8008240:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008242:	2211      	movs	r2, #17
 8008244:	21cc      	movs	r1, #204	; 0xcc
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f003 fb9a 	bl	800b980 <VL53L0X_WrByte>
 800824c:	4603      	mov	r3, r0
 800824e:	461a      	mov	r2, r3
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	4313      	orrs	r3, r2
 8008254:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008256:	2207      	movs	r2, #7
 8008258:	21ff      	movs	r1, #255	; 0xff
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f003 fb90 	bl	800b980 <VL53L0X_WrByte>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4313      	orrs	r3, r2
 8008268:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800826a:	2200      	movs	r2, #0
 800826c:	21be      	movs	r1, #190	; 0xbe
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f003 fb86 	bl	800b980 <VL53L0X_WrByte>
 8008274:	4603      	mov	r3, r0
 8008276:	461a      	mov	r2, r3
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	4313      	orrs	r3, r2
 800827c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800827e:	2206      	movs	r2, #6
 8008280:	21ff      	movs	r1, #255	; 0xff
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f003 fb7c 	bl	800b980 <VL53L0X_WrByte>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	4313      	orrs	r3, r2
 8008290:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008292:	2209      	movs	r2, #9
 8008294:	21cc      	movs	r1, #204	; 0xcc
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f003 fb72 	bl	800b980 <VL53L0X_WrByte>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80082a6:	2200      	movs	r2, #0
 80082a8:	21ff      	movs	r1, #255	; 0xff
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f003 fb68 	bl	800b980 <VL53L0X_WrByte>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80082ba:	2201      	movs	r2, #1
 80082bc:	21ff      	movs	r1, #255	; 0xff
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f003 fb5e 	bl	800b980 <VL53L0X_WrByte>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80082ce:	2200      	movs	r2, #0
 80082d0:	2100      	movs	r1, #0
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f003 fb54 	bl	800b980 <VL53L0X_WrByte>
 80082d8:	4603      	mov	r3, r0
 80082da:	461a      	mov	r2, r3
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	4313      	orrs	r3, r2
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	e058      	b.n	8008396 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80082e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d121      	bne.n	8008330 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80082ec:	787b      	ldrb	r3, [r7, #1]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d81b      	bhi.n	800832a <VL53L0X_SetGpioConfig+0x1ce>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <VL53L0X_SetGpioConfig+0x19c>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	08008313 	.word	0x08008313
 8008300:	08008319 	.word	0x08008319
 8008304:	0800831f 	.word	0x0800831f
 8008308:	08008325 	.word	0x08008325
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]
				break;
 8008310:	e00f      	b.n	8008332 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008312:	2301      	movs	r3, #1
 8008314:	73bb      	strb	r3, [r7, #14]
				break;
 8008316:	e00c      	b.n	8008332 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008318:	2302      	movs	r3, #2
 800831a:	73bb      	strb	r3, [r7, #14]
				break;
 800831c:	e009      	b.n	8008332 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800831e:	2303      	movs	r3, #3
 8008320:	73bb      	strb	r3, [r7, #14]
				break;
 8008322:	e006      	b.n	8008332 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008324:	2304      	movs	r3, #4
 8008326:	73bb      	strb	r3, [r7, #14]
				break;
 8008328:	e003      	b.n	8008332 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800832a:	23f5      	movs	r3, #245	; 0xf5
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	e000      	b.n	8008332 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008330:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d107      	bne.n	800834a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	461a      	mov	r2, r3
 800833e:	210a      	movs	r1, #10
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f003 fb1d 	bl	800b980 <VL53L0X_WrByte>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800834a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10f      	bne.n	8008372 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008352:	7e3b      	ldrb	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	73bb      	strb	r3, [r7, #14]
 800835c:	e001      	b.n	8008362 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800835e:	2310      	movs	r3, #16
 8008360:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	22ef      	movs	r2, #239	; 0xef
 8008366:	2184      	movs	r1, #132	; 0x84
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f003 fb57 	bl	800ba1c <VL53L0X_UpdateByte>
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	787a      	ldrb	r2, [r7, #1]
 800837e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800838a:	2100      	movs	r1, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f83f 	bl	8008410 <VL53L0X_ClearInterruptMask>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008396:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop

080083a4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	460b      	mov	r3, r1
 80083b2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80083b8:	f107 0314 	add.w	r3, r7, #20
 80083bc:	461a      	mov	r2, r3
 80083be:	210e      	movs	r1, #14
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f003 fb89 	bl	800bad8 <VL53L0X_RdWord>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80083ca:	8abb      	ldrh	r3, [r7, #20]
 80083cc:	045b      	lsls	r3, r3, #17
 80083ce:	461a      	mov	r2, r3
 80083d0:	4b0e      	ldr	r3, [pc, #56]	; (800840c <VL53L0X_GetInterruptThresholds+0x68>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80083d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10f      	bne.n	8008400 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	461a      	mov	r2, r3
 80083e6:	210c      	movs	r1, #12
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f003 fb75 	bl	800bad8 <VL53L0X_RdWord>
 80083ee:	4603      	mov	r3, r0
 80083f0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80083f2:	8abb      	ldrh	r3, [r7, #20]
 80083f4:	045b      	lsls	r3, r3, #17
 80083f6:	461a      	mov	r2, r3
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <VL53L0X_GetInterruptThresholds+0x68>)
 80083fa:	4013      	ands	r3, r2
		*pThresholdHigh =
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008400:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	1ffe0000 	.word	0x1ffe0000

08008410 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008422:	2201      	movs	r2, #1
 8008424:	210b      	movs	r1, #11
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f003 faaa 	bl	800b980 <VL53L0X_WrByte>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008430:	2200      	movs	r2, #0
 8008432:	210b      	movs	r1, #11
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f003 faa3 	bl	800b980 <VL53L0X_WrByte>
 800843a:	4603      	mov	r3, r0
 800843c:	461a      	mov	r2, r3
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	4313      	orrs	r3, r2
 8008442:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008444:	f107 030d 	add.w	r3, r7, #13
 8008448:	461a      	mov	r2, r3
 800844a:	2113      	movs	r1, #19
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f003 fb19 	bl	800ba84 <VL53L0X_RdByte>
 8008452:	4603      	mov	r3, r0
 8008454:	461a      	mov	r2, r3
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	4313      	orrs	r3, r2
 800845a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	3301      	adds	r3, #1
 8008460:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008462:	7b7b      	ldrb	r3, [r7, #13]
 8008464:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d803      	bhi.n	800847a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0d3      	beq.n	8008422 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d901      	bls.n	8008484 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008480:	23f4      	movs	r3, #244	; 0xf4
 8008482:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800849e:	f107 030e 	add.w	r3, r7, #14
 80084a2:	461a      	mov	r2, r3
 80084a4:	2113      	movs	r1, #19
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f003 faec 	bl	800ba84 <VL53L0X_RdByte>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	f003 0207 	and.w	r2, r3, #7
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	f003 0318 	and.w	r3, r3, #24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80084c4:	23fa      	movs	r3, #250	; 0xfa
 80084c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80084c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	68b9      	ldr	r1, [r7, #8]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fa33 	bl	8008954 <VL53L0X_perform_ref_spad_management>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80084f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8008508:	2101      	movs	r1, #1
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fe fed2 	bl	80072b4 <VL53L0X_SetDeviceMode>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8008514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800851c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008520:	e019      	b.n	8008556 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fbc4 	bl	8007cb0 <VL53L0X_StartMeasurement>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800852c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 8008534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008538:	e00d      	b.n	8008556 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff fcb9 	bl	8007eb4 <VL53L0X_GetRangingMeasurementData>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8008546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800854e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008552:	e000      	b.n	8008556 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800856c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008570:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008576:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008578:	f107 0308 	add.w	r3, r7, #8
 800857c:	461a      	mov	r2, r3
 800857e:	2128      	movs	r1, #40	; 0x28
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f003 faa9 	bl	800bad8 <VL53L0X_RdWord>
 8008586:	4603      	mov	r3, r0
 8008588:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d11e      	bne.n	80085d0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008592:	893b      	ldrh	r3, [r7, #8]
 8008594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008598:	b29b      	uxth	r3, r3
 800859a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800859c:	893b      	ldrh	r3, [r7, #8]
 800859e:	461a      	mov	r2, r3
 80085a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	dd0b      	ble.n	80085c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80085a8:	893a      	ldrh	r2, [r7, #8]
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	b21b      	sxth	r3, r3
 80085b2:	461a      	mov	r2, r3
					* 250;
 80085b4:	23fa      	movs	r3, #250	; 0xfa
 80085b6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e007      	b.n	80085d0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80085c0:	893b      	ldrh	r3, [r7, #8]
 80085c2:	b21b      	sxth	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	23fa      	movs	r3, #250	; 0xfa
 80085c8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80085d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80085dc:	b480      	push	{r7}
 80085de:	b08b      	sub	sp, #44	; 0x2c
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80085ea:	2308      	movs	r3, #8
 80085ec:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	f04f 32ff 	mov.w	r2, #4294967295
 80085f8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008602:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	fbb3 f2f2 	udiv	r2, r3, r2
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	fb01 f202 	mul.w	r2, r1, r2
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
 800861a:	e030      	b.n	800867e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	4413      	add	r3, r2
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800862a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	429a      	cmp	r2, r3
 8008630:	d11e      	bne.n	8008670 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008632:	7ffa      	ldrb	r2, [r7, #31]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	fa42 f303 	asr.w	r3, r2, r3
 800863a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008640:	e016      	b.n	8008670 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008642:	7ffb      	ldrb	r3, [r7, #31]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <get_next_good_spad+0x88>
				success = 1;
 800864c:	2301      	movs	r3, #1
 800864e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	fb03 f202 	mul.w	r2, r3, r2
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	4413      	add	r3, r2
 800865c:	461a      	mov	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	601a      	str	r2, [r3, #0]
				break;
 8008662:	e009      	b.n	8008678 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008664:	7ffb      	ldrb	r3, [r7, #31]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	3301      	adds	r3, #1
 800866e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008670:	6a3a      	ldr	r2, [r7, #32]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	429a      	cmp	r2, r3
 8008676:	d3e4      	bcc.n	8008642 <get_next_good_spad+0x66>
				coarseIndex++) {
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	3301      	adds	r3, #1
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	d202      	bcs.n	800868c <get_next_good_spad+0xb0>
 8008686:	7fbb      	ldrb	r3, [r7, #30]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0c7      	beq.n	800861c <get_next_good_spad+0x40>
		}
	}
}
 800868c:	bf00      	nop
 800868e:	372c      	adds	r7, #44	; 0x2c
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	099b      	lsrs	r3, r3, #6
 80086a8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80086aa:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <is_aperture+0x30>)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <is_aperture+0x22>
		isAperture = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	200003a0 	.word	0x200003a0

080086cc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b089      	sub	sp, #36	; 0x24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80086d8:	2300      	movs	r3, #0
 80086da:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80086dc:	2308      	movs	r3, #8
 80086de:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80086f2:	69b9      	ldr	r1, [r7, #24]
 80086f4:	fb01 f202 	mul.w	r2, r1, r2
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	429a      	cmp	r2, r3
 8008702:	d302      	bcc.n	800870a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008704:	23ce      	movs	r3, #206	; 0xce
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e010      	b.n	800872c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	4413      	add	r3, r2
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b25a      	sxtb	r2, r3
 8008714:	2101      	movs	r1, #1
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	fa01 f303 	lsl.w	r3, r1, r3
 800871c:	b25b      	sxtb	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b259      	sxtb	r1, r3
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4413      	add	r3, r2
 8008728:	b2ca      	uxtb	r2, r1
 800872a:	701a      	strb	r2, [r3, #0]

	return status;
 800872c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3724      	adds	r7, #36	; 0x24
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008746:	2306      	movs	r3, #6
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	21b0      	movs	r1, #176	; 0xb0
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f003 f8bb 	bl	800b8c8 <VL53L0X_WriteMulti>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008756:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800876c:	2306      	movs	r3, #6
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	21b0      	movs	r1, #176	; 0xb0
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f003 f8d8 	bl	800b928 <VL53L0X_ReadMulti>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800877c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08c      	sub	sp, #48	; 0x30
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	460b      	mov	r3, r1
 8008796:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008798:	2300      	movs	r3, #0
 800879a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800879e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80087a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80087a6:	2300      	movs	r3, #0
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087aa:	e02b      	b.n	8008804 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80087ac:	f107 031c 	add.w	r3, r7, #28
 80087b0:	6a3a      	ldr	r2, [r7, #32]
 80087b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ff11 	bl	80085dc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c0:	d103      	bne.n	80087ca <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80087c2:	23ce      	movs	r3, #206	; 0xce
 80087c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80087c8:	e020      	b.n	800880c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d0:	4413      	add	r3, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff ff60 	bl	8008698 <is_aperture>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	4293      	cmp	r3, r2
 80087e0:	d003      	beq.n	80087ea <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80087e2:	23ce      	movs	r3, #206	; 0xce
 80087e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80087e8:	e010      	b.n	800880c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80087ee:	6a3a      	ldr	r2, [r7, #32]
 80087f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087f2:	6838      	ldr	r0, [r7, #0]
 80087f4:	f7ff ff6a 	bl	80086cc <enable_spad_bit>
		currentSpad++;
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	3301      	adds	r3, #1
 80087fc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	3301      	adds	r3, #1
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
 8008804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008808:	429a      	cmp	r2, r3
 800880a:	d3cf      	bcc.n	80087ac <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800880c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880e:	6a3a      	ldr	r2, [r7, #32]
 8008810:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008812:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff ff8d 	bl	800873c <set_ref_spad_map>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008828:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800882c:	2b00      	cmp	r3, #0
 800882e:	d121      	bne.n	8008874 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008830:	f107 0314 	add.w	r3, r7, #20
 8008834:	4619      	mov	r1, r3
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7ff ff93 	bl	8008762 <get_ref_spad_map>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008846:	e011      	b.n	800886c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	4413      	add	r3, r2
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	f107 0114 	add.w	r1, r7, #20
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	440b      	add	r3, r1
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d003      	beq.n	8008866 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800885e:	23ce      	movs	r3, #206	; 0xce
 8008860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008864:	e006      	b.n	8008874 <enable_ref_spads+0xec>
			}
			i++;
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	3301      	adds	r3, #1
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800886c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	429a      	cmp	r2, r3
 8008872:	d3e9      	bcc.n	8008848 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008874:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008878:	4618      	mov	r0, r3
 800887a:	3730      	adds	r7, #48	; 0x30
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800888a:	2300      	movs	r3, #0
 800888c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800889c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80088a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80088a8:	22c0      	movs	r2, #192	; 0xc0
 80088aa:	2101      	movs	r1, #1
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f003 f867 	bl	800b980 <VL53L0X_WrByte>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80088b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d108      	bne.n	80088d2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80088c0:	f107 0308 	add.w	r3, r7, #8
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff fc18 	bl	80080fc <VL53L0X_PerformSingleRangingMeasurement>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80088d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d107      	bne.n	80088ea <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80088da:	2201      	movs	r2, #1
 80088dc:	21ff      	movs	r1, #255	; 0xff
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f003 f84e 	bl	800b980 <VL53L0X_WrByte>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80088ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d107      	bne.n	8008902 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	21b6      	movs	r1, #182	; 0xb6
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f003 f8ee 	bl	800bad8 <VL53L0X_RdWord>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008906:	2b00      	cmp	r3, #0
 8008908:	d107      	bne.n	800891a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800890a:	2200      	movs	r2, #0
 800890c:	21ff      	movs	r1, #255	; 0xff
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f003 f836 	bl	800b980 <VL53L0X_WrByte>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800891a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800891e:	2b00      	cmp	r3, #0
 8008920:	d112      	bne.n	8008948 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008926:	461a      	mov	r2, r3
 8008928:	2101      	movs	r1, #1
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f003 f828 	bl	800b980 <VL53L0X_WrByte>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008944:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800894c:	4618      	mov	r0, r3
 800894e:	3728      	adds	r7, #40	; 0x28
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008954:	b590      	push	{r4, r7, lr}
 8008956:	b09d      	sub	sp, #116	; 0x74
 8008958:	af06      	add	r7, sp, #24
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008966:	23b4      	movs	r3, #180	; 0xb4
 8008968:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800896c:	2303      	movs	r3, #3
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008970:	232c      	movs	r3, #44	; 0x2c
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008980:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008984:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800898e:	2306      	movs	r3, #6
 8008990:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80089b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80089ba:	2300      	movs	r3, #0
 80089bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80089be:	e009      	b.n	80089d4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80089ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d0:	3301      	adds	r3, #1
 80089d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	429a      	cmp	r2, r3
 80089da:	d3f1      	bcc.n	80089c0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80089dc:	2201      	movs	r2, #1
 80089de:	21ff      	movs	r1, #255	; 0xff
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f002 ffcd 	bl	800b980 <VL53L0X_WrByte>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80089ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d107      	bne.n	8008a04 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80089f4:	2200      	movs	r2, #0
 80089f6:	214f      	movs	r1, #79	; 0x4f
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f002 ffc1 	bl	800b980 <VL53L0X_WrByte>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008a04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d107      	bne.n	8008a1c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008a0c:	222c      	movs	r2, #44	; 0x2c
 8008a0e:	214e      	movs	r1, #78	; 0x4e
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f002 ffb5 	bl	800b980 <VL53L0X_WrByte>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008a1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d107      	bne.n	8008a34 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a24:	2200      	movs	r2, #0
 8008a26:	21ff      	movs	r1, #255	; 0xff
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f002 ffa9 	bl	800b980 <VL53L0X_WrByte>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008a34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d109      	bne.n	8008a50 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008a3c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008a40:	461a      	mov	r2, r3
 8008a42:	21b6      	movs	r1, #182	; 0xb6
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f002 ff9b 	bl	800b980 <VL53L0X_WrByte>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008a50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d107      	bne.n	8008a68 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2180      	movs	r1, #128	; 0x80
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f002 ff8f 	bl	800b980 <VL53L0X_WrByte>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008a68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008a70:	f107 0210 	add.w	r2, r7, #16
 8008a74:	f107 0111 	add.w	r1, r7, #17
 8008a78:	2300      	movs	r3, #0
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 fbbb 	bl	80091f6 <VL53L0X_perform_ref_calibration>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008a86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d121      	bne.n	8008ad2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a94:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008aaa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008aae:	f107 0218 	add.w	r2, r7, #24
 8008ab2:	9204      	str	r2, [sp, #16]
 8008ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab6:	9203      	str	r2, [sp, #12]
 8008ab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aba:	9202      	str	r2, [sp, #8]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff fe5e 	bl	8008788 <enable_ref_spads>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ad2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d174      	bne.n	8008bc4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008ade:	f107 0312 	add.w	r3, r7, #18
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff fecb 	bl	8008880 <perform_ref_signal_measurement>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008af0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d161      	bne.n	8008bbc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008af8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d25d      	bcs.n	8008bbc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b04:	e009      	b.n	8008b1a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b16:	3301      	adds	r3, #1
 8008b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d3f1      	bcc.n	8008b06 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008b22:	e002      	b.n	8008b2a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b26:	3301      	adds	r3, #1
 8008b28:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008b2a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b30:	4413      	add	r3, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff fdb0 	bl	8008698 <is_aperture>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d103      	bne.n	8008b46 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008b3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d3ee      	bcc.n	8008b24 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008b46:	2301      	movs	r3, #1
 8008b48:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b4c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008b5a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008b5e:	f107 0218 	add.w	r2, r7, #24
 8008b62:	9204      	str	r2, [sp, #16]
 8008b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b66:	9203      	str	r2, [sp, #12]
 8008b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b6a:	9202      	str	r2, [sp, #8]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4623      	mov	r3, r4
 8008b74:	4602      	mov	r2, r0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fe06 	bl	8008788 <enable_ref_spads>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008b82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d11b      	bne.n	8008bc2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008b8e:	f107 0312 	add.w	r3, r7, #18
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff fe73 	bl	8008880 <perform_ref_signal_measurement>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008ba0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10c      	bne.n	8008bc2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008ba8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008baa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d208      	bcs.n	8008bc2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008bba:	e002      	b.n	8008bc2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc0:	e000      	b.n	8008bc4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008bc2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008bc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f040 80af 	bne.w	8008d2c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008bce:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008bd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f240 80aa 	bls.w	8008d2c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008be8:	f107 031c 	add.w	r3, r7, #28
 8008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f006 fa26 	bl	800f040 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008bf4:	8a7b      	ldrh	r3, [r7, #18]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfb8      	it	lt
 8008c00:	425b      	neglt	r3, r3
 8008c02:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008c0a:	e086      	b.n	8008d1a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008c12:	f107 0314 	add.w	r3, r7, #20
 8008c16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c1a:	f7ff fcdf 	bl	80085dc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d103      	bne.n	8008c2e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008c26:	23ce      	movs	r3, #206	; 0xce
 8008c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008c2c:	e07e      	b.n	8008d2c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008c2e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7ff fd2e 	bl	8008698 <is_aperture>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d003      	beq.n	8008c4e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008c4c:	e06e      	b.n	8008d2c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c50:	3301      	adds	r3, #1
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fd32 	bl	80086cc <enable_spad_bit>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008c6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10c      	bne.n	8008c90 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c78:	3301      	adds	r3, #1
 8008c7a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008c82:	4619      	mov	r1, r3
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff fd59 	bl	800873c <set_ref_spad_map>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008c90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d146      	bne.n	8008d26 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008c98:	f107 0312 	add.w	r3, r7, #18
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff fdee 	bl	8008880 <perform_ref_signal_measurement>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008caa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d13b      	bne.n	8008d2a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008cb2:	8a7b      	ldrh	r3, [r7, #18]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfb8      	it	lt
 8008cbe:	425b      	neglt	r3, r3
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008cc2:	8a7b      	ldrh	r3, [r7, #18]
 8008cc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d21c      	bcs.n	8008d04 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d914      	bls.n	8008cfc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008cd2:	f107 031c 	add.w	r3, r7, #28
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff fd2f 	bl	800873c <set_ref_spad_map>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008cea:	f107 011c 	add.w	r1, r7, #28
 8008cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f006 f9a5 	bl	800f040 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d02:	e00a      	b.n	8008d1a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008d0e:	f107 031c 	add.w	r3, r7, #28
 8008d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d14:	4618      	mov	r0, r3
 8008d16:	f006 f993 	bl	800f040 <memcpy>
		while (!complete) {
 8008d1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f43f af74 	beq.w	8008c0c <VL53L0X_perform_ref_spad_management+0x2b8>
 8008d24:	e002      	b.n	8008d2c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008d26:	bf00      	nop
 8008d28:	e000      	b.n	8008d2c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008d2a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d115      	bne.n	8008d60 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d38:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008d40:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008d60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	375c      	adds	r7, #92	; 0x5c
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}

08008d6c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008d6c:	b590      	push	{r4, r7, lr}
 8008d6e:	b093      	sub	sp, #76	; 0x4c
 8008d70:	af06      	add	r7, sp, #24
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008d84:	23b4      	movs	r3, #180	; 0xb4
 8008d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008d8e:	232c      	movs	r3, #44	; 0x2c
 8008d90:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d92:	2201      	movs	r2, #1
 8008d94:	21ff      	movs	r1, #255	; 0xff
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f002 fdf2 	bl	800b980 <VL53L0X_WrByte>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008da2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d107      	bne.n	8008dba <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008daa:	2200      	movs	r2, #0
 8008dac:	214f      	movs	r1, #79	; 0x4f
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f002 fde6 	bl	800b980 <VL53L0X_WrByte>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008dba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d107      	bne.n	8008dd2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008dc2:	222c      	movs	r2, #44	; 0x2c
 8008dc4:	214e      	movs	r1, #78	; 0x4e
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f002 fdda 	bl	800b980 <VL53L0X_WrByte>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008dd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d107      	bne.n	8008dea <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008dda:	2200      	movs	r2, #0
 8008ddc:	21ff      	movs	r1, #255	; 0xff
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f002 fdce 	bl	800b980 <VL53L0X_WrByte>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008dea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d109      	bne.n	8008e06 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008df6:	461a      	mov	r2, r3
 8008df8:	21b6      	movs	r1, #182	; 0xb6
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f002 fdc0 	bl	800b980 <VL53L0X_WrByte>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
 8008e0a:	e009      	b.n	8008e20 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d3f1      	bcc.n	8008e0c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d011      	beq.n	8008e52 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008e2e:	e002      	b.n	8008e36 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	3301      	adds	r3, #1
 8008e34:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008e36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	4413      	add	r3, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fc2a 	bl	8008698 <is_aperture>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d103      	bne.n	8008e52 <VL53L0X_set_reference_spads+0xe6>
 8008e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3ee      	bcc.n	8008e30 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e62:	79f9      	ldrb	r1, [r7, #7]
 8008e64:	f107 0214 	add.w	r2, r7, #20
 8008e68:	9204      	str	r2, [sp, #16]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	9203      	str	r2, [sp, #12]
 8008e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e70:	9202      	str	r2, [sp, #8]
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4623      	mov	r3, r4
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fc83 	bl	8008788 <enable_ref_spads>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008e88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10c      	bne.n	8008eaa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	79fa      	ldrb	r2, [r7, #7]
 8008ea6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008eaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3734      	adds	r7, #52	; 0x34
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd90      	pop	{r4, r7, pc}

08008eb6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2100      	movs	r1, #0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f002 fd50 	bl	800b980 <VL53L0X_WrByte>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f9bf 	bl	8009270 <VL53L0X_measurement_poll_for_completion>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d105      	bne.n	8008f0a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008efe:	2100      	movs	r1, #0
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fa85 	bl	8008410 <VL53L0X_ClearInterruptMask>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f002 fd32 	bl	800b980 <VL53L0X_WrByte>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	4608      	mov	r0, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	70fb      	strb	r3, [r7, #3]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70bb      	strb	r3, [r7, #2]
 8008f42:	4613      	mov	r3, r2
 8008f44:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f4e:	2201      	movs	r2, #1
 8008f50:	21ff      	movs	r1, #255	; 0xff
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f002 fd14 	bl	800b980 <VL53L0X_WrByte>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008f62:	2200      	movs	r2, #0
 8008f64:	2100      	movs	r1, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f002 fd0a 	bl	800b980 <VL53L0X_WrByte>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f76:	2200      	movs	r2, #0
 8008f78:	21ff      	movs	r1, #255	; 0xff
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f002 fd00 	bl	800b980 <VL53L0X_WrByte>
 8008f80:	4603      	mov	r3, r0
 8008f82:	461a      	mov	r2, r3
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01e      	beq.n	8008fce <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	21cb      	movs	r1, #203	; 0xcb
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f002 fd71 	bl	800ba84 <VL53L0X_RdByte>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d02a      	beq.n	800900a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008fb4:	f107 030e 	add.w	r3, r7, #14
 8008fb8:	461a      	mov	r2, r3
 8008fba:	21ee      	movs	r1, #238	; 0xee
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f002 fd61 	bl	800ba84 <VL53L0X_RdByte>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	73fb      	strb	r3, [r7, #15]
 8008fcc:	e01d      	b.n	800900a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008fd6:	78bb      	ldrb	r3, [r7, #2]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	21cb      	movs	r1, #203	; 0xcb
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f002 fccf 	bl	800b980 <VL53L0X_WrByte>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008fec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	2280      	movs	r2, #128	; 0x80
 8008ff8:	21ee      	movs	r1, #238	; 0xee
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f002 fd0e 	bl	800ba1c <VL53L0X_UpdateByte>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4313      	orrs	r3, r2
 8009008:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800900a:	2201      	movs	r2, #1
 800900c:	21ff      	movs	r1, #255	; 0xff
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f002 fcb6 	bl	800b980 <VL53L0X_WrByte>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4313      	orrs	r3, r2
 800901c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800901e:	2201      	movs	r2, #1
 8009020:	2100      	movs	r1, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f002 fcac 	bl	800b980 <VL53L0X_WrByte>
 8009028:	4603      	mov	r3, r0
 800902a:	461a      	mov	r2, r3
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	4313      	orrs	r3, r2
 8009030:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009032:	2200      	movs	r2, #0
 8009034:	21ff      	movs	r1, #255	; 0xff
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f002 fca2 	bl	800b980 <VL53L0X_WrByte>
 800903c:	4603      	mov	r3, r0
 800903e:	461a      	mov	r2, r3
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	4313      	orrs	r3, r2
 8009044:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	f023 0310 	bic.w	r3, r3, #16
 800904c:	b2da      	uxtb	r2, r3
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	701a      	strb	r2, [r3, #0]

	return Status;
 8009052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b08a      	sub	sp, #40	; 0x28
 8009062:	af04      	add	r7, sp, #16
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	4611      	mov	r1, r2
 800906a:	461a      	mov	r2, r3
 800906c:	460b      	mov	r3, r1
 800906e:	71fb      	strb	r3, [r7, #7]
 8009070:	4613      	mov	r3, r2
 8009072:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009074:	2300      	movs	r3, #0
 8009076:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009088:	79bb      	ldrb	r3, [r7, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009094:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009096:	2201      	movs	r2, #1
 8009098:	2101      	movs	r1, #1
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f002 fc70 	bl	800b980 <VL53L0X_WrByte>
 80090a0:	4603      	mov	r3, r0
 80090a2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80090a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d105      	bne.n	80090b8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80090ac:	2140      	movs	r1, #64	; 0x40
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff ff01 	bl	8008eb6 <VL53L0X_perform_single_ref_calibration>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80090b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d115      	bne.n	80090ec <VL53L0X_perform_vhv_calibration+0x8e>
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d112      	bne.n	80090ec <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80090c6:	7d39      	ldrb	r1, [r7, #20]
 80090c8:	7d7a      	ldrb	r2, [r7, #21]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	2301      	movs	r3, #1
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	f107 0313 	add.w	r3, r7, #19
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	460b      	mov	r3, r1
 80090de:	2101      	movs	r1, #1
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff ff23 	bl	8008f2c <VL53L0X_ref_calibration_io>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]
 80090ea:	e002      	b.n	80090f2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80090f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d112      	bne.n	8009120 <VL53L0X_perform_vhv_calibration+0xc2>
 80090fa:	79bb      	ldrb	r3, [r7, #6]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00f      	beq.n	8009120 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009100:	7dbb      	ldrb	r3, [r7, #22]
 8009102:	461a      	mov	r2, r3
 8009104:	2101      	movs	r1, #1
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f002 fc3a 	bl	800b980 <VL53L0X_WrByte>
 800910c:	4603      	mov	r3, r0
 800910e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	7dba      	ldrb	r2, [r7, #22]
 800911c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08a      	sub	sp, #40	; 0x28
 8009130:	af04      	add	r7, sp, #16
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4611      	mov	r1, r2
 8009138:	461a      	mov	r2, r3
 800913a:	460b      	mov	r3, r1
 800913c:	71fb      	strb	r3, [r7, #7]
 800913e:	4613      	mov	r3, r2
 8009140:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009152:	79bb      	ldrb	r3, [r7, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800915e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009160:	2202      	movs	r2, #2
 8009162:	2101      	movs	r1, #1
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f002 fc0b 	bl	800b980 <VL53L0X_WrByte>
 800916a:	4603      	mov	r3, r0
 800916c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800916e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d105      	bne.n	8009182 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009176:	2100      	movs	r1, #0
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff fe9c 	bl	8008eb6 <VL53L0X_perform_single_ref_calibration>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d115      	bne.n	80091b6 <VL53L0X_perform_phase_calibration+0x8a>
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d112      	bne.n	80091b6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009190:	7d39      	ldrb	r1, [r7, #20]
 8009192:	7d7a      	ldrb	r2, [r7, #21]
 8009194:	2301      	movs	r3, #1
 8009196:	9303      	str	r3, [sp, #12]
 8009198:	2300      	movs	r3, #0
 800919a:	9302      	str	r3, [sp, #8]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	f107 0313 	add.w	r3, r7, #19
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	460b      	mov	r3, r1
 80091a8:	2101      	movs	r1, #1
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff febe 	bl	8008f2c <VL53L0X_ref_calibration_io>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75fb      	strb	r3, [r7, #23]
 80091b4:	e002      	b.n	80091bc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80091bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d112      	bne.n	80091ea <VL53L0X_perform_phase_calibration+0xbe>
 80091c4:	79bb      	ldrb	r3, [r7, #6]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00f      	beq.n	80091ea <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80091ca:	7dbb      	ldrb	r3, [r7, #22]
 80091cc:	461a      	mov	r2, r3
 80091ce:	2101      	movs	r1, #1
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f002 fbd5 	bl	800b980 <VL53L0X_WrByte>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80091da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	7dba      	ldrb	r2, [r7, #22]
 80091e6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80091ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b086      	sub	sp, #24
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	60b9      	str	r1, [r7, #8]
 8009200:	607a      	str	r2, [r7, #4]
 8009202:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009212:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009214:	78fa      	ldrb	r2, [r7, #3]
 8009216:	2300      	movs	r3, #0
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f7ff ff1f 	bl	800905e <VL53L0X_perform_vhv_calibration>
 8009220:	4603      	mov	r3, r0
 8009222:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d107      	bne.n	800923c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	2300      	movs	r3, #0
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff ff7a 	bl	800912c <VL53L0X_perform_phase_calibration>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800923c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10f      	bne.n	8009264 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009244:	7dbb      	ldrb	r3, [r7, #22]
 8009246:	461a      	mov	r2, r3
 8009248:	2101      	movs	r1, #1
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f002 fb98 	bl	800b980 <VL53L0X_WrByte>
 8009250:	4603      	mov	r3, r0
 8009252:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	7dba      	ldrb	r2, [r7, #22]
 8009260:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009264:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009278:	2300      	movs	r3, #0
 800927a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009284:	f107 030f 	add.w	r3, r7, #15
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe fdd2 	bl	8007e34 <VL53L0X_GetMeasurementDataReady>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d110      	bne.n	80092be <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d00f      	beq.n	80092c2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3301      	adds	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80092ae:	d302      	bcc.n	80092b6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80092b0:	23f9      	movs	r3, #249	; 0xf9
 80092b2:	75fb      	strb	r3, [r7, #23]
			break;
 80092b4:	e006      	b.n	80092c4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f002 fc82 	bl	800bbc0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80092bc:	e7e2      	b.n	8009284 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80092be:	bf00      	nop
 80092c0:	e000      	b.n	80092c4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80092c2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80092c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	3301      	adds	r3, #1
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	4603      	mov	r3, r0
 80092fe:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	085b      	lsrs	r3, r3, #1
 8009308:	b2db      	uxtb	r3, r3
 800930a:	3b01      	subs	r3, #1
 800930c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800932c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800932e:	e002      	b.n	8009336 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	089b      	lsrs	r3, r3, #2
 8009334:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	429a      	cmp	r2, r3
 800933c:	d8f8      	bhi.n	8009330 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800933e:	e017      	b.n	8009370 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4413      	add	r3, r2
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d30b      	bcc.n	8009364 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	4413      	add	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	e002      	b.n	800936a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	089b      	lsrs	r3, r3, #2
 800936e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e4      	bne.n	8009340 <VL53L0X_isqrt+0x24>
	}

	return res;
 8009376:	68fb      	ldr	r3, [r7, #12]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009390:	2200      	movs	r2, #0
 8009392:	2183      	movs	r1, #131	; 0x83
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f002 faf3 	bl	800b980 <VL53L0X_WrByte>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80093a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11e      	bne.n	80093ea <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80093b0:	f107 030f 	add.w	r3, r7, #15
 80093b4:	461a      	mov	r2, r3
 80093b6:	2183      	movs	r1, #131	; 0x83
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f002 fb63 	bl	800ba84 <VL53L0X_RdByte>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <VL53L0X_device_read_strobe+0x5a>
 80093c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d106      	bne.n	80093de <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3301      	adds	r3, #1
 80093d4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80093dc:	d3e8      	bcc.n	80093b0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80093e4:	d301      	bcc.n	80093ea <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80093e6:	23f9      	movs	r3, #249	; 0xf9
 80093e8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80093ea:	2201      	movs	r2, #1
 80093ec:	2183      	movs	r1, #131	; 0x83
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f002 fac6 	bl	800b980 <VL53L0X_WrByte>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80093fe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b098      	sub	sp, #96	; 0x60
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009416:	2300      	movs	r3, #0
 8009418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800943a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800943e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800945a:	2b07      	cmp	r3, #7
 800945c:	f000 8408 	beq.w	8009c70 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009460:	2201      	movs	r2, #1
 8009462:	2180      	movs	r1, #128	; 0x80
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f002 fa8b 	bl	800b980 <VL53L0X_WrByte>
 800946a:	4603      	mov	r3, r0
 800946c:	461a      	mov	r2, r3
 800946e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009472:	4313      	orrs	r3, r2
 8009474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009478:	2201      	movs	r2, #1
 800947a:	21ff      	movs	r1, #255	; 0xff
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f002 fa7f 	bl	800b980 <VL53L0X_WrByte>
 8009482:	4603      	mov	r3, r0
 8009484:	461a      	mov	r2, r3
 8009486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800948a:	4313      	orrs	r3, r2
 800948c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f002 fa73 	bl	800b980 <VL53L0X_WrByte>
 800949a:	4603      	mov	r3, r0
 800949c:	461a      	mov	r2, r3
 800949e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80094a8:	2206      	movs	r2, #6
 80094aa:	21ff      	movs	r1, #255	; 0xff
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f002 fa67 	bl	800b980 <VL53L0X_WrByte>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80094c0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80094c4:	461a      	mov	r2, r3
 80094c6:	2183      	movs	r1, #131	; 0x83
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f002 fadb 	bl	800ba84 <VL53L0X_RdByte>
 80094ce:	4603      	mov	r3, r0
 80094d0:	461a      	mov	r2, r3
 80094d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d6:	4313      	orrs	r3, r2
 80094d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80094dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094e0:	f043 0304 	orr.w	r3, r3, #4
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	2183      	movs	r1, #131	; 0x83
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f002 fa48 	bl	800b980 <VL53L0X_WrByte>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80094fe:	2207      	movs	r2, #7
 8009500:	21ff      	movs	r1, #255	; 0xff
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f002 fa3c 	bl	800b980 <VL53L0X_WrByte>
 8009508:	4603      	mov	r3, r0
 800950a:	461a      	mov	r2, r3
 800950c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009510:	4313      	orrs	r3, r2
 8009512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009516:	2201      	movs	r2, #1
 8009518:	2181      	movs	r1, #129	; 0x81
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f002 fa30 	bl	800b980 <VL53L0X_WrByte>
 8009520:	4603      	mov	r3, r0
 8009522:	461a      	mov	r2, r3
 8009524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009528:	4313      	orrs	r3, r2
 800952a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 fb46 	bl	800bbc0 <VL53L0X_PollingDelay>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800953c:	4313      	orrs	r3, r2
 800953e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009542:	2201      	movs	r2, #1
 8009544:	2180      	movs	r1, #128	; 0x80
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f002 fa1a 	bl	800b980 <VL53L0X_WrByte>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009554:	4313      	orrs	r3, r2
 8009556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 8098 	beq.w	8009696 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800956a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800956e:	2b00      	cmp	r3, #0
 8009570:	f040 8091 	bne.w	8009696 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009574:	226b      	movs	r2, #107	; 0x6b
 8009576:	2194      	movs	r1, #148	; 0x94
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f002 fa01 	bl	800b980 <VL53L0X_WrByte>
 800957e:	4603      	mov	r3, r0
 8009580:	461a      	mov	r2, r3
 8009582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009586:	4313      	orrs	r3, r2
 8009588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff fef9 	bl	8009384 <VL53L0X_device_read_strobe>
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800959a:	4313      	orrs	r3, r2
 800959c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095a4:	461a      	mov	r2, r3
 80095a6:	2190      	movs	r1, #144	; 0x90
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f002 facd 	bl	800bb48 <VL53L0X_RdDWord>
 80095ae:	4603      	mov	r3, r0
 80095b0:	461a      	mov	r2, r3
 80095b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b6:	4313      	orrs	r3, r2
 80095b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	0bdb      	lsrs	r3, r3, #15
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80095d8:	2224      	movs	r2, #36	; 0x24
 80095da:	2194      	movs	r1, #148	; 0x94
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f002 f9cf 	bl	800b980 <VL53L0X_WrByte>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff fec7 	bl	8009384 <VL53L0X_device_read_strobe>
 80095f6:	4603      	mov	r3, r0
 80095f8:	461a      	mov	r2, r3
 80095fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095fe:	4313      	orrs	r3, r2
 8009600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009608:	461a      	mov	r2, r3
 800960a:	2190      	movs	r1, #144	; 0x90
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f002 fa9b 	bl	800bb48 <VL53L0X_RdDWord>
 8009612:	4603      	mov	r3, r0
 8009614:	461a      	mov	r2, r3
 8009616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800961a:	4313      	orrs	r3, r2
 800961c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	b2db      	uxtb	r3, r3
 8009626:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	0c1b      	lsrs	r3, r3, #16
 800962c:	b2db      	uxtb	r3, r3
 800962e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	b2db      	uxtb	r3, r3
 8009636:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	b2db      	uxtb	r3, r3
 800963c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800963e:	2225      	movs	r2, #37	; 0x25
 8009640:	2194      	movs	r1, #148	; 0x94
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f002 f99c 	bl	800b980 <VL53L0X_WrByte>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009650:	4313      	orrs	r3, r2
 8009652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff fe94 	bl	8009384 <VL53L0X_device_read_strobe>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009664:	4313      	orrs	r3, r2
 8009666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800966a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800966e:	461a      	mov	r2, r3
 8009670:	2190      	movs	r1, #144	; 0x90
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f002 fa68 	bl	800bb48 <VL53L0X_RdDWord>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009680:	4313      	orrs	r3, r2
 8009682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	0e1b      	lsrs	r3, r3, #24
 800968a:	b2db      	uxtb	r3, r3
 800968c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	0c1b      	lsrs	r3, r3, #16
 8009692:	b2db      	uxtb	r3, r3
 8009694:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8189 	beq.w	80099b4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80096a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096a6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f040 8182 	bne.w	80099b4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80096b0:	2202      	movs	r2, #2
 80096b2:	2194      	movs	r1, #148	; 0x94
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f002 f963 	bl	800b980 <VL53L0X_WrByte>
 80096ba:	4603      	mov	r3, r0
 80096bc:	461a      	mov	r2, r3
 80096be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c2:	4313      	orrs	r3, r2
 80096c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff fe5b 	bl	8009384 <VL53L0X_device_read_strobe>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096d6:	4313      	orrs	r3, r2
 80096d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80096dc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80096e0:	461a      	mov	r2, r3
 80096e2:	2190      	movs	r1, #144	; 0x90
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 f9cd 	bl	800ba84 <VL53L0X_RdByte>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80096f8:	227b      	movs	r2, #123	; 0x7b
 80096fa:	2194      	movs	r1, #148	; 0x94
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f002 f93f 	bl	800b980 <VL53L0X_WrByte>
 8009702:	4603      	mov	r3, r0
 8009704:	461a      	mov	r2, r3
 8009706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800970a:	4313      	orrs	r3, r2
 800970c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fe37 	bl	8009384 <VL53L0X_device_read_strobe>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800971e:	4313      	orrs	r3, r2
 8009720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009724:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009728:	461a      	mov	r2, r3
 800972a:	2190      	movs	r1, #144	; 0x90
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f002 f9a9 	bl	800ba84 <VL53L0X_RdByte>
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800973a:	4313      	orrs	r3, r2
 800973c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009740:	2277      	movs	r2, #119	; 0x77
 8009742:	2194      	movs	r1, #148	; 0x94
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f002 f91b 	bl	800b980 <VL53L0X_WrByte>
 800974a:	4603      	mov	r3, r0
 800974c:	461a      	mov	r2, r3
 800974e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009752:	4313      	orrs	r3, r2
 8009754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff fe13 	bl	8009384 <VL53L0X_device_read_strobe>
 800975e:	4603      	mov	r3, r0
 8009760:	461a      	mov	r2, r3
 8009762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009766:	4313      	orrs	r3, r2
 8009768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800976c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009770:	461a      	mov	r2, r3
 8009772:	2190      	movs	r1, #144	; 0x90
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f002 f9e7 	bl	800bb48 <VL53L0X_RdDWord>
 800977a:	4603      	mov	r3, r0
 800977c:	461a      	mov	r2, r3
 800977e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009782:	4313      	orrs	r3, r2
 8009784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	0e5b      	lsrs	r3, r3, #25
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009792:	b2db      	uxtb	r3, r3
 8009794:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	0c9b      	lsrs	r3, r3, #18
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	0adb      	lsrs	r3, r3, #11
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	091b      	lsrs	r3, r3, #4
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80097d2:	2278      	movs	r2, #120	; 0x78
 80097d4:	2194      	movs	r1, #148	; 0x94
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f002 f8d2 	bl	800b980 <VL53L0X_WrByte>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff fdca 	bl	8009384 <VL53L0X_device_read_strobe>
 80097f0:	4603      	mov	r3, r0
 80097f2:	461a      	mov	r2, r3
 80097f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097f8:	4313      	orrs	r3, r2
 80097fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009802:	461a      	mov	r2, r3
 8009804:	2190      	movs	r1, #144	; 0x90
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f002 f99e 	bl	800bb48 <VL53L0X_RdDWord>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009814:	4313      	orrs	r3, r2
 8009816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	0f5b      	lsrs	r3, r3, #29
 800981e:	b2db      	uxtb	r3, r3
 8009820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009824:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800982a:	4413      	add	r3, r2
 800982c:	b2db      	uxtb	r3, r3
 800982e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	0d9b      	lsrs	r3, r3, #22
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983a:	b2db      	uxtb	r3, r3
 800983c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	0bdb      	lsrs	r3, r3, #15
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009848:	b2db      	uxtb	r3, r3
 800984a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009856:	b2db      	uxtb	r3, r3
 8009858:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009864:	b2db      	uxtb	r3, r3
 8009866:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	b2db      	uxtb	r3, r3
 800986c:	019b      	lsls	r3, r3, #6
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800987a:	2279      	movs	r2, #121	; 0x79
 800987c:	2194      	movs	r1, #148	; 0x94
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f002 f87e 	bl	800b980 <VL53L0X_WrByte>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800988c:	4313      	orrs	r3, r2
 800988e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fd76 	bl	8009384 <VL53L0X_device_read_strobe>
 8009898:	4603      	mov	r3, r0
 800989a:	461a      	mov	r2, r3
 800989c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098a0:	4313      	orrs	r3, r2
 80098a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80098a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80098aa:	461a      	mov	r2, r3
 80098ac:	2190      	movs	r1, #144	; 0x90
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f002 f94a 	bl	800bb48 <VL53L0X_RdDWord>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098bc:	4313      	orrs	r3, r2
 80098be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	0e9b      	lsrs	r3, r3, #26
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098cc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80098ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098d2:	4413      	add	r3, r2
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	0cdb      	lsrs	r3, r3, #19
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	0b1b      	lsrs	r3, r3, #12
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	095b      	lsrs	r3, r3, #5
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	b2db      	uxtb	r3, r3
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	b2db      	uxtb	r3, r3
 800990a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009914:	227a      	movs	r2, #122	; 0x7a
 8009916:	2194      	movs	r1, #148	; 0x94
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f002 f831 	bl	800b980 <VL53L0X_WrByte>
 800991e:	4603      	mov	r3, r0
 8009920:	461a      	mov	r2, r3
 8009922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009926:	4313      	orrs	r3, r2
 8009928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff fd29 	bl	8009384 <VL53L0X_device_read_strobe>
 8009932:	4603      	mov	r3, r0
 8009934:	461a      	mov	r2, r3
 8009936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800993a:	4313      	orrs	r3, r2
 800993c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009944:	461a      	mov	r2, r3
 8009946:	2190      	movs	r1, #144	; 0x90
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f002 f8fd 	bl	800bb48 <VL53L0X_RdDWord>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009956:	4313      	orrs	r3, r2
 8009958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	0f9b      	lsrs	r3, r3, #30
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009966:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800996c:	4413      	add	r3, r2
 800996e:	b2db      	uxtb	r3, r3
 8009970:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	0ddb      	lsrs	r3, r3, #23
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997c:	b2db      	uxtb	r3, r3
 800997e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998a:	b2db      	uxtb	r3, r3
 800998c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	0a5b      	lsrs	r3, r3, #9
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	089b      	lsrs	r3, r3, #2
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80099ae:	2300      	movs	r3, #0
 80099b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	f003 0304 	and.w	r3, r3, #4
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 80f1 	beq.w	8009ba2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80099c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80099c4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f040 80ea 	bne.w	8009ba2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80099ce:	227b      	movs	r2, #123	; 0x7b
 80099d0:	2194      	movs	r1, #148	; 0x94
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 ffd4 	bl	800b980 <VL53L0X_WrByte>
 80099d8:	4603      	mov	r3, r0
 80099da:	461a      	mov	r2, r3
 80099dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e0:	4313      	orrs	r3, r2
 80099e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff fccc 	bl	8009384 <VL53L0X_device_read_strobe>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80099fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099fe:	461a      	mov	r2, r3
 8009a00:	2190      	movs	r1, #144	; 0x90
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f002 f8a0 	bl	800bb48 <VL53L0X_RdDWord>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a10:	4313      	orrs	r3, r2
 8009a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009a16:	227c      	movs	r2, #124	; 0x7c
 8009a18:	2194      	movs	r1, #148	; 0x94
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 ffb0 	bl	800b980 <VL53L0X_WrByte>
 8009a20:	4603      	mov	r3, r0
 8009a22:	461a      	mov	r2, r3
 8009a24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fca8 	bl	8009384 <VL53L0X_device_read_strobe>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a46:	461a      	mov	r2, r3
 8009a48:	2190      	movs	r1, #144	; 0x90
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f002 f87c 	bl	800bb48 <VL53L0X_RdDWord>
 8009a50:	4603      	mov	r3, r0
 8009a52:	461a      	mov	r2, r3
 8009a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009a5e:	2273      	movs	r2, #115	; 0x73
 8009a60:	2194      	movs	r1, #148	; 0x94
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 ff8c 	bl	800b980 <VL53L0X_WrByte>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a70:	4313      	orrs	r3, r2
 8009a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff fc84 	bl	8009384 <VL53L0X_device_read_strobe>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2190      	movs	r1, #144	; 0x90
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f002 f858 	bl	800bb48 <VL53L0X_RdDWord>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009aae:	2274      	movs	r2, #116	; 0x74
 8009ab0:	2194      	movs	r1, #148	; 0x94
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 ff64 	bl	800b980 <VL53L0X_WrByte>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff fc5c 	bl	8009384 <VL53L0X_device_read_strobe>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ade:	461a      	mov	r2, r3
 8009ae0:	2190      	movs	r1, #144	; 0x90
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f002 f830 	bl	800bb48 <VL53L0X_RdDWord>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009af0:	4313      	orrs	r3, r2
 8009af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009afa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009afc:	4313      	orrs	r3, r2
 8009afe:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009b00:	2275      	movs	r2, #117	; 0x75
 8009b02:	2194      	movs	r1, #148	; 0x94
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 ff3b 	bl	800b980 <VL53L0X_WrByte>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b12:	4313      	orrs	r3, r2
 8009b14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff fc33 	bl	8009384 <VL53L0X_device_read_strobe>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	461a      	mov	r2, r3
 8009b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b26:	4313      	orrs	r3, r2
 8009b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b30:	461a      	mov	r2, r3
 8009b32:	2190      	movs	r1, #144	; 0x90
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f002 f807 	bl	800bb48 <VL53L0X_RdDWord>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009b50:	2276      	movs	r2, #118	; 0x76
 8009b52:	2194      	movs	r1, #148	; 0x94
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 ff13 	bl	800b980 <VL53L0X_WrByte>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fc0b 	bl	8009384 <VL53L0X_device_read_strobe>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	461a      	mov	r2, r3
 8009b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b80:	461a      	mov	r2, r3
 8009b82:	2190      	movs	r1, #144	; 0x90
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 ffdf 	bl	800bb48 <VL53L0X_RdDWord>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b92:	4313      	orrs	r3, r2
 8009b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2181      	movs	r1, #129	; 0x81
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 feea 	bl	800b980 <VL53L0X_WrByte>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009bba:	2206      	movs	r2, #6
 8009bbc:	21ff      	movs	r1, #255	; 0xff
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 fede 	bl	800b980 <VL53L0X_WrByte>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009bd2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2183      	movs	r1, #131	; 0x83
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 ff52 	bl	800ba84 <VL53L0X_RdByte>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bf2:	f023 0304 	bic.w	r3, r3, #4
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	2183      	movs	r1, #131	; 0x83
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 febf 	bl	800b980 <VL53L0X_WrByte>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c10:	2201      	movs	r2, #1
 8009c12:	21ff      	movs	r1, #255	; 0xff
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 feb3 	bl	800b980 <VL53L0X_WrByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009c28:	2201      	movs	r2, #1
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fea7 	bl	800b980 <VL53L0X_WrByte>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c40:	2200      	movs	r2, #0
 8009c42:	21ff      	movs	r1, #255	; 0xff
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 fe9b 	bl	800b980 <VL53L0X_WrByte>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2180      	movs	r1, #128	; 0x80
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 fe8f 	bl	800b980 <VL53L0X_WrByte>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009c70:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f040 808f 	bne.w	8009d98 <VL53L0X_get_info_from_device+0x98e>
 8009c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c7e:	2b07      	cmp	r3, #7
 8009c80:	f000 808a 	beq.w	8009d98 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d024      	beq.n	8009cd8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009c8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c92:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d11e      	bne.n	8009cd8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009ca0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009caa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009cae:	2300      	movs	r3, #0
 8009cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb2:	e00e      	b.n	8009cd2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009cb4:	f107 0208 	add.w	r2, r7, #8
 8009cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cba:	4413      	add	r3, r2
 8009cbc:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009cc8:	460a      	mov	r2, r1
 8009cca:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cce:	3301      	adds	r3, #1
 8009cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd4:	2b05      	cmp	r3, #5
 8009cd6:	dded      	ble.n	8009cb4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d018      	beq.n	8009d14 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009ce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ce6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d112      	bne.n	8009d14 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009cee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009cf8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	33f3      	adds	r3, #243	; 0xf3
 8009d06:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009d08:	f107 0310 	add.w	r3, r7, #16
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d10:	f005 ff26 	bl	800fb60 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d030      	beq.n	8009d80 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009d1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d22:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d12a      	bne.n	8009d80 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d3c:	025b      	lsls	r3, r3, #9
 8009d3e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d44:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d011      	beq.n	8009d78 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
 8009d66:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009d68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009d6c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009d70:	425b      	negs	r3, r3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009d78:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009d80:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009d8e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d98:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3760      	adds	r7, #96	; 0x60
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009db0:	f240 6277 	movw	r2, #1655	; 0x677
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009dbc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009dc0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d017      	beq.n	8009e2a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009e00:	e005      	b.n	8009e0e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009e08:	89fb      	ldrh	r3, [r7, #14]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1f4      	bne.n	8009e02 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009e18:	89fb      	ldrh	r3, [r7, #14]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009e26:	4413      	add	r3, r2
 8009e28:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009e2a:	8afb      	ldrh	r3, [r7, #22]

}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009e46:	88fb      	ldrh	r3, [r7, #6]
 8009e48:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009e4a:	88fa      	ldrh	r2, [r7, #6]
 8009e4c:	0a12      	lsrs	r2, r2, #8
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009e56:	68fb      	ldr	r3, [r7, #12]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7ff ff92 	bl	8009da4 <VL53L0X_calc_macro_period_ps>
 8009e80:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009e88:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <VL53L0X_calc_timeout_mclks+0x50>)
 8009e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8e:	099b      	lsrs	r3, r3, #6
 8009e90:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e98:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	085b      	lsrs	r3, r3, #1
 8009ea0:	441a      	add	r2, r3
	timeout_period_mclks =
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3720      	adds	r7, #32
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	10624dd3 	.word	0x10624dd3

08009eb8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	807b      	strh	r3, [r7, #2]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009ecc:	787b      	ldrb	r3, [r7, #1]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff67 	bl	8009da4 <VL53L0X_calc_macro_period_ps>
 8009ed6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ede:	4a0a      	ldr	r2, [pc, #40]	; (8009f08 <VL53L0X_calc_timeout_us+0x50>)
 8009ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee4:	099b      	lsrs	r3, r3, #6
 8009ee6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009ee8:	887b      	ldrh	r3, [r7, #2]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	fb02 f303 	mul.w	r3, r2, r3
 8009ef0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009ef4:	4a04      	ldr	r2, [pc, #16]	; (8009f08 <VL53L0X_calc_timeout_us+0x50>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	099b      	lsrs	r3, r3, #6
 8009efc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009efe:	697b      	ldr	r3, [r7, #20]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	10624dd3 	.word	0x10624dd3

08009f0c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08c      	sub	sp, #48	; 0x30
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	460b      	mov	r3, r1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <get_sequence_step_timeout+0x38>
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d002      	beq.n	8009f44 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009f3e:	7afb      	ldrb	r3, [r7, #11]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d128      	bne.n	8009f96 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f44:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7fd fa4d 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009f58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009f60:	f107 0320 	add.w	r3, r7, #32
 8009f64:	461a      	mov	r2, r3
 8009f66:	2146      	movs	r1, #70	; 0x46
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f001 fd8b 	bl	800ba84 <VL53L0X_RdByte>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009f74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff ff5c 	bl	8009e38 <VL53L0X_decode_timeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009f84:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009f88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff ff93 	bl	8009eb8 <VL53L0X_calc_timeout_us>
 8009f92:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f94:	e092      	b.n	800a0bc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d135      	bne.n	800a008 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f9c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7fd fa21 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009fb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f040 8081 	bne.w	800a0bc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009fba:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f7fd fa12 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009fce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d109      	bne.n	8009fea <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009fd6:	f107 031e 	add.w	r3, r7, #30
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2151      	movs	r1, #81	; 0x51
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f001 fd7a 	bl	800bad8 <VL53L0X_RdWord>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009fea:	8bfb      	ldrh	r3, [r7, #30]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff ff23 	bl	8009e38 <VL53L0X_decode_timeout>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009ff6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff ff5a 	bl	8009eb8 <VL53L0X_calc_timeout_us>
 800a004:	62b8      	str	r0, [r7, #40]	; 0x28
 800a006:	e059      	b.n	800a0bc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d156      	bne.n	800a0bc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a00e:	f107 0314 	add.w	r3, r7, #20
 800a012:	4619      	mov	r1, r3
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7fd faf5 	bl	8007604 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d01d      	beq.n	800a060 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a024:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a028:	461a      	mov	r2, r3
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7fd f9dd 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10f      	bne.n	800a060 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a040:	f107 031e 	add.w	r3, r7, #30
 800a044:	461a      	mov	r2, r3
 800a046:	2151      	movs	r1, #81	; 0x51
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f001 fd45 	bl	800bad8 <VL53L0X_RdWord>
 800a04e:	4603      	mov	r3, r0
 800a050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a054:	8bfb      	ldrh	r3, [r7, #30]
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff feee 	bl	8009e38 <VL53L0X_decode_timeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a060:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a064:	2b00      	cmp	r3, #0
 800a066:	d109      	bne.n	800a07c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a068:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a06c:	461a      	mov	r2, r3
 800a06e:	2101      	movs	r1, #1
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7fd f9bb 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 800a076:	4603      	mov	r3, r0
 800a078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a07c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10f      	bne.n	800a0a4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a084:	f107 031c 	add.w	r3, r7, #28
 800a088:	461a      	mov	r2, r3
 800a08a:	2171      	movs	r1, #113	; 0x71
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f001 fd23 	bl	800bad8 <VL53L0X_RdWord>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a098:	8bbb      	ldrh	r3, [r7, #28]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fecc 	bl	8009e38 <VL53L0X_decode_timeout>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a0a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a0ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7ff feff 	bl	8009eb8 <VL53L0X_calc_timeout_us>
 800a0ba:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c0:	601a      	str	r2, [r3, #0]

	return Status;
 800a0c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3730      	adds	r7, #48	; 0x30
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b08a      	sub	sp, #40	; 0x28
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d005      	beq.n	800a0f4 <set_sequence_step_timeout+0x26>
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d002      	beq.n	800a0f4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a0ee:	7afb      	ldrb	r3, [r7, #11]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d138      	bne.n	800a166 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a0f4:	f107 031b 	add.w	r3, r7, #27
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7fd f975 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d11a      	bne.n	800a146 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a110:	7efb      	ldrb	r3, [r7, #27]
 800a112:	461a      	mov	r2, r3
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fea4 	bl	8009e64 <VL53L0X_calc_timeout_mclks>
 800a11c:	4603      	mov	r3, r0
 800a11e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a120:	8bbb      	ldrh	r3, [r7, #28]
 800a122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a126:	d903      	bls.n	800a130 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a128:	23ff      	movs	r3, #255	; 0xff
 800a12a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a12e:	e004      	b.n	800a13a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a130:	8bbb      	ldrh	r3, [r7, #28]
 800a132:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a134:	3b01      	subs	r3, #1
 800a136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a13a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 80ab 	bne.w	800a2a6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a154:	461a      	mov	r2, r3
 800a156:	2146      	movs	r1, #70	; 0x46
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f001 fc11 	bl	800b980 <VL53L0X_WrByte>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a164:	e09f      	b.n	800a2a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d135      	bne.n	800a1d8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a16c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a170:	2b00      	cmp	r3, #0
 800a172:	d11b      	bne.n	800a1ac <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a174:	f107 031b 	add.w	r3, r7, #27
 800a178:	461a      	mov	r2, r3
 800a17a:	2100      	movs	r1, #0
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7fd f935 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 800a182:	4603      	mov	r3, r0
 800a184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a188:	7efb      	ldrb	r3, [r7, #27]
 800a18a:	461a      	mov	r2, r3
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7ff fe68 	bl	8009e64 <VL53L0X_calc_timeout_mclks>
 800a194:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a196:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff fe20 	bl	8009de0 <VL53L0X_encode_timeout>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1a4:	8b3a      	ldrh	r2, [r7, #24]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a1ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d108      	bne.n	800a1c6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a1b4:	8b3b      	ldrh	r3, [r7, #24]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	2151      	movs	r1, #81	; 0x51
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f001 fc04 	bl	800b9c8 <VL53L0X_WrWord>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a1c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d16b      	bne.n	800a2a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a1d6:	e066      	b.n	800a2a6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d160      	bne.n	800a2a0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7fd fa0d 	bl	8007604 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a1ee:	7cfb      	ldrb	r3, [r7, #19]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01d      	beq.n	800a230 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a1f4:	f107 031b 	add.w	r3, r7, #27
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7fd f8f5 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10f      	bne.n	800a230 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a210:	f107 0318 	add.w	r3, r7, #24
 800a214:	461a      	mov	r2, r3
 800a216:	2151      	movs	r1, #81	; 0x51
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f001 fc5d 	bl	800bad8 <VL53L0X_RdWord>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a224:	8b3b      	ldrh	r3, [r7, #24]
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff fe06 	bl	8009e38 <VL53L0X_decode_timeout>
 800a22c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a22e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a234:	2b00      	cmp	r3, #0
 800a236:	d109      	bne.n	800a24c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a238:	f107 031b 	add.w	r3, r7, #27
 800a23c:	461a      	mov	r2, r3
 800a23e:	2101      	movs	r1, #1
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7fd f8d3 	bl	80073ec <VL53L0X_GetVcselPulsePeriod>
 800a246:	4603      	mov	r3, r0
 800a248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a24c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a250:	2b00      	cmp	r3, #0
 800a252:	d128      	bne.n	800a2a6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a254:	7efb      	ldrb	r3, [r7, #27]
 800a256:	461a      	mov	r2, r3
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7ff fe02 	bl	8009e64 <VL53L0X_calc_timeout_mclks>
 800a260:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	4413      	add	r3, r2
 800a268:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a26a:	6a38      	ldr	r0, [r7, #32]
 800a26c:	f7ff fdb8 	bl	8009de0 <VL53L0X_encode_timeout>
 800a270:	4603      	mov	r3, r0
 800a272:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d108      	bne.n	800a28e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a27c:	8bfb      	ldrh	r3, [r7, #30]
 800a27e:	461a      	mov	r2, r3
 800a280:	2171      	movs	r1, #113	; 0x71
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f001 fba0 	bl	800b9c8 <VL53L0X_WrWord>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a28e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a292:	2b00      	cmp	r3, #0
 800a294:	d107      	bne.n	800a2a6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a29e:	e002      	b.n	800a2a6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2a0:	23fc      	movs	r3, #252	; 0xfc
 800a2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a2a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3728      	adds	r7, #40	; 0x28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b08a      	sub	sp, #40	; 0x28
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a2c8:	230c      	movs	r3, #12
 800a2ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a2ce:	2312      	movs	r3, #18
 800a2d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a2da:	230e      	movs	r3, #14
 800a2dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a2e4:	78bb      	ldrb	r3, [r7, #2]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2f0:	23fc      	movs	r3, #252	; 0xfc
 800a2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2f6:	e020      	b.n	800a33a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10d      	bne.n	800a31a <VL53L0X_set_vcsel_pulse_period+0x68>
 800a2fe:	78ba      	ldrb	r2, [r7, #2]
 800a300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a304:	429a      	cmp	r2, r3
 800a306:	d304      	bcc.n	800a312 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a308:	78ba      	ldrb	r2, [r7, #2]
 800a30a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a30e:	429a      	cmp	r2, r3
 800a310:	d903      	bls.n	800a31a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a312:	23fc      	movs	r3, #252	; 0xfc
 800a314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a318:	e00f      	b.n	800a33a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d10c      	bne.n	800a33a <VL53L0X_set_vcsel_pulse_period+0x88>
 800a320:	78ba      	ldrb	r2, [r7, #2]
 800a322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a326:	429a      	cmp	r2, r3
 800a328:	d304      	bcc.n	800a334 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a32a:	78ba      	ldrb	r2, [r7, #2]
 800a32c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a330:	429a      	cmp	r2, r3
 800a332:	d902      	bls.n	800a33a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a334:	23fc      	movs	r3, #252	; 0xfc
 800a336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a33a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a342:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a346:	e239      	b.n	800a7bc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d150      	bne.n	800a3f0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a34e:	78bb      	ldrb	r3, [r7, #2]
 800a350:	2b0c      	cmp	r3, #12
 800a352:	d110      	bne.n	800a376 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a354:	2218      	movs	r2, #24
 800a356:	2157      	movs	r1, #87	; 0x57
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 fb11 	bl	800b980 <VL53L0X_WrByte>
 800a35e:	4603      	mov	r3, r0
 800a360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a364:	2208      	movs	r2, #8
 800a366:	2156      	movs	r1, #86	; 0x56
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f001 fb09 	bl	800b980 <VL53L0X_WrByte>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a374:	e17f      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a376:	78bb      	ldrb	r3, [r7, #2]
 800a378:	2b0e      	cmp	r3, #14
 800a37a:	d110      	bne.n	800a39e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a37c:	2230      	movs	r2, #48	; 0x30
 800a37e:	2157      	movs	r1, #87	; 0x57
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 fafd 	bl	800b980 <VL53L0X_WrByte>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a38c:	2208      	movs	r2, #8
 800a38e:	2156      	movs	r1, #86	; 0x56
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 faf5 	bl	800b980 <VL53L0X_WrByte>
 800a396:	4603      	mov	r3, r0
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a39c:	e16b      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a39e:	78bb      	ldrb	r3, [r7, #2]
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	d110      	bne.n	800a3c6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a3a4:	2240      	movs	r2, #64	; 0x40
 800a3a6:	2157      	movs	r1, #87	; 0x57
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fae9 	bl	800b980 <VL53L0X_WrByte>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a3b4:	2208      	movs	r2, #8
 800a3b6:	2156      	movs	r1, #86	; 0x56
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f001 fae1 	bl	800b980 <VL53L0X_WrByte>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3c4:	e157      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a3c6:	78bb      	ldrb	r3, [r7, #2]
 800a3c8:	2b12      	cmp	r3, #18
 800a3ca:	f040 8154 	bne.w	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a3ce:	2250      	movs	r2, #80	; 0x50
 800a3d0:	2157      	movs	r1, #87	; 0x57
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 fad4 	bl	800b980 <VL53L0X_WrByte>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a3de:	2208      	movs	r2, #8
 800a3e0:	2156      	movs	r1, #86	; 0x56
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 facc 	bl	800b980 <VL53L0X_WrByte>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3ee:	e142      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	f040 813f 	bne.w	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a3f8:	78bb      	ldrb	r3, [r7, #2]
 800a3fa:	2b08      	cmp	r3, #8
 800a3fc:	d14c      	bne.n	800a498 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a3fe:	2210      	movs	r2, #16
 800a400:	2148      	movs	r1, #72	; 0x48
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f001 fabc 	bl	800b980 <VL53L0X_WrByte>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a40e:	2208      	movs	r2, #8
 800a410:	2147      	movs	r1, #71	; 0x47
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fab4 	bl	800b980 <VL53L0X_WrByte>
 800a418:	4603      	mov	r3, r0
 800a41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a41e:	2202      	movs	r2, #2
 800a420:	2132      	movs	r1, #50	; 0x32
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 faac 	bl	800b980 <VL53L0X_WrByte>
 800a428:	4603      	mov	r3, r0
 800a42a:	461a      	mov	r2, r3
 800a42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a430:	4313      	orrs	r3, r2
 800a432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a436:	220c      	movs	r2, #12
 800a438:	2130      	movs	r1, #48	; 0x30
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f001 faa0 	bl	800b980 <VL53L0X_WrByte>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a448:	4313      	orrs	r3, r2
 800a44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a44e:	2201      	movs	r2, #1
 800a450:	21ff      	movs	r1, #255	; 0xff
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 fa94 	bl	800b980 <VL53L0X_WrByte>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a460:	4313      	orrs	r3, r2
 800a462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a466:	2230      	movs	r2, #48	; 0x30
 800a468:	2130      	movs	r1, #48	; 0x30
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 fa88 	bl	800b980 <VL53L0X_WrByte>
 800a470:	4603      	mov	r3, r0
 800a472:	461a      	mov	r2, r3
 800a474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a478:	4313      	orrs	r3, r2
 800a47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a47e:	2200      	movs	r2, #0
 800a480:	21ff      	movs	r1, #255	; 0xff
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 fa7c 	bl	800b980 <VL53L0X_WrByte>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a490:	4313      	orrs	r3, r2
 800a492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a496:	e0ee      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a498:	78bb      	ldrb	r3, [r7, #2]
 800a49a:	2b0a      	cmp	r3, #10
 800a49c:	d14c      	bne.n	800a538 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a49e:	2228      	movs	r2, #40	; 0x28
 800a4a0:	2148      	movs	r1, #72	; 0x48
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fa6c 	bl	800b980 <VL53L0X_WrByte>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a4ae:	2208      	movs	r2, #8
 800a4b0:	2147      	movs	r1, #71	; 0x47
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fa64 	bl	800b980 <VL53L0X_WrByte>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a4be:	2203      	movs	r2, #3
 800a4c0:	2132      	movs	r1, #50	; 0x32
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 fa5c 	bl	800b980 <VL53L0X_WrByte>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a4d6:	2209      	movs	r2, #9
 800a4d8:	2130      	movs	r1, #48	; 0x30
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 fa50 	bl	800b980 <VL53L0X_WrByte>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	21ff      	movs	r1, #255	; 0xff
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 fa44 	bl	800b980 <VL53L0X_WrByte>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a500:	4313      	orrs	r3, r2
 800a502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a506:	2220      	movs	r2, #32
 800a508:	2130      	movs	r1, #48	; 0x30
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f001 fa38 	bl	800b980 <VL53L0X_WrByte>
 800a510:	4603      	mov	r3, r0
 800a512:	461a      	mov	r2, r3
 800a514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a518:	4313      	orrs	r3, r2
 800a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a51e:	2200      	movs	r2, #0
 800a520:	21ff      	movs	r1, #255	; 0xff
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 fa2c 	bl	800b980 <VL53L0X_WrByte>
 800a528:	4603      	mov	r3, r0
 800a52a:	461a      	mov	r2, r3
 800a52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a530:	4313      	orrs	r3, r2
 800a532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a536:	e09e      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a538:	78bb      	ldrb	r3, [r7, #2]
 800a53a:	2b0c      	cmp	r3, #12
 800a53c:	d14c      	bne.n	800a5d8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a53e:	2238      	movs	r2, #56	; 0x38
 800a540:	2148      	movs	r1, #72	; 0x48
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fa1c 	bl	800b980 <VL53L0X_WrByte>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a54e:	2208      	movs	r2, #8
 800a550:	2147      	movs	r1, #71	; 0x47
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f001 fa14 	bl	800b980 <VL53L0X_WrByte>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a55e:	2203      	movs	r2, #3
 800a560:	2132      	movs	r1, #50	; 0x32
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f001 fa0c 	bl	800b980 <VL53L0X_WrByte>
 800a568:	4603      	mov	r3, r0
 800a56a:	461a      	mov	r2, r3
 800a56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a570:	4313      	orrs	r3, r2
 800a572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a576:	2208      	movs	r2, #8
 800a578:	2130      	movs	r1, #48	; 0x30
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 fa00 	bl	800b980 <VL53L0X_WrByte>
 800a580:	4603      	mov	r3, r0
 800a582:	461a      	mov	r2, r3
 800a584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a588:	4313      	orrs	r3, r2
 800a58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a58e:	2201      	movs	r2, #1
 800a590:	21ff      	movs	r1, #255	; 0xff
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f001 f9f4 	bl	800b980 <VL53L0X_WrByte>
 800a598:	4603      	mov	r3, r0
 800a59a:	461a      	mov	r2, r3
 800a59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	2130      	movs	r1, #48	; 0x30
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 f9e8 	bl	800b980 <VL53L0X_WrByte>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a5be:	2200      	movs	r2, #0
 800a5c0:	21ff      	movs	r1, #255	; 0xff
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 f9dc 	bl	800b980 <VL53L0X_WrByte>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5d6:	e04e      	b.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a5d8:	78bb      	ldrb	r3, [r7, #2]
 800a5da:	2b0e      	cmp	r3, #14
 800a5dc:	d14b      	bne.n	800a676 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a5de:	2248      	movs	r2, #72	; 0x48
 800a5e0:	2148      	movs	r1, #72	; 0x48
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 f9cc 	bl	800b980 <VL53L0X_WrByte>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a5ee:	2208      	movs	r2, #8
 800a5f0:	2147      	movs	r1, #71	; 0x47
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 f9c4 	bl	800b980 <VL53L0X_WrByte>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a5fe:	2203      	movs	r2, #3
 800a600:	2132      	movs	r1, #50	; 0x32
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f001 f9bc 	bl	800b980 <VL53L0X_WrByte>
 800a608:	4603      	mov	r3, r0
 800a60a:	461a      	mov	r2, r3
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a610:	4313      	orrs	r3, r2
 800a612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a616:	2207      	movs	r2, #7
 800a618:	2130      	movs	r1, #48	; 0x30
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 f9b0 	bl	800b980 <VL53L0X_WrByte>
 800a620:	4603      	mov	r3, r0
 800a622:	461a      	mov	r2, r3
 800a624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a628:	4313      	orrs	r3, r2
 800a62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a62e:	2201      	movs	r2, #1
 800a630:	21ff      	movs	r1, #255	; 0xff
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 f9a4 	bl	800b980 <VL53L0X_WrByte>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a640:	4313      	orrs	r3, r2
 800a642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a646:	2220      	movs	r2, #32
 800a648:	2130      	movs	r1, #48	; 0x30
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 f998 	bl	800b980 <VL53L0X_WrByte>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a658:	4313      	orrs	r3, r2
 800a65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a65e:	2200      	movs	r2, #0
 800a660:	21ff      	movs	r1, #255	; 0xff
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f001 f98c 	bl	800b980 <VL53L0X_WrByte>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a670:	4313      	orrs	r3, r2
 800a672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a676:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d17f      	bne.n	800a77e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a67e:	78bb      	ldrb	r3, [r7, #2]
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fe38 	bl	80092f6 <VL53L0X_encode_vcsel_period>
 800a686:	4603      	mov	r3, r0
 800a688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a692:	2b01      	cmp	r3, #1
 800a694:	d045      	beq.n	800a722 <VL53L0X_set_vcsel_pulse_period+0x470>
 800a696:	e06e      	b.n	800a776 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a698:	f107 0314 	add.w	r3, r7, #20
 800a69c:	461a      	mov	r2, r3
 800a69e:	2103      	movs	r1, #3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7ff fc33 	bl	8009f0c <get_sequence_step_timeout>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a6ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a6b4:	f107 0310 	add.w	r3, r7, #16
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2102      	movs	r1, #2
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff fc25 	bl	8009f0c <get_sequence_step_timeout>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a6c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a6d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	2150      	movs	r1, #80	; 0x50
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 f951 	bl	800b980 <VL53L0X_WrByte>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a6e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d108      	bne.n	800a6fe <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	2103      	movs	r1, #3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff fceb 	bl	800a0ce <set_sequence_step_timeout>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a6fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a702:	2b00      	cmp	r3, #0
 800a704:	d108      	bne.n	800a718 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	461a      	mov	r2, r3
 800a70a:	2102      	movs	r1, #2
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fcde 	bl	800a0ce <set_sequence_step_timeout>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	78ba      	ldrb	r2, [r7, #2]
 800a71c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a720:	e02e      	b.n	800a780 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a722:	f107 0318 	add.w	r3, r7, #24
 800a726:	461a      	mov	r2, r3
 800a728:	2104      	movs	r1, #4
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff fbee 	bl	8009f0c <get_sequence_step_timeout>
 800a730:	4603      	mov	r3, r0
 800a732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a73e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a742:	461a      	mov	r2, r3
 800a744:	2170      	movs	r1, #112	; 0x70
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 f91a 	bl	800b980 <VL53L0X_WrByte>
 800a74c:	4603      	mov	r3, r0
 800a74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a752:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a756:	2b00      	cmp	r3, #0
 800a758:	d108      	bne.n	800a76c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	461a      	mov	r2, r3
 800a75e:	2104      	movs	r1, #4
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fcb4 	bl	800a0ce <set_sequence_step_timeout>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	78ba      	ldrb	r2, [r7, #2]
 800a770:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a774:	e004      	b.n	800a780 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a776:	23fc      	movs	r3, #252	; 0xfc
 800a778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a77c:	e000      	b.n	800a780 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a77e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a780:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a784:	2b00      	cmp	r3, #0
 800a786:	d109      	bne.n	800a79c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a78e:	69f9      	ldr	r1, [r7, #28]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7fc fded 	bl	8007370 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a796:	4603      	mov	r3, r0
 800a798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a79c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d109      	bne.n	800a7b8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a7a4:	f107 010f 	add.w	r1, r7, #15
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7fe fcbd 	bl	800912c <VL53L0X_perform_phase_calibration>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a7b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3728      	adds	r7, #40	; 0x28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a7d6:	7afb      	ldrb	r3, [r7, #11]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d00a      	beq.n	800a7f6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a7e0:	e013      	b.n	800a80a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a7e2:	f107 0316 	add.w	r3, r7, #22
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	2150      	movs	r1, #80	; 0x50
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f001 f94a 	bl	800ba84 <VL53L0X_RdByte>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a7f4:	e00b      	b.n	800a80e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a7f6:	f107 0316 	add.w	r3, r7, #22
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	2170      	movs	r1, #112	; 0x70
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f001 f940 	bl	800ba84 <VL53L0X_RdByte>
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a808:	e001      	b.n	800a80e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a80a:	23fc      	movs	r3, #252	; 0xfc
 800a80c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d107      	bne.n	800a826 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a816:	7dbb      	ldrb	r3, [r7, #22]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fd59 	bl	80092d0 <VL53L0X_decode_vcsel_period>
 800a81e:	4603      	mov	r3, r0
 800a820:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	701a      	strb	r2, [r3, #0]

	return Status;
 800a826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b092      	sub	sp, #72	; 0x48
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a842:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a846:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a848:	f240 7376 	movw	r3, #1910	; 0x776
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a84e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a852:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a854:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a85a:	f240 234e 	movw	r3, #590	; 0x24e
 800a85e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a860:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a864:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a866:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a86a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a86c:	f240 2326 	movw	r3, #550	; 0x226
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a876:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a87a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	429a      	cmp	r2, r3
 800a886:	d205      	bcs.n	800a894 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a888:	23fc      	movs	r3, #252	; 0xfc
 800a88a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a88e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a892:	e0aa      	b.n	800a9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a898:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a8a0:	f107 0314 	add.w	r3, r7, #20
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7fc feac 	bl	8007604 <VL53L0X_GetSequenceStepEnables>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a8b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d15b      	bne.n	800a972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a8ba:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d105      	bne.n	800a8cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a8c0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a8c6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d052      	beq.n	800a972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a8cc:	f107 0310 	add.w	r3, r7, #16
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	2102      	movs	r1, #2
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff fb19 	bl	8009f0c <get_sequence_step_timeout>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a8e0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a8e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a8ec:	e07d      	b.n	800a9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a8ee:	7d3b      	ldrb	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00f      	beq.n	800a914 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a8f4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f8:	4413      	add	r3, r2
 800a8fa:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a8fc:	69fa      	ldr	r2, [r7, #28]
 800a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a900:	429a      	cmp	r2, r3
 800a902:	d204      	bcs.n	800a90e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	643b      	str	r3, [r7, #64]	; 0x40
 800a90c:	e002      	b.n	800a914 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a90e:	23fc      	movs	r3, #252	; 0xfc
 800a910:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a914:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a91c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a920:	e063      	b.n	800a9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a922:	7dbb      	ldrb	r3, [r7, #22]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d011      	beq.n	800a94c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	4413      	add	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a932:	69fa      	ldr	r2, [r7, #28]
 800a934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a936:	429a      	cmp	r2, r3
 800a938:	d204      	bcs.n	800a944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a93a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	643b      	str	r3, [r7, #64]	; 0x40
 800a942:	e016      	b.n	800a972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a944:	23fc      	movs	r3, #252	; 0xfc
 800a946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a94a:	e012      	b.n	800a972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a94c:	7d7b      	ldrb	r3, [r7, #21]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00f      	beq.n	800a972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a956:	4413      	add	r3, r2
 800a958:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a95a:	69fa      	ldr	r2, [r7, #28]
 800a95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a95e:	429a      	cmp	r2, r3
 800a960:	d204      	bcs.n	800a96c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	643b      	str	r3, [r7, #64]	; 0x40
 800a96a:	e002      	b.n	800a972 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a96c:	23fc      	movs	r3, #252	; 0xfc
 800a96e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a972:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a976:	2b00      	cmp	r3, #0
 800a978:	d002      	beq.n	800a980 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a97a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a97e:	e034      	b.n	800a9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a980:	7dfb      	ldrb	r3, [r7, #23]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d019      	beq.n	800a9ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a986:	f107 030c 	add.w	r3, r7, #12
 800a98a:	461a      	mov	r2, r3
 800a98c:	2103      	movs	r1, #3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fabc 	bl	8009f0c <get_sequence_step_timeout>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a99e:	4413      	add	r3, r2
 800a9a0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d204      	bcs.n	800a9b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a9aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a9b2:	e002      	b.n	800a9ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9b4:	23fc      	movs	r3, #252	; 0xfc
 800a9b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a9ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d111      	bne.n	800a9e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a9c2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00e      	beq.n	800a9e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a9c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a9d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9d2:	2104      	movs	r1, #4
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fb7a 	bl	800a0ce <set_sequence_step_timeout>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a9e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3748      	adds	r7, #72	; 0x48
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b090      	sub	sp, #64	; 0x40
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aa02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aa06:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aa08:	f240 7376 	movw	r3, #1910	; 0x776
 800aa0c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800aa0e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aa12:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800aa14:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa18:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800aa1a:	f240 234e 	movw	r3, #590	; 0x24e
 800aa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800aa20:	f240 23b2 	movw	r3, #690	; 0x2b2
 800aa24:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800aa26:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800aa2c:	f240 2326 	movw	r3, #550	; 0x226
 800aa30:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800aa36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3a:	441a      	add	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa40:	f107 0318 	add.w	r3, r7, #24
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7fc fddc 	bl	8007604 <VL53L0X_GetSequenceStepEnables>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800aa52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800aa5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa5e:	e075      	b.n	800ab4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800aa60:	7e3b      	ldrb	r3, [r7, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800aa66:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800aa6c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d030      	beq.n	800aad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	461a      	mov	r2, r3
 800aa78:	2102      	movs	r1, #2
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff fa46 	bl	8009f0c <get_sequence_step_timeout>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800aa86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d122      	bne.n	800aad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800aa8e:	7e3b      	ldrb	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d007      	beq.n	800aaa4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aa98:	6939      	ldr	r1, [r7, #16]
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aa9e:	441a      	add	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800aaa4:	7ebb      	ldrb	r3, [r7, #26]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800aaae:	6939      	ldr	r1, [r7, #16]
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	440b      	add	r3, r1
 800aab4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aab6:	441a      	add	r2, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e00a      	b.n	800aad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800aabe:	7e7b      	ldrb	r3, [r7, #25]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d007      	beq.n	800aad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aac8:	6939      	ldr	r1, [r7, #16]
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aace:	441a      	add	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aad4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d114      	bne.n	800ab06 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800aadc:	7efb      	ldrb	r3, [r7, #27]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d011      	beq.n	800ab06 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800aae2:	f107 030c 	add.w	r3, r7, #12
 800aae6:	461a      	mov	r2, r3
 800aae8:	2103      	movs	r1, #3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7ff fa0e 	bl	8009f0c <get_sequence_step_timeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800aafa:	68f9      	ldr	r1, [r7, #12]
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab00:	441a      	add	r2, r3
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d114      	bne.n	800ab38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ab0e:	7f3b      	ldrb	r3, [r7, #28]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d011      	beq.n	800ab38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ab14:	f107 0314 	add.w	r3, r7, #20
 800ab18:	461a      	mov	r2, r3
 800ab1a:	2104      	movs	r1, #4
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff f9f5 	bl	8009f0c <get_sequence_step_timeout>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ab2c:	6979      	ldr	r1, [r7, #20]
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab32:	441a      	add	r2, r3
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d103      	bne.n	800ab48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3740      	adds	r7, #64	; 0x40
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ab66:	e0c6      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	3301      	adds	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ab78:	7cfb      	ldrb	r3, [r7, #19]
 800ab7a:	2bff      	cmp	r3, #255	; 0xff
 800ab7c:	f040 808d 	bne.w	800ac9a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	4413      	add	r3, r2
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	747b      	strb	r3, [r7, #17]
			Index++;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ab90:	7c7b      	ldrb	r3, [r7, #17]
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d87e      	bhi.n	800ac94 <VL53L0X_load_tuning_settings+0x140>
 800ab96:	a201      	add	r2, pc, #4	; (adr r2, 800ab9c <VL53L0X_load_tuning_settings+0x48>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800abad 	.word	0x0800abad
 800aba0:	0800abe7 	.word	0x0800abe7
 800aba4:	0800ac21 	.word	0x0800ac21
 800aba8:	0800ac5b 	.word	0x0800ac5b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	4413      	add	r3, r2
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	743b      	strb	r3, [r7, #16]
				Index++;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	3301      	adds	r3, #1
 800abba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4413      	add	r3, r2
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	3301      	adds	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800abcc:	7c3b      	ldrb	r3, [r7, #16]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	021b      	lsls	r3, r3, #8
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	4413      	add	r3, r2
 800abda:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	89ba      	ldrh	r2, [r7, #12]
 800abe0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800abe4:	e087      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	4413      	add	r3, r2
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	743b      	strb	r3, [r7, #16]
				Index++;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	3301      	adds	r3, #1
 800abf4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	4413      	add	r3, r2
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	3301      	adds	r3, #1
 800ac04:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ac06:	7c3b      	ldrb	r3, [r7, #16]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	4413      	add	r3, r2
 800ac14:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	89ba      	ldrh	r2, [r7, #12]
 800ac1a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ac1e:	e06a      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4413      	add	r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	743b      	strb	r3, [r7, #16]
				Index++;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	4413      	add	r3, r2
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ac40:	7c3b      	ldrb	r3, [r7, #16]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	89ba      	ldrh	r2, [r7, #12]
 800ac54:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ac58:	e04d      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	4413      	add	r3, r2
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	743b      	strb	r3, [r7, #16]
				Index++;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	3301      	adds	r3, #1
 800ac68:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	4413      	add	r3, r2
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3301      	adds	r3, #1
 800ac78:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ac7a:	7c3b      	ldrb	r3, [r7, #16]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	021b      	lsls	r3, r3, #8
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	4413      	add	r3, r2
 800ac88:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	89ba      	ldrh	r2, [r7, #12]
 800ac8e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ac92:	e030      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac94:	23fc      	movs	r3, #252	; 0xfc
 800ac96:	77fb      	strb	r3, [r7, #31]
 800ac98:	e02d      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ac9a:	7cfb      	ldrb	r3, [r7, #19]
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d828      	bhi.n	800acf2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4413      	add	r3, r2
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	3301      	adds	r3, #1
 800acae:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800acb0:	2300      	movs	r3, #0
 800acb2:	61bb      	str	r3, [r7, #24]
 800acb4:	e00f      	b.n	800acd6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	4413      	add	r3, r2
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	f107 0208 	add.w	r2, r7, #8
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	4413      	add	r3, r2
 800acc6:	460a      	mov	r2, r1
 800acc8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3301      	adds	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	3301      	adds	r3, #1
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	7cfb      	ldrb	r3, [r7, #19]
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	429a      	cmp	r2, r3
 800acdc:	dbeb      	blt.n	800acb6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800acde:	7cfb      	ldrb	r3, [r7, #19]
 800ace0:	f107 0208 	add.w	r2, r7, #8
 800ace4:	7cb9      	ldrb	r1, [r7, #18]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fdee 	bl	800b8c8 <VL53L0X_WriteMulti>
 800acec:	4603      	mov	r3, r0
 800acee:	77fb      	strb	r3, [r7, #31]
 800acf0:	e001      	b.n	800acf6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acf2:	23fc      	movs	r3, #252	; 0xfc
 800acf4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	4413      	add	r3, r2
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d004      	beq.n	800ad0c <VL53L0X_load_tuning_settings+0x1b8>
 800ad02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f43f af2e 	beq.w	800ab68 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad24:	2300      	movs	r3, #0
 800ad26:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ad2e:	f107 0313 	add.w	r3, r7, #19
 800ad32:	4619      	mov	r1, r3
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7fc fcf1 	bl	800771c <VL53L0X_GetXTalkCompensationEnable>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ad3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d111      	bne.n	800ad6a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ad46:	7cfb      	ldrb	r3, [r7, #19]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00e      	beq.n	800ad6a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	8a9b      	ldrh	r3, [r3, #20]
 800ad56:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	fb02 f303 	mul.w	r3, r2, r3
 800ad5e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	3380      	adds	r3, #128	; 0x80
 800ad64:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ad6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3720      	adds	r7, #32
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b086      	sub	sp, #24
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	60b9      	str	r1, [r7, #8]
 800ad80:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ad8e:	f107 0310 	add.w	r3, r7, #16
 800ad92:	461a      	mov	r2, r3
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff ffbe 	bl	800ad18 <VL53L0X_get_total_xtalk_rate>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ada0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d105      	bne.n	800adb4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	441a      	add	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	601a      	str	r2, [r3, #0]

	return Status;
 800adb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b09a      	sub	sp, #104	; 0x68
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800adce:	2312      	movs	r3, #18
 800add0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800add2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800add6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800add8:	2342      	movs	r3, #66	; 0x42
 800adda:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800addc:	2306      	movs	r3, #6
 800adde:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ade0:	2307      	movs	r3, #7
 800ade2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800adf0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800adf8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800adfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adfe:	fb02 f303 	mul.w	r3, r2, r3
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	3380      	adds	r3, #128	; 0x80
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae10:	fb02 f303 	mul.w	r3, r2, r3
 800ae14:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d01a      	beq.n	800ae56 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	029b      	lsls	r3, r3, #10
 800ae24:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ae2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2c:	4413      	add	r3, r2
 800ae2e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ae30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae38:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ae3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	005b      	lsls	r3, r3, #1
 800ae40:	4413      	add	r3, r2
 800ae42:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ae44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae46:	fb03 f303 	mul.w	r3, r3, r3
 800ae4a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ae4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae52:	0c1b      	lsrs	r3, r3, #16
 800ae54:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae5a:	fb02 f303 	mul.w	r3, r2, r3
 800ae5e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae66:	0c1b      	lsrs	r3, r3, #16
 800ae68:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	fb03 f303 	mul.w	r3, r3, r3
 800ae70:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ae72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae7e:	085a      	lsrs	r2, r3, #1
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	441a      	add	r2, r3
 800ae84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae90:	fb02 f303 	mul.w	r3, r2, r3
 800ae94:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae9c:	d302      	bcc.n	800aea4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800ae9e:	4b54      	ldr	r3, [pc, #336]	; (800aff0 <VL53L0X_calc_dmax+0x230>)
 800aea0:	663b      	str	r3, [r7, #96]	; 0x60
 800aea2:	e015      	b.n	800aed0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800aea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea6:	085a      	lsrs	r2, r3, #1
 800aea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeaa:	441a      	add	r2, r3
 800aeac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeae:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800aeb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeb8:	fb02 f303 	mul.w	r3, r2, r3
 800aebc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800aebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aec4:	0c1b      	lsrs	r3, r3, #16
 800aec6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800aec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeca:	fb03 f303 	mul.w	r3, r3, r3
 800aece:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800aed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed2:	039b      	lsls	r3, r3, #14
 800aed4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aed8:	4a46      	ldr	r2, [pc, #280]	; (800aff4 <VL53L0X_calc_dmax+0x234>)
 800aeda:	fba2 2303 	umull	r2, r3, r2, r3
 800aede:	099b      	lsrs	r3, r3, #6
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	fb03 f303 	mul.w	r3, r3, r3
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800aeea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeec:	fb03 f303 	mul.w	r3, r3, r3
 800aef0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800aef2:	6a3b      	ldr	r3, [r7, #32]
 800aef4:	3308      	adds	r3, #8
 800aef6:	091b      	lsrs	r3, r3, #4
 800aef8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800aefa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800af02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af04:	4613      	mov	r3, r2
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	4413      	add	r3, r2
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af14:	0b9b      	lsrs	r3, r3, #14
 800af16:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800af18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af1c:	4413      	add	r3, r2
 800af1e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800af20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	4413      	add	r3, r2
 800af28:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af32:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	039b      	lsls	r3, r3, #14
 800af38:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	085b      	lsrs	r3, r3, #1
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	4413      	add	r3, r2
 800af42:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af52:	fb02 f303 	mul.w	r3, r2, r3
 800af56:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800af5e:	4a25      	ldr	r2, [pc, #148]	; (800aff4 <VL53L0X_calc_dmax+0x234>)
 800af60:	fba2 2303 	umull	r2, r3, r2, r3
 800af64:	099b      	lsrs	r3, r3, #6
 800af66:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800af74:	4a1f      	ldr	r2, [pc, #124]	; (800aff4 <VL53L0X_calc_dmax+0x234>)
 800af76:	fba2 2303 	umull	r2, r3, r2, r3
 800af7a:	099b      	lsrs	r3, r3, #6
 800af7c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800af7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af80:	3380      	adds	r3, #128	; 0x80
 800af82:	0a1b      	lsrs	r3, r3, #8
 800af84:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d008      	beq.n	800af9e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	085a      	lsrs	r2, r3, #1
 800af90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af92:	441a      	add	r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800af9c:	e001      	b.n	800afa2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800afa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800afa4:	f7fe f9ba 	bl	800931c <VL53L0X_isqrt>
 800afa8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d008      	beq.n	800afc2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	085a      	lsrs	r2, r3, #1
 800afb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb6:	441a      	add	r2, r3
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	fbb2 f3f3 	udiv	r3, r2, r3
 800afbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afc0:	e001      	b.n	800afc6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800afc6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800afc8:	f7fe f9a8 	bl	800931c <VL53L0X_isqrt>
 800afcc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800afce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afd8:	429a      	cmp	r2, r3
 800afda:	d902      	bls.n	800afe2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800afdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afe0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800afe2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3768      	adds	r7, #104	; 0x68
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	fff00000 	.word	0xfff00000
 800aff4:	10624dd3 	.word	0x10624dd3

0800aff8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b0b4      	sub	sp, #208	; 0xd0
 800affc:	af04      	add	r7, sp, #16
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b006:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b00a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b00e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b016:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b01a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b01e:	f241 235c 	movw	r3, #4700	; 0x125c
 800b022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b026:	4b9e      	ldr	r3, [pc, #632]	; (800b2a0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b02c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b030:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b032:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b040:	4b98      	ldr	r3, [pc, #608]	; (800b2a4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b042:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b048:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b04a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b04e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b050:	f240 6377 	movw	r3, #1655	; 0x677
 800b054:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b056:	2300      	movs	r3, #0
 800b058:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b06e:	0c1b      	lsrs	r3, r3, #16
 800b070:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b078:	f107 0310 	add.w	r3, r7, #16
 800b07c:	461a      	mov	r2, r3
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fe78 	bl	800ad76 <VL53L0X_get_total_signal_rate>
 800b086:	4603      	mov	r3, r0
 800b088:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b08c:	f107 0314 	add.w	r3, r7, #20
 800b090:	461a      	mov	r2, r3
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7ff fe3f 	bl	800ad18 <VL53L0X_get_total_xtalk_rate>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0a6:	fb02 f303 	mul.w	r3, r2, r3
 800b0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0b2:	0c1b      	lsrs	r3, r3, #16
 800b0b4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b0c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d902      	bls.n	800b0d4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b0d4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d168      	bne.n	800b1ae <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b0e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b0ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b0f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7fe feb2 	bl	8009e64 <VL53L0X_calc_timeout_mclks>
 800b100:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b112:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b116:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b11a:	461a      	mov	r2, r3
 800b11c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f7fe fe9f 	bl	8009e64 <VL53L0X_calc_timeout_mclks>
 800b126:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b128:	2303      	movs	r3, #3
 800b12a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b12e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b132:	2b08      	cmp	r3, #8
 800b134:	d102      	bne.n	800b13c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b136:	2302      	movs	r3, #2
 800b138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b13c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b140:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b142:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b146:	fb02 f303 	mul.w	r3, r2, r3
 800b14a:	02db      	lsls	r3, r3, #11
 800b14c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b154:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b158:	4a53      	ldr	r2, [pc, #332]	; (800b2a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b15a:	fba2 2303 	umull	r2, r3, r2, r3
 800b15e:	099b      	lsrs	r3, r3, #6
 800b160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b164:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b168:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
 800b16e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b172:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b176:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b17a:	4a4b      	ldr	r2, [pc, #300]	; (800b2a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b17c:	fba2 2303 	umull	r2, r3, r2, r3
 800b180:	099b      	lsrs	r3, r3, #6
 800b182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	3380      	adds	r3, #128	; 0x80
 800b18a:	0a1b      	lsrs	r3, r3, #8
 800b18c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b194:	fb02 f303 	mul.w	r3, r2, r3
 800b198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b19c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1a0:	3380      	adds	r3, #128	; 0x80
 800b1a2:	0a1b      	lsrs	r3, r3, #8
 800b1a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	021b      	lsls	r3, r3, #8
 800b1ac:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b1ae:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b1b6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b1ba:	e15e      	b.n	800b47a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10c      	bne.n	800b1dc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1c8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e14c      	b.n	800b476 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b1dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d102      	bne.n	800b1ea <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b1ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1ee:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b1f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1f2:	041a      	lsls	r2, r3, #16
 800b1f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b1fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b204:	429a      	cmp	r2, r3
 800b206:	d902      	bls.n	800b20e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b20a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b20e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b212:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b216:	fb02 f303 	mul.w	r3, r2, r3
 800b21a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b21e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b222:	4613      	mov	r3, r2
 800b224:	005b      	lsls	r3, r3, #1
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe f876 	bl	800931c <VL53L0X_isqrt>
 800b230:	4603      	mov	r3, r0
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	891b      	ldrh	r3, [r3, #8]
 800b23a:	461a      	mov	r2, r3
 800b23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b23e:	fb02 f303 	mul.w	r3, r2, r3
 800b242:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b246:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b24c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b24e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b250:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b254:	4a14      	ldr	r2, [pc, #80]	; (800b2a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b256:	fba2 2303 	umull	r2, r3, r2, r3
 800b25a:	099b      	lsrs	r3, r3, #6
 800b25c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b260:	041b      	lsls	r3, r3, #16
 800b262:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b266:	4a10      	ldr	r2, [pc, #64]	; (800b2a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b268:	fba2 2303 	umull	r2, r3, r2, r3
 800b26c:	099b      	lsrs	r3, r3, #6
 800b26e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	bfb8      	it	lt
 800b282:	425b      	neglt	r3, r3
 800b284:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b288:	021b      	lsls	r3, r3, #8
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	7e1b      	ldrb	r3, [r3, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00b      	beq.n	800b2ac <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b29c:	e033      	b.n	800b306 <VL53L0X_calc_sigma_estimate+0x30e>
 800b29e:	bf00      	nop
 800b2a0:	028f87ae 	.word	0x028f87ae
 800b2a4:	0006999a 	.word	0x0006999a
 800b2a8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b2ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2c4:	fb02 f303 	mul.w	r3, r2, r3
 800b2c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b2cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b2d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2d2:	4413      	add	r3, r2
 800b2d4:	0c1b      	lsrs	r3, r3, #16
 800b2d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b2da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b2e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b2e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b2f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2f4:	fb03 f303 	mul.w	r3, r3, r3
 800b2f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b2fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b300:	0b9b      	lsrs	r3, r3, #14
 800b302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b30a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b30c:	fb02 f303 	mul.w	r3, r2, r3
 800b310:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	fb03 f303 	mul.w	r3, r3, r3
 800b322:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b328:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b330:	0c1b      	lsrs	r3, r3, #16
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b336:	fb03 f303 	mul.w	r3, r3, r3
 800b33a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b340:	4413      	add	r3, r2
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b346:	f7fd ffe9 	bl	800931c <VL53L0X_isqrt>
 800b34a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34e:	041b      	lsls	r3, r3, #16
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	3332      	adds	r3, #50	; 0x32
 800b356:	4a4b      	ldr	r2, [pc, #300]	; (800b484 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b358:	fba2 2303 	umull	r2, r3, r2, r3
 800b35c:	095a      	lsrs	r2, r3, #5
 800b35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b360:	fbb2 f3f3 	udiv	r3, r2, r3
 800b364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b36c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b370:	fb02 f303 	mul.w	r3, r2, r3
 800b374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b378:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b37c:	f241 3388 	movw	r3, #5000	; 0x1388
 800b380:	4413      	add	r3, r2
 800b382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b38a:	4a3f      	ldr	r2, [pc, #252]	; (800b488 <VL53L0X_calc_sigma_estimate+0x490>)
 800b38c:	fba2 2303 	umull	r2, r3, r2, r3
 800b390:	0b5b      	lsrs	r3, r3, #13
 800b392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b39a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d902      	bls.n	800b3a6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b3a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b3a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b3aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b3b4:	4a35      	ldr	r2, [pc, #212]	; (800b48c <VL53L0X_calc_sigma_estimate+0x494>)
 800b3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ba:	099b      	lsrs	r3, r3, #6
 800b3bc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b3c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3c6:	441a      	add	r2, r3
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fd ffa4 	bl	800931c <VL53L0X_isqrt>
 800b3d4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	021b      	lsls	r3, r3, #8
 800b3da:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b3e2:	4a2a      	ldr	r2, [pc, #168]	; (800b48c <VL53L0X_calc_sigma_estimate+0x494>)
 800b3e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e8:	099b      	lsrs	r3, r3, #6
 800b3ea:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b3ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3f0:	fb03 f303 	mul.w	r3, r3, r3
 800b3f4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	fb03 f303 	mul.w	r3, r3, r3
 800b3fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	4413      	add	r3, r2
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd ff89 	bl	800931c <VL53L0X_isqrt>
 800b40a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b412:	fb02 f303 	mul.w	r3, r2, r3
 800b416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b41a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <VL53L0X_calc_sigma_estimate+0x43c>
 800b420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <VL53L0X_calc_sigma_estimate+0x43c>
 800b428:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b42c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b442:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b44e:	6939      	ldr	r1, [r7, #16]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	9303      	str	r3, [sp, #12]
 800b454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff fca8 	bl	800adc0 <VL53L0X_calc_dmax>
 800b470:	4603      	mov	r3, r0
 800b472:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b476:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	37c0      	adds	r7, #192	; 0xc0
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	51eb851f 	.word	0x51eb851f
 800b488:	d1b71759 	.word	0xd1b71759
 800b48c:	10624dd3 	.word	0x10624dd3

0800b490 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b090      	sub	sp, #64	; 0x40
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	461a      	mov	r2, r3
 800b49c:	460b      	mov	r3, r1
 800b49e:	72fb      	strb	r3, [r7, #11]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	10db      	asrs	r3, r3, #3
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	f003 030f 	and.w	r3, r3, #15
 800b4ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b4f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d017      	beq.n	800b528 <VL53L0X_get_pal_range_status+0x98>
 800b4f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d013      	beq.n	800b528 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b500:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b504:	2b07      	cmp	r3, #7
 800b506:	d00f      	beq.n	800b528 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b508:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b50c:	2b0c      	cmp	r3, #12
 800b50e:	d00b      	beq.n	800b528 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b510:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b514:	2b0d      	cmp	r3, #13
 800b516:	d007      	beq.n	800b528 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b518:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b51c:	2b0e      	cmp	r3, #14
 800b51e:	d003      	beq.n	800b528 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b520:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b524:	2b0f      	cmp	r3, #15
 800b526:	d103      	bne.n	800b530 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b52e:	e002      	b.n	800b536 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b536:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b53e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b542:	461a      	mov	r2, r3
 800b544:	2100      	movs	r1, #0
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f7fc f9bc 	bl	80078c4 <VL53L0X_GetLimitCheckEnable>
 800b54c:	4603      	mov	r3, r0
 800b54e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b556:	2b00      	cmp	r3, #0
 800b558:	d02e      	beq.n	800b5b8 <VL53L0X_get_pal_range_status+0x128>
 800b55a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d12a      	bne.n	800b5b8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b562:	f107 0310 	add.w	r3, r7, #16
 800b566:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b56a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff fd43 	bl	800aff8 <VL53L0X_calc_sigma_estimate>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b578:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	b29a      	uxth	r2, r3
 800b584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b586:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b588:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d113      	bne.n	800b5b8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b590:	f107 0320 	add.w	r3, r7, #32
 800b594:	461a      	mov	r2, r3
 800b596:	2100      	movs	r1, #0
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f7fc fa19 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d006      	beq.n	800b5b8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d902      	bls.n	800b5b8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b5b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b5c0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7fc f97b 	bl	80078c4 <VL53L0X_GetLimitCheckEnable>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b5d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d044      	beq.n	800b666 <VL53L0X_get_pal_range_status+0x1d6>
 800b5dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d140      	bne.n	800b666 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b5e4:	f107 031c 	add.w	r3, r7, #28
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	2102      	movs	r1, #2
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7fc f9ef 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b5f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d107      	bne.n	800b610 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b600:	2201      	movs	r2, #1
 800b602:	21ff      	movs	r1, #255	; 0xff
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f9bb 	bl	800b980 <VL53L0X_WrByte>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b610:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b614:	2b00      	cmp	r3, #0
 800b616:	d109      	bne.n	800b62c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b618:	f107 0316 	add.w	r3, r7, #22
 800b61c:	461a      	mov	r2, r3
 800b61e:	21b6      	movs	r1, #182	; 0xb6
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 fa59 	bl	800bad8 <VL53L0X_RdWord>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b62c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b630:	2b00      	cmp	r3, #0
 800b632:	d107      	bne.n	800b644 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b634:	2200      	movs	r2, #0
 800b636:	21ff      	movs	r1, #255	; 0xff
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f9a1 	bl	800b980 <VL53L0X_WrByte>
 800b63e:	4603      	mov	r3, r0
 800b640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b644:	8afb      	ldrh	r3, [r7, #22]
 800b646:	025b      	lsls	r3, r3, #9
 800b648:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b64e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d006      	beq.n	800b666 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b658:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d902      	bls.n	800b666 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b660:	2301      	movs	r3, #1
 800b662:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b666:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d109      	bne.n	800b682 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b66e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b672:	461a      	mov	r2, r3
 800b674:	2103      	movs	r1, #3
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f7fc f924 	bl	80078c4 <VL53L0X_GetLimitCheckEnable>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b686:	2b00      	cmp	r3, #0
 800b688:	d023      	beq.n	800b6d2 <VL53L0X_get_pal_range_status+0x242>
 800b68a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d11f      	bne.n	800b6d2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b692:	893b      	ldrh	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	637b      	str	r3, [r7, #52]	; 0x34
 800b69c:	e005      	b.n	800b6aa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	021a      	lsls	r2, r3, #8
 800b6a2:	893b      	ldrh	r3, [r7, #8]
 800b6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b6aa:	f107 0318 	add.w	r3, r7, #24
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	2103      	movs	r1, #3
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f7fc f98c 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b6c4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d202      	bcs.n	800b6d2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d14a      	bne.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b6da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d103      	bne.n	800b6ea <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e4:	22ff      	movs	r2, #255	; 0xff
 800b6e6:	701a      	strb	r2, [r3, #0]
 800b6e8:	e042      	b.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b6ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d007      	beq.n	800b702 <VL53L0X_get_pal_range_status+0x272>
 800b6f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d003      	beq.n	800b702 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b6fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	d103      	bne.n	800b70a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b704:	2205      	movs	r2, #5
 800b706:	701a      	strb	r2, [r3, #0]
 800b708:	e032      	b.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b70a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b70e:	2b06      	cmp	r3, #6
 800b710:	d003      	beq.n	800b71a <VL53L0X_get_pal_range_status+0x28a>
 800b712:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b716:	2b09      	cmp	r3, #9
 800b718:	d103      	bne.n	800b722 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71c:	2204      	movs	r2, #4
 800b71e:	701a      	strb	r2, [r3, #0]
 800b720:	e026      	b.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b722:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b726:	2b08      	cmp	r3, #8
 800b728:	d007      	beq.n	800b73a <VL53L0X_get_pal_range_status+0x2aa>
 800b72a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b72e:	2b0a      	cmp	r3, #10
 800b730:	d003      	beq.n	800b73a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b732:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b736:	2b01      	cmp	r3, #1
 800b738:	d103      	bne.n	800b742 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73c:	2203      	movs	r2, #3
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	e016      	b.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b746:	2b04      	cmp	r3, #4
 800b748:	d003      	beq.n	800b752 <VL53L0X_get_pal_range_status+0x2c2>
 800b74a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d103      	bne.n	800b75a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b754:	2202      	movs	r2, #2
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e00a      	b.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b75a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d103      	bne.n	800b76a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b764:	2201      	movs	r2, #1
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	e002      	b.n	800b770 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b77a:	2200      	movs	r2, #0
 800b77c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b77e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b782:	461a      	mov	r2, r3
 800b784:	2101      	movs	r1, #1
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f7fc f89c 	bl	80078c4 <VL53L0X_GetLimitCheckEnable>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b792:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b796:	2b00      	cmp	r3, #0
 800b798:	d14f      	bne.n	800b83a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b79a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <VL53L0X_get_pal_range_status+0x31a>
 800b7a2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d103      	bne.n	800b7b2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7b0:	e002      	b.n	800b7b8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b7be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b7c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d003      	beq.n	800b7d2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b7ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d103      	bne.n	800b7da <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7d8:	e002      	b.n	800b7e0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b7e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b7ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <VL53L0X_get_pal_range_status+0x36a>
 800b7f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d103      	bne.n	800b802 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b800:	e002      	b.n	800b808 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b80e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <VL53L0X_get_pal_range_status+0x392>
 800b81a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d103      	bne.n	800b82a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b822:	2301      	movs	r3, #1
 800b824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b828:	e002      	b.n	800b830 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b83a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b83e:	4618      	mov	r0, r3
 800b840:	3740      	adds	r7, #64	; 0x40
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b846:	b580      	push	{r7, lr}
 800b848:	b088      	sub	sp, #32
 800b84a:	af02      	add	r7, sp, #8
 800b84c:	60f8      	str	r0, [r7, #12]
 800b84e:	60b9      	str	r1, [r7, #8]
 800b850:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	330a      	adds	r3, #10
 800b856:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b864:	b299      	uxth	r1, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	b29a      	uxth	r2, r3
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	4613      	mov	r3, r2
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	f7f7 fced 	bl	8003250 <HAL_I2C_Master_Transmit>
 800b876:	4603      	mov	r3, r0
 800b878:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b87a:	693b      	ldr	r3, [r7, #16]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af02      	add	r7, sp, #8
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	330a      	adds	r3, #10
 800b894:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b8a2:	f043 0301 	orr.w	r3, r3, #1
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	b299      	uxth	r1, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	f7f7 fdbf 	bl	8003438 <HAL_I2C_Master_Receive>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b8be:	693b      	ldr	r3, [r7, #16]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	607a      	str	r2, [r7, #4]
 800b8d2:	603b      	str	r3, [r7, #0]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b3f      	cmp	r3, #63	; 0x3f
 800b8e0:	d902      	bls.n	800b8e8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b8e2:	f06f 0303 	mvn.w	r3, #3
 800b8e6:	e016      	b.n	800b916 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b8e8:	4a0d      	ldr	r2, [pc, #52]	; (800b920 <VL53L0X_WriteMulti+0x58>)
 800b8ea:	7afb      	ldrb	r3, [r7, #11]
 800b8ec:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	6879      	ldr	r1, [r7, #4]
 800b8f2:	480c      	ldr	r0, [pc, #48]	; (800b924 <VL53L0X_WriteMulti+0x5c>)
 800b8f4:	f003 fba4 	bl	800f040 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4908      	ldr	r1, [pc, #32]	; (800b920 <VL53L0X_WriteMulti+0x58>)
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7ff ffa0 	bl	800b846 <_I2CWrite>
 800b906:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b90e:	23ec      	movs	r3, #236	; 0xec
 800b910:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3718      	adds	r7, #24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20004a90 	.word	0x20004a90
 800b924:	20004a91 	.word	0x20004a91

0800b928 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	460b      	mov	r3, r1
 800b936:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b938:	2300      	movs	r3, #0
 800b93a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b93c:	f107 030b 	add.w	r3, r7, #11
 800b940:	2201      	movs	r2, #1
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff ff7e 	bl	800b846 <_I2CWrite>
 800b94a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b952:	23ec      	movs	r3, #236	; 0xec
 800b954:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b956:	e00c      	b.n	800b972 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff ff91 	bl	800b884 <_I2CRead>
 800b962:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b96a:	23ec      	movs	r3, #236	; 0xec
 800b96c:	75fb      	strb	r3, [r7, #23]
 800b96e:	e000      	b.n	800b972 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b970:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
 800b98c:	4613      	mov	r3, r2
 800b98e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b994:	4a0b      	ldr	r2, [pc, #44]	; (800b9c4 <VL53L0X_WrByte+0x44>)
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b99a:	4a0a      	ldr	r2, [pc, #40]	; (800b9c4 <VL53L0X_WrByte+0x44>)
 800b99c:	78bb      	ldrb	r3, [r7, #2]
 800b99e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	4908      	ldr	r1, [pc, #32]	; (800b9c4 <VL53L0X_WrByte+0x44>)
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff ff4e 	bl	800b846 <_I2CWrite>
 800b9aa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b9b2:	23ec      	movs	r3, #236	; 0xec
 800b9b4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20004a90 	.word	0x20004a90

0800b9c8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70fb      	strb	r3, [r7, #3]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b9dc:	4a0e      	ldr	r2, [pc, #56]	; (800ba18 <VL53L0X_WrWord+0x50>)
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b9e2:	883b      	ldrh	r3, [r7, #0]
 800b9e4:	0a1b      	lsrs	r3, r3, #8
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <VL53L0X_WrWord+0x50>)
 800b9ec:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b9ee:	883b      	ldrh	r3, [r7, #0]
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	4b09      	ldr	r3, [pc, #36]	; (800ba18 <VL53L0X_WrWord+0x50>)
 800b9f4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	4907      	ldr	r1, [pc, #28]	; (800ba18 <VL53L0X_WrWord+0x50>)
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff ff23 	bl	800b846 <_I2CWrite>
 800ba00:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba08:	23ec      	movs	r3, #236	; 0xec
 800ba0a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ba0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20004a90 	.word	0x20004a90

0800ba1c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	4608      	mov	r0, r1
 800ba26:	4611      	mov	r1, r2
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	70fb      	strb	r3, [r7, #3]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70bb      	strb	r3, [r7, #2]
 800ba32:	4613      	mov	r3, r2
 800ba34:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ba3a:	f107 020e 	add.w	r2, r7, #14
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f81e 	bl	800ba84 <VL53L0X_RdByte>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ba4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d110      	bne.n	800ba76 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ba54:	7bba      	ldrb	r2, [r7, #14]
 800ba56:	78bb      	ldrb	r3, [r7, #2]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	787b      	ldrb	r3, [r7, #1]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ba64:	7bba      	ldrb	r2, [r7, #14]
 800ba66:	78fb      	ldrb	r3, [r7, #3]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7ff ff88 	bl	800b980 <VL53L0X_WrByte>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
 800ba74:	e000      	b.n	800ba78 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ba76:	bf00      	nop
done:
    return Status;
 800ba78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ba96:	f107 030b 	add.w	r3, r7, #11
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f7ff fed1 	bl	800b846 <_I2CWrite>
 800baa4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800baac:	23ec      	movs	r3, #236	; 0xec
 800baae:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bab0:	e00c      	b.n	800bacc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bab2:	2201      	movs	r2, #1
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff fee4 	bl	800b884 <_I2CRead>
 800babc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bac4:	23ec      	movs	r3, #236	; 0xec
 800bac6:	75fb      	strb	r3, [r7, #23]
 800bac8:	e000      	b.n	800bacc <VL53L0X_RdByte+0x48>
    }
done:
 800baca:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bacc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	460b      	mov	r3, r1
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800baea:	f107 030b 	add.w	r3, r7, #11
 800baee:	2201      	movs	r2, #1
 800baf0:	4619      	mov	r1, r3
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7ff fea7 	bl	800b846 <_I2CWrite>
 800baf8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb00:	23ec      	movs	r3, #236	; 0xec
 800bb02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb04:	e017      	b.n	800bb36 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bb06:	2202      	movs	r2, #2
 800bb08:	490e      	ldr	r1, [pc, #56]	; (800bb44 <VL53L0X_RdWord+0x6c>)
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff feba 	bl	800b884 <_I2CRead>
 800bb10:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb18:	23ec      	movs	r3, #236	; 0xec
 800bb1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb1c:	e00b      	b.n	800bb36 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bb1e:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <VL53L0X_RdWord+0x6c>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	021b      	lsls	r3, r3, #8
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	4b06      	ldr	r3, [pc, #24]	; (800bb44 <VL53L0X_RdWord+0x6c>)
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	4413      	add	r3, r2
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bb36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	20004a90 	.word	0x20004a90

0800bb48 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	460b      	mov	r3, r1
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb56:	2300      	movs	r3, #0
 800bb58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bb5a:	f107 030b 	add.w	r3, r7, #11
 800bb5e:	2201      	movs	r2, #1
 800bb60:	4619      	mov	r1, r3
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7ff fe6f 	bl	800b846 <_I2CWrite>
 800bb68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb70:	23ec      	movs	r3, #236	; 0xec
 800bb72:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb74:	e01b      	b.n	800bbae <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bb76:	2204      	movs	r2, #4
 800bb78:	4910      	ldr	r1, [pc, #64]	; (800bbbc <VL53L0X_RdDWord+0x74>)
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fe82 	bl	800b884 <_I2CRead>
 800bb80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb88:	23ec      	movs	r3, #236	; 0xec
 800bb8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb8c:	e00f      	b.n	800bbae <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bb8e:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <VL53L0X_RdDWord+0x74>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	061a      	lsls	r2, r3, #24
 800bb94:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <VL53L0X_RdDWord+0x74>)
 800bb96:	785b      	ldrb	r3, [r3, #1]
 800bb98:	041b      	lsls	r3, r3, #16
 800bb9a:	441a      	add	r2, r3
 800bb9c:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <VL53L0X_RdDWord+0x74>)
 800bb9e:	789b      	ldrb	r3, [r3, #2]
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	4413      	add	r3, r2
 800bba4:	4a05      	ldr	r2, [pc, #20]	; (800bbbc <VL53L0X_RdDWord+0x74>)
 800bba6:	78d2      	ldrb	r2, [r2, #3]
 800bba8:	441a      	add	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bbae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20004a90 	.word	0x20004a90

0800bbc0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bbcc:	2002      	movs	r0, #2
 800bbce:	f7f6 fe43 	bl	8002858 <HAL_Delay>
    return status;
 800bbd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <threeline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool threeline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_threeline_activations_map, 1, params)) {
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	2101      	movs	r1, #1
 800bbee:	484b      	ldr	r0, [pc, #300]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bbf0:	f000 fb7e 	bl	800c2f0 <ai_platform_get_activations_map>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f000 8086 	beq.w	800bd08 <threeline_configure_activations+0x128>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_5_input0_output_array.data = AI_PTR(g_threeline_activations_map[0] + 916);
 800bbfc:	4b47      	ldr	r3, [pc, #284]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f503 7365 	add.w	r3, r3, #916	; 0x394
 800bc04:	4a46      	ldr	r2, [pc, #280]	; (800bd20 <threeline_configure_activations+0x140>)
 800bc06:	6093      	str	r3, [r2, #8]
    serving_default_dense_5_input0_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 916);
 800bc08:	4b44      	ldr	r3, [pc, #272]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f503 7365 	add.w	r3, r3, #916	; 0x394
 800bc10:	4a43      	ldr	r2, [pc, #268]	; (800bd20 <threeline_configure_activations+0x140>)
 800bc12:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_threeline_activations_map[0] + 916);
 800bc14:	4b41      	ldr	r3, [pc, #260]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f503 7365 	add.w	r3, r3, #916	; 0x394
 800bc1c:	4a41      	ldr	r2, [pc, #260]	; (800bd24 <threeline_configure_activations+0x144>)
 800bc1e:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 916);
 800bc20:	4b3e      	ldr	r3, [pc, #248]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f503 7365 	add.w	r3, r3, #916	; 0x394
 800bc28:	4a3e      	ldr	r2, [pc, #248]	; (800bd24 <threeline_configure_activations+0x144>)
 800bc2a:	60d3      	str	r3, [r2, #12]
    
    gemm_1_scratch0_array.data = AI_PTR(g_threeline_activations_map[0] + 952);
 800bc2c:	4b3b      	ldr	r3, [pc, #236]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800bc34:	4a3c      	ldr	r2, [pc, #240]	; (800bd28 <threeline_configure_activations+0x148>)
 800bc36:	6093      	str	r3, [r2, #8]
    gemm_1_scratch0_array.data_start = AI_PTR(g_threeline_activations_map[0] + 952);
 800bc38:	4b38      	ldr	r3, [pc, #224]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800bc40:	4a39      	ldr	r2, [pc, #228]	; (800bd28 <threeline_configure_activations+0x148>)
 800bc42:	60d3      	str	r3, [r2, #12]
    
    gemm_1_output_array.data = AI_PTR(g_threeline_activations_map[0] + 1024);
 800bc44:	4b35      	ldr	r3, [pc, #212]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc4c:	4a37      	ldr	r2, [pc, #220]	; (800bd2c <threeline_configure_activations+0x14c>)
 800bc4e:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 1024);
 800bc50:	4b32      	ldr	r3, [pc, #200]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc58:	4a34      	ldr	r2, [pc, #208]	; (800bd2c <threeline_configure_activations+0x14c>)
 800bc5a:	60d3      	str	r3, [r2, #12]
    
    gemm_2_scratch0_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800bc5c:	4b2f      	ldr	r3, [pc, #188]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a33      	ldr	r2, [pc, #204]	; (800bd30 <threeline_configure_activations+0x150>)
 800bc62:	6093      	str	r3, [r2, #8]
    gemm_2_scratch0_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800bc64:	4b2d      	ldr	r3, [pc, #180]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a31      	ldr	r2, [pc, #196]	; (800bd30 <threeline_configure_activations+0x150>)
 800bc6a:	60d3      	str	r3, [r2, #12]
    
    gemm_2_output_array.data = AI_PTR(g_threeline_activations_map[0] + 1536);
 800bc6c:	4b2b      	ldr	r3, [pc, #172]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800bc74:	4a2f      	ldr	r2, [pc, #188]	; (800bd34 <threeline_configure_activations+0x154>)
 800bc76:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 1536);
 800bc78:	4b28      	ldr	r3, [pc, #160]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800bc80:	4a2c      	ldr	r2, [pc, #176]	; (800bd34 <threeline_configure_activations+0x154>)
 800bc82:	60d3      	str	r3, [r2, #12]
    
    gemm_3_scratch0_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800bc84:	4b25      	ldr	r3, [pc, #148]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a2b      	ldr	r2, [pc, #172]	; (800bd38 <threeline_configure_activations+0x158>)
 800bc8a:	6093      	str	r3, [r2, #8]
    gemm_3_scratch0_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800bc8c:	4b23      	ldr	r3, [pc, #140]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a29      	ldr	r2, [pc, #164]	; (800bd38 <threeline_configure_activations+0x158>)
 800bc92:	60d3      	str	r3, [r2, #12]
    
    gemm_3_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800bc94:	4b21      	ldr	r3, [pc, #132]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bc9c:	4a27      	ldr	r2, [pc, #156]	; (800bd3c <threeline_configure_activations+0x15c>)
 800bc9e:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800bca0:	4b1e      	ldr	r3, [pc, #120]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bca8:	4a24      	ldr	r2, [pc, #144]	; (800bd3c <threeline_configure_activations+0x15c>)
 800bcaa:	60d3      	str	r3, [r2, #12]
    
    gemm_4_scratch0_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800bcac:	4b1b      	ldr	r3, [pc, #108]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a23      	ldr	r2, [pc, #140]	; (800bd40 <threeline_configure_activations+0x160>)
 800bcb2:	6093      	str	r3, [r2, #8]
    gemm_4_scratch0_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800bcb4:	4b19      	ldr	r3, [pc, #100]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a21      	ldr	r2, [pc, #132]	; (800bd40 <threeline_configure_activations+0x160>)
 800bcba:	60d3      	str	r3, [r2, #12]
    
    gemm_4_output_array.data = AI_PTR(g_threeline_activations_map[0] + 128);
 800bcbc:	4b17      	ldr	r3, [pc, #92]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3380      	adds	r3, #128	; 0x80
 800bcc2:	4a20      	ldr	r2, [pc, #128]	; (800bd44 <threeline_configure_activations+0x164>)
 800bcc4:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 128);
 800bcc6:	4b15      	ldr	r3, [pc, #84]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3380      	adds	r3, #128	; 0x80
 800bccc:	4a1d      	ldr	r2, [pc, #116]	; (800bd44 <threeline_configure_activations+0x164>)
 800bcce:	60d3      	str	r3, [r2, #12]
    
    gemm_5_scratch0_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800bcd0:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a1c      	ldr	r2, [pc, #112]	; (800bd48 <threeline_configure_activations+0x168>)
 800bcd6:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800bcd8:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a1a      	ldr	r2, [pc, #104]	; (800bd48 <threeline_configure_activations+0x168>)
 800bcde:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_threeline_activations_map[0] + 192);
 800bce0:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	33c0      	adds	r3, #192	; 0xc0
 800bce6:	4a19      	ldr	r2, [pc, #100]	; (800bd4c <threeline_configure_activations+0x16c>)
 800bce8:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 192);
 800bcea:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	33c0      	adds	r3, #192	; 0xc0
 800bcf0:	4a16      	ldr	r2, [pc, #88]	; (800bd4c <threeline_configure_activations+0x16c>)
 800bcf2:	60d3      	str	r3, [r2, #12]
    
    conversion_6_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800bcf4:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a15      	ldr	r2, [pc, #84]	; (800bd50 <threeline_configure_activations+0x170>)
 800bcfa:	6093      	str	r3, [r2, #8]
    conversion_6_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800bcfc:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <threeline_configure_activations+0x13c>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a13      	ldr	r2, [pc, #76]	; (800bd50 <threeline_configure_activations+0x170>)
 800bd02:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e005      	b.n	800bd14 <threeline_configure_activations+0x134>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800bd08:	2213      	movs	r2, #19
 800bd0a:	2130      	movs	r1, #48	; 0x30
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fc6d 	bl	800c5ec <ai_platform_network_set_error>
  return false;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	20004ad0 	.word	0x20004ad0
 800bd20:	200004c0 	.word	0x200004c0
 800bd24:	200004d0 	.word	0x200004d0
 800bd28:	20000470 	.word	0x20000470
 800bd2c:	200004e0 	.word	0x200004e0
 800bd30:	20000480 	.word	0x20000480
 800bd34:	200004f0 	.word	0x200004f0
 800bd38:	20000490 	.word	0x20000490
 800bd3c:	20000500 	.word	0x20000500
 800bd40:	200004a0 	.word	0x200004a0
 800bd44:	20000510 	.word	0x20000510
 800bd48:	200004b0 	.word	0x200004b0
 800bd4c:	200003b0 	.word	0x200003b0
 800bd50:	200003c0 	.word	0x200003c0

0800bd54 <threeline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool threeline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_threeline_weights_map, 1, params)) {
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	2101      	movs	r1, #1
 800bd62:	4861      	ldr	r0, [pc, #388]	; (800bee8 <threeline_configure_weights+0x194>)
 800bd64:	f000 fa6c 	bl	800c240 <ai_platform_get_weights_map>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80b2 	beq.w	800bed4 <threeline_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800bd70:	4b5e      	ldr	r3, [pc, #376]	; (800beec <threeline_configure_weights+0x198>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd78:	4a5c      	ldr	r2, [pc, #368]	; (800beec <threeline_configure_weights+0x198>)
 800bd7a:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 0);
 800bd7c:	4b5a      	ldr	r3, [pc, #360]	; (800bee8 <threeline_configure_weights+0x194>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a5a      	ldr	r2, [pc, #360]	; (800beec <threeline_configure_weights+0x198>)
 800bd82:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 0);
 800bd84:	4b58      	ldr	r3, [pc, #352]	; (800bee8 <threeline_configure_weights+0x194>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a58      	ldr	r2, [pc, #352]	; (800beec <threeline_configure_weights+0x198>)
 800bd8a:	60d3      	str	r3, [r2, #12]
    
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800bd8c:	4b58      	ldr	r3, [pc, #352]	; (800bef0 <threeline_configure_weights+0x19c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd94:	4a56      	ldr	r2, [pc, #344]	; (800bef0 <threeline_configure_weights+0x19c>)
 800bd96:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 18432);
 800bd98:	4b53      	ldr	r3, [pc, #332]	; (800bee8 <threeline_configure_weights+0x194>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800bda0:	4a53      	ldr	r2, [pc, #332]	; (800bef0 <threeline_configure_weights+0x19c>)
 800bda2:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 18432);
 800bda4:	4b50      	ldr	r3, [pc, #320]	; (800bee8 <threeline_configure_weights+0x194>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800bdac:	4a50      	ldr	r2, [pc, #320]	; (800bef0 <threeline_configure_weights+0x19c>)
 800bdae:	60d3      	str	r3, [r2, #12]
    
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800bdb0:	4b50      	ldr	r3, [pc, #320]	; (800bef4 <threeline_configure_weights+0x1a0>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdb8:	4a4e      	ldr	r2, [pc, #312]	; (800bef4 <threeline_configure_weights+0x1a0>)
 800bdba:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 20480);
 800bdbc:	4b4a      	ldr	r3, [pc, #296]	; (800bee8 <threeline_configure_weights+0x194>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800bdc4:	4a4b      	ldr	r2, [pc, #300]	; (800bef4 <threeline_configure_weights+0x1a0>)
 800bdc6:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 20480);
 800bdc8:	4b47      	ldr	r3, [pc, #284]	; (800bee8 <threeline_configure_weights+0x194>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800bdd0:	4a48      	ldr	r2, [pc, #288]	; (800bef4 <threeline_configure_weights+0x1a0>)
 800bdd2:	60d3      	str	r3, [r2, #12]
    
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800bdd4:	4b48      	ldr	r3, [pc, #288]	; (800bef8 <threeline_configure_weights+0x1a4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bddc:	4a46      	ldr	r2, [pc, #280]	; (800bef8 <threeline_configure_weights+0x1a4>)
 800bdde:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 86016);
 800bde0:	4b41      	ldr	r3, [pc, #260]	; (800bee8 <threeline_configure_weights+0x194>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800bde8:	4a43      	ldr	r2, [pc, #268]	; (800bef8 <threeline_configure_weights+0x1a4>)
 800bdea:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 86016);
 800bdec:	4b3e      	ldr	r3, [pc, #248]	; (800bee8 <threeline_configure_weights+0x194>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800bdf4:	4a40      	ldr	r2, [pc, #256]	; (800bef8 <threeline_configure_weights+0x1a4>)
 800bdf6:	60d3      	str	r3, [r2, #12]
    
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800bdf8:	4b40      	ldr	r3, [pc, #256]	; (800befc <threeline_configure_weights+0x1a8>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be00:	4a3e      	ldr	r2, [pc, #248]	; (800befc <threeline_configure_weights+0x1a8>)
 800be02:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 86528);
 800be04:	4b38      	ldr	r3, [pc, #224]	; (800bee8 <threeline_configure_weights+0x194>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f503 33a9 	add.w	r3, r3, #86528	; 0x15200
 800be0c:	4a3b      	ldr	r2, [pc, #236]	; (800befc <threeline_configure_weights+0x1a8>)
 800be0e:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 86528);
 800be10:	4b35      	ldr	r3, [pc, #212]	; (800bee8 <threeline_configure_weights+0x194>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f503 33a9 	add.w	r3, r3, #86528	; 0x15200
 800be18:	4a38      	ldr	r2, [pc, #224]	; (800befc <threeline_configure_weights+0x1a8>)
 800be1a:	60d3      	str	r3, [r2, #12]
    
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800be1c:	4b38      	ldr	r3, [pc, #224]	; (800bf00 <threeline_configure_weights+0x1ac>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be24:	4a36      	ldr	r2, [pc, #216]	; (800bf00 <threeline_configure_weights+0x1ac>)
 800be26:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 94720);
 800be28:	4b2f      	ldr	r3, [pc, #188]	; (800bee8 <threeline_configure_weights+0x194>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f503 33b9 	add.w	r3, r3, #94720	; 0x17200
 800be30:	4a33      	ldr	r2, [pc, #204]	; (800bf00 <threeline_configure_weights+0x1ac>)
 800be32:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 94720);
 800be34:	4b2c      	ldr	r3, [pc, #176]	; (800bee8 <threeline_configure_weights+0x194>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f503 33b9 	add.w	r3, r3, #94720	; 0x17200
 800be3c:	4a30      	ldr	r2, [pc, #192]	; (800bf00 <threeline_configure_weights+0x1ac>)
 800be3e:	60d3      	str	r3, [r2, #12]
    
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800be40:	4b30      	ldr	r3, [pc, #192]	; (800bf04 <threeline_configure_weights+0x1b0>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be48:	4a2e      	ldr	r2, [pc, #184]	; (800bf04 <threeline_configure_weights+0x1b0>)
 800be4a:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 94976);
 800be4c:	4b26      	ldr	r3, [pc, #152]	; (800bee8 <threeline_configure_weights+0x194>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <threeline_configure_weights+0x1b4>)
 800be52:	4413      	add	r3, r2
 800be54:	4a2b      	ldr	r2, [pc, #172]	; (800bf04 <threeline_configure_weights+0x1b0>)
 800be56:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 94976);
 800be58:	4b23      	ldr	r3, [pc, #140]	; (800bee8 <threeline_configure_weights+0x194>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <threeline_configure_weights+0x1b4>)
 800be5e:	4413      	add	r3, r2
 800be60:	4a28      	ldr	r2, [pc, #160]	; (800bf04 <threeline_configure_weights+0x1b0>)
 800be62:	60d3      	str	r3, [r2, #12]
    
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800be64:	4b29      	ldr	r3, [pc, #164]	; (800bf0c <threeline_configure_weights+0x1b8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be6c:	4a27      	ldr	r2, [pc, #156]	; (800bf0c <threeline_configure_weights+0x1b8>)
 800be6e:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 99072);
 800be70:	4b1d      	ldr	r3, [pc, #116]	; (800bee8 <threeline_configure_weights+0x194>)
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	4b26      	ldr	r3, [pc, #152]	; (800bf10 <threeline_configure_weights+0x1bc>)
 800be76:	4413      	add	r3, r2
 800be78:	4a24      	ldr	r2, [pc, #144]	; (800bf0c <threeline_configure_weights+0x1b8>)
 800be7a:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 99072);
 800be7c:	4b1a      	ldr	r3, [pc, #104]	; (800bee8 <threeline_configure_weights+0x194>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	4b23      	ldr	r3, [pc, #140]	; (800bf10 <threeline_configure_weights+0x1bc>)
 800be82:	4413      	add	r3, r2
 800be84:	4a21      	ldr	r2, [pc, #132]	; (800bf0c <threeline_configure_weights+0x1b8>)
 800be86:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800be88:	4b22      	ldr	r3, [pc, #136]	; (800bf14 <threeline_configure_weights+0x1c0>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be90:	4a20      	ldr	r2, [pc, #128]	; (800bf14 <threeline_configure_weights+0x1c0>)
 800be92:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 99328);
 800be94:	4b14      	ldr	r3, [pc, #80]	; (800bee8 <threeline_configure_weights+0x194>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800be9c:	4a1d      	ldr	r2, [pc, #116]	; (800bf14 <threeline_configure_weights+0x1c0>)
 800be9e:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 99328);
 800bea0:	4b11      	ldr	r3, [pc, #68]	; (800bee8 <threeline_configure_weights+0x194>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bea8:	4a1a      	ldr	r2, [pc, #104]	; (800bf14 <threeline_configure_weights+0x1c0>)
 800beaa:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800beac:	4b1a      	ldr	r3, [pc, #104]	; (800bf18 <threeline_configure_weights+0x1c4>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800beb4:	4a18      	ldr	r2, [pc, #96]	; (800bf18 <threeline_configure_weights+0x1c4>)
 800beb6:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 99584);
 800beb8:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <threeline_configure_weights+0x194>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	4b17      	ldr	r3, [pc, #92]	; (800bf1c <threeline_configure_weights+0x1c8>)
 800bebe:	4413      	add	r3, r2
 800bec0:	4a15      	ldr	r2, [pc, #84]	; (800bf18 <threeline_configure_weights+0x1c4>)
 800bec2:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 99584);
 800bec4:	4b08      	ldr	r3, [pc, #32]	; (800bee8 <threeline_configure_weights+0x194>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	4b14      	ldr	r3, [pc, #80]	; (800bf1c <threeline_configure_weights+0x1c8>)
 800beca:	4413      	add	r3, r2
 800becc:	4a12      	ldr	r2, [pc, #72]	; (800bf18 <threeline_configure_weights+0x1c4>)
 800bece:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e005      	b.n	800bee0 <threeline_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800bed4:	2212      	movs	r2, #18
 800bed6:	2130      	movs	r1, #48	; 0x30
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fb87 	bl	800c5ec <ai_platform_network_set_error>
  return false;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20004ad4 	.word	0x20004ad4
 800beec:	200003d0 	.word	0x200003d0
 800bef0:	200003e0 	.word	0x200003e0
 800bef4:	200003f0 	.word	0x200003f0
 800bef8:	20000400 	.word	0x20000400
 800befc:	20000410 	.word	0x20000410
 800bf00:	20000420 	.word	0x20000420
 800bf04:	20000430 	.word	0x20000430
 800bf08:	00017300 	.word	0x00017300
 800bf0c:	20000440 	.word	0x20000440
 800bf10:	00018300 	.word	0x00018300
 800bf14:	20000450 	.word	0x20000450
 800bf18:	20000460 	.word	0x20000460
 800bf1c:	00018500 	.word	0x00018500

0800bf20 <ai_threeline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_threeline_get_error(ai_handle network)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fa53 	bl	800c3d4 <ai_platform_network_get_error>
 800bf2e:	4603      	mov	r3, r0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <ai_threeline_create>:

AI_API_ENTRY
ai_error ai_threeline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af02      	add	r7, sp, #8
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800bf42:	2300      	movs	r3, #0
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	2305      	movs	r3, #5
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4a04      	ldr	r2, [pc, #16]	; (800bf60 <ai_threeline_create+0x28>)
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fe65 	bl	800cc20 <ai_platform_network_create>
 800bf56:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20000da4 	.word	0x20000da4

0800bf64 <ai_threeline_create_and_init>:

AI_API_ENTRY
ai_error ai_threeline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b096      	sub	sp, #88	; 0x58
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_threeline_create(network, AI_THREELINE_DATA_CONFIG);
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f7ff ffe0 	bl	800bf38 <ai_threeline_create>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800bf7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <ai_threeline_create_and_init+0x24>
        return err;
 800bf84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf86:	e05d      	b.n	800c044 <ai_threeline_create_and_init+0xe0>
    if (ai_threeline_data_params_get(&params) != true) {
 800bf88:	f107 0314 	add.w	r3, r7, #20
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f899 	bl	800c0c4 <ai_threeline_data_params_get>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f083 0301 	eor.w	r3, r3, #1
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <ai_threeline_create_and_init+0x4c>
        err = ai_threeline_get_error(*network);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff ffbc 	bl	800bf20 <ai_threeline_get_error>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800bfac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfae:	e049      	b.n	800c044 <ai_threeline_create_and_init+0xe0>
    }
#if defined(AI_THREELINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d016      	beq.n	800bfe4 <ai_threeline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	657b      	str	r3, [r7, #84]	; 0x54
 800bfba:	e00e      	b.n	800bfda <ai_threeline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800bfbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	f107 0314 	add.w	r3, r7, #20
 800bfcc:	330c      	adds	r3, #12
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 f922 	bl	800c218 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800bfd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	657b      	str	r3, [r7, #84]	; 0x54
 800bfda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfdc:	461a      	mov	r2, r3
 800bfde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	dbeb      	blt.n	800bfbc <ai_threeline_create_and_init+0x58>
    }
#endif
#if defined(AI_THREELINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d016      	beq.n	800c018 <ai_threeline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800bfea:	2300      	movs	r3, #0
 800bfec:	653b      	str	r3, [r7, #80]	; 0x50
 800bfee:	e00e      	b.n	800c00e <ai_threeline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800bff0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	4413      	add	r3, r2
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f000 f908 	bl	800c218 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00a:	3301      	adds	r3, #1
 800c00c:	653b      	str	r3, [r7, #80]	; 0x50
 800c00e:	8b7b      	ldrh	r3, [r7, #26]
 800c010:	461a      	mov	r2, r3
 800c012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c014:	4293      	cmp	r3, r2
 800c016:	dbeb      	blt.n	800bff0 <ai_threeline_create_and_init+0x8c>
    }
#endif
    if (ai_threeline_init(*network, &params) != true) {
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f107 0214 	add.w	r2, r7, #20
 800c020:	4611      	mov	r1, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f000 f812 	bl	800c04c <ai_threeline_init>
 800c028:	4603      	mov	r3, r0
 800c02a:	f083 0301 	eor.w	r3, r3, #1
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b00      	cmp	r3, #0
 800c032:	d006      	beq.n	800c042 <ai_threeline_create_and_init+0xde>
        err = ai_threeline_get_error(*network);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff ff71 	bl	800bf20 <ai_threeline_get_error>
 800c03e:	4603      	mov	r3, r0
 800c040:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800c042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c044:	4618      	mov	r0, r3
 800c046:	3758      	adds	r7, #88	; 0x58
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <ai_threeline_init>:
}

AI_API_ENTRY
ai_bool ai_threeline_init(
  ai_handle network, const ai_network_params* params)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 ffbb 	bl	800cfd4 <ai_platform_network_init>
 800c05e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <ai_threeline_init+0x1e>
 800c066:	2300      	movs	r3, #0
 800c068:	e028      	b.n	800c0bc <ai_threeline_init+0x70>

  ai_bool ok = true;
 800c06a:	2301      	movs	r3, #1
 800c06c:	72fb      	strb	r3, [r7, #11]
  ok &= threeline_configure_weights(net_ctx, params);
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fe6f 	bl	800bd54 <threeline_configure_weights>
 800c076:	4603      	mov	r3, r0
 800c078:	461a      	mov	r2, r3
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	4013      	ands	r3, r2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	bf14      	ite	ne
 800c082:	2301      	movne	r3, #1
 800c084:	2300      	moveq	r3, #0
 800c086:	72fb      	strb	r3, [r7, #11]
  ok &= threeline_configure_activations(net_ctx, params);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff fda8 	bl	800bbe0 <threeline_configure_activations>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	4013      	ands	r3, r2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	bf14      	ite	ne
 800c09c:	2301      	movne	r3, #1
 800c09e:	2300      	moveq	r3, #0
 800c0a0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f001 f932 	bl	800d30c <ai_platform_network_post_init>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	bf14      	ite	ne
 800c0b4:	2301      	movne	r3, #1
 800c0b6:	2300      	moveq	r3, #0
 800c0b8:	72fb      	strb	r3, [r7, #11]

  return ok;
 800c0ba:	7afb      	ldrb	r3, [r7, #11]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <ai_threeline_data_params_get>:
 * @ingroup threeline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_threeline_data_params_get(ai_network_params* params)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <ai_threeline_data_params_get+0x12>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e016      	b.n	800c104 <ai_threeline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800c0d6:	4a0d      	ldr	r2, [pc, #52]	; (800c10c <ai_threeline_data_params_get+0x48>)
 800c0d8:	f107 0310 	add.w	r3, r7, #16
 800c0dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0e0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_THREELINE_DATA_ACTIVATIONS_COUNT, g_threeline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800c0e4:	4a0a      	ldr	r2, [pc, #40]	; (800c110 <ai_threeline_data_params_get+0x4c>)
 800c0e6:	f107 0308 	add.w	r3, r7, #8
 800c0ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0ee:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_THREELINE_DATA_WEIGHTS_COUNT, g_threeline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800c0f2:	f107 0210 	add.w	r2, r7, #16
 800c0f6:	f107 0308 	add.w	r3, r7, #8
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f94f 	bl	800c3a0 <ai_platform_bind_network_params>
 800c102:	4603      	mov	r3, r0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	08012894 	.word	0x08012894
 800c110:	0801289c 	.word	0x0801289c

0800c114 <ai_twoline_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_twoline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d104      	bne.n	800c12e <ai_twoline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c124:	4b06      	ldr	r3, [pc, #24]	; (800c140 <ai_twoline_inputs_get+0x2c>)
 800c126:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a06      	ldr	r2, [pc, #24]	; (800c144 <ai_twoline_inputs_get+0x30>)
 800c12c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fa61 	bl	800c5f8 <ai_platform_inputs_get>
 800c136:	4603      	mov	r3, r0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	2000183c 	.word	0x2000183c
 800c144:	a1c00100 	.word	0xa1c00100

0800c148 <ai_twoline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d104      	bne.n	800c162 <ai_twoline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c158:	4b06      	ldr	r3, [pc, #24]	; (800c174 <ai_twoline_outputs_get+0x2c>)
 800c15a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a06      	ldr	r2, [pc, #24]	; (800c178 <ai_twoline_outputs_get+0x30>)
 800c160:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fbd3 	bl	800c910 <ai_platform_outputs_get>
 800c16a:	4603      	mov	r3, r0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	2000183c 	.word	0x2000183c
 800c178:	a1c00100 	.word	0xa1c00100

0800c17c <ai_twoline_run>:


AI_API_ENTRY
ai_i32 ai_twoline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f001 f9e7 	bl	800d560 <ai_platform_network_process>
 800c192:	4603      	mov	r3, r0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <ai_buffer_get_size>:
 800c19c:	b368      	cbz	r0, 800c1fa <ai_buffer_get_size+0x5e>
 800c19e:	4b17      	ldr	r3, [pc, #92]	; (800c1fc <ai_buffer_get_size+0x60>)
 800c1a0:	4a17      	ldr	r2, [pc, #92]	; (800c200 <ai_buffer_get_size+0x64>)
 800c1a2:	b410      	push	{r4}
 800c1a4:	6804      	ldr	r4, [r0, #0]
 800c1a6:	4023      	ands	r3, r4
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d123      	bne.n	800c1f4 <ai_buffer_get_size+0x58>
 800c1ac:	b311      	cbz	r1, 800c1f4 <ai_buffer_get_size+0x58>
 800c1ae:	6984      	ldr	r4, [r0, #24]
 800c1b0:	6862      	ldr	r2, [r4, #4]
 800c1b2:	321f      	adds	r2, #31
 800c1b4:	f022 021f 	bic.w	r2, r2, #31
 800c1b8:	7d03      	ldrb	r3, [r0, #20]
 800c1ba:	6941      	ldr	r1, [r0, #20]
 800c1bc:	f1a3 0301 	sub.w	r3, r3, #1
 800c1c0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800c1c4:	fab3 f383 	clz	r3, r3
 800c1c8:	095b      	lsrs	r3, r3, #5
 800c1ca:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800c1ce:	da0c      	bge.n	800c1ea <ai_buffer_get_size+0x4e>
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d103      	bne.n	800c1dc <ai_buffer_get_size+0x40>
 800c1d4:	2802      	cmp	r0, #2
 800c1d6:	f04f 0302 	mov.w	r3, #2
 800c1da:	d006      	beq.n	800c1ea <ai_buffer_get_size+0x4e>
 800c1dc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	4298      	cmp	r0, r3
 800c1e4:	fb01 f202 	mul.w	r2, r1, r2
 800c1e8:	d1f2      	bne.n	800c1d0 <ai_buffer_get_size+0x34>
 800c1ea:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800c1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	6984      	ldr	r4, [r0, #24]
 800c1f6:	6862      	ldr	r2, [r4, #4]
 800c1f8:	e7de      	b.n	800c1b8 <ai_buffer_get_size+0x1c>
 800c1fa:	4770      	bx	lr
 800c1fc:	017fffff 	.word	0x017fffff
 800c200:	000400c0 	.word	0x000400c0

0800c204 <ai_buffer_array_sane>:
 800c204:	b138      	cbz	r0, 800c216 <ai_buffer_array_sane+0x12>
 800c206:	6843      	ldr	r3, [r0, #4]
 800c208:	b123      	cbz	r3, 800c214 <ai_buffer_array_sane+0x10>
 800c20a:	8840      	ldrh	r0, [r0, #2]
 800c20c:	3800      	subs	r0, #0
 800c20e:	bf18      	it	ne
 800c210:	2001      	movne	r0, #1
 800c212:	4770      	bx	lr
 800c214:	4618      	mov	r0, r3
 800c216:	4770      	bx	lr

0800c218 <ai_buffer_array_item_set_address>:
 800c218:	b150      	cbz	r0, 800c230 <ai_buffer_array_item_set_address+0x18>
 800c21a:	6843      	ldr	r3, [r0, #4]
 800c21c:	b14b      	cbz	r3, 800c232 <ai_buffer_array_item_set_address+0x1a>
 800c21e:	8840      	ldrh	r0, [r0, #2]
 800c220:	b900      	cbnz	r0, 800c224 <ai_buffer_array_item_set_address+0xc>
 800c222:	4770      	bx	lr
 800c224:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c228:	2001      	movs	r0, #1
 800c22a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c22e:	604a      	str	r2, [r1, #4]
 800c230:	4770      	bx	lr
 800c232:	4618      	mov	r0, r3
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop

0800c238 <_ai_platform_acquire_crc>:
 800c238:	2001      	movs	r0, #1
 800c23a:	4770      	bx	lr

0800c23c <_ai_platform_release_crc>:
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop

0800c240 <ai_platform_get_weights_map>:
 800c240:	2900      	cmp	r1, #0
 800c242:	bf18      	it	ne
 800c244:	2800      	cmpne	r0, #0
 800c246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c248:	bf0c      	ite	eq
 800c24a:	2401      	moveq	r4, #1
 800c24c:	2400      	movne	r4, #0
 800c24e:	2a00      	cmp	r2, #0
 800c250:	bf08      	it	eq
 800c252:	f044 0401 	orreq.w	r4, r4, #1
 800c256:	b114      	cbz	r4, 800c25e <ai_platform_get_weights_map+0x1e>
 800c258:	2400      	movs	r4, #0
 800c25a:	4620      	mov	r0, r4
 800c25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c25e:	4616      	mov	r6, r2
 800c260:	4b22      	ldr	r3, [pc, #136]	; (800c2ec <ai_platform_get_weights_map+0xac>)
 800c262:	6812      	ldr	r2, [r2, #0]
 800c264:	4605      	mov	r5, r0
 800c266:	460f      	mov	r7, r1
 800c268:	429a      	cmp	r2, r3
 800c26a:	d022      	beq.n	800c2b2 <ai_platform_get_weights_map+0x72>
 800c26c:	6870      	ldr	r0, [r6, #4]
 800c26e:	2800      	cmp	r0, #0
 800c270:	d0f2      	beq.n	800c258 <ai_platform_get_weights_map+0x18>
 800c272:	6806      	ldr	r6, [r0, #0]
 800c274:	429e      	cmp	r6, r3
 800c276:	d006      	beq.n	800c286 <ai_platform_get_weights_map+0x46>
 800c278:	f1a1 0401 	sub.w	r4, r1, #1
 800c27c:	6028      	str	r0, [r5, #0]
 800c27e:	fab4 f484 	clz	r4, r4
 800c282:	0964      	lsrs	r4, r4, #5
 800c284:	e7e9      	b.n	800c25a <ai_platform_get_weights_map+0x1a>
 800c286:	3d04      	subs	r5, #4
 800c288:	4602      	mov	r2, r0
 800c28a:	4621      	mov	r1, r4
 800c28c:	e000      	b.n	800c290 <ai_platform_get_weights_map+0x50>
 800c28e:	4619      	mov	r1, r3
 800c290:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c294:	42b3      	cmp	r3, r6
 800c296:	d025      	beq.n	800c2e4 <ai_platform_get_weights_map+0xa4>
 800c298:	f845 3f04 	str.w	r3, [r5, #4]!
 800c29c:	1c4b      	adds	r3, r1, #1
 800c29e:	429f      	cmp	r7, r3
 800c2a0:	d8f5      	bhi.n	800c28e <ai_platform_get_weights_map+0x4e>
 800c2a2:	d1da      	bne.n	800c25a <ai_platform_get_weights_map+0x1a>
 800c2a4:	3102      	adds	r1, #2
 800c2a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c2aa:	42b3      	cmp	r3, r6
 800c2ac:	d1d5      	bne.n	800c25a <ai_platform_get_weights_map+0x1a>
 800c2ae:	2401      	movs	r4, #1
 800c2b0:	e7d3      	b.n	800c25a <ai_platform_get_weights_map+0x1a>
 800c2b2:	1d30      	adds	r0, r6, #4
 800c2b4:	f7ff ffa6 	bl	800c204 <ai_buffer_array_sane>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d0cd      	beq.n	800c258 <ai_platform_get_weights_map+0x18>
 800c2bc:	88f3      	ldrh	r3, [r6, #6]
 800c2be:	429f      	cmp	r7, r3
 800c2c0:	d1ca      	bne.n	800c258 <ai_platform_get_weights_map+0x18>
 800c2c2:	3d04      	subs	r5, #4
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	68b3      	ldr	r3, [r6, #8]
 800c2c8:	4423      	add	r3, r4
 800c2ca:	341c      	adds	r4, #28
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	b123      	cbz	r3, 800c2da <ai_platform_get_weights_map+0x9a>
 800c2d0:	3201      	adds	r2, #1
 800c2d2:	f845 3f04 	str.w	r3, [r5, #4]!
 800c2d6:	4297      	cmp	r7, r2
 800c2d8:	d8f5      	bhi.n	800c2c6 <ai_platform_get_weights_map+0x86>
 800c2da:	1abc      	subs	r4, r7, r2
 800c2dc:	fab4 f484 	clz	r4, r4
 800c2e0:	0964      	lsrs	r4, r4, #5
 800c2e2:	e7ba      	b.n	800c25a <ai_platform_get_weights_map+0x1a>
 800c2e4:	428f      	cmp	r7, r1
 800c2e6:	d1b8      	bne.n	800c25a <ai_platform_get_weights_map+0x1a>
 800c2e8:	e7e1      	b.n	800c2ae <ai_platform_get_weights_map+0x6e>
 800c2ea:	bf00      	nop
 800c2ec:	a1facade 	.word	0xa1facade

0800c2f0 <ai_platform_get_activations_map>:
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	bf18      	it	ne
 800c2f4:	2800      	cmpne	r0, #0
 800c2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f8:	bf0c      	ite	eq
 800c2fa:	2401      	moveq	r4, #1
 800c2fc:	2400      	movne	r4, #0
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	bf08      	it	eq
 800c302:	f044 0401 	orreq.w	r4, r4, #1
 800c306:	b114      	cbz	r4, 800c30e <ai_platform_get_activations_map+0x1e>
 800c308:	2400      	movs	r4, #0
 800c30a:	4620      	mov	r0, r4
 800c30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30e:	4616      	mov	r6, r2
 800c310:	4b22      	ldr	r3, [pc, #136]	; (800c39c <ai_platform_get_activations_map+0xac>)
 800c312:	6812      	ldr	r2, [r2, #0]
 800c314:	4605      	mov	r5, r0
 800c316:	460f      	mov	r7, r1
 800c318:	429a      	cmp	r2, r3
 800c31a:	d022      	beq.n	800c362 <ai_platform_get_activations_map+0x72>
 800c31c:	6a30      	ldr	r0, [r6, #32]
 800c31e:	2800      	cmp	r0, #0
 800c320:	d0f2      	beq.n	800c308 <ai_platform_get_activations_map+0x18>
 800c322:	6806      	ldr	r6, [r0, #0]
 800c324:	429e      	cmp	r6, r3
 800c326:	d006      	beq.n	800c336 <ai_platform_get_activations_map+0x46>
 800c328:	f1a1 0401 	sub.w	r4, r1, #1
 800c32c:	6028      	str	r0, [r5, #0]
 800c32e:	fab4 f484 	clz	r4, r4
 800c332:	0964      	lsrs	r4, r4, #5
 800c334:	e7e9      	b.n	800c30a <ai_platform_get_activations_map+0x1a>
 800c336:	3d04      	subs	r5, #4
 800c338:	4602      	mov	r2, r0
 800c33a:	4621      	mov	r1, r4
 800c33c:	e000      	b.n	800c340 <ai_platform_get_activations_map+0x50>
 800c33e:	4619      	mov	r1, r3
 800c340:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c344:	42b3      	cmp	r3, r6
 800c346:	d026      	beq.n	800c396 <ai_platform_get_activations_map+0xa6>
 800c348:	f845 3f04 	str.w	r3, [r5, #4]!
 800c34c:	1c4b      	adds	r3, r1, #1
 800c34e:	429f      	cmp	r7, r3
 800c350:	d8f5      	bhi.n	800c33e <ai_platform_get_activations_map+0x4e>
 800c352:	d1da      	bne.n	800c30a <ai_platform_get_activations_map+0x1a>
 800c354:	3102      	adds	r1, #2
 800c356:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c35a:	42b3      	cmp	r3, r6
 800c35c:	d1d5      	bne.n	800c30a <ai_platform_get_activations_map+0x1a>
 800c35e:	2401      	movs	r4, #1
 800c360:	e7d3      	b.n	800c30a <ai_platform_get_activations_map+0x1a>
 800c362:	f106 000c 	add.w	r0, r6, #12
 800c366:	f7ff ff4d 	bl	800c204 <ai_buffer_array_sane>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d0cc      	beq.n	800c308 <ai_platform_get_activations_map+0x18>
 800c36e:	89f3      	ldrh	r3, [r6, #14]
 800c370:	429f      	cmp	r7, r3
 800c372:	d1c9      	bne.n	800c308 <ai_platform_get_activations_map+0x18>
 800c374:	3d04      	subs	r5, #4
 800c376:	4622      	mov	r2, r4
 800c378:	6933      	ldr	r3, [r6, #16]
 800c37a:	4423      	add	r3, r4
 800c37c:	341c      	adds	r4, #28
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	b123      	cbz	r3, 800c38c <ai_platform_get_activations_map+0x9c>
 800c382:	3201      	adds	r2, #1
 800c384:	f845 3f04 	str.w	r3, [r5, #4]!
 800c388:	4297      	cmp	r7, r2
 800c38a:	d8f5      	bhi.n	800c378 <ai_platform_get_activations_map+0x88>
 800c38c:	1abc      	subs	r4, r7, r2
 800c38e:	fab4 f484 	clz	r4, r4
 800c392:	0964      	lsrs	r4, r4, #5
 800c394:	e7b9      	b.n	800c30a <ai_platform_get_activations_map+0x1a>
 800c396:	428f      	cmp	r7, r1
 800c398:	d1b7      	bne.n	800c30a <ai_platform_get_activations_map+0x1a>
 800c39a:	e7e0      	b.n	800c35e <ai_platform_get_activations_map+0x6e>
 800c39c:	a1facade 	.word	0xa1facade

0800c3a0 <ai_platform_bind_network_params>:
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	bf18      	it	ne
 800c3a4:	2900      	cmpne	r1, #0
 800c3a6:	d010      	beq.n	800c3ca <ai_platform_bind_network_params+0x2a>
 800c3a8:	b178      	cbz	r0, 800c3ca <ai_platform_bind_network_params+0x2a>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4808      	ldr	r0, [pc, #32]	; (800c3d0 <ai_platform_bind_network_params+0x30>)
 800c3ae:	f103 0c0c 	add.w	ip, r3, #12
 800c3b2:	f843 0b04 	str.w	r0, [r3], #4
 800c3b6:	c903      	ldmia	r1, {r0, r1}
 800c3b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c3c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	4770      	bx	lr
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	4770      	bx	lr
 800c3d0:	a1facade 	.word	0xa1facade

0800c3d4 <ai_platform_network_get_error>:
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d03f      	beq.n	800c45a <ai_platform_network_get_error+0x86>
 800c3da:	4b7d      	ldr	r3, [pc, #500]	; (800c5d0 <ai_platform_network_get_error+0x1fc>)
 800c3dc:	4604      	mov	r4, r0
 800c3de:	6802      	ldr	r2, [r0, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d13a      	bne.n	800c45a <ai_platform_network_get_error+0x86>
 800c3e4:	f7ff ff28 	bl	800c238 <_ai_platform_acquire_crc>
 800c3e8:	4b7a      	ldr	r3, [pc, #488]	; (800c5d4 <ai_platform_network_get_error+0x200>)
 800c3ea:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3f4:	189a      	adds	r2, r3, r2
 800c3f6:	2a01      	cmp	r2, #1
 800c3f8:	f240 8086 	bls.w	800c508 <ai_platform_network_get_error+0x134>
 800c3fc:	f240 4249 	movw	r2, #1097	; 0x449
 800c400:	4293      	cmp	r3, r2
 800c402:	f000 8081 	beq.w	800c508 <ai_platform_network_get_error+0x134>
 800c406:	4a74      	ldr	r2, [pc, #464]	; (800c5d8 <ai_platform_network_get_error+0x204>)
 800c408:	6813      	ldr	r3, [r2, #0]
 800c40a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c40e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c412:	f000 8087 	beq.w	800c524 <ai_platform_network_get_error+0x150>
 800c416:	6813      	ldr	r3, [r2, #0]
 800c418:	f240 4183 	movw	r1, #1155	; 0x483
 800c41c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c420:	428b      	cmp	r3, r1
 800c422:	f000 80a9 	beq.w	800c578 <ai_platform_network_get_error+0x1a4>
 800c426:	6813      	ldr	r3, [r2, #0]
 800c428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c42c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c430:	f000 80c0 	beq.w	800c5b4 <ai_platform_network_get_error+0x1e0>
 800c434:	6813      	ldr	r3, [r2, #0]
 800c436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f040 8082 	bne.w	800c544 <ai_platform_network_get_error+0x170>
 800c440:	4a66      	ldr	r2, [pc, #408]	; (800c5dc <ai_platform_network_get_error+0x208>)
 800c442:	2301      	movs	r3, #1
 800c444:	6093      	str	r3, [r2, #8]
 800c446:	6893      	ldr	r3, [r2, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1fc      	bne.n	800c446 <ai_platform_network_get_error+0x72>
 800c44c:	4964      	ldr	r1, [pc, #400]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c44e:	4b65      	ldr	r3, [pc, #404]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c450:	6011      	str	r1, [r2, #0]
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	429a      	cmp	r2, r3
 800c456:	d075      	beq.n	800c544 <ai_platform_network_get_error+0x170>
 800c458:	e7fe      	b.n	800c458 <ai_platform_network_get_error+0x84>
 800c45a:	f7ff feed 	bl	800c238 <_ai_platform_acquire_crc>
 800c45e:	4b5d      	ldr	r3, [pc, #372]	; (800c5d4 <ai_platform_network_get_error+0x200>)
 800c460:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c46a:	185a      	adds	r2, r3, r1
 800c46c:	2a01      	cmp	r2, #1
 800c46e:	d929      	bls.n	800c4c4 <ai_platform_network_get_error+0xf0>
 800c470:	f240 4249 	movw	r2, #1097	; 0x449
 800c474:	4293      	cmp	r3, r2
 800c476:	d025      	beq.n	800c4c4 <ai_platform_network_get_error+0xf0>
 800c478:	4a57      	ldr	r2, [pc, #348]	; (800c5d8 <ai_platform_network_get_error+0x204>)
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c480:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c484:	d02b      	beq.n	800c4de <ai_platform_network_get_error+0x10a>
 800c486:	6813      	ldr	r3, [r2, #0]
 800c488:	f240 4183 	movw	r1, #1155	; 0x483
 800c48c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c490:	428b      	cmp	r3, r1
 800c492:	d060      	beq.n	800c556 <ai_platform_network_get_error+0x182>
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c49a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c49e:	d07c      	beq.n	800c59a <ai_platform_network_get_error+0x1c6>
 800c4a0:	6813      	ldr	r3, [r2, #0]
 800c4a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d129      	bne.n	800c4fe <ai_platform_network_get_error+0x12a>
 800c4aa:	4a4c      	ldr	r2, [pc, #304]	; (800c5dc <ai_platform_network_get_error+0x208>)
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	6093      	str	r3, [r2, #8]
 800c4b0:	6893      	ldr	r3, [r2, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1fc      	bne.n	800c4b0 <ai_platform_network_get_error+0xdc>
 800c4b6:	494a      	ldr	r1, [pc, #296]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c4b8:	4b4a      	ldr	r3, [pc, #296]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c4ba:	6011      	str	r1, [r2, #0]
 800c4bc:	6812      	ldr	r2, [r2, #0]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d01d      	beq.n	800c4fe <ai_platform_network_get_error+0x12a>
 800c4c2:	e7fe      	b.n	800c4c2 <ai_platform_network_get_error+0xee>
 800c4c4:	4a45      	ldr	r2, [pc, #276]	; (800c5dc <ai_platform_network_get_error+0x208>)
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	6093      	str	r3, [r2, #8]
 800c4ca:	6893      	ldr	r3, [r2, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1fc      	bne.n	800c4ca <ai_platform_network_get_error+0xf6>
 800c4d0:	4943      	ldr	r1, [pc, #268]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c4d2:	4b44      	ldr	r3, [pc, #272]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	6812      	ldr	r2, [r2, #0]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d010      	beq.n	800c4fe <ai_platform_network_get_error+0x12a>
 800c4dc:	e7fe      	b.n	800c4dc <ai_platform_network_get_error+0x108>
 800c4de:	4a42      	ldr	r2, [pc, #264]	; (800c5e8 <ai_platform_network_get_error+0x214>)
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c4e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1fb      	bne.n	800c4e6 <ai_platform_network_get_error+0x112>
 800c4ee:	493c      	ldr	r1, [pc, #240]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c4f0:	4b3c      	ldr	r3, [pc, #240]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c4f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c4f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d111      	bne.n	800c522 <ai_platform_network_get_error+0x14e>
 800c4fe:	f7ff fe9d 	bl	800c23c <_ai_platform_release_crc>
 800c502:	f241 0010 	movw	r0, #4112	; 0x1010
 800c506:	bd10      	pop	{r4, pc}
 800c508:	4a34      	ldr	r2, [pc, #208]	; (800c5dc <ai_platform_network_get_error+0x208>)
 800c50a:	2301      	movs	r3, #1
 800c50c:	6093      	str	r3, [r2, #8]
 800c50e:	6893      	ldr	r3, [r2, #8]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1fc      	bne.n	800c50e <ai_platform_network_get_error+0x13a>
 800c514:	4932      	ldr	r1, [pc, #200]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c516:	4b33      	ldr	r3, [pc, #204]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c518:	6011      	str	r1, [r2, #0]
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d011      	beq.n	800c544 <ai_platform_network_get_error+0x170>
 800c520:	e7fe      	b.n	800c520 <ai_platform_network_get_error+0x14c>
 800c522:	e7fe      	b.n	800c522 <ai_platform_network_get_error+0x14e>
 800c524:	4a30      	ldr	r2, [pc, #192]	; (800c5e8 <ai_platform_network_get_error+0x214>)
 800c526:	2301      	movs	r3, #1
 800c528:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c52c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1fb      	bne.n	800c52c <ai_platform_network_get_error+0x158>
 800c534:	492a      	ldr	r1, [pc, #168]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c536:	4b2b      	ldr	r3, [pc, #172]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c538:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c53c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c540:	429a      	cmp	r2, r3
 800c542:	d107      	bne.n	800c554 <ai_platform_network_get_error+0x180>
 800c544:	f7ff fe7a 	bl	800c23c <_ai_platform_release_crc>
 800c548:	f104 0010 	add.w	r0, r4, #16
 800c54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c550:	f001 bae4 	b.w	800db1c <core_get_error>
 800c554:	e7fe      	b.n	800c554 <ai_platform_network_get_error+0x180>
 800c556:	4a24      	ldr	r2, [pc, #144]	; (800c5e8 <ai_platform_network_get_error+0x214>)
 800c558:	2301      	movs	r3, #1
 800c55a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c55e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1fb      	bne.n	800c55e <ai_platform_network_get_error+0x18a>
 800c566:	491e      	ldr	r1, [pc, #120]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c568:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c56a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c56e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c572:	429a      	cmp	r2, r3
 800c574:	d0c3      	beq.n	800c4fe <ai_platform_network_get_error+0x12a>
 800c576:	e7fe      	b.n	800c576 <ai_platform_network_get_error+0x1a2>
 800c578:	4a1b      	ldr	r2, [pc, #108]	; (800c5e8 <ai_platform_network_get_error+0x214>)
 800c57a:	2301      	movs	r3, #1
 800c57c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c580:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1fb      	bne.n	800c580 <ai_platform_network_get_error+0x1ac>
 800c588:	4915      	ldr	r1, [pc, #84]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c58a:	4b16      	ldr	r3, [pc, #88]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c58c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c590:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c594:	429a      	cmp	r2, r3
 800c596:	d0d5      	beq.n	800c544 <ai_platform_network_get_error+0x170>
 800c598:	e7fe      	b.n	800c598 <ai_platform_network_get_error+0x1c4>
 800c59a:	4a10      	ldr	r2, [pc, #64]	; (800c5dc <ai_platform_network_get_error+0x208>)
 800c59c:	2301      	movs	r3, #1
 800c59e:	6093      	str	r3, [r2, #8]
 800c5a0:	6893      	ldr	r3, [r2, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1fc      	bne.n	800c5a0 <ai_platform_network_get_error+0x1cc>
 800c5a6:	490e      	ldr	r1, [pc, #56]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c5a8:	4b0e      	ldr	r3, [pc, #56]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c5aa:	6011      	str	r1, [r2, #0]
 800c5ac:	6812      	ldr	r2, [r2, #0]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d0a5      	beq.n	800c4fe <ai_platform_network_get_error+0x12a>
 800c5b2:	e7fe      	b.n	800c5b2 <ai_platform_network_get_error+0x1de>
 800c5b4:	4a09      	ldr	r2, [pc, #36]	; (800c5dc <ai_platform_network_get_error+0x208>)
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	6093      	str	r3, [r2, #8]
 800c5ba:	6893      	ldr	r3, [r2, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1fc      	bne.n	800c5ba <ai_platform_network_get_error+0x1e6>
 800c5c0:	4907      	ldr	r1, [pc, #28]	; (800c5e0 <ai_platform_network_get_error+0x20c>)
 800c5c2:	4b08      	ldr	r3, [pc, #32]	; (800c5e4 <ai_platform_network_get_error+0x210>)
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	6812      	ldr	r2, [r2, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d0bb      	beq.n	800c544 <ai_platform_network_get_error+0x170>
 800c5cc:	e7fe      	b.n	800c5cc <ai_platform_network_get_error+0x1f8>
 800c5ce:	bf00      	nop
 800c5d0:	a1c00100 	.word	0xa1c00100
 800c5d4:	e0042000 	.word	0xe0042000
 800c5d8:	5c001000 	.word	0x5c001000
 800c5dc:	40023000 	.word	0x40023000
 800c5e0:	f407a5c2 	.word	0xf407a5c2
 800c5e4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c5e8:	58024000 	.word	0x58024000

0800c5ec <ai_platform_network_set_error>:
 800c5ec:	b110      	cbz	r0, 800c5f4 <ai_platform_network_set_error+0x8>
 800c5ee:	3010      	adds	r0, #16
 800c5f0:	f001 ba9a 	b.w	800db28 <core_set_error>
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop

0800c5f8 <ai_platform_inputs_get>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	9102      	str	r1, [sp, #8]
 800c600:	2800      	cmp	r0, #0
 800c602:	f000 8093 	beq.w	800c72c <ai_platform_inputs_get+0x134>
 800c606:	4baa      	ldr	r3, [pc, #680]	; (800c8b0 <ai_platform_inputs_get+0x2b8>)
 800c608:	4681      	mov	r9, r0
 800c60a:	6802      	ldr	r2, [r0, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	f040 808d 	bne.w	800c72c <ai_platform_inputs_get+0x134>
 800c612:	f7ff fe11 	bl	800c238 <_ai_platform_acquire_crc>
 800c616:	4ba7      	ldr	r3, [pc, #668]	; (800c8b4 <ai_platform_inputs_get+0x2bc>)
 800c618:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c622:	189a      	adds	r2, r3, r2
 800c624:	2a01      	cmp	r2, #1
 800c626:	f240 80da 	bls.w	800c7de <ai_platform_inputs_get+0x1e6>
 800c62a:	f240 4249 	movw	r2, #1097	; 0x449
 800c62e:	4293      	cmp	r3, r2
 800c630:	f000 80d5 	beq.w	800c7de <ai_platform_inputs_get+0x1e6>
 800c634:	4aa0      	ldr	r2, [pc, #640]	; (800c8b8 <ai_platform_inputs_get+0x2c0>)
 800c636:	6813      	ldr	r3, [r2, #0]
 800c638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c63c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c640:	f000 80dc 	beq.w	800c7fc <ai_platform_inputs_get+0x204>
 800c644:	6813      	ldr	r3, [r2, #0]
 800c646:	f240 4183 	movw	r1, #1155	; 0x483
 800c64a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c64e:	428b      	cmp	r3, r1
 800c650:	f000 810e 	beq.w	800c870 <ai_platform_inputs_get+0x278>
 800c654:	6813      	ldr	r3, [r2, #0]
 800c656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c65a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c65e:	f000 8143 	beq.w	800c8e8 <ai_platform_inputs_get+0x2f0>
 800c662:	6813      	ldr	r3, [r2, #0]
 800c664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 8113 	beq.w	800c894 <ai_platform_inputs_get+0x29c>
 800c66e:	f7ff fde5 	bl	800c23c <_ai_platform_release_crc>
 800c672:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 80d2 	beq.w	800c820 <ai_platform_inputs_get+0x228>
 800c67c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c680:	f1ba 0f00 	cmp.w	sl, #0
 800c684:	f000 80cc 	beq.w	800c820 <ai_platform_inputs_get+0x228>
 800c688:	2100      	movs	r1, #0
 800c68a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c68e:	460d      	mov	r5, r1
 800c690:	4689      	mov	r9, r1
 800c692:	e016      	b.n	800c6c2 <ai_platform_inputs_get+0xca>
 800c694:	9a01      	ldr	r2, [sp, #4]
 800c696:	2301      	movs	r3, #1
 800c698:	f848 3002 	str.w	r3, [r8, r2]
 800c69c:	69b2      	ldr	r2, [r6, #24]
 800c69e:	f04f 0301 	mov.w	r3, #1
 800c6a2:	6856      	ldr	r6, [r2, #4]
 800c6a4:	3501      	adds	r5, #1
 800c6a6:	f109 091c 	add.w	r9, r9, #28
 800c6aa:	7523      	strb	r3, [r4, #20]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	6962      	ldr	r2, [r4, #20]
 800c6b0:	60a7      	str	r7, [r4, #8]
 800c6b2:	f36b 221f 	bfi	r2, fp, #8, #24
 800c6b6:	6126      	str	r6, [r4, #16]
 800c6b8:	61a1      	str	r1, [r4, #24]
 800c6ba:	60e3      	str	r3, [r4, #12]
 800c6bc:	6162      	str	r2, [r4, #20]
 800c6be:	e9c4 0c00 	strd	r0, ip, [r4]
 800c6c2:	f8ba 3000 	ldrh.w	r3, [sl]
 800c6c6:	b2ac      	uxth	r4, r5
 800c6c8:	42ab      	cmp	r3, r5
 800c6ca:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	f240 80b5 	bls.w	800c83e <ai_platform_inputs_get+0x246>
 800c6d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 80b0 	beq.w	800c83e <ai_platform_inputs_get+0x246>
 800c6de:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	f000 80ab 	beq.w	800c83e <ai_platform_inputs_get+0x246>
 800c6e8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c6ec:	69b2      	ldr	r2, [r6, #24]
 800c6ee:	68f1      	ldr	r1, [r6, #12]
 800c6f0:	6810      	ldr	r0, [r2, #0]
 800c6f2:	9100      	str	r1, [sp, #0]
 800c6f4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800c6f8:	68b3      	ldr	r3, [r6, #8]
 800c6fa:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c6fe:	444c      	add	r4, r9
 800c700:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c704:	f002 fbd2 	bl	800eeac <ai_array_to_buffer_fmt>
 800c708:	69b2      	ldr	r2, [r6, #24]
 800c70a:	9900      	ldr	r1, [sp, #0]
 800c70c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c710:	2f00      	cmp	r7, #0
 800c712:	d0c4      	beq.n	800c69e <ai_platform_inputs_get+0xa6>
 800c714:	2200      	movs	r2, #0
 800c716:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800c71a:	6832      	ldr	r2, [r6, #0]
 800c71c:	607a      	str	r2, [r7, #4]
 800c71e:	b112      	cbz	r2, 800c726 <ai_platform_inputs_get+0x12e>
 800c720:	8852      	ldrh	r2, [r2, #2]
 800c722:	2a00      	cmp	r2, #0
 800c724:	d1b6      	bne.n	800c694 <ai_platform_inputs_get+0x9c>
 800c726:	69b2      	ldr	r2, [r6, #24]
 800c728:	2700      	movs	r7, #0
 800c72a:	e7b8      	b.n	800c69e <ai_platform_inputs_get+0xa6>
 800c72c:	f7ff fd84 	bl	800c238 <_ai_platform_acquire_crc>
 800c730:	4b60      	ldr	r3, [pc, #384]	; (800c8b4 <ai_platform_inputs_get+0x2bc>)
 800c732:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c73c:	185a      	adds	r2, r3, r1
 800c73e:	2a01      	cmp	r2, #1
 800c740:	d92a      	bls.n	800c798 <ai_platform_inputs_get+0x1a0>
 800c742:	f240 4249 	movw	r2, #1097	; 0x449
 800c746:	4293      	cmp	r3, r2
 800c748:	d026      	beq.n	800c798 <ai_platform_inputs_get+0x1a0>
 800c74a:	4a5b      	ldr	r2, [pc, #364]	; (800c8b8 <ai_platform_inputs_get+0x2c0>)
 800c74c:	6813      	ldr	r3, [r2, #0]
 800c74e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c752:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c756:	d02c      	beq.n	800c7b2 <ai_platform_inputs_get+0x1ba>
 800c758:	6813      	ldr	r3, [r2, #0]
 800c75a:	f240 4183 	movw	r1, #1155	; 0x483
 800c75e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c762:	428b      	cmp	r3, r1
 800c764:	d073      	beq.n	800c84e <ai_platform_inputs_get+0x256>
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c76c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c770:	f000 80ac 	beq.w	800c8cc <ai_platform_inputs_get+0x2d4>
 800c774:	6813      	ldr	r3, [r2, #0]
 800c776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d129      	bne.n	800c7d2 <ai_platform_inputs_get+0x1da>
 800c77e:	4a4f      	ldr	r2, [pc, #316]	; (800c8bc <ai_platform_inputs_get+0x2c4>)
 800c780:	2301      	movs	r3, #1
 800c782:	6093      	str	r3, [r2, #8]
 800c784:	6893      	ldr	r3, [r2, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1fc      	bne.n	800c784 <ai_platform_inputs_get+0x18c>
 800c78a:	494d      	ldr	r1, [pc, #308]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c78c:	4b4d      	ldr	r3, [pc, #308]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c78e:	6011      	str	r1, [r2, #0]
 800c790:	6812      	ldr	r2, [r2, #0]
 800c792:	429a      	cmp	r2, r3
 800c794:	d01d      	beq.n	800c7d2 <ai_platform_inputs_get+0x1da>
 800c796:	e7fe      	b.n	800c796 <ai_platform_inputs_get+0x19e>
 800c798:	4a48      	ldr	r2, [pc, #288]	; (800c8bc <ai_platform_inputs_get+0x2c4>)
 800c79a:	2301      	movs	r3, #1
 800c79c:	6093      	str	r3, [r2, #8]
 800c79e:	6893      	ldr	r3, [r2, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1fc      	bne.n	800c79e <ai_platform_inputs_get+0x1a6>
 800c7a4:	4946      	ldr	r1, [pc, #280]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c7a6:	4b47      	ldr	r3, [pc, #284]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c7a8:	6011      	str	r1, [r2, #0]
 800c7aa:	6812      	ldr	r2, [r2, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d010      	beq.n	800c7d2 <ai_platform_inputs_get+0x1da>
 800c7b0:	e7fe      	b.n	800c7b0 <ai_platform_inputs_get+0x1b8>
 800c7b2:	4a45      	ldr	r2, [pc, #276]	; (800c8c8 <ai_platform_inputs_get+0x2d0>)
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c7ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1fb      	bne.n	800c7ba <ai_platform_inputs_get+0x1c2>
 800c7c2:	493f      	ldr	r1, [pc, #252]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c7c4:	4b3f      	ldr	r3, [pc, #252]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c7c6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c7ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d113      	bne.n	800c7fa <ai_platform_inputs_get+0x202>
 800c7d2:	f7ff fd33 	bl	800c23c <_ai_platform_release_crc>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	b005      	add	sp, #20
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7de:	4a37      	ldr	r2, [pc, #220]	; (800c8bc <ai_platform_inputs_get+0x2c4>)
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	6093      	str	r3, [r2, #8]
 800c7e4:	6893      	ldr	r3, [r2, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1fc      	bne.n	800c7e4 <ai_platform_inputs_get+0x1ec>
 800c7ea:	4b35      	ldr	r3, [pc, #212]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	4b35      	ldr	r3, [pc, #212]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c7f0:	6812      	ldr	r2, [r2, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	f43f af3b 	beq.w	800c66e <ai_platform_inputs_get+0x76>
 800c7f8:	e7fe      	b.n	800c7f8 <ai_platform_inputs_get+0x200>
 800c7fa:	e7fe      	b.n	800c7fa <ai_platform_inputs_get+0x202>
 800c7fc:	4a32      	ldr	r2, [pc, #200]	; (800c8c8 <ai_platform_inputs_get+0x2d0>)
 800c7fe:	2301      	movs	r3, #1
 800c800:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c804:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1fb      	bne.n	800c804 <ai_platform_inputs_get+0x20c>
 800c80c:	4b2c      	ldr	r3, [pc, #176]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c80e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c812:	4b2c      	ldr	r3, [pc, #176]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c814:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c818:	429a      	cmp	r2, r3
 800c81a:	f43f af28 	beq.w	800c66e <ai_platform_inputs_get+0x76>
 800c81e:	e7fe      	b.n	800c81e <ai_platform_inputs_get+0x226>
 800c820:	2400      	movs	r4, #0
 800c822:	2218      	movs	r2, #24
 800c824:	2111      	movs	r1, #17
 800c826:	f109 0010 	add.w	r0, r9, #16
 800c82a:	f001 f97d 	bl	800db28 <core_set_error>
 800c82e:	4620      	mov	r0, r4
 800c830:	9b02      	ldr	r3, [sp, #8]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d0d0      	beq.n	800c7d8 <ai_platform_inputs_get+0x1e0>
 800c836:	801c      	strh	r4, [r3, #0]
 800c838:	b005      	add	sp, #20
 800c83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c842:	2c00      	cmp	r4, #0
 800c844:	d0ec      	beq.n	800c820 <ai_platform_inputs_get+0x228>
 800c846:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c84a:	6858      	ldr	r0, [r3, #4]
 800c84c:	e7f0      	b.n	800c830 <ai_platform_inputs_get+0x238>
 800c84e:	4a1e      	ldr	r2, [pc, #120]	; (800c8c8 <ai_platform_inputs_get+0x2d0>)
 800c850:	2301      	movs	r3, #1
 800c852:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c856:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1fb      	bne.n	800c856 <ai_platform_inputs_get+0x25e>
 800c85e:	4918      	ldr	r1, [pc, #96]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c860:	4b18      	ldr	r3, [pc, #96]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c862:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c866:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d0b1      	beq.n	800c7d2 <ai_platform_inputs_get+0x1da>
 800c86e:	e7fe      	b.n	800c86e <ai_platform_inputs_get+0x276>
 800c870:	4a15      	ldr	r2, [pc, #84]	; (800c8c8 <ai_platform_inputs_get+0x2d0>)
 800c872:	2301      	movs	r3, #1
 800c874:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c878:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1fb      	bne.n	800c878 <ai_platform_inputs_get+0x280>
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c882:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c888:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c88c:	429a      	cmp	r2, r3
 800c88e:	f43f aeee 	beq.w	800c66e <ai_platform_inputs_get+0x76>
 800c892:	e7fe      	b.n	800c892 <ai_platform_inputs_get+0x29a>
 800c894:	4a09      	ldr	r2, [pc, #36]	; (800c8bc <ai_platform_inputs_get+0x2c4>)
 800c896:	2301      	movs	r3, #1
 800c898:	6093      	str	r3, [r2, #8]
 800c89a:	6893      	ldr	r3, [r2, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1fc      	bne.n	800c89a <ai_platform_inputs_get+0x2a2>
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <ai_platform_inputs_get+0x2c8>)
 800c8a2:	6013      	str	r3, [r2, #0]
 800c8a4:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <ai_platform_inputs_get+0x2cc>)
 800c8a6:	6812      	ldr	r2, [r2, #0]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	f43f aee0 	beq.w	800c66e <ai_platform_inputs_get+0x76>
 800c8ae:	e7fe      	b.n	800c8ae <ai_platform_inputs_get+0x2b6>
 800c8b0:	a1c00100 	.word	0xa1c00100
 800c8b4:	e0042000 	.word	0xe0042000
 800c8b8:	5c001000 	.word	0x5c001000
 800c8bc:	40023000 	.word	0x40023000
 800c8c0:	f407a5c2 	.word	0xf407a5c2
 800c8c4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c8c8:	58024000 	.word	0x58024000
 800c8cc:	4a0d      	ldr	r2, [pc, #52]	; (800c904 <ai_platform_inputs_get+0x30c>)
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	6093      	str	r3, [r2, #8]
 800c8d2:	6893      	ldr	r3, [r2, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1fc      	bne.n	800c8d2 <ai_platform_inputs_get+0x2da>
 800c8d8:	490b      	ldr	r1, [pc, #44]	; (800c908 <ai_platform_inputs_get+0x310>)
 800c8da:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <ai_platform_inputs_get+0x314>)
 800c8dc:	6011      	str	r1, [r2, #0]
 800c8de:	6812      	ldr	r2, [r2, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	f43f af76 	beq.w	800c7d2 <ai_platform_inputs_get+0x1da>
 800c8e6:	e7fe      	b.n	800c8e6 <ai_platform_inputs_get+0x2ee>
 800c8e8:	4a06      	ldr	r2, [pc, #24]	; (800c904 <ai_platform_inputs_get+0x30c>)
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	6093      	str	r3, [r2, #8]
 800c8ee:	6893      	ldr	r3, [r2, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1fc      	bne.n	800c8ee <ai_platform_inputs_get+0x2f6>
 800c8f4:	4b04      	ldr	r3, [pc, #16]	; (800c908 <ai_platform_inputs_get+0x310>)
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <ai_platform_inputs_get+0x314>)
 800c8fa:	6812      	ldr	r2, [r2, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	f43f aeb6 	beq.w	800c66e <ai_platform_inputs_get+0x76>
 800c902:	e7fe      	b.n	800c902 <ai_platform_inputs_get+0x30a>
 800c904:	40023000 	.word	0x40023000
 800c908:	f407a5c2 	.word	0xf407a5c2
 800c90c:	b5e8b5cd 	.word	0xb5e8b5cd

0800c910 <ai_platform_outputs_get>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	b085      	sub	sp, #20
 800c916:	9102      	str	r1, [sp, #8]
 800c918:	2800      	cmp	r0, #0
 800c91a:	f000 808f 	beq.w	800ca3c <ai_platform_outputs_get+0x12c>
 800c91e:	4ba8      	ldr	r3, [pc, #672]	; (800cbc0 <ai_platform_outputs_get+0x2b0>)
 800c920:	4681      	mov	r9, r0
 800c922:	6802      	ldr	r2, [r0, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	f040 8089 	bne.w	800ca3c <ai_platform_outputs_get+0x12c>
 800c92a:	f7ff fc85 	bl	800c238 <_ai_platform_acquire_crc>
 800c92e:	4ba5      	ldr	r3, [pc, #660]	; (800cbc4 <ai_platform_outputs_get+0x2b4>)
 800c930:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c93a:	189a      	adds	r2, r3, r2
 800c93c:	2a01      	cmp	r2, #1
 800c93e:	f240 80d6 	bls.w	800caee <ai_platform_outputs_get+0x1de>
 800c942:	f240 4249 	movw	r2, #1097	; 0x449
 800c946:	4293      	cmp	r3, r2
 800c948:	f000 80d1 	beq.w	800caee <ai_platform_outputs_get+0x1de>
 800c94c:	4a9e      	ldr	r2, [pc, #632]	; (800cbc8 <ai_platform_outputs_get+0x2b8>)
 800c94e:	6813      	ldr	r3, [r2, #0]
 800c950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c954:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c958:	f000 80d8 	beq.w	800cb0c <ai_platform_outputs_get+0x1fc>
 800c95c:	6813      	ldr	r3, [r2, #0]
 800c95e:	f240 4183 	movw	r1, #1155	; 0x483
 800c962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c966:	428b      	cmp	r3, r1
 800c968:	f000 8109 	beq.w	800cb7e <ai_platform_outputs_get+0x26e>
 800c96c:	6813      	ldr	r3, [r2, #0]
 800c96e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c972:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c976:	f000 813f 	beq.w	800cbf8 <ai_platform_outputs_get+0x2e8>
 800c97a:	6813      	ldr	r3, [r2, #0]
 800c97c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 810e 	beq.w	800cba2 <ai_platform_outputs_get+0x292>
 800c986:	f7ff fc59 	bl	800c23c <_ai_platform_release_crc>
 800c98a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800c98e:	2b01      	cmp	r3, #1
 800c990:	f240 80db 	bls.w	800cb4a <ai_platform_outputs_get+0x23a>
 800c994:	2100      	movs	r1, #0
 800c996:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c99a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c99e:	460d      	mov	r5, r1
 800c9a0:	4689      	mov	r9, r1
 800c9a2:	e016      	b.n	800c9d2 <ai_platform_outputs_get+0xc2>
 800c9a4:	9a01      	ldr	r2, [sp, #4]
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f848 3002 	str.w	r3, [r8, r2]
 800c9ac:	69b2      	ldr	r2, [r6, #24]
 800c9ae:	f04f 0301 	mov.w	r3, #1
 800c9b2:	6856      	ldr	r6, [r2, #4]
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	f109 091c 	add.w	r9, r9, #28
 800c9ba:	7523      	strb	r3, [r4, #20]
 800c9bc:	2300      	movs	r3, #0
 800c9be:	6962      	ldr	r2, [r4, #20]
 800c9c0:	60a7      	str	r7, [r4, #8]
 800c9c2:	f36b 221f 	bfi	r2, fp, #8, #24
 800c9c6:	6126      	str	r6, [r4, #16]
 800c9c8:	61a1      	str	r1, [r4, #24]
 800c9ca:	60e3      	str	r3, [r4, #12]
 800c9cc:	6162      	str	r2, [r4, #20]
 800c9ce:	e9c4 0c00 	strd	r0, ip, [r4]
 800c9d2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c9d6:	b2ac      	uxth	r4, r5
 800c9d8:	42ab      	cmp	r3, r5
 800c9da:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	f240 80a6 	bls.w	800cb30 <ai_platform_outputs_get+0x220>
 800c9e4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 80a1 	beq.w	800cb30 <ai_platform_outputs_get+0x220>
 800c9ee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c9f2:	2e00      	cmp	r6, #0
 800c9f4:	f000 809c 	beq.w	800cb30 <ai_platform_outputs_get+0x220>
 800c9f8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c9fc:	69b2      	ldr	r2, [r6, #24]
 800c9fe:	68f1      	ldr	r1, [r6, #12]
 800ca00:	6810      	ldr	r0, [r2, #0]
 800ca02:	9100      	str	r1, [sp, #0]
 800ca04:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ca08:	68b3      	ldr	r3, [r6, #8]
 800ca0a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ca0e:	444c      	add	r4, r9
 800ca10:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ca14:	f002 fa4a 	bl	800eeac <ai_array_to_buffer_fmt>
 800ca18:	69b2      	ldr	r2, [r6, #24]
 800ca1a:	9900      	ldr	r1, [sp, #0]
 800ca1c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ca20:	2f00      	cmp	r7, #0
 800ca22:	d0c4      	beq.n	800c9ae <ai_platform_outputs_get+0x9e>
 800ca24:	2200      	movs	r2, #0
 800ca26:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800ca2a:	6832      	ldr	r2, [r6, #0]
 800ca2c:	607a      	str	r2, [r7, #4]
 800ca2e:	b112      	cbz	r2, 800ca36 <ai_platform_outputs_get+0x126>
 800ca30:	8852      	ldrh	r2, [r2, #2]
 800ca32:	2a00      	cmp	r2, #0
 800ca34:	d1b6      	bne.n	800c9a4 <ai_platform_outputs_get+0x94>
 800ca36:	69b2      	ldr	r2, [r6, #24]
 800ca38:	2700      	movs	r7, #0
 800ca3a:	e7b8      	b.n	800c9ae <ai_platform_outputs_get+0x9e>
 800ca3c:	f7ff fbfc 	bl	800c238 <_ai_platform_acquire_crc>
 800ca40:	4b60      	ldr	r3, [pc, #384]	; (800cbc4 <ai_platform_outputs_get+0x2b4>)
 800ca42:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca4c:	185a      	adds	r2, r3, r1
 800ca4e:	2a01      	cmp	r2, #1
 800ca50:	d92a      	bls.n	800caa8 <ai_platform_outputs_get+0x198>
 800ca52:	f240 4249 	movw	r2, #1097	; 0x449
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d026      	beq.n	800caa8 <ai_platform_outputs_get+0x198>
 800ca5a:	4a5b      	ldr	r2, [pc, #364]	; (800cbc8 <ai_platform_outputs_get+0x2b8>)
 800ca5c:	6813      	ldr	r3, [r2, #0]
 800ca5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca62:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ca66:	d02c      	beq.n	800cac2 <ai_platform_outputs_get+0x1b2>
 800ca68:	6813      	ldr	r3, [r2, #0]
 800ca6a:	f240 4183 	movw	r1, #1155	; 0x483
 800ca6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca72:	428b      	cmp	r3, r1
 800ca74:	d072      	beq.n	800cb5c <ai_platform_outputs_get+0x24c>
 800ca76:	6813      	ldr	r3, [r2, #0]
 800ca78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ca80:	f000 80ac 	beq.w	800cbdc <ai_platform_outputs_get+0x2cc>
 800ca84:	6813      	ldr	r3, [r2, #0]
 800ca86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d129      	bne.n	800cae2 <ai_platform_outputs_get+0x1d2>
 800ca8e:	4a4f      	ldr	r2, [pc, #316]	; (800cbcc <ai_platform_outputs_get+0x2bc>)
 800ca90:	2301      	movs	r3, #1
 800ca92:	6093      	str	r3, [r2, #8]
 800ca94:	6893      	ldr	r3, [r2, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1fc      	bne.n	800ca94 <ai_platform_outputs_get+0x184>
 800ca9a:	494d      	ldr	r1, [pc, #308]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800ca9c:	4b4d      	ldr	r3, [pc, #308]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800ca9e:	6011      	str	r1, [r2, #0]
 800caa0:	6812      	ldr	r2, [r2, #0]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d01d      	beq.n	800cae2 <ai_platform_outputs_get+0x1d2>
 800caa6:	e7fe      	b.n	800caa6 <ai_platform_outputs_get+0x196>
 800caa8:	4a48      	ldr	r2, [pc, #288]	; (800cbcc <ai_platform_outputs_get+0x2bc>)
 800caaa:	2301      	movs	r3, #1
 800caac:	6093      	str	r3, [r2, #8]
 800caae:	6893      	ldr	r3, [r2, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1fc      	bne.n	800caae <ai_platform_outputs_get+0x19e>
 800cab4:	4946      	ldr	r1, [pc, #280]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cab6:	4b47      	ldr	r3, [pc, #284]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cab8:	6011      	str	r1, [r2, #0]
 800caba:	6812      	ldr	r2, [r2, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d010      	beq.n	800cae2 <ai_platform_outputs_get+0x1d2>
 800cac0:	e7fe      	b.n	800cac0 <ai_platform_outputs_get+0x1b0>
 800cac2:	4a45      	ldr	r2, [pc, #276]	; (800cbd8 <ai_platform_outputs_get+0x2c8>)
 800cac4:	2301      	movs	r3, #1
 800cac6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800caca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1fb      	bne.n	800caca <ai_platform_outputs_get+0x1ba>
 800cad2:	493f      	ldr	r1, [pc, #252]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cad4:	4b3f      	ldr	r3, [pc, #252]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cad6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cada:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cade:	429a      	cmp	r2, r3
 800cae0:	d113      	bne.n	800cb0a <ai_platform_outputs_get+0x1fa>
 800cae2:	f7ff fbab 	bl	800c23c <_ai_platform_release_crc>
 800cae6:	2000      	movs	r0, #0
 800cae8:	b005      	add	sp, #20
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caee:	4a37      	ldr	r2, [pc, #220]	; (800cbcc <ai_platform_outputs_get+0x2bc>)
 800caf0:	2301      	movs	r3, #1
 800caf2:	6093      	str	r3, [r2, #8]
 800caf4:	6893      	ldr	r3, [r2, #8]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1fc      	bne.n	800caf4 <ai_platform_outputs_get+0x1e4>
 800cafa:	4b35      	ldr	r3, [pc, #212]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	4b35      	ldr	r3, [pc, #212]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	f43f af3f 	beq.w	800c986 <ai_platform_outputs_get+0x76>
 800cb08:	e7fe      	b.n	800cb08 <ai_platform_outputs_get+0x1f8>
 800cb0a:	e7fe      	b.n	800cb0a <ai_platform_outputs_get+0x1fa>
 800cb0c:	4a32      	ldr	r2, [pc, #200]	; (800cbd8 <ai_platform_outputs_get+0x2c8>)
 800cb0e:	2301      	movs	r3, #1
 800cb10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1fb      	bne.n	800cb14 <ai_platform_outputs_get+0x204>
 800cb1c:	4b2c      	ldr	r3, [pc, #176]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cb1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cb22:	4b2c      	ldr	r3, [pc, #176]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cb24:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	f43f af2c 	beq.w	800c986 <ai_platform_outputs_get+0x76>
 800cb2e:	e7fe      	b.n	800cb2e <ai_platform_outputs_get+0x21e>
 800cb30:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cb34:	b14c      	cbz	r4, 800cb4a <ai_platform_outputs_get+0x23a>
 800cb36:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cb3a:	6858      	ldr	r0, [r3, #4]
 800cb3c:	9b02      	ldr	r3, [sp, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0d2      	beq.n	800cae8 <ai_platform_outputs_get+0x1d8>
 800cb42:	801c      	strh	r4, [r3, #0]
 800cb44:	b005      	add	sp, #20
 800cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4a:	2400      	movs	r4, #0
 800cb4c:	2218      	movs	r2, #24
 800cb4e:	2111      	movs	r1, #17
 800cb50:	f109 0010 	add.w	r0, r9, #16
 800cb54:	f000 ffe8 	bl	800db28 <core_set_error>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	e7ef      	b.n	800cb3c <ai_platform_outputs_get+0x22c>
 800cb5c:	4a1e      	ldr	r2, [pc, #120]	; (800cbd8 <ai_platform_outputs_get+0x2c8>)
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1fb      	bne.n	800cb64 <ai_platform_outputs_get+0x254>
 800cb6c:	4918      	ldr	r1, [pc, #96]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cb6e:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cb70:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cb74:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d0b2      	beq.n	800cae2 <ai_platform_outputs_get+0x1d2>
 800cb7c:	e7fe      	b.n	800cb7c <ai_platform_outputs_get+0x26c>
 800cb7e:	4a16      	ldr	r2, [pc, #88]	; (800cbd8 <ai_platform_outputs_get+0x2c8>)
 800cb80:	2301      	movs	r3, #1
 800cb82:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb86:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1fb      	bne.n	800cb86 <ai_platform_outputs_get+0x276>
 800cb8e:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cb90:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cb94:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cb96:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	f43f aef3 	beq.w	800c986 <ai_platform_outputs_get+0x76>
 800cba0:	e7fe      	b.n	800cba0 <ai_platform_outputs_get+0x290>
 800cba2:	4a0a      	ldr	r2, [pc, #40]	; (800cbcc <ai_platform_outputs_get+0x2bc>)
 800cba4:	2301      	movs	r3, #1
 800cba6:	6093      	str	r3, [r2, #8]
 800cba8:	6893      	ldr	r3, [r2, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1fc      	bne.n	800cba8 <ai_platform_outputs_get+0x298>
 800cbae:	4b08      	ldr	r3, [pc, #32]	; (800cbd0 <ai_platform_outputs_get+0x2c0>)
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <ai_platform_outputs_get+0x2c4>)
 800cbb4:	6812      	ldr	r2, [r2, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	f43f aee5 	beq.w	800c986 <ai_platform_outputs_get+0x76>
 800cbbc:	e7fe      	b.n	800cbbc <ai_platform_outputs_get+0x2ac>
 800cbbe:	bf00      	nop
 800cbc0:	a1c00100 	.word	0xa1c00100
 800cbc4:	e0042000 	.word	0xe0042000
 800cbc8:	5c001000 	.word	0x5c001000
 800cbcc:	40023000 	.word	0x40023000
 800cbd0:	f407a5c2 	.word	0xf407a5c2
 800cbd4:	b5e8b5cd 	.word	0xb5e8b5cd
 800cbd8:	58024000 	.word	0x58024000
 800cbdc:	4a0d      	ldr	r2, [pc, #52]	; (800cc14 <ai_platform_outputs_get+0x304>)
 800cbde:	2301      	movs	r3, #1
 800cbe0:	6093      	str	r3, [r2, #8]
 800cbe2:	6893      	ldr	r3, [r2, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1fc      	bne.n	800cbe2 <ai_platform_outputs_get+0x2d2>
 800cbe8:	490b      	ldr	r1, [pc, #44]	; (800cc18 <ai_platform_outputs_get+0x308>)
 800cbea:	4b0c      	ldr	r3, [pc, #48]	; (800cc1c <ai_platform_outputs_get+0x30c>)
 800cbec:	6011      	str	r1, [r2, #0]
 800cbee:	6812      	ldr	r2, [r2, #0]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	f43f af76 	beq.w	800cae2 <ai_platform_outputs_get+0x1d2>
 800cbf6:	e7fe      	b.n	800cbf6 <ai_platform_outputs_get+0x2e6>
 800cbf8:	4a06      	ldr	r2, [pc, #24]	; (800cc14 <ai_platform_outputs_get+0x304>)
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	6093      	str	r3, [r2, #8]
 800cbfe:	6893      	ldr	r3, [r2, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1fc      	bne.n	800cbfe <ai_platform_outputs_get+0x2ee>
 800cc04:	4b04      	ldr	r3, [pc, #16]	; (800cc18 <ai_platform_outputs_get+0x308>)
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <ai_platform_outputs_get+0x30c>)
 800cc0a:	6812      	ldr	r2, [r2, #0]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	f43f aeba 	beq.w	800c986 <ai_platform_outputs_get+0x76>
 800cc12:	e7fe      	b.n	800cc12 <ai_platform_outputs_get+0x302>
 800cc14:	40023000 	.word	0x40023000
 800cc18:	f407a5c2 	.word	0xf407a5c2
 800cc1c:	b5e8b5cd 	.word	0xb5e8b5cd

0800cc20 <ai_platform_network_create>:
 800cc20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc24:	b083      	sub	sp, #12
 800cc26:	4604      	mov	r4, r0
 800cc28:	4615      	mov	r5, r2
 800cc2a:	461e      	mov	r6, r3
 800cc2c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800cc30:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cc34:	f7ff fb00 	bl	800c238 <_ai_platform_acquire_crc>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	f000 80bd 	beq.w	800cdb8 <ai_platform_network_create+0x198>
 800cc3e:	4ba5      	ldr	r3, [pc, #660]	; (800ced4 <ai_platform_network_create+0x2b4>)
 800cc40:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800cc44:	4601      	mov	r1, r0
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc4c:	eb03 020c 	add.w	r2, r3, ip
 800cc50:	2a01      	cmp	r2, #1
 800cc52:	f240 80a8 	bls.w	800cda6 <ai_platform_network_create+0x186>
 800cc56:	f240 4249 	movw	r2, #1097	; 0x449
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	f000 80a3 	beq.w	800cda6 <ai_platform_network_create+0x186>
 800cc60:	4a9d      	ldr	r2, [pc, #628]	; (800ced8 <ai_platform_network_create+0x2b8>)
 800cc62:	6813      	ldr	r3, [r2, #0]
 800cc64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc68:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cc6c:	f000 80b9 	beq.w	800cde2 <ai_platform_network_create+0x1c2>
 800cc70:	6813      	ldr	r3, [r2, #0]
 800cc72:	f240 4c83 	movw	ip, #1155	; 0x483
 800cc76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc7a:	4563      	cmp	r3, ip
 800cc7c:	f000 80a1 	beq.w	800cdc2 <ai_platform_network_create+0x1a2>
 800cc80:	6813      	ldr	r3, [r2, #0]
 800cc82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc86:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cc8a:	f000 8153 	beq.w	800cf34 <ai_platform_network_create+0x314>
 800cc8e:	6813      	ldr	r3, [r2, #0]
 800cc90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f040 808d 	bne.w	800cdb4 <ai_platform_network_create+0x194>
 800cc9a:	4a90      	ldr	r2, [pc, #576]	; (800cedc <ai_platform_network_create+0x2bc>)
 800cc9c:	2318      	movs	r3, #24
 800cc9e:	6093      	str	r3, [r2, #8]
 800cca0:	6893      	ldr	r3, [r2, #8]
 800cca2:	2b18      	cmp	r3, #24
 800cca4:	f040 8086 	bne.w	800cdb4 <ai_platform_network_create+0x194>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	6093      	str	r3, [r2, #8]
 800ccac:	6893      	ldr	r3, [r2, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1fc      	bne.n	800ccac <ai_platform_network_create+0x8c>
 800ccb2:	4608      	mov	r0, r1
 800ccb4:	f7ff fac2 	bl	800c23c <_ai_platform_release_crc>
 800ccb8:	f7ff fabe 	bl	800c238 <_ai_platform_acquire_crc>
 800ccbc:	4b85      	ldr	r3, [pc, #532]	; (800ced4 <ai_platform_network_create+0x2b4>)
 800ccbe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccc8:	189a      	adds	r2, r3, r2
 800ccca:	2a01      	cmp	r2, #1
 800cccc:	f240 809f 	bls.w	800ce0e <ai_platform_network_create+0x1ee>
 800ccd0:	f240 4249 	movw	r2, #1097	; 0x449
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	f000 809a 	beq.w	800ce0e <ai_platform_network_create+0x1ee>
 800ccda:	4a7f      	ldr	r2, [pc, #508]	; (800ced8 <ai_platform_network_create+0x2b8>)
 800ccdc:	6813      	ldr	r3, [r2, #0]
 800ccde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cce2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cce6:	f000 80a0 	beq.w	800ce2a <ai_platform_network_create+0x20a>
 800ccea:	6813      	ldr	r3, [r2, #0]
 800ccec:	f240 4183 	movw	r1, #1155	; 0x483
 800ccf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccf4:	428b      	cmp	r3, r1
 800ccf6:	f000 80bf 	beq.w	800ce78 <ai_platform_network_create+0x258>
 800ccfa:	6813      	ldr	r3, [r2, #0]
 800ccfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd00:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cd04:	f000 8123 	beq.w	800cf4e <ai_platform_network_create+0x32e>
 800cd08:	6813      	ldr	r3, [r2, #0]
 800cd0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 80c4 	beq.w	800ce9c <ai_platform_network_create+0x27c>
 800cd14:	f7ff fa92 	bl	800c23c <_ai_platform_release_crc>
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	f000 80aa 	beq.w	800ce72 <ai_platform_network_create+0x252>
 800cd1e:	4b70      	ldr	r3, [pc, #448]	; (800cee0 <ai_platform_network_create+0x2c0>)
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	6025      	str	r5, [r4, #0]
 800cd24:	f000 fef8 	bl	800db18 <core_init>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f000 8090 	beq.w	800ce4e <ai_platform_network_create+0x22e>
 800cd2e:	f7ff fa83 	bl	800c238 <_ai_platform_acquire_crc>
 800cd32:	4b68      	ldr	r3, [pc, #416]	; (800ced4 <ai_platform_network_create+0x2b4>)
 800cd34:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd3e:	185a      	adds	r2, r3, r1
 800cd40:	2a01      	cmp	r2, #1
 800cd42:	f240 80b9 	bls.w	800ceb8 <ai_platform_network_create+0x298>
 800cd46:	f240 4249 	movw	r2, #1097	; 0x449
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	f000 80b4 	beq.w	800ceb8 <ai_platform_network_create+0x298>
 800cd50:	4a61      	ldr	r2, [pc, #388]	; (800ced8 <ai_platform_network_create+0x2b8>)
 800cd52:	6813      	ldr	r3, [r2, #0]
 800cd54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd58:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cd5c:	f000 80c8 	beq.w	800cef0 <ai_platform_network_create+0x2d0>
 800cd60:	6813      	ldr	r3, [r2, #0]
 800cd62:	f240 4183 	movw	r1, #1155	; 0x483
 800cd66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd6a:	428b      	cmp	r3, r1
 800cd6c:	f000 8107 	beq.w	800cf7e <ai_platform_network_create+0x35e>
 800cd70:	6813      	ldr	r3, [r2, #0]
 800cd72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd76:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cd7a:	f000 8111 	beq.w	800cfa0 <ai_platform_network_create+0x380>
 800cd7e:	6813      	ldr	r3, [r2, #0]
 800cd80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 80c3 	bne.w	800cf10 <ai_platform_network_create+0x2f0>
 800cd8a:	4b54      	ldr	r3, [pc, #336]	; (800cedc <ai_platform_network_create+0x2bc>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	609a      	str	r2, [r3, #8]
 800cd90:	689a      	ldr	r2, [r3, #8]
 800cd92:	2a00      	cmp	r2, #0
 800cd94:	d1fc      	bne.n	800cd90 <ai_platform_network_create+0x170>
 800cd96:	4a53      	ldr	r2, [pc, #332]	; (800cee4 <ai_platform_network_create+0x2c4>)
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	4b52      	ldr	r3, [pc, #328]	; (800cee8 <ai_platform_network_create+0x2c8>)
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	f000 80b6 	beq.w	800cf10 <ai_platform_network_create+0x2f0>
 800cda4:	e7fe      	b.n	800cda4 <ai_platform_network_create+0x184>
 800cda6:	4b4d      	ldr	r3, [pc, #308]	; (800cedc <ai_platform_network_create+0x2bc>)
 800cda8:	2218      	movs	r2, #24
 800cdaa:	609a      	str	r2, [r3, #8]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	2a18      	cmp	r2, #24
 800cdb0:	d027      	beq.n	800ce02 <ai_platform_network_create+0x1e2>
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	f7ff fa42 	bl	800c23c <_ai_platform_release_crc>
 800cdb8:	f244 1033 	movw	r0, #16691	; 0x4133
 800cdbc:	b003      	add	sp, #12
 800cdbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	4a4a      	ldr	r2, [pc, #296]	; (800ceec <ai_platform_network_create+0x2cc>)
 800cdc4:	2318      	movs	r3, #24
 800cdc6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cdca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cdce:	2b18      	cmp	r3, #24
 800cdd0:	d1f0      	bne.n	800cdb4 <ai_platform_network_create+0x194>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cdd8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1fb      	bne.n	800cdd8 <ai_platform_network_create+0x1b8>
 800cde0:	e767      	b.n	800ccb2 <ai_platform_network_create+0x92>
 800cde2:	4a42      	ldr	r2, [pc, #264]	; (800ceec <ai_platform_network_create+0x2cc>)
 800cde4:	2318      	movs	r3, #24
 800cde6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cdea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cdee:	2b18      	cmp	r3, #24
 800cdf0:	d1e0      	bne.n	800cdb4 <ai_platform_network_create+0x194>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cdf8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1fb      	bne.n	800cdf8 <ai_platform_network_create+0x1d8>
 800ce00:	e757      	b.n	800ccb2 <ai_platform_network_create+0x92>
 800ce02:	2201      	movs	r2, #1
 800ce04:	609a      	str	r2, [r3, #8]
 800ce06:	689a      	ldr	r2, [r3, #8]
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	d1fc      	bne.n	800ce06 <ai_platform_network_create+0x1e6>
 800ce0c:	e751      	b.n	800ccb2 <ai_platform_network_create+0x92>
 800ce0e:	4a33      	ldr	r2, [pc, #204]	; (800cedc <ai_platform_network_create+0x2bc>)
 800ce10:	2301      	movs	r3, #1
 800ce12:	6093      	str	r3, [r2, #8]
 800ce14:	6891      	ldr	r1, [r2, #8]
 800ce16:	2900      	cmp	r1, #0
 800ce18:	d1fc      	bne.n	800ce14 <ai_platform_network_create+0x1f4>
 800ce1a:	4b32      	ldr	r3, [pc, #200]	; (800cee4 <ai_platform_network_create+0x2c4>)
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	4b32      	ldr	r3, [pc, #200]	; (800cee8 <ai_platform_network_create+0x2c8>)
 800ce20:	6812      	ldr	r2, [r2, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	f43f af76 	beq.w	800cd14 <ai_platform_network_create+0xf4>
 800ce28:	e7fe      	b.n	800ce28 <ai_platform_network_create+0x208>
 800ce2a:	4a30      	ldr	r2, [pc, #192]	; (800ceec <ai_platform_network_create+0x2cc>)
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ce32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1fb      	bne.n	800ce32 <ai_platform_network_create+0x212>
 800ce3a:	4b2a      	ldr	r3, [pc, #168]	; (800cee4 <ai_platform_network_create+0x2c4>)
 800ce3c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ce40:	4b29      	ldr	r3, [pc, #164]	; (800cee8 <ai_platform_network_create+0x2c8>)
 800ce42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ce46:	429a      	cmp	r2, r3
 800ce48:	f43f af64 	beq.w	800cd14 <ai_platform_network_create+0xf4>
 800ce4c:	e7fe      	b.n	800ce4c <ai_platform_network_create+0x22c>
 800ce4e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800ce52:	2300      	movs	r3, #0
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	2410      	movs	r4, #16
 800ce58:	4642      	mov	r2, r8
 800ce5a:	4639      	mov	r1, r7
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f002 f8a1 	bl	800efa4 <ai_version_get>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2000      	movs	r0, #0
 800ce66:	64ab      	str	r3, [r5, #72]	; 0x48
 800ce68:	f369 0007 	bfi	r0, r9, #0, #8
 800ce6c:	f364 201f 	bfi	r0, r4, #8, #24
 800ce70:	e7a4      	b.n	800cdbc <ai_platform_network_create+0x19c>
 800ce72:	f241 0010 	movw	r0, #4112	; 0x1010
 800ce76:	e7a1      	b.n	800cdbc <ai_platform_network_create+0x19c>
 800ce78:	4a1c      	ldr	r2, [pc, #112]	; (800ceec <ai_platform_network_create+0x2cc>)
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ce80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1fb      	bne.n	800ce80 <ai_platform_network_create+0x260>
 800ce88:	4b16      	ldr	r3, [pc, #88]	; (800cee4 <ai_platform_network_create+0x2c4>)
 800ce8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ce8e:	4b16      	ldr	r3, [pc, #88]	; (800cee8 <ai_platform_network_create+0x2c8>)
 800ce90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ce94:	429a      	cmp	r2, r3
 800ce96:	f43f af3d 	beq.w	800cd14 <ai_platform_network_create+0xf4>
 800ce9a:	e7fe      	b.n	800ce9a <ai_platform_network_create+0x27a>
 800ce9c:	4a0f      	ldr	r2, [pc, #60]	; (800cedc <ai_platform_network_create+0x2bc>)
 800ce9e:	2301      	movs	r3, #1
 800cea0:	6093      	str	r3, [r2, #8]
 800cea2:	6893      	ldr	r3, [r2, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1fc      	bne.n	800cea2 <ai_platform_network_create+0x282>
 800cea8:	4b0e      	ldr	r3, [pc, #56]	; (800cee4 <ai_platform_network_create+0x2c4>)
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <ai_platform_network_create+0x2c8>)
 800ceae:	6812      	ldr	r2, [r2, #0]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	f43f af2f 	beq.w	800cd14 <ai_platform_network_create+0xf4>
 800ceb6:	e7fe      	b.n	800ceb6 <ai_platform_network_create+0x296>
 800ceb8:	4a08      	ldr	r2, [pc, #32]	; (800cedc <ai_platform_network_create+0x2bc>)
 800ceba:	2301      	movs	r3, #1
 800cebc:	6093      	str	r3, [r2, #8]
 800cebe:	6893      	ldr	r3, [r2, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1fc      	bne.n	800cebe <ai_platform_network_create+0x29e>
 800cec4:	4b07      	ldr	r3, [pc, #28]	; (800cee4 <ai_platform_network_create+0x2c4>)
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <ai_platform_network_create+0x2c8>)
 800ceca:	6812      	ldr	r2, [r2, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d01f      	beq.n	800cf10 <ai_platform_network_create+0x2f0>
 800ced0:	e7fe      	b.n	800ced0 <ai_platform_network_create+0x2b0>
 800ced2:	bf00      	nop
 800ced4:	e0042000 	.word	0xe0042000
 800ced8:	5c001000 	.word	0x5c001000
 800cedc:	40023000 	.word	0x40023000
 800cee0:	a1c00100 	.word	0xa1c00100
 800cee4:	f407a5c2 	.word	0xf407a5c2
 800cee8:	b5e8b5cd 	.word	0xb5e8b5cd
 800ceec:	58024000 	.word	0x58024000
 800cef0:	4a33      	ldr	r2, [pc, #204]	; (800cfc0 <ai_platform_network_create+0x3a0>)
 800cef2:	2301      	movs	r3, #1
 800cef4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cef8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1fb      	bne.n	800cef8 <ai_platform_network_create+0x2d8>
 800cf00:	4b30      	ldr	r3, [pc, #192]	; (800cfc4 <ai_platform_network_create+0x3a4>)
 800cf02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cf06:	4b30      	ldr	r3, [pc, #192]	; (800cfc8 <ai_platform_network_create+0x3a8>)
 800cf08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d12c      	bne.n	800cf6a <ai_platform_network_create+0x34a>
 800cf10:	f7ff f994 	bl	800c23c <_ai_platform_release_crc>
 800cf14:	2200      	movs	r2, #0
 800cf16:	4639      	mov	r1, r7
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f002 f843 	bl	800efa4 <ai_version_get>
 800cf1e:	4681      	mov	r9, r0
 800cf20:	2200      	movs	r2, #0
 800cf22:	2105      	movs	r1, #5
 800cf24:	2001      	movs	r0, #1
 800cf26:	f002 f83d 	bl	800efa4 <ai_version_get>
 800cf2a:	4581      	cmp	r9, r0
 800cf2c:	d01e      	beq.n	800cf6c <ai_platform_network_create+0x34c>
 800cf2e:	f04f 0901 	mov.w	r9, #1
 800cf32:	e78e      	b.n	800ce52 <ai_platform_network_create+0x232>
 800cf34:	4b25      	ldr	r3, [pc, #148]	; (800cfcc <ai_platform_network_create+0x3ac>)
 800cf36:	2218      	movs	r2, #24
 800cf38:	609a      	str	r2, [r3, #8]
 800cf3a:	689a      	ldr	r2, [r3, #8]
 800cf3c:	2a18      	cmp	r2, #24
 800cf3e:	f47f af39 	bne.w	800cdb4 <ai_platform_network_create+0x194>
 800cf42:	2201      	movs	r2, #1
 800cf44:	609a      	str	r2, [r3, #8]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	d1fc      	bne.n	800cf46 <ai_platform_network_create+0x326>
 800cf4c:	e6b1      	b.n	800ccb2 <ai_platform_network_create+0x92>
 800cf4e:	4a1f      	ldr	r2, [pc, #124]	; (800cfcc <ai_platform_network_create+0x3ac>)
 800cf50:	2301      	movs	r3, #1
 800cf52:	6093      	str	r3, [r2, #8]
 800cf54:	6893      	ldr	r3, [r2, #8]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1fc      	bne.n	800cf54 <ai_platform_network_create+0x334>
 800cf5a:	4b1a      	ldr	r3, [pc, #104]	; (800cfc4 <ai_platform_network_create+0x3a4>)
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <ai_platform_network_create+0x3a8>)
 800cf60:	6812      	ldr	r2, [r2, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	f43f aed6 	beq.w	800cd14 <ai_platform_network_create+0xf4>
 800cf68:	e7fe      	b.n	800cf68 <ai_platform_network_create+0x348>
 800cf6a:	e7fe      	b.n	800cf6a <ai_platform_network_create+0x34a>
 800cf6c:	4b18      	ldr	r3, [pc, #96]	; (800cfd0 <ai_platform_network_create+0x3b0>)
 800cf6e:	a801      	add	r0, sp, #4
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	f000 ff35 	bl	800dde0 <ai_check_custom_types>
 800cf76:	b300      	cbz	r0, 800cfba <ai_platform_network_create+0x39a>
 800cf78:	2400      	movs	r4, #0
 800cf7a:	46a1      	mov	r9, r4
 800cf7c:	e76c      	b.n	800ce58 <ai_platform_network_create+0x238>
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <ai_platform_network_create+0x3a0>)
 800cf80:	2201      	movs	r2, #1
 800cf82:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cf86:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cf8a:	2a00      	cmp	r2, #0
 800cf8c:	d1fb      	bne.n	800cf86 <ai_platform_network_create+0x366>
 800cf8e:	4a0d      	ldr	r2, [pc, #52]	; (800cfc4 <ai_platform_network_create+0x3a4>)
 800cf90:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cf94:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cf98:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <ai_platform_network_create+0x3a8>)
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d0b8      	beq.n	800cf10 <ai_platform_network_create+0x2f0>
 800cf9e:	e7fe      	b.n	800cf9e <ai_platform_network_create+0x37e>
 800cfa0:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <ai_platform_network_create+0x3ac>)
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	609a      	str	r2, [r3, #8]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	d1fc      	bne.n	800cfa6 <ai_platform_network_create+0x386>
 800cfac:	4a05      	ldr	r2, [pc, #20]	; (800cfc4 <ai_platform_network_create+0x3a4>)
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <ai_platform_network_create+0x3a8>)
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d0ab      	beq.n	800cf10 <ai_platform_network_create+0x2f0>
 800cfb8:	e7fe      	b.n	800cfb8 <ai_platform_network_create+0x398>
 800cfba:	f04f 0902 	mov.w	r9, #2
 800cfbe:	e748      	b.n	800ce52 <ai_platform_network_create+0x232>
 800cfc0:	58024000 	.word	0x58024000
 800cfc4:	f407a5c2 	.word	0xf407a5c2
 800cfc8:	b5e8b5cd 	.word	0xb5e8b5cd
 800cfcc:	40023000 	.word	0x40023000
 800cfd0:	84048403 	.word	0x84048403

0800cfd4 <ai_platform_network_init>:
 800cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d052      	beq.n	800d082 <ai_platform_network_init+0xae>
 800cfdc:	4bab      	ldr	r3, [pc, #684]	; (800d28c <ai_platform_network_init+0x2b8>)
 800cfde:	4604      	mov	r4, r0
 800cfe0:	6802      	ldr	r2, [r0, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d14d      	bne.n	800d082 <ai_platform_network_init+0xae>
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	f7ff f926 	bl	800c238 <_ai_platform_acquire_crc>
 800cfec:	4ba8      	ldr	r3, [pc, #672]	; (800d290 <ai_platform_network_init+0x2bc>)
 800cfee:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cff8:	189a      	adds	r2, r3, r2
 800cffa:	2a01      	cmp	r2, #1
 800cffc:	f240 809b 	bls.w	800d136 <ai_platform_network_init+0x162>
 800d000:	f240 4249 	movw	r2, #1097	; 0x449
 800d004:	4293      	cmp	r3, r2
 800d006:	f000 8096 	beq.w	800d136 <ai_platform_network_init+0x162>
 800d00a:	4aa2      	ldr	r2, [pc, #648]	; (800d294 <ai_platform_network_init+0x2c0>)
 800d00c:	6813      	ldr	r3, [r2, #0]
 800d00e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d012:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d016:	f000 809d 	beq.w	800d154 <ai_platform_network_init+0x180>
 800d01a:	6813      	ldr	r3, [r2, #0]
 800d01c:	f240 4183 	movw	r1, #1155	; 0x483
 800d020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d024:	428b      	cmp	r3, r1
 800d026:	f000 80e4 	beq.w	800d1f2 <ai_platform_network_init+0x21e>
 800d02a:	6813      	ldr	r3, [r2, #0]
 800d02c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d030:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d034:	f000 811b 	beq.w	800d26e <ai_platform_network_init+0x29a>
 800d038:	6813      	ldr	r3, [r2, #0]
 800d03a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f000 80f9 	beq.w	800d236 <ai_platform_network_init+0x262>
 800d044:	f7ff f8fa 	bl	800c23c <_ai_platform_release_crc>
 800d048:	2d00      	cmp	r5, #0
 800d04a:	f000 8147 	beq.w	800d2dc <ai_platform_network_init+0x308>
 800d04e:	4b92      	ldr	r3, [pc, #584]	; (800d298 <ai_platform_network_init+0x2c4>)
 800d050:	682a      	ldr	r2, [r5, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	f040 8090 	bne.w	800d178 <ai_platform_network_init+0x1a4>
 800d058:	692b      	ldr	r3, [r5, #16]
 800d05a:	89ae      	ldrh	r6, [r5, #12]
 800d05c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800d060:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800d064:	62a3      	str	r3, [r4, #40]	; 0x28
 800d066:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800d06a:	2303      	movs	r3, #3
 800d06c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d06e:	4626      	mov	r6, r4
 800d070:	4620      	mov	r0, r4
 800d072:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800d076:	60e3      	str	r3, [r4, #12]
 800d078:	f000 feda 	bl	800de30 <ai_layers_init_all>
 800d07c:	4630      	mov	r0, r6
 800d07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d082:	f7ff f8d9 	bl	800c238 <_ai_platform_acquire_crc>
 800d086:	4b82      	ldr	r3, [pc, #520]	; (800d290 <ai_platform_network_init+0x2bc>)
 800d088:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d092:	185a      	adds	r2, r3, r1
 800d094:	2a01      	cmp	r2, #1
 800d096:	d92b      	bls.n	800d0f0 <ai_platform_network_init+0x11c>
 800d098:	f240 4249 	movw	r2, #1097	; 0x449
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d027      	beq.n	800d0f0 <ai_platform_network_init+0x11c>
 800d0a0:	4a7c      	ldr	r2, [pc, #496]	; (800d294 <ai_platform_network_init+0x2c0>)
 800d0a2:	6813      	ldr	r3, [r2, #0]
 800d0a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0a8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d0ac:	d02d      	beq.n	800d10a <ai_platform_network_init+0x136>
 800d0ae:	6813      	ldr	r3, [r2, #0]
 800d0b0:	f240 4183 	movw	r1, #1155	; 0x483
 800d0b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	f000 8089 	beq.w	800d1d0 <ai_platform_network_init+0x1fc>
 800d0be:	6813      	ldr	r3, [r2, #0]
 800d0c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d0c8:	f000 80c3 	beq.w	800d252 <ai_platform_network_init+0x27e>
 800d0cc:	6813      	ldr	r3, [r2, #0]
 800d0ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d129      	bne.n	800d12a <ai_platform_network_init+0x156>
 800d0d6:	4a71      	ldr	r2, [pc, #452]	; (800d29c <ai_platform_network_init+0x2c8>)
 800d0d8:	2301      	movs	r3, #1
 800d0da:	6093      	str	r3, [r2, #8]
 800d0dc:	6893      	ldr	r3, [r2, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1fc      	bne.n	800d0dc <ai_platform_network_init+0x108>
 800d0e2:	496f      	ldr	r1, [pc, #444]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d0e4:	4b6f      	ldr	r3, [pc, #444]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d0e6:	6011      	str	r1, [r2, #0]
 800d0e8:	6812      	ldr	r2, [r2, #0]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d01d      	beq.n	800d12a <ai_platform_network_init+0x156>
 800d0ee:	e7fe      	b.n	800d0ee <ai_platform_network_init+0x11a>
 800d0f0:	4a6a      	ldr	r2, [pc, #424]	; (800d29c <ai_platform_network_init+0x2c8>)
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	6093      	str	r3, [r2, #8]
 800d0f6:	6893      	ldr	r3, [r2, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1fc      	bne.n	800d0f6 <ai_platform_network_init+0x122>
 800d0fc:	4968      	ldr	r1, [pc, #416]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d0fe:	4b69      	ldr	r3, [pc, #420]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d100:	6011      	str	r1, [r2, #0]
 800d102:	6812      	ldr	r2, [r2, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d010      	beq.n	800d12a <ai_platform_network_init+0x156>
 800d108:	e7fe      	b.n	800d108 <ai_platform_network_init+0x134>
 800d10a:	4a67      	ldr	r2, [pc, #412]	; (800d2a8 <ai_platform_network_init+0x2d4>)
 800d10c:	2301      	movs	r3, #1
 800d10e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d112:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1fb      	bne.n	800d112 <ai_platform_network_init+0x13e>
 800d11a:	4961      	ldr	r1, [pc, #388]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d11c:	4b61      	ldr	r3, [pc, #388]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d11e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d122:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d126:	429a      	cmp	r2, r3
 800d128:	d113      	bne.n	800d152 <ai_platform_network_init+0x17e>
 800d12a:	2600      	movs	r6, #0
 800d12c:	f7ff f886 	bl	800c23c <_ai_platform_release_crc>
 800d130:	4630      	mov	r0, r6
 800d132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d136:	4a59      	ldr	r2, [pc, #356]	; (800d29c <ai_platform_network_init+0x2c8>)
 800d138:	2301      	movs	r3, #1
 800d13a:	6093      	str	r3, [r2, #8]
 800d13c:	6893      	ldr	r3, [r2, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1fc      	bne.n	800d13c <ai_platform_network_init+0x168>
 800d142:	4b57      	ldr	r3, [pc, #348]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	4b57      	ldr	r3, [pc, #348]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d148:	6812      	ldr	r2, [r2, #0]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	f43f af7a 	beq.w	800d044 <ai_platform_network_init+0x70>
 800d150:	e7fe      	b.n	800d150 <ai_platform_network_init+0x17c>
 800d152:	e7fe      	b.n	800d152 <ai_platform_network_init+0x17e>
 800d154:	4a54      	ldr	r2, [pc, #336]	; (800d2a8 <ai_platform_network_init+0x2d4>)
 800d156:	2301      	movs	r3, #1
 800d158:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d15c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1fb      	bne.n	800d15c <ai_platform_network_init+0x188>
 800d164:	4b4e      	ldr	r3, [pc, #312]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d166:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d16a:	4b4e      	ldr	r3, [pc, #312]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d16c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d170:	429a      	cmp	r2, r3
 800d172:	f43f af67 	beq.w	800d044 <ai_platform_network_init+0x70>
 800d176:	e7fe      	b.n	800d176 <ai_platform_network_init+0x1a2>
 800d178:	2101      	movs	r1, #1
 800d17a:	4628      	mov	r0, r5
 800d17c:	f105 081c 	add.w	r8, r5, #28
 800d180:	686e      	ldr	r6, [r5, #4]
 800d182:	f7ff f80b 	bl	800c19c <ai_buffer_get_size>
 800d186:	4607      	mov	r7, r0
 800d188:	2101      	movs	r1, #1
 800d18a:	4640      	mov	r0, r8
 800d18c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800d190:	f7ff f804 	bl	800c19c <ai_buffer_get_size>
 800d194:	2f00      	cmp	r7, #0
 800d196:	d13e      	bne.n	800d216 <ai_platform_network_init+0x242>
 800d198:	2800      	cmp	r0, #0
 800d19a:	f000 808e 	beq.w	800d2ba <ai_platform_network_init+0x2e6>
 800d19e:	f1b9 0f00 	cmp.w	r9, #0
 800d1a2:	f000 8094 	beq.w	800d2ce <ai_platform_network_init+0x2fa>
 800d1a6:	f04f 0c01 	mov.w	ip, #1
 800d1aa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d1ac:	2600      	movs	r6, #0
 800d1ae:	83e7      	strh	r7, [r4, #30]
 800d1b0:	4563      	cmp	r3, ip
 800d1b2:	83a6      	strh	r6, [r4, #28]
 800d1b4:	d37a      	bcc.n	800d2ac <ai_platform_network_init+0x2d8>
 800d1b6:	f1bc 0f00 	cmp.w	ip, #0
 800d1ba:	f000 809c 	beq.w	800d2f6 <ai_platform_network_init+0x322>
 800d1be:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d1c0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d1c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1c6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d1ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d1ce:	e74c      	b.n	800d06a <ai_platform_network_init+0x96>
 800d1d0:	4a35      	ldr	r2, [pc, #212]	; (800d2a8 <ai_platform_network_init+0x2d4>)
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d1d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1fb      	bne.n	800d1d8 <ai_platform_network_init+0x204>
 800d1e0:	492f      	ldr	r1, [pc, #188]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d1e2:	4b30      	ldr	r3, [pc, #192]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d1e4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d1e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d09c      	beq.n	800d12a <ai_platform_network_init+0x156>
 800d1f0:	e7fe      	b.n	800d1f0 <ai_platform_network_init+0x21c>
 800d1f2:	4a2d      	ldr	r2, [pc, #180]	; (800d2a8 <ai_platform_network_init+0x2d4>)
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d1fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1fb      	bne.n	800d1fa <ai_platform_network_init+0x226>
 800d202:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d204:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d208:	4b26      	ldr	r3, [pc, #152]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d20a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d20e:	429a      	cmp	r2, r3
 800d210:	f43f af18 	beq.w	800d044 <ai_platform_network_init+0x70>
 800d214:	e7fe      	b.n	800d214 <ai_platform_network_init+0x240>
 800d216:	2800      	cmp	r0, #0
 800d218:	d153      	bne.n	800d2c2 <ai_platform_network_init+0x2ee>
 800d21a:	4680      	mov	r8, r0
 800d21c:	4684      	mov	ip, r0
 800d21e:	2e00      	cmp	r6, #0
 800d220:	d063      	beq.n	800d2ea <ai_platform_network_init+0x316>
 800d222:	8be6      	ldrh	r6, [r4, #30]
 800d224:	2e00      	cmp	r6, #0
 800d226:	d168      	bne.n	800d2fa <ai_platform_network_init+0x326>
 800d228:	2212      	movs	r2, #18
 800d22a:	2116      	movs	r1, #22
 800d22c:	f104 0010 	add.w	r0, r4, #16
 800d230:	f000 fc7a 	bl	800db28 <core_set_error>
 800d234:	e77c      	b.n	800d130 <ai_platform_network_init+0x15c>
 800d236:	4a19      	ldr	r2, [pc, #100]	; (800d29c <ai_platform_network_init+0x2c8>)
 800d238:	2301      	movs	r3, #1
 800d23a:	6093      	str	r3, [r2, #8]
 800d23c:	6893      	ldr	r3, [r2, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1fc      	bne.n	800d23c <ai_platform_network_init+0x268>
 800d242:	4b17      	ldr	r3, [pc, #92]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	4b17      	ldr	r3, [pc, #92]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d248:	6812      	ldr	r2, [r2, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	f43f aefa 	beq.w	800d044 <ai_platform_network_init+0x70>
 800d250:	e7fe      	b.n	800d250 <ai_platform_network_init+0x27c>
 800d252:	4a12      	ldr	r2, [pc, #72]	; (800d29c <ai_platform_network_init+0x2c8>)
 800d254:	2301      	movs	r3, #1
 800d256:	6093      	str	r3, [r2, #8]
 800d258:	6893      	ldr	r3, [r2, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1fc      	bne.n	800d258 <ai_platform_network_init+0x284>
 800d25e:	4910      	ldr	r1, [pc, #64]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d260:	4b10      	ldr	r3, [pc, #64]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d262:	6011      	str	r1, [r2, #0]
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	f43f af5f 	beq.w	800d12a <ai_platform_network_init+0x156>
 800d26c:	e7fe      	b.n	800d26c <ai_platform_network_init+0x298>
 800d26e:	4a0b      	ldr	r2, [pc, #44]	; (800d29c <ai_platform_network_init+0x2c8>)
 800d270:	2301      	movs	r3, #1
 800d272:	6093      	str	r3, [r2, #8]
 800d274:	6893      	ldr	r3, [r2, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1fc      	bne.n	800d274 <ai_platform_network_init+0x2a0>
 800d27a:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <ai_platform_network_init+0x2cc>)
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <ai_platform_network_init+0x2d0>)
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	f43f aede 	beq.w	800d044 <ai_platform_network_init+0x70>
 800d288:	e7fe      	b.n	800d288 <ai_platform_network_init+0x2b4>
 800d28a:	bf00      	nop
 800d28c:	a1c00100 	.word	0xa1c00100
 800d290:	e0042000 	.word	0xe0042000
 800d294:	5c001000 	.word	0x5c001000
 800d298:	a1facade 	.word	0xa1facade
 800d29c:	40023000 	.word	0x40023000
 800d2a0:	f407a5c2 	.word	0xf407a5c2
 800d2a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d2a8:	58024000 	.word	0x58024000
 800d2ac:	2213      	movs	r2, #19
 800d2ae:	2116      	movs	r1, #22
 800d2b0:	f104 0010 	add.w	r0, r4, #16
 800d2b4:	f000 fc38 	bl	800db28 <core_set_error>
 800d2b8:	e73a      	b.n	800d130 <ai_platform_network_init+0x15c>
 800d2ba:	4607      	mov	r7, r0
 800d2bc:	4680      	mov	r8, r0
 800d2be:	4684      	mov	ip, r0
 800d2c0:	e773      	b.n	800d1aa <ai_platform_network_init+0x1d6>
 800d2c2:	f1b9 0f00 	cmp.w	r9, #0
 800d2c6:	d002      	beq.n	800d2ce <ai_platform_network_init+0x2fa>
 800d2c8:	f04f 0c01 	mov.w	ip, #1
 800d2cc:	e7a7      	b.n	800d21e <ai_platform_network_init+0x24a>
 800d2ce:	2110      	movs	r1, #16
 800d2d0:	2213      	movs	r2, #19
 800d2d2:	2600      	movs	r6, #0
 800d2d4:	1860      	adds	r0, r4, r1
 800d2d6:	f000 fc27 	bl	800db28 <core_set_error>
 800d2da:	e729      	b.n	800d130 <ai_platform_network_init+0x15c>
 800d2dc:	2110      	movs	r1, #16
 800d2de:	2211      	movs	r2, #17
 800d2e0:	462e      	mov	r6, r5
 800d2e2:	1860      	adds	r0, r4, r1
 800d2e4:	f000 fc20 	bl	800db28 <core_set_error>
 800d2e8:	e722      	b.n	800d130 <ai_platform_network_init+0x15c>
 800d2ea:	2110      	movs	r1, #16
 800d2ec:	2212      	movs	r2, #18
 800d2ee:	1860      	adds	r0, r4, r1
 800d2f0:	f000 fc1a 	bl	800db28 <core_set_error>
 800d2f4:	e71c      	b.n	800d130 <ai_platform_network_init+0x15c>
 800d2f6:	4666      	mov	r6, ip
 800d2f8:	e6b7      	b.n	800d06a <ai_platform_network_init+0x96>
 800d2fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2fc:	6a26      	ldr	r6, [r4, #32]
 800d2fe:	2701      	movs	r7, #1
 800d300:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d306:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d30a:	e74e      	b.n	800d1aa <ai_platform_network_init+0x1d6>

0800d30c <ai_platform_network_post_init>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	2800      	cmp	r0, #0
 800d310:	d04e      	beq.n	800d3b0 <ai_platform_network_post_init+0xa4>
 800d312:	4b8c      	ldr	r3, [pc, #560]	; (800d544 <ai_platform_network_post_init+0x238>)
 800d314:	4604      	mov	r4, r0
 800d316:	6802      	ldr	r2, [r0, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d149      	bne.n	800d3b0 <ai_platform_network_post_init+0xa4>
 800d31c:	f7fe ff8c 	bl	800c238 <_ai_platform_acquire_crc>
 800d320:	4b89      	ldr	r3, [pc, #548]	; (800d548 <ai_platform_network_post_init+0x23c>)
 800d322:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d32c:	189a      	adds	r2, r3, r2
 800d32e:	2a01      	cmp	r2, #1
 800d330:	f240 8095 	bls.w	800d45e <ai_platform_network_post_init+0x152>
 800d334:	f240 4249 	movw	r2, #1097	; 0x449
 800d338:	4293      	cmp	r3, r2
 800d33a:	f000 8090 	beq.w	800d45e <ai_platform_network_post_init+0x152>
 800d33e:	4a83      	ldr	r2, [pc, #524]	; (800d54c <ai_platform_network_post_init+0x240>)
 800d340:	6813      	ldr	r3, [r2, #0]
 800d342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d346:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d34a:	f000 8096 	beq.w	800d47a <ai_platform_network_post_init+0x16e>
 800d34e:	6813      	ldr	r3, [r2, #0]
 800d350:	f240 4183 	movw	r1, #1155	; 0x483
 800d354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d358:	428b      	cmp	r3, r1
 800d35a:	f000 80b8 	beq.w	800d4ce <ai_platform_network_post_init+0x1c2>
 800d35e:	6813      	ldr	r3, [r2, #0]
 800d360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d364:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d368:	f000 80de 	beq.w	800d528 <ai_platform_network_post_init+0x21c>
 800d36c:	6813      	ldr	r3, [r2, #0]
 800d36e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 80bd 	beq.w	800d4f2 <ai_platform_network_post_init+0x1e6>
 800d378:	f7fe ff60 	bl	800c23c <_ai_platform_release_crc>
 800d37c:	68e3      	ldr	r3, [r4, #12]
 800d37e:	f013 0502 	ands.w	r5, r3, #2
 800d382:	f000 808c 	beq.w	800d49e <ai_platform_network_post_init+0x192>
 800d386:	4620      	mov	r0, r4
 800d388:	f000 fd60 	bl	800de4c <ai_layers_post_init_all>
 800d38c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d38e:	b16b      	cbz	r3, 800d3ac <ai_platform_network_post_init+0xa0>
 800d390:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d392:	e007      	b.n	800d3a4 <ai_platform_network_post_init+0x98>
 800d394:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800d398:	4798      	blx	r3
 800d39a:	692b      	ldr	r3, [r5, #16]
 800d39c:	b133      	cbz	r3, 800d3ac <ai_platform_network_post_init+0xa0>
 800d39e:	42ab      	cmp	r3, r5
 800d3a0:	461d      	mov	r5, r3
 800d3a2:	d003      	beq.n	800d3ac <ai_platform_network_post_init+0xa0>
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	d1f3      	bne.n	800d394 <ai_platform_network_post_init+0x88>
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	f7fe ff42 	bl	800c238 <_ai_platform_acquire_crc>
 800d3b4:	4b64      	ldr	r3, [pc, #400]	; (800d548 <ai_platform_network_post_init+0x23c>)
 800d3b6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3c0:	185a      	adds	r2, r3, r1
 800d3c2:	2a01      	cmp	r2, #1
 800d3c4:	d92a      	bls.n	800d41c <ai_platform_network_post_init+0x110>
 800d3c6:	f240 4249 	movw	r2, #1097	; 0x449
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d026      	beq.n	800d41c <ai_platform_network_post_init+0x110>
 800d3ce:	4a5f      	ldr	r2, [pc, #380]	; (800d54c <ai_platform_network_post_init+0x240>)
 800d3d0:	6813      	ldr	r3, [r2, #0]
 800d3d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d3da:	d02c      	beq.n	800d436 <ai_platform_network_post_init+0x12a>
 800d3dc:	6813      	ldr	r3, [r2, #0]
 800d3de:	f240 4183 	movw	r1, #1155	; 0x483
 800d3e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3e6:	428b      	cmp	r3, r1
 800d3e8:	d060      	beq.n	800d4ac <ai_platform_network_post_init+0x1a0>
 800d3ea:	6813      	ldr	r3, [r2, #0]
 800d3ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3f0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d3f4:	f000 808b 	beq.w	800d50e <ai_platform_network_post_init+0x202>
 800d3f8:	6813      	ldr	r3, [r2, #0]
 800d3fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d129      	bne.n	800d456 <ai_platform_network_post_init+0x14a>
 800d402:	4a53      	ldr	r2, [pc, #332]	; (800d550 <ai_platform_network_post_init+0x244>)
 800d404:	2301      	movs	r3, #1
 800d406:	6093      	str	r3, [r2, #8]
 800d408:	6893      	ldr	r3, [r2, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1fc      	bne.n	800d408 <ai_platform_network_post_init+0xfc>
 800d40e:	4951      	ldr	r1, [pc, #324]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d410:	4b51      	ldr	r3, [pc, #324]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d412:	6011      	str	r1, [r2, #0]
 800d414:	6812      	ldr	r2, [r2, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d01d      	beq.n	800d456 <ai_platform_network_post_init+0x14a>
 800d41a:	e7fe      	b.n	800d41a <ai_platform_network_post_init+0x10e>
 800d41c:	4a4c      	ldr	r2, [pc, #304]	; (800d550 <ai_platform_network_post_init+0x244>)
 800d41e:	2301      	movs	r3, #1
 800d420:	6093      	str	r3, [r2, #8]
 800d422:	6893      	ldr	r3, [r2, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1fc      	bne.n	800d422 <ai_platform_network_post_init+0x116>
 800d428:	494a      	ldr	r1, [pc, #296]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d42a:	4b4b      	ldr	r3, [pc, #300]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d42c:	6011      	str	r1, [r2, #0]
 800d42e:	6812      	ldr	r2, [r2, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d010      	beq.n	800d456 <ai_platform_network_post_init+0x14a>
 800d434:	e7fe      	b.n	800d434 <ai_platform_network_post_init+0x128>
 800d436:	4a49      	ldr	r2, [pc, #292]	; (800d55c <ai_platform_network_post_init+0x250>)
 800d438:	2301      	movs	r3, #1
 800d43a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d43e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1fb      	bne.n	800d43e <ai_platform_network_post_init+0x132>
 800d446:	4943      	ldr	r1, [pc, #268]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d448:	4b43      	ldr	r3, [pc, #268]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d44a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d44e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d452:	429a      	cmp	r2, r3
 800d454:	d110      	bne.n	800d478 <ai_platform_network_post_init+0x16c>
 800d456:	f7fe fef1 	bl	800c23c <_ai_platform_release_crc>
 800d45a:	2000      	movs	r0, #0
 800d45c:	bd38      	pop	{r3, r4, r5, pc}
 800d45e:	4a3c      	ldr	r2, [pc, #240]	; (800d550 <ai_platform_network_post_init+0x244>)
 800d460:	2301      	movs	r3, #1
 800d462:	6093      	str	r3, [r2, #8]
 800d464:	6893      	ldr	r3, [r2, #8]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1fc      	bne.n	800d464 <ai_platform_network_post_init+0x158>
 800d46a:	493a      	ldr	r1, [pc, #232]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d46c:	4b3a      	ldr	r3, [pc, #232]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d46e:	6011      	str	r1, [r2, #0]
 800d470:	6812      	ldr	r2, [r2, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d080      	beq.n	800d378 <ai_platform_network_post_init+0x6c>
 800d476:	e7fe      	b.n	800d476 <ai_platform_network_post_init+0x16a>
 800d478:	e7fe      	b.n	800d478 <ai_platform_network_post_init+0x16c>
 800d47a:	4a38      	ldr	r2, [pc, #224]	; (800d55c <ai_platform_network_post_init+0x250>)
 800d47c:	2301      	movs	r3, #1
 800d47e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d482:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1fb      	bne.n	800d482 <ai_platform_network_post_init+0x176>
 800d48a:	4932      	ldr	r1, [pc, #200]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d48c:	4b32      	ldr	r3, [pc, #200]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d48e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d492:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d496:	429a      	cmp	r2, r3
 800d498:	f43f af6e 	beq.w	800d378 <ai_platform_network_post_init+0x6c>
 800d49c:	e7fe      	b.n	800d49c <ai_platform_network_post_init+0x190>
 800d49e:	2210      	movs	r2, #16
 800d4a0:	2111      	movs	r1, #17
 800d4a2:	18a0      	adds	r0, r4, r2
 800d4a4:	f000 fb40 	bl	800db28 <core_set_error>
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	4a2b      	ldr	r2, [pc, #172]	; (800d55c <ai_platform_network_post_init+0x250>)
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d4b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1fb      	bne.n	800d4b4 <ai_platform_network_post_init+0x1a8>
 800d4bc:	4925      	ldr	r1, [pc, #148]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d4be:	4b26      	ldr	r3, [pc, #152]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d4c0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d4c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d0c4      	beq.n	800d456 <ai_platform_network_post_init+0x14a>
 800d4cc:	e7fe      	b.n	800d4cc <ai_platform_network_post_init+0x1c0>
 800d4ce:	4a23      	ldr	r2, [pc, #140]	; (800d55c <ai_platform_network_post_init+0x250>)
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d4d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1fb      	bne.n	800d4d6 <ai_platform_network_post_init+0x1ca>
 800d4de:	491d      	ldr	r1, [pc, #116]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d4e0:	4b1d      	ldr	r3, [pc, #116]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d4e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d4e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	f43f af44 	beq.w	800d378 <ai_platform_network_post_init+0x6c>
 800d4f0:	e7fe      	b.n	800d4f0 <ai_platform_network_post_init+0x1e4>
 800d4f2:	4a17      	ldr	r2, [pc, #92]	; (800d550 <ai_platform_network_post_init+0x244>)
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	6093      	str	r3, [r2, #8]
 800d4f8:	6893      	ldr	r3, [r2, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1fc      	bne.n	800d4f8 <ai_platform_network_post_init+0x1ec>
 800d4fe:	4915      	ldr	r1, [pc, #84]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d500:	4b15      	ldr	r3, [pc, #84]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d502:	6011      	str	r1, [r2, #0]
 800d504:	6812      	ldr	r2, [r2, #0]
 800d506:	429a      	cmp	r2, r3
 800d508:	f43f af36 	beq.w	800d378 <ai_platform_network_post_init+0x6c>
 800d50c:	e7fe      	b.n	800d50c <ai_platform_network_post_init+0x200>
 800d50e:	4a10      	ldr	r2, [pc, #64]	; (800d550 <ai_platform_network_post_init+0x244>)
 800d510:	2301      	movs	r3, #1
 800d512:	6093      	str	r3, [r2, #8]
 800d514:	6893      	ldr	r3, [r2, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1fc      	bne.n	800d514 <ai_platform_network_post_init+0x208>
 800d51a:	490e      	ldr	r1, [pc, #56]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d51c:	4b0e      	ldr	r3, [pc, #56]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d51e:	6011      	str	r1, [r2, #0]
 800d520:	6812      	ldr	r2, [r2, #0]
 800d522:	429a      	cmp	r2, r3
 800d524:	d097      	beq.n	800d456 <ai_platform_network_post_init+0x14a>
 800d526:	e7fe      	b.n	800d526 <ai_platform_network_post_init+0x21a>
 800d528:	4a09      	ldr	r2, [pc, #36]	; (800d550 <ai_platform_network_post_init+0x244>)
 800d52a:	2301      	movs	r3, #1
 800d52c:	6093      	str	r3, [r2, #8]
 800d52e:	6893      	ldr	r3, [r2, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1fc      	bne.n	800d52e <ai_platform_network_post_init+0x222>
 800d534:	4907      	ldr	r1, [pc, #28]	; (800d554 <ai_platform_network_post_init+0x248>)
 800d536:	4b08      	ldr	r3, [pc, #32]	; (800d558 <ai_platform_network_post_init+0x24c>)
 800d538:	6011      	str	r1, [r2, #0]
 800d53a:	6812      	ldr	r2, [r2, #0]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	f43f af1b 	beq.w	800d378 <ai_platform_network_post_init+0x6c>
 800d542:	e7fe      	b.n	800d542 <ai_platform_network_post_init+0x236>
 800d544:	a1c00100 	.word	0xa1c00100
 800d548:	e0042000 	.word	0xe0042000
 800d54c:	5c001000 	.word	0x5c001000
 800d550:	40023000 	.word	0x40023000
 800d554:	f407a5c2 	.word	0xf407a5c2
 800d558:	b5e8b5cd 	.word	0xb5e8b5cd
 800d55c:	58024000 	.word	0x58024000

0800d560 <ai_platform_network_process>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	b085      	sub	sp, #20
 800d566:	460e      	mov	r6, r1
 800d568:	4605      	mov	r5, r0
 800d56a:	9201      	str	r2, [sp, #4]
 800d56c:	b120      	cbz	r0, 800d578 <ai_platform_network_process+0x18>
 800d56e:	4b24      	ldr	r3, [pc, #144]	; (800d600 <ai_platform_network_process+0xa0>)
 800d570:	6802      	ldr	r2, [r0, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	bf18      	it	ne
 800d576:	2500      	movne	r5, #0
 800d578:	f7fe fe5e 	bl	800c238 <_ai_platform_acquire_crc>
 800d57c:	4b21      	ldr	r3, [pc, #132]	; (800d604 <ai_platform_network_process+0xa4>)
 800d57e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d588:	185a      	adds	r2, r3, r1
 800d58a:	2a01      	cmp	r2, #1
 800d58c:	d92b      	bls.n	800d5e6 <ai_platform_network_process+0x86>
 800d58e:	f240 4249 	movw	r2, #1097	; 0x449
 800d592:	4293      	cmp	r3, r2
 800d594:	d027      	beq.n	800d5e6 <ai_platform_network_process+0x86>
 800d596:	4a1c      	ldr	r2, [pc, #112]	; (800d608 <ai_platform_network_process+0xa8>)
 800d598:	6813      	ldr	r3, [r2, #0]
 800d59a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d59e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d5a2:	d039      	beq.n	800d618 <ai_platform_network_process+0xb8>
 800d5a4:	6813      	ldr	r3, [r2, #0]
 800d5a6:	f240 4183 	movw	r1, #1155	; 0x483
 800d5aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5ae:	428b      	cmp	r3, r1
 800d5b0:	f000 819c 	beq.w	800d8ec <ai_platform_network_process+0x38c>
 800d5b4:	6813      	ldr	r3, [r2, #0]
 800d5b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5ba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d5be:	f000 8179 	beq.w	800d8b4 <ai_platform_network_process+0x354>
 800d5c2:	6813      	ldr	r3, [r2, #0]
 800d5c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d136      	bne.n	800d63a <ai_platform_network_process+0xda>
 800d5cc:	4a0f      	ldr	r2, [pc, #60]	; (800d60c <ai_platform_network_process+0xac>)
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	6093      	str	r3, [r2, #8]
 800d5d2:	6893      	ldr	r3, [r2, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1fc      	bne.n	800d5d2 <ai_platform_network_process+0x72>
 800d5d8:	4b0d      	ldr	r3, [pc, #52]	; (800d610 <ai_platform_network_process+0xb0>)
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <ai_platform_network_process+0xb4>)
 800d5de:	6812      	ldr	r2, [r2, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d02a      	beq.n	800d63a <ai_platform_network_process+0xda>
 800d5e4:	e7fe      	b.n	800d5e4 <ai_platform_network_process+0x84>
 800d5e6:	4a09      	ldr	r2, [pc, #36]	; (800d60c <ai_platform_network_process+0xac>)
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	6093      	str	r3, [r2, #8]
 800d5ec:	6893      	ldr	r3, [r2, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1fc      	bne.n	800d5ec <ai_platform_network_process+0x8c>
 800d5f2:	4b07      	ldr	r3, [pc, #28]	; (800d610 <ai_platform_network_process+0xb0>)
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	4b07      	ldr	r3, [pc, #28]	; (800d614 <ai_platform_network_process+0xb4>)
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d01d      	beq.n	800d63a <ai_platform_network_process+0xda>
 800d5fe:	e7fe      	b.n	800d5fe <ai_platform_network_process+0x9e>
 800d600:	a1c00100 	.word	0xa1c00100
 800d604:	e0042000 	.word	0xe0042000
 800d608:	5c001000 	.word	0x5c001000
 800d60c:	40023000 	.word	0x40023000
 800d610:	f407a5c2 	.word	0xf407a5c2
 800d614:	b5e8b5cd 	.word	0xb5e8b5cd
 800d618:	4ab0      	ldr	r2, [pc, #704]	; (800d8dc <ai_platform_network_process+0x37c>)
 800d61a:	2301      	movs	r3, #1
 800d61c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d620:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1fb      	bne.n	800d620 <ai_platform_network_process+0xc0>
 800d628:	4bad      	ldr	r3, [pc, #692]	; (800d8e0 <ai_platform_network_process+0x380>)
 800d62a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d62e:	4bad      	ldr	r3, [pc, #692]	; (800d8e4 <ai_platform_network_process+0x384>)
 800d630:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d634:	429a      	cmp	r2, r3
 800d636:	f040 812b 	bne.w	800d890 <ai_platform_network_process+0x330>
 800d63a:	f7fe fdff 	bl	800c23c <_ai_platform_release_crc>
 800d63e:	2d00      	cmp	r5, #0
 800d640:	f000 8172 	beq.w	800d928 <ai_platform_network_process+0x3c8>
 800d644:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 8123 	beq.w	800d892 <ai_platform_network_process+0x332>
 800d64c:	68eb      	ldr	r3, [r5, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800d654:	f003 0303 	and.w	r3, r3, #3
 800d658:	616a      	str	r2, [r5, #20]
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	f040 811f 	bne.w	800d89e <ai_platform_network_process+0x33e>
 800d660:	2e00      	cmp	r6, #0
 800d662:	f000 8156 	beq.w	800d912 <ai_platform_network_process+0x3b2>
 800d666:	fab8 f788 	clz	r7, r8
 800d66a:	097f      	lsrs	r7, r7, #5
 800d66c:	f1b8 0f00 	cmp.w	r8, #0
 800d670:	f000 814f 	beq.w	800d912 <ai_platform_network_process+0x3b2>
 800d674:	f8b8 3000 	ldrh.w	r3, [r8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f000 814a 	beq.w	800d912 <ai_platform_network_process+0x3b2>
 800d67e:	69b3      	ldr	r3, [r6, #24]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800d686:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d072      	beq.n	800d774 <ai_platform_network_process+0x214>
 800d68e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d692:	2c00      	cmp	r4, #0
 800d694:	d06e      	beq.n	800d774 <ai_platform_network_process+0x214>
 800d696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d69a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d69e:	f8d3 a000 	ldr.w	sl, [r3]
 800d6a2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800d6a6:	f000 8133 	beq.w	800d910 <ai_platform_network_process+0x3b0>
 800d6aa:	69a3      	ldr	r3, [r4, #24]
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	685d      	ldr	r5, [r3, #4]
 800d6b2:	f7fe fd73 	bl	800c19c <ai_buffer_get_size>
 800d6b6:	4285      	cmp	r5, r0
 800d6b8:	f0c0 8138 	bcc.w	800d92c <ai_platform_network_process+0x3cc>
 800d6bc:	68e0      	ldr	r0, [r4, #12]
 800d6be:	69b1      	ldr	r1, [r6, #24]
 800d6c0:	68c2      	ldr	r2, [r0, #12]
 800d6c2:	68cb      	ldr	r3, [r1, #12]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	f040 8131 	bne.w	800d92c <ai_platform_network_process+0x3cc>
 800d6ca:	6882      	ldr	r2, [r0, #8]
 800d6cc:	688b      	ldr	r3, [r1, #8]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	f040 812c 	bne.w	800d92c <ai_platform_network_process+0x3cc>
 800d6d4:	6842      	ldr	r2, [r0, #4]
 800d6d6:	684b      	ldr	r3, [r1, #4]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	f040 8127 	bne.w	800d92c <ai_platform_network_process+0x3cc>
 800d6de:	69a3      	ldr	r3, [r4, #24]
 800d6e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6e4:	f001 fc4e 	bl	800ef84 <ai_array_get_data_byte_size>
 800d6e8:	4605      	mov	r5, r0
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f001 fc60 	bl	800efb0 <get_tensor_byte_size>
 800d6f0:	4285      	cmp	r5, r0
 800d6f2:	f0c0 811b 	bcc.w	800d92c <ai_platform_network_process+0x3cc>
 800d6f6:	69a3      	ldr	r3, [r4, #24]
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	f001 fbd7 	bl	800eeac <ai_array_to_buffer_fmt>
 800d6fe:	6833      	ldr	r3, [r6, #0]
 800d700:	4058      	eors	r0, r3
 800d702:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d706:	f040 81c8 	bne.w	800da9a <ai_platform_network_process+0x53a>
 800d70a:	6873      	ldr	r3, [r6, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 81bb 	beq.w	800da88 <ai_platform_network_process+0x528>
 800d712:	69b3      	ldr	r3, [r6, #24]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f000 81c8 	beq.w	800daac <ai_platform_network_process+0x54c>
 800d71c:	9a02      	ldr	r2, [sp, #8]
 800d71e:	4620      	mov	r0, r4
 800d720:	3701      	adds	r7, #1
 800d722:	361c      	adds	r6, #28
 800d724:	429a      	cmp	r2, r3
 800d726:	bf38      	it	cc
 800d728:	461a      	movcc	r2, r3
 800d72a:	9202      	str	r2, [sp, #8]
 800d72c:	f001 fc40 	bl	800efb0 <get_tensor_byte_size>
 800d730:	f8c9 0008 	str.w	r0, [r9, #8]
 800d734:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	fb00 f303 	mul.w	r3, r0, r3
 800d73e:	f8c9 300c 	str.w	r3, [r9, #12]
 800d742:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d746:	440b      	add	r3, r1
 800d748:	f8c9 1004 	str.w	r1, [r9, #4]
 800d74c:	f84a 300b 	str.w	r3, [sl, fp]
 800d750:	69a0      	ldr	r0, [r4, #24]
 800d752:	6803      	ldr	r3, [r0, #0]
 800d754:	009a      	lsls	r2, r3, #2
 800d756:	f100 80bb 	bmi.w	800d8d0 <ai_platform_network_process+0x370>
 800d75a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	4419      	add	r1, r3
 800d762:	6081      	str	r1, [r0, #8]
 800d764:	69a3      	ldr	r3, [r4, #24]
 800d766:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d76a:	60da      	str	r2, [r3, #12]
 800d76c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d770:	42bb      	cmp	r3, r7
 800d772:	d888      	bhi.n	800d686 <ai_platform_network_process+0x126>
 800d774:	9d03      	ldr	r5, [sp, #12]
 800d776:	9b01      	ldr	r3, [sp, #4]
 800d778:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 819f 	beq.w	800dabe <ai_platform_network_process+0x55e>
 800d780:	2a01      	cmp	r2, #1
 800d782:	f240 8179 	bls.w	800da78 <ai_platform_network_process+0x518>
 800d786:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800d78a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 8172 	beq.w	800da78 <ai_platform_network_process+0x518>
 800d794:	9e01      	ldr	r6, [sp, #4]
 800d796:	2700      	movs	r7, #0
 800d798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 80d3 	beq.w	800d948 <ai_platform_network_process+0x3e8>
 800d7a2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d7a6:	2c00      	cmp	r4, #0
 800d7a8:	f000 80ce 	beq.w	800d948 <ai_platform_network_process+0x3e8>
 800d7ac:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d7b0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d7b4:	f8d3 8000 	ldr.w	r8, [r3]
 800d7b8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800d7bc:	f000 819d 	beq.w	800dafa <ai_platform_network_process+0x59a>
 800d7c0:	69a3      	ldr	r3, [r4, #24]
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	f7fe fce7 	bl	800c19c <ai_buffer_get_size>
 800d7ce:	9b01      	ldr	r3, [sp, #4]
 800d7d0:	4283      	cmp	r3, r0
 800d7d2:	f0c0 8151 	bcc.w	800da78 <ai_platform_network_process+0x518>
 800d7d6:	68e0      	ldr	r0, [r4, #12]
 800d7d8:	69b1      	ldr	r1, [r6, #24]
 800d7da:	68c2      	ldr	r2, [r0, #12]
 800d7dc:	68cb      	ldr	r3, [r1, #12]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	f040 814a 	bne.w	800da78 <ai_platform_network_process+0x518>
 800d7e4:	6882      	ldr	r2, [r0, #8]
 800d7e6:	688b      	ldr	r3, [r1, #8]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	f040 8145 	bne.w	800da78 <ai_platform_network_process+0x518>
 800d7ee:	6842      	ldr	r2, [r0, #4]
 800d7f0:	684b      	ldr	r3, [r1, #4]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	f040 8140 	bne.w	800da78 <ai_platform_network_process+0x518>
 800d7f8:	69a3      	ldr	r3, [r4, #24]
 800d7fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7fe:	f001 fbc1 	bl	800ef84 <ai_array_get_data_byte_size>
 800d802:	9001      	str	r0, [sp, #4]
 800d804:	4620      	mov	r0, r4
 800d806:	f001 fbd3 	bl	800efb0 <get_tensor_byte_size>
 800d80a:	9b01      	ldr	r3, [sp, #4]
 800d80c:	4283      	cmp	r3, r0
 800d80e:	f0c0 8133 	bcc.w	800da78 <ai_platform_network_process+0x518>
 800d812:	69a3      	ldr	r3, [r4, #24]
 800d814:	6818      	ldr	r0, [r3, #0]
 800d816:	f001 fb49 	bl	800eeac <ai_array_to_buffer_fmt>
 800d81a:	6833      	ldr	r3, [r6, #0]
 800d81c:	4058      	eors	r0, r3
 800d81e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d822:	f040 815a 	bne.w	800dada <ai_platform_network_process+0x57a>
 800d826:	6873      	ldr	r3, [r6, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f000 814e 	beq.w	800daca <ai_platform_network_process+0x56a>
 800d82e:	69b3      	ldr	r3, [r6, #24]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 8159 	beq.w	800daea <ai_platform_network_process+0x58a>
 800d838:	9a02      	ldr	r2, [sp, #8]
 800d83a:	4620      	mov	r0, r4
 800d83c:	3701      	adds	r7, #1
 800d83e:	361c      	adds	r6, #28
 800d840:	429a      	cmp	r2, r3
 800d842:	bf38      	it	cc
 800d844:	461a      	movcc	r2, r3
 800d846:	9202      	str	r2, [sp, #8]
 800d848:	f001 fbb2 	bl	800efb0 <get_tensor_byte_size>
 800d84c:	f8ca 0008 	str.w	r0, [sl, #8]
 800d850:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	fb00 f303 	mul.w	r3, r0, r3
 800d85a:	f8ca 300c 	str.w	r3, [sl, #12]
 800d85e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d862:	440b      	add	r3, r1
 800d864:	f8ca 1004 	str.w	r1, [sl, #4]
 800d868:	f848 300b 	str.w	r3, [r8, fp]
 800d86c:	69a0      	ldr	r0, [r4, #24]
 800d86e:	6803      	ldr	r3, [r0, #0]
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	d464      	bmi.n	800d93e <ai_platform_network_process+0x3de>
 800d874:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d878:	1a9b      	subs	r3, r3, r2
 800d87a:	4419      	add	r1, r3
 800d87c:	6081      	str	r1, [r0, #8]
 800d87e:	69a3      	ldr	r3, [r4, #24]
 800d880:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d884:	60da      	str	r2, [r3, #12]
 800d886:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d88a:	429f      	cmp	r7, r3
 800d88c:	d384      	bcc.n	800d798 <ai_platform_network_process+0x238>
 800d88e:	e05b      	b.n	800d948 <ai_platform_network_process+0x3e8>
 800d890:	e7fe      	b.n	800d890 <ai_platform_network_process+0x330>
 800d892:	68ea      	ldr	r2, [r5, #12]
 800d894:	616b      	str	r3, [r5, #20]
 800d896:	f002 0203 	and.w	r2, r2, #3
 800d89a:	2a03      	cmp	r2, #3
 800d89c:	d039      	beq.n	800d912 <ai_platform_network_process+0x3b2>
 800d89e:	2230      	movs	r2, #48	; 0x30
 800d8a0:	2111      	movs	r1, #17
 800d8a2:	f105 0010 	add.w	r0, r5, #16
 800d8a6:	2400      	movs	r4, #0
 800d8a8:	f000 f93e 	bl	800db28 <core_set_error>
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	b005      	add	sp, #20
 800d8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b4:	4a0c      	ldr	r2, [pc, #48]	; (800d8e8 <ai_platform_network_process+0x388>)
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	6093      	str	r3, [r2, #8]
 800d8ba:	6893      	ldr	r3, [r2, #8]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1fc      	bne.n	800d8ba <ai_platform_network_process+0x35a>
 800d8c0:	4b07      	ldr	r3, [pc, #28]	; (800d8e0 <ai_platform_network_process+0x380>)
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <ai_platform_network_process+0x384>)
 800d8c6:	6812      	ldr	r2, [r2, #0]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	f43f aeb6 	beq.w	800d63a <ai_platform_network_process+0xda>
 800d8ce:	e7fe      	b.n	800d8ce <ai_platform_network_process+0x36e>
 800d8d0:	f8b8 3000 	ldrh.w	r3, [r8]
 800d8d4:	429f      	cmp	r7, r3
 800d8d6:	f4ff aed6 	bcc.w	800d686 <ai_platform_network_process+0x126>
 800d8da:	e74b      	b.n	800d774 <ai_platform_network_process+0x214>
 800d8dc:	58024000 	.word	0x58024000
 800d8e0:	f407a5c2 	.word	0xf407a5c2
 800d8e4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d8e8:	40023000 	.word	0x40023000
 800d8ec:	4a87      	ldr	r2, [pc, #540]	; (800db0c <ai_platform_network_process+0x5ac>)
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d8f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1fb      	bne.n	800d8f4 <ai_platform_network_process+0x394>
 800d8fc:	4b84      	ldr	r3, [pc, #528]	; (800db10 <ai_platform_network_process+0x5b0>)
 800d8fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d902:	4b84      	ldr	r3, [pc, #528]	; (800db14 <ai_platform_network_process+0x5b4>)
 800d904:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d908:	429a      	cmp	r2, r3
 800d90a:	f43f ae96 	beq.w	800d63a <ai_platform_network_process+0xda>
 800d90e:	e7fe      	b.n	800d90e <ai_platform_network_process+0x3ae>
 800d910:	9d03      	ldr	r5, [sp, #12]
 800d912:	2400      	movs	r4, #0
 800d914:	2217      	movs	r2, #23
 800d916:	2112      	movs	r1, #18
 800d918:	f105 0010 	add.w	r0, r5, #16
 800d91c:	f000 f904 	bl	800db28 <core_set_error>
 800d920:	4620      	mov	r0, r4
 800d922:	b005      	add	sp, #20
 800d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d928:	462c      	mov	r4, r5
 800d92a:	e7bf      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800d92c:	9d03      	ldr	r5, [sp, #12]
 800d92e:	2218      	movs	r2, #24
 800d930:	2112      	movs	r1, #18
 800d932:	2400      	movs	r4, #0
 800d934:	f105 0010 	add.w	r0, r5, #16
 800d938:	f000 f8f6 	bl	800db28 <core_set_error>
 800d93c:	e7b6      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800d93e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d942:	429f      	cmp	r7, r3
 800d944:	f4ff af28 	bcc.w	800d798 <ai_platform_network_process+0x238>
 800d948:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d94c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d94e:	82ab      	strh	r3, [r5, #20]
 800d950:	2a00      	cmp	r2, #0
 800d952:	f040 808b 	bne.w	800da6c <ai_platform_network_process+0x50c>
 800d956:	4616      	mov	r6, r2
 800d958:	4617      	mov	r7, r2
 800d95a:	8aec      	ldrh	r4, [r5, #22]
 800d95c:	429c      	cmp	r4, r3
 800d95e:	d2a5      	bcs.n	800d8ac <ai_platform_network_process+0x34c>
 800d960:	46ab      	mov	fp, r5
 800d962:	2e00      	cmp	r6, #0
 800d964:	d030      	beq.n	800d9c8 <ai_platform_network_process+0x468>
 800d966:	f04f 0800 	mov.w	r8, #0
 800d96a:	e014      	b.n	800d996 <ai_platform_network_process+0x436>
 800d96c:	6882      	ldr	r2, [r0, #8]
 800d96e:	68c5      	ldr	r5, [r0, #12]
 800d970:	6863      	ldr	r3, [r4, #4]
 800d972:	1b52      	subs	r2, r2, r5
 800d974:	4413      	add	r3, r2
 800d976:	6083      	str	r3, [r0, #8]
 800d978:	698b      	ldr	r3, [r1, #24]
 800d97a:	6862      	ldr	r2, [r4, #4]
 800d97c:	60da      	str	r2, [r3, #12]
 800d97e:	f859 200a 	ldr.w	r2, [r9, sl]
 800d982:	f108 0801 	add.w	r8, r8, #1
 800d986:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d98a:	440b      	add	r3, r1
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d301      	bcc.n	800d994 <ai_platform_network_process+0x434>
 800d990:	68e3      	ldr	r3, [r4, #12]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	6063      	str	r3, [r4, #4]
 800d996:	8833      	ldrh	r3, [r6, #0]
 800d998:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800d99c:	4543      	cmp	r3, r8
 800d99e:	d913      	bls.n	800d9c8 <ai_platform_network_process+0x468>
 800d9a0:	6873      	ldr	r3, [r6, #4]
 800d9a2:	b18b      	cbz	r3, 800d9c8 <ai_platform_network_process+0x468>
 800d9a4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d9a8:	b171      	cbz	r1, 800d9c8 <ai_platform_network_process+0x468>
 800d9aa:	6988      	ldr	r0, [r1, #24]
 800d9ac:	68b2      	ldr	r2, [r6, #8]
 800d9ae:	6803      	ldr	r3, [r0, #0]
 800d9b0:	f8d2 9000 	ldr.w	r9, [r2]
 800d9b4:	009d      	lsls	r5, r3, #2
 800d9b6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800d9ba:	d5d7      	bpl.n	800d96c <ai_platform_network_process+0x40c>
 800d9bc:	6881      	ldr	r1, [r0, #8]
 800d9be:	68a2      	ldr	r2, [r4, #8]
 800d9c0:	6860      	ldr	r0, [r4, #4]
 800d9c2:	f000 ff67 	bl	800e894 <st_int8_copy>
 800d9c6:	e7da      	b.n	800d97e <ai_platform_network_process+0x41e>
 800d9c8:	4658      	mov	r0, fp
 800d9ca:	f000 fa53 	bl	800de74 <ai_layers_forward_all>
 800d9ce:	2f00      	cmp	r7, #0
 800d9d0:	d03d      	beq.n	800da4e <ai_platform_network_process+0x4ee>
 800d9d2:	2400      	movs	r4, #0
 800d9d4:	e016      	b.n	800da04 <ai_platform_network_process+0x4a4>
 800d9d6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800d9da:	f859 100a 	ldr.w	r1, [r9, sl]
 800d9de:	4413      	add	r3, r2
 800d9e0:	428b      	cmp	r3, r1
 800d9e2:	d302      	bcc.n	800d9ea <ai_platform_network_process+0x48a>
 800d9e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9e8:	1acb      	subs	r3, r1, r3
 800d9ea:	f8c8 3004 	str.w	r3, [r8, #4]
 800d9ee:	6981      	ldr	r1, [r0, #24]
 800d9f0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800d9f4:	1b52      	subs	r2, r2, r5
 800d9f6:	4413      	add	r3, r2
 800d9f8:	608b      	str	r3, [r1, #8]
 800d9fa:	6983      	ldr	r3, [r0, #24]
 800d9fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800da00:	60da      	str	r2, [r3, #12]
 800da02:	3401      	adds	r4, #1
 800da04:	883b      	ldrh	r3, [r7, #0]
 800da06:	42a3      	cmp	r3, r4
 800da08:	d921      	bls.n	800da4e <ai_platform_network_process+0x4ee>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	b1fb      	cbz	r3, 800da4e <ai_platform_network_process+0x4ee>
 800da0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800da12:	b1e0      	cbz	r0, 800da4e <ai_platform_network_process+0x4ee>
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800da1a:	6983      	ldr	r3, [r0, #24]
 800da1c:	f8d2 9000 	ldr.w	r9, [r2]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800da26:	0092      	lsls	r2, r2, #2
 800da28:	d5d5      	bpl.n	800d9d6 <ai_platform_network_process+0x476>
 800da2a:	6898      	ldr	r0, [r3, #8]
 800da2c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800da30:	f000 ff30 	bl	800e894 <st_int8_copy>
 800da34:	f859 200a 	ldr.w	r2, [r9, sl]
 800da38:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800da3c:	440b      	add	r3, r1
 800da3e:	4293      	cmp	r3, r2
 800da40:	d302      	bcc.n	800da48 <ai_platform_network_process+0x4e8>
 800da42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	f8c8 3004 	str.w	r3, [r8, #4]
 800da4c:	e7d9      	b.n	800da02 <ai_platform_network_process+0x4a2>
 800da4e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800da52:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800da56:	3401      	adds	r4, #1
 800da58:	b2a4      	uxth	r4, r4
 800da5a:	42a3      	cmp	r3, r4
 800da5c:	f8ab 4016 	strh.w	r4, [fp, #22]
 800da60:	f63f af7f 	bhi.w	800d962 <ai_platform_network_process+0x402>
 800da64:	4620      	mov	r0, r4
 800da66:	b005      	add	sp, #20
 800da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6c:	2a01      	cmp	r2, #1
 800da6e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800da70:	d029      	beq.n	800dac6 <ai_platform_network_process+0x566>
 800da72:	f106 070c 	add.w	r7, r6, #12
 800da76:	e770      	b.n	800d95a <ai_platform_network_process+0x3fa>
 800da78:	2218      	movs	r2, #24
 800da7a:	2113      	movs	r1, #19
 800da7c:	f105 0010 	add.w	r0, r5, #16
 800da80:	2400      	movs	r4, #0
 800da82:	f000 f851 	bl	800db28 <core_set_error>
 800da86:	e711      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800da88:	9d03      	ldr	r5, [sp, #12]
 800da8a:	4604      	mov	r4, r0
 800da8c:	2217      	movs	r2, #23
 800da8e:	2112      	movs	r1, #18
 800da90:	f105 0010 	add.w	r0, r5, #16
 800da94:	f000 f848 	bl	800db28 <core_set_error>
 800da98:	e708      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800da9a:	9d03      	ldr	r5, [sp, #12]
 800da9c:	2219      	movs	r2, #25
 800da9e:	2112      	movs	r1, #18
 800daa0:	2400      	movs	r4, #0
 800daa2:	f105 0010 	add.w	r0, r5, #16
 800daa6:	f000 f83f 	bl	800db28 <core_set_error>
 800daaa:	e6ff      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800daac:	9d03      	ldr	r5, [sp, #12]
 800daae:	4604      	mov	r4, r0
 800dab0:	2221      	movs	r2, #33	; 0x21
 800dab2:	2112      	movs	r1, #18
 800dab4:	f105 0010 	add.w	r0, r5, #16
 800dab8:	f000 f836 	bl	800db28 <core_set_error>
 800dabc:	e6f6      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800dabe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800dac2:	82ab      	strh	r3, [r5, #20]
 800dac4:	e744      	b.n	800d950 <ai_platform_network_process+0x3f0>
 800dac6:	2700      	movs	r7, #0
 800dac8:	e747      	b.n	800d95a <ai_platform_network_process+0x3fa>
 800daca:	4604      	mov	r4, r0
 800dacc:	2217      	movs	r2, #23
 800dace:	2113      	movs	r1, #19
 800dad0:	f105 0010 	add.w	r0, r5, #16
 800dad4:	f000 f828 	bl	800db28 <core_set_error>
 800dad8:	e6e8      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800dada:	2219      	movs	r2, #25
 800dadc:	2113      	movs	r1, #19
 800dade:	f105 0010 	add.w	r0, r5, #16
 800dae2:	2400      	movs	r4, #0
 800dae4:	f000 f820 	bl	800db28 <core_set_error>
 800dae8:	e6e0      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800daea:	4604      	mov	r4, r0
 800daec:	2221      	movs	r2, #33	; 0x21
 800daee:	2113      	movs	r1, #19
 800daf0:	f105 0010 	add.w	r0, r5, #16
 800daf4:	f000 f818 	bl	800db28 <core_set_error>
 800daf8:	e6d8      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800dafa:	2217      	movs	r2, #23
 800dafc:	2113      	movs	r1, #19
 800dafe:	f105 0010 	add.w	r0, r5, #16
 800db02:	4654      	mov	r4, sl
 800db04:	f000 f810 	bl	800db28 <core_set_error>
 800db08:	e6d0      	b.n	800d8ac <ai_platform_network_process+0x34c>
 800db0a:	bf00      	nop
 800db0c:	58024000 	.word	0x58024000
 800db10:	f407a5c2 	.word	0xf407a5c2
 800db14:	b5e8b5cd 	.word	0xb5e8b5cd

0800db18 <core_init>:
 800db18:	2001      	movs	r0, #1
 800db1a:	4770      	bx	lr

0800db1c <core_get_error>:
 800db1c:	4603      	mov	r3, r0
 800db1e:	2200      	movs	r2, #0
 800db20:	6800      	ldr	r0, [r0, #0]
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop

0800db28 <core_set_error>:
 800db28:	4603      	mov	r3, r0
 800db2a:	7800      	ldrb	r0, [r0, #0]
 800db2c:	b108      	cbz	r0, 800db32 <core_set_error+0xa>
 800db2e:	2000      	movs	r0, #0
 800db30:	4770      	bx	lr
 800db32:	7019      	strb	r1, [r3, #0]
 800db34:	2001      	movs	r0, #1
 800db36:	6819      	ldr	r1, [r3, #0]
 800db38:	f362 211f 	bfi	r1, r2, #8, #24
 800db3c:	6019      	str	r1, [r3, #0]
 800db3e:	4770      	bx	lr

0800db40 <node_convert>:
 800db40:	6982      	ldr	r2, [r0, #24]
 800db42:	8813      	ldrh	r3, [r2, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d04a      	beq.n	800dbde <node_convert+0x9e>
 800db48:	6852      	ldr	r2, [r2, #4]
 800db4a:	6850      	ldr	r0, [r2, #4]
 800db4c:	b100      	cbz	r0, 800db50 <node_convert+0x10>
 800db4e:	6800      	ldr	r0, [r0, #0]
 800db50:	2b01      	cmp	r3, #1
 800db52:	f000 813d 	beq.w	800ddd0 <node_convert+0x290>
 800db56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5a:	6915      	ldr	r5, [r2, #16]
 800db5c:	b105      	cbz	r5, 800db60 <node_convert+0x20>
 800db5e:	682d      	ldr	r5, [r5, #0]
 800db60:	6883      	ldr	r3, [r0, #8]
 800db62:	0a1b      	lsrs	r3, r3, #8
 800db64:	f000 80ee 	beq.w	800dd44 <node_convert+0x204>
 800db68:	68c1      	ldr	r1, [r0, #12]
 800db6a:	2401      	movs	r4, #1
 800db6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800db70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db74:	4299      	cmp	r1, r3
 800db76:	fb02 f404 	mul.w	r4, r2, r4
 800db7a:	d1f9      	bne.n	800db70 <node_convert+0x30>
 800db7c:	6982      	ldr	r2, [r0, #24]
 800db7e:	69af      	ldr	r7, [r5, #24]
 800db80:	6813      	ldr	r3, [r2, #0]
 800db82:	f3c3 4143 	ubfx	r1, r3, #17, #4
 800db86:	2901      	cmp	r1, #1
 800db88:	d02b      	beq.n	800dbe2 <node_convert+0xa2>
 800db8a:	6801      	ldr	r1, [r0, #0]
 800db8c:	68bd      	ldr	r5, [r7, #8]
 800db8e:	2900      	cmp	r1, #0
 800db90:	d069      	beq.n	800dc66 <node_convert+0x126>
 800db92:	684e      	ldr	r6, [r1, #4]
 800db94:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 800db98:	6892      	ldr	r2, [r2, #8]
 800db9a:	2e00      	cmp	r6, #0
 800db9c:	f000 80b8 	beq.w	800dd10 <node_convert+0x1d0>
 800dba0:	884b      	ldrh	r3, [r1, #2]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 8089 	beq.w	800dcba <node_convert+0x17a>
 800dba8:	6833      	ldr	r3, [r6, #0]
 800dbaa:	ed93 7a00 	vldr	s14, [r3]
 800dbae:	6873      	ldr	r3, [r6, #4]
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	f000 80c5 	beq.w	800dd40 <node_convert+0x200>
 800dbb6:	f993 0000 	ldrsb.w	r0, [r3]
 800dbba:	b174      	cbz	r4, 800dbda <node_convert+0x9a>
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	4414      	add	r4, r2
 800dbc0:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800dbc4:	1a1b      	subs	r3, r3, r0
 800dbc6:	42a2      	cmp	r2, r4
 800dbc8:	ee07 3a90 	vmov	s15, r3
 800dbcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbd4:	ece1 7a01 	vstmia	r1!, {s15}
 800dbd8:	d1f2      	bne.n	800dbc0 <node_convert+0x80>
 800dbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	deff      	udf	#255	; 0xff
 800dbe2:	682e      	ldr	r6, [r5, #0]
 800dbe4:	6895      	ldr	r5, [r2, #8]
 800dbe6:	2e00      	cmp	r6, #0
 800dbe8:	f000 80ae 	beq.w	800dd48 <node_convert+0x208>
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	6871      	ldr	r1, [r6, #4]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800dbf6:	2900      	cmp	r1, #0
 800dbf8:	d064      	beq.n	800dcc4 <node_convert+0x184>
 800dbfa:	8870      	ldrh	r0, [r6, #2]
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d067      	beq.n	800dcd0 <node_convert+0x190>
 800dc00:	6808      	ldr	r0, [r1, #0]
 800dc02:	edd0 7a00 	vldr	s15, [r0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f000 80d7 	beq.w	800ddba <node_convert+0x27a>
 800dc0c:	684b      	ldr	r3, [r1, #4]
 800dc0e:	f993 3000 	ldrsb.w	r3, [r3]
 800dc12:	ee06 3a90 	vmov	s13, r3
 800dc16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800dc1a:	2c00      	cmp	r4, #0
 800dc1c:	d0dd      	beq.n	800dbda <node_convert+0x9a>
 800dc1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc22:	4414      	add	r4, r2
 800dc24:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800dc28:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 800ddd8 <node_convert+0x298>
 800dc2c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800dc30:	ecb5 7a01 	vldmia	r5!, {s14}
 800dc34:	eef0 7a66 	vmov.f32	s15, s13
 800dc38:	eee7 7a06 	vfma.f32	s15, s14, s12
 800dc3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc44:	bfac      	ite	ge
 800dc46:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 800dc4a:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 800dc4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc52:	ee17 3a90 	vmov	r3, s15
 800dc56:	f303 0307 	ssat	r3, #8, r3
 800dc5a:	f802 3b01 	strb.w	r3, [r2], #1
 800dc5e:	42a2      	cmp	r2, r4
 800dc60:	d1e6      	bne.n	800dc30 <node_convert+0xf0>
 800dc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc66:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800dc6a:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800dc6e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800dc72:	6890      	ldr	r0, [r2, #8]
 800dc74:	1b8e      	subs	r6, r1, r6
 800dc76:	2908      	cmp	r1, #8
 800dc78:	4622      	mov	r2, r4
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	f106 0640 	add.w	r6, r6, #64	; 0x40
 800dc80:	eba6 0603 	sub.w	r6, r6, r3
 800dc84:	f000 808b 	beq.w	800dd9e <node_convert+0x25e>
 800dc88:	f001 f846 	bl	800ed18 <arm_q15_to_float>
 800dc8c:	2e00      	cmp	r6, #0
 800dc8e:	d0a4      	beq.n	800dbda <node_convert+0x9a>
 800dc90:	ee07 6a90 	vmov	s15, r6
 800dc94:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800dc98:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800dc9c:	f004 f8b8 	bl	8011e10 <powf>
 800dca0:	2c00      	cmp	r4, #0
 800dca2:	d09a      	beq.n	800dbda <node_convert+0x9a>
 800dca4:	2300      	movs	r3, #0
 800dca6:	ecf5 7a01 	vldmia	r5!, {s15}
 800dcaa:	3301      	adds	r3, #1
 800dcac:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dcb0:	429c      	cmp	r4, r3
 800dcb2:	ed45 7a01 	vstr	s15, [r5, #-4]
 800dcb6:	d1f6      	bne.n	800dca6 <node_convert+0x166>
 800dcb8:	e78f      	b.n	800dbda <node_convert+0x9a>
 800dcba:	b358      	cbz	r0, 800dd14 <node_convert+0x1d4>
 800dcbc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800dddc <node_convert+0x29c>
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	e77a      	b.n	800dbba <node_convert+0x7a>
 800dcc4:	b133      	cbz	r3, 800dcd4 <node_convert+0x194>
 800dcc6:	eddf 6a45 	vldr	s13, [pc, #276]	; 800dddc <node_convert+0x29c>
 800dcca:	eef0 7a66 	vmov.f32	s15, s13
 800dcce:	e7a4      	b.n	800dc1a <node_convert+0xda>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1f8      	bne.n	800dcc6 <node_convert+0x186>
 800dcd4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dcd8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800dddc <node_convert+0x29c>
 800dcdc:	2c00      	cmp	r4, #0
 800dcde:	f43f af7c 	beq.w	800dbda <node_convert+0x9a>
 800dce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dce6:	4414      	add	r4, r2
 800dce8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800dcec:	ecb5 7a01 	vldmia	r5!, {s14}
 800dcf0:	eef0 7a66 	vmov.f32	s15, s13
 800dcf4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800dcf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcfc:	ee17 3a90 	vmov	r3, s15
 800dd00:	f383 0308 	usat	r3, #8, r3
 800dd04:	f802 3b01 	strb.w	r3, [r2], #1
 800dd08:	42a2      	cmp	r2, r4
 800dd0a:	d1ef      	bne.n	800dcec <node_convert+0x1ac>
 800dd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d147      	bne.n	800dda4 <node_convert+0x264>
 800dd14:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dddc <node_convert+0x29c>
 800dd18:	2c00      	cmp	r4, #0
 800dd1a:	f43f af5e 	beq.w	800dbda <node_convert+0x9a>
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4414      	add	r4, r2
 800dd22:	f812 3b01 	ldrb.w	r3, [r2], #1
 800dd26:	1a1b      	subs	r3, r3, r0
 800dd28:	42a2      	cmp	r2, r4
 800dd2a:	ee07 3a90 	vmov	s15, r3
 800dd2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd36:	ece1 7a01 	vstmia	r1!, {s15}
 800dd3a:	d1f2      	bne.n	800dd22 <node_convert+0x1e2>
 800dd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd40:	7818      	ldrb	r0, [r3, #0]
 800dd42:	e7e9      	b.n	800dd18 <node_convert+0x1d8>
 800dd44:	2401      	movs	r4, #1
 800dd46:	e719      	b.n	800db7c <node_convert+0x3c>
 800dd48:	683a      	ldr	r2, [r7, #0]
 800dd4a:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 800dd4e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800dd52:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800dd56:	eba8 0303 	sub.w	r3, r8, r3
 800dd5a:	3340      	adds	r3, #64	; 0x40
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	d014      	beq.n	800dd8a <node_convert+0x24a>
 800dd60:	425b      	negs	r3, r3
 800dd62:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800dd66:	ee00 3a90 	vmov	s1, r3
 800dd6a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800dd6e:	f004 f84f 	bl	8011e10 <powf>
 800dd72:	b154      	cbz	r4, 800dd8a <node_convert+0x24a>
 800dd74:	4633      	mov	r3, r6
 800dd76:	462a      	mov	r2, r5
 800dd78:	ecf2 7a01 	vldmia	r2!, {s15}
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dd82:	42a3      	cmp	r3, r4
 800dd84:	ed42 7a01 	vstr	s15, [r2, #-4]
 800dd88:	d1f6      	bne.n	800dd78 <node_convert+0x238>
 800dd8a:	f1b8 0f08 	cmp.w	r8, #8
 800dd8e:	d00d      	beq.n	800ddac <node_convert+0x26c>
 800dd90:	4622      	mov	r2, r4
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	4628      	mov	r0, r5
 800dd96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9a:	f000 be3b 	b.w	800ea14 <arm_float_to_q15>
 800dd9e:	f001 f821 	bl	800ede4 <arm_q7_to_float>
 800dda2:	e773      	b.n	800dc8c <node_convert+0x14c>
 800dda4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800dddc <node_convert+0x29c>
 800dda8:	4630      	mov	r0, r6
 800ddaa:	e706      	b.n	800dbba <node_convert+0x7a>
 800ddac:	4622      	mov	r2, r4
 800ddae:	68b9      	ldr	r1, [r7, #8]
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb6:	f000 bee3 	b.w	800eb80 <arm_float_to_q7>
 800ddba:	684b      	ldr	r3, [r1, #4]
 800ddbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	ee06 3a90 	vmov	s13, r3
 800ddc6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ddca:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ddce:	e785      	b.n	800dcdc <node_convert+0x19c>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	deff      	udf	#255	; 0xff
 800ddd6:	bf00      	nop
 800ddd8:	3efffffc 	.word	0x3efffffc
 800dddc:	00000000 	.word	0x00000000

0800dde0 <ai_check_custom_types>:
 800dde0:	b082      	sub	sp, #8
 800dde2:	4b12      	ldr	r3, [pc, #72]	; (800de2c <ai_check_custom_types+0x4c>)
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	b118      	cbz	r0, 800ddf0 <ai_check_custom_types+0x10>
 800dde8:	7803      	ldrb	r3, [r0, #0]
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d002      	beq.n	800ddf4 <ai_check_custom_types+0x14>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	b002      	add	sp, #8
 800ddf2:	4770      	bx	lr
 800ddf4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d004      	beq.n	800de06 <ai_check_custom_types+0x26>
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	f080 0001 	eor.w	r0, r0, #1
 800de02:	b002      	add	sp, #8
 800de04:	4770      	bx	lr
 800de06:	7842      	ldrb	r2, [r0, #1]
 800de08:	3001      	adds	r0, #1
 800de0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d1f4      	bne.n	800ddfc <ai_check_custom_types+0x1c>
 800de12:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800de16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d1ee      	bne.n	800ddfc <ai_check_custom_types+0x1c>
 800de1e:	7842      	ldrb	r2, [r0, #1]
 800de20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de24:	429a      	cmp	r2, r3
 800de26:	d1e9      	bne.n	800ddfc <ai_check_custom_types+0x1c>
 800de28:	2000      	movs	r0, #0
 800de2a:	e7e8      	b.n	800ddfe <ai_check_custom_types+0x1e>
 800de2c:	84048403 	.word	0x84048403

0800de30 <ai_layers_init_all>:
 800de30:	2100      	movs	r1, #0
 800de32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800de34:	b13b      	cbz	r3, 800de46 <ai_layers_init_all+0x16>
 800de36:	691a      	ldr	r2, [r3, #16]
 800de38:	3101      	adds	r1, #1
 800de3a:	60d8      	str	r0, [r3, #12]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	4613      	mov	r3, r2
 800de40:	d001      	beq.n	800de46 <ai_layers_init_all+0x16>
 800de42:	2a00      	cmp	r2, #0
 800de44:	d1f6      	bne.n	800de34 <ai_layers_init_all+0x4>
 800de46:	4608      	mov	r0, r1
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop

0800de4c <ai_layers_post_init_all>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	2500      	movs	r5, #0
 800de50:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800de52:	b16c      	cbz	r4, 800de70 <ai_layers_post_init_all+0x24>
 800de54:	6863      	ldr	r3, [r4, #4]
 800de56:	07db      	lsls	r3, r3, #31
 800de58:	d504      	bpl.n	800de64 <ai_layers_post_init_all+0x18>
 800de5a:	6a23      	ldr	r3, [r4, #32]
 800de5c:	4620      	mov	r0, r4
 800de5e:	b10b      	cbz	r3, 800de64 <ai_layers_post_init_all+0x18>
 800de60:	3501      	adds	r5, #1
 800de62:	4798      	blx	r3
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	42a3      	cmp	r3, r4
 800de68:	461c      	mov	r4, r3
 800de6a:	d001      	beq.n	800de70 <ai_layers_post_init_all+0x24>
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1f0      	bne.n	800de52 <ai_layers_post_init_all+0x6>
 800de70:	4628      	mov	r0, r5
 800de72:	bd38      	pop	{r3, r4, r5, pc}

0800de74 <ai_layers_forward_all>:
 800de74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de78:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800de7c:	4604      	mov	r4, r0
 800de7e:	f1b8 0f00 	cmp.w	r8, #0
 800de82:	d02a      	beq.n	800deda <ai_layers_forward_all+0x66>
 800de84:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800de86:	6381      	str	r1, [r0, #56]	; 0x38
 800de88:	b319      	cbz	r1, 800ded2 <ai_layers_forward_all+0x5e>
 800de8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800de8c:	2001      	movs	r0, #1
 800de8e:	47c0      	blx	r8
 800de90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800de92:	b1f6      	cbz	r6, 800ded2 <ai_layers_forward_all+0x5e>
 800de94:	2700      	movs	r7, #0
 800de96:	4631      	mov	r1, r6
 800de98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800de9a:	2002      	movs	r0, #2
 800de9c:	47c0      	blx	r8
 800de9e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800dea0:	4628      	mov	r0, r5
 800dea2:	696b      	ldr	r3, [r5, #20]
 800dea4:	4798      	blx	r3
 800dea6:	692e      	ldr	r6, [r5, #16]
 800dea8:	2003      	movs	r0, #3
 800deaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800deac:	42b5      	cmp	r5, r6
 800deae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800deb0:	d007      	beq.n	800dec2 <ai_layers_forward_all+0x4e>
 800deb2:	47c0      	blx	r8
 800deb4:	3701      	adds	r7, #1
 800deb6:	63a6      	str	r6, [r4, #56]	; 0x38
 800deb8:	2e00      	cmp	r6, #0
 800deba:	d1ec      	bne.n	800de96 <ai_layers_forward_all+0x22>
 800debc:	4638      	mov	r0, r7
 800debe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec2:	2003      	movs	r0, #3
 800dec4:	3701      	adds	r7, #1
 800dec6:	47c0      	blx	r8
 800dec8:	2300      	movs	r3, #0
 800deca:	4638      	mov	r0, r7
 800decc:	63a3      	str	r3, [r4, #56]	; 0x38
 800dece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded2:	2700      	movs	r7, #0
 800ded4:	4638      	mov	r0, r7
 800ded6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deda:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800dedc:	6385      	str	r5, [r0, #56]	; 0x38
 800dede:	2d00      	cmp	r5, #0
 800dee0:	d0f7      	beq.n	800ded2 <ai_layers_forward_all+0x5e>
 800dee2:	4647      	mov	r7, r8
 800dee4:	696b      	ldr	r3, [r5, #20]
 800dee6:	4628      	mov	r0, r5
 800dee8:	4798      	blx	r3
 800deea:	462b      	mov	r3, r5
 800deec:	692d      	ldr	r5, [r5, #16]
 800deee:	429d      	cmp	r5, r3
 800def0:	d004      	beq.n	800defc <ai_layers_forward_all+0x88>
 800def2:	3701      	adds	r7, #1
 800def4:	63a5      	str	r5, [r4, #56]	; 0x38
 800def6:	2d00      	cmp	r5, #0
 800def8:	d1f4      	bne.n	800dee4 <ai_layers_forward_all+0x70>
 800defa:	e7df      	b.n	800debc <ai_layers_forward_all+0x48>
 800defc:	2300      	movs	r3, #0
 800defe:	3701      	adds	r7, #1
 800df00:	63a3      	str	r3, [r4, #56]	; 0x38
 800df02:	e7db      	b.n	800debc <ai_layers_forward_all+0x48>

0800df04 <forward_dense_integer_SSSA>:
 800df04:	6982      	ldr	r2, [r0, #24]
 800df06:	8813      	ldrh	r3, [r2, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 80c8 	beq.w	800e09e <forward_dense_integer_SSSA+0x19a>
 800df0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df12:	6852      	ldr	r2, [r2, #4]
 800df14:	b093      	sub	sp, #76	; 0x4c
 800df16:	6854      	ldr	r4, [r2, #4]
 800df18:	b104      	cbz	r4, 800df1c <forward_dense_integer_SSSA+0x18>
 800df1a:	6824      	ldr	r4, [r4, #0]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	f000 8161 	beq.w	800e1e4 <forward_dense_integer_SSSA+0x2e0>
 800df22:	6911      	ldr	r1, [r2, #16]
 800df24:	b101      	cbz	r1, 800df28 <forward_dense_integer_SSSA+0x24>
 800df26:	6809      	ldr	r1, [r1, #0]
 800df28:	2b02      	cmp	r3, #2
 800df2a:	f000 815e 	beq.w	800e1ea <forward_dense_integer_SSSA+0x2e6>
 800df2e:	69d5      	ldr	r5, [r2, #28]
 800df30:	2d00      	cmp	r5, #0
 800df32:	f000 8108 	beq.w	800e146 <forward_dense_integer_SSSA+0x242>
 800df36:	8b16      	ldrh	r6, [r2, #24]
 800df38:	6828      	ldr	r0, [r5, #0]
 800df3a:	2e01      	cmp	r6, #1
 800df3c:	f240 812d 	bls.w	800e19a <forward_dense_integer_SSSA+0x296>
 800df40:	686d      	ldr	r5, [r5, #4]
 800df42:	2b03      	cmp	r3, #3
 800df44:	f000 8154 	beq.w	800e1f0 <forward_dense_integer_SSSA+0x2ec>
 800df48:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800df4c:	69ab      	ldr	r3, [r5, #24]
 800df4e:	f1b9 0f00 	cmp.w	r9, #0
 800df52:	f000 810f 	beq.w	800e174 <forward_dense_integer_SSSA+0x270>
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	68e2      	ldr	r2, [r4, #12]
 800df5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df5c:	68cb      	ldr	r3, [r1, #12]
 800df5e:	6856      	ldr	r6, [r2, #4]
 800df60:	f8d9 9000 	ldr.w	r9, [r9]
 800df64:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800df68:	698d      	ldr	r5, [r1, #24]
 800df6a:	960f      	str	r6, [sp, #60]	; 0x3c
 800df6c:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	fb03 f302 	mul.w	r3, r3, r2
 800df76:	b2b2      	uxth	r2, r6
 800df78:	930c      	str	r3, [sp, #48]	; 0x30
 800df7a:	fa1f f38a 	uxth.w	r3, sl
 800df7e:	f1b9 0f00 	cmp.w	r9, #0
 800df82:	d003      	beq.n	800df8c <forward_dense_integer_SSSA+0x88>
 800df84:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800df88:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800df8c:	6827      	ldr	r7, [r4, #0]
 800df8e:	f8d0 b000 	ldr.w	fp, [r0]
 800df92:	680c      	ldr	r4, [r1, #0]
 800df94:	6981      	ldr	r1, [r0, #24]
 800df96:	2f00      	cmp	r7, #0
 800df98:	f000 8083 	beq.w	800e0a2 <forward_dense_integer_SSSA+0x19e>
 800df9c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800dfa0:	f1bc 0f00 	cmp.w	ip, #0
 800dfa4:	f000 80b1 	beq.w	800e10a <forward_dense_integer_SSSA+0x206>
 800dfa8:	8878      	ldrh	r0, [r7, #2]
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	f000 809c 	beq.w	800e0e8 <forward_dense_integer_SSSA+0x1e4>
 800dfb0:	f8dc 6000 	ldr.w	r6, [ip]
 800dfb4:	edd6 7a00 	vldr	s15, [r6]
 800dfb8:	2c00      	cmp	r4, #0
 800dfba:	f000 809a 	beq.w	800e0f2 <forward_dense_integer_SSSA+0x1ee>
 800dfbe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dfc2:	f1b8 0f00 	cmp.w	r8, #0
 800dfc6:	f000 80a9 	beq.w	800e11c <forward_dense_integer_SSSA+0x218>
 800dfca:	8860      	ldrh	r0, [r4, #2]
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d074      	beq.n	800e0ba <forward_dense_integer_SSSA+0x1b6>
 800dfd0:	68ae      	ldr	r6, [r5, #8]
 800dfd2:	f8de 5008 	ldr.w	r5, [lr, #8]
 800dfd6:	6889      	ldr	r1, [r1, #8]
 800dfd8:	950d      	str	r5, [sp, #52]	; 0x34
 800dfda:	f8d8 5000 	ldr.w	r5, [r8]
 800dfde:	ed95 0a00 	vldr	s0, [r5]
 800dfe2:	f1bc 0f00 	cmp.w	ip, #0
 800dfe6:	d076      	beq.n	800e0d6 <forward_dense_integer_SSSA+0x1d2>
 800dfe8:	8878      	ldrh	r0, [r7, #2]
 800dfea:	2800      	cmp	r0, #0
 800dfec:	f000 80a3 	beq.w	800e136 <forward_dense_integer_SSSA+0x232>
 800dff0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800dff4:	f990 7000 	ldrsb.w	r7, [r0]
 800dff8:	2c00      	cmp	r4, #0
 800dffa:	f000 80eb 	beq.w	800e1d4 <forward_dense_integer_SSSA+0x2d0>
 800dffe:	f1b8 0f00 	cmp.w	r8, #0
 800e002:	f000 809d 	beq.w	800e140 <forward_dense_integer_SSSA+0x23c>
 800e006:	8860      	ldrh	r0, [r4, #2]
 800e008:	2800      	cmp	r0, #0
 800e00a:	d167      	bne.n	800e0dc <forward_dense_integer_SSSA+0x1d8>
 800e00c:	900a      	str	r0, [sp, #40]	; 0x28
 800e00e:	910e      	str	r1, [sp, #56]	; 0x38
 800e010:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e014:	f1bb 0f00 	cmp.w	fp, #0
 800e018:	f000 80de 	beq.w	800e1d8 <forward_dense_integer_SSSA+0x2d4>
 800e01c:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e020:	2800      	cmp	r0, #0
 800e022:	f000 80d9 	beq.w	800e1d8 <forward_dense_integer_SSSA+0x2d4>
 800e026:	6800      	ldr	r0, [r0, #0]
 800e028:	2400      	movs	r4, #0
 800e02a:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800e02e:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800e032:	9411      	str	r4, [sp, #68]	; 0x44
 800e034:	ed90 7a00 	vldr	s14, [r0]
 800e038:	4640      	mov	r0, r8
 800e03a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e03e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e042:	f000 f8db 	bl	800e1fc <align_factor>
 800e046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e048:	9011      	str	r0, [sp, #68]	; 0x44
 800e04a:	b32b      	cbz	r3, 800e098 <forward_dense_integer_SSSA+0x194>
 800e04c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e050:	4699      	mov	r9, r3
 800e052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e054:	fa1f fa8a 	uxth.w	sl, sl
 800e058:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e05a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800e05e:	970d      	str	r7, [sp, #52]	; 0x34
 800e060:	461f      	mov	r7, r3
 800e062:	9a08      	ldr	r2, [sp, #32]
 800e064:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e068:	3401      	adds	r4, #1
 800e06a:	4628      	mov	r0, r5
 800e06c:	9605      	str	r6, [sp, #20]
 800e06e:	9306      	str	r3, [sp, #24]
 800e070:	4456      	add	r6, sl
 800e072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e074:	445d      	add	r5, fp
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e07a:	9303      	str	r3, [sp, #12]
 800e07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e07e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800e082:	ab11      	add	r3, sp, #68	; 0x44
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	463b      	mov	r3, r7
 800e088:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800e08c:	f000 f908 	bl	800e2a0 <st_sssa8_fully_connected>
 800e090:	454c      	cmp	r4, r9
 800e092:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e096:	d1e6      	bne.n	800e066 <forward_dense_integer_SSSA+0x162>
 800e098:	b013      	add	sp, #76	; 0x4c
 800e09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	deff      	udf	#255	; 0xff
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	d056      	beq.n	800e154 <forward_dense_integer_SSSA+0x250>
 800e0a6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e0aa:	f1b8 0f00 	cmp.w	r8, #0
 800e0ae:	d05d      	beq.n	800e16c <forward_dense_integer_SSSA+0x268>
 800e0b0:	8860      	ldrh	r0, [r4, #2]
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d173      	bne.n	800e19e <forward_dense_integer_SSSA+0x29a>
 800e0b6:	eddf 7a50 	vldr	s15, [pc, #320]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e0ba:	68ae      	ldr	r6, [r5, #8]
 800e0bc:	f8de 5008 	ldr.w	r5, [lr, #8]
 800e0c0:	6889      	ldr	r1, [r1, #8]
 800e0c2:	950d      	str	r5, [sp, #52]	; 0x34
 800e0c4:	2f00      	cmp	r7, #0
 800e0c6:	d041      	beq.n	800e14c <forward_dense_integer_SSSA+0x248>
 800e0c8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e0cc:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e0d0:	f1bc 0f00 	cmp.w	ip, #0
 800e0d4:	d188      	bne.n	800dfe8 <forward_dense_integer_SSSA+0xe4>
 800e0d6:	4667      	mov	r7, ip
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d097      	beq.n	800e00c <forward_dense_integer_SSSA+0x108>
 800e0dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0e0:	f990 0000 	ldrsb.w	r0, [r0]
 800e0e4:	900a      	str	r0, [sp, #40]	; 0x28
 800e0e6:	e792      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e0e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	f47f af66 	bne.w	800dfbe <forward_dense_integer_SSSA+0xba>
 800e0f2:	68ae      	ldr	r6, [r5, #8]
 800e0f4:	f8de 5008 	ldr.w	r5, [lr, #8]
 800e0f8:	6889      	ldr	r1, [r1, #8]
 800e0fa:	950d      	str	r5, [sp, #52]	; 0x34
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d15a      	bne.n	800e1b6 <forward_dense_integer_SSSA+0x2b2>
 800e100:	4607      	mov	r7, r0
 800e102:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e106:	900a      	str	r0, [sp, #40]	; 0x28
 800e108:	e781      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e10a:	b31c      	cbz	r4, 800e154 <forward_dense_integer_SSSA+0x250>
 800e10c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e110:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e114:	f1b8 0f00 	cmp.w	r8, #0
 800e118:	f47f af57 	bne.w	800dfca <forward_dense_integer_SSSA+0xc6>
 800e11c:	f8de 0008 	ldr.w	r0, [lr, #8]
 800e120:	68ae      	ldr	r6, [r5, #8]
 800e122:	6889      	ldr	r1, [r1, #8]
 800e124:	900d      	str	r0, [sp, #52]	; 0x34
 800e126:	f1bc 0f00 	cmp.w	ip, #0
 800e12a:	d00e      	beq.n	800e14a <forward_dense_integer_SSSA+0x246>
 800e12c:	8878      	ldrh	r0, [r7, #2]
 800e12e:	2800      	cmp	r0, #0
 800e130:	d149      	bne.n	800e1c6 <forward_dense_integer_SSSA+0x2c2>
 800e132:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e136:	2700      	movs	r7, #0
 800e138:	f1b8 0f00 	cmp.w	r8, #0
 800e13c:	f47f af63 	bne.w	800e006 <forward_dense_integer_SSSA+0x102>
 800e140:	2000      	movs	r0, #0
 800e142:	900a      	str	r0, [sp, #40]	; 0x28
 800e144:	e763      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e146:	4628      	mov	r0, r5
 800e148:	e6fb      	b.n	800df42 <forward_dense_integer_SSSA+0x3e>
 800e14a:	4667      	mov	r7, ip
 800e14c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e150:	970a      	str	r7, [sp, #40]	; 0x28
 800e152:	e75c      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e154:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e158:	4627      	mov	r7, r4
 800e15a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800e15e:	eeb0 0a67 	vmov.f32	s0, s15
 800e162:	68ae      	ldr	r6, [r5, #8]
 800e164:	6889      	ldr	r1, [r1, #8]
 800e166:	900d      	str	r0, [sp, #52]	; 0x34
 800e168:	970a      	str	r7, [sp, #40]	; 0x28
 800e16a:	e750      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e16c:	eddf 7a22 	vldr	s15, [pc, #136]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e170:	4647      	mov	r7, r8
 800e172:	e7f2      	b.n	800e15a <forward_dense_integer_SSSA+0x256>
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	68e2      	ldr	r2, [r4, #12]
 800e178:	930b      	str	r3, [sp, #44]	; 0x2c
 800e17a:	68cb      	ldr	r3, [r1, #12]
 800e17c:	6856      	ldr	r6, [r2, #4]
 800e17e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800e182:	698d      	ldr	r5, [r1, #24]
 800e184:	960f      	str	r6, [sp, #60]	; 0x3c
 800e186:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	fb03 f302 	mul.w	r3, r3, r2
 800e190:	b2b2      	uxth	r2, r6
 800e192:	930c      	str	r3, [sp, #48]	; 0x30
 800e194:	fa1f f38a 	uxth.w	r3, sl
 800e198:	e6f8      	b.n	800df8c <forward_dense_integer_SSSA+0x88>
 800e19a:	2500      	movs	r5, #0
 800e19c:	e6d1      	b.n	800df42 <forward_dense_integer_SSSA+0x3e>
 800e19e:	f8de 0008 	ldr.w	r0, [lr, #8]
 800e1a2:	68ae      	ldr	r6, [r5, #8]
 800e1a4:	900d      	str	r0, [sp, #52]	; 0x34
 800e1a6:	f8d8 0000 	ldr.w	r0, [r8]
 800e1aa:	6889      	ldr	r1, [r1, #8]
 800e1ac:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e1b0:	ed90 0a00 	vldr	s0, [r0]
 800e1b4:	e792      	b.n	800e0dc <forward_dense_integer_SSSA+0x1d8>
 800e1b6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800e1ba:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e1be:	f990 7000 	ldrsb.w	r7, [r0]
 800e1c2:	940a      	str	r4, [sp, #40]	; 0x28
 800e1c4:	e723      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e1c6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800e1ca:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800e1f8 <forward_dense_integer_SSSA+0x2f4>
 800e1ce:	f990 7000 	ldrsb.w	r7, [r0]
 800e1d2:	e7b5      	b.n	800e140 <forward_dense_integer_SSSA+0x23c>
 800e1d4:	940a      	str	r4, [sp, #40]	; 0x28
 800e1d6:	e71a      	b.n	800e00e <forward_dense_integer_SSSA+0x10a>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800e1de:	9311      	str	r3, [sp, #68]	; 0x44
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	deff      	udf	#255	; 0xff
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	deff      	udf	#255	; 0xff
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	deff      	udf	#255	; 0xff
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	deff      	udf	#255	; 0xff
 800e1f6:	bf00      	nop
 800e1f8:	00000000 	.word	0x00000000

0800e1fc <align_factor>:
 800e1fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e200:	4602      	mov	r2, r0
 800e202:	b508      	push	{r3, lr}
 800e204:	eeb4 0a67 	vcmp.f32	s0, s15
 800e208:	2300      	movs	r3, #0
 800e20a:	8003      	strh	r3, [r0, #0]
 800e20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e210:	d524      	bpl.n	800e25c <align_factor+0x60>
 800e212:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21a:	dd1f      	ble.n	800e25c <align_factor+0x60>
 800e21c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e220:	2301      	movs	r3, #1
 800e222:	e005      	b.n	800e230 <align_factor+0x34>
 800e224:	8013      	strh	r3, [r2, #0]
 800e226:	b28b      	uxth	r3, r1
 800e228:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e22c:	2b21      	cmp	r3, #33	; 0x21
 800e22e:	d02b      	beq.n	800e288 <align_factor+0x8c>
 800e230:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e234:	1c59      	adds	r1, r3, #1
 800e236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23a:	d4f3      	bmi.n	800e224 <align_factor+0x28>
 800e23c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800e29c <align_factor+0xa0>
 800e240:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e244:	ee17 0a90 	vmov	r0, s15
 800e248:	f7f2 fcf6 	bl	8000c38 <__aeabi_f2lz>
 800e24c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800e250:	d003      	beq.n	800e25a <align_factor+0x5e>
 800e252:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e256:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800e25a:	bd08      	pop	{r3, pc}
 800e25c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e268:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800e26c:	e005      	b.n	800e27a <align_factor+0x7e>
 800e26e:	8013      	strh	r3, [r2, #0]
 800e270:	b28b      	uxth	r3, r1
 800e272:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e276:	4283      	cmp	r3, r0
 800e278:	d00a      	beq.n	800e290 <align_factor+0x94>
 800e27a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e27e:	1e59      	subs	r1, r3, #1
 800e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e284:	dcf3      	bgt.n	800e26e <align_factor+0x72>
 800e286:	e7d9      	b.n	800e23c <align_factor+0x40>
 800e288:	2300      	movs	r3, #0
 800e28a:	4618      	mov	r0, r3
 800e28c:	8013      	strh	r3, [r2, #0]
 800e28e:	bd08      	pop	{r3, pc}
 800e290:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800e294:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e298:	8013      	strh	r3, [r2, #0]
 800e29a:	e7cf      	b.n	800e23c <align_factor+0x40>
 800e29c:	4f000000 	.word	0x4f000000

0800e2a0 <st_sssa8_fully_connected>:
 800e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a4:	b097      	sub	sp, #92	; 0x5c
 800e2a6:	460d      	mov	r5, r1
 800e2a8:	4683      	mov	fp, r0
 800e2aa:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e2ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2ae:	6823      	ldr	r3, [r4, #0]
 800e2b0:	9203      	str	r2, [sp, #12]
 800e2b2:	9307      	str	r3, [sp, #28]
 800e2b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2b6:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800e2ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e2be:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800e2c2:	1e4a      	subs	r2, r1, #1
 800e2c4:	9104      	str	r1, [sp, #16]
 800e2c6:	920d      	str	r2, [sp, #52]	; 0x34
 800e2c8:	b292      	uxth	r2, r2
 800e2ca:	2a14      	cmp	r2, #20
 800e2cc:	f200 81b3 	bhi.w	800e636 <st_sssa8_fully_connected+0x396>
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	408b      	lsls	r3, r1
 800e2d4:	408a      	lsls	r2, r1
 800e2d6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e2da:	9308      	str	r3, [sp, #32]
 800e2dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f000 81ae 	beq.w	800e640 <st_sssa8_fully_connected+0x3a0>
 800e2e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e2e6:	b2b3      	uxth	r3, r6
 800e2e8:	9600      	str	r6, [sp, #0]
 800e2ea:	4658      	mov	r0, fp
 800e2ec:	0851      	lsrs	r1, r2, #1
 800e2ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e2f2:	9e03      	ldr	r6, [sp, #12]
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	9115      	str	r1, [sp, #84]	; 0x54
 800e2f8:	4632      	mov	r2, r6
 800e2fa:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e2fc:	f000 fb52 	bl	800e9a4 <st_int8_reordered_no_shift_zero>
 800e300:	4621      	mov	r1, r4
 800e302:	2c00      	cmp	r4, #0
 800e304:	f000 8145 	beq.w	800e592 <st_sssa8_fully_connected+0x2f2>
 800e308:	4634      	mov	r4, r6
 800e30a:	f1a6 0310 	sub.w	r3, r6, #16
 800e30e:	9e04      	ldr	r6, [sp, #16]
 800e310:	1e4a      	subs	r2, r1, #1
 800e312:	2001      	movs	r0, #1
 800e314:	091b      	lsrs	r3, r3, #4
 800e316:	1eb1      	subs	r1, r6, #2
 800e318:	b292      	uxth	r2, r2
 800e31a:	3301      	adds	r3, #1
 800e31c:	fa00 f101 	lsl.w	r1, r0, r1
 800e320:	9112      	str	r1, [sp, #72]	; 0x48
 800e322:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e324:	3110      	adds	r1, #16
 800e326:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e32a:	920e      	str	r2, [sp, #56]	; 0x38
 800e32c:	1ee2      	subs	r2, r4, #3
 800e32e:	920f      	str	r2, [sp, #60]	; 0x3c
 800e330:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e332:	3208      	adds	r2, #8
 800e334:	9205      	str	r2, [sp, #20]
 800e336:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e338:	3202      	adds	r2, #2
 800e33a:	9206      	str	r2, [sp, #24]
 800e33c:	011a      	lsls	r2, r3, #4
 800e33e:	9209      	str	r2, [sp, #36]	; 0x24
 800e340:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e342:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800e346:	9310      	str	r3, [sp, #64]	; 0x40
 800e348:	1f23      	subs	r3, r4, #4
 800e34a:	9311      	str	r3, [sp, #68]	; 0x44
 800e34c:	1b83      	subs	r3, r0, r6
 800e34e:	9314      	str	r3, [sp, #80]	; 0x50
 800e350:	9a03      	ldr	r2, [sp, #12]
 800e352:	9b05      	ldr	r3, [sp, #20]
 800e354:	2a0f      	cmp	r2, #15
 800e356:	eb05 0b02 	add.w	fp, r5, r2
 800e35a:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800e35e:	f340 8260 	ble.w	800e822 <st_sssa8_fully_connected+0x582>
 800e362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e364:	465c      	mov	r4, fp
 800e366:	18ae      	adds	r6, r5, r2
 800e368:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e36a:	682f      	ldr	r7, [r5, #0]
 800e36c:	f8d4 a000 	ldr.w	sl, [r4]
 800e370:	ea4f 2037 	mov.w	r0, r7, ror #8
 800e374:	f8d2 9000 	ldr.w	r9, [r2]
 800e378:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800e37c:	fa2f f080 	sxtb16	r0, r0
 800e380:	fa2f fc8e 	sxtb16	ip, lr
 800e384:	fa2f f787 	sxtb16	r7, r7
 800e388:	fa2f fe8a 	sxtb16	lr, sl
 800e38c:	fb29 1107 	smlad	r1, r9, r7, r1
 800e390:	fb29 390e 	smlad	r9, r9, lr, r3
 800e394:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800e398:	fb28 1100 	smlad	r1, r8, r0, r1
 800e39c:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800e3a0:	6868      	ldr	r0, [r5, #4]
 800e3a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e3a6:	ea4f 2330 	mov.w	r3, r0, ror #8
 800e3aa:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800e3ae:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800e3b2:	fa2f f383 	sxtb16	r3, r3
 800e3b6:	fa2f f78a 	sxtb16	r7, sl
 800e3ba:	fa2f f080 	sxtb16	r0, r0
 800e3be:	fa2f fa89 	sxtb16	sl, r9
 800e3c2:	fb28 1000 	smlad	r0, r8, r0, r1
 800e3c6:	fb28 e80a 	smlad	r8, r8, sl, lr
 800e3ca:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800e3ce:	fb2c 0003 	smlad	r0, ip, r3, r0
 800e3d2:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800e3d6:	68ab      	ldr	r3, [r5, #8]
 800e3d8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e3dc:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e3e0:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e3e4:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800e3e8:	fa2f f181 	sxtb16	r1, r1
 800e3ec:	fa2f f98e 	sxtb16	r9, lr
 800e3f0:	fa2f f383 	sxtb16	r3, r3
 800e3f4:	fa2f fe88 	sxtb16	lr, r8
 800e3f8:	fb2c 0303 	smlad	r3, ip, r3, r0
 800e3fc:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800e400:	6957      	ldr	r7, [r2, #20]
 800e402:	fb27 3301 	smlad	r3, r7, r1, r3
 800e406:	fb27 ce09 	smlad	lr, r7, r9, ip
 800e40a:	68e8      	ldr	r0, [r5, #12]
 800e40c:	3410      	adds	r4, #16
 800e40e:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800e412:	3510      	adds	r5, #16
 800e414:	ea4f 2130 	mov.w	r1, r0, ror #8
 800e418:	6997      	ldr	r7, [r2, #24]
 800e41a:	fa2f f881 	sxtb16	r8, r1
 800e41e:	fa2f f180 	sxtb16	r1, r0
 800e422:	ea4f 203c 	mov.w	r0, ip, ror #8
 800e426:	fa2f fc8c 	sxtb16	ip, ip
 800e42a:	fa2f f080 	sxtb16	r0, r0
 800e42e:	fb27 3101 	smlad	r1, r7, r1, r3
 800e432:	fb27 e70c 	smlad	r7, r7, ip, lr
 800e436:	69d3      	ldr	r3, [r2, #28]
 800e438:	3220      	adds	r2, #32
 800e43a:	fb23 1108 	smlad	r1, r3, r8, r1
 800e43e:	fb23 7300 	smlad	r3, r3, r0, r7
 800e442:	42b5      	cmp	r5, r6
 800e444:	d191      	bne.n	800e36a <st_sssa8_fully_connected+0xca>
 800e446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e448:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e44c:	4493      	add	fp, r2
 800e44e:	4691      	mov	r9, r2
 800e450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e452:	4591      	cmp	r9, r2
 800e454:	f280 81e3 	bge.w	800e81e <st_sssa8_fully_connected+0x57e>
 800e458:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e45a:	4657      	mov	r7, sl
 800e45c:	46d8      	mov	r8, fp
 800e45e:	eba2 0209 	sub.w	r2, r2, r9
 800e462:	0892      	lsrs	r2, r2, #2
 800e464:	920c      	str	r2, [sp, #48]	; 0x30
 800e466:	3201      	adds	r2, #1
 800e468:	0090      	lsls	r0, r2, #2
 800e46a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e46c:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800e470:	900a      	str	r0, [sp, #40]	; 0x28
 800e472:	f856 eb04 	ldr.w	lr, [r6], #4
 800e476:	f858 0b04 	ldr.w	r0, [r8], #4
 800e47a:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	ea4f 2530 	mov.w	r5, r0, ror #8
 800e484:	fa2f fc8c 	sxtb16	ip, ip
 800e488:	fa2f fe8e 	sxtb16	lr, lr
 800e48c:	fa2f f585 	sxtb16	r5, r5
 800e490:	fa2f f080 	sxtb16	r0, r0
 800e494:	fb22 110e 	smlad	r1, r2, lr, r1
 800e498:	fb22 3300 	smlad	r3, r2, r0, r3
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	3708      	adds	r7, #8
 800e4a0:	fb22 110c 	smlad	r1, r2, ip, r1
 800e4a4:	fb22 3305 	smlad	r3, r2, r5, r3
 800e4a8:	42a6      	cmp	r6, r4
 800e4aa:	d1e2      	bne.n	800e472 <st_sssa8_fully_connected+0x1d2>
 800e4ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4ae:	f109 0904 	add.w	r9, r9, #4
 800e4b2:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800e4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4b8:	4493      	add	fp, r2
 800e4ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4bc:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800e4c0:	9d03      	ldr	r5, [sp, #12]
 800e4c2:	454d      	cmp	r5, r9
 800e4c4:	dd37      	ble.n	800e536 <st_sssa8_fully_connected+0x296>
 800e4c6:	f9ba 2000 	ldrsh.w	r2, [sl]
 800e4ca:	f994 0000 	ldrsb.w	r0, [r4]
 800e4ce:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e4d2:	f99b 0000 	ldrsb.w	r0, [fp]
 800e4d6:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e4da:	f109 0201 	add.w	r2, r9, #1
 800e4de:	42aa      	cmp	r2, r5
 800e4e0:	da25      	bge.n	800e52e <st_sssa8_fully_connected+0x28e>
 800e4e2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800e4e6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e4ea:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e4ee:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800e4f2:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e4f6:	f109 0202 	add.w	r2, r9, #2
 800e4fa:	42aa      	cmp	r2, r5
 800e4fc:	da17      	bge.n	800e52e <st_sssa8_fully_connected+0x28e>
 800e4fe:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800e502:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e506:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e50a:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800e50e:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e512:	f109 0203 	add.w	r2, r9, #3
 800e516:	4295      	cmp	r5, r2
 800e518:	dd09      	ble.n	800e52e <st_sssa8_fully_connected+0x28e>
 800e51a:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800e51e:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800e522:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e526:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800e52a:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e52e:	9a03      	ldr	r2, [sp, #12]
 800e530:	eba2 0909 	sub.w	r9, r2, r9
 800e534:	444c      	add	r4, r9
 800e536:	9a04      	ldr	r2, [sp, #16]
 800e538:	2a15      	cmp	r2, #21
 800e53a:	f340 8140 	ble.w	800e7be <st_sssa8_fully_connected+0x51e>
 800e53e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e540:	9a07      	ldr	r2, [sp, #28]
 800e542:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e544:	fb51 0102 	smmla	r1, r1, r2, r0
 800e548:	fb53 0302 	smmla	r3, r3, r2, r0
 800e54c:	4129      	asrs	r1, r5
 800e54e:	9a08      	ldr	r2, [sp, #32]
 800e550:	4411      	add	r1, r2
 800e552:	f301 0107 	ssat	r1, #8, r1
 800e556:	9806      	ldr	r0, [sp, #24]
 800e558:	412b      	asrs	r3, r5
 800e55a:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e55e:	4413      	add	r3, r2
 800e560:	f303 0307 	ssat	r3, #8, r3
 800e564:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e568:	9a03      	ldr	r2, [sp, #12]
 800e56a:	9b05      	ldr	r3, [sp, #20]
 800e56c:	18a5      	adds	r5, r4, r2
 800e56e:	9a06      	ldr	r2, [sp, #24]
 800e570:	3308      	adds	r3, #8
 800e572:	3202      	adds	r2, #2
 800e574:	9305      	str	r3, [sp, #20]
 800e576:	9206      	str	r2, [sp, #24]
 800e578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e57a:	4293      	cmp	r3, r2
 800e57c:	f47f aee8 	bne.w	800e350 <st_sssa8_fully_connected+0xb0>
 800e580:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e584:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e588:	9225      	str	r2, [sp, #148]	; 0x94
 800e58a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e58c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e590:	9324      	str	r3, [sp, #144]	; 0x90
 800e592:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e594:	07db      	lsls	r3, r3, #31
 800e596:	d54a      	bpl.n	800e62e <st_sssa8_fully_connected+0x38e>
 800e598:	9a03      	ldr	r2, [sp, #12]
 800e59a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e59c:	0897      	lsrs	r7, r2, #2
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f000 8175 	beq.w	800e88e <st_sssa8_fully_connected+0x5ee>
 800e5a4:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800e5a8:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e5aa:	f855 2b04 	ldr.w	r2, [r5], #4
 800e5ae:	6801      	ldr	r1, [r0, #0]
 800e5b0:	fa2f f482 	sxtb16	r4, r2
 800e5b4:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e5b8:	fa2f f282 	sxtb16	r2, r2
 800e5bc:	fb21 3304 	smlad	r3, r1, r4, r3
 800e5c0:	6841      	ldr	r1, [r0, #4]
 800e5c2:	3008      	adds	r0, #8
 800e5c4:	fb21 3302 	smlad	r3, r1, r2, r3
 800e5c8:	42b5      	cmp	r5, r6
 800e5ca:	d1ee      	bne.n	800e5aa <st_sssa8_fully_connected+0x30a>
 800e5cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e5ce:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800e5d2:	9226      	str	r2, [sp, #152]	; 0x98
 800e5d4:	9a03      	ldr	r2, [sp, #12]
 800e5d6:	f012 0203 	ands.w	r2, r2, #3
 800e5da:	d016      	beq.n	800e60a <st_sssa8_fully_connected+0x36a>
 800e5dc:	3a01      	subs	r2, #1
 800e5de:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e5e0:	f996 1000 	ldrsb.w	r1, [r6]
 800e5e4:	8800      	ldrh	r0, [r0, #0]
 800e5e6:	b292      	uxth	r2, r2
 800e5e8:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e5ec:	b16a      	cbz	r2, 800e60a <st_sssa8_fully_connected+0x36a>
 800e5ee:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e5f0:	2a01      	cmp	r2, #1
 800e5f2:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800e5f6:	8840      	ldrh	r0, [r0, #2]
 800e5f8:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e5fc:	d005      	beq.n	800e60a <st_sssa8_fully_connected+0x36a>
 800e5fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e600:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800e604:	8889      	ldrh	r1, [r1, #4]
 800e606:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e60a:	9a04      	ldr	r2, [sp, #16]
 800e60c:	2a15      	cmp	r2, #21
 800e60e:	f340 811c 	ble.w	800e84a <st_sssa8_fully_connected+0x5aa>
 800e612:	1e91      	subs	r1, r2, #2
 800e614:	2201      	movs	r2, #1
 800e616:	408a      	lsls	r2, r1
 800e618:	9907      	ldr	r1, [sp, #28]
 800e61a:	fb53 2301 	smmla	r3, r3, r1, r2
 800e61e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e620:	4113      	asrs	r3, r2
 800e622:	9a08      	ldr	r2, [sp, #32]
 800e624:	4413      	add	r3, r2
 800e626:	f303 0307 	ssat	r3, #8, r3
 800e62a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e62c:	7013      	strb	r3, [r2, #0]
 800e62e:	2000      	movs	r0, #0
 800e630:	b017      	add	sp, #92	; 0x5c
 800e632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e636:	9308      	str	r3, [sp, #32]
 800e638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f47f ae52 	bne.w	800e2e4 <st_sssa8_fully_connected+0x44>
 800e640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e642:	4270      	negs	r0, r6
 800e644:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d0f0      	beq.n	800e62e <st_sssa8_fully_connected+0x38e>
 800e64c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e64e:	3301      	adds	r3, #1
 800e650:	9903      	ldr	r1, [sp, #12]
 800e652:	b236      	sxth	r6, r6
 800e654:	18d3      	adds	r3, r2, r3
 800e656:	9c04      	ldr	r4, [sp, #16]
 800e658:	f1a1 0810 	sub.w	r8, r1, #16
 800e65c:	f102 0e01 	add.w	lr, r2, #1
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	2201      	movs	r2, #1
 800e664:	f028 080f 	bic.w	r8, r8, #15
 800e668:	1ea3      	subs	r3, r4, #2
 800e66a:	468c      	mov	ip, r1
 800e66c:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800e670:	fa02 f303 	lsl.w	r3, r2, r3
 800e674:	f108 0810 	add.w	r8, r8, #16
 800e678:	f1bc 0f0f 	cmp.w	ip, #15
 800e67c:	f8cd b00c 	str.w	fp, [sp, #12]
 800e680:	9309      	str	r3, [sp, #36]	; 0x24
 800e682:	eb0b 0308 	add.w	r3, fp, r8
 800e686:	9306      	str	r3, [sp, #24]
 800e688:	eba2 0304 	sub.w	r3, r2, r4
 800e68c:	930a      	str	r3, [sp, #40]	; 0x28
 800e68e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e692:	dd7e      	ble.n	800e792 <st_sssa8_fully_connected+0x4f2>
 800e694:	eb05 0708 	add.w	r7, r5, r8
 800e698:	462a      	mov	r2, r5
 800e69a:	9d03      	ldr	r5, [sp, #12]
 800e69c:	6811      	ldr	r1, [r2, #0]
 800e69e:	682c      	ldr	r4, [r5, #0]
 800e6a0:	fa2f fb81 	sxtb16	fp, r1
 800e6a4:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800e6a8:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e6ac:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e6b0:	fa2f f181 	sxtb16	r1, r1
 800e6b4:	fa20 f484 	sxtab16	r4, r0, r4
 800e6b8:	fb24 340b 	smlad	r4, r4, fp, r3
 800e6bc:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800e6c0:	6851      	ldr	r1, [r2, #4]
 800e6c2:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800e6c6:	fa2f f481 	sxtb16	r4, r1
 800e6ca:	ea4f 233a 	mov.w	r3, sl, ror #8
 800e6ce:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e6d2:	fa20 f383 	sxtab16	r3, r0, r3
 800e6d6:	fa2f f181 	sxtb16	r1, r1
 800e6da:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e6de:	fb2a ba04 	smlad	sl, sl, r4, fp
 800e6e2:	fb23 a401 	smlad	r4, r3, r1, sl
 800e6e6:	6891      	ldr	r1, [r2, #8]
 800e6e8:	68ab      	ldr	r3, [r5, #8]
 800e6ea:	fa2f fb81 	sxtb16	fp, r1
 800e6ee:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800e6f2:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e6f6:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e6fa:	fa2f f181 	sxtb16	r1, r1
 800e6fe:	fa20 f383 	sxtab16	r3, r0, r3
 800e702:	fb23 430b 	smlad	r3, r3, fp, r4
 800e706:	fb2a 3301 	smlad	r3, sl, r1, r3
 800e70a:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800e70e:	3510      	adds	r5, #16
 800e710:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800e714:	3210      	adds	r2, #16
 800e716:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800e71a:	ea4f 2431 	mov.w	r4, r1, ror #8
 800e71e:	fa2f fa8a 	sxtb16	sl, sl
 800e722:	fa2f fb8b 	sxtb16	fp, fp
 800e726:	fa20 f181 	sxtab16	r1, r0, r1
 800e72a:	fa20 f484 	sxtab16	r4, r0, r4
 800e72e:	fb21 330a 	smlad	r3, r1, sl, r3
 800e732:	fb24 330b 	smlad	r3, r4, fp, r3
 800e736:	4297      	cmp	r7, r2
 800e738:	d1b0      	bne.n	800e69c <st_sssa8_fully_connected+0x3fc>
 800e73a:	4645      	mov	r5, r8
 800e73c:	9f06      	ldr	r7, [sp, #24]
 800e73e:	45ac      	cmp	ip, r5
 800e740:	dd2c      	ble.n	800e79c <st_sssa8_fully_connected+0x4fc>
 800e742:	ebac 0505 	sub.w	r5, ip, r5
 800e746:	4415      	add	r5, r2
 800e748:	4611      	mov	r1, r2
 800e74a:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800e74e:	3201      	adds	r2, #1
 800e750:	7809      	ldrb	r1, [r1, #0]
 800e752:	1ba4      	subs	r4, r4, r6
 800e754:	42aa      	cmp	r2, r5
 800e756:	b249      	sxtb	r1, r1
 800e758:	fb14 3301 	smlabb	r3, r4, r1, r3
 800e75c:	d1f4      	bne.n	800e748 <st_sssa8_fully_connected+0x4a8>
 800e75e:	9a04      	ldr	r2, [sp, #16]
 800e760:	2a15      	cmp	r2, #21
 800e762:	dd1f      	ble.n	800e7a4 <st_sssa8_fully_connected+0x504>
 800e764:	9a07      	ldr	r2, [sp, #28]
 800e766:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e768:	fb53 1302 	smmla	r3, r3, r2, r1
 800e76c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e76e:	4113      	asrs	r3, r2
 800e770:	9a08      	ldr	r2, [sp, #32]
 800e772:	4413      	add	r3, r2
 800e774:	f303 0307 	ssat	r3, #8, r3
 800e778:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e77c:	f10e 0e01 	add.w	lr, lr, #1
 800e780:	9b05      	ldr	r3, [sp, #20]
 800e782:	459e      	cmp	lr, r3
 800e784:	f43f af53 	beq.w	800e62e <st_sssa8_fully_connected+0x38e>
 800e788:	f1bc 0f0f 	cmp.w	ip, #15
 800e78c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e790:	dc80      	bgt.n	800e694 <st_sssa8_fully_connected+0x3f4>
 800e792:	462a      	mov	r2, r5
 800e794:	2500      	movs	r5, #0
 800e796:	9f03      	ldr	r7, [sp, #12]
 800e798:	45ac      	cmp	ip, r5
 800e79a:	dcd2      	bgt.n	800e742 <st_sssa8_fully_connected+0x4a2>
 800e79c:	4615      	mov	r5, r2
 800e79e:	9a04      	ldr	r2, [sp, #16]
 800e7a0:	2a15      	cmp	r2, #21
 800e7a2:	dcdf      	bgt.n	800e764 <st_sssa8_fully_connected+0x4c4>
 800e7a4:	2a00      	cmp	r2, #0
 800e7a6:	dd42      	ble.n	800e82e <st_sssa8_fully_connected+0x58e>
 800e7a8:	005b      	lsls	r3, r3, #1
 800e7aa:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800e7ae:	fb53 4301 	smmla	r3, r3, r1, r4
 800e7b2:	4113      	asrs	r3, r2
 800e7b4:	f303 0307 	ssat	r3, #8, r3
 800e7b8:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e7bc:	e7de      	b.n	800e77c <st_sssa8_fully_connected+0x4dc>
 800e7be:	2a00      	cmp	r2, #0
 800e7c0:	dd13      	ble.n	800e7ea <st_sssa8_fully_connected+0x54a>
 800e7c2:	0049      	lsls	r1, r1, #1
 800e7c4:	005b      	lsls	r3, r3, #1
 800e7c6:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800e7ca:	fb51 5100 	smmla	r1, r1, r0, r5
 800e7ce:	fb53 5300 	smmla	r3, r3, r0, r5
 800e7d2:	4111      	asrs	r1, r2
 800e7d4:	f301 0107 	ssat	r1, #8, r1
 800e7d8:	9806      	ldr	r0, [sp, #24]
 800e7da:	4113      	asrs	r3, r2
 800e7dc:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e7e0:	f303 0307 	ssat	r3, #8, r3
 800e7e4:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e7e8:	e6be      	b.n	800e568 <st_sssa8_fully_connected+0x2c8>
 800e7ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e7ec:	fa01 f200 	lsl.w	r2, r1, r0
 800e7f0:	f302 021f 	ssat	r2, #32, r2
 800e7f4:	9907      	ldr	r1, [sp, #28]
 800e7f6:	fb52 f211 	smmulr	r2, r2, r1
 800e7fa:	4083      	lsls	r3, r0
 800e7fc:	f303 031f 	ssat	r3, #32, r3
 800e800:	fb53 f311 	smmulr	r3, r3, r1
 800e804:	9908      	ldr	r1, [sp, #32]
 800e806:	440a      	add	r2, r1
 800e808:	f302 0207 	ssat	r2, #8, r2
 800e80c:	9806      	ldr	r0, [sp, #24]
 800e80e:	440b      	add	r3, r1
 800e810:	f800 2c02 	strb.w	r2, [r0, #-2]
 800e814:	f303 0307 	ssat	r3, #8, r3
 800e818:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e81c:	e6a4      	b.n	800e568 <st_sssa8_fully_connected+0x2c8>
 800e81e:	4634      	mov	r4, r6
 800e820:	e64e      	b.n	800e4c0 <st_sssa8_fully_connected+0x220>
 800e822:	462e      	mov	r6, r5
 800e824:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800e828:	f04f 0900 	mov.w	r9, #0
 800e82c:	e610      	b.n	800e450 <st_sssa8_fully_connected+0x1b0>
 800e82e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e830:	4093      	lsls	r3, r2
 800e832:	f303 031f 	ssat	r3, #32, r3
 800e836:	9a07      	ldr	r2, [sp, #28]
 800e838:	fb53 f312 	smmulr	r3, r3, r2
 800e83c:	9a08      	ldr	r2, [sp, #32]
 800e83e:	4413      	add	r3, r2
 800e840:	f303 0307 	ssat	r3, #8, r3
 800e844:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e848:	e798      	b.n	800e77c <st_sssa8_fully_connected+0x4dc>
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	dd0d      	ble.n	800e86a <st_sssa8_fully_connected+0x5ca>
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800e854:	fb53 0301 	smmla	r3, r3, r1, r0
 800e858:	4113      	asrs	r3, r2
 800e85a:	f303 0307 	ssat	r3, #8, r3
 800e85e:	2000      	movs	r0, #0
 800e860:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e862:	7013      	strb	r3, [r2, #0]
 800e864:	b017      	add	sp, #92	; 0x5c
 800e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86a:	f1c2 0201 	rsb	r2, r2, #1
 800e86e:	4093      	lsls	r3, r2
 800e870:	f303 031f 	ssat	r3, #32, r3
 800e874:	9a07      	ldr	r2, [sp, #28]
 800e876:	fb53 f312 	smmulr	r3, r3, r2
 800e87a:	9a08      	ldr	r2, [sp, #32]
 800e87c:	441a      	add	r2, r3
 800e87e:	f302 0307 	ssat	r3, #8, r2
 800e882:	2000      	movs	r0, #0
 800e884:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e886:	7013      	strb	r3, [r2, #0]
 800e888:	b017      	add	sp, #92	; 0x5c
 800e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88e:	462e      	mov	r6, r5
 800e890:	e6a0      	b.n	800e5d4 <st_sssa8_fully_connected+0x334>
 800e892:	bf00      	nop

0800e894 <st_int8_copy>:
 800e894:	4288      	cmp	r0, r1
 800e896:	d010      	beq.n	800e8ba <st_int8_copy+0x26>
 800e898:	b17a      	cbz	r2, 800e8ba <st_int8_copy+0x26>
 800e89a:	4288      	cmp	r0, r1
 800e89c:	eb00 0302 	add.w	r3, r0, r2
 800e8a0:	d20c      	bcs.n	800e8bc <st_int8_copy+0x28>
 800e8a2:	428b      	cmp	r3, r1
 800e8a4:	d90a      	bls.n	800e8bc <st_int8_copy+0x28>
 800e8a6:	4283      	cmp	r3, r0
 800e8a8:	440a      	add	r2, r1
 800e8aa:	d906      	bls.n	800e8ba <st_int8_copy+0x26>
 800e8ac:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800e8b0:	4283      	cmp	r3, r0
 800e8b2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800e8b6:	d1f9      	bne.n	800e8ac <st_int8_copy+0x18>
 800e8b8:	4770      	bx	lr
 800e8ba:	4770      	bx	lr
 800e8bc:	078b      	lsls	r3, r1, #30
 800e8be:	d102      	bne.n	800e8c6 <st_int8_copy+0x32>
 800e8c0:	e008      	b.n	800e8d4 <st_int8_copy+0x40>
 800e8c2:	2a00      	cmp	r2, #0
 800e8c4:	d04d      	beq.n	800e962 <st_int8_copy+0xce>
 800e8c6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800e8ca:	3a01      	subs	r2, #1
 800e8cc:	f801 3b01 	strb.w	r3, [r1], #1
 800e8d0:	078b      	lsls	r3, r1, #30
 800e8d2:	d1f6      	bne.n	800e8c2 <st_int8_copy+0x2e>
 800e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d8:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800e8dc:	d05e      	beq.n	800e99c <st_int8_copy+0x108>
 800e8de:	ea40 0301 	orr.w	r3, r0, r1
 800e8e2:	075b      	lsls	r3, r3, #29
 800e8e4:	d13e      	bne.n	800e964 <st_int8_copy+0xd0>
 800e8e6:	f10e 33ff 	add.w	r3, lr, #4294967295
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d93a      	bls.n	800e964 <st_int8_copy+0xd0>
 800e8ee:	f100 0310 	add.w	r3, r0, #16
 800e8f2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800e8f6:	f101 0c10 	add.w	ip, r1, #16
 800e8fa:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800e8fe:	3310      	adds	r3, #16
 800e900:	f10c 0c10 	add.w	ip, ip, #16
 800e904:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800e908:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800e90c:	4573      	cmp	r3, lr
 800e90e:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800e912:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800e916:	d1f2      	bne.n	800e8fe <st_int8_copy+0x6a>
 800e918:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800e91c:	4421      	add	r1, r4
 800e91e:	4420      	add	r0, r4
 800e920:	f002 0203 	and.w	r2, r2, #3
 800e924:	b16b      	cbz	r3, 800e942 <st_int8_copy+0xae>
 800e926:	6804      	ldr	r4, [r0, #0]
 800e928:	600c      	str	r4, [r1, #0]
 800e92a:	1e5c      	subs	r4, r3, #1
 800e92c:	d005      	beq.n	800e93a <st_int8_copy+0xa6>
 800e92e:	6845      	ldr	r5, [r0, #4]
 800e930:	2c01      	cmp	r4, #1
 800e932:	604d      	str	r5, [r1, #4]
 800e934:	d001      	beq.n	800e93a <st_int8_copy+0xa6>
 800e936:	6884      	ldr	r4, [r0, #8]
 800e938:	608c      	str	r4, [r1, #8]
 800e93a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e93e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e942:	b162      	cbz	r2, 800e95e <st_int8_copy+0xca>
 800e944:	f990 3000 	ldrsb.w	r3, [r0]
 800e948:	3a01      	subs	r2, #1
 800e94a:	700b      	strb	r3, [r1, #0]
 800e94c:	d007      	beq.n	800e95e <st_int8_copy+0xca>
 800e94e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e952:	2a01      	cmp	r2, #1
 800e954:	704b      	strb	r3, [r1, #1]
 800e956:	d002      	beq.n	800e95e <st_int8_copy+0xca>
 800e958:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800e95c:	708b      	strb	r3, [r1, #2]
 800e95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e962:	4770      	bx	lr
 800e964:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800e968:	460b      	mov	r3, r1
 800e96a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800e96e:	4684      	mov	ip, r0
 800e970:	f8dc 8000 	ldr.w	r8, [ip]
 800e974:	3310      	adds	r3, #16
 800e976:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800e97a:	f10c 0c10 	add.w	ip, ip, #16
 800e97e:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800e982:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800e986:	f843 8c10 	str.w	r8, [r3, #-16]
 800e98a:	f843 7c0c 	str.w	r7, [r3, #-12]
 800e98e:	f843 6c08 	str.w	r6, [r3, #-8]
 800e992:	f843 5c04 	str.w	r5, [r3, #-4]
 800e996:	459e      	cmp	lr, r3
 800e998:	d1ea      	bne.n	800e970 <st_int8_copy+0xdc>
 800e99a:	e7bd      	b.n	800e918 <st_int8_copy+0x84>
 800e99c:	0893      	lsrs	r3, r2, #2
 800e99e:	f002 0203 	and.w	r2, r2, #3
 800e9a2:	e7bf      	b.n	800e924 <st_int8_copy+0x90>

0800e9a4 <st_int8_reordered_no_shift_zero>:
 800e9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a6:	0897      	lsrs	r7, r2, #2
 800e9a8:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800e9ac:	d02f      	beq.n	800ea0e <st_int8_reordered_no_shift_zero+0x6a>
 800e9ae:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	f850 cb04 	ldr.w	ip, [r0], #4
 800e9b8:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800e9bc:	fa2f fe8e 	sxtb16	lr, lr
 800e9c0:	fade fe03 	ssub16	lr, lr, r3
 800e9c4:	fa2f fc8c 	sxtb16	ip, ip
 800e9c8:	fadc fc03 	ssub16	ip, ip, r3
 800e9cc:	42a8      	cmp	r0, r5
 800e9ce:	f8c4 c000 	str.w	ip, [r4]
 800e9d2:	f8c4 e004 	str.w	lr, [r4, #4]
 800e9d6:	f104 0408 	add.w	r4, r4, #8
 800e9da:	d1eb      	bne.n	800e9b4 <st_int8_reordered_no_shift_zero+0x10>
 800e9dc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800e9e0:	f012 0203 	ands.w	r2, r2, #3
 800e9e4:	d012      	beq.n	800ea0c <st_int8_reordered_no_shift_zero+0x68>
 800e9e6:	f995 0000 	ldrsb.w	r0, [r5]
 800e9ea:	b273      	sxtb	r3, r6
 800e9ec:	3a01      	subs	r2, #1
 800e9ee:	eba0 0003 	sub.w	r0, r0, r3
 800e9f2:	8008      	strh	r0, [r1, #0]
 800e9f4:	d00a      	beq.n	800ea0c <st_int8_reordered_no_shift_zero+0x68>
 800e9f6:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e9fa:	2a01      	cmp	r2, #1
 800e9fc:	eba0 0003 	sub.w	r0, r0, r3
 800ea00:	8048      	strh	r0, [r1, #2]
 800ea02:	d003      	beq.n	800ea0c <st_int8_reordered_no_shift_zero+0x68>
 800ea04:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	808b      	strh	r3, [r1, #4]
 800ea0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea0e:	4605      	mov	r5, r0
 800ea10:	e7e6      	b.n	800e9e0 <st_int8_reordered_no_shift_zero+0x3c>
 800ea12:	bf00      	nop

0800ea14 <arm_float_to_q15>:
 800ea14:	b530      	push	{r4, r5, lr}
 800ea16:	0895      	lsrs	r5, r2, #2
 800ea18:	d069      	beq.n	800eaee <arm_float_to_q15+0xda>
 800ea1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ea1e:	f100 0c10 	add.w	ip, r0, #16
 800ea22:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800ea26:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800eb7c <arm_float_to_q15+0x168>
 800ea2a:	f101 0e08 	add.w	lr, r1, #8
 800ea2e:	462c      	mov	r4, r5
 800ea30:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800ea34:	ee67 6a86 	vmul.f32	s13, s15, s12
 800ea38:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ea3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea40:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ea44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea4c:	ee17 3a90 	vmov	r3, s15
 800ea50:	f303 030f 	ssat	r3, #16, r3
 800ea54:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800ea58:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800ea5c:	ee67 6a86 	vmul.f32	s13, s15, s12
 800ea60:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ea64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea68:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ea6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea74:	ee17 3a90 	vmov	r3, s15
 800ea78:	f303 030f 	ssat	r3, #16, r3
 800ea7c:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800ea80:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800ea84:	ee67 6a86 	vmul.f32	s13, s15, s12
 800ea88:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ea94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea9c:	ee17 3a90 	vmov	r3, s15
 800eaa0:	f303 030f 	ssat	r3, #16, r3
 800eaa4:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800eaa8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800eaac:	ee67 7a86 	vmul.f32	s15, s15, s12
 800eab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eab4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800eab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800eac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eac8:	bfcc      	ite	gt
 800eaca:	ee16 3a90 	vmovgt	r3, s13
 800eace:	ee17 3a90 	vmovle	r3, s15
 800ead2:	f303 030f 	ssat	r3, #16, r3
 800ead6:	3c01      	subs	r4, #1
 800ead8:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800eadc:	f10c 0c10 	add.w	ip, ip, #16
 800eae0:	f10e 0e08 	add.w	lr, lr, #8
 800eae4:	d1a4      	bne.n	800ea30 <arm_float_to_q15+0x1c>
 800eae6:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800eaea:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800eaee:	f012 0203 	ands.w	r2, r2, #3
 800eaf2:	d042      	beq.n	800eb7a <arm_float_to_q15+0x166>
 800eaf4:	edd0 7a00 	vldr	s15, [r0]
 800eaf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eafc:	eddf 5a1f 	vldr	s11, [pc, #124]	; 800eb7c <arm_float_to_q15+0x168>
 800eb00:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800eb04:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800eb08:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800eb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb10:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800eb14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb1c:	ee17 3a90 	vmov	r3, s15
 800eb20:	f303 030f 	ssat	r3, #16, r3
 800eb24:	3a01      	subs	r2, #1
 800eb26:	800b      	strh	r3, [r1, #0]
 800eb28:	d027      	beq.n	800eb7a <arm_float_to_q15+0x166>
 800eb2a:	edd0 7a01 	vldr	s15, [r0, #4]
 800eb2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eb32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3a:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800eb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb46:	ee17 3a90 	vmov	r3, s15
 800eb4a:	f303 030f 	ssat	r3, #16, r3
 800eb4e:	2a01      	cmp	r2, #1
 800eb50:	804b      	strh	r3, [r1, #2]
 800eb52:	d012      	beq.n	800eb7a <arm_float_to_q15+0x166>
 800eb54:	edd0 7a02 	vldr	s15, [r0, #8]
 800eb58:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800eb5c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800eb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb64:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800eb68:	ee37 7a25 	vadd.f32	s14, s14, s11
 800eb6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800eb70:	ee17 3a10 	vmov	r3, s14
 800eb74:	f303 030f 	ssat	r3, #16, r3
 800eb78:	808b      	strh	r3, [r1, #4]
 800eb7a:	bd30      	pop	{r4, r5, pc}
 800eb7c:	47000000 	.word	0x47000000

0800eb80 <arm_float_to_q7>:
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	0895      	lsrs	r5, r2, #2
 800eb84:	d06f      	beq.n	800ec66 <arm_float_to_q7+0xe6>
 800eb86:	f101 0c04 	add.w	ip, r1, #4
 800eb8a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800eb8e:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800eb92:	f100 0e10 	add.w	lr, r0, #16
 800eb96:	eddf 5a5f 	vldr	s11, [pc, #380]	; 800ed14 <arm_float_to_q7+0x194>
 800eb9a:	00ae      	lsls	r6, r5, #2
 800eb9c:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800eba0:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800eba4:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800eba8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800ebb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebbc:	ee17 3a90 	vmov	r3, s15
 800ebc0:	b21b      	sxth	r3, r3
 800ebc2:	f303 0307 	ssat	r3, #8, r3
 800ebc6:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800ebca:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800ebce:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800ebd2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ebd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebda:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800ebde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebe6:	ee17 3a90 	vmov	r3, s15
 800ebea:	b21b      	sxth	r3, r3
 800ebec:	f303 0307 	ssat	r3, #8, r3
 800ebf0:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800ebf4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800ebf8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800ebfc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ec00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec04:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800ec08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec10:	ee17 3a90 	vmov	r3, s15
 800ec14:	b21b      	sxth	r3, r3
 800ec16:	f303 0307 	ssat	r3, #8, r3
 800ec1a:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800ec1e:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800ec22:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ec26:	ee76 7a86 	vadd.f32	s15, s13, s12
 800ec2a:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800ec2e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ec32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec36:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ec3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3e:	ee17 3a90 	vmov	r3, s15
 800ec42:	ee17 7a10 	vmov	r7, s14
 800ec46:	b21b      	sxth	r3, r3
 800ec48:	b23f      	sxth	r7, r7
 800ec4a:	dd56      	ble.n	800ecfa <arm_float_to_q7+0x17a>
 800ec4c:	f303 0307 	ssat	r3, #8, r3
 800ec50:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800ec54:	f10c 0c04 	add.w	ip, ip, #4
 800ec58:	f10e 0e10 	add.w	lr, lr, #16
 800ec5c:	4564      	cmp	r4, ip
 800ec5e:	d19f      	bne.n	800eba0 <arm_float_to_q7+0x20>
 800ec60:	4431      	add	r1, r6
 800ec62:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800ec66:	f012 0203 	ands.w	r2, r2, #3
 800ec6a:	d045      	beq.n	800ecf8 <arm_float_to_q7+0x178>
 800ec6c:	edd0 7a00 	vldr	s15, [r0]
 800ec70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ec74:	ed9f 5a27 	vldr	s10, [pc, #156]	; 800ed14 <arm_float_to_q7+0x194>
 800ec78:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800ec7c:	ee67 6a85 	vmul.f32	s13, s15, s10
 800ec80:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ec84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec88:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ec8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec94:	ee17 3a90 	vmov	r3, s15
 800ec98:	b21b      	sxth	r3, r3
 800ec9a:	f303 0307 	ssat	r3, #8, r3
 800ec9e:	3a01      	subs	r2, #1
 800eca0:	700b      	strb	r3, [r1, #0]
 800eca2:	d029      	beq.n	800ecf8 <arm_float_to_q7+0x178>
 800eca4:	edd0 6a01 	vldr	s13, [r0, #4]
 800eca8:	ee26 6a85 	vmul.f32	s12, s13, s10
 800ecac:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800ecb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb4:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800ecb8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ecbc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800ecc0:	ee16 3a90 	vmov	r3, s13
 800ecc4:	b21b      	sxth	r3, r3
 800ecc6:	f303 0307 	ssat	r3, #8, r3
 800ecca:	2a01      	cmp	r2, #1
 800eccc:	704b      	strb	r3, [r1, #1]
 800ecce:	d013      	beq.n	800ecf8 <arm_float_to_q7+0x178>
 800ecd0:	edd0 7a02 	vldr	s15, [r0, #8]
 800ecd4:	ee27 5a85 	vmul.f32	s10, s15, s10
 800ecd8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ece4:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ece8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecec:	ee17 3a90 	vmov	r3, s15
 800ecf0:	b21b      	sxth	r3, r3
 800ecf2:	f303 0307 	ssat	r3, #8, r3
 800ecf6:	708b      	strb	r3, [r1, #2]
 800ecf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecfa:	f307 0707 	ssat	r7, #8, r7
 800ecfe:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800ed02:	f10c 0c04 	add.w	ip, ip, #4
 800ed06:	f10e 0e10 	add.w	lr, lr, #16
 800ed0a:	45a4      	cmp	ip, r4
 800ed0c:	f47f af48 	bne.w	800eba0 <arm_float_to_q7+0x20>
 800ed10:	e7a6      	b.n	800ec60 <arm_float_to_q7+0xe0>
 800ed12:	bf00      	nop
 800ed14:	43000000 	.word	0x43000000

0800ed18 <arm_q15_to_float>:
 800ed18:	b530      	push	{r4, r5, lr}
 800ed1a:	0894      	lsrs	r4, r2, #2
 800ed1c:	d038      	beq.n	800ed90 <arm_q15_to_float+0x78>
 800ed1e:	f100 0c08 	add.w	ip, r0, #8
 800ed22:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ede0 <arm_q15_to_float+0xc8>
 800ed26:	f101 0310 	add.w	r3, r1, #16
 800ed2a:	46a6      	mov	lr, r4
 800ed2c:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800ed30:	3310      	adds	r3, #16
 800ed32:	f10c 0c08 	add.w	ip, ip, #8
 800ed36:	f1be 0e01 	subs.w	lr, lr, #1
 800ed3a:	ee07 5a90 	vmov	s15, r5
 800ed3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed46:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800ed4a:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800ed4e:	ee07 5a90 	vmov	s15, r5
 800ed52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed5a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800ed5e:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800ed62:	ee07 5a90 	vmov	s15, r5
 800ed66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed6e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800ed72:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800ed76:	ee07 5a90 	vmov	s15, r5
 800ed7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed82:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800ed86:	d1d1      	bne.n	800ed2c <arm_q15_to_float+0x14>
 800ed88:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ed8c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800ed90:	f012 0203 	ands.w	r2, r2, #3
 800ed94:	d023      	beq.n	800edde <arm_q15_to_float+0xc6>
 800ed96:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ed9a:	3a01      	subs	r2, #1
 800ed9c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ede0 <arm_q15_to_float+0xc8>
 800eda0:	ee07 3a90 	vmov	s15, r3
 800eda4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eda8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edac:	edc1 7a00 	vstr	s15, [r1]
 800edb0:	d015      	beq.n	800edde <arm_q15_to_float+0xc6>
 800edb2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800edb6:	2a01      	cmp	r2, #1
 800edb8:	ee07 3a90 	vmov	s15, r3
 800edbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edc4:	edc1 7a01 	vstr	s15, [r1, #4]
 800edc8:	d009      	beq.n	800edde <arm_q15_to_float+0xc6>
 800edca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800edce:	ee07 3a90 	vmov	s15, r3
 800edd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edda:	edc1 7a02 	vstr	s15, [r1, #8]
 800edde:	bd30      	pop	{r4, r5, pc}
 800ede0:	38000000 	.word	0x38000000

0800ede4 <arm_q7_to_float>:
 800ede4:	b530      	push	{r4, r5, lr}
 800ede6:	0894      	lsrs	r4, r2, #2
 800ede8:	d036      	beq.n	800ee58 <arm_q7_to_float+0x74>
 800edea:	1d03      	adds	r3, r0, #4
 800edec:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800edf0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800eea8 <arm_q7_to_float+0xc4>
 800edf4:	f101 0010 	add.w	r0, r1, #16
 800edf8:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800edfc:	3010      	adds	r0, #16
 800edfe:	ee07 ea90 	vmov	s15, lr
 800ee02:	469e      	mov	lr, r3
 800ee04:	3304      	adds	r3, #4
 800ee06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee0a:	45e6      	cmp	lr, ip
 800ee0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee10:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 800ee14:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800ee18:	ee07 5a90 	vmov	s15, r5
 800ee1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee24:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800ee28:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800ee2c:	ee07 5a90 	vmov	s15, r5
 800ee30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee38:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800ee3c:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800ee40:	ee07 5a90 	vmov	s15, r5
 800ee44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee4c:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800ee50:	d1d2      	bne.n	800edf8 <arm_q7_to_float+0x14>
 800ee52:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ee56:	4660      	mov	r0, ip
 800ee58:	f012 0203 	ands.w	r2, r2, #3
 800ee5c:	d023      	beq.n	800eea6 <arm_q7_to_float+0xc2>
 800ee5e:	f990 3000 	ldrsb.w	r3, [r0]
 800ee62:	3a01      	subs	r2, #1
 800ee64:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800eea8 <arm_q7_to_float+0xc4>
 800ee68:	ee07 3a90 	vmov	s15, r3
 800ee6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee74:	edc1 7a00 	vstr	s15, [r1]
 800ee78:	d015      	beq.n	800eea6 <arm_q7_to_float+0xc2>
 800ee7a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ee7e:	2a01      	cmp	r2, #1
 800ee80:	ee07 3a90 	vmov	s15, r3
 800ee84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee8c:	edc1 7a01 	vstr	s15, [r1, #4]
 800ee90:	d009      	beq.n	800eea6 <arm_q7_to_float+0xc2>
 800ee92:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ee96:	ee07 3a90 	vmov	s15, r3
 800ee9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eea2:	edc1 7a02 	vstr	s15, [r1, #8]
 800eea6:	bd30      	pop	{r4, r5, pc}
 800eea8:	3c000000 	.word	0x3c000000

0800eeac <ai_array_to_buffer_fmt>:
 800eeac:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d050      	beq.n	800ef56 <ai_array_to_buffer_fmt+0xaa>
 800eeb4:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800eeb8:	4b29      	ldr	r3, [pc, #164]	; (800ef60 <ai_array_to_buffer_fmt+0xb4>)
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d00b      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800eebe:	dc1c      	bgt.n	800eefa <ai_array_to_buffer_fmt+0x4e>
 800eec0:	4b28      	ldr	r3, [pc, #160]	; (800ef64 <ai_array_to_buffer_fmt+0xb8>)
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d007      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800eec6:	dd0b      	ble.n	800eee0 <ai_array_to_buffer_fmt+0x34>
 800eec8:	4b27      	ldr	r3, [pc, #156]	; (800ef68 <ai_array_to_buffer_fmt+0xbc>)
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d003      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800eece:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d131      	bne.n	800ef3a <ai_array_to_buffer_fmt+0x8e>
 800eed6:	4613      	mov	r3, r2
 800eed8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eedc:	4318      	orrs	r0, r3
 800eede:	4770      	bx	lr
 800eee0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d0f6      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800eee8:	dd2c      	ble.n	800ef44 <ai_array_to_buffer_fmt+0x98>
 800eeea:	4b20      	ldr	r3, [pc, #128]	; (800ef6c <ai_array_to_buffer_fmt+0xc0>)
 800eeec:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eef0:	429a      	cmp	r2, r3
 800eef2:	bf18      	it	ne
 800eef4:	2340      	movne	r3, #64	; 0x40
 800eef6:	4318      	orrs	r0, r3
 800eef8:	4770      	bx	lr
 800eefa:	4b1d      	ldr	r3, [pc, #116]	; (800ef70 <ai_array_to_buffer_fmt+0xc4>)
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d0ea      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800ef00:	dd0e      	ble.n	800ef20 <ai_array_to_buffer_fmt+0x74>
 800ef02:	4b1c      	ldr	r3, [pc, #112]	; (800ef74 <ai_array_to_buffer_fmt+0xc8>)
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d0e6      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800ef08:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d0e2      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800ef10:	4b19      	ldr	r3, [pc, #100]	; (800ef78 <ai_array_to_buffer_fmt+0xcc>)
 800ef12:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ef16:	429a      	cmp	r2, r3
 800ef18:	bf18      	it	ne
 800ef1a:	2340      	movne	r3, #64	; 0x40
 800ef1c:	4318      	orrs	r0, r3
 800ef1e:	4770      	bx	lr
 800ef20:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d0d6      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800ef28:	3307      	adds	r3, #7
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d0d3      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800ef2e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ef32:	429a      	cmp	r2, r3
 800ef34:	bf18      	it	ne
 800ef36:	2340      	movne	r3, #64	; 0x40
 800ef38:	e7ce      	b.n	800eed8 <ai_array_to_buffer_fmt+0x2c>
 800ef3a:	4b10      	ldr	r3, [pc, #64]	; (800ef7c <ai_array_to_buffer_fmt+0xd0>)
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	bf18      	it	ne
 800ef40:	2340      	movne	r3, #64	; 0x40
 800ef42:	e7c9      	b.n	800eed8 <ai_array_to_buffer_fmt+0x2c>
 800ef44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d0c4      	beq.n	800eed6 <ai_array_to_buffer_fmt+0x2a>
 800ef4c:	3380      	adds	r3, #128	; 0x80
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	bf18      	it	ne
 800ef52:	2340      	movne	r3, #64	; 0x40
 800ef54:	e7c0      	b.n	800eed8 <ai_array_to_buffer_fmt+0x2c>
 800ef56:	4b0a      	ldr	r3, [pc, #40]	; (800ef80 <ai_array_to_buffer_fmt+0xd4>)
 800ef58:	4003      	ands	r3, r0
 800ef5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ef5e:	e7bb      	b.n	800eed8 <ai_array_to_buffer_fmt+0x2c>
 800ef60:	00840040 	.word	0x00840040
 800ef64:	00040840 	.word	0x00040840
 800ef68:	00041040 	.word	0x00041040
 800ef6c:	00040447 	.word	0x00040447
 800ef70:	00840840 	.word	0x00840840
 800ef74:	00841040 	.word	0x00841040
 800ef78:	0084084f 	.word	0x0084084f
 800ef7c:	0004084f 	.word	0x0004084f
 800ef80:	00803fff 	.word	0x00803fff

0800ef84 <ai_array_get_data_byte_size>:
 800ef84:	b161      	cbz	r1, 800efa0 <ai_array_get_data_byte_size+0x1c>
 800ef86:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ef8a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ef8e:	fb03 f101 	mul.w	r1, r3, r1
 800ef92:	1dc8      	adds	r0, r1, #7
 800ef94:	f020 0007 	bic.w	r0, r0, #7
 800ef98:	40d0      	lsrs	r0, r2
 800ef9a:	3007      	adds	r0, #7
 800ef9c:	08c0      	lsrs	r0, r0, #3
 800ef9e:	4770      	bx	lr
 800efa0:	4608      	mov	r0, r1
 800efa2:	4770      	bx	lr

0800efa4 <ai_version_get>:
 800efa4:	0212      	lsls	r2, r2, #8
 800efa6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800efaa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800efae:	4770      	bx	lr

0800efb0 <get_tensor_byte_size>:
 800efb0:	b430      	push	{r4, r5}
 800efb2:	6985      	ldr	r5, [r0, #24]
 800efb4:	68c4      	ldr	r4, [r0, #12]
 800efb6:	6941      	ldr	r1, [r0, #20]
 800efb8:	4b06      	ldr	r3, [pc, #24]	; (800efd4 <get_tensor_byte_size+0x24>)
 800efba:	6828      	ldr	r0, [r5, #0]
 800efbc:	4a06      	ldr	r2, [pc, #24]	; (800efd8 <get_tensor_byte_size+0x28>)
 800efbe:	4003      	ands	r3, r0
 800efc0:	68c9      	ldr	r1, [r1, #12]
 800efc2:	68e0      	ldr	r0, [r4, #12]
 800efc4:	4293      	cmp	r3, r2
 800efc6:	fb01 f000 	mul.w	r0, r1, r0
 800efca:	d101      	bne.n	800efd0 <get_tensor_byte_size+0x20>
 800efcc:	3007      	adds	r0, #7
 800efce:	08c0      	lsrs	r0, r0, #3
 800efd0:	bc30      	pop	{r4, r5}
 800efd2:	4770      	bx	lr
 800efd4:	017fffff 	.word	0x017fffff
 800efd8:	000400c0 	.word	0x000400c0

0800efdc <__errno>:
 800efdc:	4b01      	ldr	r3, [pc, #4]	; (800efe4 <__errno+0x8>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	20001888 	.word	0x20001888

0800efe8 <__libc_init_array>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	4d0d      	ldr	r5, [pc, #52]	; (800f020 <__libc_init_array+0x38>)
 800efec:	4c0d      	ldr	r4, [pc, #52]	; (800f024 <__libc_init_array+0x3c>)
 800efee:	1b64      	subs	r4, r4, r5
 800eff0:	10a4      	asrs	r4, r4, #2
 800eff2:	2600      	movs	r6, #0
 800eff4:	42a6      	cmp	r6, r4
 800eff6:	d109      	bne.n	800f00c <__libc_init_array+0x24>
 800eff8:	4d0b      	ldr	r5, [pc, #44]	; (800f028 <__libc_init_array+0x40>)
 800effa:	4c0c      	ldr	r4, [pc, #48]	; (800f02c <__libc_init_array+0x44>)
 800effc:	f003 fb1c 	bl	8012638 <_init>
 800f000:	1b64      	subs	r4, r4, r5
 800f002:	10a4      	asrs	r4, r4, #2
 800f004:	2600      	movs	r6, #0
 800f006:	42a6      	cmp	r6, r4
 800f008:	d105      	bne.n	800f016 <__libc_init_array+0x2e>
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
 800f00c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f010:	4798      	blx	r3
 800f012:	3601      	adds	r6, #1
 800f014:	e7ee      	b.n	800eff4 <__libc_init_array+0xc>
 800f016:	f855 3b04 	ldr.w	r3, [r5], #4
 800f01a:	4798      	blx	r3
 800f01c:	3601      	adds	r6, #1
 800f01e:	e7f2      	b.n	800f006 <__libc_init_array+0x1e>
 800f020:	0802b44c 	.word	0x0802b44c
 800f024:	0802b44c 	.word	0x0802b44c
 800f028:	0802b44c 	.word	0x0802b44c
 800f02c:	0802b450 	.word	0x0802b450

0800f030 <malloc>:
 800f030:	4b02      	ldr	r3, [pc, #8]	; (800f03c <malloc+0xc>)
 800f032:	4601      	mov	r1, r0
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	f000 b885 	b.w	800f144 <_malloc_r>
 800f03a:	bf00      	nop
 800f03c:	20001888 	.word	0x20001888

0800f040 <memcpy>:
 800f040:	440a      	add	r2, r1
 800f042:	4291      	cmp	r1, r2
 800f044:	f100 33ff 	add.w	r3, r0, #4294967295
 800f048:	d100      	bne.n	800f04c <memcpy+0xc>
 800f04a:	4770      	bx	lr
 800f04c:	b510      	push	{r4, lr}
 800f04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f052:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f056:	4291      	cmp	r1, r2
 800f058:	d1f9      	bne.n	800f04e <memcpy+0xe>
 800f05a:	bd10      	pop	{r4, pc}

0800f05c <memset>:
 800f05c:	4402      	add	r2, r0
 800f05e:	4603      	mov	r3, r0
 800f060:	4293      	cmp	r3, r2
 800f062:	d100      	bne.n	800f066 <memset+0xa>
 800f064:	4770      	bx	lr
 800f066:	f803 1b01 	strb.w	r1, [r3], #1
 800f06a:	e7f9      	b.n	800f060 <memset+0x4>

0800f06c <_free_r>:
 800f06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f06e:	2900      	cmp	r1, #0
 800f070:	d044      	beq.n	800f0fc <_free_r+0x90>
 800f072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f076:	9001      	str	r0, [sp, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f1a1 0404 	sub.w	r4, r1, #4
 800f07e:	bfb8      	it	lt
 800f080:	18e4      	addlt	r4, r4, r3
 800f082:	f001 fbf3 	bl	801086c <__malloc_lock>
 800f086:	4a1e      	ldr	r2, [pc, #120]	; (800f100 <_free_r+0x94>)
 800f088:	9801      	ldr	r0, [sp, #4]
 800f08a:	6813      	ldr	r3, [r2, #0]
 800f08c:	b933      	cbnz	r3, 800f09c <_free_r+0x30>
 800f08e:	6063      	str	r3, [r4, #4]
 800f090:	6014      	str	r4, [r2, #0]
 800f092:	b003      	add	sp, #12
 800f094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f098:	f001 bbee 	b.w	8010878 <__malloc_unlock>
 800f09c:	42a3      	cmp	r3, r4
 800f09e:	d908      	bls.n	800f0b2 <_free_r+0x46>
 800f0a0:	6825      	ldr	r5, [r4, #0]
 800f0a2:	1961      	adds	r1, r4, r5
 800f0a4:	428b      	cmp	r3, r1
 800f0a6:	bf01      	itttt	eq
 800f0a8:	6819      	ldreq	r1, [r3, #0]
 800f0aa:	685b      	ldreq	r3, [r3, #4]
 800f0ac:	1949      	addeq	r1, r1, r5
 800f0ae:	6021      	streq	r1, [r4, #0]
 800f0b0:	e7ed      	b.n	800f08e <_free_r+0x22>
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	b10b      	cbz	r3, 800f0bc <_free_r+0x50>
 800f0b8:	42a3      	cmp	r3, r4
 800f0ba:	d9fa      	bls.n	800f0b2 <_free_r+0x46>
 800f0bc:	6811      	ldr	r1, [r2, #0]
 800f0be:	1855      	adds	r5, r2, r1
 800f0c0:	42a5      	cmp	r5, r4
 800f0c2:	d10b      	bne.n	800f0dc <_free_r+0x70>
 800f0c4:	6824      	ldr	r4, [r4, #0]
 800f0c6:	4421      	add	r1, r4
 800f0c8:	1854      	adds	r4, r2, r1
 800f0ca:	42a3      	cmp	r3, r4
 800f0cc:	6011      	str	r1, [r2, #0]
 800f0ce:	d1e0      	bne.n	800f092 <_free_r+0x26>
 800f0d0:	681c      	ldr	r4, [r3, #0]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	6053      	str	r3, [r2, #4]
 800f0d6:	4421      	add	r1, r4
 800f0d8:	6011      	str	r1, [r2, #0]
 800f0da:	e7da      	b.n	800f092 <_free_r+0x26>
 800f0dc:	d902      	bls.n	800f0e4 <_free_r+0x78>
 800f0de:	230c      	movs	r3, #12
 800f0e0:	6003      	str	r3, [r0, #0]
 800f0e2:	e7d6      	b.n	800f092 <_free_r+0x26>
 800f0e4:	6825      	ldr	r5, [r4, #0]
 800f0e6:	1961      	adds	r1, r4, r5
 800f0e8:	428b      	cmp	r3, r1
 800f0ea:	bf04      	itt	eq
 800f0ec:	6819      	ldreq	r1, [r3, #0]
 800f0ee:	685b      	ldreq	r3, [r3, #4]
 800f0f0:	6063      	str	r3, [r4, #4]
 800f0f2:	bf04      	itt	eq
 800f0f4:	1949      	addeq	r1, r1, r5
 800f0f6:	6021      	streq	r1, [r4, #0]
 800f0f8:	6054      	str	r4, [r2, #4]
 800f0fa:	e7ca      	b.n	800f092 <_free_r+0x26>
 800f0fc:	b003      	add	sp, #12
 800f0fe:	bd30      	pop	{r4, r5, pc}
 800f100:	20004bc8 	.word	0x20004bc8

0800f104 <sbrk_aligned>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	4e0e      	ldr	r6, [pc, #56]	; (800f140 <sbrk_aligned+0x3c>)
 800f108:	460c      	mov	r4, r1
 800f10a:	6831      	ldr	r1, [r6, #0]
 800f10c:	4605      	mov	r5, r0
 800f10e:	b911      	cbnz	r1, 800f116 <sbrk_aligned+0x12>
 800f110:	f000 fcf6 	bl	800fb00 <_sbrk_r>
 800f114:	6030      	str	r0, [r6, #0]
 800f116:	4621      	mov	r1, r4
 800f118:	4628      	mov	r0, r5
 800f11a:	f000 fcf1 	bl	800fb00 <_sbrk_r>
 800f11e:	1c43      	adds	r3, r0, #1
 800f120:	d00a      	beq.n	800f138 <sbrk_aligned+0x34>
 800f122:	1cc4      	adds	r4, r0, #3
 800f124:	f024 0403 	bic.w	r4, r4, #3
 800f128:	42a0      	cmp	r0, r4
 800f12a:	d007      	beq.n	800f13c <sbrk_aligned+0x38>
 800f12c:	1a21      	subs	r1, r4, r0
 800f12e:	4628      	mov	r0, r5
 800f130:	f000 fce6 	bl	800fb00 <_sbrk_r>
 800f134:	3001      	adds	r0, #1
 800f136:	d101      	bne.n	800f13c <sbrk_aligned+0x38>
 800f138:	f04f 34ff 	mov.w	r4, #4294967295
 800f13c:	4620      	mov	r0, r4
 800f13e:	bd70      	pop	{r4, r5, r6, pc}
 800f140:	20004bcc 	.word	0x20004bcc

0800f144 <_malloc_r>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	1ccd      	adds	r5, r1, #3
 800f14a:	f025 0503 	bic.w	r5, r5, #3
 800f14e:	3508      	adds	r5, #8
 800f150:	2d0c      	cmp	r5, #12
 800f152:	bf38      	it	cc
 800f154:	250c      	movcc	r5, #12
 800f156:	2d00      	cmp	r5, #0
 800f158:	4607      	mov	r7, r0
 800f15a:	db01      	blt.n	800f160 <_malloc_r+0x1c>
 800f15c:	42a9      	cmp	r1, r5
 800f15e:	d905      	bls.n	800f16c <_malloc_r+0x28>
 800f160:	230c      	movs	r3, #12
 800f162:	603b      	str	r3, [r7, #0]
 800f164:	2600      	movs	r6, #0
 800f166:	4630      	mov	r0, r6
 800f168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16c:	4e2e      	ldr	r6, [pc, #184]	; (800f228 <_malloc_r+0xe4>)
 800f16e:	f001 fb7d 	bl	801086c <__malloc_lock>
 800f172:	6833      	ldr	r3, [r6, #0]
 800f174:	461c      	mov	r4, r3
 800f176:	bb34      	cbnz	r4, 800f1c6 <_malloc_r+0x82>
 800f178:	4629      	mov	r1, r5
 800f17a:	4638      	mov	r0, r7
 800f17c:	f7ff ffc2 	bl	800f104 <sbrk_aligned>
 800f180:	1c43      	adds	r3, r0, #1
 800f182:	4604      	mov	r4, r0
 800f184:	d14d      	bne.n	800f222 <_malloc_r+0xde>
 800f186:	6834      	ldr	r4, [r6, #0]
 800f188:	4626      	mov	r6, r4
 800f18a:	2e00      	cmp	r6, #0
 800f18c:	d140      	bne.n	800f210 <_malloc_r+0xcc>
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	4631      	mov	r1, r6
 800f192:	4638      	mov	r0, r7
 800f194:	eb04 0803 	add.w	r8, r4, r3
 800f198:	f000 fcb2 	bl	800fb00 <_sbrk_r>
 800f19c:	4580      	cmp	r8, r0
 800f19e:	d13a      	bne.n	800f216 <_malloc_r+0xd2>
 800f1a0:	6821      	ldr	r1, [r4, #0]
 800f1a2:	3503      	adds	r5, #3
 800f1a4:	1a6d      	subs	r5, r5, r1
 800f1a6:	f025 0503 	bic.w	r5, r5, #3
 800f1aa:	3508      	adds	r5, #8
 800f1ac:	2d0c      	cmp	r5, #12
 800f1ae:	bf38      	it	cc
 800f1b0:	250c      	movcc	r5, #12
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	f7ff ffa5 	bl	800f104 <sbrk_aligned>
 800f1ba:	3001      	adds	r0, #1
 800f1bc:	d02b      	beq.n	800f216 <_malloc_r+0xd2>
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	442b      	add	r3, r5
 800f1c2:	6023      	str	r3, [r4, #0]
 800f1c4:	e00e      	b.n	800f1e4 <_malloc_r+0xa0>
 800f1c6:	6822      	ldr	r2, [r4, #0]
 800f1c8:	1b52      	subs	r2, r2, r5
 800f1ca:	d41e      	bmi.n	800f20a <_malloc_r+0xc6>
 800f1cc:	2a0b      	cmp	r2, #11
 800f1ce:	d916      	bls.n	800f1fe <_malloc_r+0xba>
 800f1d0:	1961      	adds	r1, r4, r5
 800f1d2:	42a3      	cmp	r3, r4
 800f1d4:	6025      	str	r5, [r4, #0]
 800f1d6:	bf18      	it	ne
 800f1d8:	6059      	strne	r1, [r3, #4]
 800f1da:	6863      	ldr	r3, [r4, #4]
 800f1dc:	bf08      	it	eq
 800f1de:	6031      	streq	r1, [r6, #0]
 800f1e0:	5162      	str	r2, [r4, r5]
 800f1e2:	604b      	str	r3, [r1, #4]
 800f1e4:	4638      	mov	r0, r7
 800f1e6:	f104 060b 	add.w	r6, r4, #11
 800f1ea:	f001 fb45 	bl	8010878 <__malloc_unlock>
 800f1ee:	f026 0607 	bic.w	r6, r6, #7
 800f1f2:	1d23      	adds	r3, r4, #4
 800f1f4:	1af2      	subs	r2, r6, r3
 800f1f6:	d0b6      	beq.n	800f166 <_malloc_r+0x22>
 800f1f8:	1b9b      	subs	r3, r3, r6
 800f1fa:	50a3      	str	r3, [r4, r2]
 800f1fc:	e7b3      	b.n	800f166 <_malloc_r+0x22>
 800f1fe:	6862      	ldr	r2, [r4, #4]
 800f200:	42a3      	cmp	r3, r4
 800f202:	bf0c      	ite	eq
 800f204:	6032      	streq	r2, [r6, #0]
 800f206:	605a      	strne	r2, [r3, #4]
 800f208:	e7ec      	b.n	800f1e4 <_malloc_r+0xa0>
 800f20a:	4623      	mov	r3, r4
 800f20c:	6864      	ldr	r4, [r4, #4]
 800f20e:	e7b2      	b.n	800f176 <_malloc_r+0x32>
 800f210:	4634      	mov	r4, r6
 800f212:	6876      	ldr	r6, [r6, #4]
 800f214:	e7b9      	b.n	800f18a <_malloc_r+0x46>
 800f216:	230c      	movs	r3, #12
 800f218:	603b      	str	r3, [r7, #0]
 800f21a:	4638      	mov	r0, r7
 800f21c:	f001 fb2c 	bl	8010878 <__malloc_unlock>
 800f220:	e7a1      	b.n	800f166 <_malloc_r+0x22>
 800f222:	6025      	str	r5, [r4, #0]
 800f224:	e7de      	b.n	800f1e4 <_malloc_r+0xa0>
 800f226:	bf00      	nop
 800f228:	20004bc8 	.word	0x20004bc8

0800f22c <__cvt>:
 800f22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f230:	ec55 4b10 	vmov	r4, r5, d0
 800f234:	2d00      	cmp	r5, #0
 800f236:	460e      	mov	r6, r1
 800f238:	4619      	mov	r1, r3
 800f23a:	462b      	mov	r3, r5
 800f23c:	bfbb      	ittet	lt
 800f23e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f242:	461d      	movlt	r5, r3
 800f244:	2300      	movge	r3, #0
 800f246:	232d      	movlt	r3, #45	; 0x2d
 800f248:	700b      	strb	r3, [r1, #0]
 800f24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f24c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f250:	4691      	mov	r9, r2
 800f252:	f023 0820 	bic.w	r8, r3, #32
 800f256:	bfbc      	itt	lt
 800f258:	4622      	movlt	r2, r4
 800f25a:	4614      	movlt	r4, r2
 800f25c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f260:	d005      	beq.n	800f26e <__cvt+0x42>
 800f262:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f266:	d100      	bne.n	800f26a <__cvt+0x3e>
 800f268:	3601      	adds	r6, #1
 800f26a:	2102      	movs	r1, #2
 800f26c:	e000      	b.n	800f270 <__cvt+0x44>
 800f26e:	2103      	movs	r1, #3
 800f270:	ab03      	add	r3, sp, #12
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	ab02      	add	r3, sp, #8
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	ec45 4b10 	vmov	d0, r4, r5
 800f27c:	4653      	mov	r3, sl
 800f27e:	4632      	mov	r2, r6
 800f280:	f000 fd02 	bl	800fc88 <_dtoa_r>
 800f284:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f288:	4607      	mov	r7, r0
 800f28a:	d102      	bne.n	800f292 <__cvt+0x66>
 800f28c:	f019 0f01 	tst.w	r9, #1
 800f290:	d022      	beq.n	800f2d8 <__cvt+0xac>
 800f292:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f296:	eb07 0906 	add.w	r9, r7, r6
 800f29a:	d110      	bne.n	800f2be <__cvt+0x92>
 800f29c:	783b      	ldrb	r3, [r7, #0]
 800f29e:	2b30      	cmp	r3, #48	; 0x30
 800f2a0:	d10a      	bne.n	800f2b8 <__cvt+0x8c>
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	f7f1 fc3d 	bl	8000b28 <__aeabi_dcmpeq>
 800f2ae:	b918      	cbnz	r0, 800f2b8 <__cvt+0x8c>
 800f2b0:	f1c6 0601 	rsb	r6, r6, #1
 800f2b4:	f8ca 6000 	str.w	r6, [sl]
 800f2b8:	f8da 3000 	ldr.w	r3, [sl]
 800f2bc:	4499      	add	r9, r3
 800f2be:	2200      	movs	r2, #0
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	f7f1 fc2f 	bl	8000b28 <__aeabi_dcmpeq>
 800f2ca:	b108      	cbz	r0, 800f2d0 <__cvt+0xa4>
 800f2cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f2d0:	2230      	movs	r2, #48	; 0x30
 800f2d2:	9b03      	ldr	r3, [sp, #12]
 800f2d4:	454b      	cmp	r3, r9
 800f2d6:	d307      	bcc.n	800f2e8 <__cvt+0xbc>
 800f2d8:	9b03      	ldr	r3, [sp, #12]
 800f2da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2dc:	1bdb      	subs	r3, r3, r7
 800f2de:	4638      	mov	r0, r7
 800f2e0:	6013      	str	r3, [r2, #0]
 800f2e2:	b004      	add	sp, #16
 800f2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2e8:	1c59      	adds	r1, r3, #1
 800f2ea:	9103      	str	r1, [sp, #12]
 800f2ec:	701a      	strb	r2, [r3, #0]
 800f2ee:	e7f0      	b.n	800f2d2 <__cvt+0xa6>

0800f2f0 <__exponent>:
 800f2f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2900      	cmp	r1, #0
 800f2f6:	bfb8      	it	lt
 800f2f8:	4249      	neglt	r1, r1
 800f2fa:	f803 2b02 	strb.w	r2, [r3], #2
 800f2fe:	bfb4      	ite	lt
 800f300:	222d      	movlt	r2, #45	; 0x2d
 800f302:	222b      	movge	r2, #43	; 0x2b
 800f304:	2909      	cmp	r1, #9
 800f306:	7042      	strb	r2, [r0, #1]
 800f308:	dd2a      	ble.n	800f360 <__exponent+0x70>
 800f30a:	f10d 0407 	add.w	r4, sp, #7
 800f30e:	46a4      	mov	ip, r4
 800f310:	270a      	movs	r7, #10
 800f312:	46a6      	mov	lr, r4
 800f314:	460a      	mov	r2, r1
 800f316:	fb91 f6f7 	sdiv	r6, r1, r7
 800f31a:	fb07 1516 	mls	r5, r7, r6, r1
 800f31e:	3530      	adds	r5, #48	; 0x30
 800f320:	2a63      	cmp	r2, #99	; 0x63
 800f322:	f104 34ff 	add.w	r4, r4, #4294967295
 800f326:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f32a:	4631      	mov	r1, r6
 800f32c:	dcf1      	bgt.n	800f312 <__exponent+0x22>
 800f32e:	3130      	adds	r1, #48	; 0x30
 800f330:	f1ae 0502 	sub.w	r5, lr, #2
 800f334:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f338:	1c44      	adds	r4, r0, #1
 800f33a:	4629      	mov	r1, r5
 800f33c:	4561      	cmp	r1, ip
 800f33e:	d30a      	bcc.n	800f356 <__exponent+0x66>
 800f340:	f10d 0209 	add.w	r2, sp, #9
 800f344:	eba2 020e 	sub.w	r2, r2, lr
 800f348:	4565      	cmp	r5, ip
 800f34a:	bf88      	it	hi
 800f34c:	2200      	movhi	r2, #0
 800f34e:	4413      	add	r3, r2
 800f350:	1a18      	subs	r0, r3, r0
 800f352:	b003      	add	sp, #12
 800f354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f35a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f35e:	e7ed      	b.n	800f33c <__exponent+0x4c>
 800f360:	2330      	movs	r3, #48	; 0x30
 800f362:	3130      	adds	r1, #48	; 0x30
 800f364:	7083      	strb	r3, [r0, #2]
 800f366:	70c1      	strb	r1, [r0, #3]
 800f368:	1d03      	adds	r3, r0, #4
 800f36a:	e7f1      	b.n	800f350 <__exponent+0x60>

0800f36c <_printf_float>:
 800f36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f370:	ed2d 8b02 	vpush	{d8}
 800f374:	b08d      	sub	sp, #52	; 0x34
 800f376:	460c      	mov	r4, r1
 800f378:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f37c:	4616      	mov	r6, r2
 800f37e:	461f      	mov	r7, r3
 800f380:	4605      	mov	r5, r0
 800f382:	f001 fa6f 	bl	8010864 <_localeconv_r>
 800f386:	f8d0 a000 	ldr.w	sl, [r0]
 800f38a:	4650      	mov	r0, sl
 800f38c:	f7f0 ff4a 	bl	8000224 <strlen>
 800f390:	2300      	movs	r3, #0
 800f392:	930a      	str	r3, [sp, #40]	; 0x28
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	9305      	str	r3, [sp, #20]
 800f398:	f8d8 3000 	ldr.w	r3, [r8]
 800f39c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f3a0:	3307      	adds	r3, #7
 800f3a2:	f023 0307 	bic.w	r3, r3, #7
 800f3a6:	f103 0208 	add.w	r2, r3, #8
 800f3aa:	f8c8 2000 	str.w	r2, [r8]
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f3b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f3ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f3be:	9307      	str	r3, [sp, #28]
 800f3c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f3c4:	ee08 0a10 	vmov	s16, r0
 800f3c8:	4b9f      	ldr	r3, [pc, #636]	; (800f648 <_printf_float+0x2dc>)
 800f3ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d2:	f7f1 fbdb 	bl	8000b8c <__aeabi_dcmpun>
 800f3d6:	bb88      	cbnz	r0, 800f43c <_printf_float+0xd0>
 800f3d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3dc:	4b9a      	ldr	r3, [pc, #616]	; (800f648 <_printf_float+0x2dc>)
 800f3de:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e2:	f7f1 fbb5 	bl	8000b50 <__aeabi_dcmple>
 800f3e6:	bb48      	cbnz	r0, 800f43c <_printf_float+0xd0>
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	4640      	mov	r0, r8
 800f3ee:	4649      	mov	r1, r9
 800f3f0:	f7f1 fba4 	bl	8000b3c <__aeabi_dcmplt>
 800f3f4:	b110      	cbz	r0, 800f3fc <_printf_float+0x90>
 800f3f6:	232d      	movs	r3, #45	; 0x2d
 800f3f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3fc:	4b93      	ldr	r3, [pc, #588]	; (800f64c <_printf_float+0x2e0>)
 800f3fe:	4894      	ldr	r0, [pc, #592]	; (800f650 <_printf_float+0x2e4>)
 800f400:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f404:	bf94      	ite	ls
 800f406:	4698      	movls	r8, r3
 800f408:	4680      	movhi	r8, r0
 800f40a:	2303      	movs	r3, #3
 800f40c:	6123      	str	r3, [r4, #16]
 800f40e:	9b05      	ldr	r3, [sp, #20]
 800f410:	f023 0204 	bic.w	r2, r3, #4
 800f414:	6022      	str	r2, [r4, #0]
 800f416:	f04f 0900 	mov.w	r9, #0
 800f41a:	9700      	str	r7, [sp, #0]
 800f41c:	4633      	mov	r3, r6
 800f41e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f420:	4621      	mov	r1, r4
 800f422:	4628      	mov	r0, r5
 800f424:	f000 f9d8 	bl	800f7d8 <_printf_common>
 800f428:	3001      	adds	r0, #1
 800f42a:	f040 8090 	bne.w	800f54e <_printf_float+0x1e2>
 800f42e:	f04f 30ff 	mov.w	r0, #4294967295
 800f432:	b00d      	add	sp, #52	; 0x34
 800f434:	ecbd 8b02 	vpop	{d8}
 800f438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43c:	4642      	mov	r2, r8
 800f43e:	464b      	mov	r3, r9
 800f440:	4640      	mov	r0, r8
 800f442:	4649      	mov	r1, r9
 800f444:	f7f1 fba2 	bl	8000b8c <__aeabi_dcmpun>
 800f448:	b140      	cbz	r0, 800f45c <_printf_float+0xf0>
 800f44a:	464b      	mov	r3, r9
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	bfbc      	itt	lt
 800f450:	232d      	movlt	r3, #45	; 0x2d
 800f452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f456:	487f      	ldr	r0, [pc, #508]	; (800f654 <_printf_float+0x2e8>)
 800f458:	4b7f      	ldr	r3, [pc, #508]	; (800f658 <_printf_float+0x2ec>)
 800f45a:	e7d1      	b.n	800f400 <_printf_float+0x94>
 800f45c:	6863      	ldr	r3, [r4, #4]
 800f45e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f462:	9206      	str	r2, [sp, #24]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	d13f      	bne.n	800f4e8 <_printf_float+0x17c>
 800f468:	2306      	movs	r3, #6
 800f46a:	6063      	str	r3, [r4, #4]
 800f46c:	9b05      	ldr	r3, [sp, #20]
 800f46e:	6861      	ldr	r1, [r4, #4]
 800f470:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f474:	2300      	movs	r3, #0
 800f476:	9303      	str	r3, [sp, #12]
 800f478:	ab0a      	add	r3, sp, #40	; 0x28
 800f47a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f47e:	ab09      	add	r3, sp, #36	; 0x24
 800f480:	ec49 8b10 	vmov	d0, r8, r9
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	6022      	str	r2, [r4, #0]
 800f488:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f48c:	4628      	mov	r0, r5
 800f48e:	f7ff fecd 	bl	800f22c <__cvt>
 800f492:	9b06      	ldr	r3, [sp, #24]
 800f494:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f496:	2b47      	cmp	r3, #71	; 0x47
 800f498:	4680      	mov	r8, r0
 800f49a:	d108      	bne.n	800f4ae <_printf_float+0x142>
 800f49c:	1cc8      	adds	r0, r1, #3
 800f49e:	db02      	blt.n	800f4a6 <_printf_float+0x13a>
 800f4a0:	6863      	ldr	r3, [r4, #4]
 800f4a2:	4299      	cmp	r1, r3
 800f4a4:	dd41      	ble.n	800f52a <_printf_float+0x1be>
 800f4a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f4aa:	fa5f fb8b 	uxtb.w	fp, fp
 800f4ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f4b2:	d820      	bhi.n	800f4f6 <_printf_float+0x18a>
 800f4b4:	3901      	subs	r1, #1
 800f4b6:	465a      	mov	r2, fp
 800f4b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f4bc:	9109      	str	r1, [sp, #36]	; 0x24
 800f4be:	f7ff ff17 	bl	800f2f0 <__exponent>
 800f4c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4c4:	1813      	adds	r3, r2, r0
 800f4c6:	2a01      	cmp	r2, #1
 800f4c8:	4681      	mov	r9, r0
 800f4ca:	6123      	str	r3, [r4, #16]
 800f4cc:	dc02      	bgt.n	800f4d4 <_printf_float+0x168>
 800f4ce:	6822      	ldr	r2, [r4, #0]
 800f4d0:	07d2      	lsls	r2, r2, #31
 800f4d2:	d501      	bpl.n	800f4d8 <_printf_float+0x16c>
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d09c      	beq.n	800f41a <_printf_float+0xae>
 800f4e0:	232d      	movs	r3, #45	; 0x2d
 800f4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4e6:	e798      	b.n	800f41a <_printf_float+0xae>
 800f4e8:	9a06      	ldr	r2, [sp, #24]
 800f4ea:	2a47      	cmp	r2, #71	; 0x47
 800f4ec:	d1be      	bne.n	800f46c <_printf_float+0x100>
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1bc      	bne.n	800f46c <_printf_float+0x100>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e7b9      	b.n	800f46a <_printf_float+0xfe>
 800f4f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f4fa:	d118      	bne.n	800f52e <_printf_float+0x1c2>
 800f4fc:	2900      	cmp	r1, #0
 800f4fe:	6863      	ldr	r3, [r4, #4]
 800f500:	dd0b      	ble.n	800f51a <_printf_float+0x1ae>
 800f502:	6121      	str	r1, [r4, #16]
 800f504:	b913      	cbnz	r3, 800f50c <_printf_float+0x1a0>
 800f506:	6822      	ldr	r2, [r4, #0]
 800f508:	07d0      	lsls	r0, r2, #31
 800f50a:	d502      	bpl.n	800f512 <_printf_float+0x1a6>
 800f50c:	3301      	adds	r3, #1
 800f50e:	440b      	add	r3, r1
 800f510:	6123      	str	r3, [r4, #16]
 800f512:	65a1      	str	r1, [r4, #88]	; 0x58
 800f514:	f04f 0900 	mov.w	r9, #0
 800f518:	e7de      	b.n	800f4d8 <_printf_float+0x16c>
 800f51a:	b913      	cbnz	r3, 800f522 <_printf_float+0x1b6>
 800f51c:	6822      	ldr	r2, [r4, #0]
 800f51e:	07d2      	lsls	r2, r2, #31
 800f520:	d501      	bpl.n	800f526 <_printf_float+0x1ba>
 800f522:	3302      	adds	r3, #2
 800f524:	e7f4      	b.n	800f510 <_printf_float+0x1a4>
 800f526:	2301      	movs	r3, #1
 800f528:	e7f2      	b.n	800f510 <_printf_float+0x1a4>
 800f52a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f530:	4299      	cmp	r1, r3
 800f532:	db05      	blt.n	800f540 <_printf_float+0x1d4>
 800f534:	6823      	ldr	r3, [r4, #0]
 800f536:	6121      	str	r1, [r4, #16]
 800f538:	07d8      	lsls	r0, r3, #31
 800f53a:	d5ea      	bpl.n	800f512 <_printf_float+0x1a6>
 800f53c:	1c4b      	adds	r3, r1, #1
 800f53e:	e7e7      	b.n	800f510 <_printf_float+0x1a4>
 800f540:	2900      	cmp	r1, #0
 800f542:	bfd4      	ite	le
 800f544:	f1c1 0202 	rsble	r2, r1, #2
 800f548:	2201      	movgt	r2, #1
 800f54a:	4413      	add	r3, r2
 800f54c:	e7e0      	b.n	800f510 <_printf_float+0x1a4>
 800f54e:	6823      	ldr	r3, [r4, #0]
 800f550:	055a      	lsls	r2, r3, #21
 800f552:	d407      	bmi.n	800f564 <_printf_float+0x1f8>
 800f554:	6923      	ldr	r3, [r4, #16]
 800f556:	4642      	mov	r2, r8
 800f558:	4631      	mov	r1, r6
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b8      	blx	r7
 800f55e:	3001      	adds	r0, #1
 800f560:	d12c      	bne.n	800f5bc <_printf_float+0x250>
 800f562:	e764      	b.n	800f42e <_printf_float+0xc2>
 800f564:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f568:	f240 80e0 	bls.w	800f72c <_printf_float+0x3c0>
 800f56c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f570:	2200      	movs	r2, #0
 800f572:	2300      	movs	r3, #0
 800f574:	f7f1 fad8 	bl	8000b28 <__aeabi_dcmpeq>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d034      	beq.n	800f5e6 <_printf_float+0x27a>
 800f57c:	4a37      	ldr	r2, [pc, #220]	; (800f65c <_printf_float+0x2f0>)
 800f57e:	2301      	movs	r3, #1
 800f580:	4631      	mov	r1, r6
 800f582:	4628      	mov	r0, r5
 800f584:	47b8      	blx	r7
 800f586:	3001      	adds	r0, #1
 800f588:	f43f af51 	beq.w	800f42e <_printf_float+0xc2>
 800f58c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f590:	429a      	cmp	r2, r3
 800f592:	db02      	blt.n	800f59a <_printf_float+0x22e>
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	07d8      	lsls	r0, r3, #31
 800f598:	d510      	bpl.n	800f5bc <_printf_float+0x250>
 800f59a:	ee18 3a10 	vmov	r3, s16
 800f59e:	4652      	mov	r2, sl
 800f5a0:	4631      	mov	r1, r6
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	47b8      	blx	r7
 800f5a6:	3001      	adds	r0, #1
 800f5a8:	f43f af41 	beq.w	800f42e <_printf_float+0xc2>
 800f5ac:	f04f 0800 	mov.w	r8, #0
 800f5b0:	f104 091a 	add.w	r9, r4, #26
 800f5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	4543      	cmp	r3, r8
 800f5ba:	dc09      	bgt.n	800f5d0 <_printf_float+0x264>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	079b      	lsls	r3, r3, #30
 800f5c0:	f100 8105 	bmi.w	800f7ce <_printf_float+0x462>
 800f5c4:	68e0      	ldr	r0, [r4, #12]
 800f5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5c8:	4298      	cmp	r0, r3
 800f5ca:	bfb8      	it	lt
 800f5cc:	4618      	movlt	r0, r3
 800f5ce:	e730      	b.n	800f432 <_printf_float+0xc6>
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	464a      	mov	r2, r9
 800f5d4:	4631      	mov	r1, r6
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	47b8      	blx	r7
 800f5da:	3001      	adds	r0, #1
 800f5dc:	f43f af27 	beq.w	800f42e <_printf_float+0xc2>
 800f5e0:	f108 0801 	add.w	r8, r8, #1
 800f5e4:	e7e6      	b.n	800f5b4 <_printf_float+0x248>
 800f5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dc39      	bgt.n	800f660 <_printf_float+0x2f4>
 800f5ec:	4a1b      	ldr	r2, [pc, #108]	; (800f65c <_printf_float+0x2f0>)
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	47b8      	blx	r7
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	f43f af19 	beq.w	800f42e <_printf_float+0xc2>
 800f5fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f600:	4313      	orrs	r3, r2
 800f602:	d102      	bne.n	800f60a <_printf_float+0x29e>
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	07d9      	lsls	r1, r3, #31
 800f608:	d5d8      	bpl.n	800f5bc <_printf_float+0x250>
 800f60a:	ee18 3a10 	vmov	r3, s16
 800f60e:	4652      	mov	r2, sl
 800f610:	4631      	mov	r1, r6
 800f612:	4628      	mov	r0, r5
 800f614:	47b8      	blx	r7
 800f616:	3001      	adds	r0, #1
 800f618:	f43f af09 	beq.w	800f42e <_printf_float+0xc2>
 800f61c:	f04f 0900 	mov.w	r9, #0
 800f620:	f104 0a1a 	add.w	sl, r4, #26
 800f624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f626:	425b      	negs	r3, r3
 800f628:	454b      	cmp	r3, r9
 800f62a:	dc01      	bgt.n	800f630 <_printf_float+0x2c4>
 800f62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f62e:	e792      	b.n	800f556 <_printf_float+0x1ea>
 800f630:	2301      	movs	r3, #1
 800f632:	4652      	mov	r2, sl
 800f634:	4631      	mov	r1, r6
 800f636:	4628      	mov	r0, r5
 800f638:	47b8      	blx	r7
 800f63a:	3001      	adds	r0, #1
 800f63c:	f43f aef7 	beq.w	800f42e <_printf_float+0xc2>
 800f640:	f109 0901 	add.w	r9, r9, #1
 800f644:	e7ee      	b.n	800f624 <_printf_float+0x2b8>
 800f646:	bf00      	nop
 800f648:	7fefffff 	.word	0x7fefffff
 800f64c:	0802b054 	.word	0x0802b054
 800f650:	0802b058 	.word	0x0802b058
 800f654:	0802b060 	.word	0x0802b060
 800f658:	0802b05c 	.word	0x0802b05c
 800f65c:	0802b064 	.word	0x0802b064
 800f660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f664:	429a      	cmp	r2, r3
 800f666:	bfa8      	it	ge
 800f668:	461a      	movge	r2, r3
 800f66a:	2a00      	cmp	r2, #0
 800f66c:	4691      	mov	r9, r2
 800f66e:	dc37      	bgt.n	800f6e0 <_printf_float+0x374>
 800f670:	f04f 0b00 	mov.w	fp, #0
 800f674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f678:	f104 021a 	add.w	r2, r4, #26
 800f67c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f67e:	9305      	str	r3, [sp, #20]
 800f680:	eba3 0309 	sub.w	r3, r3, r9
 800f684:	455b      	cmp	r3, fp
 800f686:	dc33      	bgt.n	800f6f0 <_printf_float+0x384>
 800f688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f68c:	429a      	cmp	r2, r3
 800f68e:	db3b      	blt.n	800f708 <_printf_float+0x39c>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	07da      	lsls	r2, r3, #31
 800f694:	d438      	bmi.n	800f708 <_printf_float+0x39c>
 800f696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f698:	9a05      	ldr	r2, [sp, #20]
 800f69a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f69c:	1a9a      	subs	r2, r3, r2
 800f69e:	eba3 0901 	sub.w	r9, r3, r1
 800f6a2:	4591      	cmp	r9, r2
 800f6a4:	bfa8      	it	ge
 800f6a6:	4691      	movge	r9, r2
 800f6a8:	f1b9 0f00 	cmp.w	r9, #0
 800f6ac:	dc35      	bgt.n	800f71a <_printf_float+0x3ae>
 800f6ae:	f04f 0800 	mov.w	r8, #0
 800f6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6b6:	f104 0a1a 	add.w	sl, r4, #26
 800f6ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6be:	1a9b      	subs	r3, r3, r2
 800f6c0:	eba3 0309 	sub.w	r3, r3, r9
 800f6c4:	4543      	cmp	r3, r8
 800f6c6:	f77f af79 	ble.w	800f5bc <_printf_float+0x250>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	4652      	mov	r2, sl
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b8      	blx	r7
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	f43f aeaa 	beq.w	800f42e <_printf_float+0xc2>
 800f6da:	f108 0801 	add.w	r8, r8, #1
 800f6de:	e7ec      	b.n	800f6ba <_printf_float+0x34e>
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	4642      	mov	r2, r8
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	47b8      	blx	r7
 800f6ea:	3001      	adds	r0, #1
 800f6ec:	d1c0      	bne.n	800f670 <_printf_float+0x304>
 800f6ee:	e69e      	b.n	800f42e <_printf_float+0xc2>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	9205      	str	r2, [sp, #20]
 800f6f8:	47b8      	blx	r7
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	f43f ae97 	beq.w	800f42e <_printf_float+0xc2>
 800f700:	9a05      	ldr	r2, [sp, #20]
 800f702:	f10b 0b01 	add.w	fp, fp, #1
 800f706:	e7b9      	b.n	800f67c <_printf_float+0x310>
 800f708:	ee18 3a10 	vmov	r3, s16
 800f70c:	4652      	mov	r2, sl
 800f70e:	4631      	mov	r1, r6
 800f710:	4628      	mov	r0, r5
 800f712:	47b8      	blx	r7
 800f714:	3001      	adds	r0, #1
 800f716:	d1be      	bne.n	800f696 <_printf_float+0x32a>
 800f718:	e689      	b.n	800f42e <_printf_float+0xc2>
 800f71a:	9a05      	ldr	r2, [sp, #20]
 800f71c:	464b      	mov	r3, r9
 800f71e:	4442      	add	r2, r8
 800f720:	4631      	mov	r1, r6
 800f722:	4628      	mov	r0, r5
 800f724:	47b8      	blx	r7
 800f726:	3001      	adds	r0, #1
 800f728:	d1c1      	bne.n	800f6ae <_printf_float+0x342>
 800f72a:	e680      	b.n	800f42e <_printf_float+0xc2>
 800f72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f72e:	2a01      	cmp	r2, #1
 800f730:	dc01      	bgt.n	800f736 <_printf_float+0x3ca>
 800f732:	07db      	lsls	r3, r3, #31
 800f734:	d538      	bpl.n	800f7a8 <_printf_float+0x43c>
 800f736:	2301      	movs	r3, #1
 800f738:	4642      	mov	r2, r8
 800f73a:	4631      	mov	r1, r6
 800f73c:	4628      	mov	r0, r5
 800f73e:	47b8      	blx	r7
 800f740:	3001      	adds	r0, #1
 800f742:	f43f ae74 	beq.w	800f42e <_printf_float+0xc2>
 800f746:	ee18 3a10 	vmov	r3, s16
 800f74a:	4652      	mov	r2, sl
 800f74c:	4631      	mov	r1, r6
 800f74e:	4628      	mov	r0, r5
 800f750:	47b8      	blx	r7
 800f752:	3001      	adds	r0, #1
 800f754:	f43f ae6b 	beq.w	800f42e <_printf_float+0xc2>
 800f758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f75c:	2200      	movs	r2, #0
 800f75e:	2300      	movs	r3, #0
 800f760:	f7f1 f9e2 	bl	8000b28 <__aeabi_dcmpeq>
 800f764:	b9d8      	cbnz	r0, 800f79e <_printf_float+0x432>
 800f766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f768:	f108 0201 	add.w	r2, r8, #1
 800f76c:	3b01      	subs	r3, #1
 800f76e:	4631      	mov	r1, r6
 800f770:	4628      	mov	r0, r5
 800f772:	47b8      	blx	r7
 800f774:	3001      	adds	r0, #1
 800f776:	d10e      	bne.n	800f796 <_printf_float+0x42a>
 800f778:	e659      	b.n	800f42e <_printf_float+0xc2>
 800f77a:	2301      	movs	r3, #1
 800f77c:	4652      	mov	r2, sl
 800f77e:	4631      	mov	r1, r6
 800f780:	4628      	mov	r0, r5
 800f782:	47b8      	blx	r7
 800f784:	3001      	adds	r0, #1
 800f786:	f43f ae52 	beq.w	800f42e <_printf_float+0xc2>
 800f78a:	f108 0801 	add.w	r8, r8, #1
 800f78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f790:	3b01      	subs	r3, #1
 800f792:	4543      	cmp	r3, r8
 800f794:	dcf1      	bgt.n	800f77a <_printf_float+0x40e>
 800f796:	464b      	mov	r3, r9
 800f798:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f79c:	e6dc      	b.n	800f558 <_printf_float+0x1ec>
 800f79e:	f04f 0800 	mov.w	r8, #0
 800f7a2:	f104 0a1a 	add.w	sl, r4, #26
 800f7a6:	e7f2      	b.n	800f78e <_printf_float+0x422>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	4642      	mov	r2, r8
 800f7ac:	e7df      	b.n	800f76e <_printf_float+0x402>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	464a      	mov	r2, r9
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	47b8      	blx	r7
 800f7b8:	3001      	adds	r0, #1
 800f7ba:	f43f ae38 	beq.w	800f42e <_printf_float+0xc2>
 800f7be:	f108 0801 	add.w	r8, r8, #1
 800f7c2:	68e3      	ldr	r3, [r4, #12]
 800f7c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7c6:	1a5b      	subs	r3, r3, r1
 800f7c8:	4543      	cmp	r3, r8
 800f7ca:	dcf0      	bgt.n	800f7ae <_printf_float+0x442>
 800f7cc:	e6fa      	b.n	800f5c4 <_printf_float+0x258>
 800f7ce:	f04f 0800 	mov.w	r8, #0
 800f7d2:	f104 0919 	add.w	r9, r4, #25
 800f7d6:	e7f4      	b.n	800f7c2 <_printf_float+0x456>

0800f7d8 <_printf_common>:
 800f7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7dc:	4616      	mov	r6, r2
 800f7de:	4699      	mov	r9, r3
 800f7e0:	688a      	ldr	r2, [r1, #8]
 800f7e2:	690b      	ldr	r3, [r1, #16]
 800f7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	bfb8      	it	lt
 800f7ec:	4613      	movlt	r3, r2
 800f7ee:	6033      	str	r3, [r6, #0]
 800f7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7f4:	4607      	mov	r7, r0
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	b10a      	cbz	r2, 800f7fe <_printf_common+0x26>
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	6033      	str	r3, [r6, #0]
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	0699      	lsls	r1, r3, #26
 800f802:	bf42      	ittt	mi
 800f804:	6833      	ldrmi	r3, [r6, #0]
 800f806:	3302      	addmi	r3, #2
 800f808:	6033      	strmi	r3, [r6, #0]
 800f80a:	6825      	ldr	r5, [r4, #0]
 800f80c:	f015 0506 	ands.w	r5, r5, #6
 800f810:	d106      	bne.n	800f820 <_printf_common+0x48>
 800f812:	f104 0a19 	add.w	sl, r4, #25
 800f816:	68e3      	ldr	r3, [r4, #12]
 800f818:	6832      	ldr	r2, [r6, #0]
 800f81a:	1a9b      	subs	r3, r3, r2
 800f81c:	42ab      	cmp	r3, r5
 800f81e:	dc26      	bgt.n	800f86e <_printf_common+0x96>
 800f820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f824:	1e13      	subs	r3, r2, #0
 800f826:	6822      	ldr	r2, [r4, #0]
 800f828:	bf18      	it	ne
 800f82a:	2301      	movne	r3, #1
 800f82c:	0692      	lsls	r2, r2, #26
 800f82e:	d42b      	bmi.n	800f888 <_printf_common+0xb0>
 800f830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f834:	4649      	mov	r1, r9
 800f836:	4638      	mov	r0, r7
 800f838:	47c0      	blx	r8
 800f83a:	3001      	adds	r0, #1
 800f83c:	d01e      	beq.n	800f87c <_printf_common+0xa4>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	68e5      	ldr	r5, [r4, #12]
 800f842:	6832      	ldr	r2, [r6, #0]
 800f844:	f003 0306 	and.w	r3, r3, #6
 800f848:	2b04      	cmp	r3, #4
 800f84a:	bf08      	it	eq
 800f84c:	1aad      	subeq	r5, r5, r2
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	6922      	ldr	r2, [r4, #16]
 800f852:	bf0c      	ite	eq
 800f854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f858:	2500      	movne	r5, #0
 800f85a:	4293      	cmp	r3, r2
 800f85c:	bfc4      	itt	gt
 800f85e:	1a9b      	subgt	r3, r3, r2
 800f860:	18ed      	addgt	r5, r5, r3
 800f862:	2600      	movs	r6, #0
 800f864:	341a      	adds	r4, #26
 800f866:	42b5      	cmp	r5, r6
 800f868:	d11a      	bne.n	800f8a0 <_printf_common+0xc8>
 800f86a:	2000      	movs	r0, #0
 800f86c:	e008      	b.n	800f880 <_printf_common+0xa8>
 800f86e:	2301      	movs	r3, #1
 800f870:	4652      	mov	r2, sl
 800f872:	4649      	mov	r1, r9
 800f874:	4638      	mov	r0, r7
 800f876:	47c0      	blx	r8
 800f878:	3001      	adds	r0, #1
 800f87a:	d103      	bne.n	800f884 <_printf_common+0xac>
 800f87c:	f04f 30ff 	mov.w	r0, #4294967295
 800f880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f884:	3501      	adds	r5, #1
 800f886:	e7c6      	b.n	800f816 <_printf_common+0x3e>
 800f888:	18e1      	adds	r1, r4, r3
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	2030      	movs	r0, #48	; 0x30
 800f88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f892:	4422      	add	r2, r4
 800f894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f89c:	3302      	adds	r3, #2
 800f89e:	e7c7      	b.n	800f830 <_printf_common+0x58>
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	4622      	mov	r2, r4
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	4638      	mov	r0, r7
 800f8a8:	47c0      	blx	r8
 800f8aa:	3001      	adds	r0, #1
 800f8ac:	d0e6      	beq.n	800f87c <_printf_common+0xa4>
 800f8ae:	3601      	adds	r6, #1
 800f8b0:	e7d9      	b.n	800f866 <_printf_common+0x8e>
	...

0800f8b4 <_printf_i>:
 800f8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b8:	7e0f      	ldrb	r7, [r1, #24]
 800f8ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f8bc:	2f78      	cmp	r7, #120	; 0x78
 800f8be:	4691      	mov	r9, r2
 800f8c0:	4680      	mov	r8, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	469a      	mov	sl, r3
 800f8c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f8ca:	d807      	bhi.n	800f8dc <_printf_i+0x28>
 800f8cc:	2f62      	cmp	r7, #98	; 0x62
 800f8ce:	d80a      	bhi.n	800f8e6 <_printf_i+0x32>
 800f8d0:	2f00      	cmp	r7, #0
 800f8d2:	f000 80d8 	beq.w	800fa86 <_printf_i+0x1d2>
 800f8d6:	2f58      	cmp	r7, #88	; 0x58
 800f8d8:	f000 80a3 	beq.w	800fa22 <_printf_i+0x16e>
 800f8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f8e4:	e03a      	b.n	800f95c <_printf_i+0xa8>
 800f8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8ea:	2b15      	cmp	r3, #21
 800f8ec:	d8f6      	bhi.n	800f8dc <_printf_i+0x28>
 800f8ee:	a101      	add	r1, pc, #4	; (adr r1, 800f8f4 <_printf_i+0x40>)
 800f8f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8f4:	0800f94d 	.word	0x0800f94d
 800f8f8:	0800f961 	.word	0x0800f961
 800f8fc:	0800f8dd 	.word	0x0800f8dd
 800f900:	0800f8dd 	.word	0x0800f8dd
 800f904:	0800f8dd 	.word	0x0800f8dd
 800f908:	0800f8dd 	.word	0x0800f8dd
 800f90c:	0800f961 	.word	0x0800f961
 800f910:	0800f8dd 	.word	0x0800f8dd
 800f914:	0800f8dd 	.word	0x0800f8dd
 800f918:	0800f8dd 	.word	0x0800f8dd
 800f91c:	0800f8dd 	.word	0x0800f8dd
 800f920:	0800fa6d 	.word	0x0800fa6d
 800f924:	0800f991 	.word	0x0800f991
 800f928:	0800fa4f 	.word	0x0800fa4f
 800f92c:	0800f8dd 	.word	0x0800f8dd
 800f930:	0800f8dd 	.word	0x0800f8dd
 800f934:	0800fa8f 	.word	0x0800fa8f
 800f938:	0800f8dd 	.word	0x0800f8dd
 800f93c:	0800f991 	.word	0x0800f991
 800f940:	0800f8dd 	.word	0x0800f8dd
 800f944:	0800f8dd 	.word	0x0800f8dd
 800f948:	0800fa57 	.word	0x0800fa57
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	1d1a      	adds	r2, r3, #4
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	602a      	str	r2, [r5, #0]
 800f954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f95c:	2301      	movs	r3, #1
 800f95e:	e0a3      	b.n	800faa8 <_printf_i+0x1f4>
 800f960:	6820      	ldr	r0, [r4, #0]
 800f962:	6829      	ldr	r1, [r5, #0]
 800f964:	0606      	lsls	r6, r0, #24
 800f966:	f101 0304 	add.w	r3, r1, #4
 800f96a:	d50a      	bpl.n	800f982 <_printf_i+0xce>
 800f96c:	680e      	ldr	r6, [r1, #0]
 800f96e:	602b      	str	r3, [r5, #0]
 800f970:	2e00      	cmp	r6, #0
 800f972:	da03      	bge.n	800f97c <_printf_i+0xc8>
 800f974:	232d      	movs	r3, #45	; 0x2d
 800f976:	4276      	negs	r6, r6
 800f978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f97c:	485e      	ldr	r0, [pc, #376]	; (800faf8 <_printf_i+0x244>)
 800f97e:	230a      	movs	r3, #10
 800f980:	e019      	b.n	800f9b6 <_printf_i+0x102>
 800f982:	680e      	ldr	r6, [r1, #0]
 800f984:	602b      	str	r3, [r5, #0]
 800f986:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f98a:	bf18      	it	ne
 800f98c:	b236      	sxthne	r6, r6
 800f98e:	e7ef      	b.n	800f970 <_printf_i+0xbc>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	6820      	ldr	r0, [r4, #0]
 800f994:	1d19      	adds	r1, r3, #4
 800f996:	6029      	str	r1, [r5, #0]
 800f998:	0601      	lsls	r1, r0, #24
 800f99a:	d501      	bpl.n	800f9a0 <_printf_i+0xec>
 800f99c:	681e      	ldr	r6, [r3, #0]
 800f99e:	e002      	b.n	800f9a6 <_printf_i+0xf2>
 800f9a0:	0646      	lsls	r6, r0, #25
 800f9a2:	d5fb      	bpl.n	800f99c <_printf_i+0xe8>
 800f9a4:	881e      	ldrh	r6, [r3, #0]
 800f9a6:	4854      	ldr	r0, [pc, #336]	; (800faf8 <_printf_i+0x244>)
 800f9a8:	2f6f      	cmp	r7, #111	; 0x6f
 800f9aa:	bf0c      	ite	eq
 800f9ac:	2308      	moveq	r3, #8
 800f9ae:	230a      	movne	r3, #10
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9b6:	6865      	ldr	r5, [r4, #4]
 800f9b8:	60a5      	str	r5, [r4, #8]
 800f9ba:	2d00      	cmp	r5, #0
 800f9bc:	bfa2      	ittt	ge
 800f9be:	6821      	ldrge	r1, [r4, #0]
 800f9c0:	f021 0104 	bicge.w	r1, r1, #4
 800f9c4:	6021      	strge	r1, [r4, #0]
 800f9c6:	b90e      	cbnz	r6, 800f9cc <_printf_i+0x118>
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	d04d      	beq.n	800fa68 <_printf_i+0x1b4>
 800f9cc:	4615      	mov	r5, r2
 800f9ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800f9d2:	fb03 6711 	mls	r7, r3, r1, r6
 800f9d6:	5dc7      	ldrb	r7, [r0, r7]
 800f9d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f9dc:	4637      	mov	r7, r6
 800f9de:	42bb      	cmp	r3, r7
 800f9e0:	460e      	mov	r6, r1
 800f9e2:	d9f4      	bls.n	800f9ce <_printf_i+0x11a>
 800f9e4:	2b08      	cmp	r3, #8
 800f9e6:	d10b      	bne.n	800fa00 <_printf_i+0x14c>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	07de      	lsls	r6, r3, #31
 800f9ec:	d508      	bpl.n	800fa00 <_printf_i+0x14c>
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	6861      	ldr	r1, [r4, #4]
 800f9f2:	4299      	cmp	r1, r3
 800f9f4:	bfde      	ittt	le
 800f9f6:	2330      	movle	r3, #48	; 0x30
 800f9f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f9fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa00:	1b52      	subs	r2, r2, r5
 800fa02:	6122      	str	r2, [r4, #16]
 800fa04:	f8cd a000 	str.w	sl, [sp]
 800fa08:	464b      	mov	r3, r9
 800fa0a:	aa03      	add	r2, sp, #12
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	4640      	mov	r0, r8
 800fa10:	f7ff fee2 	bl	800f7d8 <_printf_common>
 800fa14:	3001      	adds	r0, #1
 800fa16:	d14c      	bne.n	800fab2 <_printf_i+0x1fe>
 800fa18:	f04f 30ff 	mov.w	r0, #4294967295
 800fa1c:	b004      	add	sp, #16
 800fa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa22:	4835      	ldr	r0, [pc, #212]	; (800faf8 <_printf_i+0x244>)
 800fa24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fa28:	6829      	ldr	r1, [r5, #0]
 800fa2a:	6823      	ldr	r3, [r4, #0]
 800fa2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fa30:	6029      	str	r1, [r5, #0]
 800fa32:	061d      	lsls	r5, r3, #24
 800fa34:	d514      	bpl.n	800fa60 <_printf_i+0x1ac>
 800fa36:	07df      	lsls	r7, r3, #31
 800fa38:	bf44      	itt	mi
 800fa3a:	f043 0320 	orrmi.w	r3, r3, #32
 800fa3e:	6023      	strmi	r3, [r4, #0]
 800fa40:	b91e      	cbnz	r6, 800fa4a <_printf_i+0x196>
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	f023 0320 	bic.w	r3, r3, #32
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	2310      	movs	r3, #16
 800fa4c:	e7b0      	b.n	800f9b0 <_printf_i+0xfc>
 800fa4e:	6823      	ldr	r3, [r4, #0]
 800fa50:	f043 0320 	orr.w	r3, r3, #32
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	2378      	movs	r3, #120	; 0x78
 800fa58:	4828      	ldr	r0, [pc, #160]	; (800fafc <_printf_i+0x248>)
 800fa5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa5e:	e7e3      	b.n	800fa28 <_printf_i+0x174>
 800fa60:	0659      	lsls	r1, r3, #25
 800fa62:	bf48      	it	mi
 800fa64:	b2b6      	uxthmi	r6, r6
 800fa66:	e7e6      	b.n	800fa36 <_printf_i+0x182>
 800fa68:	4615      	mov	r5, r2
 800fa6a:	e7bb      	b.n	800f9e4 <_printf_i+0x130>
 800fa6c:	682b      	ldr	r3, [r5, #0]
 800fa6e:	6826      	ldr	r6, [r4, #0]
 800fa70:	6961      	ldr	r1, [r4, #20]
 800fa72:	1d18      	adds	r0, r3, #4
 800fa74:	6028      	str	r0, [r5, #0]
 800fa76:	0635      	lsls	r5, r6, #24
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	d501      	bpl.n	800fa80 <_printf_i+0x1cc>
 800fa7c:	6019      	str	r1, [r3, #0]
 800fa7e:	e002      	b.n	800fa86 <_printf_i+0x1d2>
 800fa80:	0670      	lsls	r0, r6, #25
 800fa82:	d5fb      	bpl.n	800fa7c <_printf_i+0x1c8>
 800fa84:	8019      	strh	r1, [r3, #0]
 800fa86:	2300      	movs	r3, #0
 800fa88:	6123      	str	r3, [r4, #16]
 800fa8a:	4615      	mov	r5, r2
 800fa8c:	e7ba      	b.n	800fa04 <_printf_i+0x150>
 800fa8e:	682b      	ldr	r3, [r5, #0]
 800fa90:	1d1a      	adds	r2, r3, #4
 800fa92:	602a      	str	r2, [r5, #0]
 800fa94:	681d      	ldr	r5, [r3, #0]
 800fa96:	6862      	ldr	r2, [r4, #4]
 800fa98:	2100      	movs	r1, #0
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f7f0 fbd0 	bl	8000240 <memchr>
 800faa0:	b108      	cbz	r0, 800faa6 <_printf_i+0x1f2>
 800faa2:	1b40      	subs	r0, r0, r5
 800faa4:	6060      	str	r0, [r4, #4]
 800faa6:	6863      	ldr	r3, [r4, #4]
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	2300      	movs	r3, #0
 800faac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fab0:	e7a8      	b.n	800fa04 <_printf_i+0x150>
 800fab2:	6923      	ldr	r3, [r4, #16]
 800fab4:	462a      	mov	r2, r5
 800fab6:	4649      	mov	r1, r9
 800fab8:	4640      	mov	r0, r8
 800faba:	47d0      	blx	sl
 800fabc:	3001      	adds	r0, #1
 800fabe:	d0ab      	beq.n	800fa18 <_printf_i+0x164>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	079b      	lsls	r3, r3, #30
 800fac4:	d413      	bmi.n	800faee <_printf_i+0x23a>
 800fac6:	68e0      	ldr	r0, [r4, #12]
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	4298      	cmp	r0, r3
 800facc:	bfb8      	it	lt
 800face:	4618      	movlt	r0, r3
 800fad0:	e7a4      	b.n	800fa1c <_printf_i+0x168>
 800fad2:	2301      	movs	r3, #1
 800fad4:	4632      	mov	r2, r6
 800fad6:	4649      	mov	r1, r9
 800fad8:	4640      	mov	r0, r8
 800fada:	47d0      	blx	sl
 800fadc:	3001      	adds	r0, #1
 800fade:	d09b      	beq.n	800fa18 <_printf_i+0x164>
 800fae0:	3501      	adds	r5, #1
 800fae2:	68e3      	ldr	r3, [r4, #12]
 800fae4:	9903      	ldr	r1, [sp, #12]
 800fae6:	1a5b      	subs	r3, r3, r1
 800fae8:	42ab      	cmp	r3, r5
 800faea:	dcf2      	bgt.n	800fad2 <_printf_i+0x21e>
 800faec:	e7eb      	b.n	800fac6 <_printf_i+0x212>
 800faee:	2500      	movs	r5, #0
 800faf0:	f104 0619 	add.w	r6, r4, #25
 800faf4:	e7f5      	b.n	800fae2 <_printf_i+0x22e>
 800faf6:	bf00      	nop
 800faf8:	0802b066 	.word	0x0802b066
 800fafc:	0802b077 	.word	0x0802b077

0800fb00 <_sbrk_r>:
 800fb00:	b538      	push	{r3, r4, r5, lr}
 800fb02:	4d06      	ldr	r5, [pc, #24]	; (800fb1c <_sbrk_r+0x1c>)
 800fb04:	2300      	movs	r3, #0
 800fb06:	4604      	mov	r4, r0
 800fb08:	4608      	mov	r0, r1
 800fb0a:	602b      	str	r3, [r5, #0]
 800fb0c:	f7f2 fb6c 	bl	80021e8 <_sbrk>
 800fb10:	1c43      	adds	r3, r0, #1
 800fb12:	d102      	bne.n	800fb1a <_sbrk_r+0x1a>
 800fb14:	682b      	ldr	r3, [r5, #0]
 800fb16:	b103      	cbz	r3, 800fb1a <_sbrk_r+0x1a>
 800fb18:	6023      	str	r3, [r4, #0]
 800fb1a:	bd38      	pop	{r3, r4, r5, pc}
 800fb1c:	20004bd0 	.word	0x20004bd0

0800fb20 <siprintf>:
 800fb20:	b40e      	push	{r1, r2, r3}
 800fb22:	b500      	push	{lr}
 800fb24:	b09c      	sub	sp, #112	; 0x70
 800fb26:	ab1d      	add	r3, sp, #116	; 0x74
 800fb28:	9002      	str	r0, [sp, #8]
 800fb2a:	9006      	str	r0, [sp, #24]
 800fb2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb30:	4809      	ldr	r0, [pc, #36]	; (800fb58 <siprintf+0x38>)
 800fb32:	9107      	str	r1, [sp, #28]
 800fb34:	9104      	str	r1, [sp, #16]
 800fb36:	4909      	ldr	r1, [pc, #36]	; (800fb5c <siprintf+0x3c>)
 800fb38:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb3c:	9105      	str	r1, [sp, #20]
 800fb3e:	6800      	ldr	r0, [r0, #0]
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	a902      	add	r1, sp, #8
 800fb44:	f001 fac2 	bl	80110cc <_svfiprintf_r>
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	701a      	strb	r2, [r3, #0]
 800fb4e:	b01c      	add	sp, #112	; 0x70
 800fb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb54:	b003      	add	sp, #12
 800fb56:	4770      	bx	lr
 800fb58:	20001888 	.word	0x20001888
 800fb5c:	ffff0208 	.word	0xffff0208

0800fb60 <strcpy>:
 800fb60:	4603      	mov	r3, r0
 800fb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb66:	f803 2b01 	strb.w	r2, [r3], #1
 800fb6a:	2a00      	cmp	r2, #0
 800fb6c:	d1f9      	bne.n	800fb62 <strcpy+0x2>
 800fb6e:	4770      	bx	lr

0800fb70 <quorem>:
 800fb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	6903      	ldr	r3, [r0, #16]
 800fb76:	690c      	ldr	r4, [r1, #16]
 800fb78:	42a3      	cmp	r3, r4
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	f2c0 8081 	blt.w	800fc82 <quorem+0x112>
 800fb80:	3c01      	subs	r4, #1
 800fb82:	f101 0814 	add.w	r8, r1, #20
 800fb86:	f100 0514 	add.w	r5, r0, #20
 800fb8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fba4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fba8:	d331      	bcc.n	800fc0e <quorem+0x9e>
 800fbaa:	f04f 0e00 	mov.w	lr, #0
 800fbae:	4640      	mov	r0, r8
 800fbb0:	46ac      	mov	ip, r5
 800fbb2:	46f2      	mov	sl, lr
 800fbb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbb8:	b293      	uxth	r3, r2
 800fbba:	fb06 e303 	mla	r3, r6, r3, lr
 800fbbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	ebaa 0303 	sub.w	r3, sl, r3
 800fbc8:	f8dc a000 	ldr.w	sl, [ip]
 800fbcc:	0c12      	lsrs	r2, r2, #16
 800fbce:	fa13 f38a 	uxtah	r3, r3, sl
 800fbd2:	fb06 e202 	mla	r2, r6, r2, lr
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	9b00      	ldr	r3, [sp, #0]
 800fbda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbde:	b292      	uxth	r2, r2
 800fbe0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fbe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbe8:	f8bd 3000 	ldrh.w	r3, [sp]
 800fbec:	4581      	cmp	r9, r0
 800fbee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbf2:	f84c 3b04 	str.w	r3, [ip], #4
 800fbf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fbfa:	d2db      	bcs.n	800fbb4 <quorem+0x44>
 800fbfc:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc00:	b92b      	cbnz	r3, 800fc0e <quorem+0x9e>
 800fc02:	9b01      	ldr	r3, [sp, #4]
 800fc04:	3b04      	subs	r3, #4
 800fc06:	429d      	cmp	r5, r3
 800fc08:	461a      	mov	r2, r3
 800fc0a:	d32e      	bcc.n	800fc6a <quorem+0xfa>
 800fc0c:	613c      	str	r4, [r7, #16]
 800fc0e:	4638      	mov	r0, r7
 800fc10:	f001 f8ba 	bl	8010d88 <__mcmp>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	db24      	blt.n	800fc62 <quorem+0xf2>
 800fc18:	3601      	adds	r6, #1
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f04f 0c00 	mov.w	ip, #0
 800fc20:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc24:	f8d0 e000 	ldr.w	lr, [r0]
 800fc28:	b293      	uxth	r3, r2
 800fc2a:	ebac 0303 	sub.w	r3, ip, r3
 800fc2e:	0c12      	lsrs	r2, r2, #16
 800fc30:	fa13 f38e 	uxtah	r3, r3, lr
 800fc34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc42:	45c1      	cmp	r9, r8
 800fc44:	f840 3b04 	str.w	r3, [r0], #4
 800fc48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc4c:	d2e8      	bcs.n	800fc20 <quorem+0xb0>
 800fc4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc56:	b922      	cbnz	r2, 800fc62 <quorem+0xf2>
 800fc58:	3b04      	subs	r3, #4
 800fc5a:	429d      	cmp	r5, r3
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	d30a      	bcc.n	800fc76 <quorem+0x106>
 800fc60:	613c      	str	r4, [r7, #16]
 800fc62:	4630      	mov	r0, r6
 800fc64:	b003      	add	sp, #12
 800fc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6a:	6812      	ldr	r2, [r2, #0]
 800fc6c:	3b04      	subs	r3, #4
 800fc6e:	2a00      	cmp	r2, #0
 800fc70:	d1cc      	bne.n	800fc0c <quorem+0x9c>
 800fc72:	3c01      	subs	r4, #1
 800fc74:	e7c7      	b.n	800fc06 <quorem+0x96>
 800fc76:	6812      	ldr	r2, [r2, #0]
 800fc78:	3b04      	subs	r3, #4
 800fc7a:	2a00      	cmp	r2, #0
 800fc7c:	d1f0      	bne.n	800fc60 <quorem+0xf0>
 800fc7e:	3c01      	subs	r4, #1
 800fc80:	e7eb      	b.n	800fc5a <quorem+0xea>
 800fc82:	2000      	movs	r0, #0
 800fc84:	e7ee      	b.n	800fc64 <quorem+0xf4>
	...

0800fc88 <_dtoa_r>:
 800fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	ed2d 8b04 	vpush	{d8-d9}
 800fc90:	ec57 6b10 	vmov	r6, r7, d0
 800fc94:	b093      	sub	sp, #76	; 0x4c
 800fc96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc9c:	9106      	str	r1, [sp, #24]
 800fc9e:	ee10 aa10 	vmov	sl, s0
 800fca2:	4604      	mov	r4, r0
 800fca4:	9209      	str	r2, [sp, #36]	; 0x24
 800fca6:	930c      	str	r3, [sp, #48]	; 0x30
 800fca8:	46bb      	mov	fp, r7
 800fcaa:	b975      	cbnz	r5, 800fcca <_dtoa_r+0x42>
 800fcac:	2010      	movs	r0, #16
 800fcae:	f7ff f9bf 	bl	800f030 <malloc>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	6260      	str	r0, [r4, #36]	; 0x24
 800fcb6:	b920      	cbnz	r0, 800fcc2 <_dtoa_r+0x3a>
 800fcb8:	4ba7      	ldr	r3, [pc, #668]	; (800ff58 <_dtoa_r+0x2d0>)
 800fcba:	21ea      	movs	r1, #234	; 0xea
 800fcbc:	48a7      	ldr	r0, [pc, #668]	; (800ff5c <_dtoa_r+0x2d4>)
 800fcbe:	f001 fb05 	bl	80112cc <__assert_func>
 800fcc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcc6:	6005      	str	r5, [r0, #0]
 800fcc8:	60c5      	str	r5, [r0, #12]
 800fcca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fccc:	6819      	ldr	r1, [r3, #0]
 800fcce:	b151      	cbz	r1, 800fce6 <_dtoa_r+0x5e>
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	604a      	str	r2, [r1, #4]
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	4093      	lsls	r3, r2
 800fcd8:	608b      	str	r3, [r1, #8]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f000 fe12 	bl	8010904 <_Bfree>
 800fce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fce2:	2200      	movs	r2, #0
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	1e3b      	subs	r3, r7, #0
 800fce8:	bfaa      	itet	ge
 800fcea:	2300      	movge	r3, #0
 800fcec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fcf0:	f8c8 3000 	strge.w	r3, [r8]
 800fcf4:	4b9a      	ldr	r3, [pc, #616]	; (800ff60 <_dtoa_r+0x2d8>)
 800fcf6:	bfbc      	itt	lt
 800fcf8:	2201      	movlt	r2, #1
 800fcfa:	f8c8 2000 	strlt.w	r2, [r8]
 800fcfe:	ea33 030b 	bics.w	r3, r3, fp
 800fd02:	d11b      	bne.n	800fd3c <_dtoa_r+0xb4>
 800fd04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd06:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd0a:	6013      	str	r3, [r2, #0]
 800fd0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd10:	4333      	orrs	r3, r6
 800fd12:	f000 8592 	beq.w	801083a <_dtoa_r+0xbb2>
 800fd16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd18:	b963      	cbnz	r3, 800fd34 <_dtoa_r+0xac>
 800fd1a:	4b92      	ldr	r3, [pc, #584]	; (800ff64 <_dtoa_r+0x2dc>)
 800fd1c:	e022      	b.n	800fd64 <_dtoa_r+0xdc>
 800fd1e:	4b92      	ldr	r3, [pc, #584]	; (800ff68 <_dtoa_r+0x2e0>)
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	3308      	adds	r3, #8
 800fd24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd26:	6013      	str	r3, [r2, #0]
 800fd28:	9801      	ldr	r0, [sp, #4]
 800fd2a:	b013      	add	sp, #76	; 0x4c
 800fd2c:	ecbd 8b04 	vpop	{d8-d9}
 800fd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd34:	4b8b      	ldr	r3, [pc, #556]	; (800ff64 <_dtoa_r+0x2dc>)
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	3303      	adds	r3, #3
 800fd3a:	e7f3      	b.n	800fd24 <_dtoa_r+0x9c>
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4650      	mov	r0, sl
 800fd42:	4659      	mov	r1, fp
 800fd44:	f7f0 fef0 	bl	8000b28 <__aeabi_dcmpeq>
 800fd48:	ec4b ab19 	vmov	d9, sl, fp
 800fd4c:	4680      	mov	r8, r0
 800fd4e:	b158      	cbz	r0, 800fd68 <_dtoa_r+0xe0>
 800fd50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd52:	2301      	movs	r3, #1
 800fd54:	6013      	str	r3, [r2, #0]
 800fd56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f000 856b 	beq.w	8010834 <_dtoa_r+0xbac>
 800fd5e:	4883      	ldr	r0, [pc, #524]	; (800ff6c <_dtoa_r+0x2e4>)
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	1e43      	subs	r3, r0, #1
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	e7df      	b.n	800fd28 <_dtoa_r+0xa0>
 800fd68:	ec4b ab10 	vmov	d0, sl, fp
 800fd6c:	aa10      	add	r2, sp, #64	; 0x40
 800fd6e:	a911      	add	r1, sp, #68	; 0x44
 800fd70:	4620      	mov	r0, r4
 800fd72:	f001 f8af 	bl	8010ed4 <__d2b>
 800fd76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fd7a:	ee08 0a10 	vmov	s16, r0
 800fd7e:	2d00      	cmp	r5, #0
 800fd80:	f000 8084 	beq.w	800fe8c <_dtoa_r+0x204>
 800fd84:	ee19 3a90 	vmov	r3, s19
 800fd88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fd90:	4656      	mov	r6, sl
 800fd92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fd96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fd9e:	4b74      	ldr	r3, [pc, #464]	; (800ff70 <_dtoa_r+0x2e8>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	4630      	mov	r0, r6
 800fda4:	4639      	mov	r1, r7
 800fda6:	f7f0 fa9f 	bl	80002e8 <__aeabi_dsub>
 800fdaa:	a365      	add	r3, pc, #404	; (adr r3, 800ff40 <_dtoa_r+0x2b8>)
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f7f0 fc52 	bl	8000658 <__aeabi_dmul>
 800fdb4:	a364      	add	r3, pc, #400	; (adr r3, 800ff48 <_dtoa_r+0x2c0>)
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	f7f0 fa97 	bl	80002ec <__adddf3>
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	f7f0 fbde 	bl	8000584 <__aeabi_i2d>
 800fdc8:	a361      	add	r3, pc, #388	; (adr r3, 800ff50 <_dtoa_r+0x2c8>)
 800fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdce:	f7f0 fc43 	bl	8000658 <__aeabi_dmul>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	4639      	mov	r1, r7
 800fdda:	f7f0 fa87 	bl	80002ec <__adddf3>
 800fdde:	4606      	mov	r6, r0
 800fde0:	460f      	mov	r7, r1
 800fde2:	f7f0 fee9 	bl	8000bb8 <__aeabi_d2iz>
 800fde6:	2200      	movs	r2, #0
 800fde8:	9000      	str	r0, [sp, #0]
 800fdea:	2300      	movs	r3, #0
 800fdec:	4630      	mov	r0, r6
 800fdee:	4639      	mov	r1, r7
 800fdf0:	f7f0 fea4 	bl	8000b3c <__aeabi_dcmplt>
 800fdf4:	b150      	cbz	r0, 800fe0c <_dtoa_r+0x184>
 800fdf6:	9800      	ldr	r0, [sp, #0]
 800fdf8:	f7f0 fbc4 	bl	8000584 <__aeabi_i2d>
 800fdfc:	4632      	mov	r2, r6
 800fdfe:	463b      	mov	r3, r7
 800fe00:	f7f0 fe92 	bl	8000b28 <__aeabi_dcmpeq>
 800fe04:	b910      	cbnz	r0, 800fe0c <_dtoa_r+0x184>
 800fe06:	9b00      	ldr	r3, [sp, #0]
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	9b00      	ldr	r3, [sp, #0]
 800fe0e:	2b16      	cmp	r3, #22
 800fe10:	d85a      	bhi.n	800fec8 <_dtoa_r+0x240>
 800fe12:	9a00      	ldr	r2, [sp, #0]
 800fe14:	4b57      	ldr	r3, [pc, #348]	; (800ff74 <_dtoa_r+0x2ec>)
 800fe16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	ec51 0b19 	vmov	r0, r1, d9
 800fe22:	f7f0 fe8b 	bl	8000b3c <__aeabi_dcmplt>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d050      	beq.n	800fecc <_dtoa_r+0x244>
 800fe2a:	9b00      	ldr	r3, [sp, #0]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	2300      	movs	r3, #0
 800fe32:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe36:	1b5d      	subs	r5, r3, r5
 800fe38:	1e6b      	subs	r3, r5, #1
 800fe3a:	9305      	str	r3, [sp, #20]
 800fe3c:	bf45      	ittet	mi
 800fe3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fe42:	9304      	strmi	r3, [sp, #16]
 800fe44:	2300      	movpl	r3, #0
 800fe46:	2300      	movmi	r3, #0
 800fe48:	bf4c      	ite	mi
 800fe4a:	9305      	strmi	r3, [sp, #20]
 800fe4c:	9304      	strpl	r3, [sp, #16]
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	db3d      	blt.n	800fed0 <_dtoa_r+0x248>
 800fe54:	9b05      	ldr	r3, [sp, #20]
 800fe56:	9a00      	ldr	r2, [sp, #0]
 800fe58:	920a      	str	r2, [sp, #40]	; 0x28
 800fe5a:	4413      	add	r3, r2
 800fe5c:	9305      	str	r3, [sp, #20]
 800fe5e:	2300      	movs	r3, #0
 800fe60:	9307      	str	r3, [sp, #28]
 800fe62:	9b06      	ldr	r3, [sp, #24]
 800fe64:	2b09      	cmp	r3, #9
 800fe66:	f200 8089 	bhi.w	800ff7c <_dtoa_r+0x2f4>
 800fe6a:	2b05      	cmp	r3, #5
 800fe6c:	bfc4      	itt	gt
 800fe6e:	3b04      	subgt	r3, #4
 800fe70:	9306      	strgt	r3, [sp, #24]
 800fe72:	9b06      	ldr	r3, [sp, #24]
 800fe74:	f1a3 0302 	sub.w	r3, r3, #2
 800fe78:	bfcc      	ite	gt
 800fe7a:	2500      	movgt	r5, #0
 800fe7c:	2501      	movle	r5, #1
 800fe7e:	2b03      	cmp	r3, #3
 800fe80:	f200 8087 	bhi.w	800ff92 <_dtoa_r+0x30a>
 800fe84:	e8df f003 	tbb	[pc, r3]
 800fe88:	59383a2d 	.word	0x59383a2d
 800fe8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fe90:	441d      	add	r5, r3
 800fe92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe96:	2b20      	cmp	r3, #32
 800fe98:	bfc1      	itttt	gt
 800fe9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fea2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fea6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800feaa:	bfda      	itte	le
 800feac:	f1c3 0320 	rsble	r3, r3, #32
 800feb0:	fa06 f003 	lslle.w	r0, r6, r3
 800feb4:	4318      	orrgt	r0, r3
 800feb6:	f7f0 fb55 	bl	8000564 <__aeabi_ui2d>
 800feba:	2301      	movs	r3, #1
 800febc:	4606      	mov	r6, r0
 800febe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fec2:	3d01      	subs	r5, #1
 800fec4:	930e      	str	r3, [sp, #56]	; 0x38
 800fec6:	e76a      	b.n	800fd9e <_dtoa_r+0x116>
 800fec8:	2301      	movs	r3, #1
 800feca:	e7b2      	b.n	800fe32 <_dtoa_r+0x1aa>
 800fecc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fece:	e7b1      	b.n	800fe34 <_dtoa_r+0x1ac>
 800fed0:	9b04      	ldr	r3, [sp, #16]
 800fed2:	9a00      	ldr	r2, [sp, #0]
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	9304      	str	r3, [sp, #16]
 800fed8:	4253      	negs	r3, r2
 800feda:	9307      	str	r3, [sp, #28]
 800fedc:	2300      	movs	r3, #0
 800fede:	930a      	str	r3, [sp, #40]	; 0x28
 800fee0:	e7bf      	b.n	800fe62 <_dtoa_r+0x1da>
 800fee2:	2300      	movs	r3, #0
 800fee4:	9308      	str	r3, [sp, #32]
 800fee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fee8:	2b00      	cmp	r3, #0
 800feea:	dc55      	bgt.n	800ff98 <_dtoa_r+0x310>
 800feec:	2301      	movs	r3, #1
 800feee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fef2:	461a      	mov	r2, r3
 800fef4:	9209      	str	r2, [sp, #36]	; 0x24
 800fef6:	e00c      	b.n	800ff12 <_dtoa_r+0x28a>
 800fef8:	2301      	movs	r3, #1
 800fefa:	e7f3      	b.n	800fee4 <_dtoa_r+0x25c>
 800fefc:	2300      	movs	r3, #0
 800fefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff00:	9308      	str	r3, [sp, #32]
 800ff02:	9b00      	ldr	r3, [sp, #0]
 800ff04:	4413      	add	r3, r2
 800ff06:	9302      	str	r3, [sp, #8]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	9303      	str	r3, [sp, #12]
 800ff0e:	bfb8      	it	lt
 800ff10:	2301      	movlt	r3, #1
 800ff12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff14:	2200      	movs	r2, #0
 800ff16:	6042      	str	r2, [r0, #4]
 800ff18:	2204      	movs	r2, #4
 800ff1a:	f102 0614 	add.w	r6, r2, #20
 800ff1e:	429e      	cmp	r6, r3
 800ff20:	6841      	ldr	r1, [r0, #4]
 800ff22:	d93d      	bls.n	800ffa0 <_dtoa_r+0x318>
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fcad 	bl	8010884 <_Balloc>
 800ff2a:	9001      	str	r0, [sp, #4]
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d13b      	bne.n	800ffa8 <_dtoa_r+0x320>
 800ff30:	4b11      	ldr	r3, [pc, #68]	; (800ff78 <_dtoa_r+0x2f0>)
 800ff32:	4602      	mov	r2, r0
 800ff34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff38:	e6c0      	b.n	800fcbc <_dtoa_r+0x34>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e7df      	b.n	800fefe <_dtoa_r+0x276>
 800ff3e:	bf00      	nop
 800ff40:	636f4361 	.word	0x636f4361
 800ff44:	3fd287a7 	.word	0x3fd287a7
 800ff48:	8b60c8b3 	.word	0x8b60c8b3
 800ff4c:	3fc68a28 	.word	0x3fc68a28
 800ff50:	509f79fb 	.word	0x509f79fb
 800ff54:	3fd34413 	.word	0x3fd34413
 800ff58:	0802b095 	.word	0x0802b095
 800ff5c:	0802b0ac 	.word	0x0802b0ac
 800ff60:	7ff00000 	.word	0x7ff00000
 800ff64:	0802b091 	.word	0x0802b091
 800ff68:	0802b088 	.word	0x0802b088
 800ff6c:	0802b065 	.word	0x0802b065
 800ff70:	3ff80000 	.word	0x3ff80000
 800ff74:	0802b1a0 	.word	0x0802b1a0
 800ff78:	0802b107 	.word	0x0802b107
 800ff7c:	2501      	movs	r5, #1
 800ff7e:	2300      	movs	r3, #0
 800ff80:	9306      	str	r3, [sp, #24]
 800ff82:	9508      	str	r5, [sp, #32]
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295
 800ff88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	2312      	movs	r3, #18
 800ff90:	e7b0      	b.n	800fef4 <_dtoa_r+0x26c>
 800ff92:	2301      	movs	r3, #1
 800ff94:	9308      	str	r3, [sp, #32]
 800ff96:	e7f5      	b.n	800ff84 <_dtoa_r+0x2fc>
 800ff98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff9e:	e7b8      	b.n	800ff12 <_dtoa_r+0x28a>
 800ffa0:	3101      	adds	r1, #1
 800ffa2:	6041      	str	r1, [r0, #4]
 800ffa4:	0052      	lsls	r2, r2, #1
 800ffa6:	e7b8      	b.n	800ff1a <_dtoa_r+0x292>
 800ffa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffaa:	9a01      	ldr	r2, [sp, #4]
 800ffac:	601a      	str	r2, [r3, #0]
 800ffae:	9b03      	ldr	r3, [sp, #12]
 800ffb0:	2b0e      	cmp	r3, #14
 800ffb2:	f200 809d 	bhi.w	80100f0 <_dtoa_r+0x468>
 800ffb6:	2d00      	cmp	r5, #0
 800ffb8:	f000 809a 	beq.w	80100f0 <_dtoa_r+0x468>
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd32      	ble.n	8010028 <_dtoa_r+0x3a0>
 800ffc2:	4ab7      	ldr	r2, [pc, #732]	; (80102a0 <_dtoa_r+0x618>)
 800ffc4:	f003 030f 	and.w	r3, r3, #15
 800ffc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ffcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffd0:	9b00      	ldr	r3, [sp, #0]
 800ffd2:	05d8      	lsls	r0, r3, #23
 800ffd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ffd8:	d516      	bpl.n	8010008 <_dtoa_r+0x380>
 800ffda:	4bb2      	ldr	r3, [pc, #712]	; (80102a4 <_dtoa_r+0x61c>)
 800ffdc:	ec51 0b19 	vmov	r0, r1, d9
 800ffe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffe4:	f7f0 fc62 	bl	80008ac <__aeabi_ddiv>
 800ffe8:	f007 070f 	and.w	r7, r7, #15
 800ffec:	4682      	mov	sl, r0
 800ffee:	468b      	mov	fp, r1
 800fff0:	2503      	movs	r5, #3
 800fff2:	4eac      	ldr	r6, [pc, #688]	; (80102a4 <_dtoa_r+0x61c>)
 800fff4:	b957      	cbnz	r7, 801000c <_dtoa_r+0x384>
 800fff6:	4642      	mov	r2, r8
 800fff8:	464b      	mov	r3, r9
 800fffa:	4650      	mov	r0, sl
 800fffc:	4659      	mov	r1, fp
 800fffe:	f7f0 fc55 	bl	80008ac <__aeabi_ddiv>
 8010002:	4682      	mov	sl, r0
 8010004:	468b      	mov	fp, r1
 8010006:	e028      	b.n	801005a <_dtoa_r+0x3d2>
 8010008:	2502      	movs	r5, #2
 801000a:	e7f2      	b.n	800fff2 <_dtoa_r+0x36a>
 801000c:	07f9      	lsls	r1, r7, #31
 801000e:	d508      	bpl.n	8010022 <_dtoa_r+0x39a>
 8010010:	4640      	mov	r0, r8
 8010012:	4649      	mov	r1, r9
 8010014:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010018:	f7f0 fb1e 	bl	8000658 <__aeabi_dmul>
 801001c:	3501      	adds	r5, #1
 801001e:	4680      	mov	r8, r0
 8010020:	4689      	mov	r9, r1
 8010022:	107f      	asrs	r7, r7, #1
 8010024:	3608      	adds	r6, #8
 8010026:	e7e5      	b.n	800fff4 <_dtoa_r+0x36c>
 8010028:	f000 809b 	beq.w	8010162 <_dtoa_r+0x4da>
 801002c:	9b00      	ldr	r3, [sp, #0]
 801002e:	4f9d      	ldr	r7, [pc, #628]	; (80102a4 <_dtoa_r+0x61c>)
 8010030:	425e      	negs	r6, r3
 8010032:	4b9b      	ldr	r3, [pc, #620]	; (80102a0 <_dtoa_r+0x618>)
 8010034:	f006 020f 	and.w	r2, r6, #15
 8010038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010040:	ec51 0b19 	vmov	r0, r1, d9
 8010044:	f7f0 fb08 	bl	8000658 <__aeabi_dmul>
 8010048:	1136      	asrs	r6, r6, #4
 801004a:	4682      	mov	sl, r0
 801004c:	468b      	mov	fp, r1
 801004e:	2300      	movs	r3, #0
 8010050:	2502      	movs	r5, #2
 8010052:	2e00      	cmp	r6, #0
 8010054:	d17a      	bne.n	801014c <_dtoa_r+0x4c4>
 8010056:	2b00      	cmp	r3, #0
 8010058:	d1d3      	bne.n	8010002 <_dtoa_r+0x37a>
 801005a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801005c:	2b00      	cmp	r3, #0
 801005e:	f000 8082 	beq.w	8010166 <_dtoa_r+0x4de>
 8010062:	4b91      	ldr	r3, [pc, #580]	; (80102a8 <_dtoa_r+0x620>)
 8010064:	2200      	movs	r2, #0
 8010066:	4650      	mov	r0, sl
 8010068:	4659      	mov	r1, fp
 801006a:	f7f0 fd67 	bl	8000b3c <__aeabi_dcmplt>
 801006e:	2800      	cmp	r0, #0
 8010070:	d079      	beq.n	8010166 <_dtoa_r+0x4de>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d076      	beq.n	8010166 <_dtoa_r+0x4de>
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	2b00      	cmp	r3, #0
 801007c:	dd36      	ble.n	80100ec <_dtoa_r+0x464>
 801007e:	9b00      	ldr	r3, [sp, #0]
 8010080:	4650      	mov	r0, sl
 8010082:	4659      	mov	r1, fp
 8010084:	1e5f      	subs	r7, r3, #1
 8010086:	2200      	movs	r2, #0
 8010088:	4b88      	ldr	r3, [pc, #544]	; (80102ac <_dtoa_r+0x624>)
 801008a:	f7f0 fae5 	bl	8000658 <__aeabi_dmul>
 801008e:	9e02      	ldr	r6, [sp, #8]
 8010090:	4682      	mov	sl, r0
 8010092:	468b      	mov	fp, r1
 8010094:	3501      	adds	r5, #1
 8010096:	4628      	mov	r0, r5
 8010098:	f7f0 fa74 	bl	8000584 <__aeabi_i2d>
 801009c:	4652      	mov	r2, sl
 801009e:	465b      	mov	r3, fp
 80100a0:	f7f0 fada 	bl	8000658 <__aeabi_dmul>
 80100a4:	4b82      	ldr	r3, [pc, #520]	; (80102b0 <_dtoa_r+0x628>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	f7f0 f920 	bl	80002ec <__adddf3>
 80100ac:	46d0      	mov	r8, sl
 80100ae:	46d9      	mov	r9, fp
 80100b0:	4682      	mov	sl, r0
 80100b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80100b6:	2e00      	cmp	r6, #0
 80100b8:	d158      	bne.n	801016c <_dtoa_r+0x4e4>
 80100ba:	4b7e      	ldr	r3, [pc, #504]	; (80102b4 <_dtoa_r+0x62c>)
 80100bc:	2200      	movs	r2, #0
 80100be:	4640      	mov	r0, r8
 80100c0:	4649      	mov	r1, r9
 80100c2:	f7f0 f911 	bl	80002e8 <__aeabi_dsub>
 80100c6:	4652      	mov	r2, sl
 80100c8:	465b      	mov	r3, fp
 80100ca:	4680      	mov	r8, r0
 80100cc:	4689      	mov	r9, r1
 80100ce:	f7f0 fd53 	bl	8000b78 <__aeabi_dcmpgt>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	f040 8295 	bne.w	8010602 <_dtoa_r+0x97a>
 80100d8:	4652      	mov	r2, sl
 80100da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80100de:	4640      	mov	r0, r8
 80100e0:	4649      	mov	r1, r9
 80100e2:	f7f0 fd2b 	bl	8000b3c <__aeabi_dcmplt>
 80100e6:	2800      	cmp	r0, #0
 80100e8:	f040 8289 	bne.w	80105fe <_dtoa_r+0x976>
 80100ec:	ec5b ab19 	vmov	sl, fp, d9
 80100f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f2c0 8148 	blt.w	8010388 <_dtoa_r+0x700>
 80100f8:	9a00      	ldr	r2, [sp, #0]
 80100fa:	2a0e      	cmp	r2, #14
 80100fc:	f300 8144 	bgt.w	8010388 <_dtoa_r+0x700>
 8010100:	4b67      	ldr	r3, [pc, #412]	; (80102a0 <_dtoa_r+0x618>)
 8010102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010106:	e9d3 8900 	ldrd	r8, r9, [r3]
 801010a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801010c:	2b00      	cmp	r3, #0
 801010e:	f280 80d5 	bge.w	80102bc <_dtoa_r+0x634>
 8010112:	9b03      	ldr	r3, [sp, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	f300 80d1 	bgt.w	80102bc <_dtoa_r+0x634>
 801011a:	f040 826f 	bne.w	80105fc <_dtoa_r+0x974>
 801011e:	4b65      	ldr	r3, [pc, #404]	; (80102b4 <_dtoa_r+0x62c>)
 8010120:	2200      	movs	r2, #0
 8010122:	4640      	mov	r0, r8
 8010124:	4649      	mov	r1, r9
 8010126:	f7f0 fa97 	bl	8000658 <__aeabi_dmul>
 801012a:	4652      	mov	r2, sl
 801012c:	465b      	mov	r3, fp
 801012e:	f7f0 fd19 	bl	8000b64 <__aeabi_dcmpge>
 8010132:	9e03      	ldr	r6, [sp, #12]
 8010134:	4637      	mov	r7, r6
 8010136:	2800      	cmp	r0, #0
 8010138:	f040 8245 	bne.w	80105c6 <_dtoa_r+0x93e>
 801013c:	9d01      	ldr	r5, [sp, #4]
 801013e:	2331      	movs	r3, #49	; 0x31
 8010140:	f805 3b01 	strb.w	r3, [r5], #1
 8010144:	9b00      	ldr	r3, [sp, #0]
 8010146:	3301      	adds	r3, #1
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	e240      	b.n	80105ce <_dtoa_r+0x946>
 801014c:	07f2      	lsls	r2, r6, #31
 801014e:	d505      	bpl.n	801015c <_dtoa_r+0x4d4>
 8010150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010154:	f7f0 fa80 	bl	8000658 <__aeabi_dmul>
 8010158:	3501      	adds	r5, #1
 801015a:	2301      	movs	r3, #1
 801015c:	1076      	asrs	r6, r6, #1
 801015e:	3708      	adds	r7, #8
 8010160:	e777      	b.n	8010052 <_dtoa_r+0x3ca>
 8010162:	2502      	movs	r5, #2
 8010164:	e779      	b.n	801005a <_dtoa_r+0x3d2>
 8010166:	9f00      	ldr	r7, [sp, #0]
 8010168:	9e03      	ldr	r6, [sp, #12]
 801016a:	e794      	b.n	8010096 <_dtoa_r+0x40e>
 801016c:	9901      	ldr	r1, [sp, #4]
 801016e:	4b4c      	ldr	r3, [pc, #304]	; (80102a0 <_dtoa_r+0x618>)
 8010170:	4431      	add	r1, r6
 8010172:	910d      	str	r1, [sp, #52]	; 0x34
 8010174:	9908      	ldr	r1, [sp, #32]
 8010176:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801017a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801017e:	2900      	cmp	r1, #0
 8010180:	d043      	beq.n	801020a <_dtoa_r+0x582>
 8010182:	494d      	ldr	r1, [pc, #308]	; (80102b8 <_dtoa_r+0x630>)
 8010184:	2000      	movs	r0, #0
 8010186:	f7f0 fb91 	bl	80008ac <__aeabi_ddiv>
 801018a:	4652      	mov	r2, sl
 801018c:	465b      	mov	r3, fp
 801018e:	f7f0 f8ab 	bl	80002e8 <__aeabi_dsub>
 8010192:	9d01      	ldr	r5, [sp, #4]
 8010194:	4682      	mov	sl, r0
 8010196:	468b      	mov	fp, r1
 8010198:	4649      	mov	r1, r9
 801019a:	4640      	mov	r0, r8
 801019c:	f7f0 fd0c 	bl	8000bb8 <__aeabi_d2iz>
 80101a0:	4606      	mov	r6, r0
 80101a2:	f7f0 f9ef 	bl	8000584 <__aeabi_i2d>
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	4640      	mov	r0, r8
 80101ac:	4649      	mov	r1, r9
 80101ae:	f7f0 f89b 	bl	80002e8 <__aeabi_dsub>
 80101b2:	3630      	adds	r6, #48	; 0x30
 80101b4:	f805 6b01 	strb.w	r6, [r5], #1
 80101b8:	4652      	mov	r2, sl
 80101ba:	465b      	mov	r3, fp
 80101bc:	4680      	mov	r8, r0
 80101be:	4689      	mov	r9, r1
 80101c0:	f7f0 fcbc 	bl	8000b3c <__aeabi_dcmplt>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d163      	bne.n	8010290 <_dtoa_r+0x608>
 80101c8:	4642      	mov	r2, r8
 80101ca:	464b      	mov	r3, r9
 80101cc:	4936      	ldr	r1, [pc, #216]	; (80102a8 <_dtoa_r+0x620>)
 80101ce:	2000      	movs	r0, #0
 80101d0:	f7f0 f88a 	bl	80002e8 <__aeabi_dsub>
 80101d4:	4652      	mov	r2, sl
 80101d6:	465b      	mov	r3, fp
 80101d8:	f7f0 fcb0 	bl	8000b3c <__aeabi_dcmplt>
 80101dc:	2800      	cmp	r0, #0
 80101de:	f040 80b5 	bne.w	801034c <_dtoa_r+0x6c4>
 80101e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101e4:	429d      	cmp	r5, r3
 80101e6:	d081      	beq.n	80100ec <_dtoa_r+0x464>
 80101e8:	4b30      	ldr	r3, [pc, #192]	; (80102ac <_dtoa_r+0x624>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	4650      	mov	r0, sl
 80101ee:	4659      	mov	r1, fp
 80101f0:	f7f0 fa32 	bl	8000658 <__aeabi_dmul>
 80101f4:	4b2d      	ldr	r3, [pc, #180]	; (80102ac <_dtoa_r+0x624>)
 80101f6:	4682      	mov	sl, r0
 80101f8:	468b      	mov	fp, r1
 80101fa:	4640      	mov	r0, r8
 80101fc:	4649      	mov	r1, r9
 80101fe:	2200      	movs	r2, #0
 8010200:	f7f0 fa2a 	bl	8000658 <__aeabi_dmul>
 8010204:	4680      	mov	r8, r0
 8010206:	4689      	mov	r9, r1
 8010208:	e7c6      	b.n	8010198 <_dtoa_r+0x510>
 801020a:	4650      	mov	r0, sl
 801020c:	4659      	mov	r1, fp
 801020e:	f7f0 fa23 	bl	8000658 <__aeabi_dmul>
 8010212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010214:	9d01      	ldr	r5, [sp, #4]
 8010216:	930f      	str	r3, [sp, #60]	; 0x3c
 8010218:	4682      	mov	sl, r0
 801021a:	468b      	mov	fp, r1
 801021c:	4649      	mov	r1, r9
 801021e:	4640      	mov	r0, r8
 8010220:	f7f0 fcca 	bl	8000bb8 <__aeabi_d2iz>
 8010224:	4606      	mov	r6, r0
 8010226:	f7f0 f9ad 	bl	8000584 <__aeabi_i2d>
 801022a:	3630      	adds	r6, #48	; 0x30
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4640      	mov	r0, r8
 8010232:	4649      	mov	r1, r9
 8010234:	f7f0 f858 	bl	80002e8 <__aeabi_dsub>
 8010238:	f805 6b01 	strb.w	r6, [r5], #1
 801023c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801023e:	429d      	cmp	r5, r3
 8010240:	4680      	mov	r8, r0
 8010242:	4689      	mov	r9, r1
 8010244:	f04f 0200 	mov.w	r2, #0
 8010248:	d124      	bne.n	8010294 <_dtoa_r+0x60c>
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <_dtoa_r+0x630>)
 801024c:	4650      	mov	r0, sl
 801024e:	4659      	mov	r1, fp
 8010250:	f7f0 f84c 	bl	80002ec <__adddf3>
 8010254:	4602      	mov	r2, r0
 8010256:	460b      	mov	r3, r1
 8010258:	4640      	mov	r0, r8
 801025a:	4649      	mov	r1, r9
 801025c:	f7f0 fc8c 	bl	8000b78 <__aeabi_dcmpgt>
 8010260:	2800      	cmp	r0, #0
 8010262:	d173      	bne.n	801034c <_dtoa_r+0x6c4>
 8010264:	4652      	mov	r2, sl
 8010266:	465b      	mov	r3, fp
 8010268:	4913      	ldr	r1, [pc, #76]	; (80102b8 <_dtoa_r+0x630>)
 801026a:	2000      	movs	r0, #0
 801026c:	f7f0 f83c 	bl	80002e8 <__aeabi_dsub>
 8010270:	4602      	mov	r2, r0
 8010272:	460b      	mov	r3, r1
 8010274:	4640      	mov	r0, r8
 8010276:	4649      	mov	r1, r9
 8010278:	f7f0 fc60 	bl	8000b3c <__aeabi_dcmplt>
 801027c:	2800      	cmp	r0, #0
 801027e:	f43f af35 	beq.w	80100ec <_dtoa_r+0x464>
 8010282:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010284:	1e6b      	subs	r3, r5, #1
 8010286:	930f      	str	r3, [sp, #60]	; 0x3c
 8010288:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801028c:	2b30      	cmp	r3, #48	; 0x30
 801028e:	d0f8      	beq.n	8010282 <_dtoa_r+0x5fa>
 8010290:	9700      	str	r7, [sp, #0]
 8010292:	e049      	b.n	8010328 <_dtoa_r+0x6a0>
 8010294:	4b05      	ldr	r3, [pc, #20]	; (80102ac <_dtoa_r+0x624>)
 8010296:	f7f0 f9df 	bl	8000658 <__aeabi_dmul>
 801029a:	4680      	mov	r8, r0
 801029c:	4689      	mov	r9, r1
 801029e:	e7bd      	b.n	801021c <_dtoa_r+0x594>
 80102a0:	0802b1a0 	.word	0x0802b1a0
 80102a4:	0802b178 	.word	0x0802b178
 80102a8:	3ff00000 	.word	0x3ff00000
 80102ac:	40240000 	.word	0x40240000
 80102b0:	401c0000 	.word	0x401c0000
 80102b4:	40140000 	.word	0x40140000
 80102b8:	3fe00000 	.word	0x3fe00000
 80102bc:	9d01      	ldr	r5, [sp, #4]
 80102be:	4656      	mov	r6, sl
 80102c0:	465f      	mov	r7, fp
 80102c2:	4642      	mov	r2, r8
 80102c4:	464b      	mov	r3, r9
 80102c6:	4630      	mov	r0, r6
 80102c8:	4639      	mov	r1, r7
 80102ca:	f7f0 faef 	bl	80008ac <__aeabi_ddiv>
 80102ce:	f7f0 fc73 	bl	8000bb8 <__aeabi_d2iz>
 80102d2:	4682      	mov	sl, r0
 80102d4:	f7f0 f956 	bl	8000584 <__aeabi_i2d>
 80102d8:	4642      	mov	r2, r8
 80102da:	464b      	mov	r3, r9
 80102dc:	f7f0 f9bc 	bl	8000658 <__aeabi_dmul>
 80102e0:	4602      	mov	r2, r0
 80102e2:	460b      	mov	r3, r1
 80102e4:	4630      	mov	r0, r6
 80102e6:	4639      	mov	r1, r7
 80102e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80102ec:	f7ef fffc 	bl	80002e8 <__aeabi_dsub>
 80102f0:	f805 6b01 	strb.w	r6, [r5], #1
 80102f4:	9e01      	ldr	r6, [sp, #4]
 80102f6:	9f03      	ldr	r7, [sp, #12]
 80102f8:	1bae      	subs	r6, r5, r6
 80102fa:	42b7      	cmp	r7, r6
 80102fc:	4602      	mov	r2, r0
 80102fe:	460b      	mov	r3, r1
 8010300:	d135      	bne.n	801036e <_dtoa_r+0x6e6>
 8010302:	f7ef fff3 	bl	80002ec <__adddf3>
 8010306:	4642      	mov	r2, r8
 8010308:	464b      	mov	r3, r9
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	f7f0 fc33 	bl	8000b78 <__aeabi_dcmpgt>
 8010312:	b9d0      	cbnz	r0, 801034a <_dtoa_r+0x6c2>
 8010314:	4642      	mov	r2, r8
 8010316:	464b      	mov	r3, r9
 8010318:	4630      	mov	r0, r6
 801031a:	4639      	mov	r1, r7
 801031c:	f7f0 fc04 	bl	8000b28 <__aeabi_dcmpeq>
 8010320:	b110      	cbz	r0, 8010328 <_dtoa_r+0x6a0>
 8010322:	f01a 0f01 	tst.w	sl, #1
 8010326:	d110      	bne.n	801034a <_dtoa_r+0x6c2>
 8010328:	4620      	mov	r0, r4
 801032a:	ee18 1a10 	vmov	r1, s16
 801032e:	f000 fae9 	bl	8010904 <_Bfree>
 8010332:	2300      	movs	r3, #0
 8010334:	9800      	ldr	r0, [sp, #0]
 8010336:	702b      	strb	r3, [r5, #0]
 8010338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801033a:	3001      	adds	r0, #1
 801033c:	6018      	str	r0, [r3, #0]
 801033e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010340:	2b00      	cmp	r3, #0
 8010342:	f43f acf1 	beq.w	800fd28 <_dtoa_r+0xa0>
 8010346:	601d      	str	r5, [r3, #0]
 8010348:	e4ee      	b.n	800fd28 <_dtoa_r+0xa0>
 801034a:	9f00      	ldr	r7, [sp, #0]
 801034c:	462b      	mov	r3, r5
 801034e:	461d      	mov	r5, r3
 8010350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010354:	2a39      	cmp	r2, #57	; 0x39
 8010356:	d106      	bne.n	8010366 <_dtoa_r+0x6de>
 8010358:	9a01      	ldr	r2, [sp, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	d1f7      	bne.n	801034e <_dtoa_r+0x6c6>
 801035e:	9901      	ldr	r1, [sp, #4]
 8010360:	2230      	movs	r2, #48	; 0x30
 8010362:	3701      	adds	r7, #1
 8010364:	700a      	strb	r2, [r1, #0]
 8010366:	781a      	ldrb	r2, [r3, #0]
 8010368:	3201      	adds	r2, #1
 801036a:	701a      	strb	r2, [r3, #0]
 801036c:	e790      	b.n	8010290 <_dtoa_r+0x608>
 801036e:	4ba6      	ldr	r3, [pc, #664]	; (8010608 <_dtoa_r+0x980>)
 8010370:	2200      	movs	r2, #0
 8010372:	f7f0 f971 	bl	8000658 <__aeabi_dmul>
 8010376:	2200      	movs	r2, #0
 8010378:	2300      	movs	r3, #0
 801037a:	4606      	mov	r6, r0
 801037c:	460f      	mov	r7, r1
 801037e:	f7f0 fbd3 	bl	8000b28 <__aeabi_dcmpeq>
 8010382:	2800      	cmp	r0, #0
 8010384:	d09d      	beq.n	80102c2 <_dtoa_r+0x63a>
 8010386:	e7cf      	b.n	8010328 <_dtoa_r+0x6a0>
 8010388:	9a08      	ldr	r2, [sp, #32]
 801038a:	2a00      	cmp	r2, #0
 801038c:	f000 80d7 	beq.w	801053e <_dtoa_r+0x8b6>
 8010390:	9a06      	ldr	r2, [sp, #24]
 8010392:	2a01      	cmp	r2, #1
 8010394:	f300 80ba 	bgt.w	801050c <_dtoa_r+0x884>
 8010398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801039a:	2a00      	cmp	r2, #0
 801039c:	f000 80b2 	beq.w	8010504 <_dtoa_r+0x87c>
 80103a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80103a4:	9e07      	ldr	r6, [sp, #28]
 80103a6:	9d04      	ldr	r5, [sp, #16]
 80103a8:	9a04      	ldr	r2, [sp, #16]
 80103aa:	441a      	add	r2, r3
 80103ac:	9204      	str	r2, [sp, #16]
 80103ae:	9a05      	ldr	r2, [sp, #20]
 80103b0:	2101      	movs	r1, #1
 80103b2:	441a      	add	r2, r3
 80103b4:	4620      	mov	r0, r4
 80103b6:	9205      	str	r2, [sp, #20]
 80103b8:	f000 fb5c 	bl	8010a74 <__i2b>
 80103bc:	4607      	mov	r7, r0
 80103be:	2d00      	cmp	r5, #0
 80103c0:	dd0c      	ble.n	80103dc <_dtoa_r+0x754>
 80103c2:	9b05      	ldr	r3, [sp, #20]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	dd09      	ble.n	80103dc <_dtoa_r+0x754>
 80103c8:	42ab      	cmp	r3, r5
 80103ca:	9a04      	ldr	r2, [sp, #16]
 80103cc:	bfa8      	it	ge
 80103ce:	462b      	movge	r3, r5
 80103d0:	1ad2      	subs	r2, r2, r3
 80103d2:	9204      	str	r2, [sp, #16]
 80103d4:	9a05      	ldr	r2, [sp, #20]
 80103d6:	1aed      	subs	r5, r5, r3
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	9305      	str	r3, [sp, #20]
 80103dc:	9b07      	ldr	r3, [sp, #28]
 80103de:	b31b      	cbz	r3, 8010428 <_dtoa_r+0x7a0>
 80103e0:	9b08      	ldr	r3, [sp, #32]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f000 80af 	beq.w	8010546 <_dtoa_r+0x8be>
 80103e8:	2e00      	cmp	r6, #0
 80103ea:	dd13      	ble.n	8010414 <_dtoa_r+0x78c>
 80103ec:	4639      	mov	r1, r7
 80103ee:	4632      	mov	r2, r6
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fbff 	bl	8010bf4 <__pow5mult>
 80103f6:	ee18 2a10 	vmov	r2, s16
 80103fa:	4601      	mov	r1, r0
 80103fc:	4607      	mov	r7, r0
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 fb4e 	bl	8010aa0 <__multiply>
 8010404:	ee18 1a10 	vmov	r1, s16
 8010408:	4680      	mov	r8, r0
 801040a:	4620      	mov	r0, r4
 801040c:	f000 fa7a 	bl	8010904 <_Bfree>
 8010410:	ee08 8a10 	vmov	s16, r8
 8010414:	9b07      	ldr	r3, [sp, #28]
 8010416:	1b9a      	subs	r2, r3, r6
 8010418:	d006      	beq.n	8010428 <_dtoa_r+0x7a0>
 801041a:	ee18 1a10 	vmov	r1, s16
 801041e:	4620      	mov	r0, r4
 8010420:	f000 fbe8 	bl	8010bf4 <__pow5mult>
 8010424:	ee08 0a10 	vmov	s16, r0
 8010428:	2101      	movs	r1, #1
 801042a:	4620      	mov	r0, r4
 801042c:	f000 fb22 	bl	8010a74 <__i2b>
 8010430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010432:	2b00      	cmp	r3, #0
 8010434:	4606      	mov	r6, r0
 8010436:	f340 8088 	ble.w	801054a <_dtoa_r+0x8c2>
 801043a:	461a      	mov	r2, r3
 801043c:	4601      	mov	r1, r0
 801043e:	4620      	mov	r0, r4
 8010440:	f000 fbd8 	bl	8010bf4 <__pow5mult>
 8010444:	9b06      	ldr	r3, [sp, #24]
 8010446:	2b01      	cmp	r3, #1
 8010448:	4606      	mov	r6, r0
 801044a:	f340 8081 	ble.w	8010550 <_dtoa_r+0x8c8>
 801044e:	f04f 0800 	mov.w	r8, #0
 8010452:	6933      	ldr	r3, [r6, #16]
 8010454:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010458:	6918      	ldr	r0, [r3, #16]
 801045a:	f000 fabb 	bl	80109d4 <__hi0bits>
 801045e:	f1c0 0020 	rsb	r0, r0, #32
 8010462:	9b05      	ldr	r3, [sp, #20]
 8010464:	4418      	add	r0, r3
 8010466:	f010 001f 	ands.w	r0, r0, #31
 801046a:	f000 8092 	beq.w	8010592 <_dtoa_r+0x90a>
 801046e:	f1c0 0320 	rsb	r3, r0, #32
 8010472:	2b04      	cmp	r3, #4
 8010474:	f340 808a 	ble.w	801058c <_dtoa_r+0x904>
 8010478:	f1c0 001c 	rsb	r0, r0, #28
 801047c:	9b04      	ldr	r3, [sp, #16]
 801047e:	4403      	add	r3, r0
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	9b05      	ldr	r3, [sp, #20]
 8010484:	4403      	add	r3, r0
 8010486:	4405      	add	r5, r0
 8010488:	9305      	str	r3, [sp, #20]
 801048a:	9b04      	ldr	r3, [sp, #16]
 801048c:	2b00      	cmp	r3, #0
 801048e:	dd07      	ble.n	80104a0 <_dtoa_r+0x818>
 8010490:	ee18 1a10 	vmov	r1, s16
 8010494:	461a      	mov	r2, r3
 8010496:	4620      	mov	r0, r4
 8010498:	f000 fc06 	bl	8010ca8 <__lshift>
 801049c:	ee08 0a10 	vmov	s16, r0
 80104a0:	9b05      	ldr	r3, [sp, #20]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	dd05      	ble.n	80104b2 <_dtoa_r+0x82a>
 80104a6:	4631      	mov	r1, r6
 80104a8:	461a      	mov	r2, r3
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 fbfc 	bl	8010ca8 <__lshift>
 80104b0:	4606      	mov	r6, r0
 80104b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d06e      	beq.n	8010596 <_dtoa_r+0x90e>
 80104b8:	ee18 0a10 	vmov	r0, s16
 80104bc:	4631      	mov	r1, r6
 80104be:	f000 fc63 	bl	8010d88 <__mcmp>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	da67      	bge.n	8010596 <_dtoa_r+0x90e>
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	3b01      	subs	r3, #1
 80104ca:	ee18 1a10 	vmov	r1, s16
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	220a      	movs	r2, #10
 80104d2:	2300      	movs	r3, #0
 80104d4:	4620      	mov	r0, r4
 80104d6:	f000 fa37 	bl	8010948 <__multadd>
 80104da:	9b08      	ldr	r3, [sp, #32]
 80104dc:	ee08 0a10 	vmov	s16, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 81b1 	beq.w	8010848 <_dtoa_r+0xbc0>
 80104e6:	2300      	movs	r3, #0
 80104e8:	4639      	mov	r1, r7
 80104ea:	220a      	movs	r2, #10
 80104ec:	4620      	mov	r0, r4
 80104ee:	f000 fa2b 	bl	8010948 <__multadd>
 80104f2:	9b02      	ldr	r3, [sp, #8]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	4607      	mov	r7, r0
 80104f8:	f300 808e 	bgt.w	8010618 <_dtoa_r+0x990>
 80104fc:	9b06      	ldr	r3, [sp, #24]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	dc51      	bgt.n	80105a6 <_dtoa_r+0x91e>
 8010502:	e089      	b.n	8010618 <_dtoa_r+0x990>
 8010504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801050a:	e74b      	b.n	80103a4 <_dtoa_r+0x71c>
 801050c:	9b03      	ldr	r3, [sp, #12]
 801050e:	1e5e      	subs	r6, r3, #1
 8010510:	9b07      	ldr	r3, [sp, #28]
 8010512:	42b3      	cmp	r3, r6
 8010514:	bfbf      	itttt	lt
 8010516:	9b07      	ldrlt	r3, [sp, #28]
 8010518:	9607      	strlt	r6, [sp, #28]
 801051a:	1af2      	sublt	r2, r6, r3
 801051c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801051e:	bfb6      	itet	lt
 8010520:	189b      	addlt	r3, r3, r2
 8010522:	1b9e      	subge	r6, r3, r6
 8010524:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010526:	9b03      	ldr	r3, [sp, #12]
 8010528:	bfb8      	it	lt
 801052a:	2600      	movlt	r6, #0
 801052c:	2b00      	cmp	r3, #0
 801052e:	bfb7      	itett	lt
 8010530:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010534:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010538:	1a9d      	sublt	r5, r3, r2
 801053a:	2300      	movlt	r3, #0
 801053c:	e734      	b.n	80103a8 <_dtoa_r+0x720>
 801053e:	9e07      	ldr	r6, [sp, #28]
 8010540:	9d04      	ldr	r5, [sp, #16]
 8010542:	9f08      	ldr	r7, [sp, #32]
 8010544:	e73b      	b.n	80103be <_dtoa_r+0x736>
 8010546:	9a07      	ldr	r2, [sp, #28]
 8010548:	e767      	b.n	801041a <_dtoa_r+0x792>
 801054a:	9b06      	ldr	r3, [sp, #24]
 801054c:	2b01      	cmp	r3, #1
 801054e:	dc18      	bgt.n	8010582 <_dtoa_r+0x8fa>
 8010550:	f1ba 0f00 	cmp.w	sl, #0
 8010554:	d115      	bne.n	8010582 <_dtoa_r+0x8fa>
 8010556:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801055a:	b993      	cbnz	r3, 8010582 <_dtoa_r+0x8fa>
 801055c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010560:	0d1b      	lsrs	r3, r3, #20
 8010562:	051b      	lsls	r3, r3, #20
 8010564:	b183      	cbz	r3, 8010588 <_dtoa_r+0x900>
 8010566:	9b04      	ldr	r3, [sp, #16]
 8010568:	3301      	adds	r3, #1
 801056a:	9304      	str	r3, [sp, #16]
 801056c:	9b05      	ldr	r3, [sp, #20]
 801056e:	3301      	adds	r3, #1
 8010570:	9305      	str	r3, [sp, #20]
 8010572:	f04f 0801 	mov.w	r8, #1
 8010576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010578:	2b00      	cmp	r3, #0
 801057a:	f47f af6a 	bne.w	8010452 <_dtoa_r+0x7ca>
 801057e:	2001      	movs	r0, #1
 8010580:	e76f      	b.n	8010462 <_dtoa_r+0x7da>
 8010582:	f04f 0800 	mov.w	r8, #0
 8010586:	e7f6      	b.n	8010576 <_dtoa_r+0x8ee>
 8010588:	4698      	mov	r8, r3
 801058a:	e7f4      	b.n	8010576 <_dtoa_r+0x8ee>
 801058c:	f43f af7d 	beq.w	801048a <_dtoa_r+0x802>
 8010590:	4618      	mov	r0, r3
 8010592:	301c      	adds	r0, #28
 8010594:	e772      	b.n	801047c <_dtoa_r+0x7f4>
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	dc37      	bgt.n	801060c <_dtoa_r+0x984>
 801059c:	9b06      	ldr	r3, [sp, #24]
 801059e:	2b02      	cmp	r3, #2
 80105a0:	dd34      	ble.n	801060c <_dtoa_r+0x984>
 80105a2:	9b03      	ldr	r3, [sp, #12]
 80105a4:	9302      	str	r3, [sp, #8]
 80105a6:	9b02      	ldr	r3, [sp, #8]
 80105a8:	b96b      	cbnz	r3, 80105c6 <_dtoa_r+0x93e>
 80105aa:	4631      	mov	r1, r6
 80105ac:	2205      	movs	r2, #5
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 f9ca 	bl	8010948 <__multadd>
 80105b4:	4601      	mov	r1, r0
 80105b6:	4606      	mov	r6, r0
 80105b8:	ee18 0a10 	vmov	r0, s16
 80105bc:	f000 fbe4 	bl	8010d88 <__mcmp>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	f73f adbb 	bgt.w	801013c <_dtoa_r+0x4b4>
 80105c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c8:	9d01      	ldr	r5, [sp, #4]
 80105ca:	43db      	mvns	r3, r3
 80105cc:	9300      	str	r3, [sp, #0]
 80105ce:	f04f 0800 	mov.w	r8, #0
 80105d2:	4631      	mov	r1, r6
 80105d4:	4620      	mov	r0, r4
 80105d6:	f000 f995 	bl	8010904 <_Bfree>
 80105da:	2f00      	cmp	r7, #0
 80105dc:	f43f aea4 	beq.w	8010328 <_dtoa_r+0x6a0>
 80105e0:	f1b8 0f00 	cmp.w	r8, #0
 80105e4:	d005      	beq.n	80105f2 <_dtoa_r+0x96a>
 80105e6:	45b8      	cmp	r8, r7
 80105e8:	d003      	beq.n	80105f2 <_dtoa_r+0x96a>
 80105ea:	4641      	mov	r1, r8
 80105ec:	4620      	mov	r0, r4
 80105ee:	f000 f989 	bl	8010904 <_Bfree>
 80105f2:	4639      	mov	r1, r7
 80105f4:	4620      	mov	r0, r4
 80105f6:	f000 f985 	bl	8010904 <_Bfree>
 80105fa:	e695      	b.n	8010328 <_dtoa_r+0x6a0>
 80105fc:	2600      	movs	r6, #0
 80105fe:	4637      	mov	r7, r6
 8010600:	e7e1      	b.n	80105c6 <_dtoa_r+0x93e>
 8010602:	9700      	str	r7, [sp, #0]
 8010604:	4637      	mov	r7, r6
 8010606:	e599      	b.n	801013c <_dtoa_r+0x4b4>
 8010608:	40240000 	.word	0x40240000
 801060c:	9b08      	ldr	r3, [sp, #32]
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 80ca 	beq.w	80107a8 <_dtoa_r+0xb20>
 8010614:	9b03      	ldr	r3, [sp, #12]
 8010616:	9302      	str	r3, [sp, #8]
 8010618:	2d00      	cmp	r5, #0
 801061a:	dd05      	ble.n	8010628 <_dtoa_r+0x9a0>
 801061c:	4639      	mov	r1, r7
 801061e:	462a      	mov	r2, r5
 8010620:	4620      	mov	r0, r4
 8010622:	f000 fb41 	bl	8010ca8 <__lshift>
 8010626:	4607      	mov	r7, r0
 8010628:	f1b8 0f00 	cmp.w	r8, #0
 801062c:	d05b      	beq.n	80106e6 <_dtoa_r+0xa5e>
 801062e:	6879      	ldr	r1, [r7, #4]
 8010630:	4620      	mov	r0, r4
 8010632:	f000 f927 	bl	8010884 <_Balloc>
 8010636:	4605      	mov	r5, r0
 8010638:	b928      	cbnz	r0, 8010646 <_dtoa_r+0x9be>
 801063a:	4b87      	ldr	r3, [pc, #540]	; (8010858 <_dtoa_r+0xbd0>)
 801063c:	4602      	mov	r2, r0
 801063e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010642:	f7ff bb3b 	b.w	800fcbc <_dtoa_r+0x34>
 8010646:	693a      	ldr	r2, [r7, #16]
 8010648:	3202      	adds	r2, #2
 801064a:	0092      	lsls	r2, r2, #2
 801064c:	f107 010c 	add.w	r1, r7, #12
 8010650:	300c      	adds	r0, #12
 8010652:	f7fe fcf5 	bl	800f040 <memcpy>
 8010656:	2201      	movs	r2, #1
 8010658:	4629      	mov	r1, r5
 801065a:	4620      	mov	r0, r4
 801065c:	f000 fb24 	bl	8010ca8 <__lshift>
 8010660:	9b01      	ldr	r3, [sp, #4]
 8010662:	f103 0901 	add.w	r9, r3, #1
 8010666:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801066a:	4413      	add	r3, r2
 801066c:	9305      	str	r3, [sp, #20]
 801066e:	f00a 0301 	and.w	r3, sl, #1
 8010672:	46b8      	mov	r8, r7
 8010674:	9304      	str	r3, [sp, #16]
 8010676:	4607      	mov	r7, r0
 8010678:	4631      	mov	r1, r6
 801067a:	ee18 0a10 	vmov	r0, s16
 801067e:	f7ff fa77 	bl	800fb70 <quorem>
 8010682:	4641      	mov	r1, r8
 8010684:	9002      	str	r0, [sp, #8]
 8010686:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801068a:	ee18 0a10 	vmov	r0, s16
 801068e:	f000 fb7b 	bl	8010d88 <__mcmp>
 8010692:	463a      	mov	r2, r7
 8010694:	9003      	str	r0, [sp, #12]
 8010696:	4631      	mov	r1, r6
 8010698:	4620      	mov	r0, r4
 801069a:	f000 fb91 	bl	8010dc0 <__mdiff>
 801069e:	68c2      	ldr	r2, [r0, #12]
 80106a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80106a4:	4605      	mov	r5, r0
 80106a6:	bb02      	cbnz	r2, 80106ea <_dtoa_r+0xa62>
 80106a8:	4601      	mov	r1, r0
 80106aa:	ee18 0a10 	vmov	r0, s16
 80106ae:	f000 fb6b 	bl	8010d88 <__mcmp>
 80106b2:	4602      	mov	r2, r0
 80106b4:	4629      	mov	r1, r5
 80106b6:	4620      	mov	r0, r4
 80106b8:	9207      	str	r2, [sp, #28]
 80106ba:	f000 f923 	bl	8010904 <_Bfree>
 80106be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80106c2:	ea43 0102 	orr.w	r1, r3, r2
 80106c6:	9b04      	ldr	r3, [sp, #16]
 80106c8:	430b      	orrs	r3, r1
 80106ca:	464d      	mov	r5, r9
 80106cc:	d10f      	bne.n	80106ee <_dtoa_r+0xa66>
 80106ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80106d2:	d02a      	beq.n	801072a <_dtoa_r+0xaa2>
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	dd02      	ble.n	80106e0 <_dtoa_r+0xa58>
 80106da:	9b02      	ldr	r3, [sp, #8]
 80106dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80106e0:	f88b a000 	strb.w	sl, [fp]
 80106e4:	e775      	b.n	80105d2 <_dtoa_r+0x94a>
 80106e6:	4638      	mov	r0, r7
 80106e8:	e7ba      	b.n	8010660 <_dtoa_r+0x9d8>
 80106ea:	2201      	movs	r2, #1
 80106ec:	e7e2      	b.n	80106b4 <_dtoa_r+0xa2c>
 80106ee:	9b03      	ldr	r3, [sp, #12]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	db04      	blt.n	80106fe <_dtoa_r+0xa76>
 80106f4:	9906      	ldr	r1, [sp, #24]
 80106f6:	430b      	orrs	r3, r1
 80106f8:	9904      	ldr	r1, [sp, #16]
 80106fa:	430b      	orrs	r3, r1
 80106fc:	d122      	bne.n	8010744 <_dtoa_r+0xabc>
 80106fe:	2a00      	cmp	r2, #0
 8010700:	ddee      	ble.n	80106e0 <_dtoa_r+0xa58>
 8010702:	ee18 1a10 	vmov	r1, s16
 8010706:	2201      	movs	r2, #1
 8010708:	4620      	mov	r0, r4
 801070a:	f000 facd 	bl	8010ca8 <__lshift>
 801070e:	4631      	mov	r1, r6
 8010710:	ee08 0a10 	vmov	s16, r0
 8010714:	f000 fb38 	bl	8010d88 <__mcmp>
 8010718:	2800      	cmp	r0, #0
 801071a:	dc03      	bgt.n	8010724 <_dtoa_r+0xa9c>
 801071c:	d1e0      	bne.n	80106e0 <_dtoa_r+0xa58>
 801071e:	f01a 0f01 	tst.w	sl, #1
 8010722:	d0dd      	beq.n	80106e0 <_dtoa_r+0xa58>
 8010724:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010728:	d1d7      	bne.n	80106da <_dtoa_r+0xa52>
 801072a:	2339      	movs	r3, #57	; 0x39
 801072c:	f88b 3000 	strb.w	r3, [fp]
 8010730:	462b      	mov	r3, r5
 8010732:	461d      	mov	r5, r3
 8010734:	3b01      	subs	r3, #1
 8010736:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801073a:	2a39      	cmp	r2, #57	; 0x39
 801073c:	d071      	beq.n	8010822 <_dtoa_r+0xb9a>
 801073e:	3201      	adds	r2, #1
 8010740:	701a      	strb	r2, [r3, #0]
 8010742:	e746      	b.n	80105d2 <_dtoa_r+0x94a>
 8010744:	2a00      	cmp	r2, #0
 8010746:	dd07      	ble.n	8010758 <_dtoa_r+0xad0>
 8010748:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801074c:	d0ed      	beq.n	801072a <_dtoa_r+0xaa2>
 801074e:	f10a 0301 	add.w	r3, sl, #1
 8010752:	f88b 3000 	strb.w	r3, [fp]
 8010756:	e73c      	b.n	80105d2 <_dtoa_r+0x94a>
 8010758:	9b05      	ldr	r3, [sp, #20]
 801075a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801075e:	4599      	cmp	r9, r3
 8010760:	d047      	beq.n	80107f2 <_dtoa_r+0xb6a>
 8010762:	ee18 1a10 	vmov	r1, s16
 8010766:	2300      	movs	r3, #0
 8010768:	220a      	movs	r2, #10
 801076a:	4620      	mov	r0, r4
 801076c:	f000 f8ec 	bl	8010948 <__multadd>
 8010770:	45b8      	cmp	r8, r7
 8010772:	ee08 0a10 	vmov	s16, r0
 8010776:	f04f 0300 	mov.w	r3, #0
 801077a:	f04f 020a 	mov.w	r2, #10
 801077e:	4641      	mov	r1, r8
 8010780:	4620      	mov	r0, r4
 8010782:	d106      	bne.n	8010792 <_dtoa_r+0xb0a>
 8010784:	f000 f8e0 	bl	8010948 <__multadd>
 8010788:	4680      	mov	r8, r0
 801078a:	4607      	mov	r7, r0
 801078c:	f109 0901 	add.w	r9, r9, #1
 8010790:	e772      	b.n	8010678 <_dtoa_r+0x9f0>
 8010792:	f000 f8d9 	bl	8010948 <__multadd>
 8010796:	4639      	mov	r1, r7
 8010798:	4680      	mov	r8, r0
 801079a:	2300      	movs	r3, #0
 801079c:	220a      	movs	r2, #10
 801079e:	4620      	mov	r0, r4
 80107a0:	f000 f8d2 	bl	8010948 <__multadd>
 80107a4:	4607      	mov	r7, r0
 80107a6:	e7f1      	b.n	801078c <_dtoa_r+0xb04>
 80107a8:	9b03      	ldr	r3, [sp, #12]
 80107aa:	9302      	str	r3, [sp, #8]
 80107ac:	9d01      	ldr	r5, [sp, #4]
 80107ae:	ee18 0a10 	vmov	r0, s16
 80107b2:	4631      	mov	r1, r6
 80107b4:	f7ff f9dc 	bl	800fb70 <quorem>
 80107b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80107bc:	9b01      	ldr	r3, [sp, #4]
 80107be:	f805 ab01 	strb.w	sl, [r5], #1
 80107c2:	1aea      	subs	r2, r5, r3
 80107c4:	9b02      	ldr	r3, [sp, #8]
 80107c6:	4293      	cmp	r3, r2
 80107c8:	dd09      	ble.n	80107de <_dtoa_r+0xb56>
 80107ca:	ee18 1a10 	vmov	r1, s16
 80107ce:	2300      	movs	r3, #0
 80107d0:	220a      	movs	r2, #10
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 f8b8 	bl	8010948 <__multadd>
 80107d8:	ee08 0a10 	vmov	s16, r0
 80107dc:	e7e7      	b.n	80107ae <_dtoa_r+0xb26>
 80107de:	9b02      	ldr	r3, [sp, #8]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	bfc8      	it	gt
 80107e4:	461d      	movgt	r5, r3
 80107e6:	9b01      	ldr	r3, [sp, #4]
 80107e8:	bfd8      	it	le
 80107ea:	2501      	movle	r5, #1
 80107ec:	441d      	add	r5, r3
 80107ee:	f04f 0800 	mov.w	r8, #0
 80107f2:	ee18 1a10 	vmov	r1, s16
 80107f6:	2201      	movs	r2, #1
 80107f8:	4620      	mov	r0, r4
 80107fa:	f000 fa55 	bl	8010ca8 <__lshift>
 80107fe:	4631      	mov	r1, r6
 8010800:	ee08 0a10 	vmov	s16, r0
 8010804:	f000 fac0 	bl	8010d88 <__mcmp>
 8010808:	2800      	cmp	r0, #0
 801080a:	dc91      	bgt.n	8010730 <_dtoa_r+0xaa8>
 801080c:	d102      	bne.n	8010814 <_dtoa_r+0xb8c>
 801080e:	f01a 0f01 	tst.w	sl, #1
 8010812:	d18d      	bne.n	8010730 <_dtoa_r+0xaa8>
 8010814:	462b      	mov	r3, r5
 8010816:	461d      	mov	r5, r3
 8010818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801081c:	2a30      	cmp	r2, #48	; 0x30
 801081e:	d0fa      	beq.n	8010816 <_dtoa_r+0xb8e>
 8010820:	e6d7      	b.n	80105d2 <_dtoa_r+0x94a>
 8010822:	9a01      	ldr	r2, [sp, #4]
 8010824:	429a      	cmp	r2, r3
 8010826:	d184      	bne.n	8010732 <_dtoa_r+0xaaa>
 8010828:	9b00      	ldr	r3, [sp, #0]
 801082a:	3301      	adds	r3, #1
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	2331      	movs	r3, #49	; 0x31
 8010830:	7013      	strb	r3, [r2, #0]
 8010832:	e6ce      	b.n	80105d2 <_dtoa_r+0x94a>
 8010834:	4b09      	ldr	r3, [pc, #36]	; (801085c <_dtoa_r+0xbd4>)
 8010836:	f7ff ba95 	b.w	800fd64 <_dtoa_r+0xdc>
 801083a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801083c:	2b00      	cmp	r3, #0
 801083e:	f47f aa6e 	bne.w	800fd1e <_dtoa_r+0x96>
 8010842:	4b07      	ldr	r3, [pc, #28]	; (8010860 <_dtoa_r+0xbd8>)
 8010844:	f7ff ba8e 	b.w	800fd64 <_dtoa_r+0xdc>
 8010848:	9b02      	ldr	r3, [sp, #8]
 801084a:	2b00      	cmp	r3, #0
 801084c:	dcae      	bgt.n	80107ac <_dtoa_r+0xb24>
 801084e:	9b06      	ldr	r3, [sp, #24]
 8010850:	2b02      	cmp	r3, #2
 8010852:	f73f aea8 	bgt.w	80105a6 <_dtoa_r+0x91e>
 8010856:	e7a9      	b.n	80107ac <_dtoa_r+0xb24>
 8010858:	0802b107 	.word	0x0802b107
 801085c:	0802b064 	.word	0x0802b064
 8010860:	0802b088 	.word	0x0802b088

08010864 <_localeconv_r>:
 8010864:	4800      	ldr	r0, [pc, #0]	; (8010868 <_localeconv_r+0x4>)
 8010866:	4770      	bx	lr
 8010868:	200019dc 	.word	0x200019dc

0801086c <__malloc_lock>:
 801086c:	4801      	ldr	r0, [pc, #4]	; (8010874 <__malloc_lock+0x8>)
 801086e:	f000 bd5e 	b.w	801132e <__retarget_lock_acquire_recursive>
 8010872:	bf00      	nop
 8010874:	20004bd4 	.word	0x20004bd4

08010878 <__malloc_unlock>:
 8010878:	4801      	ldr	r0, [pc, #4]	; (8010880 <__malloc_unlock+0x8>)
 801087a:	f000 bd59 	b.w	8011330 <__retarget_lock_release_recursive>
 801087e:	bf00      	nop
 8010880:	20004bd4 	.word	0x20004bd4

08010884 <_Balloc>:
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010888:	4604      	mov	r4, r0
 801088a:	460d      	mov	r5, r1
 801088c:	b976      	cbnz	r6, 80108ac <_Balloc+0x28>
 801088e:	2010      	movs	r0, #16
 8010890:	f7fe fbce 	bl	800f030 <malloc>
 8010894:	4602      	mov	r2, r0
 8010896:	6260      	str	r0, [r4, #36]	; 0x24
 8010898:	b920      	cbnz	r0, 80108a4 <_Balloc+0x20>
 801089a:	4b18      	ldr	r3, [pc, #96]	; (80108fc <_Balloc+0x78>)
 801089c:	4818      	ldr	r0, [pc, #96]	; (8010900 <_Balloc+0x7c>)
 801089e:	2166      	movs	r1, #102	; 0x66
 80108a0:	f000 fd14 	bl	80112cc <__assert_func>
 80108a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108a8:	6006      	str	r6, [r0, #0]
 80108aa:	60c6      	str	r6, [r0, #12]
 80108ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80108ae:	68f3      	ldr	r3, [r6, #12]
 80108b0:	b183      	cbz	r3, 80108d4 <_Balloc+0x50>
 80108b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108b4:	68db      	ldr	r3, [r3, #12]
 80108b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108ba:	b9b8      	cbnz	r0, 80108ec <_Balloc+0x68>
 80108bc:	2101      	movs	r1, #1
 80108be:	fa01 f605 	lsl.w	r6, r1, r5
 80108c2:	1d72      	adds	r2, r6, #5
 80108c4:	0092      	lsls	r2, r2, #2
 80108c6:	4620      	mov	r0, r4
 80108c8:	f000 fb60 	bl	8010f8c <_calloc_r>
 80108cc:	b160      	cbz	r0, 80108e8 <_Balloc+0x64>
 80108ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108d2:	e00e      	b.n	80108f2 <_Balloc+0x6e>
 80108d4:	2221      	movs	r2, #33	; 0x21
 80108d6:	2104      	movs	r1, #4
 80108d8:	4620      	mov	r0, r4
 80108da:	f000 fb57 	bl	8010f8c <_calloc_r>
 80108de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108e0:	60f0      	str	r0, [r6, #12]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1e4      	bne.n	80108b2 <_Balloc+0x2e>
 80108e8:	2000      	movs	r0, #0
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
 80108ec:	6802      	ldr	r2, [r0, #0]
 80108ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108f2:	2300      	movs	r3, #0
 80108f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108f8:	e7f7      	b.n	80108ea <_Balloc+0x66>
 80108fa:	bf00      	nop
 80108fc:	0802b095 	.word	0x0802b095
 8010900:	0802b118 	.word	0x0802b118

08010904 <_Bfree>:
 8010904:	b570      	push	{r4, r5, r6, lr}
 8010906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010908:	4605      	mov	r5, r0
 801090a:	460c      	mov	r4, r1
 801090c:	b976      	cbnz	r6, 801092c <_Bfree+0x28>
 801090e:	2010      	movs	r0, #16
 8010910:	f7fe fb8e 	bl	800f030 <malloc>
 8010914:	4602      	mov	r2, r0
 8010916:	6268      	str	r0, [r5, #36]	; 0x24
 8010918:	b920      	cbnz	r0, 8010924 <_Bfree+0x20>
 801091a:	4b09      	ldr	r3, [pc, #36]	; (8010940 <_Bfree+0x3c>)
 801091c:	4809      	ldr	r0, [pc, #36]	; (8010944 <_Bfree+0x40>)
 801091e:	218a      	movs	r1, #138	; 0x8a
 8010920:	f000 fcd4 	bl	80112cc <__assert_func>
 8010924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010928:	6006      	str	r6, [r0, #0]
 801092a:	60c6      	str	r6, [r0, #12]
 801092c:	b13c      	cbz	r4, 801093e <_Bfree+0x3a>
 801092e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010930:	6862      	ldr	r2, [r4, #4]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010938:	6021      	str	r1, [r4, #0]
 801093a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801093e:	bd70      	pop	{r4, r5, r6, pc}
 8010940:	0802b095 	.word	0x0802b095
 8010944:	0802b118 	.word	0x0802b118

08010948 <__multadd>:
 8010948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801094c:	690d      	ldr	r5, [r1, #16]
 801094e:	4607      	mov	r7, r0
 8010950:	460c      	mov	r4, r1
 8010952:	461e      	mov	r6, r3
 8010954:	f101 0c14 	add.w	ip, r1, #20
 8010958:	2000      	movs	r0, #0
 801095a:	f8dc 3000 	ldr.w	r3, [ip]
 801095e:	b299      	uxth	r1, r3
 8010960:	fb02 6101 	mla	r1, r2, r1, r6
 8010964:	0c1e      	lsrs	r6, r3, #16
 8010966:	0c0b      	lsrs	r3, r1, #16
 8010968:	fb02 3306 	mla	r3, r2, r6, r3
 801096c:	b289      	uxth	r1, r1
 801096e:	3001      	adds	r0, #1
 8010970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010974:	4285      	cmp	r5, r0
 8010976:	f84c 1b04 	str.w	r1, [ip], #4
 801097a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801097e:	dcec      	bgt.n	801095a <__multadd+0x12>
 8010980:	b30e      	cbz	r6, 80109c6 <__multadd+0x7e>
 8010982:	68a3      	ldr	r3, [r4, #8]
 8010984:	42ab      	cmp	r3, r5
 8010986:	dc19      	bgt.n	80109bc <__multadd+0x74>
 8010988:	6861      	ldr	r1, [r4, #4]
 801098a:	4638      	mov	r0, r7
 801098c:	3101      	adds	r1, #1
 801098e:	f7ff ff79 	bl	8010884 <_Balloc>
 8010992:	4680      	mov	r8, r0
 8010994:	b928      	cbnz	r0, 80109a2 <__multadd+0x5a>
 8010996:	4602      	mov	r2, r0
 8010998:	4b0c      	ldr	r3, [pc, #48]	; (80109cc <__multadd+0x84>)
 801099a:	480d      	ldr	r0, [pc, #52]	; (80109d0 <__multadd+0x88>)
 801099c:	21b5      	movs	r1, #181	; 0xb5
 801099e:	f000 fc95 	bl	80112cc <__assert_func>
 80109a2:	6922      	ldr	r2, [r4, #16]
 80109a4:	3202      	adds	r2, #2
 80109a6:	f104 010c 	add.w	r1, r4, #12
 80109aa:	0092      	lsls	r2, r2, #2
 80109ac:	300c      	adds	r0, #12
 80109ae:	f7fe fb47 	bl	800f040 <memcpy>
 80109b2:	4621      	mov	r1, r4
 80109b4:	4638      	mov	r0, r7
 80109b6:	f7ff ffa5 	bl	8010904 <_Bfree>
 80109ba:	4644      	mov	r4, r8
 80109bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109c0:	3501      	adds	r5, #1
 80109c2:	615e      	str	r6, [r3, #20]
 80109c4:	6125      	str	r5, [r4, #16]
 80109c6:	4620      	mov	r0, r4
 80109c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109cc:	0802b107 	.word	0x0802b107
 80109d0:	0802b118 	.word	0x0802b118

080109d4 <__hi0bits>:
 80109d4:	0c03      	lsrs	r3, r0, #16
 80109d6:	041b      	lsls	r3, r3, #16
 80109d8:	b9d3      	cbnz	r3, 8010a10 <__hi0bits+0x3c>
 80109da:	0400      	lsls	r0, r0, #16
 80109dc:	2310      	movs	r3, #16
 80109de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109e2:	bf04      	itt	eq
 80109e4:	0200      	lsleq	r0, r0, #8
 80109e6:	3308      	addeq	r3, #8
 80109e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109ec:	bf04      	itt	eq
 80109ee:	0100      	lsleq	r0, r0, #4
 80109f0:	3304      	addeq	r3, #4
 80109f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80109f6:	bf04      	itt	eq
 80109f8:	0080      	lsleq	r0, r0, #2
 80109fa:	3302      	addeq	r3, #2
 80109fc:	2800      	cmp	r0, #0
 80109fe:	db05      	blt.n	8010a0c <__hi0bits+0x38>
 8010a00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a04:	f103 0301 	add.w	r3, r3, #1
 8010a08:	bf08      	it	eq
 8010a0a:	2320      	moveq	r3, #32
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	4770      	bx	lr
 8010a10:	2300      	movs	r3, #0
 8010a12:	e7e4      	b.n	80109de <__hi0bits+0xa>

08010a14 <__lo0bits>:
 8010a14:	6803      	ldr	r3, [r0, #0]
 8010a16:	f013 0207 	ands.w	r2, r3, #7
 8010a1a:	4601      	mov	r1, r0
 8010a1c:	d00b      	beq.n	8010a36 <__lo0bits+0x22>
 8010a1e:	07da      	lsls	r2, r3, #31
 8010a20:	d423      	bmi.n	8010a6a <__lo0bits+0x56>
 8010a22:	0798      	lsls	r0, r3, #30
 8010a24:	bf49      	itett	mi
 8010a26:	085b      	lsrmi	r3, r3, #1
 8010a28:	089b      	lsrpl	r3, r3, #2
 8010a2a:	2001      	movmi	r0, #1
 8010a2c:	600b      	strmi	r3, [r1, #0]
 8010a2e:	bf5c      	itt	pl
 8010a30:	600b      	strpl	r3, [r1, #0]
 8010a32:	2002      	movpl	r0, #2
 8010a34:	4770      	bx	lr
 8010a36:	b298      	uxth	r0, r3
 8010a38:	b9a8      	cbnz	r0, 8010a66 <__lo0bits+0x52>
 8010a3a:	0c1b      	lsrs	r3, r3, #16
 8010a3c:	2010      	movs	r0, #16
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	b90a      	cbnz	r2, 8010a46 <__lo0bits+0x32>
 8010a42:	3008      	adds	r0, #8
 8010a44:	0a1b      	lsrs	r3, r3, #8
 8010a46:	071a      	lsls	r2, r3, #28
 8010a48:	bf04      	itt	eq
 8010a4a:	091b      	lsreq	r3, r3, #4
 8010a4c:	3004      	addeq	r0, #4
 8010a4e:	079a      	lsls	r2, r3, #30
 8010a50:	bf04      	itt	eq
 8010a52:	089b      	lsreq	r3, r3, #2
 8010a54:	3002      	addeq	r0, #2
 8010a56:	07da      	lsls	r2, r3, #31
 8010a58:	d403      	bmi.n	8010a62 <__lo0bits+0x4e>
 8010a5a:	085b      	lsrs	r3, r3, #1
 8010a5c:	f100 0001 	add.w	r0, r0, #1
 8010a60:	d005      	beq.n	8010a6e <__lo0bits+0x5a>
 8010a62:	600b      	str	r3, [r1, #0]
 8010a64:	4770      	bx	lr
 8010a66:	4610      	mov	r0, r2
 8010a68:	e7e9      	b.n	8010a3e <__lo0bits+0x2a>
 8010a6a:	2000      	movs	r0, #0
 8010a6c:	4770      	bx	lr
 8010a6e:	2020      	movs	r0, #32
 8010a70:	4770      	bx	lr
	...

08010a74 <__i2b>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	460c      	mov	r4, r1
 8010a78:	2101      	movs	r1, #1
 8010a7a:	f7ff ff03 	bl	8010884 <_Balloc>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	b928      	cbnz	r0, 8010a8e <__i2b+0x1a>
 8010a82:	4b05      	ldr	r3, [pc, #20]	; (8010a98 <__i2b+0x24>)
 8010a84:	4805      	ldr	r0, [pc, #20]	; (8010a9c <__i2b+0x28>)
 8010a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a8a:	f000 fc1f 	bl	80112cc <__assert_func>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	6144      	str	r4, [r0, #20]
 8010a92:	6103      	str	r3, [r0, #16]
 8010a94:	bd10      	pop	{r4, pc}
 8010a96:	bf00      	nop
 8010a98:	0802b107 	.word	0x0802b107
 8010a9c:	0802b118 	.word	0x0802b118

08010aa0 <__multiply>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	4691      	mov	r9, r2
 8010aa6:	690a      	ldr	r2, [r1, #16]
 8010aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	bfb8      	it	lt
 8010ab0:	460b      	movlt	r3, r1
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	bfbc      	itt	lt
 8010ab6:	464c      	movlt	r4, r9
 8010ab8:	4699      	movlt	r9, r3
 8010aba:	6927      	ldr	r7, [r4, #16]
 8010abc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ac0:	68a3      	ldr	r3, [r4, #8]
 8010ac2:	6861      	ldr	r1, [r4, #4]
 8010ac4:	eb07 060a 	add.w	r6, r7, sl
 8010ac8:	42b3      	cmp	r3, r6
 8010aca:	b085      	sub	sp, #20
 8010acc:	bfb8      	it	lt
 8010ace:	3101      	addlt	r1, #1
 8010ad0:	f7ff fed8 	bl	8010884 <_Balloc>
 8010ad4:	b930      	cbnz	r0, 8010ae4 <__multiply+0x44>
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	4b44      	ldr	r3, [pc, #272]	; (8010bec <__multiply+0x14c>)
 8010ada:	4845      	ldr	r0, [pc, #276]	; (8010bf0 <__multiply+0x150>)
 8010adc:	f240 115d 	movw	r1, #349	; 0x15d
 8010ae0:	f000 fbf4 	bl	80112cc <__assert_func>
 8010ae4:	f100 0514 	add.w	r5, r0, #20
 8010ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010aec:	462b      	mov	r3, r5
 8010aee:	2200      	movs	r2, #0
 8010af0:	4543      	cmp	r3, r8
 8010af2:	d321      	bcc.n	8010b38 <__multiply+0x98>
 8010af4:	f104 0314 	add.w	r3, r4, #20
 8010af8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010afc:	f109 0314 	add.w	r3, r9, #20
 8010b00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b04:	9202      	str	r2, [sp, #8]
 8010b06:	1b3a      	subs	r2, r7, r4
 8010b08:	3a15      	subs	r2, #21
 8010b0a:	f022 0203 	bic.w	r2, r2, #3
 8010b0e:	3204      	adds	r2, #4
 8010b10:	f104 0115 	add.w	r1, r4, #21
 8010b14:	428f      	cmp	r7, r1
 8010b16:	bf38      	it	cc
 8010b18:	2204      	movcc	r2, #4
 8010b1a:	9201      	str	r2, [sp, #4]
 8010b1c:	9a02      	ldr	r2, [sp, #8]
 8010b1e:	9303      	str	r3, [sp, #12]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d80c      	bhi.n	8010b3e <__multiply+0x9e>
 8010b24:	2e00      	cmp	r6, #0
 8010b26:	dd03      	ble.n	8010b30 <__multiply+0x90>
 8010b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d05a      	beq.n	8010be6 <__multiply+0x146>
 8010b30:	6106      	str	r6, [r0, #16]
 8010b32:	b005      	add	sp, #20
 8010b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b38:	f843 2b04 	str.w	r2, [r3], #4
 8010b3c:	e7d8      	b.n	8010af0 <__multiply+0x50>
 8010b3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b42:	f1ba 0f00 	cmp.w	sl, #0
 8010b46:	d024      	beq.n	8010b92 <__multiply+0xf2>
 8010b48:	f104 0e14 	add.w	lr, r4, #20
 8010b4c:	46a9      	mov	r9, r5
 8010b4e:	f04f 0c00 	mov.w	ip, #0
 8010b52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b56:	f8d9 1000 	ldr.w	r1, [r9]
 8010b5a:	fa1f fb82 	uxth.w	fp, r2
 8010b5e:	b289      	uxth	r1, r1
 8010b60:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b68:	f8d9 2000 	ldr.w	r2, [r9]
 8010b6c:	4461      	add	r1, ip
 8010b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b72:	fb0a c20b 	mla	r2, sl, fp, ip
 8010b76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b7a:	b289      	uxth	r1, r1
 8010b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b80:	4577      	cmp	r7, lr
 8010b82:	f849 1b04 	str.w	r1, [r9], #4
 8010b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b8a:	d8e2      	bhi.n	8010b52 <__multiply+0xb2>
 8010b8c:	9a01      	ldr	r2, [sp, #4]
 8010b8e:	f845 c002 	str.w	ip, [r5, r2]
 8010b92:	9a03      	ldr	r2, [sp, #12]
 8010b94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b98:	3304      	adds	r3, #4
 8010b9a:	f1b9 0f00 	cmp.w	r9, #0
 8010b9e:	d020      	beq.n	8010be2 <__multiply+0x142>
 8010ba0:	6829      	ldr	r1, [r5, #0]
 8010ba2:	f104 0c14 	add.w	ip, r4, #20
 8010ba6:	46ae      	mov	lr, r5
 8010ba8:	f04f 0a00 	mov.w	sl, #0
 8010bac:	f8bc b000 	ldrh.w	fp, [ip]
 8010bb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010bb4:	fb09 220b 	mla	r2, r9, fp, r2
 8010bb8:	4492      	add	sl, r2
 8010bba:	b289      	uxth	r1, r1
 8010bbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8010bc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010bc8:	f8be 1000 	ldrh.w	r1, [lr]
 8010bcc:	0c12      	lsrs	r2, r2, #16
 8010bce:	fb09 1102 	mla	r1, r9, r2, r1
 8010bd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010bd6:	4567      	cmp	r7, ip
 8010bd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bdc:	d8e6      	bhi.n	8010bac <__multiply+0x10c>
 8010bde:	9a01      	ldr	r2, [sp, #4]
 8010be0:	50a9      	str	r1, [r5, r2]
 8010be2:	3504      	adds	r5, #4
 8010be4:	e79a      	b.n	8010b1c <__multiply+0x7c>
 8010be6:	3e01      	subs	r6, #1
 8010be8:	e79c      	b.n	8010b24 <__multiply+0x84>
 8010bea:	bf00      	nop
 8010bec:	0802b107 	.word	0x0802b107
 8010bf0:	0802b118 	.word	0x0802b118

08010bf4 <__pow5mult>:
 8010bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf8:	4615      	mov	r5, r2
 8010bfa:	f012 0203 	ands.w	r2, r2, #3
 8010bfe:	4606      	mov	r6, r0
 8010c00:	460f      	mov	r7, r1
 8010c02:	d007      	beq.n	8010c14 <__pow5mult+0x20>
 8010c04:	4c25      	ldr	r4, [pc, #148]	; (8010c9c <__pow5mult+0xa8>)
 8010c06:	3a01      	subs	r2, #1
 8010c08:	2300      	movs	r3, #0
 8010c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c0e:	f7ff fe9b 	bl	8010948 <__multadd>
 8010c12:	4607      	mov	r7, r0
 8010c14:	10ad      	asrs	r5, r5, #2
 8010c16:	d03d      	beq.n	8010c94 <__pow5mult+0xa0>
 8010c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c1a:	b97c      	cbnz	r4, 8010c3c <__pow5mult+0x48>
 8010c1c:	2010      	movs	r0, #16
 8010c1e:	f7fe fa07 	bl	800f030 <malloc>
 8010c22:	4602      	mov	r2, r0
 8010c24:	6270      	str	r0, [r6, #36]	; 0x24
 8010c26:	b928      	cbnz	r0, 8010c34 <__pow5mult+0x40>
 8010c28:	4b1d      	ldr	r3, [pc, #116]	; (8010ca0 <__pow5mult+0xac>)
 8010c2a:	481e      	ldr	r0, [pc, #120]	; (8010ca4 <__pow5mult+0xb0>)
 8010c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c30:	f000 fb4c 	bl	80112cc <__assert_func>
 8010c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c38:	6004      	str	r4, [r0, #0]
 8010c3a:	60c4      	str	r4, [r0, #12]
 8010c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c44:	b94c      	cbnz	r4, 8010c5a <__pow5mult+0x66>
 8010c46:	f240 2171 	movw	r1, #625	; 0x271
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f7ff ff12 	bl	8010a74 <__i2b>
 8010c50:	2300      	movs	r3, #0
 8010c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c56:	4604      	mov	r4, r0
 8010c58:	6003      	str	r3, [r0, #0]
 8010c5a:	f04f 0900 	mov.w	r9, #0
 8010c5e:	07eb      	lsls	r3, r5, #31
 8010c60:	d50a      	bpl.n	8010c78 <__pow5mult+0x84>
 8010c62:	4639      	mov	r1, r7
 8010c64:	4622      	mov	r2, r4
 8010c66:	4630      	mov	r0, r6
 8010c68:	f7ff ff1a 	bl	8010aa0 <__multiply>
 8010c6c:	4639      	mov	r1, r7
 8010c6e:	4680      	mov	r8, r0
 8010c70:	4630      	mov	r0, r6
 8010c72:	f7ff fe47 	bl	8010904 <_Bfree>
 8010c76:	4647      	mov	r7, r8
 8010c78:	106d      	asrs	r5, r5, #1
 8010c7a:	d00b      	beq.n	8010c94 <__pow5mult+0xa0>
 8010c7c:	6820      	ldr	r0, [r4, #0]
 8010c7e:	b938      	cbnz	r0, 8010c90 <__pow5mult+0x9c>
 8010c80:	4622      	mov	r2, r4
 8010c82:	4621      	mov	r1, r4
 8010c84:	4630      	mov	r0, r6
 8010c86:	f7ff ff0b 	bl	8010aa0 <__multiply>
 8010c8a:	6020      	str	r0, [r4, #0]
 8010c8c:	f8c0 9000 	str.w	r9, [r0]
 8010c90:	4604      	mov	r4, r0
 8010c92:	e7e4      	b.n	8010c5e <__pow5mult+0x6a>
 8010c94:	4638      	mov	r0, r7
 8010c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c9a:	bf00      	nop
 8010c9c:	0802b268 	.word	0x0802b268
 8010ca0:	0802b095 	.word	0x0802b095
 8010ca4:	0802b118 	.word	0x0802b118

08010ca8 <__lshift>:
 8010ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cac:	460c      	mov	r4, r1
 8010cae:	6849      	ldr	r1, [r1, #4]
 8010cb0:	6923      	ldr	r3, [r4, #16]
 8010cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	4607      	mov	r7, r0
 8010cba:	4691      	mov	r9, r2
 8010cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cc0:	f108 0601 	add.w	r6, r8, #1
 8010cc4:	42b3      	cmp	r3, r6
 8010cc6:	db0b      	blt.n	8010ce0 <__lshift+0x38>
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f7ff fddb 	bl	8010884 <_Balloc>
 8010cce:	4605      	mov	r5, r0
 8010cd0:	b948      	cbnz	r0, 8010ce6 <__lshift+0x3e>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	4b2a      	ldr	r3, [pc, #168]	; (8010d80 <__lshift+0xd8>)
 8010cd6:	482b      	ldr	r0, [pc, #172]	; (8010d84 <__lshift+0xdc>)
 8010cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010cdc:	f000 faf6 	bl	80112cc <__assert_func>
 8010ce0:	3101      	adds	r1, #1
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	e7ee      	b.n	8010cc4 <__lshift+0x1c>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	f100 0114 	add.w	r1, r0, #20
 8010cec:	f100 0210 	add.w	r2, r0, #16
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	4553      	cmp	r3, sl
 8010cf4:	db37      	blt.n	8010d66 <__lshift+0xbe>
 8010cf6:	6920      	ldr	r0, [r4, #16]
 8010cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cfc:	f104 0314 	add.w	r3, r4, #20
 8010d00:	f019 091f 	ands.w	r9, r9, #31
 8010d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010d0c:	d02f      	beq.n	8010d6e <__lshift+0xc6>
 8010d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8010d12:	468a      	mov	sl, r1
 8010d14:	f04f 0c00 	mov.w	ip, #0
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	fa02 f209 	lsl.w	r2, r2, r9
 8010d1e:	ea42 020c 	orr.w	r2, r2, ip
 8010d22:	f84a 2b04 	str.w	r2, [sl], #4
 8010d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d2a:	4298      	cmp	r0, r3
 8010d2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010d30:	d8f2      	bhi.n	8010d18 <__lshift+0x70>
 8010d32:	1b03      	subs	r3, r0, r4
 8010d34:	3b15      	subs	r3, #21
 8010d36:	f023 0303 	bic.w	r3, r3, #3
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	f104 0215 	add.w	r2, r4, #21
 8010d40:	4290      	cmp	r0, r2
 8010d42:	bf38      	it	cc
 8010d44:	2304      	movcc	r3, #4
 8010d46:	f841 c003 	str.w	ip, [r1, r3]
 8010d4a:	f1bc 0f00 	cmp.w	ip, #0
 8010d4e:	d001      	beq.n	8010d54 <__lshift+0xac>
 8010d50:	f108 0602 	add.w	r6, r8, #2
 8010d54:	3e01      	subs	r6, #1
 8010d56:	4638      	mov	r0, r7
 8010d58:	612e      	str	r6, [r5, #16]
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	f7ff fdd2 	bl	8010904 <_Bfree>
 8010d60:	4628      	mov	r0, r5
 8010d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	e7c1      	b.n	8010cf2 <__lshift+0x4a>
 8010d6e:	3904      	subs	r1, #4
 8010d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d78:	4298      	cmp	r0, r3
 8010d7a:	d8f9      	bhi.n	8010d70 <__lshift+0xc8>
 8010d7c:	e7ea      	b.n	8010d54 <__lshift+0xac>
 8010d7e:	bf00      	nop
 8010d80:	0802b107 	.word	0x0802b107
 8010d84:	0802b118 	.word	0x0802b118

08010d88 <__mcmp>:
 8010d88:	b530      	push	{r4, r5, lr}
 8010d8a:	6902      	ldr	r2, [r0, #16]
 8010d8c:	690c      	ldr	r4, [r1, #16]
 8010d8e:	1b12      	subs	r2, r2, r4
 8010d90:	d10e      	bne.n	8010db0 <__mcmp+0x28>
 8010d92:	f100 0314 	add.w	r3, r0, #20
 8010d96:	3114      	adds	r1, #20
 8010d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010da8:	42a5      	cmp	r5, r4
 8010daa:	d003      	beq.n	8010db4 <__mcmp+0x2c>
 8010dac:	d305      	bcc.n	8010dba <__mcmp+0x32>
 8010dae:	2201      	movs	r2, #1
 8010db0:	4610      	mov	r0, r2
 8010db2:	bd30      	pop	{r4, r5, pc}
 8010db4:	4283      	cmp	r3, r0
 8010db6:	d3f3      	bcc.n	8010da0 <__mcmp+0x18>
 8010db8:	e7fa      	b.n	8010db0 <__mcmp+0x28>
 8010dba:	f04f 32ff 	mov.w	r2, #4294967295
 8010dbe:	e7f7      	b.n	8010db0 <__mcmp+0x28>

08010dc0 <__mdiff>:
 8010dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4620      	mov	r0, r4
 8010dcc:	4690      	mov	r8, r2
 8010dce:	f7ff ffdb 	bl	8010d88 <__mcmp>
 8010dd2:	1e05      	subs	r5, r0, #0
 8010dd4:	d110      	bne.n	8010df8 <__mdiff+0x38>
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f7ff fd53 	bl	8010884 <_Balloc>
 8010dde:	b930      	cbnz	r0, 8010dee <__mdiff+0x2e>
 8010de0:	4b3a      	ldr	r3, [pc, #232]	; (8010ecc <__mdiff+0x10c>)
 8010de2:	4602      	mov	r2, r0
 8010de4:	f240 2132 	movw	r1, #562	; 0x232
 8010de8:	4839      	ldr	r0, [pc, #228]	; (8010ed0 <__mdiff+0x110>)
 8010dea:	f000 fa6f 	bl	80112cc <__assert_func>
 8010dee:	2301      	movs	r3, #1
 8010df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df8:	bfa4      	itt	ge
 8010dfa:	4643      	movge	r3, r8
 8010dfc:	46a0      	movge	r8, r4
 8010dfe:	4630      	mov	r0, r6
 8010e00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e04:	bfa6      	itte	ge
 8010e06:	461c      	movge	r4, r3
 8010e08:	2500      	movge	r5, #0
 8010e0a:	2501      	movlt	r5, #1
 8010e0c:	f7ff fd3a 	bl	8010884 <_Balloc>
 8010e10:	b920      	cbnz	r0, 8010e1c <__mdiff+0x5c>
 8010e12:	4b2e      	ldr	r3, [pc, #184]	; (8010ecc <__mdiff+0x10c>)
 8010e14:	4602      	mov	r2, r0
 8010e16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010e1a:	e7e5      	b.n	8010de8 <__mdiff+0x28>
 8010e1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e20:	6926      	ldr	r6, [r4, #16]
 8010e22:	60c5      	str	r5, [r0, #12]
 8010e24:	f104 0914 	add.w	r9, r4, #20
 8010e28:	f108 0514 	add.w	r5, r8, #20
 8010e2c:	f100 0e14 	add.w	lr, r0, #20
 8010e30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e38:	f108 0210 	add.w	r2, r8, #16
 8010e3c:	46f2      	mov	sl, lr
 8010e3e:	2100      	movs	r1, #0
 8010e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e48:	fa1f f883 	uxth.w	r8, r3
 8010e4c:	fa11 f18b 	uxtah	r1, r1, fp
 8010e50:	0c1b      	lsrs	r3, r3, #16
 8010e52:	eba1 0808 	sub.w	r8, r1, r8
 8010e56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e5e:	fa1f f888 	uxth.w	r8, r8
 8010e62:	1419      	asrs	r1, r3, #16
 8010e64:	454e      	cmp	r6, r9
 8010e66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e6a:	f84a 3b04 	str.w	r3, [sl], #4
 8010e6e:	d8e7      	bhi.n	8010e40 <__mdiff+0x80>
 8010e70:	1b33      	subs	r3, r6, r4
 8010e72:	3b15      	subs	r3, #21
 8010e74:	f023 0303 	bic.w	r3, r3, #3
 8010e78:	3304      	adds	r3, #4
 8010e7a:	3415      	adds	r4, #21
 8010e7c:	42a6      	cmp	r6, r4
 8010e7e:	bf38      	it	cc
 8010e80:	2304      	movcc	r3, #4
 8010e82:	441d      	add	r5, r3
 8010e84:	4473      	add	r3, lr
 8010e86:	469e      	mov	lr, r3
 8010e88:	462e      	mov	r6, r5
 8010e8a:	4566      	cmp	r6, ip
 8010e8c:	d30e      	bcc.n	8010eac <__mdiff+0xec>
 8010e8e:	f10c 0203 	add.w	r2, ip, #3
 8010e92:	1b52      	subs	r2, r2, r5
 8010e94:	f022 0203 	bic.w	r2, r2, #3
 8010e98:	3d03      	subs	r5, #3
 8010e9a:	45ac      	cmp	ip, r5
 8010e9c:	bf38      	it	cc
 8010e9e:	2200      	movcc	r2, #0
 8010ea0:	441a      	add	r2, r3
 8010ea2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ea6:	b17b      	cbz	r3, 8010ec8 <__mdiff+0x108>
 8010ea8:	6107      	str	r7, [r0, #16]
 8010eaa:	e7a3      	b.n	8010df4 <__mdiff+0x34>
 8010eac:	f856 8b04 	ldr.w	r8, [r6], #4
 8010eb0:	fa11 f288 	uxtah	r2, r1, r8
 8010eb4:	1414      	asrs	r4, r2, #16
 8010eb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010eba:	b292      	uxth	r2, r2
 8010ebc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ec0:	f84e 2b04 	str.w	r2, [lr], #4
 8010ec4:	1421      	asrs	r1, r4, #16
 8010ec6:	e7e0      	b.n	8010e8a <__mdiff+0xca>
 8010ec8:	3f01      	subs	r7, #1
 8010eca:	e7ea      	b.n	8010ea2 <__mdiff+0xe2>
 8010ecc:	0802b107 	.word	0x0802b107
 8010ed0:	0802b118 	.word	0x0802b118

08010ed4 <__d2b>:
 8010ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ed8:	4689      	mov	r9, r1
 8010eda:	2101      	movs	r1, #1
 8010edc:	ec57 6b10 	vmov	r6, r7, d0
 8010ee0:	4690      	mov	r8, r2
 8010ee2:	f7ff fccf 	bl	8010884 <_Balloc>
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	b930      	cbnz	r0, 8010ef8 <__d2b+0x24>
 8010eea:	4602      	mov	r2, r0
 8010eec:	4b25      	ldr	r3, [pc, #148]	; (8010f84 <__d2b+0xb0>)
 8010eee:	4826      	ldr	r0, [pc, #152]	; (8010f88 <__d2b+0xb4>)
 8010ef0:	f240 310a 	movw	r1, #778	; 0x30a
 8010ef4:	f000 f9ea 	bl	80112cc <__assert_func>
 8010ef8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010efc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010f00:	bb35      	cbnz	r5, 8010f50 <__d2b+0x7c>
 8010f02:	2e00      	cmp	r6, #0
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	d028      	beq.n	8010f5a <__d2b+0x86>
 8010f08:	4668      	mov	r0, sp
 8010f0a:	9600      	str	r6, [sp, #0]
 8010f0c:	f7ff fd82 	bl	8010a14 <__lo0bits>
 8010f10:	9900      	ldr	r1, [sp, #0]
 8010f12:	b300      	cbz	r0, 8010f56 <__d2b+0x82>
 8010f14:	9a01      	ldr	r2, [sp, #4]
 8010f16:	f1c0 0320 	rsb	r3, r0, #32
 8010f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f1e:	430b      	orrs	r3, r1
 8010f20:	40c2      	lsrs	r2, r0
 8010f22:	6163      	str	r3, [r4, #20]
 8010f24:	9201      	str	r2, [sp, #4]
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	61a3      	str	r3, [r4, #24]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	bf14      	ite	ne
 8010f2e:	2202      	movne	r2, #2
 8010f30:	2201      	moveq	r2, #1
 8010f32:	6122      	str	r2, [r4, #16]
 8010f34:	b1d5      	cbz	r5, 8010f6c <__d2b+0x98>
 8010f36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f3a:	4405      	add	r5, r0
 8010f3c:	f8c9 5000 	str.w	r5, [r9]
 8010f40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f44:	f8c8 0000 	str.w	r0, [r8]
 8010f48:	4620      	mov	r0, r4
 8010f4a:	b003      	add	sp, #12
 8010f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f54:	e7d5      	b.n	8010f02 <__d2b+0x2e>
 8010f56:	6161      	str	r1, [r4, #20]
 8010f58:	e7e5      	b.n	8010f26 <__d2b+0x52>
 8010f5a:	a801      	add	r0, sp, #4
 8010f5c:	f7ff fd5a 	bl	8010a14 <__lo0bits>
 8010f60:	9b01      	ldr	r3, [sp, #4]
 8010f62:	6163      	str	r3, [r4, #20]
 8010f64:	2201      	movs	r2, #1
 8010f66:	6122      	str	r2, [r4, #16]
 8010f68:	3020      	adds	r0, #32
 8010f6a:	e7e3      	b.n	8010f34 <__d2b+0x60>
 8010f6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f74:	f8c9 0000 	str.w	r0, [r9]
 8010f78:	6918      	ldr	r0, [r3, #16]
 8010f7a:	f7ff fd2b 	bl	80109d4 <__hi0bits>
 8010f7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f82:	e7df      	b.n	8010f44 <__d2b+0x70>
 8010f84:	0802b107 	.word	0x0802b107
 8010f88:	0802b118 	.word	0x0802b118

08010f8c <_calloc_r>:
 8010f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f8e:	fba1 2402 	umull	r2, r4, r1, r2
 8010f92:	b94c      	cbnz	r4, 8010fa8 <_calloc_r+0x1c>
 8010f94:	4611      	mov	r1, r2
 8010f96:	9201      	str	r2, [sp, #4]
 8010f98:	f7fe f8d4 	bl	800f144 <_malloc_r>
 8010f9c:	9a01      	ldr	r2, [sp, #4]
 8010f9e:	4605      	mov	r5, r0
 8010fa0:	b930      	cbnz	r0, 8010fb0 <_calloc_r+0x24>
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	b003      	add	sp, #12
 8010fa6:	bd30      	pop	{r4, r5, pc}
 8010fa8:	220c      	movs	r2, #12
 8010faa:	6002      	str	r2, [r0, #0]
 8010fac:	2500      	movs	r5, #0
 8010fae:	e7f8      	b.n	8010fa2 <_calloc_r+0x16>
 8010fb0:	4621      	mov	r1, r4
 8010fb2:	f7fe f853 	bl	800f05c <memset>
 8010fb6:	e7f4      	b.n	8010fa2 <_calloc_r+0x16>

08010fb8 <_realloc_r>:
 8010fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fbc:	4680      	mov	r8, r0
 8010fbe:	4614      	mov	r4, r2
 8010fc0:	460e      	mov	r6, r1
 8010fc2:	b921      	cbnz	r1, 8010fce <_realloc_r+0x16>
 8010fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc8:	4611      	mov	r1, r2
 8010fca:	f7fe b8bb 	b.w	800f144 <_malloc_r>
 8010fce:	b92a      	cbnz	r2, 8010fdc <_realloc_r+0x24>
 8010fd0:	f7fe f84c 	bl	800f06c <_free_r>
 8010fd4:	4625      	mov	r5, r4
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fdc:	f000 f9d5 	bl	801138a <_malloc_usable_size_r>
 8010fe0:	4284      	cmp	r4, r0
 8010fe2:	4607      	mov	r7, r0
 8010fe4:	d802      	bhi.n	8010fec <_realloc_r+0x34>
 8010fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010fea:	d812      	bhi.n	8011012 <_realloc_r+0x5a>
 8010fec:	4621      	mov	r1, r4
 8010fee:	4640      	mov	r0, r8
 8010ff0:	f7fe f8a8 	bl	800f144 <_malloc_r>
 8010ff4:	4605      	mov	r5, r0
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d0ed      	beq.n	8010fd6 <_realloc_r+0x1e>
 8010ffa:	42bc      	cmp	r4, r7
 8010ffc:	4622      	mov	r2, r4
 8010ffe:	4631      	mov	r1, r6
 8011000:	bf28      	it	cs
 8011002:	463a      	movcs	r2, r7
 8011004:	f7fe f81c 	bl	800f040 <memcpy>
 8011008:	4631      	mov	r1, r6
 801100a:	4640      	mov	r0, r8
 801100c:	f7fe f82e 	bl	800f06c <_free_r>
 8011010:	e7e1      	b.n	8010fd6 <_realloc_r+0x1e>
 8011012:	4635      	mov	r5, r6
 8011014:	e7df      	b.n	8010fd6 <_realloc_r+0x1e>

08011016 <__ssputs_r>:
 8011016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801101a:	688e      	ldr	r6, [r1, #8]
 801101c:	429e      	cmp	r6, r3
 801101e:	4682      	mov	sl, r0
 8011020:	460c      	mov	r4, r1
 8011022:	4690      	mov	r8, r2
 8011024:	461f      	mov	r7, r3
 8011026:	d838      	bhi.n	801109a <__ssputs_r+0x84>
 8011028:	898a      	ldrh	r2, [r1, #12]
 801102a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801102e:	d032      	beq.n	8011096 <__ssputs_r+0x80>
 8011030:	6825      	ldr	r5, [r4, #0]
 8011032:	6909      	ldr	r1, [r1, #16]
 8011034:	eba5 0901 	sub.w	r9, r5, r1
 8011038:	6965      	ldr	r5, [r4, #20]
 801103a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801103e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011042:	3301      	adds	r3, #1
 8011044:	444b      	add	r3, r9
 8011046:	106d      	asrs	r5, r5, #1
 8011048:	429d      	cmp	r5, r3
 801104a:	bf38      	it	cc
 801104c:	461d      	movcc	r5, r3
 801104e:	0553      	lsls	r3, r2, #21
 8011050:	d531      	bpl.n	80110b6 <__ssputs_r+0xa0>
 8011052:	4629      	mov	r1, r5
 8011054:	f7fe f876 	bl	800f144 <_malloc_r>
 8011058:	4606      	mov	r6, r0
 801105a:	b950      	cbnz	r0, 8011072 <__ssputs_r+0x5c>
 801105c:	230c      	movs	r3, #12
 801105e:	f8ca 3000 	str.w	r3, [sl]
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011068:	81a3      	strh	r3, [r4, #12]
 801106a:	f04f 30ff 	mov.w	r0, #4294967295
 801106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011072:	6921      	ldr	r1, [r4, #16]
 8011074:	464a      	mov	r2, r9
 8011076:	f7fd ffe3 	bl	800f040 <memcpy>
 801107a:	89a3      	ldrh	r3, [r4, #12]
 801107c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011084:	81a3      	strh	r3, [r4, #12]
 8011086:	6126      	str	r6, [r4, #16]
 8011088:	6165      	str	r5, [r4, #20]
 801108a:	444e      	add	r6, r9
 801108c:	eba5 0509 	sub.w	r5, r5, r9
 8011090:	6026      	str	r6, [r4, #0]
 8011092:	60a5      	str	r5, [r4, #8]
 8011094:	463e      	mov	r6, r7
 8011096:	42be      	cmp	r6, r7
 8011098:	d900      	bls.n	801109c <__ssputs_r+0x86>
 801109a:	463e      	mov	r6, r7
 801109c:	6820      	ldr	r0, [r4, #0]
 801109e:	4632      	mov	r2, r6
 80110a0:	4641      	mov	r1, r8
 80110a2:	f000 f958 	bl	8011356 <memmove>
 80110a6:	68a3      	ldr	r3, [r4, #8]
 80110a8:	1b9b      	subs	r3, r3, r6
 80110aa:	60a3      	str	r3, [r4, #8]
 80110ac:	6823      	ldr	r3, [r4, #0]
 80110ae:	4433      	add	r3, r6
 80110b0:	6023      	str	r3, [r4, #0]
 80110b2:	2000      	movs	r0, #0
 80110b4:	e7db      	b.n	801106e <__ssputs_r+0x58>
 80110b6:	462a      	mov	r2, r5
 80110b8:	f7ff ff7e 	bl	8010fb8 <_realloc_r>
 80110bc:	4606      	mov	r6, r0
 80110be:	2800      	cmp	r0, #0
 80110c0:	d1e1      	bne.n	8011086 <__ssputs_r+0x70>
 80110c2:	6921      	ldr	r1, [r4, #16]
 80110c4:	4650      	mov	r0, sl
 80110c6:	f7fd ffd1 	bl	800f06c <_free_r>
 80110ca:	e7c7      	b.n	801105c <__ssputs_r+0x46>

080110cc <_svfiprintf_r>:
 80110cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d0:	4698      	mov	r8, r3
 80110d2:	898b      	ldrh	r3, [r1, #12]
 80110d4:	061b      	lsls	r3, r3, #24
 80110d6:	b09d      	sub	sp, #116	; 0x74
 80110d8:	4607      	mov	r7, r0
 80110da:	460d      	mov	r5, r1
 80110dc:	4614      	mov	r4, r2
 80110de:	d50e      	bpl.n	80110fe <_svfiprintf_r+0x32>
 80110e0:	690b      	ldr	r3, [r1, #16]
 80110e2:	b963      	cbnz	r3, 80110fe <_svfiprintf_r+0x32>
 80110e4:	2140      	movs	r1, #64	; 0x40
 80110e6:	f7fe f82d 	bl	800f144 <_malloc_r>
 80110ea:	6028      	str	r0, [r5, #0]
 80110ec:	6128      	str	r0, [r5, #16]
 80110ee:	b920      	cbnz	r0, 80110fa <_svfiprintf_r+0x2e>
 80110f0:	230c      	movs	r3, #12
 80110f2:	603b      	str	r3, [r7, #0]
 80110f4:	f04f 30ff 	mov.w	r0, #4294967295
 80110f8:	e0d1      	b.n	801129e <_svfiprintf_r+0x1d2>
 80110fa:	2340      	movs	r3, #64	; 0x40
 80110fc:	616b      	str	r3, [r5, #20]
 80110fe:	2300      	movs	r3, #0
 8011100:	9309      	str	r3, [sp, #36]	; 0x24
 8011102:	2320      	movs	r3, #32
 8011104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011108:	f8cd 800c 	str.w	r8, [sp, #12]
 801110c:	2330      	movs	r3, #48	; 0x30
 801110e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80112b8 <_svfiprintf_r+0x1ec>
 8011112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011116:	f04f 0901 	mov.w	r9, #1
 801111a:	4623      	mov	r3, r4
 801111c:	469a      	mov	sl, r3
 801111e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011122:	b10a      	cbz	r2, 8011128 <_svfiprintf_r+0x5c>
 8011124:	2a25      	cmp	r2, #37	; 0x25
 8011126:	d1f9      	bne.n	801111c <_svfiprintf_r+0x50>
 8011128:	ebba 0b04 	subs.w	fp, sl, r4
 801112c:	d00b      	beq.n	8011146 <_svfiprintf_r+0x7a>
 801112e:	465b      	mov	r3, fp
 8011130:	4622      	mov	r2, r4
 8011132:	4629      	mov	r1, r5
 8011134:	4638      	mov	r0, r7
 8011136:	f7ff ff6e 	bl	8011016 <__ssputs_r>
 801113a:	3001      	adds	r0, #1
 801113c:	f000 80aa 	beq.w	8011294 <_svfiprintf_r+0x1c8>
 8011140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011142:	445a      	add	r2, fp
 8011144:	9209      	str	r2, [sp, #36]	; 0x24
 8011146:	f89a 3000 	ldrb.w	r3, [sl]
 801114a:	2b00      	cmp	r3, #0
 801114c:	f000 80a2 	beq.w	8011294 <_svfiprintf_r+0x1c8>
 8011150:	2300      	movs	r3, #0
 8011152:	f04f 32ff 	mov.w	r2, #4294967295
 8011156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801115a:	f10a 0a01 	add.w	sl, sl, #1
 801115e:	9304      	str	r3, [sp, #16]
 8011160:	9307      	str	r3, [sp, #28]
 8011162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011166:	931a      	str	r3, [sp, #104]	; 0x68
 8011168:	4654      	mov	r4, sl
 801116a:	2205      	movs	r2, #5
 801116c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011170:	4851      	ldr	r0, [pc, #324]	; (80112b8 <_svfiprintf_r+0x1ec>)
 8011172:	f7ef f865 	bl	8000240 <memchr>
 8011176:	9a04      	ldr	r2, [sp, #16]
 8011178:	b9d8      	cbnz	r0, 80111b2 <_svfiprintf_r+0xe6>
 801117a:	06d0      	lsls	r0, r2, #27
 801117c:	bf44      	itt	mi
 801117e:	2320      	movmi	r3, #32
 8011180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011184:	0711      	lsls	r1, r2, #28
 8011186:	bf44      	itt	mi
 8011188:	232b      	movmi	r3, #43	; 0x2b
 801118a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801118e:	f89a 3000 	ldrb.w	r3, [sl]
 8011192:	2b2a      	cmp	r3, #42	; 0x2a
 8011194:	d015      	beq.n	80111c2 <_svfiprintf_r+0xf6>
 8011196:	9a07      	ldr	r2, [sp, #28]
 8011198:	4654      	mov	r4, sl
 801119a:	2000      	movs	r0, #0
 801119c:	f04f 0c0a 	mov.w	ip, #10
 80111a0:	4621      	mov	r1, r4
 80111a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111a6:	3b30      	subs	r3, #48	; 0x30
 80111a8:	2b09      	cmp	r3, #9
 80111aa:	d94e      	bls.n	801124a <_svfiprintf_r+0x17e>
 80111ac:	b1b0      	cbz	r0, 80111dc <_svfiprintf_r+0x110>
 80111ae:	9207      	str	r2, [sp, #28]
 80111b0:	e014      	b.n	80111dc <_svfiprintf_r+0x110>
 80111b2:	eba0 0308 	sub.w	r3, r0, r8
 80111b6:	fa09 f303 	lsl.w	r3, r9, r3
 80111ba:	4313      	orrs	r3, r2
 80111bc:	9304      	str	r3, [sp, #16]
 80111be:	46a2      	mov	sl, r4
 80111c0:	e7d2      	b.n	8011168 <_svfiprintf_r+0x9c>
 80111c2:	9b03      	ldr	r3, [sp, #12]
 80111c4:	1d19      	adds	r1, r3, #4
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	9103      	str	r1, [sp, #12]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	bfbb      	ittet	lt
 80111ce:	425b      	neglt	r3, r3
 80111d0:	f042 0202 	orrlt.w	r2, r2, #2
 80111d4:	9307      	strge	r3, [sp, #28]
 80111d6:	9307      	strlt	r3, [sp, #28]
 80111d8:	bfb8      	it	lt
 80111da:	9204      	strlt	r2, [sp, #16]
 80111dc:	7823      	ldrb	r3, [r4, #0]
 80111de:	2b2e      	cmp	r3, #46	; 0x2e
 80111e0:	d10c      	bne.n	80111fc <_svfiprintf_r+0x130>
 80111e2:	7863      	ldrb	r3, [r4, #1]
 80111e4:	2b2a      	cmp	r3, #42	; 0x2a
 80111e6:	d135      	bne.n	8011254 <_svfiprintf_r+0x188>
 80111e8:	9b03      	ldr	r3, [sp, #12]
 80111ea:	1d1a      	adds	r2, r3, #4
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	9203      	str	r2, [sp, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	bfb8      	it	lt
 80111f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80111f8:	3402      	adds	r4, #2
 80111fa:	9305      	str	r3, [sp, #20]
 80111fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80112c8 <_svfiprintf_r+0x1fc>
 8011200:	7821      	ldrb	r1, [r4, #0]
 8011202:	2203      	movs	r2, #3
 8011204:	4650      	mov	r0, sl
 8011206:	f7ef f81b 	bl	8000240 <memchr>
 801120a:	b140      	cbz	r0, 801121e <_svfiprintf_r+0x152>
 801120c:	2340      	movs	r3, #64	; 0x40
 801120e:	eba0 000a 	sub.w	r0, r0, sl
 8011212:	fa03 f000 	lsl.w	r0, r3, r0
 8011216:	9b04      	ldr	r3, [sp, #16]
 8011218:	4303      	orrs	r3, r0
 801121a:	3401      	adds	r4, #1
 801121c:	9304      	str	r3, [sp, #16]
 801121e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011222:	4826      	ldr	r0, [pc, #152]	; (80112bc <_svfiprintf_r+0x1f0>)
 8011224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011228:	2206      	movs	r2, #6
 801122a:	f7ef f809 	bl	8000240 <memchr>
 801122e:	2800      	cmp	r0, #0
 8011230:	d038      	beq.n	80112a4 <_svfiprintf_r+0x1d8>
 8011232:	4b23      	ldr	r3, [pc, #140]	; (80112c0 <_svfiprintf_r+0x1f4>)
 8011234:	bb1b      	cbnz	r3, 801127e <_svfiprintf_r+0x1b2>
 8011236:	9b03      	ldr	r3, [sp, #12]
 8011238:	3307      	adds	r3, #7
 801123a:	f023 0307 	bic.w	r3, r3, #7
 801123e:	3308      	adds	r3, #8
 8011240:	9303      	str	r3, [sp, #12]
 8011242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011244:	4433      	add	r3, r6
 8011246:	9309      	str	r3, [sp, #36]	; 0x24
 8011248:	e767      	b.n	801111a <_svfiprintf_r+0x4e>
 801124a:	fb0c 3202 	mla	r2, ip, r2, r3
 801124e:	460c      	mov	r4, r1
 8011250:	2001      	movs	r0, #1
 8011252:	e7a5      	b.n	80111a0 <_svfiprintf_r+0xd4>
 8011254:	2300      	movs	r3, #0
 8011256:	3401      	adds	r4, #1
 8011258:	9305      	str	r3, [sp, #20]
 801125a:	4619      	mov	r1, r3
 801125c:	f04f 0c0a 	mov.w	ip, #10
 8011260:	4620      	mov	r0, r4
 8011262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011266:	3a30      	subs	r2, #48	; 0x30
 8011268:	2a09      	cmp	r2, #9
 801126a:	d903      	bls.n	8011274 <_svfiprintf_r+0x1a8>
 801126c:	2b00      	cmp	r3, #0
 801126e:	d0c5      	beq.n	80111fc <_svfiprintf_r+0x130>
 8011270:	9105      	str	r1, [sp, #20]
 8011272:	e7c3      	b.n	80111fc <_svfiprintf_r+0x130>
 8011274:	fb0c 2101 	mla	r1, ip, r1, r2
 8011278:	4604      	mov	r4, r0
 801127a:	2301      	movs	r3, #1
 801127c:	e7f0      	b.n	8011260 <_svfiprintf_r+0x194>
 801127e:	ab03      	add	r3, sp, #12
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	462a      	mov	r2, r5
 8011284:	4b0f      	ldr	r3, [pc, #60]	; (80112c4 <_svfiprintf_r+0x1f8>)
 8011286:	a904      	add	r1, sp, #16
 8011288:	4638      	mov	r0, r7
 801128a:	f7fe f86f 	bl	800f36c <_printf_float>
 801128e:	1c42      	adds	r2, r0, #1
 8011290:	4606      	mov	r6, r0
 8011292:	d1d6      	bne.n	8011242 <_svfiprintf_r+0x176>
 8011294:	89ab      	ldrh	r3, [r5, #12]
 8011296:	065b      	lsls	r3, r3, #25
 8011298:	f53f af2c 	bmi.w	80110f4 <_svfiprintf_r+0x28>
 801129c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801129e:	b01d      	add	sp, #116	; 0x74
 80112a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a4:	ab03      	add	r3, sp, #12
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	462a      	mov	r2, r5
 80112aa:	4b06      	ldr	r3, [pc, #24]	; (80112c4 <_svfiprintf_r+0x1f8>)
 80112ac:	a904      	add	r1, sp, #16
 80112ae:	4638      	mov	r0, r7
 80112b0:	f7fe fb00 	bl	800f8b4 <_printf_i>
 80112b4:	e7eb      	b.n	801128e <_svfiprintf_r+0x1c2>
 80112b6:	bf00      	nop
 80112b8:	0802b274 	.word	0x0802b274
 80112bc:	0802b27e 	.word	0x0802b27e
 80112c0:	0800f36d 	.word	0x0800f36d
 80112c4:	08011017 	.word	0x08011017
 80112c8:	0802b27a 	.word	0x0802b27a

080112cc <__assert_func>:
 80112cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112ce:	4614      	mov	r4, r2
 80112d0:	461a      	mov	r2, r3
 80112d2:	4b09      	ldr	r3, [pc, #36]	; (80112f8 <__assert_func+0x2c>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4605      	mov	r5, r0
 80112d8:	68d8      	ldr	r0, [r3, #12]
 80112da:	b14c      	cbz	r4, 80112f0 <__assert_func+0x24>
 80112dc:	4b07      	ldr	r3, [pc, #28]	; (80112fc <__assert_func+0x30>)
 80112de:	9100      	str	r1, [sp, #0]
 80112e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112e4:	4906      	ldr	r1, [pc, #24]	; (8011300 <__assert_func+0x34>)
 80112e6:	462b      	mov	r3, r5
 80112e8:	f000 f80e 	bl	8011308 <fiprintf>
 80112ec:	f000 fa7c 	bl	80117e8 <abort>
 80112f0:	4b04      	ldr	r3, [pc, #16]	; (8011304 <__assert_func+0x38>)
 80112f2:	461c      	mov	r4, r3
 80112f4:	e7f3      	b.n	80112de <__assert_func+0x12>
 80112f6:	bf00      	nop
 80112f8:	20001888 	.word	0x20001888
 80112fc:	0802b285 	.word	0x0802b285
 8011300:	0802b292 	.word	0x0802b292
 8011304:	0802b2c0 	.word	0x0802b2c0

08011308 <fiprintf>:
 8011308:	b40e      	push	{r1, r2, r3}
 801130a:	b503      	push	{r0, r1, lr}
 801130c:	4601      	mov	r1, r0
 801130e:	ab03      	add	r3, sp, #12
 8011310:	4805      	ldr	r0, [pc, #20]	; (8011328 <fiprintf+0x20>)
 8011312:	f853 2b04 	ldr.w	r2, [r3], #4
 8011316:	6800      	ldr	r0, [r0, #0]
 8011318:	9301      	str	r3, [sp, #4]
 801131a:	f000 f867 	bl	80113ec <_vfiprintf_r>
 801131e:	b002      	add	sp, #8
 8011320:	f85d eb04 	ldr.w	lr, [sp], #4
 8011324:	b003      	add	sp, #12
 8011326:	4770      	bx	lr
 8011328:	20001888 	.word	0x20001888

0801132c <__retarget_lock_init_recursive>:
 801132c:	4770      	bx	lr

0801132e <__retarget_lock_acquire_recursive>:
 801132e:	4770      	bx	lr

08011330 <__retarget_lock_release_recursive>:
 8011330:	4770      	bx	lr

08011332 <__ascii_mbtowc>:
 8011332:	b082      	sub	sp, #8
 8011334:	b901      	cbnz	r1, 8011338 <__ascii_mbtowc+0x6>
 8011336:	a901      	add	r1, sp, #4
 8011338:	b142      	cbz	r2, 801134c <__ascii_mbtowc+0x1a>
 801133a:	b14b      	cbz	r3, 8011350 <__ascii_mbtowc+0x1e>
 801133c:	7813      	ldrb	r3, [r2, #0]
 801133e:	600b      	str	r3, [r1, #0]
 8011340:	7812      	ldrb	r2, [r2, #0]
 8011342:	1e10      	subs	r0, r2, #0
 8011344:	bf18      	it	ne
 8011346:	2001      	movne	r0, #1
 8011348:	b002      	add	sp, #8
 801134a:	4770      	bx	lr
 801134c:	4610      	mov	r0, r2
 801134e:	e7fb      	b.n	8011348 <__ascii_mbtowc+0x16>
 8011350:	f06f 0001 	mvn.w	r0, #1
 8011354:	e7f8      	b.n	8011348 <__ascii_mbtowc+0x16>

08011356 <memmove>:
 8011356:	4288      	cmp	r0, r1
 8011358:	b510      	push	{r4, lr}
 801135a:	eb01 0402 	add.w	r4, r1, r2
 801135e:	d902      	bls.n	8011366 <memmove+0x10>
 8011360:	4284      	cmp	r4, r0
 8011362:	4623      	mov	r3, r4
 8011364:	d807      	bhi.n	8011376 <memmove+0x20>
 8011366:	1e43      	subs	r3, r0, #1
 8011368:	42a1      	cmp	r1, r4
 801136a:	d008      	beq.n	801137e <memmove+0x28>
 801136c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011370:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011374:	e7f8      	b.n	8011368 <memmove+0x12>
 8011376:	4402      	add	r2, r0
 8011378:	4601      	mov	r1, r0
 801137a:	428a      	cmp	r2, r1
 801137c:	d100      	bne.n	8011380 <memmove+0x2a>
 801137e:	bd10      	pop	{r4, pc}
 8011380:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011384:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011388:	e7f7      	b.n	801137a <memmove+0x24>

0801138a <_malloc_usable_size_r>:
 801138a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801138e:	1f18      	subs	r0, r3, #4
 8011390:	2b00      	cmp	r3, #0
 8011392:	bfbc      	itt	lt
 8011394:	580b      	ldrlt	r3, [r1, r0]
 8011396:	18c0      	addlt	r0, r0, r3
 8011398:	4770      	bx	lr

0801139a <__sfputc_r>:
 801139a:	6893      	ldr	r3, [r2, #8]
 801139c:	3b01      	subs	r3, #1
 801139e:	2b00      	cmp	r3, #0
 80113a0:	b410      	push	{r4}
 80113a2:	6093      	str	r3, [r2, #8]
 80113a4:	da08      	bge.n	80113b8 <__sfputc_r+0x1e>
 80113a6:	6994      	ldr	r4, [r2, #24]
 80113a8:	42a3      	cmp	r3, r4
 80113aa:	db01      	blt.n	80113b0 <__sfputc_r+0x16>
 80113ac:	290a      	cmp	r1, #10
 80113ae:	d103      	bne.n	80113b8 <__sfputc_r+0x1e>
 80113b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113b4:	f000 b94a 	b.w	801164c <__swbuf_r>
 80113b8:	6813      	ldr	r3, [r2, #0]
 80113ba:	1c58      	adds	r0, r3, #1
 80113bc:	6010      	str	r0, [r2, #0]
 80113be:	7019      	strb	r1, [r3, #0]
 80113c0:	4608      	mov	r0, r1
 80113c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113c6:	4770      	bx	lr

080113c8 <__sfputs_r>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	4606      	mov	r6, r0
 80113cc:	460f      	mov	r7, r1
 80113ce:	4614      	mov	r4, r2
 80113d0:	18d5      	adds	r5, r2, r3
 80113d2:	42ac      	cmp	r4, r5
 80113d4:	d101      	bne.n	80113da <__sfputs_r+0x12>
 80113d6:	2000      	movs	r0, #0
 80113d8:	e007      	b.n	80113ea <__sfputs_r+0x22>
 80113da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113de:	463a      	mov	r2, r7
 80113e0:	4630      	mov	r0, r6
 80113e2:	f7ff ffda 	bl	801139a <__sfputc_r>
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	d1f3      	bne.n	80113d2 <__sfputs_r+0xa>
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113ec <_vfiprintf_r>:
 80113ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f0:	460d      	mov	r5, r1
 80113f2:	b09d      	sub	sp, #116	; 0x74
 80113f4:	4614      	mov	r4, r2
 80113f6:	4698      	mov	r8, r3
 80113f8:	4606      	mov	r6, r0
 80113fa:	b118      	cbz	r0, 8011404 <_vfiprintf_r+0x18>
 80113fc:	6983      	ldr	r3, [r0, #24]
 80113fe:	b90b      	cbnz	r3, 8011404 <_vfiprintf_r+0x18>
 8011400:	f000 fb14 	bl	8011a2c <__sinit>
 8011404:	4b89      	ldr	r3, [pc, #548]	; (801162c <_vfiprintf_r+0x240>)
 8011406:	429d      	cmp	r5, r3
 8011408:	d11b      	bne.n	8011442 <_vfiprintf_r+0x56>
 801140a:	6875      	ldr	r5, [r6, #4]
 801140c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801140e:	07d9      	lsls	r1, r3, #31
 8011410:	d405      	bmi.n	801141e <_vfiprintf_r+0x32>
 8011412:	89ab      	ldrh	r3, [r5, #12]
 8011414:	059a      	lsls	r2, r3, #22
 8011416:	d402      	bmi.n	801141e <_vfiprintf_r+0x32>
 8011418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801141a:	f7ff ff88 	bl	801132e <__retarget_lock_acquire_recursive>
 801141e:	89ab      	ldrh	r3, [r5, #12]
 8011420:	071b      	lsls	r3, r3, #28
 8011422:	d501      	bpl.n	8011428 <_vfiprintf_r+0x3c>
 8011424:	692b      	ldr	r3, [r5, #16]
 8011426:	b9eb      	cbnz	r3, 8011464 <_vfiprintf_r+0x78>
 8011428:	4629      	mov	r1, r5
 801142a:	4630      	mov	r0, r6
 801142c:	f000 f96e 	bl	801170c <__swsetup_r>
 8011430:	b1c0      	cbz	r0, 8011464 <_vfiprintf_r+0x78>
 8011432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011434:	07dc      	lsls	r4, r3, #31
 8011436:	d50e      	bpl.n	8011456 <_vfiprintf_r+0x6a>
 8011438:	f04f 30ff 	mov.w	r0, #4294967295
 801143c:	b01d      	add	sp, #116	; 0x74
 801143e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011442:	4b7b      	ldr	r3, [pc, #492]	; (8011630 <_vfiprintf_r+0x244>)
 8011444:	429d      	cmp	r5, r3
 8011446:	d101      	bne.n	801144c <_vfiprintf_r+0x60>
 8011448:	68b5      	ldr	r5, [r6, #8]
 801144a:	e7df      	b.n	801140c <_vfiprintf_r+0x20>
 801144c:	4b79      	ldr	r3, [pc, #484]	; (8011634 <_vfiprintf_r+0x248>)
 801144e:	429d      	cmp	r5, r3
 8011450:	bf08      	it	eq
 8011452:	68f5      	ldreq	r5, [r6, #12]
 8011454:	e7da      	b.n	801140c <_vfiprintf_r+0x20>
 8011456:	89ab      	ldrh	r3, [r5, #12]
 8011458:	0598      	lsls	r0, r3, #22
 801145a:	d4ed      	bmi.n	8011438 <_vfiprintf_r+0x4c>
 801145c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801145e:	f7ff ff67 	bl	8011330 <__retarget_lock_release_recursive>
 8011462:	e7e9      	b.n	8011438 <_vfiprintf_r+0x4c>
 8011464:	2300      	movs	r3, #0
 8011466:	9309      	str	r3, [sp, #36]	; 0x24
 8011468:	2320      	movs	r3, #32
 801146a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801146e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011472:	2330      	movs	r3, #48	; 0x30
 8011474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011638 <_vfiprintf_r+0x24c>
 8011478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801147c:	f04f 0901 	mov.w	r9, #1
 8011480:	4623      	mov	r3, r4
 8011482:	469a      	mov	sl, r3
 8011484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011488:	b10a      	cbz	r2, 801148e <_vfiprintf_r+0xa2>
 801148a:	2a25      	cmp	r2, #37	; 0x25
 801148c:	d1f9      	bne.n	8011482 <_vfiprintf_r+0x96>
 801148e:	ebba 0b04 	subs.w	fp, sl, r4
 8011492:	d00b      	beq.n	80114ac <_vfiprintf_r+0xc0>
 8011494:	465b      	mov	r3, fp
 8011496:	4622      	mov	r2, r4
 8011498:	4629      	mov	r1, r5
 801149a:	4630      	mov	r0, r6
 801149c:	f7ff ff94 	bl	80113c8 <__sfputs_r>
 80114a0:	3001      	adds	r0, #1
 80114a2:	f000 80aa 	beq.w	80115fa <_vfiprintf_r+0x20e>
 80114a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114a8:	445a      	add	r2, fp
 80114aa:	9209      	str	r2, [sp, #36]	; 0x24
 80114ac:	f89a 3000 	ldrb.w	r3, [sl]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 80a2 	beq.w	80115fa <_vfiprintf_r+0x20e>
 80114b6:	2300      	movs	r3, #0
 80114b8:	f04f 32ff 	mov.w	r2, #4294967295
 80114bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114c0:	f10a 0a01 	add.w	sl, sl, #1
 80114c4:	9304      	str	r3, [sp, #16]
 80114c6:	9307      	str	r3, [sp, #28]
 80114c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114cc:	931a      	str	r3, [sp, #104]	; 0x68
 80114ce:	4654      	mov	r4, sl
 80114d0:	2205      	movs	r2, #5
 80114d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114d6:	4858      	ldr	r0, [pc, #352]	; (8011638 <_vfiprintf_r+0x24c>)
 80114d8:	f7ee feb2 	bl	8000240 <memchr>
 80114dc:	9a04      	ldr	r2, [sp, #16]
 80114de:	b9d8      	cbnz	r0, 8011518 <_vfiprintf_r+0x12c>
 80114e0:	06d1      	lsls	r1, r2, #27
 80114e2:	bf44      	itt	mi
 80114e4:	2320      	movmi	r3, #32
 80114e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114ea:	0713      	lsls	r3, r2, #28
 80114ec:	bf44      	itt	mi
 80114ee:	232b      	movmi	r3, #43	; 0x2b
 80114f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114f4:	f89a 3000 	ldrb.w	r3, [sl]
 80114f8:	2b2a      	cmp	r3, #42	; 0x2a
 80114fa:	d015      	beq.n	8011528 <_vfiprintf_r+0x13c>
 80114fc:	9a07      	ldr	r2, [sp, #28]
 80114fe:	4654      	mov	r4, sl
 8011500:	2000      	movs	r0, #0
 8011502:	f04f 0c0a 	mov.w	ip, #10
 8011506:	4621      	mov	r1, r4
 8011508:	f811 3b01 	ldrb.w	r3, [r1], #1
 801150c:	3b30      	subs	r3, #48	; 0x30
 801150e:	2b09      	cmp	r3, #9
 8011510:	d94e      	bls.n	80115b0 <_vfiprintf_r+0x1c4>
 8011512:	b1b0      	cbz	r0, 8011542 <_vfiprintf_r+0x156>
 8011514:	9207      	str	r2, [sp, #28]
 8011516:	e014      	b.n	8011542 <_vfiprintf_r+0x156>
 8011518:	eba0 0308 	sub.w	r3, r0, r8
 801151c:	fa09 f303 	lsl.w	r3, r9, r3
 8011520:	4313      	orrs	r3, r2
 8011522:	9304      	str	r3, [sp, #16]
 8011524:	46a2      	mov	sl, r4
 8011526:	e7d2      	b.n	80114ce <_vfiprintf_r+0xe2>
 8011528:	9b03      	ldr	r3, [sp, #12]
 801152a:	1d19      	adds	r1, r3, #4
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	9103      	str	r1, [sp, #12]
 8011530:	2b00      	cmp	r3, #0
 8011532:	bfbb      	ittet	lt
 8011534:	425b      	neglt	r3, r3
 8011536:	f042 0202 	orrlt.w	r2, r2, #2
 801153a:	9307      	strge	r3, [sp, #28]
 801153c:	9307      	strlt	r3, [sp, #28]
 801153e:	bfb8      	it	lt
 8011540:	9204      	strlt	r2, [sp, #16]
 8011542:	7823      	ldrb	r3, [r4, #0]
 8011544:	2b2e      	cmp	r3, #46	; 0x2e
 8011546:	d10c      	bne.n	8011562 <_vfiprintf_r+0x176>
 8011548:	7863      	ldrb	r3, [r4, #1]
 801154a:	2b2a      	cmp	r3, #42	; 0x2a
 801154c:	d135      	bne.n	80115ba <_vfiprintf_r+0x1ce>
 801154e:	9b03      	ldr	r3, [sp, #12]
 8011550:	1d1a      	adds	r2, r3, #4
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	9203      	str	r2, [sp, #12]
 8011556:	2b00      	cmp	r3, #0
 8011558:	bfb8      	it	lt
 801155a:	f04f 33ff 	movlt.w	r3, #4294967295
 801155e:	3402      	adds	r4, #2
 8011560:	9305      	str	r3, [sp, #20]
 8011562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011648 <_vfiprintf_r+0x25c>
 8011566:	7821      	ldrb	r1, [r4, #0]
 8011568:	2203      	movs	r2, #3
 801156a:	4650      	mov	r0, sl
 801156c:	f7ee fe68 	bl	8000240 <memchr>
 8011570:	b140      	cbz	r0, 8011584 <_vfiprintf_r+0x198>
 8011572:	2340      	movs	r3, #64	; 0x40
 8011574:	eba0 000a 	sub.w	r0, r0, sl
 8011578:	fa03 f000 	lsl.w	r0, r3, r0
 801157c:	9b04      	ldr	r3, [sp, #16]
 801157e:	4303      	orrs	r3, r0
 8011580:	3401      	adds	r4, #1
 8011582:	9304      	str	r3, [sp, #16]
 8011584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011588:	482c      	ldr	r0, [pc, #176]	; (801163c <_vfiprintf_r+0x250>)
 801158a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801158e:	2206      	movs	r2, #6
 8011590:	f7ee fe56 	bl	8000240 <memchr>
 8011594:	2800      	cmp	r0, #0
 8011596:	d03f      	beq.n	8011618 <_vfiprintf_r+0x22c>
 8011598:	4b29      	ldr	r3, [pc, #164]	; (8011640 <_vfiprintf_r+0x254>)
 801159a:	bb1b      	cbnz	r3, 80115e4 <_vfiprintf_r+0x1f8>
 801159c:	9b03      	ldr	r3, [sp, #12]
 801159e:	3307      	adds	r3, #7
 80115a0:	f023 0307 	bic.w	r3, r3, #7
 80115a4:	3308      	adds	r3, #8
 80115a6:	9303      	str	r3, [sp, #12]
 80115a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115aa:	443b      	add	r3, r7
 80115ac:	9309      	str	r3, [sp, #36]	; 0x24
 80115ae:	e767      	b.n	8011480 <_vfiprintf_r+0x94>
 80115b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80115b4:	460c      	mov	r4, r1
 80115b6:	2001      	movs	r0, #1
 80115b8:	e7a5      	b.n	8011506 <_vfiprintf_r+0x11a>
 80115ba:	2300      	movs	r3, #0
 80115bc:	3401      	adds	r4, #1
 80115be:	9305      	str	r3, [sp, #20]
 80115c0:	4619      	mov	r1, r3
 80115c2:	f04f 0c0a 	mov.w	ip, #10
 80115c6:	4620      	mov	r0, r4
 80115c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115cc:	3a30      	subs	r2, #48	; 0x30
 80115ce:	2a09      	cmp	r2, #9
 80115d0:	d903      	bls.n	80115da <_vfiprintf_r+0x1ee>
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0c5      	beq.n	8011562 <_vfiprintf_r+0x176>
 80115d6:	9105      	str	r1, [sp, #20]
 80115d8:	e7c3      	b.n	8011562 <_vfiprintf_r+0x176>
 80115da:	fb0c 2101 	mla	r1, ip, r1, r2
 80115de:	4604      	mov	r4, r0
 80115e0:	2301      	movs	r3, #1
 80115e2:	e7f0      	b.n	80115c6 <_vfiprintf_r+0x1da>
 80115e4:	ab03      	add	r3, sp, #12
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	462a      	mov	r2, r5
 80115ea:	4b16      	ldr	r3, [pc, #88]	; (8011644 <_vfiprintf_r+0x258>)
 80115ec:	a904      	add	r1, sp, #16
 80115ee:	4630      	mov	r0, r6
 80115f0:	f7fd febc 	bl	800f36c <_printf_float>
 80115f4:	4607      	mov	r7, r0
 80115f6:	1c78      	adds	r0, r7, #1
 80115f8:	d1d6      	bne.n	80115a8 <_vfiprintf_r+0x1bc>
 80115fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115fc:	07d9      	lsls	r1, r3, #31
 80115fe:	d405      	bmi.n	801160c <_vfiprintf_r+0x220>
 8011600:	89ab      	ldrh	r3, [r5, #12]
 8011602:	059a      	lsls	r2, r3, #22
 8011604:	d402      	bmi.n	801160c <_vfiprintf_r+0x220>
 8011606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011608:	f7ff fe92 	bl	8011330 <__retarget_lock_release_recursive>
 801160c:	89ab      	ldrh	r3, [r5, #12]
 801160e:	065b      	lsls	r3, r3, #25
 8011610:	f53f af12 	bmi.w	8011438 <_vfiprintf_r+0x4c>
 8011614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011616:	e711      	b.n	801143c <_vfiprintf_r+0x50>
 8011618:	ab03      	add	r3, sp, #12
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	462a      	mov	r2, r5
 801161e:	4b09      	ldr	r3, [pc, #36]	; (8011644 <_vfiprintf_r+0x258>)
 8011620:	a904      	add	r1, sp, #16
 8011622:	4630      	mov	r0, r6
 8011624:	f7fe f946 	bl	800f8b4 <_printf_i>
 8011628:	e7e4      	b.n	80115f4 <_vfiprintf_r+0x208>
 801162a:	bf00      	nop
 801162c:	0802b3ec 	.word	0x0802b3ec
 8011630:	0802b40c 	.word	0x0802b40c
 8011634:	0802b3cc 	.word	0x0802b3cc
 8011638:	0802b274 	.word	0x0802b274
 801163c:	0802b27e 	.word	0x0802b27e
 8011640:	0800f36d 	.word	0x0800f36d
 8011644:	080113c9 	.word	0x080113c9
 8011648:	0802b27a 	.word	0x0802b27a

0801164c <__swbuf_r>:
 801164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164e:	460e      	mov	r6, r1
 8011650:	4614      	mov	r4, r2
 8011652:	4605      	mov	r5, r0
 8011654:	b118      	cbz	r0, 801165e <__swbuf_r+0x12>
 8011656:	6983      	ldr	r3, [r0, #24]
 8011658:	b90b      	cbnz	r3, 801165e <__swbuf_r+0x12>
 801165a:	f000 f9e7 	bl	8011a2c <__sinit>
 801165e:	4b21      	ldr	r3, [pc, #132]	; (80116e4 <__swbuf_r+0x98>)
 8011660:	429c      	cmp	r4, r3
 8011662:	d12b      	bne.n	80116bc <__swbuf_r+0x70>
 8011664:	686c      	ldr	r4, [r5, #4]
 8011666:	69a3      	ldr	r3, [r4, #24]
 8011668:	60a3      	str	r3, [r4, #8]
 801166a:	89a3      	ldrh	r3, [r4, #12]
 801166c:	071a      	lsls	r2, r3, #28
 801166e:	d52f      	bpl.n	80116d0 <__swbuf_r+0x84>
 8011670:	6923      	ldr	r3, [r4, #16]
 8011672:	b36b      	cbz	r3, 80116d0 <__swbuf_r+0x84>
 8011674:	6923      	ldr	r3, [r4, #16]
 8011676:	6820      	ldr	r0, [r4, #0]
 8011678:	1ac0      	subs	r0, r0, r3
 801167a:	6963      	ldr	r3, [r4, #20]
 801167c:	b2f6      	uxtb	r6, r6
 801167e:	4283      	cmp	r3, r0
 8011680:	4637      	mov	r7, r6
 8011682:	dc04      	bgt.n	801168e <__swbuf_r+0x42>
 8011684:	4621      	mov	r1, r4
 8011686:	4628      	mov	r0, r5
 8011688:	f000 f93c 	bl	8011904 <_fflush_r>
 801168c:	bb30      	cbnz	r0, 80116dc <__swbuf_r+0x90>
 801168e:	68a3      	ldr	r3, [r4, #8]
 8011690:	3b01      	subs	r3, #1
 8011692:	60a3      	str	r3, [r4, #8]
 8011694:	6823      	ldr	r3, [r4, #0]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	6022      	str	r2, [r4, #0]
 801169a:	701e      	strb	r6, [r3, #0]
 801169c:	6963      	ldr	r3, [r4, #20]
 801169e:	3001      	adds	r0, #1
 80116a0:	4283      	cmp	r3, r0
 80116a2:	d004      	beq.n	80116ae <__swbuf_r+0x62>
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	07db      	lsls	r3, r3, #31
 80116a8:	d506      	bpl.n	80116b8 <__swbuf_r+0x6c>
 80116aa:	2e0a      	cmp	r6, #10
 80116ac:	d104      	bne.n	80116b8 <__swbuf_r+0x6c>
 80116ae:	4621      	mov	r1, r4
 80116b0:	4628      	mov	r0, r5
 80116b2:	f000 f927 	bl	8011904 <_fflush_r>
 80116b6:	b988      	cbnz	r0, 80116dc <__swbuf_r+0x90>
 80116b8:	4638      	mov	r0, r7
 80116ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116bc:	4b0a      	ldr	r3, [pc, #40]	; (80116e8 <__swbuf_r+0x9c>)
 80116be:	429c      	cmp	r4, r3
 80116c0:	d101      	bne.n	80116c6 <__swbuf_r+0x7a>
 80116c2:	68ac      	ldr	r4, [r5, #8]
 80116c4:	e7cf      	b.n	8011666 <__swbuf_r+0x1a>
 80116c6:	4b09      	ldr	r3, [pc, #36]	; (80116ec <__swbuf_r+0xa0>)
 80116c8:	429c      	cmp	r4, r3
 80116ca:	bf08      	it	eq
 80116cc:	68ec      	ldreq	r4, [r5, #12]
 80116ce:	e7ca      	b.n	8011666 <__swbuf_r+0x1a>
 80116d0:	4621      	mov	r1, r4
 80116d2:	4628      	mov	r0, r5
 80116d4:	f000 f81a 	bl	801170c <__swsetup_r>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d0cb      	beq.n	8011674 <__swbuf_r+0x28>
 80116dc:	f04f 37ff 	mov.w	r7, #4294967295
 80116e0:	e7ea      	b.n	80116b8 <__swbuf_r+0x6c>
 80116e2:	bf00      	nop
 80116e4:	0802b3ec 	.word	0x0802b3ec
 80116e8:	0802b40c 	.word	0x0802b40c
 80116ec:	0802b3cc 	.word	0x0802b3cc

080116f0 <__ascii_wctomb>:
 80116f0:	b149      	cbz	r1, 8011706 <__ascii_wctomb+0x16>
 80116f2:	2aff      	cmp	r2, #255	; 0xff
 80116f4:	bf85      	ittet	hi
 80116f6:	238a      	movhi	r3, #138	; 0x8a
 80116f8:	6003      	strhi	r3, [r0, #0]
 80116fa:	700a      	strbls	r2, [r1, #0]
 80116fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8011700:	bf98      	it	ls
 8011702:	2001      	movls	r0, #1
 8011704:	4770      	bx	lr
 8011706:	4608      	mov	r0, r1
 8011708:	4770      	bx	lr
	...

0801170c <__swsetup_r>:
 801170c:	4b32      	ldr	r3, [pc, #200]	; (80117d8 <__swsetup_r+0xcc>)
 801170e:	b570      	push	{r4, r5, r6, lr}
 8011710:	681d      	ldr	r5, [r3, #0]
 8011712:	4606      	mov	r6, r0
 8011714:	460c      	mov	r4, r1
 8011716:	b125      	cbz	r5, 8011722 <__swsetup_r+0x16>
 8011718:	69ab      	ldr	r3, [r5, #24]
 801171a:	b913      	cbnz	r3, 8011722 <__swsetup_r+0x16>
 801171c:	4628      	mov	r0, r5
 801171e:	f000 f985 	bl	8011a2c <__sinit>
 8011722:	4b2e      	ldr	r3, [pc, #184]	; (80117dc <__swsetup_r+0xd0>)
 8011724:	429c      	cmp	r4, r3
 8011726:	d10f      	bne.n	8011748 <__swsetup_r+0x3c>
 8011728:	686c      	ldr	r4, [r5, #4]
 801172a:	89a3      	ldrh	r3, [r4, #12]
 801172c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011730:	0719      	lsls	r1, r3, #28
 8011732:	d42c      	bmi.n	801178e <__swsetup_r+0x82>
 8011734:	06dd      	lsls	r5, r3, #27
 8011736:	d411      	bmi.n	801175c <__swsetup_r+0x50>
 8011738:	2309      	movs	r3, #9
 801173a:	6033      	str	r3, [r6, #0]
 801173c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	f04f 30ff 	mov.w	r0, #4294967295
 8011746:	e03e      	b.n	80117c6 <__swsetup_r+0xba>
 8011748:	4b25      	ldr	r3, [pc, #148]	; (80117e0 <__swsetup_r+0xd4>)
 801174a:	429c      	cmp	r4, r3
 801174c:	d101      	bne.n	8011752 <__swsetup_r+0x46>
 801174e:	68ac      	ldr	r4, [r5, #8]
 8011750:	e7eb      	b.n	801172a <__swsetup_r+0x1e>
 8011752:	4b24      	ldr	r3, [pc, #144]	; (80117e4 <__swsetup_r+0xd8>)
 8011754:	429c      	cmp	r4, r3
 8011756:	bf08      	it	eq
 8011758:	68ec      	ldreq	r4, [r5, #12]
 801175a:	e7e6      	b.n	801172a <__swsetup_r+0x1e>
 801175c:	0758      	lsls	r0, r3, #29
 801175e:	d512      	bpl.n	8011786 <__swsetup_r+0x7a>
 8011760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011762:	b141      	cbz	r1, 8011776 <__swsetup_r+0x6a>
 8011764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011768:	4299      	cmp	r1, r3
 801176a:	d002      	beq.n	8011772 <__swsetup_r+0x66>
 801176c:	4630      	mov	r0, r6
 801176e:	f7fd fc7d 	bl	800f06c <_free_r>
 8011772:	2300      	movs	r3, #0
 8011774:	6363      	str	r3, [r4, #52]	; 0x34
 8011776:	89a3      	ldrh	r3, [r4, #12]
 8011778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801177c:	81a3      	strh	r3, [r4, #12]
 801177e:	2300      	movs	r3, #0
 8011780:	6063      	str	r3, [r4, #4]
 8011782:	6923      	ldr	r3, [r4, #16]
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	89a3      	ldrh	r3, [r4, #12]
 8011788:	f043 0308 	orr.w	r3, r3, #8
 801178c:	81a3      	strh	r3, [r4, #12]
 801178e:	6923      	ldr	r3, [r4, #16]
 8011790:	b94b      	cbnz	r3, 80117a6 <__swsetup_r+0x9a>
 8011792:	89a3      	ldrh	r3, [r4, #12]
 8011794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801179c:	d003      	beq.n	80117a6 <__swsetup_r+0x9a>
 801179e:	4621      	mov	r1, r4
 80117a0:	4630      	mov	r0, r6
 80117a2:	f000 fa05 	bl	8011bb0 <__smakebuf_r>
 80117a6:	89a0      	ldrh	r0, [r4, #12]
 80117a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117ac:	f010 0301 	ands.w	r3, r0, #1
 80117b0:	d00a      	beq.n	80117c8 <__swsetup_r+0xbc>
 80117b2:	2300      	movs	r3, #0
 80117b4:	60a3      	str	r3, [r4, #8]
 80117b6:	6963      	ldr	r3, [r4, #20]
 80117b8:	425b      	negs	r3, r3
 80117ba:	61a3      	str	r3, [r4, #24]
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	b943      	cbnz	r3, 80117d2 <__swsetup_r+0xc6>
 80117c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80117c4:	d1ba      	bne.n	801173c <__swsetup_r+0x30>
 80117c6:	bd70      	pop	{r4, r5, r6, pc}
 80117c8:	0781      	lsls	r1, r0, #30
 80117ca:	bf58      	it	pl
 80117cc:	6963      	ldrpl	r3, [r4, #20]
 80117ce:	60a3      	str	r3, [r4, #8]
 80117d0:	e7f4      	b.n	80117bc <__swsetup_r+0xb0>
 80117d2:	2000      	movs	r0, #0
 80117d4:	e7f7      	b.n	80117c6 <__swsetup_r+0xba>
 80117d6:	bf00      	nop
 80117d8:	20001888 	.word	0x20001888
 80117dc:	0802b3ec 	.word	0x0802b3ec
 80117e0:	0802b40c 	.word	0x0802b40c
 80117e4:	0802b3cc 	.word	0x0802b3cc

080117e8 <abort>:
 80117e8:	b508      	push	{r3, lr}
 80117ea:	2006      	movs	r0, #6
 80117ec:	f000 fa48 	bl	8011c80 <raise>
 80117f0:	2001      	movs	r0, #1
 80117f2:	f000 ff1f 	bl	8012634 <_exit>
	...

080117f8 <__sflush_r>:
 80117f8:	898a      	ldrh	r2, [r1, #12]
 80117fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fe:	4605      	mov	r5, r0
 8011800:	0710      	lsls	r0, r2, #28
 8011802:	460c      	mov	r4, r1
 8011804:	d458      	bmi.n	80118b8 <__sflush_r+0xc0>
 8011806:	684b      	ldr	r3, [r1, #4]
 8011808:	2b00      	cmp	r3, #0
 801180a:	dc05      	bgt.n	8011818 <__sflush_r+0x20>
 801180c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801180e:	2b00      	cmp	r3, #0
 8011810:	dc02      	bgt.n	8011818 <__sflush_r+0x20>
 8011812:	2000      	movs	r0, #0
 8011814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801181a:	2e00      	cmp	r6, #0
 801181c:	d0f9      	beq.n	8011812 <__sflush_r+0x1a>
 801181e:	2300      	movs	r3, #0
 8011820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011824:	682f      	ldr	r7, [r5, #0]
 8011826:	602b      	str	r3, [r5, #0]
 8011828:	d032      	beq.n	8011890 <__sflush_r+0x98>
 801182a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	075a      	lsls	r2, r3, #29
 8011830:	d505      	bpl.n	801183e <__sflush_r+0x46>
 8011832:	6863      	ldr	r3, [r4, #4]
 8011834:	1ac0      	subs	r0, r0, r3
 8011836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011838:	b10b      	cbz	r3, 801183e <__sflush_r+0x46>
 801183a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801183c:	1ac0      	subs	r0, r0, r3
 801183e:	2300      	movs	r3, #0
 8011840:	4602      	mov	r2, r0
 8011842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011844:	6a21      	ldr	r1, [r4, #32]
 8011846:	4628      	mov	r0, r5
 8011848:	47b0      	blx	r6
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	d106      	bne.n	801185e <__sflush_r+0x66>
 8011850:	6829      	ldr	r1, [r5, #0]
 8011852:	291d      	cmp	r1, #29
 8011854:	d82c      	bhi.n	80118b0 <__sflush_r+0xb8>
 8011856:	4a2a      	ldr	r2, [pc, #168]	; (8011900 <__sflush_r+0x108>)
 8011858:	40ca      	lsrs	r2, r1
 801185a:	07d6      	lsls	r6, r2, #31
 801185c:	d528      	bpl.n	80118b0 <__sflush_r+0xb8>
 801185e:	2200      	movs	r2, #0
 8011860:	6062      	str	r2, [r4, #4]
 8011862:	04d9      	lsls	r1, r3, #19
 8011864:	6922      	ldr	r2, [r4, #16]
 8011866:	6022      	str	r2, [r4, #0]
 8011868:	d504      	bpl.n	8011874 <__sflush_r+0x7c>
 801186a:	1c42      	adds	r2, r0, #1
 801186c:	d101      	bne.n	8011872 <__sflush_r+0x7a>
 801186e:	682b      	ldr	r3, [r5, #0]
 8011870:	b903      	cbnz	r3, 8011874 <__sflush_r+0x7c>
 8011872:	6560      	str	r0, [r4, #84]	; 0x54
 8011874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011876:	602f      	str	r7, [r5, #0]
 8011878:	2900      	cmp	r1, #0
 801187a:	d0ca      	beq.n	8011812 <__sflush_r+0x1a>
 801187c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011880:	4299      	cmp	r1, r3
 8011882:	d002      	beq.n	801188a <__sflush_r+0x92>
 8011884:	4628      	mov	r0, r5
 8011886:	f7fd fbf1 	bl	800f06c <_free_r>
 801188a:	2000      	movs	r0, #0
 801188c:	6360      	str	r0, [r4, #52]	; 0x34
 801188e:	e7c1      	b.n	8011814 <__sflush_r+0x1c>
 8011890:	6a21      	ldr	r1, [r4, #32]
 8011892:	2301      	movs	r3, #1
 8011894:	4628      	mov	r0, r5
 8011896:	47b0      	blx	r6
 8011898:	1c41      	adds	r1, r0, #1
 801189a:	d1c7      	bne.n	801182c <__sflush_r+0x34>
 801189c:	682b      	ldr	r3, [r5, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d0c4      	beq.n	801182c <__sflush_r+0x34>
 80118a2:	2b1d      	cmp	r3, #29
 80118a4:	d001      	beq.n	80118aa <__sflush_r+0xb2>
 80118a6:	2b16      	cmp	r3, #22
 80118a8:	d101      	bne.n	80118ae <__sflush_r+0xb6>
 80118aa:	602f      	str	r7, [r5, #0]
 80118ac:	e7b1      	b.n	8011812 <__sflush_r+0x1a>
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b4:	81a3      	strh	r3, [r4, #12]
 80118b6:	e7ad      	b.n	8011814 <__sflush_r+0x1c>
 80118b8:	690f      	ldr	r7, [r1, #16]
 80118ba:	2f00      	cmp	r7, #0
 80118bc:	d0a9      	beq.n	8011812 <__sflush_r+0x1a>
 80118be:	0793      	lsls	r3, r2, #30
 80118c0:	680e      	ldr	r6, [r1, #0]
 80118c2:	bf08      	it	eq
 80118c4:	694b      	ldreq	r3, [r1, #20]
 80118c6:	600f      	str	r7, [r1, #0]
 80118c8:	bf18      	it	ne
 80118ca:	2300      	movne	r3, #0
 80118cc:	eba6 0807 	sub.w	r8, r6, r7
 80118d0:	608b      	str	r3, [r1, #8]
 80118d2:	f1b8 0f00 	cmp.w	r8, #0
 80118d6:	dd9c      	ble.n	8011812 <__sflush_r+0x1a>
 80118d8:	6a21      	ldr	r1, [r4, #32]
 80118da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118dc:	4643      	mov	r3, r8
 80118de:	463a      	mov	r2, r7
 80118e0:	4628      	mov	r0, r5
 80118e2:	47b0      	blx	r6
 80118e4:	2800      	cmp	r0, #0
 80118e6:	dc06      	bgt.n	80118f6 <__sflush_r+0xfe>
 80118e8:	89a3      	ldrh	r3, [r4, #12]
 80118ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ee:	81a3      	strh	r3, [r4, #12]
 80118f0:	f04f 30ff 	mov.w	r0, #4294967295
 80118f4:	e78e      	b.n	8011814 <__sflush_r+0x1c>
 80118f6:	4407      	add	r7, r0
 80118f8:	eba8 0800 	sub.w	r8, r8, r0
 80118fc:	e7e9      	b.n	80118d2 <__sflush_r+0xda>
 80118fe:	bf00      	nop
 8011900:	20400001 	.word	0x20400001

08011904 <_fflush_r>:
 8011904:	b538      	push	{r3, r4, r5, lr}
 8011906:	690b      	ldr	r3, [r1, #16]
 8011908:	4605      	mov	r5, r0
 801190a:	460c      	mov	r4, r1
 801190c:	b913      	cbnz	r3, 8011914 <_fflush_r+0x10>
 801190e:	2500      	movs	r5, #0
 8011910:	4628      	mov	r0, r5
 8011912:	bd38      	pop	{r3, r4, r5, pc}
 8011914:	b118      	cbz	r0, 801191e <_fflush_r+0x1a>
 8011916:	6983      	ldr	r3, [r0, #24]
 8011918:	b90b      	cbnz	r3, 801191e <_fflush_r+0x1a>
 801191a:	f000 f887 	bl	8011a2c <__sinit>
 801191e:	4b14      	ldr	r3, [pc, #80]	; (8011970 <_fflush_r+0x6c>)
 8011920:	429c      	cmp	r4, r3
 8011922:	d11b      	bne.n	801195c <_fflush_r+0x58>
 8011924:	686c      	ldr	r4, [r5, #4]
 8011926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d0ef      	beq.n	801190e <_fflush_r+0xa>
 801192e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011930:	07d0      	lsls	r0, r2, #31
 8011932:	d404      	bmi.n	801193e <_fflush_r+0x3a>
 8011934:	0599      	lsls	r1, r3, #22
 8011936:	d402      	bmi.n	801193e <_fflush_r+0x3a>
 8011938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801193a:	f7ff fcf8 	bl	801132e <__retarget_lock_acquire_recursive>
 801193e:	4628      	mov	r0, r5
 8011940:	4621      	mov	r1, r4
 8011942:	f7ff ff59 	bl	80117f8 <__sflush_r>
 8011946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011948:	07da      	lsls	r2, r3, #31
 801194a:	4605      	mov	r5, r0
 801194c:	d4e0      	bmi.n	8011910 <_fflush_r+0xc>
 801194e:	89a3      	ldrh	r3, [r4, #12]
 8011950:	059b      	lsls	r3, r3, #22
 8011952:	d4dd      	bmi.n	8011910 <_fflush_r+0xc>
 8011954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011956:	f7ff fceb 	bl	8011330 <__retarget_lock_release_recursive>
 801195a:	e7d9      	b.n	8011910 <_fflush_r+0xc>
 801195c:	4b05      	ldr	r3, [pc, #20]	; (8011974 <_fflush_r+0x70>)
 801195e:	429c      	cmp	r4, r3
 8011960:	d101      	bne.n	8011966 <_fflush_r+0x62>
 8011962:	68ac      	ldr	r4, [r5, #8]
 8011964:	e7df      	b.n	8011926 <_fflush_r+0x22>
 8011966:	4b04      	ldr	r3, [pc, #16]	; (8011978 <_fflush_r+0x74>)
 8011968:	429c      	cmp	r4, r3
 801196a:	bf08      	it	eq
 801196c:	68ec      	ldreq	r4, [r5, #12]
 801196e:	e7da      	b.n	8011926 <_fflush_r+0x22>
 8011970:	0802b3ec 	.word	0x0802b3ec
 8011974:	0802b40c 	.word	0x0802b40c
 8011978:	0802b3cc 	.word	0x0802b3cc

0801197c <std>:
 801197c:	2300      	movs	r3, #0
 801197e:	b510      	push	{r4, lr}
 8011980:	4604      	mov	r4, r0
 8011982:	e9c0 3300 	strd	r3, r3, [r0]
 8011986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801198a:	6083      	str	r3, [r0, #8]
 801198c:	8181      	strh	r1, [r0, #12]
 801198e:	6643      	str	r3, [r0, #100]	; 0x64
 8011990:	81c2      	strh	r2, [r0, #14]
 8011992:	6183      	str	r3, [r0, #24]
 8011994:	4619      	mov	r1, r3
 8011996:	2208      	movs	r2, #8
 8011998:	305c      	adds	r0, #92	; 0x5c
 801199a:	f7fd fb5f 	bl	800f05c <memset>
 801199e:	4b05      	ldr	r3, [pc, #20]	; (80119b4 <std+0x38>)
 80119a0:	6263      	str	r3, [r4, #36]	; 0x24
 80119a2:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <std+0x3c>)
 80119a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80119a6:	4b05      	ldr	r3, [pc, #20]	; (80119bc <std+0x40>)
 80119a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119aa:	4b05      	ldr	r3, [pc, #20]	; (80119c0 <std+0x44>)
 80119ac:	6224      	str	r4, [r4, #32]
 80119ae:	6323      	str	r3, [r4, #48]	; 0x30
 80119b0:	bd10      	pop	{r4, pc}
 80119b2:	bf00      	nop
 80119b4:	08011cb9 	.word	0x08011cb9
 80119b8:	08011cdb 	.word	0x08011cdb
 80119bc:	08011d13 	.word	0x08011d13
 80119c0:	08011d37 	.word	0x08011d37

080119c4 <_cleanup_r>:
 80119c4:	4901      	ldr	r1, [pc, #4]	; (80119cc <_cleanup_r+0x8>)
 80119c6:	f000 b8af 	b.w	8011b28 <_fwalk_reent>
 80119ca:	bf00      	nop
 80119cc:	08011905 	.word	0x08011905

080119d0 <__sfmoreglue>:
 80119d0:	b570      	push	{r4, r5, r6, lr}
 80119d2:	2268      	movs	r2, #104	; 0x68
 80119d4:	1e4d      	subs	r5, r1, #1
 80119d6:	4355      	muls	r5, r2
 80119d8:	460e      	mov	r6, r1
 80119da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119de:	f7fd fbb1 	bl	800f144 <_malloc_r>
 80119e2:	4604      	mov	r4, r0
 80119e4:	b140      	cbz	r0, 80119f8 <__sfmoreglue+0x28>
 80119e6:	2100      	movs	r1, #0
 80119e8:	e9c0 1600 	strd	r1, r6, [r0]
 80119ec:	300c      	adds	r0, #12
 80119ee:	60a0      	str	r0, [r4, #8]
 80119f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119f4:	f7fd fb32 	bl	800f05c <memset>
 80119f8:	4620      	mov	r0, r4
 80119fa:	bd70      	pop	{r4, r5, r6, pc}

080119fc <__sfp_lock_acquire>:
 80119fc:	4801      	ldr	r0, [pc, #4]	; (8011a04 <__sfp_lock_acquire+0x8>)
 80119fe:	f7ff bc96 	b.w	801132e <__retarget_lock_acquire_recursive>
 8011a02:	bf00      	nop
 8011a04:	20004bd5 	.word	0x20004bd5

08011a08 <__sfp_lock_release>:
 8011a08:	4801      	ldr	r0, [pc, #4]	; (8011a10 <__sfp_lock_release+0x8>)
 8011a0a:	f7ff bc91 	b.w	8011330 <__retarget_lock_release_recursive>
 8011a0e:	bf00      	nop
 8011a10:	20004bd5 	.word	0x20004bd5

08011a14 <__sinit_lock_acquire>:
 8011a14:	4801      	ldr	r0, [pc, #4]	; (8011a1c <__sinit_lock_acquire+0x8>)
 8011a16:	f7ff bc8a 	b.w	801132e <__retarget_lock_acquire_recursive>
 8011a1a:	bf00      	nop
 8011a1c:	20004bd6 	.word	0x20004bd6

08011a20 <__sinit_lock_release>:
 8011a20:	4801      	ldr	r0, [pc, #4]	; (8011a28 <__sinit_lock_release+0x8>)
 8011a22:	f7ff bc85 	b.w	8011330 <__retarget_lock_release_recursive>
 8011a26:	bf00      	nop
 8011a28:	20004bd6 	.word	0x20004bd6

08011a2c <__sinit>:
 8011a2c:	b510      	push	{r4, lr}
 8011a2e:	4604      	mov	r4, r0
 8011a30:	f7ff fff0 	bl	8011a14 <__sinit_lock_acquire>
 8011a34:	69a3      	ldr	r3, [r4, #24]
 8011a36:	b11b      	cbz	r3, 8011a40 <__sinit+0x14>
 8011a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a3c:	f7ff bff0 	b.w	8011a20 <__sinit_lock_release>
 8011a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a44:	6523      	str	r3, [r4, #80]	; 0x50
 8011a46:	4b13      	ldr	r3, [pc, #76]	; (8011a94 <__sinit+0x68>)
 8011a48:	4a13      	ldr	r2, [pc, #76]	; (8011a98 <__sinit+0x6c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	bf04      	itt	eq
 8011a52:	2301      	moveq	r3, #1
 8011a54:	61a3      	streq	r3, [r4, #24]
 8011a56:	4620      	mov	r0, r4
 8011a58:	f000 f820 	bl	8011a9c <__sfp>
 8011a5c:	6060      	str	r0, [r4, #4]
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f000 f81c 	bl	8011a9c <__sfp>
 8011a64:	60a0      	str	r0, [r4, #8]
 8011a66:	4620      	mov	r0, r4
 8011a68:	f000 f818 	bl	8011a9c <__sfp>
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	60e0      	str	r0, [r4, #12]
 8011a70:	2104      	movs	r1, #4
 8011a72:	6860      	ldr	r0, [r4, #4]
 8011a74:	f7ff ff82 	bl	801197c <std>
 8011a78:	68a0      	ldr	r0, [r4, #8]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	2109      	movs	r1, #9
 8011a7e:	f7ff ff7d 	bl	801197c <std>
 8011a82:	68e0      	ldr	r0, [r4, #12]
 8011a84:	2202      	movs	r2, #2
 8011a86:	2112      	movs	r1, #18
 8011a88:	f7ff ff78 	bl	801197c <std>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	61a3      	str	r3, [r4, #24]
 8011a90:	e7d2      	b.n	8011a38 <__sinit+0xc>
 8011a92:	bf00      	nop
 8011a94:	0802b050 	.word	0x0802b050
 8011a98:	080119c5 	.word	0x080119c5

08011a9c <__sfp>:
 8011a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9e:	4607      	mov	r7, r0
 8011aa0:	f7ff ffac 	bl	80119fc <__sfp_lock_acquire>
 8011aa4:	4b1e      	ldr	r3, [pc, #120]	; (8011b20 <__sfp+0x84>)
 8011aa6:	681e      	ldr	r6, [r3, #0]
 8011aa8:	69b3      	ldr	r3, [r6, #24]
 8011aaa:	b913      	cbnz	r3, 8011ab2 <__sfp+0x16>
 8011aac:	4630      	mov	r0, r6
 8011aae:	f7ff ffbd 	bl	8011a2c <__sinit>
 8011ab2:	3648      	adds	r6, #72	; 0x48
 8011ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	d503      	bpl.n	8011ac4 <__sfp+0x28>
 8011abc:	6833      	ldr	r3, [r6, #0]
 8011abe:	b30b      	cbz	r3, 8011b04 <__sfp+0x68>
 8011ac0:	6836      	ldr	r6, [r6, #0]
 8011ac2:	e7f7      	b.n	8011ab4 <__sfp+0x18>
 8011ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ac8:	b9d5      	cbnz	r5, 8011b00 <__sfp+0x64>
 8011aca:	4b16      	ldr	r3, [pc, #88]	; (8011b24 <__sfp+0x88>)
 8011acc:	60e3      	str	r3, [r4, #12]
 8011ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8011ad4:	f7ff fc2a 	bl	801132c <__retarget_lock_init_recursive>
 8011ad8:	f7ff ff96 	bl	8011a08 <__sfp_lock_release>
 8011adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ae4:	6025      	str	r5, [r4, #0]
 8011ae6:	61a5      	str	r5, [r4, #24]
 8011ae8:	2208      	movs	r2, #8
 8011aea:	4629      	mov	r1, r5
 8011aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011af0:	f7fd fab4 	bl	800f05c <memset>
 8011af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011afc:	4620      	mov	r0, r4
 8011afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b00:	3468      	adds	r4, #104	; 0x68
 8011b02:	e7d9      	b.n	8011ab8 <__sfp+0x1c>
 8011b04:	2104      	movs	r1, #4
 8011b06:	4638      	mov	r0, r7
 8011b08:	f7ff ff62 	bl	80119d0 <__sfmoreglue>
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	6030      	str	r0, [r6, #0]
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d1d5      	bne.n	8011ac0 <__sfp+0x24>
 8011b14:	f7ff ff78 	bl	8011a08 <__sfp_lock_release>
 8011b18:	230c      	movs	r3, #12
 8011b1a:	603b      	str	r3, [r7, #0]
 8011b1c:	e7ee      	b.n	8011afc <__sfp+0x60>
 8011b1e:	bf00      	nop
 8011b20:	0802b050 	.word	0x0802b050
 8011b24:	ffff0001 	.word	0xffff0001

08011b28 <_fwalk_reent>:
 8011b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	4688      	mov	r8, r1
 8011b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b34:	2700      	movs	r7, #0
 8011b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8011b3e:	d505      	bpl.n	8011b4c <_fwalk_reent+0x24>
 8011b40:	6824      	ldr	r4, [r4, #0]
 8011b42:	2c00      	cmp	r4, #0
 8011b44:	d1f7      	bne.n	8011b36 <_fwalk_reent+0xe>
 8011b46:	4638      	mov	r0, r7
 8011b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b4c:	89ab      	ldrh	r3, [r5, #12]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d907      	bls.n	8011b62 <_fwalk_reent+0x3a>
 8011b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b56:	3301      	adds	r3, #1
 8011b58:	d003      	beq.n	8011b62 <_fwalk_reent+0x3a>
 8011b5a:	4629      	mov	r1, r5
 8011b5c:	4630      	mov	r0, r6
 8011b5e:	47c0      	blx	r8
 8011b60:	4307      	orrs	r7, r0
 8011b62:	3568      	adds	r5, #104	; 0x68
 8011b64:	e7e9      	b.n	8011b3a <_fwalk_reent+0x12>

08011b66 <__swhatbuf_r>:
 8011b66:	b570      	push	{r4, r5, r6, lr}
 8011b68:	460e      	mov	r6, r1
 8011b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b6e:	2900      	cmp	r1, #0
 8011b70:	b096      	sub	sp, #88	; 0x58
 8011b72:	4614      	mov	r4, r2
 8011b74:	461d      	mov	r5, r3
 8011b76:	da08      	bge.n	8011b8a <__swhatbuf_r+0x24>
 8011b78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	602a      	str	r2, [r5, #0]
 8011b80:	061a      	lsls	r2, r3, #24
 8011b82:	d410      	bmi.n	8011ba6 <__swhatbuf_r+0x40>
 8011b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b88:	e00e      	b.n	8011ba8 <__swhatbuf_r+0x42>
 8011b8a:	466a      	mov	r2, sp
 8011b8c:	f000 f8fa 	bl	8011d84 <_fstat_r>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	dbf1      	blt.n	8011b78 <__swhatbuf_r+0x12>
 8011b94:	9a01      	ldr	r2, [sp, #4]
 8011b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b9e:	425a      	negs	r2, r3
 8011ba0:	415a      	adcs	r2, r3
 8011ba2:	602a      	str	r2, [r5, #0]
 8011ba4:	e7ee      	b.n	8011b84 <__swhatbuf_r+0x1e>
 8011ba6:	2340      	movs	r3, #64	; 0x40
 8011ba8:	2000      	movs	r0, #0
 8011baa:	6023      	str	r3, [r4, #0]
 8011bac:	b016      	add	sp, #88	; 0x58
 8011bae:	bd70      	pop	{r4, r5, r6, pc}

08011bb0 <__smakebuf_r>:
 8011bb0:	898b      	ldrh	r3, [r1, #12]
 8011bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bb4:	079d      	lsls	r5, r3, #30
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	460c      	mov	r4, r1
 8011bba:	d507      	bpl.n	8011bcc <__smakebuf_r+0x1c>
 8011bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bc0:	6023      	str	r3, [r4, #0]
 8011bc2:	6123      	str	r3, [r4, #16]
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	6163      	str	r3, [r4, #20]
 8011bc8:	b002      	add	sp, #8
 8011bca:	bd70      	pop	{r4, r5, r6, pc}
 8011bcc:	ab01      	add	r3, sp, #4
 8011bce:	466a      	mov	r2, sp
 8011bd0:	f7ff ffc9 	bl	8011b66 <__swhatbuf_r>
 8011bd4:	9900      	ldr	r1, [sp, #0]
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	4630      	mov	r0, r6
 8011bda:	f7fd fab3 	bl	800f144 <_malloc_r>
 8011bde:	b948      	cbnz	r0, 8011bf4 <__smakebuf_r+0x44>
 8011be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011be4:	059a      	lsls	r2, r3, #22
 8011be6:	d4ef      	bmi.n	8011bc8 <__smakebuf_r+0x18>
 8011be8:	f023 0303 	bic.w	r3, r3, #3
 8011bec:	f043 0302 	orr.w	r3, r3, #2
 8011bf0:	81a3      	strh	r3, [r4, #12]
 8011bf2:	e7e3      	b.n	8011bbc <__smakebuf_r+0xc>
 8011bf4:	4b0d      	ldr	r3, [pc, #52]	; (8011c2c <__smakebuf_r+0x7c>)
 8011bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011bf8:	89a3      	ldrh	r3, [r4, #12]
 8011bfa:	6020      	str	r0, [r4, #0]
 8011bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c00:	81a3      	strh	r3, [r4, #12]
 8011c02:	9b00      	ldr	r3, [sp, #0]
 8011c04:	6163      	str	r3, [r4, #20]
 8011c06:	9b01      	ldr	r3, [sp, #4]
 8011c08:	6120      	str	r0, [r4, #16]
 8011c0a:	b15b      	cbz	r3, 8011c24 <__smakebuf_r+0x74>
 8011c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c10:	4630      	mov	r0, r6
 8011c12:	f000 f8c9 	bl	8011da8 <_isatty_r>
 8011c16:	b128      	cbz	r0, 8011c24 <__smakebuf_r+0x74>
 8011c18:	89a3      	ldrh	r3, [r4, #12]
 8011c1a:	f023 0303 	bic.w	r3, r3, #3
 8011c1e:	f043 0301 	orr.w	r3, r3, #1
 8011c22:	81a3      	strh	r3, [r4, #12]
 8011c24:	89a0      	ldrh	r0, [r4, #12]
 8011c26:	4305      	orrs	r5, r0
 8011c28:	81a5      	strh	r5, [r4, #12]
 8011c2a:	e7cd      	b.n	8011bc8 <__smakebuf_r+0x18>
 8011c2c:	080119c5 	.word	0x080119c5

08011c30 <_raise_r>:
 8011c30:	291f      	cmp	r1, #31
 8011c32:	b538      	push	{r3, r4, r5, lr}
 8011c34:	4604      	mov	r4, r0
 8011c36:	460d      	mov	r5, r1
 8011c38:	d904      	bls.n	8011c44 <_raise_r+0x14>
 8011c3a:	2316      	movs	r3, #22
 8011c3c:	6003      	str	r3, [r0, #0]
 8011c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8011c42:	bd38      	pop	{r3, r4, r5, pc}
 8011c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011c46:	b112      	cbz	r2, 8011c4e <_raise_r+0x1e>
 8011c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c4c:	b94b      	cbnz	r3, 8011c62 <_raise_r+0x32>
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f000 f830 	bl	8011cb4 <_getpid_r>
 8011c54:	462a      	mov	r2, r5
 8011c56:	4601      	mov	r1, r0
 8011c58:	4620      	mov	r0, r4
 8011c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c5e:	f000 b817 	b.w	8011c90 <_kill_r>
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d00a      	beq.n	8011c7c <_raise_r+0x4c>
 8011c66:	1c59      	adds	r1, r3, #1
 8011c68:	d103      	bne.n	8011c72 <_raise_r+0x42>
 8011c6a:	2316      	movs	r3, #22
 8011c6c:	6003      	str	r3, [r0, #0]
 8011c6e:	2001      	movs	r0, #1
 8011c70:	e7e7      	b.n	8011c42 <_raise_r+0x12>
 8011c72:	2400      	movs	r4, #0
 8011c74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c78:	4628      	mov	r0, r5
 8011c7a:	4798      	blx	r3
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	e7e0      	b.n	8011c42 <_raise_r+0x12>

08011c80 <raise>:
 8011c80:	4b02      	ldr	r3, [pc, #8]	; (8011c8c <raise+0xc>)
 8011c82:	4601      	mov	r1, r0
 8011c84:	6818      	ldr	r0, [r3, #0]
 8011c86:	f7ff bfd3 	b.w	8011c30 <_raise_r>
 8011c8a:	bf00      	nop
 8011c8c:	20001888 	.word	0x20001888

08011c90 <_kill_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	4d07      	ldr	r5, [pc, #28]	; (8011cb0 <_kill_r+0x20>)
 8011c94:	2300      	movs	r3, #0
 8011c96:	4604      	mov	r4, r0
 8011c98:	4608      	mov	r0, r1
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	602b      	str	r3, [r5, #0]
 8011c9e:	f000 fca9 	bl	80125f4 <_kill>
 8011ca2:	1c43      	adds	r3, r0, #1
 8011ca4:	d102      	bne.n	8011cac <_kill_r+0x1c>
 8011ca6:	682b      	ldr	r3, [r5, #0]
 8011ca8:	b103      	cbz	r3, 8011cac <_kill_r+0x1c>
 8011caa:	6023      	str	r3, [r4, #0]
 8011cac:	bd38      	pop	{r3, r4, r5, pc}
 8011cae:	bf00      	nop
 8011cb0:	20004bd0 	.word	0x20004bd0

08011cb4 <_getpid_r>:
 8011cb4:	f000 bc8e 	b.w	80125d4 <_getpid>

08011cb8 <__sread>:
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	460c      	mov	r4, r1
 8011cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cc0:	f000 f894 	bl	8011dec <_read_r>
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	bfab      	itete	ge
 8011cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011cca:	89a3      	ldrhlt	r3, [r4, #12]
 8011ccc:	181b      	addge	r3, r3, r0
 8011cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cd2:	bfac      	ite	ge
 8011cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cd6:	81a3      	strhlt	r3, [r4, #12]
 8011cd8:	bd10      	pop	{r4, pc}

08011cda <__swrite>:
 8011cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cde:	461f      	mov	r7, r3
 8011ce0:	898b      	ldrh	r3, [r1, #12]
 8011ce2:	05db      	lsls	r3, r3, #23
 8011ce4:	4605      	mov	r5, r0
 8011ce6:	460c      	mov	r4, r1
 8011ce8:	4616      	mov	r6, r2
 8011cea:	d505      	bpl.n	8011cf8 <__swrite+0x1e>
 8011cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cf0:	2302      	movs	r3, #2
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f000 f868 	bl	8011dc8 <_lseek_r>
 8011cf8:	89a3      	ldrh	r3, [r4, #12]
 8011cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d02:	81a3      	strh	r3, [r4, #12]
 8011d04:	4632      	mov	r2, r6
 8011d06:	463b      	mov	r3, r7
 8011d08:	4628      	mov	r0, r5
 8011d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0e:	f000 b817 	b.w	8011d40 <_write_r>

08011d12 <__sseek>:
 8011d12:	b510      	push	{r4, lr}
 8011d14:	460c      	mov	r4, r1
 8011d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d1a:	f000 f855 	bl	8011dc8 <_lseek_r>
 8011d1e:	1c43      	adds	r3, r0, #1
 8011d20:	89a3      	ldrh	r3, [r4, #12]
 8011d22:	bf15      	itete	ne
 8011d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d2e:	81a3      	strheq	r3, [r4, #12]
 8011d30:	bf18      	it	ne
 8011d32:	81a3      	strhne	r3, [r4, #12]
 8011d34:	bd10      	pop	{r4, pc}

08011d36 <__sclose>:
 8011d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d3a:	f000 b813 	b.w	8011d64 <_close_r>
	...

08011d40 <_write_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d07      	ldr	r5, [pc, #28]	; (8011d60 <_write_r+0x20>)
 8011d44:	4604      	mov	r4, r0
 8011d46:	4608      	mov	r0, r1
 8011d48:	4611      	mov	r1, r2
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	602a      	str	r2, [r5, #0]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f000 fc68 	bl	8012624 <_write>
 8011d54:	1c43      	adds	r3, r0, #1
 8011d56:	d102      	bne.n	8011d5e <_write_r+0x1e>
 8011d58:	682b      	ldr	r3, [r5, #0]
 8011d5a:	b103      	cbz	r3, 8011d5e <_write_r+0x1e>
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}
 8011d60:	20004bd0 	.word	0x20004bd0

08011d64 <_close_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4d06      	ldr	r5, [pc, #24]	; (8011d80 <_close_r+0x1c>)
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	4608      	mov	r0, r1
 8011d6e:	602b      	str	r3, [r5, #0]
 8011d70:	f000 fc20 	bl	80125b4 <_close>
 8011d74:	1c43      	adds	r3, r0, #1
 8011d76:	d102      	bne.n	8011d7e <_close_r+0x1a>
 8011d78:	682b      	ldr	r3, [r5, #0]
 8011d7a:	b103      	cbz	r3, 8011d7e <_close_r+0x1a>
 8011d7c:	6023      	str	r3, [r4, #0]
 8011d7e:	bd38      	pop	{r3, r4, r5, pc}
 8011d80:	20004bd0 	.word	0x20004bd0

08011d84 <_fstat_r>:
 8011d84:	b538      	push	{r3, r4, r5, lr}
 8011d86:	4d07      	ldr	r5, [pc, #28]	; (8011da4 <_fstat_r+0x20>)
 8011d88:	2300      	movs	r3, #0
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	4608      	mov	r0, r1
 8011d8e:	4611      	mov	r1, r2
 8011d90:	602b      	str	r3, [r5, #0]
 8011d92:	f000 fc17 	bl	80125c4 <_fstat>
 8011d96:	1c43      	adds	r3, r0, #1
 8011d98:	d102      	bne.n	8011da0 <_fstat_r+0x1c>
 8011d9a:	682b      	ldr	r3, [r5, #0]
 8011d9c:	b103      	cbz	r3, 8011da0 <_fstat_r+0x1c>
 8011d9e:	6023      	str	r3, [r4, #0]
 8011da0:	bd38      	pop	{r3, r4, r5, pc}
 8011da2:	bf00      	nop
 8011da4:	20004bd0 	.word	0x20004bd0

08011da8 <_isatty_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d06      	ldr	r5, [pc, #24]	; (8011dc4 <_isatty_r+0x1c>)
 8011dac:	2300      	movs	r3, #0
 8011dae:	4604      	mov	r4, r0
 8011db0:	4608      	mov	r0, r1
 8011db2:	602b      	str	r3, [r5, #0]
 8011db4:	f000 fc16 	bl	80125e4 <_isatty>
 8011db8:	1c43      	adds	r3, r0, #1
 8011dba:	d102      	bne.n	8011dc2 <_isatty_r+0x1a>
 8011dbc:	682b      	ldr	r3, [r5, #0]
 8011dbe:	b103      	cbz	r3, 8011dc2 <_isatty_r+0x1a>
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	bd38      	pop	{r3, r4, r5, pc}
 8011dc4:	20004bd0 	.word	0x20004bd0

08011dc8 <_lseek_r>:
 8011dc8:	b538      	push	{r3, r4, r5, lr}
 8011dca:	4d07      	ldr	r5, [pc, #28]	; (8011de8 <_lseek_r+0x20>)
 8011dcc:	4604      	mov	r4, r0
 8011dce:	4608      	mov	r0, r1
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	602a      	str	r2, [r5, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	f000 fc14 	bl	8012604 <_lseek>
 8011ddc:	1c43      	adds	r3, r0, #1
 8011dde:	d102      	bne.n	8011de6 <_lseek_r+0x1e>
 8011de0:	682b      	ldr	r3, [r5, #0]
 8011de2:	b103      	cbz	r3, 8011de6 <_lseek_r+0x1e>
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	bd38      	pop	{r3, r4, r5, pc}
 8011de8:	20004bd0 	.word	0x20004bd0

08011dec <_read_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4d07      	ldr	r5, [pc, #28]	; (8011e0c <_read_r+0x20>)
 8011df0:	4604      	mov	r4, r0
 8011df2:	4608      	mov	r0, r1
 8011df4:	4611      	mov	r1, r2
 8011df6:	2200      	movs	r2, #0
 8011df8:	602a      	str	r2, [r5, #0]
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f000 fc0a 	bl	8012614 <_read>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d102      	bne.n	8011e0a <_read_r+0x1e>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	b103      	cbz	r3, 8011e0a <_read_r+0x1e>
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	20004bd0 	.word	0x20004bd0

08011e10 <powf>:
 8011e10:	b508      	push	{r3, lr}
 8011e12:	ed2d 8b04 	vpush	{d8-d9}
 8011e16:	eeb0 8a60 	vmov.f32	s16, s1
 8011e1a:	eeb0 9a40 	vmov.f32	s18, s0
 8011e1e:	f000 f84f 	bl	8011ec0 <__ieee754_powf>
 8011e22:	eeb4 8a48 	vcmp.f32	s16, s16
 8011e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e2a:	eef0 8a40 	vmov.f32	s17, s0
 8011e2e:	d63e      	bvs.n	8011eae <powf+0x9e>
 8011e30:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e38:	d112      	bne.n	8011e60 <powf+0x50>
 8011e3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	d039      	beq.n	8011eb8 <powf+0xa8>
 8011e44:	eeb0 0a48 	vmov.f32	s0, s16
 8011e48:	f000 fb35 	bl	80124b6 <finitef>
 8011e4c:	b378      	cbz	r0, 8011eae <powf+0x9e>
 8011e4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e56:	d52a      	bpl.n	8011eae <powf+0x9e>
 8011e58:	f7fd f8c0 	bl	800efdc <__errno>
 8011e5c:	2322      	movs	r3, #34	; 0x22
 8011e5e:	e014      	b.n	8011e8a <powf+0x7a>
 8011e60:	f000 fb29 	bl	80124b6 <finitef>
 8011e64:	b998      	cbnz	r0, 8011e8e <powf+0x7e>
 8011e66:	eeb0 0a49 	vmov.f32	s0, s18
 8011e6a:	f000 fb24 	bl	80124b6 <finitef>
 8011e6e:	b170      	cbz	r0, 8011e8e <powf+0x7e>
 8011e70:	eeb0 0a48 	vmov.f32	s0, s16
 8011e74:	f000 fb1f 	bl	80124b6 <finitef>
 8011e78:	b148      	cbz	r0, 8011e8e <powf+0x7e>
 8011e7a:	eef4 8a68 	vcmp.f32	s17, s17
 8011e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e82:	d7e9      	bvc.n	8011e58 <powf+0x48>
 8011e84:	f7fd f8aa 	bl	800efdc <__errno>
 8011e88:	2321      	movs	r3, #33	; 0x21
 8011e8a:	6003      	str	r3, [r0, #0]
 8011e8c:	e00f      	b.n	8011eae <powf+0x9e>
 8011e8e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e96:	d10a      	bne.n	8011eae <powf+0x9e>
 8011e98:	eeb0 0a49 	vmov.f32	s0, s18
 8011e9c:	f000 fb0b 	bl	80124b6 <finitef>
 8011ea0:	b128      	cbz	r0, 8011eae <powf+0x9e>
 8011ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8011ea6:	f000 fb06 	bl	80124b6 <finitef>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d1d4      	bne.n	8011e58 <powf+0x48>
 8011eae:	eeb0 0a68 	vmov.f32	s0, s17
 8011eb2:	ecbd 8b04 	vpop	{d8-d9}
 8011eb6:	bd08      	pop	{r3, pc}
 8011eb8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011ebc:	e7f7      	b.n	8011eae <powf+0x9e>
	...

08011ec0 <__ieee754_powf>:
 8011ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec4:	ee10 4a90 	vmov	r4, s1
 8011ec8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8011ecc:	ed2d 8b02 	vpush	{d8}
 8011ed0:	ee10 6a10 	vmov	r6, s0
 8011ed4:	eeb0 8a40 	vmov.f32	s16, s0
 8011ed8:	eef0 8a60 	vmov.f32	s17, s1
 8011edc:	d10c      	bne.n	8011ef8 <__ieee754_powf+0x38>
 8011ede:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8011ee2:	0076      	lsls	r6, r6, #1
 8011ee4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8011ee8:	f240 8296 	bls.w	8012418 <__ieee754_powf+0x558>
 8011eec:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011ef0:	ecbd 8b02 	vpop	{d8}
 8011ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ef8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011efc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011f00:	dcf4      	bgt.n	8011eec <__ieee754_powf+0x2c>
 8011f02:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011f06:	dd08      	ble.n	8011f1a <__ieee754_powf+0x5a>
 8011f08:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8011f0c:	d1ee      	bne.n	8011eec <__ieee754_powf+0x2c>
 8011f0e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8011f12:	0064      	lsls	r4, r4, #1
 8011f14:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011f18:	e7e6      	b.n	8011ee8 <__ieee754_powf+0x28>
 8011f1a:	2e00      	cmp	r6, #0
 8011f1c:	da20      	bge.n	8011f60 <__ieee754_powf+0xa0>
 8011f1e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8011f22:	da2d      	bge.n	8011f80 <__ieee754_powf+0xc0>
 8011f24:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011f28:	f2c0 827f 	blt.w	801242a <__ieee754_powf+0x56a>
 8011f2c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8011f30:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011f34:	fa48 f703 	asr.w	r7, r8, r3
 8011f38:	fa07 f303 	lsl.w	r3, r7, r3
 8011f3c:	4543      	cmp	r3, r8
 8011f3e:	f040 8274 	bne.w	801242a <__ieee754_powf+0x56a>
 8011f42:	f007 0701 	and.w	r7, r7, #1
 8011f46:	f1c7 0702 	rsb	r7, r7, #2
 8011f4a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011f4e:	d11f      	bne.n	8011f90 <__ieee754_powf+0xd0>
 8011f50:	2c00      	cmp	r4, #0
 8011f52:	f280 8267 	bge.w	8012424 <__ieee754_powf+0x564>
 8011f56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f5a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011f5e:	e7c7      	b.n	8011ef0 <__ieee754_powf+0x30>
 8011f60:	2700      	movs	r7, #0
 8011f62:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011f66:	d1f0      	bne.n	8011f4a <__ieee754_powf+0x8a>
 8011f68:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8011f6c:	f000 8254 	beq.w	8012418 <__ieee754_powf+0x558>
 8011f70:	dd08      	ble.n	8011f84 <__ieee754_powf+0xc4>
 8011f72:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801227c <__ieee754_powf+0x3bc>
 8011f76:	2c00      	cmp	r4, #0
 8011f78:	bfa8      	it	ge
 8011f7a:	eeb0 0a68 	vmovge.f32	s0, s17
 8011f7e:	e7b7      	b.n	8011ef0 <__ieee754_powf+0x30>
 8011f80:	2702      	movs	r7, #2
 8011f82:	e7ee      	b.n	8011f62 <__ieee754_powf+0xa2>
 8011f84:	2c00      	cmp	r4, #0
 8011f86:	f280 824a 	bge.w	801241e <__ieee754_powf+0x55e>
 8011f8a:	eeb1 0a68 	vneg.f32	s0, s17
 8011f8e:	e7af      	b.n	8011ef0 <__ieee754_powf+0x30>
 8011f90:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8011f94:	d102      	bne.n	8011f9c <__ieee754_powf+0xdc>
 8011f96:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011f9a:	e7a9      	b.n	8011ef0 <__ieee754_powf+0x30>
 8011f9c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8011fa4:	d107      	bne.n	8011fb6 <__ieee754_powf+0xf6>
 8011fa6:	2e00      	cmp	r6, #0
 8011fa8:	db05      	blt.n	8011fb6 <__ieee754_powf+0xf6>
 8011faa:	ecbd 8b02 	vpop	{d8}
 8011fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb2:	f000 ba53 	b.w	801245c <__ieee754_sqrtf>
 8011fb6:	f000 fa77 	bl	80124a8 <fabsf>
 8011fba:	b125      	cbz	r5, 8011fc6 <__ieee754_powf+0x106>
 8011fbc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8011fc0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011fc4:	d116      	bne.n	8011ff4 <__ieee754_powf+0x134>
 8011fc6:	2c00      	cmp	r4, #0
 8011fc8:	bfbc      	itt	lt
 8011fca:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011fce:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011fd2:	2e00      	cmp	r6, #0
 8011fd4:	da8c      	bge.n	8011ef0 <__ieee754_powf+0x30>
 8011fd6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8011fda:	ea55 0307 	orrs.w	r3, r5, r7
 8011fde:	d104      	bne.n	8011fea <__ieee754_powf+0x12a>
 8011fe0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011fe4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011fe8:	e782      	b.n	8011ef0 <__ieee754_powf+0x30>
 8011fea:	2f01      	cmp	r7, #1
 8011fec:	d180      	bne.n	8011ef0 <__ieee754_powf+0x30>
 8011fee:	eeb1 0a40 	vneg.f32	s0, s0
 8011ff2:	e77d      	b.n	8011ef0 <__ieee754_powf+0x30>
 8011ff4:	0ff0      	lsrs	r0, r6, #31
 8011ff6:	3801      	subs	r0, #1
 8011ff8:	ea57 0300 	orrs.w	r3, r7, r0
 8011ffc:	d104      	bne.n	8012008 <__ieee754_powf+0x148>
 8011ffe:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012002:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012006:	e773      	b.n	8011ef0 <__ieee754_powf+0x30>
 8012008:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801200c:	dd74      	ble.n	80120f8 <__ieee754_powf+0x238>
 801200e:	4b9c      	ldr	r3, [pc, #624]	; (8012280 <__ieee754_powf+0x3c0>)
 8012010:	429d      	cmp	r5, r3
 8012012:	dc08      	bgt.n	8012026 <__ieee754_powf+0x166>
 8012014:	2c00      	cmp	r4, #0
 8012016:	da0b      	bge.n	8012030 <__ieee754_powf+0x170>
 8012018:	2000      	movs	r0, #0
 801201a:	ecbd 8b02 	vpop	{d8}
 801201e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012022:	f000 ba3b 	b.w	801249c <__math_oflowf>
 8012026:	4b97      	ldr	r3, [pc, #604]	; (8012284 <__ieee754_powf+0x3c4>)
 8012028:	429d      	cmp	r5, r3
 801202a:	dd08      	ble.n	801203e <__ieee754_powf+0x17e>
 801202c:	2c00      	cmp	r4, #0
 801202e:	dcf3      	bgt.n	8012018 <__ieee754_powf+0x158>
 8012030:	2000      	movs	r0, #0
 8012032:	ecbd 8b02 	vpop	{d8}
 8012036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801203a:	f000 ba29 	b.w	8012490 <__math_uflowf>
 801203e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012042:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012046:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012288 <__ieee754_powf+0x3c8>
 801204a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801204e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012052:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012056:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801205a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012062:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801228c <__ieee754_powf+0x3cc>
 8012066:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801206a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012290 <__ieee754_powf+0x3d0>
 801206e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012072:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8012294 <__ieee754_powf+0x3d4>
 8012076:	eef0 6a67 	vmov.f32	s13, s15
 801207a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801207e:	ee16 3a90 	vmov	r3, s13
 8012082:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012086:	f023 030f 	bic.w	r3, r3, #15
 801208a:	ee00 3a90 	vmov	s1, r3
 801208e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8012092:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012096:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801209a:	f024 040f 	bic.w	r4, r4, #15
 801209e:	ee07 4a10 	vmov	s14, r4
 80120a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80120a6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80120aa:	ee07 3a90 	vmov	s15, r3
 80120ae:	eee7 0a27 	vfma.f32	s1, s14, s15
 80120b2:	3f01      	subs	r7, #1
 80120b4:	ea57 0200 	orrs.w	r2, r7, r0
 80120b8:	ee07 4a10 	vmov	s14, r4
 80120bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80120c4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80120c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80120cc:	ee17 4a10 	vmov	r4, s14
 80120d0:	bf08      	it	eq
 80120d2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80120d6:	2c00      	cmp	r4, #0
 80120d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80120dc:	f340 817e 	ble.w	80123dc <__ieee754_powf+0x51c>
 80120e0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80120e4:	f340 80f8 	ble.w	80122d8 <__ieee754_powf+0x418>
 80120e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80120ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f0:	bf4c      	ite	mi
 80120f2:	2001      	movmi	r0, #1
 80120f4:	2000      	movpl	r0, #0
 80120f6:	e790      	b.n	801201a <__ieee754_powf+0x15a>
 80120f8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80120fc:	bf01      	itttt	eq
 80120fe:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8012298 <__ieee754_powf+0x3d8>
 8012102:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012106:	f06f 0217 	mvneq.w	r2, #23
 801210a:	ee17 5a90 	vmoveq	r5, s15
 801210e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012112:	bf18      	it	ne
 8012114:	2200      	movne	r2, #0
 8012116:	3b7f      	subs	r3, #127	; 0x7f
 8012118:	4413      	add	r3, r2
 801211a:	4a60      	ldr	r2, [pc, #384]	; (801229c <__ieee754_powf+0x3dc>)
 801211c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012120:	4295      	cmp	r5, r2
 8012122:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8012126:	dd06      	ble.n	8012136 <__ieee754_powf+0x276>
 8012128:	4a5d      	ldr	r2, [pc, #372]	; (80122a0 <__ieee754_powf+0x3e0>)
 801212a:	4295      	cmp	r5, r2
 801212c:	f340 80a4 	ble.w	8012278 <__ieee754_powf+0x3b8>
 8012130:	3301      	adds	r3, #1
 8012132:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012136:	2500      	movs	r5, #0
 8012138:	4a5a      	ldr	r2, [pc, #360]	; (80122a4 <__ieee754_powf+0x3e4>)
 801213a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801213e:	ee07 1a90 	vmov	s15, r1
 8012142:	ed92 7a00 	vldr	s14, [r2]
 8012146:	4a58      	ldr	r2, [pc, #352]	; (80122a8 <__ieee754_powf+0x3e8>)
 8012148:	ee37 6a27 	vadd.f32	s12, s14, s15
 801214c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012150:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8012154:	1049      	asrs	r1, r1, #1
 8012156:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801215a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801215e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8012162:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8012166:	ee06 1a10 	vmov	s12, r1
 801216a:	ee65 4a26 	vmul.f32	s9, s10, s13
 801216e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8012172:	ee14 6a90 	vmov	r6, s9
 8012176:	4016      	ands	r6, r2
 8012178:	ee05 6a90 	vmov	s11, r6
 801217c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8012180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012184:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80122ac <__ieee754_powf+0x3ec>
 8012188:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801218c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8012190:	ee25 6a26 	vmul.f32	s12, s10, s13
 8012194:	eddf 6a46 	vldr	s13, [pc, #280]	; 80122b0 <__ieee754_powf+0x3f0>
 8012198:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801219c:	eddf 6a45 	vldr	s13, [pc, #276]	; 80122b4 <__ieee754_powf+0x3f4>
 80121a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80121a4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012288 <__ieee754_powf+0x3c8>
 80121a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121ac:	eddf 6a42 	vldr	s13, [pc, #264]	; 80122b8 <__ieee754_powf+0x3f8>
 80121b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80121b4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80122bc <__ieee754_powf+0x3fc>
 80121b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121bc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80121c0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80121c4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80121c8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80121cc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80121d0:	eef0 7a45 	vmov.f32	s15, s10
 80121d4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80121d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121dc:	ee17 1a90 	vmov	r1, s15
 80121e0:	4011      	ands	r1, r2
 80121e2:	ee07 1a90 	vmov	s15, r1
 80121e6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80121ea:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80121ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80121f2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80121f6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80121fa:	eeb0 6a47 	vmov.f32	s12, s14
 80121fe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012202:	ee16 1a10 	vmov	r1, s12
 8012206:	4011      	ands	r1, r2
 8012208:	ee06 1a90 	vmov	s13, r1
 801220c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8012210:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80122c0 <__ieee754_powf+0x400>
 8012214:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80122c4 <__ieee754_powf+0x404>
 8012218:	ee37 7a66 	vsub.f32	s14, s14, s13
 801221c:	ee06 1a10 	vmov	s12, r1
 8012220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012224:	eddf 7a28 	vldr	s15, [pc, #160]	; 80122c8 <__ieee754_powf+0x408>
 8012228:	4928      	ldr	r1, [pc, #160]	; (80122cc <__ieee754_powf+0x40c>)
 801222a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801222e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8012232:	edd1 7a00 	vldr	s15, [r1]
 8012236:	ee37 7a27 	vadd.f32	s14, s14, s15
 801223a:	ee07 3a90 	vmov	s15, r3
 801223e:	4b24      	ldr	r3, [pc, #144]	; (80122d0 <__ieee754_powf+0x410>)
 8012240:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012244:	eef0 7a47 	vmov.f32	s15, s14
 8012248:	eee6 7a25 	vfma.f32	s15, s12, s11
 801224c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012250:	edd5 0a00 	vldr	s1, [r5]
 8012254:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801225c:	ee17 3a90 	vmov	r3, s15
 8012260:	4013      	ands	r3, r2
 8012262:	ee07 3a90 	vmov	s15, r3
 8012266:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801226a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801226e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8012272:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012276:	e70e      	b.n	8012096 <__ieee754_powf+0x1d6>
 8012278:	2501      	movs	r5, #1
 801227a:	e75d      	b.n	8012138 <__ieee754_powf+0x278>
 801227c:	00000000 	.word	0x00000000
 8012280:	3f7ffff3 	.word	0x3f7ffff3
 8012284:	3f800007 	.word	0x3f800007
 8012288:	3eaaaaab 	.word	0x3eaaaaab
 801228c:	3fb8aa3b 	.word	0x3fb8aa3b
 8012290:	36eca570 	.word	0x36eca570
 8012294:	3fb8aa00 	.word	0x3fb8aa00
 8012298:	4b800000 	.word	0x4b800000
 801229c:	001cc471 	.word	0x001cc471
 80122a0:	005db3d6 	.word	0x005db3d6
 80122a4:	0802b42c 	.word	0x0802b42c
 80122a8:	fffff000 	.word	0xfffff000
 80122ac:	3e6c3255 	.word	0x3e6c3255
 80122b0:	3e53f142 	.word	0x3e53f142
 80122b4:	3e8ba305 	.word	0x3e8ba305
 80122b8:	3edb6db7 	.word	0x3edb6db7
 80122bc:	3f19999a 	.word	0x3f19999a
 80122c0:	3f76384f 	.word	0x3f76384f
 80122c4:	3f763800 	.word	0x3f763800
 80122c8:	369dc3a0 	.word	0x369dc3a0
 80122cc:	0802b43c 	.word	0x0802b43c
 80122d0:	0802b434 	.word	0x0802b434
 80122d4:	3338aa3c 	.word	0x3338aa3c
 80122d8:	f040 8095 	bne.w	8012406 <__ieee754_powf+0x546>
 80122dc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80122d4 <__ieee754_powf+0x414>
 80122e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80122e4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80122e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80122ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f0:	f73f aefa 	bgt.w	80120e8 <__ieee754_powf+0x228>
 80122f4:	15db      	asrs	r3, r3, #23
 80122f6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80122fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80122fe:	4103      	asrs	r3, r0
 8012300:	4423      	add	r3, r4
 8012302:	494b      	ldr	r1, [pc, #300]	; (8012430 <__ieee754_powf+0x570>)
 8012304:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012308:	3a7f      	subs	r2, #127	; 0x7f
 801230a:	4111      	asrs	r1, r2
 801230c:	ea23 0101 	bic.w	r1, r3, r1
 8012310:	ee07 1a10 	vmov	s14, r1
 8012314:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012318:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801231c:	f1c2 0217 	rsb	r2, r2, #23
 8012320:	4110      	asrs	r0, r2
 8012322:	2c00      	cmp	r4, #0
 8012324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012328:	bfb8      	it	lt
 801232a:	4240      	neglt	r0, r0
 801232c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012330:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8012434 <__ieee754_powf+0x574>
 8012334:	eddf 6a40 	vldr	s13, [pc, #256]	; 8012438 <__ieee754_powf+0x578>
 8012338:	ee17 3a10 	vmov	r3, s14
 801233c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012340:	f023 030f 	bic.w	r3, r3, #15
 8012344:	ee07 3a10 	vmov	s14, r3
 8012348:	ee77 7a67 	vsub.f32	s15, s14, s15
 801234c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012350:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012354:	eddf 7a39 	vldr	s15, [pc, #228]	; 801243c <__ieee754_powf+0x57c>
 8012358:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801235c:	eef0 7a40 	vmov.f32	s15, s0
 8012360:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012364:	eeb0 6a67 	vmov.f32	s12, s15
 8012368:	eea7 6a66 	vfms.f32	s12, s14, s13
 801236c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012370:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012374:	eddf 6a32 	vldr	s13, [pc, #200]	; 8012440 <__ieee754_powf+0x580>
 8012378:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8012444 <__ieee754_powf+0x584>
 801237c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012380:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012448 <__ieee754_powf+0x588>
 8012384:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012388:	eddf 6a30 	vldr	s13, [pc, #192]	; 801244c <__ieee754_powf+0x58c>
 801238c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012390:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012450 <__ieee754_powf+0x590>
 8012394:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012398:	eef0 6a67 	vmov.f32	s13, s15
 801239c:	eee6 6a47 	vfms.f32	s13, s12, s14
 80123a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80123a4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80123a8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80123ac:	eea7 0a80 	vfma.f32	s0, s15, s0
 80123b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80123b4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80123b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80123bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80123c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80123c4:	ee10 3a10 	vmov	r3, s0
 80123c8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80123cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80123d0:	da1f      	bge.n	8012412 <__ieee754_powf+0x552>
 80123d2:	f000 f87d 	bl	80124d0 <scalbnf>
 80123d6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80123da:	e589      	b.n	8011ef0 <__ieee754_powf+0x30>
 80123dc:	4a1d      	ldr	r2, [pc, #116]	; (8012454 <__ieee754_powf+0x594>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	dd07      	ble.n	80123f2 <__ieee754_powf+0x532>
 80123e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80123e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ea:	bf4c      	ite	mi
 80123ec:	2001      	movmi	r0, #1
 80123ee:	2000      	movpl	r0, #0
 80123f0:	e61f      	b.n	8012032 <__ieee754_powf+0x172>
 80123f2:	d108      	bne.n	8012406 <__ieee754_powf+0x546>
 80123f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80123f8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80123fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012400:	f6ff af78 	blt.w	80122f4 <__ieee754_powf+0x434>
 8012404:	e7ed      	b.n	80123e2 <__ieee754_powf+0x522>
 8012406:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801240a:	f73f af73 	bgt.w	80122f4 <__ieee754_powf+0x434>
 801240e:	2000      	movs	r0, #0
 8012410:	e78c      	b.n	801232c <__ieee754_powf+0x46c>
 8012412:	ee00 3a10 	vmov	s0, r3
 8012416:	e7de      	b.n	80123d6 <__ieee754_powf+0x516>
 8012418:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801241c:	e568      	b.n	8011ef0 <__ieee754_powf+0x30>
 801241e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012458 <__ieee754_powf+0x598>
 8012422:	e565      	b.n	8011ef0 <__ieee754_powf+0x30>
 8012424:	eeb0 0a48 	vmov.f32	s0, s16
 8012428:	e562      	b.n	8011ef0 <__ieee754_powf+0x30>
 801242a:	2700      	movs	r7, #0
 801242c:	e58d      	b.n	8011f4a <__ieee754_powf+0x8a>
 801242e:	bf00      	nop
 8012430:	007fffff 	.word	0x007fffff
 8012434:	35bfbe8c 	.word	0x35bfbe8c
 8012438:	3f317200 	.word	0x3f317200
 801243c:	3f317218 	.word	0x3f317218
 8012440:	b5ddea0e 	.word	0xb5ddea0e
 8012444:	3331bb4c 	.word	0x3331bb4c
 8012448:	388ab355 	.word	0x388ab355
 801244c:	bb360b61 	.word	0xbb360b61
 8012450:	3e2aaaab 	.word	0x3e2aaaab
 8012454:	43160000 	.word	0x43160000
 8012458:	00000000 	.word	0x00000000

0801245c <__ieee754_sqrtf>:
 801245c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012460:	4770      	bx	lr

08012462 <with_errnof>:
 8012462:	b513      	push	{r0, r1, r4, lr}
 8012464:	4604      	mov	r4, r0
 8012466:	ed8d 0a01 	vstr	s0, [sp, #4]
 801246a:	f7fc fdb7 	bl	800efdc <__errno>
 801246e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012472:	6004      	str	r4, [r0, #0]
 8012474:	b002      	add	sp, #8
 8012476:	bd10      	pop	{r4, pc}

08012478 <xflowf>:
 8012478:	b130      	cbz	r0, 8012488 <xflowf+0x10>
 801247a:	eef1 7a40 	vneg.f32	s15, s0
 801247e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012482:	2022      	movs	r0, #34	; 0x22
 8012484:	f7ff bfed 	b.w	8012462 <with_errnof>
 8012488:	eef0 7a40 	vmov.f32	s15, s0
 801248c:	e7f7      	b.n	801247e <xflowf+0x6>
	...

08012490 <__math_uflowf>:
 8012490:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012498 <__math_uflowf+0x8>
 8012494:	f7ff bff0 	b.w	8012478 <xflowf>
 8012498:	10000000 	.word	0x10000000

0801249c <__math_oflowf>:
 801249c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80124a4 <__math_oflowf+0x8>
 80124a0:	f7ff bfea 	b.w	8012478 <xflowf>
 80124a4:	70000000 	.word	0x70000000

080124a8 <fabsf>:
 80124a8:	ee10 3a10 	vmov	r3, s0
 80124ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124b0:	ee00 3a10 	vmov	s0, r3
 80124b4:	4770      	bx	lr

080124b6 <finitef>:
 80124b6:	b082      	sub	sp, #8
 80124b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80124bc:	9801      	ldr	r0, [sp, #4]
 80124be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80124c2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80124c6:	bfac      	ite	ge
 80124c8:	2000      	movge	r0, #0
 80124ca:	2001      	movlt	r0, #1
 80124cc:	b002      	add	sp, #8
 80124ce:	4770      	bx	lr

080124d0 <scalbnf>:
 80124d0:	ee10 3a10 	vmov	r3, s0
 80124d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80124d8:	d025      	beq.n	8012526 <scalbnf+0x56>
 80124da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80124de:	d302      	bcc.n	80124e6 <scalbnf+0x16>
 80124e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80124e4:	4770      	bx	lr
 80124e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80124ea:	d122      	bne.n	8012532 <scalbnf+0x62>
 80124ec:	4b2a      	ldr	r3, [pc, #168]	; (8012598 <scalbnf+0xc8>)
 80124ee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801259c <scalbnf+0xcc>
 80124f2:	4298      	cmp	r0, r3
 80124f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80124f8:	db16      	blt.n	8012528 <scalbnf+0x58>
 80124fa:	ee10 3a10 	vmov	r3, s0
 80124fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012502:	3a19      	subs	r2, #25
 8012504:	4402      	add	r2, r0
 8012506:	2afe      	cmp	r2, #254	; 0xfe
 8012508:	dd15      	ble.n	8012536 <scalbnf+0x66>
 801250a:	ee10 3a10 	vmov	r3, s0
 801250e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80125a0 <scalbnf+0xd0>
 8012512:	eddf 6a24 	vldr	s13, [pc, #144]	; 80125a4 <scalbnf+0xd4>
 8012516:	2b00      	cmp	r3, #0
 8012518:	eeb0 7a67 	vmov.f32	s14, s15
 801251c:	bfb8      	it	lt
 801251e:	eef0 7a66 	vmovlt.f32	s15, s13
 8012522:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012526:	4770      	bx	lr
 8012528:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80125a8 <scalbnf+0xd8>
 801252c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012530:	4770      	bx	lr
 8012532:	0dd2      	lsrs	r2, r2, #23
 8012534:	e7e6      	b.n	8012504 <scalbnf+0x34>
 8012536:	2a00      	cmp	r2, #0
 8012538:	dd06      	ble.n	8012548 <scalbnf+0x78>
 801253a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801253e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012542:	ee00 3a10 	vmov	s0, r3
 8012546:	4770      	bx	lr
 8012548:	f112 0f16 	cmn.w	r2, #22
 801254c:	da1a      	bge.n	8012584 <scalbnf+0xb4>
 801254e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012552:	4298      	cmp	r0, r3
 8012554:	ee10 3a10 	vmov	r3, s0
 8012558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801255c:	dd0a      	ble.n	8012574 <scalbnf+0xa4>
 801255e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80125a0 <scalbnf+0xd0>
 8012562:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80125a4 <scalbnf+0xd4>
 8012566:	eef0 7a40 	vmov.f32	s15, s0
 801256a:	2b00      	cmp	r3, #0
 801256c:	bf18      	it	ne
 801256e:	eeb0 0a47 	vmovne.f32	s0, s14
 8012572:	e7db      	b.n	801252c <scalbnf+0x5c>
 8012574:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80125a8 <scalbnf+0xd8>
 8012578:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80125ac <scalbnf+0xdc>
 801257c:	eef0 7a40 	vmov.f32	s15, s0
 8012580:	2b00      	cmp	r3, #0
 8012582:	e7f3      	b.n	801256c <scalbnf+0x9c>
 8012584:	3219      	adds	r2, #25
 8012586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801258a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801258e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80125b0 <scalbnf+0xe0>
 8012592:	ee07 3a10 	vmov	s14, r3
 8012596:	e7c4      	b.n	8012522 <scalbnf+0x52>
 8012598:	ffff3cb0 	.word	0xffff3cb0
 801259c:	4c000000 	.word	0x4c000000
 80125a0:	7149f2ca 	.word	0x7149f2ca
 80125a4:	f149f2ca 	.word	0xf149f2ca
 80125a8:	0da24260 	.word	0x0da24260
 80125ac:	8da24260 	.word	0x8da24260
 80125b0:	33000000 	.word	0x33000000

080125b4 <_close>:
 80125b4:	4b02      	ldr	r3, [pc, #8]	; (80125c0 <_close+0xc>)
 80125b6:	2258      	movs	r2, #88	; 0x58
 80125b8:	601a      	str	r2, [r3, #0]
 80125ba:	f04f 30ff 	mov.w	r0, #4294967295
 80125be:	4770      	bx	lr
 80125c0:	20004bd0 	.word	0x20004bd0

080125c4 <_fstat>:
 80125c4:	4b02      	ldr	r3, [pc, #8]	; (80125d0 <_fstat+0xc>)
 80125c6:	2258      	movs	r2, #88	; 0x58
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	f04f 30ff 	mov.w	r0, #4294967295
 80125ce:	4770      	bx	lr
 80125d0:	20004bd0 	.word	0x20004bd0

080125d4 <_getpid>:
 80125d4:	4b02      	ldr	r3, [pc, #8]	; (80125e0 <_getpid+0xc>)
 80125d6:	2258      	movs	r2, #88	; 0x58
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	f04f 30ff 	mov.w	r0, #4294967295
 80125de:	4770      	bx	lr
 80125e0:	20004bd0 	.word	0x20004bd0

080125e4 <_isatty>:
 80125e4:	4b02      	ldr	r3, [pc, #8]	; (80125f0 <_isatty+0xc>)
 80125e6:	2258      	movs	r2, #88	; 0x58
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	2000      	movs	r0, #0
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	20004bd0 	.word	0x20004bd0

080125f4 <_kill>:
 80125f4:	4b02      	ldr	r3, [pc, #8]	; (8012600 <_kill+0xc>)
 80125f6:	2258      	movs	r2, #88	; 0x58
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	f04f 30ff 	mov.w	r0, #4294967295
 80125fe:	4770      	bx	lr
 8012600:	20004bd0 	.word	0x20004bd0

08012604 <_lseek>:
 8012604:	4b02      	ldr	r3, [pc, #8]	; (8012610 <_lseek+0xc>)
 8012606:	2258      	movs	r2, #88	; 0x58
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	f04f 30ff 	mov.w	r0, #4294967295
 801260e:	4770      	bx	lr
 8012610:	20004bd0 	.word	0x20004bd0

08012614 <_read>:
 8012614:	4b02      	ldr	r3, [pc, #8]	; (8012620 <_read+0xc>)
 8012616:	2258      	movs	r2, #88	; 0x58
 8012618:	601a      	str	r2, [r3, #0]
 801261a:	f04f 30ff 	mov.w	r0, #4294967295
 801261e:	4770      	bx	lr
 8012620:	20004bd0 	.word	0x20004bd0

08012624 <_write>:
 8012624:	4b02      	ldr	r3, [pc, #8]	; (8012630 <_write+0xc>)
 8012626:	2258      	movs	r2, #88	; 0x58
 8012628:	601a      	str	r2, [r3, #0]
 801262a:	f04f 30ff 	mov.w	r0, #4294967295
 801262e:	4770      	bx	lr
 8012630:	20004bd0 	.word	0x20004bd0

08012634 <_exit>:
 8012634:	e7fe      	b.n	8012634 <_exit>
	...

08012638 <_init>:
 8012638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263a:	bf00      	nop
 801263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801263e:	bc08      	pop	{r3}
 8012640:	469e      	mov	lr, r3
 8012642:	4770      	bx	lr

08012644 <_fini>:
 8012644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012646:	bf00      	nop
 8012648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801264a:	bc08      	pop	{r3}
 801264c:	469e      	mov	lr, r3
 801264e:	4770      	bx	lr
