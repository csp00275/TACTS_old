
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012868  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00052420  08012a40  08012a40  00022a40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08064e60  08064e60  0008107c  2**0
                  CONTENTS
  4 .ARM          00000008  08064e60  08064e60  00074e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08064e68  08064e68  0008107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08064e68  08064e68  00074e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08064e6c  08064e6c  00074e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000107c  20000000  08064e70  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a63c  20001080  08065eec  00081080  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000b6bc  08065eec  0008b6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0008107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f204  00000000  00000000  000810ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce4  00000000  00000000  000a02b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000a3f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  000a5270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac0d  00000000  00000000  000a6388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b493  00000000  00000000  000d0f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb727  00000000  00000000  000ec428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e7b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000620c  00000000  00000000  001e7ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001eddac  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ede78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001080 	.word	0x20001080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012a20 	.word	0x08012a20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001084 	.word	0x20001084
 800020c:	08012a20 	.word	0x08012a20

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <aiInit+0x64>)
 8000fb4:	603b      	str	r3, [r7, #0]
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <aiInit+0x68>)
 8000fbe:	f00b f849 	bl	800c054 <ai_twoline_create_and_init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	607b      	str	r3, [r7, #4]
    if (err.type != AI_ERROR_NONE) {
 8000fc6:	793b      	ldrb	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00a      	beq.n	8000fe2 <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8000fcc:	4912      	ldr	r1, [pc, #72]	; (8001018 <aiInit+0x6c>)
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <aiInit+0x70>)
 8000fd0:	f00e fc26 	bl	800f820 <siprintf>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	4910      	ldr	r1, [pc, #64]	; (800101c <aiInit+0x70>)
 8000fdc:	4810      	ldr	r0, [pc, #64]	; (8001020 <aiInit+0x74>)
 8000fde:	f004 fd61 	bl	8005aa4 <HAL_UART_Transmit>
    }

#if NUM_SENSOR == 24
    ai_input = ai_twoline_inputs_get(allLine, NULL);
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <aiInit+0x68>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00b f8a7 	bl	800c13c <ai_twoline_inputs_get>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <aiInit+0x78>)
 8000ff2:	6013      	str	r3, [r2, #0]
    ai_output = ai_twoline_outputs_get(allLine, NULL);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <aiInit+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00b f8b8 	bl	800c170 <ai_twoline_outputs_get>
 8001000:	4603      	mov	r3, r0
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <aiInit+0x7c>)
 8001004:	6013      	str	r3, [r2, #0]

#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200010a0 	.word	0x200010a0
 8001014:	2000109c 	.word	0x2000109c
 8001018:	08012a40 	.word	0x08012a40
 800101c:	20008f9c 	.word	0x20008f9c
 8001020:	20008f14 	.word	0x20008f14
 8001024:	20001b10 	.word	0x20001b10
 8001028:	20001b14 	.word	0x20001b14

0800102c <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <aiRun+0x5c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <aiRun+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	605a      	str	r2, [r3, #4]

#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <aiRun+0x64>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <aiRun+0x5c>)
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	4a0f      	ldr	r2, [pc, #60]	; (800108c <aiRun+0x60>)
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f00b f8e2 	bl	800c21c <ai_twoline_run>
 8001058:	60f8      	str	r0, [r7, #12]
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d00d      	beq.n	800107c <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <aiRun+0x68>)
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <aiRun+0x6c>)
 8001064:	f00e fbdc 	bl	800f820 <siprintf>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	490a      	ldr	r1, [pc, #40]	; (8001098 <aiRun+0x6c>)
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <aiRun+0x70>)
 8001072:	f004 fd17 	bl	8005aa4 <HAL_UART_Transmit>
        return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e000      	b.n	800107e <aiRun+0x52>
    };
    return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20001b10 	.word	0x20001b10
 800108c:	20001b14 	.word	0x20001b14
 8001090:	2000109c 	.word	0x2000109c
 8001094:	08012a50 	.word	0x08012a50
 8001098:	20008f9c 	.word	0x20008f9c
 800109c:	20008f14 	.word	0x20008f14

080010a0 <CalculateStats>:
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

#define throwSomenumber 20

void CalculateStats(int sensorIndex) {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    float sum = 0;
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 80010ba:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <CalculateStats+0x140>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e014      	b.n	80010f4 <CalculateStats+0x54>
 80010ca:	4946      	ldr	r1, [pc, #280]	; (80011e4 <CalculateStats+0x144>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010d2:	fb03 f202 	mul.w	r2, r3, r2
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	edc7 7a07 	vstr	s15, [r7, #28]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbe6      	blt.n	80010ca <CalculateStats+0x2a>
    mean = sum / count;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	edd7 6a07 	vldr	s13, [r7, #28]
 800110a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110e:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 8001112:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <CalculateStats+0x148>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	e031      	b.n	8001188 <CalculateStats+0xe8>
 8001124:	492f      	ldr	r1, [pc, #188]	; (80011e4 <CalculateStats+0x144>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800112c:	fb03 f202 	mul.w	r2, r3, r2
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	ed93 7a00 	vldr	s14, [r3]
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	ee17 0a90 	vmov	r0, s15
 8001148:	f7ff fa2e 	bl	80005a8 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80011d8 <CalculateStats+0x138>
 8001154:	ec43 2b10 	vmov	d0, r2, r3
 8001158:	f010 fcda 	bl	8011b10 <pow>
 800115c:	ec55 4b10 	vmov	r4, r5, d0
 8001160:	69b8      	ldr	r0, [r7, #24]
 8001162:	f7ff fa21 	bl	80005a8 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4620      	mov	r0, r4
 800116c:	4629      	mov	r1, r5
 800116e:	f7ff f8bd 	bl	80002ec <__adddf3>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fd45 	bl	8000c08 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	3301      	adds	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbc9      	blt.n	8001124 <CalculateStats+0x84>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119a:	ed97 7a06 	vldr	s14, [r7, #24]
 800119e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011a2:	ee16 0a90 	vmov	r0, s13
 80011a6:	f7ff f9ff 	bl	80005a8 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b10 	vmov	d0, r2, r3
 80011b2:	f010 fd1d 	bl	8011bf0 <sqrt>
 80011b6:	ec53 2b10 	vmov	r2, r3, d0
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fd23 	bl	8000c08 <__aeabi_d2f>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4909      	ldr	r1, [pc, #36]	; (80011ec <CalculateStats+0x14c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40000000 	.word	0x40000000
 80011e0:	20008c58 	.word	0x20008c58
 80011e4:	20001b18 	.word	0x20001b18
 80011e8:	20008b98 	.word	0x20008b98
 80011ec:	20008bf8 	.word	0x20008bf8

080011f0 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b0a6      	sub	sp, #152	; 0x98
 80011f4:	af04      	add	r7, sp, #16
    char msg[128];
    for (int i = 0; i < NUM_SENSOR; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011fc:	e033      	b.n	8001266 <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80011fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001202:	f7ff ff4d 	bl	80010a0 <CalculateStats>
        sprintf(msg, "Sensor %d - Avg: %.2f, StdDev: %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]);
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <TransmitStats+0x88>)
 8001208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9c8 	bl	80005a8 <__aeabi_f2d>
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <TransmitStats+0x8c>)
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f9bd 	bl	80005a8 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	1d38      	adds	r0, r7, #4
 8001234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001238:	e9cd 4500 	strd	r4, r5, [sp]
 800123c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001240:	490f      	ldr	r1, [pc, #60]	; (8001280 <TransmitStats+0x90>)
 8001242:	f00e faed 	bl	800f820 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffeb 	bl	8000224 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	1d39      	adds	r1, r7, #4
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <TransmitStats+0x94>)
 8001258:	f004 fc24 	bl	8005aa4 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 800125c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001260:	3301      	adds	r3, #1
 8001262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800126a:	2b17      	cmp	r3, #23
 800126c:	ddc7      	ble.n	80011fe <TransmitStats+0xe>
    }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3788      	adds	r7, #136	; 0x88
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	20008b98 	.word	0x20008b98
 800127c:	20008bf8 	.word	0x20008bf8
 8001280:	08012a60 	.word	0x08012a60
 8001284:	20008f14 	.word	0x20008f14

08001288 <ResetSensorData>:

void ResetSensorData() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	e014      	b.n	80012be <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <ResetSensorData+0x48>)
 80012a0:	4413      	add	r3, r2
 80012a2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00d fd57 	bl	800ed5c <memset>
        readingCount[i] = 0;
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <ResetSensorData+0x4c>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2100      	movs	r1, #0
 80012b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3301      	adds	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b17      	cmp	r3, #23
 80012c2:	dde7      	ble.n	8001294 <ResetSensorData+0xc>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20001b18 	.word	0x20001b18
 80012d4:	20008c58 	.word	0x20008c58

080012d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_I2C1_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <MX_I2C1_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_I2C1_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <MX_I2C1_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_I2C1_Init+0x74>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_I2C1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_I2C1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_I2C1_Init+0x74>)
 8001314:	f001 ff7c 	bl	8003210 <HAL_I2C_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800131e:	f000 ff59 	bl	80021d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001322:	2100      	movs	r1, #0
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <MX_I2C1_Init+0x74>)
 8001326:	f003 f9cd 	bl	80046c4 <HAL_I2CEx_ConfigAnalogFilter>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001330:	f000 ff50 	bl	80021d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_I2C1_Init+0x74>)
 8001338:	f003 fa0f 	bl	800475a <HAL_I2CEx_ConfigDigitalFilter>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 ff47 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20008cb8 	.word	0x20008cb8
 8001350:	40005400 	.word	0x40005400
 8001354:	6000030d 	.word	0x6000030d

08001358 <Kalman_Init>:
KalmanFilter filters[NUM_SENSOR];
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6178      	str	r0, [r7, #20]
 8001360:	ed87 0a04 	vstr	s0, [r7, #16]
 8001364:	edc7 0a03 	vstr	s1, [r7, #12]
 8001368:	ed87 1a02 	vstr	s2, [r7, #8]
 800136c:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	605a      	str	r2, [r3, #4]
    kf->P = P;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]
}
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	ed93 7a02 	vldr	s14, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 6a04 	vldr	s13, [r3, #16]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013e8:	ed97 6a00 	vldr	s12, [r7]
 80013ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edd3 7a04 	vldr	s15, [r3, #16]
 8001404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001408:	ee37 7a67 	vsub.f32	s14, s14, s15
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	ee07 3a90 	vmov	s15, r3
}
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001438:	f3bf 8f4f 	dsb	sy
}
 800143c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800143e:	f3bf 8f6f 	isb	sy
}
 8001442:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <SCB_EnableICache+0x48>)
 8001446:	2200      	movs	r2, #0
 8001448:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800144c:	f3bf 8f4f 	dsb	sy
}
 8001450:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001452:	f3bf 8f6f 	isb	sy
}
 8001456:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <SCB_EnableICache+0x48>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <SCB_EnableICache+0x48>)
 800145e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001462:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146a:	f3bf 8f6f 	isb	sy
}
 800146e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <SCB_EnableDCache+0x84>)
 8001488:	2200      	movs	r2, #0
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800148e:	f3bf 8f4f 	dsb	sy
}
 8001492:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <SCB_EnableDCache+0x84>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	0b5b      	lsrs	r3, r3, #13
 80014a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014a4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014b8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014be:	4911      	ldr	r1, [pc, #68]	; (8001504 <SCB_EnableDCache+0x84>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	60ba      	str	r2, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1ef      	bne.n	80014b0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e5a      	subs	r2, r3, #1
 80014d4:	60fa      	str	r2, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e5      	bne.n	80014a6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014da:	f3bf 8f4f 	dsb	sy
}
 80014de:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SCB_EnableDCache+0x84>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SCB_EnableDCache+0x84>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ec:	f3bf 8f4f 	dsb	sy
}
 80014f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f2:	f3bf 8f6f 	isb	sy
}
 80014f6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <ProcessCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ProcessCommand(uint8_t *command)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 8001510:	4929      	ldr	r1, [pc, #164]	; (80015b8 <ProcessCommand+0xb0>)
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe fe7c 	bl	8000210 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <ProcessCommand+0x2e>
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <ProcessCommand+0xb4>)
 8001520:	4827      	ldr	r0, [pc, #156]	; (80015c0 <ProcessCommand+0xb8>)
 8001522:	f00e f97d 	bl	800f820 <siprintf>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	2364      	movs	r3, #100	; 0x64
 800152c:	4924      	ldr	r1, [pc, #144]	; (80015c0 <ProcessCommand+0xb8>)
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <ProcessCommand+0xbc>)
 8001530:	f004 fab8 	bl	8005aa4 <HAL_UART_Transmit>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
    else if (strcmp((char*)command, "infer") == 0) {InferenceCommand();}
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
}
 8001534:	e03c      	b.n	80015b0 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "sensor") == 0) {SensorCommand();}
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <ProcessCommand+0xc0>)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7fe fe69 	bl	8000210 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <ProcessCommand+0x42>
 8001544:	f000 f84c 	bl	80015e0 <SensorCommand>
}
 8001548:	e032      	b.n	80015b0 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
 800154a:	4920      	ldr	r1, [pc, #128]	; (80015cc <ProcessCommand+0xc4>)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7fe fe5f 	bl	8000210 <strcmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <ProcessCommand+0x56>
 8001558:	f000 f94a 	bl	80017f0 <SetSensorCommand>
}
 800155c:	e028      	b.n	80015b0 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
 800155e:	491c      	ldr	r1, [pc, #112]	; (80015d0 <ProcessCommand+0xc8>)
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7fe fe55 	bl	8000210 <strcmp>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <ProcessCommand+0x6a>
 800156c:	f000 fba6 	bl	8001cbc <CalibrationCommand>
}
 8001570:	e01e      	b.n	80015b0 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 8001572:	4918      	ldr	r1, [pc, #96]	; (80015d4 <ProcessCommand+0xcc>)
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7fe fe4b 	bl	8000210 <strcmp>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <ProcessCommand+0x7e>
 8001580:	f000 faa8 	bl	8001ad4 <AvgStdCommand>
}
 8001584:	e014      	b.n	80015b0 <ProcessCommand+0xa8>
    else if (strcmp((char*)command, "infer") == 0) {InferenceCommand();}
 8001586:	4914      	ldr	r1, [pc, #80]	; (80015d8 <ProcessCommand+0xd0>)
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7fe fe41 	bl	8000210 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <ProcessCommand+0x92>
 8001594:	f000 fb9c 	bl	8001cd0 <InferenceCommand>
}
 8001598:	e00a      	b.n	80015b0 <ProcessCommand+0xa8>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 800159a:	4910      	ldr	r1, [pc, #64]	; (80015dc <ProcessCommand+0xd4>)
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <ProcessCommand+0xb8>)
 800159e:	f00e f93f 	bl	800f820 <siprintf>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	2364      	movs	r3, #100	; 0x64
 80015a8:	4905      	ldr	r1, [pc, #20]	; (80015c0 <ProcessCommand+0xb8>)
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <ProcessCommand+0xbc>)
 80015ac:	f004 fa7a 	bl	8005aa4 <HAL_UART_Transmit>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08012a88 	.word	0x08012a88
 80015bc:	08012a90 	.word	0x08012a90
 80015c0:	20008f9c 	.word	0x20008f9c
 80015c4:	20008f14 	.word	0x20008f14
 80015c8:	08012a98 	.word	0x08012a98
 80015cc:	08012aa0 	.word	0x08012aa0
 80015d0:	08012aac 	.word	0x08012aac
 80015d4:	08012ab4 	.word	0x08012ab4
 80015d8:	08012ab8 	.word	0x08012ab8
 80015dc:	08012ac0 	.word	0x08012ac0

080015e0 <SensorCommand>:

void SensorCommand()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0

	ResetAllDevices();
 80015e6:	f001 f8a1 	bl	800272c <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80015ea:	4973      	ldr	r1, [pc, #460]	; (80017b8 <SensorCommand+0x1d8>)
 80015ec:	4873      	ldr	r0, [pc, #460]	; (80017bc <SensorCommand+0x1dc>)
 80015ee:	f00e f917 	bl	800f820 <siprintf>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	4970      	ldr	r1, [pc, #448]	; (80017bc <SensorCommand+0x1dc>)
 80015fa:	4871      	ldr	r0, [pc, #452]	; (80017c0 <SensorCommand+0x1e0>)
 80015fc:	f004 fa52 	bl	8005aa4 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for(int count =0; count < NUM_READINGS; count++){
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e0ca      	b.n	800179c <SensorCommand+0x1bc>
    	uint8_t sensorCount = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 800160a:	f001 f989 	bl	8002920 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e09d      	b.n	8001752 <SensorCommand+0x172>
			uint8_t q = i / 12;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <SensorCommand+0x1e4>)
 800161a:	fb82 1203 	smull	r1, r2, r2, r3
 800161e:	1052      	asrs	r2, r2, #1
 8001620:	17db      	asrs	r3, r3, #31
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	71fb      	strb	r3, [r7, #7]
			uint8_t r = i % 12;
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <SensorCommand+0x1e4>)
 800162a:	fb83 1302 	smull	r1, r3, r3, r2
 800162e:	1059      	asrs	r1, r3, #1
 8001630:	17d3      	asrs	r3, r2, #31
 8001632:	1ac9      	subs	r1, r1, r3
 8001634:	460b      	mov	r3, r1
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	440b      	add	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	1ad1      	subs	r1, r2, r3
 800163e:	460b      	mov	r3, r1
 8001640:	71bb      	strb	r3, [r7, #6]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	79ba      	ldrb	r2, [r7, #6]
 800164a:	2a07      	cmp	r2, #7
 800164c:	bf8c      	ite	hi
 800164e:	2201      	movhi	r2, #1
 8001650:	2200      	movls	r2, #0
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	4413      	add	r3, r2
 8001656:	717b      	strb	r3, [r7, #5]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	2b07      	cmp	r3, #7
 800165c:	d903      	bls.n	8001666 <SensorCommand+0x86>
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	3b08      	subs	r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	e000      	b.n	8001668 <SensorCommand+0x88>
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	713b      	strb	r3, [r7, #4]
			ResetDevicesExcept(active_device);
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	4618      	mov	r0, r3
 800166e:	f001 f889 	bl	8002784 <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 8001672:	793a      	ldrb	r2, [r7, #4]
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f001 f8b5 	bl	80027e8 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	4a4f      	ldr	r2, [pc, #316]	; (80017c8 <SensorCommand+0x1e8>)
 800168a:	4413      	add	r3, r2
 800168c:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <SensorCommand+0x1ec>)
 800168e:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <SensorCommand+0x1ec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	494e      	ldr	r1, [pc, #312]	; (80017d0 <SensorCommand+0x1f0>)
 8001696:	4618      	mov	r0, r3
 8001698:	f006 ffa5 	bl	80085e6 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 800169c:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <SensorCommand+0x1f0>)
 800169e:	7e1b      	ldrb	r3, [r3, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d144      	bne.n	800172e <SensorCommand+0x14e>
			  if (RangingData.RangeMilliMeter < 80) {
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <SensorCommand+0x1f0>)
 80016a6:	891b      	ldrh	r3, [r3, #8]
 80016a8:	2b4f      	cmp	r3, #79	; 0x4f
 80016aa:	d84f      	bhi.n	800174c <SensorCommand+0x16c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <SensorCommand+0x1f4>)
 80016b8:	4413      	add	r3, r2
 80016ba:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <SensorCommand+0x1f0>)
 80016bc:	8912      	ldrh	r2, [r2, #8]
 80016be:	ee07 2a90 	vmov	s15, r2
 80016c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe62 	bl	8001394 <Kalman_Estimate>
 80016d0:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f7fe ff67 	bl	80005a8 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	493e      	ldr	r1, [pc, #248]	; (80017d8 <SensorCommand+0x1f8>)
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <SensorCommand+0x1dc>)
 80016e2:	f00e f89d 	bl	800f820 <siprintf>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ee:	4933      	ldr	r1, [pc, #204]	; (80017bc <SensorCommand+0x1dc>)
 80016f0:	4833      	ldr	r0, [pc, #204]	; (80017c0 <SensorCommand+0x1e0>)
 80016f2:	f004 f9d7 	bl	8005aa4 <HAL_UART_Transmit>
				  sensorValues[i][readingCount[i]] = filteredValue;
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <SensorCommand+0x1fc>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	4938      	ldr	r1, [pc, #224]	; (80017e0 <SensorCommand+0x200>)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001706:	fb00 f202 	mul.w	r2, r0, r2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	601a      	str	r2, [r3, #0]
				  readingCount[i]++;
 8001714:	4a31      	ldr	r2, [pc, #196]	; (80017dc <SensorCommand+0x1fc>)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	492f      	ldr	r1, [pc, #188]	; (80017dc <SensorCommand+0x1fc>)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001726:	7efb      	ldrb	r3, [r7, #27]
 8001728:	3301      	adds	r3, #1
 800172a:	76fb      	strb	r3, [r7, #27]
 800172c:	e00e      	b.n	800174c <SensorCommand+0x16c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <SensorCommand+0x1f0>)
 8001730:	7e1b      	ldrb	r3, [r3, #24]
 8001732:	461a      	mov	r2, r3
 8001734:	492b      	ldr	r1, [pc, #172]	; (80017e4 <SensorCommand+0x204>)
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <SensorCommand+0x1dc>)
 8001738:	f00e f872 	bl	800f820 <siprintf>
 800173c:	4603      	mov	r3, r0
 800173e:	b29a      	uxth	r2, r3
 8001740:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001744:	491d      	ldr	r1, [pc, #116]	; (80017bc <SensorCommand+0x1dc>)
 8001746:	481e      	ldr	r0, [pc, #120]	; (80017c0 <SensorCommand+0x1e0>)
 8001748:	f004 f9ac 	bl	8005aa4 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2b17      	cmp	r3, #23
 8001756:	f77f af5e 	ble.w	8001616 <SensorCommand+0x36>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		endTime = HAL_GetTick();
 800175a:	f001 f8e1 	bl	8002920 <HAL_GetTick>
 800175e:	60f8      	str	r0, [r7, #12]
		diffTime = endTime - startTime;
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", diffTime), 100);
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	491f      	ldr	r1, [pc, #124]	; (80017e8 <SensorCommand+0x208>)
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <SensorCommand+0x1dc>)
 800176e:	f00e f857 	bl	800f820 <siprintf>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	4910      	ldr	r1, [pc, #64]	; (80017bc <SensorCommand+0x1dc>)
 800177a:	4811      	ldr	r0, [pc, #68]	; (80017c0 <SensorCommand+0x1e0>)
 800177c:	f004 f992 	bl	8005aa4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001780:	491a      	ldr	r1, [pc, #104]	; (80017ec <SensorCommand+0x20c>)
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <SensorCommand+0x1dc>)
 8001784:	f00e f84c 	bl	800f820 <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	490b      	ldr	r1, [pc, #44]	; (80017bc <SensorCommand+0x1dc>)
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <SensorCommand+0x1e0>)
 8001792:	f004 f987 	bl	8005aa4 <HAL_UART_Transmit>
    for(int count =0; count < NUM_READINGS; count++){
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017a2:	f6ff af30 	blt.w	8001606 <SensorCommand+0x26>

    }
    TransmitStats();
 80017a6:	f7ff fd23 	bl	80011f0 <TransmitStats>
    ResetSensorData();
 80017aa:	f7ff fd6d 	bl	8001288 <ResetSensorData>
}
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08012ae0 	.word	0x08012ae0
 80017bc:	20008f9c 	.word	0x20008f9c
 80017c0:	20008f14 	.word	0x20008f14
 80017c4:	2aaaaaab 	.word	0x2aaaaaab
 80017c8:	2000903c 	.word	0x2000903c
 80017cc:	2000b5bc 	.word	0x2000b5bc
 80017d0:	20009020 	.word	0x20009020
 80017d4:	20008d0c 	.word	0x20008d0c
 80017d8:	08012af0 	.word	0x08012af0
 80017dc:	20008c58 	.word	0x20008c58
 80017e0:	20001b18 	.word	0x20001b18
 80017e4:	08012af8 	.word	0x08012af8
 80017e8:	08012afc 	.word	0x08012afc
 80017ec:	08012b04 	.word	0x08012b04

080017f0 <SetSensorCommand>:

void SetSensorCommand(){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 80017f6:	49a2      	ldr	r1, [pc, #648]	; (8001a80 <SetSensorCommand+0x290>)
 80017f8:	48a2      	ldr	r0, [pc, #648]	; (8001a84 <SetSensorCommand+0x294>)
 80017fa:	f00e f811 	bl	800f820 <siprintf>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	499f      	ldr	r1, [pc, #636]	; (8001a84 <SetSensorCommand+0x294>)
 8001806:	48a0      	ldr	r0, [pc, #640]	; (8001a88 <SetSensorCommand+0x298>)
 8001808:	f004 f94c 	bl	8005aa4 <HAL_UART_Transmit>

	ResetAllDevices();
 800180c:	f000 ff8e 	bl	800272c <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	e12b      	b.n	8001a6e <SetSensorCommand+0x27e>
  	    uint8_t q = i / 12;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a9c      	ldr	r2, [pc, #624]	; (8001a8c <SetSensorCommand+0x29c>)
 800181a:	fb82 1203 	smull	r1, r2, r2, r3
 800181e:	1052      	asrs	r2, r2, #1
 8001820:	17db      	asrs	r3, r3, #31
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4b98      	ldr	r3, [pc, #608]	; (8001a8c <SetSensorCommand+0x29c>)
 800182a:	fb83 1302 	smull	r1, r3, r3, r2
 800182e:	1059      	asrs	r1, r3, #1
 8001830:	17d3      	asrs	r3, r2, #31
 8001832:	1ac9      	subs	r1, r1, r3
 8001834:	460b      	mov	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	1ad1      	subs	r1, r2, r3
 800183e:	460b      	mov	r3, r1
 8001840:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	78ba      	ldrb	r2, [r7, #2]
 800184a:	2a07      	cmp	r2, #7
 800184c:	bf8c      	ite	hi
 800184e:	2201      	movhi	r2, #1
 8001850:	2200      	movls	r2, #0
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	4413      	add	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	2b07      	cmp	r3, #7
 800185c:	d903      	bls.n	8001866 <SetSensorCommand+0x76>
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	3b08      	subs	r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	e000      	b.n	8001868 <SetSensorCommand+0x78>
 8001866:	78bb      	ldrb	r3, [r7, #2]
 8001868:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 800186a:	787b      	ldrb	r3, [r7, #1]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 ff89 	bl	8002784 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8001872:	783a      	ldrb	r2, [r7, #0]
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f000 ffb5 	bl	80027e8 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	4a81      	ldr	r2, [pc, #516]	; (8001a90 <SetSensorCommand+0x2a0>)
 800188a:	4413      	add	r3, r2
 800188c:	4a81      	ldr	r2, [pc, #516]	; (8001a94 <SetSensorCommand+0x2a4>)
 800188e:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001890:	4b80      	ldr	r3, [pc, #512]	; (8001a94 <SetSensorCommand+0x2a4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a80      	ldr	r2, [pc, #512]	; (8001a98 <SetSensorCommand+0x2a8>)
 8001896:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 800189a:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <SetSensorCommand+0x2a4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2252      	movs	r2, #82	; 0x52
 80018a0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <SetSensorCommand+0x2a4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 fcd5 	bl	8007258 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 80018ae:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <SetSensorCommand+0x2a4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 f9ea 	bl	8006c8c <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 80018b8:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <SetSensorCommand+0x2a4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 fb49 	bl	8006f54 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80018c2:	4b74      	ldr	r3, [pc, #464]	; (8001a94 <SetSensorCommand+0x2a4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f005 fd63 	bl	8007394 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80018ce:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <SetSensorCommand+0x2a4>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <SetSensorCommand+0x2ac>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018da:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <SetSensorCommand+0x2b0>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f006 fe68 	bl	80085b8 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <SetSensorCommand+0x2a4>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4a6d      	ldr	r2, [pc, #436]	; (8001aa4 <SetSensorCommand+0x2b4>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	7819      	ldrb	r1, [r3, #0]
 80018f4:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <SetSensorCommand+0x2b8>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	f005 ffc5 	bl	800788c <VL53L0X_SetRefCalibration>


  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001902:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <SetSensorCommand+0x2a4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f005 ffd6 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001910:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <SetSensorCommand+0x2a4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	2101      	movs	r1, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f005 ffcf 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <SetSensorCommand+0x2a4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f641 1299 	movw	r2, #6553	; 0x1999
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f006 f877 	bl	8007a1c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800192e:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <SetSensorCommand+0x2a4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f006 f86f 	bl	8007a1c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800193e:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <SetSensorCommand+0x2a4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fd82 	bl	8007450 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800194c:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <SetSensorCommand+0x2a4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2212      	movs	r2, #18
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fda1 	bl	800749c <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800195a:	4b4e      	ldr	r3, [pc, #312]	; (8001a94 <SetSensorCommand+0x2a4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	220e      	movs	r2, #14
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f005 fd9a 	bl	800749c <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기�????
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <SetSensorCommand+0x2bc>)
 8001974:	4413      	add	r3, r2
 8001976:	4a4e      	ldr	r2, [pc, #312]	; (8001ab0 <SetSensorCommand+0x2c0>)
 8001978:	edd2 7a00 	vldr	s15, [r2]
 800197c:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <SetSensorCommand+0x2c4>)
 800197e:	ed92 7a00 	vldr	s14, [r2]
 8001982:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <SetSensorCommand+0x2c8>)
 8001984:	edd2 6a00 	vldr	s13, [r2]
 8001988:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8001abc <SetSensorCommand+0x2cc>
 800198c:	eeb0 1a66 	vmov.f32	s2, s13
 8001990:	eef0 0a47 	vmov.f32	s1, s14
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fcdd 	bl	8001358 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4947      	ldr	r1, [pc, #284]	; (8001ac0 <SetSensorCommand+0x2d0>)
 80019a2:	4838      	ldr	r0, [pc, #224]	; (8001a84 <SetSensorCommand+0x294>)
 80019a4:	f00d ff3c 	bl	800f820 <siprintf>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	2364      	movs	r3, #100	; 0x64
 80019ae:	4935      	ldr	r1, [pc, #212]	; (8001a84 <SetSensorCommand+0x294>)
 80019b0:	4835      	ldr	r0, [pc, #212]	; (8001a88 <SetSensorCommand+0x298>)
 80019b2:	f004 f877 	bl	8005aa4 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 80019b6:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <SetSensorCommand+0x2ac>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	461a      	mov	r2, r3
 80019c0:	4940      	ldr	r1, [pc, #256]	; (8001ac4 <SetSensorCommand+0x2d4>)
 80019c2:	4830      	ldr	r0, [pc, #192]	; (8001a84 <SetSensorCommand+0x294>)
 80019c4:	f00d ff2c 	bl	800f820 <siprintf>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	2364      	movs	r3, #100	; 0x64
 80019ce:	492d      	ldr	r1, [pc, #180]	; (8001a84 <SetSensorCommand+0x294>)
 80019d0:	482d      	ldr	r0, [pc, #180]	; (8001a88 <SetSensorCommand+0x298>)
 80019d2:	f004 f867 	bl	8005aa4 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80019d6:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <SetSensorCommand+0x2b0>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4939      	ldr	r1, [pc, #228]	; (8001ac8 <SetSensorCommand+0x2d8>)
 80019e2:	4828      	ldr	r0, [pc, #160]	; (8001a84 <SetSensorCommand+0x294>)
 80019e4:	f00d ff1c 	bl	800f820 <siprintf>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	2364      	movs	r3, #100	; 0x64
 80019ee:	4925      	ldr	r1, [pc, #148]	; (8001a84 <SetSensorCommand+0x294>)
 80019f0:	4825      	ldr	r0, [pc, #148]	; (8001a88 <SetSensorCommand+0x298>)
 80019f2:	f004 f857 	bl	8005aa4 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80019f6:	4a2b      	ldr	r2, [pc, #172]	; (8001aa4 <SetSensorCommand+0x2b4>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4931      	ldr	r1, [pc, #196]	; (8001ac8 <SetSensorCommand+0x2d8>)
 8001a02:	4820      	ldr	r0, [pc, #128]	; (8001a84 <SetSensorCommand+0x294>)
 8001a04:	f00d ff0c 	bl	800f820 <siprintf>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	491d      	ldr	r1, [pc, #116]	; (8001a84 <SetSensorCommand+0x294>)
 8001a10:	481d      	ldr	r0, [pc, #116]	; (8001a88 <SetSensorCommand+0x298>)
 8001a12:	f004 f847 	bl	8005aa4 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 8001a16:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <SetSensorCommand+0x2b8>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	492a      	ldr	r1, [pc, #168]	; (8001acc <SetSensorCommand+0x2dc>)
 8001a22:	4818      	ldr	r0, [pc, #96]	; (8001a84 <SetSensorCommand+0x294>)
 8001a24:	f00d fefc 	bl	800f820 <siprintf>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	4915      	ldr	r1, [pc, #84]	; (8001a84 <SetSensorCommand+0x294>)
 8001a30:	4815      	ldr	r0, [pc, #84]	; (8001a88 <SetSensorCommand+0x298>)
 8001a32:	f004 f837 	bl	8005aa4 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <SetSensorCommand+0x29c>)
 8001a3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001a3e:	105a      	asrs	r2, r3, #1
 8001a40:	17cb      	asrs	r3, r1, #31
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	1aca      	subs	r2, r1, r3
 8001a4e:	2a0b      	cmp	r2, #11
 8001a50:	d10a      	bne.n	8001a68 <SetSensorCommand+0x278>
 8001a52:	491f      	ldr	r1, [pc, #124]	; (8001ad0 <SetSensorCommand+0x2e0>)
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <SetSensorCommand+0x294>)
 8001a56:	f00d fee3 	bl	800f820 <siprintf>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	2364      	movs	r3, #100	; 0x64
 8001a60:	4908      	ldr	r1, [pc, #32]	; (8001a84 <SetSensorCommand+0x294>)
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <SetSensorCommand+0x298>)
 8001a64:	f004 f81e 	bl	8005aa4 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b17      	cmp	r3, #23
 8001a72:	f77f aed0 	ble.w	8001816 <SetSensorCommand+0x26>

  	}
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08012b08 	.word	0x08012b08
 8001a84:	20008f9c 	.word	0x20008f9c
 8001a88:	20008f14 	.word	0x20008f14
 8001a8c:	2aaaaaab 	.word	0x2aaaaaab
 8001a90:	2000903c 	.word	0x2000903c
 8001a94:	2000b5bc 	.word	0x2000b5bc
 8001a98:	20008cb8 	.word	0x20008cb8
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000070 	.word	0x20000070
 8001aa4:	20000088 	.word	0x20000088
 8001aa8:	200000a0 	.word	0x200000a0
 8001aac:	20008d0c 	.word	0x20008d0c
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	00000000 	.word	0x00000000
 8001ac0:	08012b18 	.word	0x08012b18
 8001ac4:	08012b20 	.word	0x08012b20
 8001ac8:	08012b28 	.word	0x08012b28
 8001acc:	08012b30 	.word	0x08012b30
 8001ad0:	08012b38 	.word	0x08012b38

08001ad4 <AvgStdCommand>:

void AvgStdCommand(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001ada:	496f      	ldr	r1, [pc, #444]	; (8001c98 <AvgStdCommand+0x1c4>)
 8001adc:	486f      	ldr	r0, [pc, #444]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001ade:	f00d fe9f 	bl	800f820 <siprintf>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	496c      	ldr	r1, [pc, #432]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001aec:	486c      	ldr	r0, [pc, #432]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001aee:	f003 ffd9 	bl	8005aa4 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	e02e      	b.n	8001b56 <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001af8:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <AvgStdCommand+0x1d0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd50 	bl	80005a8 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4966      	ldr	r1, [pc, #408]	; (8001ca8 <AvgStdCommand+0x1d4>)
 8001b0e:	4863      	ldr	r0, [pc, #396]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001b10:	f00d fe86 	bl	800f820 <siprintf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1c:	495f      	ldr	r1, [pc, #380]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001b1e:	4860      	ldr	r0, [pc, #384]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001b20:	f003 ffc0 	bl	8005aa4 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	425a      	negs	r2, r3
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	f002 0207 	and.w	r2, r2, #7
 8001b30:	bf58      	it	pl
 8001b32:	4253      	negpl	r3, r2
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	d10b      	bne.n	8001b50 <AvgStdCommand+0x7c>
 8001b38:	495c      	ldr	r1, [pc, #368]	; (8001cac <AvgStdCommand+0x1d8>)
 8001b3a:	4858      	ldr	r0, [pc, #352]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001b3c:	f00d fe70 	bl	800f820 <siprintf>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b48:	4954      	ldr	r1, [pc, #336]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001b4a:	4855      	ldr	r0, [pc, #340]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001b4c:	f003 ffaa 	bl	8005aa4 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b17      	cmp	r3, #23
 8001b5a:	d9cd      	bls.n	8001af8 <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	e02e      	b.n	8001bc0 <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001b62:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <AvgStdCommand+0x1dc>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fd1b 	bl	80005a8 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	494c      	ldr	r1, [pc, #304]	; (8001ca8 <AvgStdCommand+0x1d4>)
 8001b78:	4848      	ldr	r0, [pc, #288]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001b7a:	f00d fe51 	bl	800f820 <siprintf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	4945      	ldr	r1, [pc, #276]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001b88:	4845      	ldr	r0, [pc, #276]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001b8a:	f003 ff8b 	bl	8005aa4 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	425a      	negs	r2, r3
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	f002 0207 	and.w	r2, r2, #7
 8001b9a:	bf58      	it	pl
 8001b9c:	4253      	negpl	r3, r2
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d10b      	bne.n	8001bba <AvgStdCommand+0xe6>
 8001ba2:	4942      	ldr	r1, [pc, #264]	; (8001cac <AvgStdCommand+0x1d8>)
 8001ba4:	483d      	ldr	r0, [pc, #244]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001ba6:	f00d fe3b 	bl	800f820 <siprintf>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	493a      	ldr	r1, [pc, #232]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001bb4:	483a      	ldr	r0, [pc, #232]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001bb6:	f003 ff75 	bl	8005aa4 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b17      	cmp	r3, #23
 8001bc4:	d9cd      	bls.n	8001b62 <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <AvgStdCommand+0x1e0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcec 	bl	80005a8 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <AvgStdCommand+0x1d4>)
 8001bd6:	4831      	ldr	r0, [pc, #196]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001bd8:	f00d fe22 	bl	800f820 <siprintf>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be4:	492d      	ldr	r1, [pc, #180]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001be6:	482e      	ldr	r0, [pc, #184]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001be8:	f003 ff5c 	bl	8005aa4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <AvgStdCommand+0x1e0>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fcd9 	bl	80005a8 <__aeabi_f2d>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	492b      	ldr	r1, [pc, #172]	; (8001ca8 <AvgStdCommand+0x1d4>)
 8001bfc:	4827      	ldr	r0, [pc, #156]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001bfe:	f00d fe0f 	bl	800f820 <siprintf>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	4924      	ldr	r1, [pc, #144]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c0c:	4824      	ldr	r0, [pc, #144]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001c0e:	f003 ff49 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001c12:	4926      	ldr	r1, [pc, #152]	; (8001cac <AvgStdCommand+0x1d8>)
 8001c14:	4821      	ldr	r0, [pc, #132]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c16:	f00d fe03 	bl	800f820 <siprintf>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	491e      	ldr	r1, [pc, #120]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c24:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001c26:	f003 ff3d 	bl	8005aa4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <AvgStdCommand+0x1e4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fcba 	bl	80005a8 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <AvgStdCommand+0x1d4>)
 8001c3a:	4818      	ldr	r0, [pc, #96]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c3c:	f00d fdf0 	bl	800f820 <siprintf>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c48:	4914      	ldr	r1, [pc, #80]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c4a:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001c4c:	f003 ff2a 	bl	8005aa4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <AvgStdCommand+0x1e4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fca7 	bl	80005a8 <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4912      	ldr	r1, [pc, #72]	; (8001ca8 <AvgStdCommand+0x1d4>)
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c62:	f00d fddd 	bl	800f820 <siprintf>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	490b      	ldr	r1, [pc, #44]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001c72:	f003 ff17 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001c76:	490d      	ldr	r1, [pc, #52]	; (8001cac <AvgStdCommand+0x1d8>)
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c7a:	f00d fdd1 	bl	800f820 <siprintf>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	4905      	ldr	r1, [pc, #20]	; (8001c9c <AvgStdCommand+0x1c8>)
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <AvgStdCommand+0x1cc>)
 8001c8a:	f003 ff0b 	bl	8005aa4 <HAL_UART_Transmit>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	08012b3c 	.word	0x08012b3c
 8001c9c:	20008f9c 	.word	0x20008f9c
 8001ca0:	20008f14 	.word	0x20008f14
 8001ca4:	200000c8 	.word	0x200000c8
 8001ca8:	08012b50 	.word	0x08012b50
 8001cac:	08012b04 	.word	0x08012b04
 8001cb0:	20000128 	.word	0x20000128
 8001cb4:	20000188 	.word	0x20000188
 8001cb8:	20000190 	.word	0x20000190

08001cbc <CalibrationCommand>:

void CalibrationCommand(){
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	0000      	movs	r0, r0
 8001ccc:	0000      	movs	r0, r0
	...

08001cd0 <InferenceCommand>:


void InferenceCommand()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
	ResetAllDevices();
 8001cd6:	f000 fd29 	bl	800272c <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001cda:	49b3      	ldr	r1, [pc, #716]	; (8001fa8 <InferenceCommand+0x2d8>)
 8001cdc:	48b3      	ldr	r0, [pc, #716]	; (8001fac <InferenceCommand+0x2dc>)
 8001cde:	f00d fd9f 	bl	800f820 <siprintf>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	49b0      	ldr	r1, [pc, #704]	; (8001fac <InferenceCommand+0x2dc>)
 8001cea:	48b1      	ldr	r0, [pc, #708]	; (8001fb0 <InferenceCommand+0x2e0>)
 8001cec:	f003 feda 	bl	8005aa4 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	e148      	b.n	8001f88 <InferenceCommand+0x2b8>
    	uint8_t tofCount =0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e08b      	b.n	8001e18 <InferenceCommand+0x148>
    	    uint8_t q = i / 12;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4aac      	ldr	r2, [pc, #688]	; (8001fb4 <InferenceCommand+0x2e4>)
 8001d04:	fb82 1203 	smull	r1, r2, r2, r3
 8001d08:	1052      	asrs	r2, r2, #1
 8001d0a:	17db      	asrs	r3, r3, #31
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	72fb      	strb	r3, [r7, #11]
    	    uint8_t r = i % 12;
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4ba8      	ldr	r3, [pc, #672]	; (8001fb4 <InferenceCommand+0x2e4>)
 8001d14:	fb83 1302 	smull	r1, r3, r3, r2
 8001d18:	1059      	asrs	r1, r3, #1
 8001d1a:	17d3      	asrs	r3, r2, #31
 8001d1c:	1ac9      	subs	r1, r1, r3
 8001d1e:	460b      	mov	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	440b      	add	r3, r1
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	1ad1      	subs	r1, r2, r3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	72bb      	strb	r3, [r7, #10]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	7aba      	ldrb	r2, [r7, #10]
 8001d34:	2a07      	cmp	r2, #7
 8001d36:	bf8c      	ite	hi
 8001d38:	2201      	movhi	r2, #1
 8001d3a:	2200      	movls	r2, #0
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	4413      	add	r3, r2
 8001d40:	727b      	strb	r3, [r7, #9]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d903      	bls.n	8001d50 <InferenceCommand+0x80>
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e000      	b.n	8001d52 <InferenceCommand+0x82>
 8001d50:	7abb      	ldrb	r3, [r7, #10]
 8001d52:	723b      	strb	r3, [r7, #8]
    	    ResetDevicesExcept(active_device);
 8001d54:	7a7b      	ldrb	r3, [r7, #9]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fd14 	bl	8002784 <ResetDevicesExcept>
            setActiveTcaChannel(active_device, channel);
 8001d5c:	7a3a      	ldrb	r2, [r7, #8]
 8001d5e:	7a7b      	ldrb	r3, [r7, #9]
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fd40 	bl	80027e8 <setActiveTcaChannel>
            Dev = &vl53l0x_s[i];
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a91      	ldr	r2, [pc, #580]	; (8001fb8 <InferenceCommand+0x2e8>)
 8001d74:	4413      	add	r3, r2
 8001d76:	4a91      	ldr	r2, [pc, #580]	; (8001fbc <InferenceCommand+0x2ec>)
 8001d78:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8001d7a:	4b90      	ldr	r3, [pc, #576]	; (8001fbc <InferenceCommand+0x2ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4990      	ldr	r1, [pc, #576]	; (8001fc0 <InferenceCommand+0x2f0>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f006 fc30 	bl	80085e6 <VL53L0X_PerformContinuousRangingMeasurement>
            if (RangingData.RangeStatus == 0) {
 8001d86:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <InferenceCommand+0x2f0>)
 8001d88:	7e1b      	ldrb	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d135      	bne.n	8001dfa <InferenceCommand+0x12a>
                float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <InferenceCommand+0x2f4>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a88      	ldr	r2, [pc, #544]	; (8001fc0 <InferenceCommand+0x2f0>)
 8001d9e:	8912      	ldrh	r2, [r2, #8]
 8001da0:	ee07 2a90 	vmov	s15, r2
 8001da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff faf1 	bl	8001394 <Kalman_Estimate>
 8001db2:	ed87 0a01 	vstr	s0, [r7, #4]
                in_data[i]=filteredValue;
 8001db6:	4a84      	ldr	r2, [pc, #528]	; (8001fc8 <InferenceCommand+0x2f8>)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	601a      	str	r2, [r3, #0]
                //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", in_data[i]), 1000);
                in_data[i]= (filteredValue-Xmean[i])/Xstd[i];
 8001dc2:	4a82      	ldr	r2, [pc, #520]	; (8001fcc <InferenceCommand+0x2fc>)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dd2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <InferenceCommand+0x300>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	ed93 7a00 	vldr	s14, [r3]
 8001de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de6:	4a78      	ldr	r2, [pc, #480]	; (8001fc8 <InferenceCommand+0x2f8>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001df2:	7efb      	ldrb	r3, [r7, #27]
 8001df4:	3301      	adds	r3, #1
 8001df6:	76fb      	strb	r3, [r7, #27]
 8001df8:	e00b      	b.n	8001e12 <InferenceCommand+0x142>
            }else{
               HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "99 "), 1000);
 8001dfa:	4976      	ldr	r1, [pc, #472]	; (8001fd4 <InferenceCommand+0x304>)
 8001dfc:	486b      	ldr	r0, [pc, #428]	; (8001fac <InferenceCommand+0x2dc>)
 8001dfe:	f00d fd0f 	bl	800f820 <siprintf>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	4968      	ldr	r1, [pc, #416]	; (8001fac <InferenceCommand+0x2dc>)
 8001e0c:	4868      	ldr	r0, [pc, #416]	; (8001fb0 <InferenceCommand+0x2e0>)
 8001e0e:	f003 fe49 	bl	8005aa4 <HAL_UART_Transmit>
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b17      	cmp	r3, #23
 8001e1c:	f77f af70 	ble.w	8001d00 <InferenceCommand+0x30>
            }
        }
		if(tofCount == NUM_SENSOR){
 8001e20:	7efb      	ldrb	r3, [r7, #27]
 8001e22:	2b18      	cmp	r3, #24
 8001e24:	f040 80a2 	bne.w	8001f6c <InferenceCommand+0x29c>
			aiRun(in_data,out_data);
 8001e28:	496b      	ldr	r1, [pc, #428]	; (8001fd8 <InferenceCommand+0x308>)
 8001e2a:	4867      	ldr	r0, [pc, #412]	; (8001fc8 <InferenceCommand+0x2f8>)
 8001e2c:	f7ff f8fe 	bl	800102c <aiRun>
			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 8001e30:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <InferenceCommand+0x308>)
 8001e32:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e36:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <InferenceCommand+0x308>)
 8001e38:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e40:	4b65      	ldr	r3, [pc, #404]	; (8001fd8 <InferenceCommand+0x308>)
 8001e42:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e46:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <InferenceCommand+0x308>)
 8001e48:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	edc7 7a03 	vstr	s15, [r7, #12]
			if(sqSum >= 0.8 && sqSum <= 1.2){
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fba5 	bl	80005a8 <__aeabi_f2d>
 8001e5e:	a350      	add	r3, pc, #320	; (adr r3, 8001fa0 <InferenceCommand+0x2d0>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fe7e 	bl	8000b64 <__aeabi_dcmpge>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d06d      	beq.n	8001f4a <InferenceCommand+0x27a>
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7fe fb9a 	bl	80005a8 <__aeabi_f2d>
 8001e74:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001e78:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <InferenceCommand+0x30c>)
 8001e7a:	f7fe fe69 	bl	8000b50 <__aeabi_dcmple>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d062      	beq.n	8001f4a <InferenceCommand+0x27a>
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8001e84:	4b54      	ldr	r3, [pc, #336]	; (8001fd8 <InferenceCommand+0x308>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <InferenceCommand+0x310>)
 8001e94:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e98:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <InferenceCommand+0x310>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001eaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <InferenceCommand+0x310>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb8:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <InferenceCommand+0x308>)
 8001eba:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <InferenceCommand+0x308>)
 8001ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ecc:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <InferenceCommand+0x314>)
 8001ece:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <InferenceCommand+0x314>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ee4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <InferenceCommand+0x314>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <InferenceCommand+0x308>)
 8001ef4:	edc3 7a01 	vstr	s15, [r3, #4]
				if(out_data[0]>20){
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <InferenceCommand+0x308>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	dd1e      	ble.n	8001f4a <InferenceCommand+0x27a>
					for(int k=0; k<4;k++){
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e018      	b.n	8001f44 <InferenceCommand+0x274>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <InferenceCommand+0x308>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fb43 	bl	80005a8 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4930      	ldr	r1, [pc, #192]	; (8001fe8 <InferenceCommand+0x318>)
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <InferenceCommand+0x2dc>)
 8001f2a:	f00d fc79 	bl	800f820 <siprintf>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	491d      	ldr	r1, [pc, #116]	; (8001fac <InferenceCommand+0x2dc>)
 8001f38:	481d      	ldr	r0, [pc, #116]	; (8001fb0 <InferenceCommand+0x2e0>)
 8001f3a:	f003 fdb3 	bl	8005aa4 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	dde3      	ble.n	8001f12 <InferenceCommand+0x242>
					}
				}
			}
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7fe fb2c 	bl	80005a8 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4924      	ldr	r1, [pc, #144]	; (8001fe8 <InferenceCommand+0x318>)
 8001f56:	4815      	ldr	r0, [pc, #84]	; (8001fac <InferenceCommand+0x2dc>)
 8001f58:	f00d fc62 	bl	800f820 <siprintf>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f64:	4911      	ldr	r1, [pc, #68]	; (8001fac <InferenceCommand+0x2dc>)
 8001f66:	4812      	ldr	r0, [pc, #72]	; (8001fb0 <InferenceCommand+0x2e0>)
 8001f68:	f003 fd9c 	bl	8005aa4 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001f6c:	491f      	ldr	r1, [pc, #124]	; (8001fec <InferenceCommand+0x31c>)
 8001f6e:	480f      	ldr	r0, [pc, #60]	; (8001fac <InferenceCommand+0x2dc>)
 8001f70:	f00d fc56 	bl	800f820 <siprintf>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	490c      	ldr	r1, [pc, #48]	; (8001fac <InferenceCommand+0x2dc>)
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <InferenceCommand+0x2e0>)
 8001f7e:	f003 fd91 	bl	8005aa4 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f77f aeb1 	ble.w	8001cf6 <InferenceCommand+0x26>
    }

}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	3fe99999 	.word	0x3fe99999
 8001fa8:	08012ae0 	.word	0x08012ae0
 8001fac:	20008f9c 	.word	0x20008f9c
 8001fb0:	20008f14 	.word	0x20008f14
 8001fb4:	2aaaaaab 	.word	0x2aaaaaab
 8001fb8:	2000903c 	.word	0x2000903c
 8001fbc:	2000b5bc 	.word	0x2000b5bc
 8001fc0:	20009020 	.word	0x20009020
 8001fc4:	20008d0c 	.word	0x20008d0c
 8001fc8:	20001aa0 	.word	0x20001aa0
 8001fcc:	200000c8 	.word	0x200000c8
 8001fd0:	20000128 	.word	0x20000128
 8001fd4:	08012b58 	.word	0x08012b58
 8001fd8:	20001b00 	.word	0x20001b00
 8001fdc:	3ff33333 	.word	0x3ff33333
 8001fe0:	20000188 	.word	0x20000188
 8001fe4:	20000190 	.word	0x20000190
 8001fe8:	08012b50 	.word	0x08012b50
 8001fec:	08012b04 	.word	0x08012b04

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001ff4:	f7ff fa1e 	bl	8001434 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001ff8:	f7ff fa42 	bl	8001480 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ffc:	f000 fc3f 	bl	800287e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002000:	f000 f81e 	bl	8002040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002004:	f000 f8b6 	bl	8002174 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002008:	f000 fac0 	bl	800258c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800200c:	f7ff f964 	bl	80012d8 <MX_I2C1_Init>
  MX_CRC_Init();
 8002010:	f000 f88e 	bl	8002130 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002014:	f000 f880 	bl	8002118 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  aiInit();
 8002018:	f7fe ffc8 	bl	8000fac <aiInit>
  startMsg();
 800201c:	f000 fb1c 	bl	8002658 <startMsg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	4905      	ldr	r1, [pc, #20]	; (8002038 <main+0x48>)
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <main+0x4c>)
 8002026:	f000 fae1 	bl	80025ec <ReceiveUartMessage>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f7      	bne.n	8002020 <main+0x30>
	  {
	      ProcessCommand(rxMsg);
 8002030:	4801      	ldr	r0, [pc, #4]	; (8002038 <main+0x48>)
 8002032:	f7ff fa69 	bl	8001508 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8002036:	e7f3      	b.n	8002020 <main+0x30>
 8002038:	20008fdc 	.word	0x20008fdc
 800203c:	20008f14 	.word	0x20008f14

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b094      	sub	sp, #80	; 0x50
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	2230      	movs	r2, #48	; 0x30
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f00c fe84 	bl	800ed5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <SystemClock_Config+0xd0>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <SystemClock_Config+0xd0>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	6413      	str	r3, [r2, #64]	; 0x40
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <SystemClock_Config+0xd0>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <SystemClock_Config+0xd4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <SystemClock_Config+0xd4>)
 8002082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <SystemClock_Config+0xd4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002094:	2302      	movs	r3, #2
 8002096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002098:	2301      	movs	r3, #1
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800209c:	2310      	movs	r3, #16
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a0:	2302      	movs	r3, #2
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020a8:	2308      	movs	r3, #8
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80020ac:	23d8      	movs	r3, #216	; 0xd8
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b8:	f107 0320 	add.w	r3, r7, #32
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fbe9 	bl	8004894 <HAL_RCC_OscConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80020c8:	f000 f884 	bl	80021d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020cc:	f002 fb92 	bl	80047f4 <HAL_PWREx_EnableOverDrive>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020d6:	f000 f87d 	bl	80021d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020da:	230f      	movs	r3, #15
 80020dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2107      	movs	r1, #7
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 fe6f 	bl	8004ddc <HAL_RCC_ClockConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002104:	f000 f866 	bl	80021d4 <Error_Handler>
  }
}
 8002108:	bf00      	nop
 800210a:	3750      	adds	r7, #80	; 0x50
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2025      	movs	r0, #37	; 0x25
 8002122:	f000 fd08 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002126:	2025      	movs	r0, #37	; 0x25
 8002128:	f000 fd21 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <MX_CRC_Init+0x3c>)
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <MX_CRC_Init+0x40>)
 8002138:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_CRC_Init+0x3c>)
 800213c:	2200      	movs	r2, #0
 800213e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MX_CRC_Init+0x3c>)
 8002142:	2200      	movs	r2, #0
 8002144:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_CRC_Init+0x3c>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <MX_CRC_Init+0x3c>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_CRC_Init+0x3c>)
 8002154:	2201      	movs	r2, #1
 8002156:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <MX_CRC_Init+0x3c>)
 800215a:	f000 fd23 	bl	8002ba4 <HAL_CRC_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002164:	f000 f836 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20008eec 	.word	0x20008eec
 8002170:	40023000 	.word	0x40023000

08002174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_GPIO_Init+0x5c>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <MX_GPIO_Init+0x5c>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_GPIO_Init+0x5c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_GPIO_Init+0x5c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <MX_GPIO_Init+0x5c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_GPIO_Init+0x5c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_GPIO_Init+0x5c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <MX_GPIO_Init+0x5c>)
 80021b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_GPIO_Init+0x5c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 80021dc:	4905      	ldr	r1, [pc, #20]	; (80021f4 <Error_Handler+0x20>)
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <Error_Handler+0x24>)
 80021e0:	f00d fb1e 	bl	800f820 <siprintf>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	2364      	movs	r3, #100	; 0x64
 80021ea:	4903      	ldr	r1, [pc, #12]	; (80021f8 <Error_Handler+0x24>)
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <Error_Handler+0x28>)
 80021ee:	f003 fc59 	bl	8005aa4 <HAL_UART_Transmit>
 80021f2:	e7f3      	b.n	80021dc <Error_Handler+0x8>
 80021f4:	08012b5c 	.word	0x08012b5c
 80021f8:	20008f9c 	.word	0x20008f9c
 80021fc:	20008f14 	.word	0x20008f14

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_MspInit+0x44>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_MspInit+0x44>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_MspInit+0x44>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_MspInit+0x44>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_MspInit+0x44>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_MspInit+0x44>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_CRC_MspInit+0x38>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10b      	bne.n	8002272 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_CRC_MspInit+0x3c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_CRC_MspInit+0x3c>)
 8002260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_CRC_MspInit+0x3c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023000 	.word	0x40023000
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0aa      	sub	sp, #168	; 0xa8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	2284      	movs	r2, #132	; 0x84
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00c fd57 	bl	800ed5c <memset>
  if(hi2c->Instance==I2C1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2a      	ldr	r2, [pc, #168]	; (800235c <HAL_I2C_MspInit+0xd4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d14c      	bne.n	8002352 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022be:	2300      	movs	r3, #0
 80022c0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 ffae 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022d2:	f7ff ff7f 	bl	80021d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_I2C_MspInit+0xd8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_I2C_MspInit+0xd8>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_I2C_MspInit+0xd8>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f6:	2312      	movs	r3, #18
 80022f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002308:	2304      	movs	r3, #4
 800230a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002312:	4619      	mov	r1, r3
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <HAL_I2C_MspInit+0xdc>)
 8002316:	f000 fdcf 	bl	8002eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_I2C_MspInit+0xd8>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_I2C_MspInit+0xd8>)
 8002320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_I2C_MspInit+0xd8>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	201f      	movs	r0, #31
 8002338:	f000 fbfd 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800233c:	201f      	movs	r0, #31
 800233e:	f000 fc16 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2020      	movs	r0, #32
 8002348:	f000 fbf5 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800234c:	2020      	movs	r0, #32
 800234e:	f000 fc0e 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002352:	bf00      	nop
 8002354:	37a8      	adds	r7, #168	; 0xa8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40005400 	.word	0x40005400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400

08002368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0ac      	sub	sp, #176	; 0xb0
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 0318 	add.w	r3, r7, #24
 8002384:	2284      	movs	r2, #132	; 0x84
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f00c fce7 	bl	800ed5c <memset>
  if(huart->Instance==USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a32      	ldr	r2, [pc, #200]	; (800245c <HAL_UART_MspInit+0xf4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d15c      	bne.n	8002452 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002398:	2340      	movs	r3, #64	; 0x40
 800239a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800239c:	2300      	movs	r3, #0
 800239e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 ff3f 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023b0:	f7ff ff10 	bl	80021d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	4a29      	ldr	r2, [pc, #164]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	6453      	str	r3, [r2, #68]	; 0x44
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a23      	ldr	r2, [pc, #140]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_UART_MspInit+0xf8>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002414:	2307      	movs	r3, #7
 8002416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800241e:	4619      	mov	r1, r3
 8002420:	4810      	ldr	r0, [pc, #64]	; (8002464 <HAL_UART_MspInit+0xfc>)
 8002422:	f000 fd49 	bl	8002eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002440:	2307      	movs	r3, #7
 8002442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800244a:	4619      	mov	r1, r3
 800244c:	4806      	ldr	r0, [pc, #24]	; (8002468 <HAL_UART_MspInit+0x100>)
 800244e:	f000 fd33 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	37b0      	adds	r7, #176	; 0xb0
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40011000 	.word	0x40011000
 8002460:	40023800 	.word	0x40023800
 8002464:	40020400 	.word	0x40020400
 8002468:	40020000 	.word	0x40020000

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <NMI_Handler+0x4>

08002472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <HardFault_Handler+0x4>

08002478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <MemManage_Handler+0x4>

0800247e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <BusFault_Handler+0x4>

08002484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <UsageFault_Handler+0x4>

0800248a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b8:	f000 fa1e 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <I2C1_EV_IRQHandler+0x10>)
 80024c6:	f001 f91d 	bl	8003704 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20008cb8 	.word	0x20008cb8

080024d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <I2C1_ER_IRQHandler+0x10>)
 80024da:	f001 f92d 	bl	8003738 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20008cb8 	.word	0x20008cb8

080024e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <USART1_IRQHandler+0x10>)
 80024ee:	f003 fc21 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20008f14 	.word	0x20008f14

080024fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <_sbrk+0x5c>)
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <_sbrk+0x60>)
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <_sbrk+0x64>)
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <_sbrk+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800252c:	f00c fbd6 	bl	800ecdc <__errno>
 8002530:	4603      	mov	r3, r0
 8002532:	220c      	movs	r2, #12
 8002534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e009      	b.n	8002550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <_sbrk+0x64>)
 800254c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20050000 	.word	0x20050000
 800255c:	00000800 	.word	0x00000800
 8002560:	20008f10 	.word	0x20008f10
 8002564:	2000b6c0 	.word	0x2000b6c0

08002568 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <MX_USART1_UART_Init+0x5c>)
 8002594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025d0:	f003 fa1a 	bl	8005a08 <HAL_UART_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025da:	f7ff fdfb 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20008f14 	.word	0x20008f14
 80025e8:	40011000 	.word	0x40011000

080025ec <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80025fe:	f107 0115 	add.w	r1, r7, #21
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	2201      	movs	r2, #1
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f003 face 	bl	8005baa <HAL_UART_Receive>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f4      	bne.n	80025fe <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8002614:	7d7b      	ldrb	r3, [r7, #21]
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d106      	bne.n	8002628 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800261a:	8afb      	ldrh	r3, [r7, #22]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	4413      	add	r3, r2
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e012      	b.n	800264e <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 8002628:	8afb      	ldrh	r3, [r7, #22]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4413      	add	r3, r2
 800262e:	7d7a      	ldrb	r2, [r7, #21]
 8002630:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8002632:	8afb      	ldrh	r3, [r7, #22]
 8002634:	3301      	adds	r3, #1
 8002636:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 8002638:	8afa      	ldrh	r2, [r7, #22]
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	429a      	cmp	r2, r3
 800263e:	d3de      	bcc.n	80025fe <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8002640:	8afb      	ldrh	r3, [r7, #22]
 8002642:	3b01      	subs	r3, #1
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4413      	add	r3, r2
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <startMsg>:

void startMsg(){
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800265c:	492c      	ldr	r1, [pc, #176]	; (8002710 <startMsg+0xb8>)
 800265e:	482d      	ldr	r0, [pc, #180]	; (8002714 <startMsg+0xbc>)
 8002660:	f00d f8de 	bl	800f820 <siprintf>
 8002664:	4603      	mov	r3, r0
 8002666:	b29a      	uxth	r2, r3
 8002668:	2364      	movs	r3, #100	; 0x64
 800266a:	492a      	ldr	r1, [pc, #168]	; (8002714 <startMsg+0xbc>)
 800266c:	482a      	ldr	r0, [pc, #168]	; (8002718 <startMsg+0xc0>)
 800266e:	f003 fa19 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002672:	4927      	ldr	r1, [pc, #156]	; (8002710 <startMsg+0xb8>)
 8002674:	4827      	ldr	r0, [pc, #156]	; (8002714 <startMsg+0xbc>)
 8002676:	f00d f8d3 	bl	800f820 <siprintf>
 800267a:	4603      	mov	r3, r0
 800267c:	b29a      	uxth	r2, r3
 800267e:	2364      	movs	r3, #100	; 0x64
 8002680:	4924      	ldr	r1, [pc, #144]	; (8002714 <startMsg+0xbc>)
 8002682:	4825      	ldr	r0, [pc, #148]	; (8002718 <startMsg+0xc0>)
 8002684:	f003 fa0e 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 8002688:	4924      	ldr	r1, [pc, #144]	; (800271c <startMsg+0xc4>)
 800268a:	4822      	ldr	r0, [pc, #136]	; (8002714 <startMsg+0xbc>)
 800268c:	f00d f8c8 	bl	800f820 <siprintf>
 8002690:	4603      	mov	r3, r0
 8002692:	b29a      	uxth	r2, r3
 8002694:	2364      	movs	r3, #100	; 0x64
 8002696:	491f      	ldr	r1, [pc, #124]	; (8002714 <startMsg+0xbc>)
 8002698:	481f      	ldr	r0, [pc, #124]	; (8002718 <startMsg+0xc0>)
 800269a:	f003 fa03 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 800269e:	4920      	ldr	r1, [pc, #128]	; (8002720 <startMsg+0xc8>)
 80026a0:	481c      	ldr	r0, [pc, #112]	; (8002714 <startMsg+0xbc>)
 80026a2:	f00d f8bd 	bl	800f820 <siprintf>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	4919      	ldr	r1, [pc, #100]	; (8002714 <startMsg+0xbc>)
 80026ae:	481a      	ldr	r0, [pc, #104]	; (8002718 <startMsg+0xc0>)
 80026b0:	f003 f9f8 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 80026b4:	491b      	ldr	r1, [pc, #108]	; (8002724 <startMsg+0xcc>)
 80026b6:	4817      	ldr	r0, [pc, #92]	; (8002714 <startMsg+0xbc>)
 80026b8:	f00d f8b2 	bl	800f820 <siprintf>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2364      	movs	r3, #100	; 0x64
 80026c2:	4914      	ldr	r1, [pc, #80]	; (8002714 <startMsg+0xbc>)
 80026c4:	4814      	ldr	r0, [pc, #80]	; (8002718 <startMsg+0xc0>)
 80026c6:	f003 f9ed 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 80026ca:	4917      	ldr	r1, [pc, #92]	; (8002728 <startMsg+0xd0>)
 80026cc:	4811      	ldr	r0, [pc, #68]	; (8002714 <startMsg+0xbc>)
 80026ce:	f00d f8a7 	bl	800f820 <siprintf>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	2364      	movs	r3, #100	; 0x64
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <startMsg+0xbc>)
 80026da:	480f      	ldr	r0, [pc, #60]	; (8002718 <startMsg+0xc0>)
 80026dc:	f003 f9e2 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <startMsg+0xb8>)
 80026e2:	480c      	ldr	r0, [pc, #48]	; (8002714 <startMsg+0xbc>)
 80026e4:	f00d f89c 	bl	800f820 <siprintf>
 80026e8:	4603      	mov	r3, r0
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	2364      	movs	r3, #100	; 0x64
 80026ee:	4909      	ldr	r1, [pc, #36]	; (8002714 <startMsg+0xbc>)
 80026f0:	4809      	ldr	r0, [pc, #36]	; (8002718 <startMsg+0xc0>)
 80026f2:	f003 f9d7 	bl	8005aa4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80026f6:	4906      	ldr	r1, [pc, #24]	; (8002710 <startMsg+0xb8>)
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <startMsg+0xbc>)
 80026fa:	f00d f891 	bl	800f820 <siprintf>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29a      	uxth	r2, r3
 8002702:	2364      	movs	r3, #100	; 0x64
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <startMsg+0xbc>)
 8002706:	4804      	ldr	r0, [pc, #16]	; (8002718 <startMsg+0xc0>)
 8002708:	f003 f9cc 	bl	8005aa4 <HAL_UART_Transmit>
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	08012b64 	.word	0x08012b64
 8002714:	20008f9c 	.word	0x20008f9c
 8002718:	20008f14 	.word	0x20008f14
 800271c:	08012ba4 	.word	0x08012ba4
 8002720:	08012be4 	.word	0x08012be4
 8002724:	08012c24 	.word	0x08012c24
 8002728:	08012c64 	.word	0x08012c64

0800272c <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	e011      	b.n	800275c <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <ResetAllDevices+0x48>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	b299      	uxth	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <ResetAllDevices+0x4c>)
 8002750:	480a      	ldr	r0, [pc, #40]	; (800277c <ResetAllDevices+0x50>)
 8002752:	f000 fded 	bl	8003330 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3301      	adds	r3, #1
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <ResetAllDevices+0x54>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4293      	cmp	r3, r2
 8002766:	dbe7      	blt.n	8002738 <ResetAllDevices+0xc>
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200000c0 	.word	0x200000c0
 8002778:	2000b5c0 	.word	0x2000b5c0
 800277c:	20008cb8 	.word	0x20008cb8
 8002780:	200000c4 	.word	0x200000c4

08002784 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e015      	b.n	80027c0 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d00e      	beq.n	80027ba <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <ResetDevicesExcept+0x54>)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	b299      	uxth	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <ResetDevicesExcept+0x58>)
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <ResetDevicesExcept+0x5c>)
 80027b6:	f000 fdbb 	bl	8003330 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <ResetDevicesExcept+0x60>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	dbe3      	blt.n	8002794 <ResetDevicesExcept+0x10>
        }
    }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200000c0 	.word	0x200000c0
 80027dc:	2000b5c0 	.word	0x2000b5c0
 80027e0:	20008cb8 	.word	0x20008cb8
 80027e4:	200000c4 	.word	0x200000c4

080027e8 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	4603      	mov	r3, r0
 80027f0:	460a      	mov	r2, r1
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <setActiveTcaChannel+0x38>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	b299      	uxth	r1, r3
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <setActiveTcaChannel+0x3c>)
 8002808:	441a      	add	r2, r3
 800280a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <setActiveTcaChannel+0x40>)
 8002814:	f000 fd8c 	bl	8003330 <HAL_I2C_Master_Transmit>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200000c0 	.word	0x200000c0
 8002824:	200000b8 	.word	0x200000b8
 8002828:	20008cb8 	.word	0x20008cb8

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002856:	f7ff fe87 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f00c fa45 	bl	800ece8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7ff fbc7 	bl	8001ff0 <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002864:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	2000107c 	.word	0x2000107c
  ldr r2, =_sidata
 8002870:	08064e70 	.word	0x08064e70
  ldr r2, =_sbss
 8002874:	20001080 	.word	0x20001080
  ldr r4, =_ebss
 8002878:	2000b6bc 	.word	0x2000b6bc

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>

0800287e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 f94c 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002888:	200f      	movs	r0, #15
 800288a:	f000 f805 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288e:	f7ff fcb7 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f967 	bl	8002b8a <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 f92f 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000000c 	.word	0x2000000c
 80028f0:	2000019c 	.word	0x2000019c
 80028f4:	20000198 	.word	0x20000198

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000019c 	.word	0x2000019c
 800291c:	2000b5c4 	.word	0x2000b5c4

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2000b5c4 	.word	0x2000b5c4

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000019c 	.word	0x2000019c

08002980 <__NVIC_SetPriorityGrouping>:
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	05fa0000 	.word	0x05fa0000

080029c8 <__NVIC_GetPriorityGrouping>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e054      	b.n	8002c60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7f5b      	ldrb	r3, [r3, #29]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fb3e 	bl	8002248 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_CRC_Init+0xc4>)
 8002be0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0218 	bic.w	r2, r2, #24
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	e00c      	b.n	8002c0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f834 	bl	8002c6c <HAL_CRCEx_Polynomial_Set>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e028      	b.n	8002c60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	795b      	ldrb	r3, [r3, #5]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	e004      	b.n	8002c2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6912      	ldr	r2, [r2, #16]
 8002c2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	04c11db7 	.word	0x04c11db7

08002c6c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002c7c:	231f      	movs	r3, #31
 8002c7e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002c80:	bf00      	nop
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	613a      	str	r2, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b18      	cmp	r3, #24
 8002ca4:	d846      	bhi.n	8002d34 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002d3b 	.word	0x08002d3b
 8002cb0:	08002d35 	.word	0x08002d35
 8002cb4:	08002d35 	.word	0x08002d35
 8002cb8:	08002d35 	.word	0x08002d35
 8002cbc:	08002d35 	.word	0x08002d35
 8002cc0:	08002d35 	.word	0x08002d35
 8002cc4:	08002d35 	.word	0x08002d35
 8002cc8:	08002d35 	.word	0x08002d35
 8002ccc:	08002d29 	.word	0x08002d29
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002d35 	.word	0x08002d35
 8002cd8:	08002d35 	.word	0x08002d35
 8002cdc:	08002d35 	.word	0x08002d35
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d35 	.word	0x08002d35
 8002cec:	08002d1d 	.word	0x08002d1d
 8002cf0:	08002d35 	.word	0x08002d35
 8002cf4:	08002d35 	.word	0x08002d35
 8002cf8:	08002d35 	.word	0x08002d35
 8002cfc:	08002d35 	.word	0x08002d35
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002d35 	.word	0x08002d35
 8002d08:	08002d35 	.word	0x08002d35
 8002d0c:	08002d11 	.word	0x08002d11
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d913      	bls.n	8002d3e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d1a:	e010      	b.n	8002d3e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b07      	cmp	r3, #7
 8002d20:	d90f      	bls.n	8002d42 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d26:	e00c      	b.n	8002d42 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d90b      	bls.n	8002d46 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d32:	e008      	b.n	8002d46 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
      break;
 8002d38:	e006      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e004      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e002      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d46:	bf00      	nop
  }
  if (status == HAL_OK)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 0118 	bic.w	r1, r3, #24
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d86:	f7ff fdcb 	bl	8002920 <HAL_GetTick>
 8002d8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e052      	b.n	8002e50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0216 	bic.w	r2, r2, #22
 8002db8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_DMA_Abort+0x62>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0208 	bic.w	r2, r2, #8
 8002de8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfa:	e013      	b.n	8002e24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfc:	f7ff fd90 	bl	8002920 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d90c      	bls.n	8002e24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2203      	movs	r2, #3
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e015      	b.n	8002e50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e4      	bne.n	8002dfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	223f      	movs	r2, #63	; 0x3f
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00c      	b.n	8002e90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2205      	movs	r2, #5
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eaa:	b2db      	uxtb	r3, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e175      	b.n	80031c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	f040 8164 	bne.w	80031be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d005      	beq.n	8002f0e <HAL_GPIO_Init+0x56>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d130      	bne.n	8002f70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 0201 	and.w	r2, r3, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d017      	beq.n	8002fac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d123      	bne.n	8003000 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	08da      	lsrs	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3208      	adds	r2, #8
 8002fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	220f      	movs	r2, #15
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	08da      	lsrs	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3208      	adds	r2, #8
 8002ffa:	69b9      	ldr	r1, [r7, #24]
 8002ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0203 	and.w	r2, r3, #3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80be 	beq.w	80031be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b66      	ldr	r3, [pc, #408]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a65      	ldr	r2, [pc, #404]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800305a:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <HAL_GPIO_Init+0x328>)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	3302      	adds	r3, #2
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_GPIO_Init+0x32c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d037      	beq.n	80030f6 <HAL_GPIO_Init+0x23e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <HAL_GPIO_Init+0x330>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d031      	beq.n	80030f2 <HAL_GPIO_Init+0x23a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a56      	ldr	r2, [pc, #344]	; (80031ec <HAL_GPIO_Init+0x334>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02b      	beq.n	80030ee <HAL_GPIO_Init+0x236>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a55      	ldr	r2, [pc, #340]	; (80031f0 <HAL_GPIO_Init+0x338>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x232>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <HAL_GPIO_Init+0x33c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x22e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a53      	ldr	r2, [pc, #332]	; (80031f8 <HAL_GPIO_Init+0x340>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x22a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_GPIO_Init+0x344>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x226>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a51      	ldr	r2, [pc, #324]	; (8003200 <HAL_GPIO_Init+0x348>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x222>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a50      	ldr	r2, [pc, #320]	; (8003204 <HAL_GPIO_Init+0x34c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x21e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_GPIO_Init+0x350>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x21a>
 80030ce:	2309      	movs	r3, #9
 80030d0:	e012      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030d2:	230a      	movs	r3, #10
 80030d4:	e010      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030d6:	2308      	movs	r3, #8
 80030d8:	e00e      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030da:	2307      	movs	r3, #7
 80030dc:	e00c      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030de:	2306      	movs	r3, #6
 80030e0:	e00a      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030e2:	2305      	movs	r3, #5
 80030e4:	e008      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030ea:	2303      	movs	r3, #3
 80030ec:	e004      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x240>
 80030f6:	2300      	movs	r3, #0
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f002 0203 	and.w	r2, r2, #3
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	4093      	lsls	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003108:	4935      	ldr	r1, [pc, #212]	; (80031e0 <HAL_GPIO_Init+0x328>)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_GPIO_Init+0x354>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a34      	ldr	r2, [pc, #208]	; (800320c <HAL_GPIO_Init+0x354>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_GPIO_Init+0x354>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_GPIO_Init+0x354>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_GPIO_Init+0x354>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <HAL_GPIO_Init+0x354>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_GPIO_Init+0x354>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_GPIO_Init+0x354>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3301      	adds	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	f67f ae86 	bls.w	8002ed8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40021400 	.word	0x40021400
 80031fc:	40021800 	.word	0x40021800
 8003200:	40021c00 	.word	0x40021c00
 8003204:	40022000 	.word	0x40022000
 8003208:	40022400 	.word	0x40022400
 800320c:	40013c00 	.word	0x40013c00

08003210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e07f      	b.n	8003322 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff f826 	bl	8002288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e006      	b.n	8003298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d104      	bne.n	80032aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_I2C_Init+0x11c>)
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69d9      	ldr	r1, [r3, #28]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	02008000 	.word	0x02008000

08003330 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
 8003340:	4613      	mov	r3, r2
 8003342:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	f040 80da 	bne.w	8003506 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_I2C_Master_Transmit+0x30>
 800335c:	2302      	movs	r3, #2
 800335e:	e0d3      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1d8>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003368:	f7ff fada 	bl	8002920 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2319      	movs	r3, #25
 8003374:	2201      	movs	r2, #1
 8003376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fefb 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0be      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2221      	movs	r2, #33	; 0x21
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2210      	movs	r2, #16
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	893a      	ldrh	r2, [r7, #8]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2bff      	cmp	r3, #255	; 0xff
 80033ba:	d90e      	bls.n	80033da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	22ff      	movs	r2, #255	; 0xff
 80033c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	8979      	ldrh	r1, [r7, #10]
 80033ca:	4b51      	ldr	r3, [pc, #324]	; (8003510 <HAL_I2C_Master_Transmit+0x1e0>)
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 f8e6 	bl	80045a4 <I2C_TransferConfig>
 80033d8:	e06c      	b.n	80034b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	8979      	ldrh	r1, [r7, #10]
 80033ec:	4b48      	ldr	r3, [pc, #288]	; (8003510 <HAL_I2C_Master_Transmit+0x1e0>)
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f001 f8d5 	bl	80045a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033fa:	e05b      	b.n	80034b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	6a39      	ldr	r1, [r7, #32]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fef8 	bl	80041f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e07b      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d034      	beq.n	80034b4 <HAL_I2C_Master_Transmit+0x184>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d130      	bne.n	80034b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fe8a 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04d      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2bff      	cmp	r3, #255	; 0xff
 8003474:	d90e      	bls.n	8003494 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	b2da      	uxtb	r2, r3
 8003482:	8979      	ldrh	r1, [r7, #10]
 8003484:	2300      	movs	r3, #0
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f001 f889 	bl	80045a4 <I2C_TransferConfig>
 8003492:	e00f      	b.n	80034b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 f878 	bl	80045a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d19e      	bne.n	80033fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	6a39      	ldr	r1, [r7, #32]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fed7 	bl	8004276 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e01a      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2220      	movs	r2, #32
 80034d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_I2C_Master_Transmit+0x1e4>)
 80034e6:	400b      	ands	r3, r1
 80034e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	80002000 	.word	0x80002000
 8003514:	fe00e800 	.word	0xfe00e800

08003518 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	461a      	mov	r2, r3
 8003524:	460b      	mov	r3, r1
 8003526:	817b      	strh	r3, [r7, #10]
 8003528:	4613      	mov	r3, r2
 800352a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	f040 80db 	bne.w	80036f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_I2C_Master_Receive+0x30>
 8003544:	2302      	movs	r3, #2
 8003546:	e0d4      	b.n	80036f2 <HAL_I2C_Master_Receive+0x1da>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003550:	f7ff f9e6 	bl	8002920 <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2319      	movs	r3, #25
 800355c:	2201      	movs	r2, #1
 800355e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fe07 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0bf      	b.n	80036f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2222      	movs	r2, #34	; 0x22
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2210      	movs	r2, #16
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	893a      	ldrh	r2, [r7, #8]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2bff      	cmp	r3, #255	; 0xff
 80035a2:	d90e      	bls.n	80035c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	22ff      	movs	r2, #255	; 0xff
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	4b52      	ldr	r3, [pc, #328]	; (80036fc <HAL_I2C_Master_Receive+0x1e4>)
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fff2 	bl	80045a4 <I2C_TransferConfig>
 80035c0:	e06d      	b.n	800369e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	8979      	ldrh	r1, [r7, #10]
 80035d4:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_I2C_Master_Receive+0x1e4>)
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 ffe1 	bl	80045a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035e2:	e05c      	b.n	800369e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	6a39      	ldr	r1, [r7, #32]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fe81 	bl	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e07c      	b.n	80036f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d034      	beq.n	800369e <HAL_I2C_Master_Receive+0x186>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d130      	bne.n	800369e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fd95 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e04d      	b.n	80036f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2bff      	cmp	r3, #255	; 0xff
 800365e:	d90e      	bls.n	800367e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	22ff      	movs	r2, #255	; 0xff
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	b2da      	uxtb	r2, r3
 800366c:	8979      	ldrh	r1, [r7, #10]
 800366e:	2300      	movs	r3, #0
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 ff94 	bl	80045a4 <I2C_TransferConfig>
 800367c:	e00f      	b.n	800369e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	b2da      	uxtb	r2, r3
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 ff83 	bl	80045a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d19d      	bne.n	80035e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	6a39      	ldr	r1, [r7, #32]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fde2 	bl	8004276 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e01a      	b.n	80036f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2220      	movs	r2, #32
 80036c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_I2C_Master_Receive+0x1e8>)
 80036d0:	400b      	ands	r3, r1
 80036d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	80002400 	.word	0x80002400
 8003700:	fe00e800 	.word	0xfe00e800

08003704 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
  }
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	09db      	lsrs	r3, r3, #7
 8003760:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800377c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	0a9b      	lsrs	r3, r3, #10
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	09db      	lsrs	r3, r3, #7
 800378e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f043 0208 	orr.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	0a5b      	lsrs	r3, r3, #9
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	09db      	lsrs	r3, r3, #7
 80037bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0202 	orr.w	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 030b 	and.w	r3, r3, #11
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fb89 	bl	8003f04 <I2C_ITError>
  }
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
 800382e:	4613      	mov	r3, r2
 8003830:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <I2C_Slave_ISR_IT+0x24>
 800389a:	2302      	movs	r3, #2
 800389c:	e0ec      	b.n	8003a78 <I2C_Slave_ISR_IT+0x1fe>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f9bf 	bl	8003c44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d04d      	beq.n	800396e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d047      	beq.n	800396e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d128      	bne.n	800393a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b28      	cmp	r3, #40	; 0x28
 80038f2:	d108      	bne.n	8003906 <I2C_Slave_ISR_IT+0x8c>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038fa:	d104      	bne.n	8003906 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 faaa 	bl	8003e58 <I2C_ITListenCplt>
 8003904:	e032      	b.n	800396c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b29      	cmp	r3, #41	; 0x29
 8003910:	d10e      	bne.n	8003930 <I2C_Slave_ISR_IT+0xb6>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003918:	d00a      	beq.n	8003930 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fbe5 	bl	80040f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f92d 	bl	8003b88 <I2C_ITSlaveSeqCplt>
 800392e:	e01d      	b.n	800396c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003938:	e096      	b.n	8003a68 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f043 0204 	orr.w	r2, r3, #4
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <I2C_Slave_ISR_IT+0xe4>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395a:	f040 8085 	bne.w	8003a68 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 facd 	bl	8003f04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800396a:	e07d      	b.n	8003a68 <I2C_Slave_ISR_IT+0x1ee>
 800396c:	e07c      	b.n	8003a68 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d030      	beq.n	80039dc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02a      	beq.n	80039dc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d018      	beq.n	80039c2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d14f      	bne.n	8003a6c <I2C_Slave_ISR_IT+0x1f2>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039d2:	d04b      	beq.n	8003a6c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f8d7 	bl	8003b88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80039da:	e047      	b.n	8003a6c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f842 	bl	8003a80 <I2C_ITAddrCplt>
 80039fc:	e037      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d031      	beq.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02b      	beq.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d018      	beq.n	8003a52 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a50:	e00d      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a58:	d002      	beq.n	8003a60 <I2C_Slave_ISR_IT+0x1e6>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f891 	bl	8003b88 <I2C_ITSlaveSeqCplt>
 8003a66:	e002      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003a6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a96:	2b28      	cmp	r3, #40	; 0x28
 8003a98:	d16a      	bne.n	8003b70 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ab8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ad4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d138      	bne.n	8003b50 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	09db      	lsrs	r3, r3, #7
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	89bb      	ldrh	r3, [r7, #12]
 8003ae6:	4053      	eors	r3, r2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f003 0306 	and.w	r3, r3, #6
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11c      	bne.n	8003b2c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d13b      	bne.n	8003b80 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2208      	movs	r2, #8
 8003b14:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b1e:	89ba      	ldrh	r2, [r7, #12]
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fe7c 	bl	8003822 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b2a:	e029      	b.n	8003b80 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003b2c:	893b      	ldrh	r3, [r7, #8]
 8003b2e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fd67 	bl	8004608 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b42:	89ba      	ldrh	r2, [r7, #12]
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fe6a 	bl	8003822 <HAL_I2C_AddrCallback>
}
 8003b4e:	e017      	b.n	8003b80 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fd57 	bl	8004608 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b62:	89ba      	ldrh	r2, [r7, #12]
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fe5a 	bl	8003822 <HAL_I2C_AddrCallback>
}
 8003b6e:	e007      	b.n	8003b80 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2208      	movs	r2, #8
 8003b76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	0b9b      	lsrs	r3, r3, #14
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e00d      	b.n	8003bda <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0bdb      	lsrs	r3, r3, #15
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b29      	cmp	r3, #41	; 0x29
 8003be4:	d112      	bne.n	8003c0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2228      	movs	r2, #40	; 0x28
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fd06 	bl	8004608 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fdf8 	bl	80037fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c0a:	e017      	b.n	8003c3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b2a      	cmp	r3, #42	; 0x2a
 8003c16:	d111      	bne.n	8003c3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2228      	movs	r2, #40	; 0x28
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2222      	movs	r2, #34	; 0x22
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c26:	2102      	movs	r1, #2
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fced 	bl	8004608 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fde9 	bl	800380e <HAL_I2C_SlaveRxCpltCallback>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2220      	movs	r2, #32
 8003c68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b21      	cmp	r3, #33	; 0x21
 8003c6e:	d002      	beq.n	8003c76 <I2C_ITSlaveCplt+0x32>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b29      	cmp	r3, #41	; 0x29
 8003c74:	d108      	bne.n	8003c88 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c76:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fcc4 	bl	8004608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
 8003c86:	e00d      	b.n	8003ca4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b22      	cmp	r3, #34	; 0x22
 8003c8c:	d002      	beq.n	8003c94 <I2C_ITSlaveCplt+0x50>
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b2a      	cmp	r3, #42	; 0x2a
 8003c92:	d107      	bne.n	8003ca4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c94:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fcb5 	bl	8004608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2222      	movs	r2, #34	; 0x22
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <I2C_ITSlaveCplt+0x20c>)
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa14 	bl	80040f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	0b9b      	lsrs	r3, r3, #14
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d020      	beq.n	8003d30 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfc:	e018      	b.n	8003d30 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	0bdb      	lsrs	r3, r3, #15
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d012      	beq.n	8003d30 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d006      	beq.n	8003d30 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	f043 0204 	orr.w	r2, r3, #4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8a7 	bl	8003f04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b28      	cmp	r3, #40	; 0x28
 8003dc0:	d141      	bne.n	8003e46 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003dc2:	6979      	ldr	r1, [r7, #20]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f847 	bl	8003e58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dca:	e03c      	b.n	8003e46 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd4:	d014      	beq.n	8003e00 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fed6 	bl	8003b88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <I2C_ITSlaveCplt+0x210>)
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fd20 	bl	800383e <HAL_I2C_ListenCpltCallback>
}
 8003dfe:	e022      	b.n	8003e46 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b22      	cmp	r3, #34	; 0x22
 8003e0a:	d10e      	bne.n	8003e2a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fcf3 	bl	800380e <HAL_I2C_SlaveRxCpltCallback>
}
 8003e28:	e00d      	b.n	8003e46 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fcda 	bl	80037fa <HAL_I2C_SlaveTxCpltCallback>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	fe00e800 	.word	0xfe00e800
 8003e54:	ffff0000 	.word	0xffff0000

08003e58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <I2C_ITListenCplt+0xa8>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d022      	beq.n	8003ed6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ed6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fb94 	bl	8004608 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fca4 	bl	800383e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	ffff0000 	.word	0xffff0000

08003f04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <I2C_ITError+0x194>)
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b28      	cmp	r3, #40	; 0x28
 8003f3a:	d005      	beq.n	8003f48 <I2C_ITError+0x44>
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b29      	cmp	r3, #41	; 0x29
 8003f40:	d002      	beq.n	8003f48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b2a      	cmp	r3, #42	; 0x2a
 8003f46:	d10b      	bne.n	8003f60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f48:	2103      	movs	r1, #3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fb5c 	bl	8004608 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2228      	movs	r2, #40	; 0x28
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a50      	ldr	r2, [pc, #320]	; (800409c <I2C_ITError+0x198>)
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5e:	e011      	b.n	8003f84 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f60:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb4f 	bl	8004608 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b60      	cmp	r3, #96	; 0x60
 8003f74:	d003      	beq.n	8003f7e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d039      	beq.n	8004006 <I2C_ITError+0x102>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b11      	cmp	r3, #17
 8003f96:	d002      	beq.n	8003f9e <I2C_ITError+0x9a>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b21      	cmp	r3, #33	; 0x21
 8003f9c:	d133      	bne.n	8004006 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d107      	bne.n	8003fbe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe ff6a 	bl	8002e9c <HAL_DMA_GetState>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d017      	beq.n	8003ffe <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <I2C_ITError+0x19c>)
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe ff38 	bl	8002e58 <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04d      	beq.n	800408a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ffc:	e045      	b.n	800408a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f850 	bl	80040a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004004:	e041      	b.n	800408a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d039      	beq.n	8004082 <I2C_ITError+0x17e>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b12      	cmp	r3, #18
 8004012:	d002      	beq.n	800401a <I2C_ITError+0x116>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b22      	cmp	r3, #34	; 0x22
 8004018:	d133      	bne.n	8004082 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d107      	bne.n	800403a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004038:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe ff2c 	bl	8002e9c <HAL_DMA_GetState>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d017      	beq.n	800407a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <I2C_ITError+0x19c>)
 8004050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fefa 	bl	8002e58 <HAL_DMA_Abort_IT>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004074:	4610      	mov	r0, r2
 8004076:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004078:	e009      	b.n	800408e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f812 	bl	80040a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004080:	e005      	b.n	800408e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f80e 	bl	80040a4 <I2C_TreatErrorCallback>
  }
}
 8004088:	e002      	b.n	8004090 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800408e:	bf00      	nop
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	ffff0000 	.word	0xffff0000
 800409c:	0800387b 	.word	0x0800387b
 80040a0:	0800413b 	.word	0x0800413b

080040a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d10e      	bne.n	80040d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fbc9 	bl	8003866 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040d4:	e009      	b.n	80040ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fbb4 	bl	8003852 <HAL_I2C_ErrorCallback>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d103      	bne.n	8004110 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d007      	beq.n	800412e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	619a      	str	r2, [r3, #24]
  }
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2200      	movs	r2, #0
 8004156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	2200      	movs	r2, #0
 8004166:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff ff9b 	bl	80040a4 <I2C_TreatErrorCallback>
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004186:	e022      	b.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d01e      	beq.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7fe fbc6 	bl	8002920 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d113      	bne.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00f      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0cd      	beq.n	8004188 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004202:	e02c      	b.n	800425e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f8eb 	bl	80043e4 <I2C_IsErrorOccurred>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e02a      	b.n	800426e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d01e      	beq.n	800425e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004220:	f7fe fb7e 	bl	8002920 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d113      	bne.n	800425e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e007      	b.n	800426e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b02      	cmp	r3, #2
 800426a:	d1cb      	bne.n	8004204 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004282:	e028      	b.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f8ab 	bl	80043e4 <I2C_IsErrorOccurred>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e026      	b.n	80042e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004298:	f7fe fb42 	bl	8002920 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d302      	bcc.n	80042ae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d113      	bne.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f043 0220 	orr.w	r2, r3, #32
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e007      	b.n	80042e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d1cf      	bne.n	8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042fc:	e064      	b.n	80043c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f86e 	bl	80043e4 <I2C_IsErrorOccurred>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e062      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b20      	cmp	r3, #32
 800431e:	d138      	bne.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d105      	bne.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e04e      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d107      	bne.n	8004358 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2210      	movs	r2, #16
 800434e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2204      	movs	r2, #4
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
 8004356:	e002      	b.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2220      	movs	r2, #32
 8004364:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004372:	400b      	ands	r3, r1
 8004374:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e022      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe fac5 	bl	8002920 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10f      	bne.n	80043c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d193      	bne.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	fe00e800 	.word	0xfe00e800

080043e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d068      	beq.n	80044e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2210      	movs	r2, #16
 8004416:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004418:	e049      	b.n	80044ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d045      	beq.n	80044ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fe fa7d 	bl	8002920 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <I2C_IsErrorOccurred+0x54>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d13a      	bne.n	80044ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004442:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800444a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445a:	d121      	bne.n	80044a0 <I2C_IsErrorOccurred+0xbc>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004462:	d01d      	beq.n	80044a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	2b20      	cmp	r3, #32
 8004468:	d01a      	beq.n	80044a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004478:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800447a:	f7fe fa51 	bl	8002920 <HAL_GetTick>
 800447e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004480:	e00e      	b.n	80044a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004482:	f7fe fa4d 	bl	8002920 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b19      	cmp	r3, #25
 800448e:	d907      	bls.n	80044a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f043 0320 	orr.w	r3, r3, #32
 8004496:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800449e:	e006      	b.n	80044ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d1e9      	bne.n	8004482 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d003      	beq.n	80044c4 <I2C_IsErrorOccurred+0xe0>
 80044bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0aa      	beq.n	800441a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d103      	bne.n	80044d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004504:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f043 0308 	orr.w	r3, r3, #8
 800451c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004526:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004548:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01c      	beq.n	8004592 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff fdca 	bl	80040f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <I2C_IsErrorOccurred+0x1bc>)
 800456a:	400b      	ands	r3, r1
 800456c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004596:	4618      	mov	r0, r3
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	fe00e800 	.word	0xfe00e800

080045a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	817b      	strh	r3, [r7, #10]
 80045b2:	4613      	mov	r3, r2
 80045b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045bc:	7a7b      	ldrb	r3, [r7, #9]
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	0d5b      	lsrs	r3, r3, #21
 80045de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <I2C_TransferConfig+0x60>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	43db      	mvns	r3, r3
 80045e8:	ea02 0103 	and.w	r1, r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	03ff63ff 	.word	0x03ff63ff

08004608 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00f      	beq.n	8004642 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004628:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004636:	2b28      	cmp	r3, #40	; 0x28
 8004638:	d003      	beq.n	8004642 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004640:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00f      	beq.n	800466c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004652:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004660:	2b28      	cmp	r3, #40	; 0x28
 8004662:	d003      	beq.n	800466c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800466a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800466c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004670:	2b00      	cmp	r3, #0
 8004672:	da03      	bge.n	800467c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800467a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	2b10      	cmp	r3, #16
 8004680:	d103      	bne.n	800468a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	2b20      	cmp	r3, #32
 800468e:	d103      	bne.n	8004698 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f043 0320 	orr.w	r3, r3, #32
 8004696:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d103      	bne.n	80046a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	43da      	mvns	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d138      	bne.n	800474c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e032      	b.n	800474e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004716:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b20      	cmp	r3, #32
 800476e:	d139      	bne.n	80047e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800477a:	2302      	movs	r3, #2
 800477c:	e033      	b.n	80047e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2224      	movs	r2, #36	; 0x24
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	4b23      	ldr	r3, [pc, #140]	; (800488c <HAL_PWREx_EnableOverDrive+0x98>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	4a22      	ldr	r2, [pc, #136]	; (800488c <HAL_PWREx_EnableOverDrive+0x98>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	; 0x40
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <HAL_PWREx_EnableOverDrive+0x98>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004822:	f7fe f87d 	bl	8002920 <HAL_GetTick>
 8004826:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004828:	e009      	b.n	800483e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800482a:	f7fe f879 	bl	8002920 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004838:	d901      	bls.n	800483e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e022      	b.n	8004884 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d1ee      	bne.n	800482a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004858:	f7fe f862 	bl	8002920 <HAL_GetTick>
 800485c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800485e:	e009      	b.n	8004874 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004860:	f7fe f85e 	bl	8002920 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800486e:	d901      	bls.n	8004874 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e007      	b.n	8004884 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004880:	d1ee      	bne.n	8004860 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	40007000 	.word	0x40007000

08004894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e291      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8087 	beq.w	80049c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b8:	4b96      	ldr	r3, [pc, #600]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d00c      	beq.n	80048de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c4:	4b93      	ldr	r3, [pc, #588]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
 80048d0:	4b90      	ldr	r3, [pc, #576]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048de:	4b8d      	ldr	r3, [pc, #564]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x130>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d168      	bne.n	80049c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e26b      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x7a>
 8004900:	4b84      	ldr	r3, [pc, #528]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a83      	ldr	r2, [pc, #524]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e02e      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x9c>
 8004916:	4b7f      	ldr	r3, [pc, #508]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7e      	ldr	r2, [pc, #504]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b7c      	ldr	r3, [pc, #496]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xc0>
 800493a:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a72      	ldr	r2, [pc, #456]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004954:	4b6f      	ldr	r3, [pc, #444]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd ffd4 	bl	8002920 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fd ffd0 	bl	8002920 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e21f      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xe8>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd ffc0 	bl	8002920 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fd ffbc 	bl	8002920 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e20b      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x110>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d069      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d2:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b4d      	ldr	r3, [pc, #308]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x190>
 80049ea:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1df      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	493d      	ldr	r1, [pc, #244]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e040      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d023      	beq.n	8004a74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a38      	ldr	r2, [pc, #224]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd ff72 	bl	8002920 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fd ff6e 	bl	8002920 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1bd      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4929      	ldr	r1, [pc, #164]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	e018      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd ff4e 	bl	8002920 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a88:	f7fd ff4a 	bl	8002920 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e199      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d038      	beq.n	8004b24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d019      	beq.n	8004aee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fd ff2b 	bl	8002920 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fd ff27 	bl	8002920 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e176      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x23a>
 8004aec:	e01a      	b.n	8004b24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fd ff11 	bl	8002920 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fd ff0d 	bl	8002920 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d903      	bls.n	8004b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e15c      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
 8004b14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b91      	ldr	r3, [pc, #580]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ee      	bne.n	8004b02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a4 	beq.w	8004c7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b8b      	ldr	r3, [pc, #556]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4b88      	ldr	r3, [pc, #544]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4a87      	ldr	r2, [pc, #540]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4a:	4b85      	ldr	r3, [pc, #532]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5a:	4b82      	ldr	r3, [pc, #520]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d118      	bne.n	8004b98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b66:	4b7f      	ldr	r3, [pc, #508]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7e      	ldr	r2, [pc, #504]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b72:	f7fd fed5 	bl	8002920 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7a:	f7fd fed1 	bl	8002920 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b64      	cmp	r3, #100	; 0x64
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e120      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8c:	4b75      	ldr	r3, [pc, #468]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <HAL_RCC_OscConfig+0x31a>
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bac:	e02d      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x33c>
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a69      	ldr	r2, [pc, #420]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a66      	ldr	r2, [pc, #408]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	e01c      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x35e>
 8004bd8:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a60      	ldr	r2, [pc, #384]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a5d      	ldr	r2, [pc, #372]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bf2:	4b5b      	ldr	r3, [pc, #364]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a5a      	ldr	r2, [pc, #360]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	4b58      	ldr	r3, [pc, #352]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	4a57      	ldr	r2, [pc, #348]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d015      	beq.n	8004c3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fe85 	bl	8002920 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fd fe81 	bl	8002920 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0ce      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCC_OscConfig+0x386>
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fe6f 	bl	8002920 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fd fe6b 	bl	8002920 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0b8      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5c:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ee      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80a4 	beq.w	8004dcc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d06b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d149      	bne.n	8004d2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a30      	ldr	r2, [pc, #192]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fd fe3c 	bl	8002920 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fd fe38 	bl	8002920 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e087      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd fe0c 	bl	8002920 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd fe08 	bl	8002920 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e057      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x478>
 8004d2a:	e04f      	b.n	8004dcc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fdf2 	bl	8002920 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fd fdee 	bl	8002920 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e03d      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4ac>
 8004d5e:	e035      	b.n	8004dcc <HAL_RCC_OscConfig+0x538>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <HAL_RCC_OscConfig+0x544>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d028      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d121      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d11a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	3b01      	subs	r3, #1
 8004db2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0d0      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d910      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 020f 	bic.w	r2, r3, #15
 8004e0a:	4965      	ldr	r1, [pc, #404]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b63      	ldr	r3, [pc, #396]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0b8      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e3c:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a58      	ldr	r2, [pc, #352]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e54:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a52      	ldr	r2, [pc, #328]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	494d      	ldr	r1, [pc, #308]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d040      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b47      	ldr	r3, [pc, #284]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d115      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e07f      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e073      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06b      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4936      	ldr	r1, [pc, #216]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fd fd26 	bl	8002920 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fd fd22 	bl	8002920 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e053      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d210      	bcs.n	8004f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 020f 	bic.w	r2, r3, #15
 8004f16:	4922      	ldr	r1, [pc, #136]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e032      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4916      	ldr	r1, [pc, #88]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f6e:	f000 f821 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	490a      	ldr	r1, [pc, #40]	; (8004fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8004f80:	5ccb      	ldrb	r3, [r1, r3]
 8004f82:	fa22 f303 	lsr.w	r3, r2, r3
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <HAL_RCC_ClockConfig+0x1d0>)
 8004f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fc82 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023c00 	.word	0x40023c00
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	08012cd4 	.word	0x08012cd4
 8004fac:	2000000c 	.word	0x2000000c
 8004fb0:	20000198 	.word	0x20000198

08004fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b094      	sub	sp, #80	; 0x50
 8004fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fcc:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	f200 80e1 	bhi.w	80051a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x3a>
 8004fe6:	e0db      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b73      	ldr	r3, [pc, #460]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fec:	e0db      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fee:	4b73      	ldr	r3, [pc, #460]	; (80051bc <HAL_RCC_GetSysClockFreq+0x208>)
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ff2:	e0d8      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff4:	4b6f      	ldr	r3, [pc, #444]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ffe:	4b6d      	ldr	r3, [pc, #436]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d063      	beq.n	80050d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500a:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	2200      	movs	r2, #0
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38
 8005014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
 800501e:	2300      	movs	r3, #0
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
 8005022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f04f 0000 	mov.w	r0, #0
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	0159      	lsls	r1, r3, #5
 8005034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005038:	0150      	lsls	r0, r2, #5
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4621      	mov	r1, r4
 8005040:	1a51      	subs	r1, r2, r1
 8005042:	6139      	str	r1, [r7, #16]
 8005044:	4629      	mov	r1, r5
 8005046:	eb63 0301 	sbc.w	r3, r3, r1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005058:	4659      	mov	r1, fp
 800505a:	018b      	lsls	r3, r1, #6
 800505c:	4651      	mov	r1, sl
 800505e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005062:	4651      	mov	r1, sl
 8005064:	018a      	lsls	r2, r1, #6
 8005066:	4651      	mov	r1, sl
 8005068:	ebb2 0801 	subs.w	r8, r2, r1
 800506c:	4659      	mov	r1, fp
 800506e:	eb63 0901 	sbc.w	r9, r3, r1
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800507e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005086:	4690      	mov	r8, r2
 8005088:	4699      	mov	r9, r3
 800508a:	4623      	mov	r3, r4
 800508c:	eb18 0303 	adds.w	r3, r8, r3
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	462b      	mov	r3, r5
 8005094:	eb49 0303 	adc.w	r3, r9, r3
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050a6:	4629      	mov	r1, r5
 80050a8:	024b      	lsls	r3, r1, #9
 80050aa:	4621      	mov	r1, r4
 80050ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050b0:	4621      	mov	r1, r4
 80050b2:	024a      	lsls	r2, r1, #9
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ba:	2200      	movs	r2, #0
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c4:	f7fb fdf0 	bl	8000ca8 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4613      	mov	r3, r2
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	e058      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d2:	4b38      	ldr	r3, [pc, #224]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	2200      	movs	r2, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	4611      	mov	r1, r2
 80050de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
 80050e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	f04f 0000 	mov.w	r0, #0
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	0159      	lsls	r1, r3, #5
 80050fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050fe:	0150      	lsls	r0, r2, #5
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4641      	mov	r1, r8
 8005106:	ebb2 0a01 	subs.w	sl, r2, r1
 800510a:	4649      	mov	r1, r9
 800510c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800511c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005124:	ebb2 040a 	subs.w	r4, r2, sl
 8005128:	eb63 050b 	sbc.w	r5, r3, fp
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	00eb      	lsls	r3, r5, #3
 8005136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513a:	00e2      	lsls	r2, r4, #3
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	4643      	mov	r3, r8
 8005142:	18e3      	adds	r3, r4, r3
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	464b      	mov	r3, r9
 8005148:	eb45 0303 	adc.w	r3, r5, r3
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800515a:	4629      	mov	r1, r5
 800515c:	028b      	lsls	r3, r1, #10
 800515e:	4621      	mov	r1, r4
 8005160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005164:	4621      	mov	r1, r4
 8005166:	028a      	lsls	r2, r1, #10
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516e:	2200      	movs	r2, #0
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	61fa      	str	r2, [r7, #28]
 8005174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005178:	f7fb fd96 	bl	8000ca8 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4613      	mov	r3, r2
 8005182:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	3301      	adds	r3, #1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800519e:	e002      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3750      	adds	r7, #80	; 0x50
 80051ac:	46bd      	mov	sp, r7
 80051ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	007a1200 	.word	0x007a1200

080051c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c6:	681b      	ldr	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000000c 	.word	0x2000000c

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051dc:	f7ff fff0 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0a9b      	lsrs	r3, r3, #10
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	08012ce4 	.word	0x08012ce4

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005204:	f7ff ffdc 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0b5b      	lsrs	r3, r3, #13
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	08012ce4 	.word	0x08012ce4

08005228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005250:	4b69      	ldr	r3, [pc, #420]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a68      	ldr	r2, [pc, #416]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800525a:	6093      	str	r3, [r2, #8]
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	4964      	ldr	r1, [pc, #400]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005272:	2301      	movs	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d017      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005282:	4b5d      	ldr	r3, [pc, #372]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	4959      	ldr	r1, [pc, #356]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a0:	d101      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d017      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052be:	4b4e      	ldr	r3, [pc, #312]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	494a      	ldr	r1, [pc, #296]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052dc:	d101      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 808b 	beq.w	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800530c:	4b3a      	ldr	r3, [pc, #232]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	4a39      	ldr	r2, [pc, #228]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005316:	6413      	str	r3, [r2, #64]	; 0x40
 8005318:	4b37      	ldr	r3, [pc, #220]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005324:	4b35      	ldr	r3, [pc, #212]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a34      	ldr	r2, [pc, #208]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fd faf6 	bl	8002920 <HAL_GetTick>
 8005334:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fd faf2 	bl	8002920 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e357      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800534a:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005356:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d035      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d02e      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005374:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537e:	4b1e      	ldr	r3, [pc, #120]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005394:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d114      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fd faba 	bl	8002920 <HAL_GetTick>
 80053ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fd fab6 	bl	8002920 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e319      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ee      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053de:	d111      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053ee:	400b      	ands	r3, r1
 80053f0:	4901      	ldr	r1, [pc, #4]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	e00b      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	0ffffcff 	.word	0x0ffffcff
 8005404:	4baa      	ldr	r3, [pc, #680]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4aa9      	ldr	r2, [pc, #676]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	4ba7      	ldr	r3, [pc, #668]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541c:	49a4      	ldr	r1, [pc, #656]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	4313      	orrs	r3, r2
 8005420:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800542e:	4ba0      	ldr	r3, [pc, #640]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	4a9e      	ldr	r2, [pc, #632]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800543e:	4b9c      	ldr	r3, [pc, #624]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4999      	ldr	r1, [pc, #612]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545c:	4b94      	ldr	r3, [pc, #592]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546a:	4991      	ldr	r1, [pc, #580]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800547e:	4b8c      	ldr	r3, [pc, #560]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548c:	4988      	ldr	r1, [pc, #544]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a0:	4b83      	ldr	r3, [pc, #524]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	4980      	ldr	r1, [pc, #512]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4977      	ldr	r1, [pc, #476]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054e4:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	496f      	ldr	r1, [pc, #444]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005506:	4b6a      	ldr	r3, [pc, #424]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	f023 020c 	bic.w	r2, r3, #12
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	4966      	ldr	r1, [pc, #408]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005528:	4b61      	ldr	r3, [pc, #388]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	495e      	ldr	r1, [pc, #376]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800554a:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	4955      	ldr	r1, [pc, #340]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	494d      	ldr	r1, [pc, #308]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800558e:	4b48      	ldr	r3, [pc, #288]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4944      	ldr	r1, [pc, #272]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055b0:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	493c      	ldr	r1, [pc, #240]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055d2:	4b37      	ldr	r3, [pc, #220]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	4933      	ldr	r1, [pc, #204]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005602:	492b      	ldr	r1, [pc, #172]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005616:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005624:	4922      	ldr	r1, [pc, #136]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005634:	d101      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005656:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005664:	4912      	ldr	r1, [pc, #72]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005678:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005688:	4909      	ldr	r1, [pc, #36]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d006      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80d9 	beq.w	8005856 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056a4:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a01      	ldr	r2, [pc, #4]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ae:	e001      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80056b0:	40023800 	.word	0x40023800
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fd f933 	bl	8002920 <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056be:	f7fd f92f 	bl	8002920 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b64      	cmp	r3, #100	; 0x64
 80056ca:	d901      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e194      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d0:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d021      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056f0:	4b64      	ldr	r3, [pc, #400]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	0c1b      	lsrs	r3, r3, #16
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005704:	0e1b      	lsrs	r3, r3, #24
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	019a      	lsls	r2, r3, #6
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	071b      	lsls	r3, r3, #28
 8005724:	4957      	ldr	r1, [pc, #348]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02e      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005756:	d129      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005758:	4b4a      	ldr	r3, [pc, #296]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005766:	4b47      	ldr	r3, [pc, #284]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	0f1b      	lsrs	r3, r3, #28
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	019a      	lsls	r2, r3, #6
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	431a      	orrs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	071b      	lsls	r3, r3, #28
 800578c:	493d      	ldr	r1, [pc, #244]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005794:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579a:	f023 021f 	bic.w	r2, r3, #31
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	3b01      	subs	r3, #1
 80057a4:	4937      	ldr	r1, [pc, #220]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01d      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057b8:	4b32      	ldr	r3, [pc, #200]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057be:	0e1b      	lsrs	r3, r3, #24
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057c6:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	0f1b      	lsrs	r3, r3, #28
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	019a      	lsls	r2, r3, #6
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	431a      	orrs	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	071b      	lsls	r3, r3, #28
 80057ec:	4925      	ldr	r1, [pc, #148]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	019a      	lsls	r2, r3, #6
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	071b      	lsls	r3, r3, #28
 800581c:	4919      	ldr	r1, [pc, #100]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005824:	4b17      	ldr	r3, [pc, #92]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005830:	f7fd f876 	bl	8002920 <HAL_GetTick>
 8005834:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005838:	f7fd f872 	bl	8002920 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0d7      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 80cd 	bne.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a08      	ldr	r2, [pc, #32]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586a:	f7fd f859 	bl	8002920 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005872:	f7fd f855 	bl	8002920 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d903      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0ba      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005884:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005888:	4b5e      	ldr	r3, [pc, #376]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005894:	d0ed      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d12a      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058be:	4b51      	ldr	r3, [pc, #324]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058cc:	4b4d      	ldr	r3, [pc, #308]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	0f1b      	lsrs	r3, r3, #28
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	019a      	lsls	r2, r3, #6
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	061b      	lsls	r3, r3, #24
 80058ec:	431a      	orrs	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	071b      	lsls	r3, r3, #28
 80058f2:	4944      	ldr	r1, [pc, #272]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058fa:	4b42      	ldr	r3, [pc, #264]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	493d      	ldr	r1, [pc, #244]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d022      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005928:	d11d      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800592a:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	0e1b      	lsrs	r3, r3, #24
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005938:	4b32      	ldr	r3, [pc, #200]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	0f1b      	lsrs	r3, r3, #28
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	019a      	lsls	r2, r3, #6
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	041b      	lsls	r3, r3, #16
 8005952:	431a      	orrs	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	061b      	lsls	r3, r3, #24
 8005958:	431a      	orrs	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	071b      	lsls	r3, r3, #28
 800595e:	4929      	ldr	r1, [pc, #164]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d028      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005972:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	0e1b      	lsrs	r3, r3, #24
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005980:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	0c1b      	lsrs	r3, r3, #16
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	019a      	lsls	r2, r3, #6
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	431a      	orrs	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	071b      	lsls	r3, r3, #28
 80059a6:	4917      	ldr	r1, [pc, #92]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4911      	ldr	r1, [pc, #68]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fc ffa6 	bl	8002920 <HAL_GetTick>
 80059d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059d8:	f7fc ffa2 	bl	8002920 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e007      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f6:	d1ef      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800

08005a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e040      	b.n	8005a9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc fc9c 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2224      	movs	r2, #36	; 0x24
 8005a34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fc66 	bl	8006318 <UART_SetConfig>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e022      	b.n	8005a9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 febe 	bl	80067e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 ff45 	bl	8006924 <UART_CheckIdleState>
 8005a9a:	4603      	mov	r3, r0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d171      	bne.n	8005ba0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_UART_Transmit+0x24>
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e06a      	b.n	8005ba2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2221      	movs	r2, #33	; 0x21
 8005ad8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ada:	f7fc ff21 	bl	8002920 <HAL_GetTick>
 8005ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af8:	d108      	bne.n	8005b0c <HAL_UART_Transmit+0x68>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e003      	b.n	8005b14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b14:	e02c      	b.n	8005b70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 ff36 	bl	8006992 <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e038      	b.n	8005ba2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	3302      	adds	r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	e007      	b.n	8005b5e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1cc      	bne.n	8005b16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	2140      	movs	r1, #64	; 0x40
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 ff03 	bl	8006992 <UART_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e005      	b.n	8005ba2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08a      	sub	sp, #40	; 0x28
 8005bae:	af02      	add	r7, sp, #8
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	f040 80b1 	bne.w	8005d28 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <HAL_UART_Receive+0x28>
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0a9      	b.n	8005d2a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2222      	movs	r2, #34	; 0x22
 8005be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bec:	f7fc fe98 	bl	8002920 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d10e      	bne.n	8005c2a <HAL_UART_Receive+0x80>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <HAL_UART_Receive+0x76>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c1e:	e02d      	b.n	8005c7c <HAL_UART_Receive+0xd2>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c28:	e028      	b.n	8005c7c <HAL_UART_Receive+0xd2>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10d      	bne.n	8005c4e <HAL_UART_Receive+0xa4>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <HAL_UART_Receive+0x9a>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c42:	e01b      	b.n	8005c7c <HAL_UART_Receive+0xd2>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	227f      	movs	r2, #127	; 0x7f
 8005c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c4c:	e016      	b.n	8005c7c <HAL_UART_Receive+0xd2>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c56:	d10d      	bne.n	8005c74 <HAL_UART_Receive+0xca>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <HAL_UART_Receive+0xc0>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	227f      	movs	r2, #127	; 0x7f
 8005c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c68:	e008      	b.n	8005c7c <HAL_UART_Receive+0xd2>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	223f      	movs	r2, #63	; 0x3f
 8005c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Receive+0xd2>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d108      	bne.n	8005ca0 <HAL_UART_Receive+0xf6>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e003      	b.n	8005ca8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ca8:	e032      	b.n	8005d10 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fe6c 	bl	8006992 <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e032      	b.n	8005d2a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	8a7b      	ldrh	r3, [r7, #18]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	3302      	adds	r3, #2
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e00c      	b.n	8005cfe <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	8a7b      	ldrh	r3, [r7, #18]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1c6      	bne.n	8005caa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b0ba      	sub	sp, #232	; 0xe8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d62:	4013      	ands	r3, r2
 8005d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d115      	bne.n	8005d9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00f      	beq.n	8005d9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8297 	beq.w	80062c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
      }
      return;
 8005d9a:	e291      	b.n	80062c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8117 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005db2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005db6:	4b85      	ldr	r3, [pc, #532]	; (8005fcc <HAL_UART_IRQHandler+0x298>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 810a 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d011      	beq.n	8005df0 <HAL_UART_IRQHandler+0xbc>
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de6:	f043 0201 	orr.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d011      	beq.n	8005e20 <HAL_UART_IRQHandler+0xec>
 8005dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e16:	f043 0204 	orr.w	r2, r3, #4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d011      	beq.n	8005e50 <HAL_UART_IRQHandler+0x11c>
 8005e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e46:	f043 0202 	orr.w	r2, r3, #2
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d017      	beq.n	8005e8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e82:	f043 0208 	orr.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d012      	beq.n	8005ebe <HAL_UART_IRQHandler+0x18a>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00c      	beq.n	8005ebe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 81fd 	beq.w	80062c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d04f      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fe01 	bl	8006b1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d141      	bne.n	8005fae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1d9      	bne.n	8005f2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d013      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <HAL_UART_IRQHandler+0x29c>)
 8005f84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fc ff64 	bl	8002e58 <HAL_DMA_Abort_IT>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d017      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e00f      	b.n	8005fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9a0 	bl	80062ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e00b      	b.n	8005fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f99c 	bl	80062ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	e007      	b.n	8005fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f998 	bl	80062ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005fc4:	e17e      	b.n	80062c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc6:	bf00      	nop
    return;
 8005fc8:	e17c      	b.n	80062c4 <HAL_UART_IRQHandler+0x590>
 8005fca:	bf00      	nop
 8005fcc:	04000120 	.word	0x04000120
 8005fd0:	08006be7 	.word	0x08006be7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 814c 	bne.w	8006276 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8145 	beq.w	8006276 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 813e 	beq.w	8006276 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2210      	movs	r2, #16
 8006000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	f040 80b6 	bne.w	800617e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800601e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8150 	beq.w	80062c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800602e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006032:	429a      	cmp	r2, r3
 8006034:	f080 8148 	bcs.w	80062c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800603e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604c:	f000 8086 	beq.w	800615c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800606c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800607a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800607e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1da      	bne.n	8006050 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e1      	bne.n	800609a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e3      	bne.n	80060d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800612a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612c:	f023 0310 	bic.w	r3, r3, #16
 8006130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800613e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006140:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800614c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e4      	bne.n	800611c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	4618      	mov	r0, r3
 8006158:	f7fc fe0e 	bl	8002d78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800616e:	b29b      	uxth	r3, r3
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b29b      	uxth	r3, r3
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8c2 	bl	8006300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800617c:	e0a4      	b.n	80062c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800618a:	b29b      	uxth	r3, r3
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8096 	beq.w	80062cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80061a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8091 	beq.w	80062cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
 80061ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e4      	bne.n	80061aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3308      	adds	r3, #8
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	623b      	str	r3, [r7, #32]
   return(result);
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006204:	633a      	str	r2, [r7, #48]	; 0x30
 8006206:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800620a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e3      	bne.n	80061e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	60fb      	str	r3, [r7, #12]
   return(result);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 0310 	bic.w	r3, r3, #16
 8006240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	69b9      	ldr	r1, [r7, #24]
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	617b      	str	r3, [r7, #20]
   return(result);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e4      	bne.n	800622c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f846 	bl	8006300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006274:	e02a      	b.n	80062cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00e      	beq.n	80062a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01c      	beq.n	80062d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
    }
    return;
 800629e:	e017      	b.n	80062d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <HAL_UART_IRQHandler+0x59e>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fcaa 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 80062be:	e008      	b.n	80062d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80062c0:	bf00      	nop
 80062c2:	e006      	b.n	80062d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80062c4:	bf00      	nop
 80062c6:	e004      	b.n	80062d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80062d0:	bf00      	nop
  }

}
 80062d2:	37e8      	adds	r7, #232	; 0xe8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4ba6      	ldr	r3, [pc, #664]	; (80065dc <UART_SetConfig+0x2c4>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	6979      	ldr	r1, [r7, #20]
 800634c:	430b      	orrs	r3, r1
 800634e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	430a      	orrs	r2, r1
 8006388:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a94      	ldr	r2, [pc, #592]	; (80065e0 <UART_SetConfig+0x2c8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d120      	bne.n	80063d6 <UART_SetConfig+0xbe>
 8006394:	4b93      	ldr	r3, [pc, #588]	; (80065e4 <UART_SetConfig+0x2cc>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d816      	bhi.n	80063d0 <UART_SetConfig+0xb8>
 80063a2:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <UART_SetConfig+0x90>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063bf 	.word	0x080063bf
 80063b4:	080063cb 	.word	0x080063cb
 80063b8:	2301      	movs	r3, #1
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e150      	b.n	8006660 <UART_SetConfig+0x348>
 80063be:	2302      	movs	r3, #2
 80063c0:	77fb      	strb	r3, [r7, #31]
 80063c2:	e14d      	b.n	8006660 <UART_SetConfig+0x348>
 80063c4:	2304      	movs	r3, #4
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e14a      	b.n	8006660 <UART_SetConfig+0x348>
 80063ca:	2308      	movs	r3, #8
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e147      	b.n	8006660 <UART_SetConfig+0x348>
 80063d0:	2310      	movs	r3, #16
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e144      	b.n	8006660 <UART_SetConfig+0x348>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a83      	ldr	r2, [pc, #524]	; (80065e8 <UART_SetConfig+0x2d0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d132      	bne.n	8006446 <UART_SetConfig+0x12e>
 80063e0:	4b80      	ldr	r3, [pc, #512]	; (80065e4 <UART_SetConfig+0x2cc>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f003 030c 	and.w	r3, r3, #12
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d828      	bhi.n	8006440 <UART_SetConfig+0x128>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0xdc>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006441 	.word	0x08006441
 80063fc:	08006441 	.word	0x08006441
 8006400:	08006441 	.word	0x08006441
 8006404:	08006435 	.word	0x08006435
 8006408:	08006441 	.word	0x08006441
 800640c:	08006441 	.word	0x08006441
 8006410:	08006441 	.word	0x08006441
 8006414:	0800642f 	.word	0x0800642f
 8006418:	08006441 	.word	0x08006441
 800641c:	08006441 	.word	0x08006441
 8006420:	08006441 	.word	0x08006441
 8006424:	0800643b 	.word	0x0800643b
 8006428:	2300      	movs	r3, #0
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e118      	b.n	8006660 <UART_SetConfig+0x348>
 800642e:	2302      	movs	r3, #2
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e115      	b.n	8006660 <UART_SetConfig+0x348>
 8006434:	2304      	movs	r3, #4
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e112      	b.n	8006660 <UART_SetConfig+0x348>
 800643a:	2308      	movs	r3, #8
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e10f      	b.n	8006660 <UART_SetConfig+0x348>
 8006440:	2310      	movs	r3, #16
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e10c      	b.n	8006660 <UART_SetConfig+0x348>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a68      	ldr	r2, [pc, #416]	; (80065ec <UART_SetConfig+0x2d4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d120      	bne.n	8006492 <UART_SetConfig+0x17a>
 8006450:	4b64      	ldr	r3, [pc, #400]	; (80065e4 <UART_SetConfig+0x2cc>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800645a:	2b30      	cmp	r3, #48	; 0x30
 800645c:	d013      	beq.n	8006486 <UART_SetConfig+0x16e>
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	d814      	bhi.n	800648c <UART_SetConfig+0x174>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d009      	beq.n	800647a <UART_SetConfig+0x162>
 8006466:	2b20      	cmp	r3, #32
 8006468:	d810      	bhi.n	800648c <UART_SetConfig+0x174>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <UART_SetConfig+0x15c>
 800646e:	2b10      	cmp	r3, #16
 8006470:	d006      	beq.n	8006480 <UART_SetConfig+0x168>
 8006472:	e00b      	b.n	800648c <UART_SetConfig+0x174>
 8006474:	2300      	movs	r3, #0
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e0f2      	b.n	8006660 <UART_SetConfig+0x348>
 800647a:	2302      	movs	r3, #2
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e0ef      	b.n	8006660 <UART_SetConfig+0x348>
 8006480:	2304      	movs	r3, #4
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e0ec      	b.n	8006660 <UART_SetConfig+0x348>
 8006486:	2308      	movs	r3, #8
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e0e9      	b.n	8006660 <UART_SetConfig+0x348>
 800648c:	2310      	movs	r3, #16
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e0e6      	b.n	8006660 <UART_SetConfig+0x348>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a56      	ldr	r2, [pc, #344]	; (80065f0 <UART_SetConfig+0x2d8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d120      	bne.n	80064de <UART_SetConfig+0x1c6>
 800649c:	4b51      	ldr	r3, [pc, #324]	; (80065e4 <UART_SetConfig+0x2cc>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d013      	beq.n	80064d2 <UART_SetConfig+0x1ba>
 80064aa:	2bc0      	cmp	r3, #192	; 0xc0
 80064ac:	d814      	bhi.n	80064d8 <UART_SetConfig+0x1c0>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d009      	beq.n	80064c6 <UART_SetConfig+0x1ae>
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d810      	bhi.n	80064d8 <UART_SetConfig+0x1c0>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <UART_SetConfig+0x1a8>
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d006      	beq.n	80064cc <UART_SetConfig+0x1b4>
 80064be:	e00b      	b.n	80064d8 <UART_SetConfig+0x1c0>
 80064c0:	2300      	movs	r3, #0
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e0cc      	b.n	8006660 <UART_SetConfig+0x348>
 80064c6:	2302      	movs	r3, #2
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0c9      	b.n	8006660 <UART_SetConfig+0x348>
 80064cc:	2304      	movs	r3, #4
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0c6      	b.n	8006660 <UART_SetConfig+0x348>
 80064d2:	2308      	movs	r3, #8
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e0c3      	b.n	8006660 <UART_SetConfig+0x348>
 80064d8:	2310      	movs	r3, #16
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e0c0      	b.n	8006660 <UART_SetConfig+0x348>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a44      	ldr	r2, [pc, #272]	; (80065f4 <UART_SetConfig+0x2dc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d125      	bne.n	8006534 <UART_SetConfig+0x21c>
 80064e8:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <UART_SetConfig+0x2cc>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f6:	d017      	beq.n	8006528 <UART_SetConfig+0x210>
 80064f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fc:	d817      	bhi.n	800652e <UART_SetConfig+0x216>
 80064fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006502:	d00b      	beq.n	800651c <UART_SetConfig+0x204>
 8006504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006508:	d811      	bhi.n	800652e <UART_SetConfig+0x216>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <UART_SetConfig+0x1fe>
 800650e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006512:	d006      	beq.n	8006522 <UART_SetConfig+0x20a>
 8006514:	e00b      	b.n	800652e <UART_SetConfig+0x216>
 8006516:	2300      	movs	r3, #0
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e0a1      	b.n	8006660 <UART_SetConfig+0x348>
 800651c:	2302      	movs	r3, #2
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e09e      	b.n	8006660 <UART_SetConfig+0x348>
 8006522:	2304      	movs	r3, #4
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e09b      	b.n	8006660 <UART_SetConfig+0x348>
 8006528:	2308      	movs	r3, #8
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e098      	b.n	8006660 <UART_SetConfig+0x348>
 800652e:	2310      	movs	r3, #16
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e095      	b.n	8006660 <UART_SetConfig+0x348>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <UART_SetConfig+0x2e0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d125      	bne.n	800658a <UART_SetConfig+0x272>
 800653e:	4b29      	ldr	r3, [pc, #164]	; (80065e4 <UART_SetConfig+0x2cc>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654c:	d017      	beq.n	800657e <UART_SetConfig+0x266>
 800654e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006552:	d817      	bhi.n	8006584 <UART_SetConfig+0x26c>
 8006554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006558:	d00b      	beq.n	8006572 <UART_SetConfig+0x25a>
 800655a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655e:	d811      	bhi.n	8006584 <UART_SetConfig+0x26c>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <UART_SetConfig+0x254>
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d006      	beq.n	8006578 <UART_SetConfig+0x260>
 800656a:	e00b      	b.n	8006584 <UART_SetConfig+0x26c>
 800656c:	2301      	movs	r3, #1
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e076      	b.n	8006660 <UART_SetConfig+0x348>
 8006572:	2302      	movs	r3, #2
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e073      	b.n	8006660 <UART_SetConfig+0x348>
 8006578:	2304      	movs	r3, #4
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e070      	b.n	8006660 <UART_SetConfig+0x348>
 800657e:	2308      	movs	r3, #8
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e06d      	b.n	8006660 <UART_SetConfig+0x348>
 8006584:	2310      	movs	r3, #16
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e06a      	b.n	8006660 <UART_SetConfig+0x348>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <UART_SetConfig+0x2e4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d138      	bne.n	8006606 <UART_SetConfig+0x2ee>
 8006594:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <UART_SetConfig+0x2cc>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800659e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a2:	d017      	beq.n	80065d4 <UART_SetConfig+0x2bc>
 80065a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a8:	d82a      	bhi.n	8006600 <UART_SetConfig+0x2e8>
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ae:	d00b      	beq.n	80065c8 <UART_SetConfig+0x2b0>
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b4:	d824      	bhi.n	8006600 <UART_SetConfig+0x2e8>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <UART_SetConfig+0x2aa>
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	d006      	beq.n	80065ce <UART_SetConfig+0x2b6>
 80065c0:	e01e      	b.n	8006600 <UART_SetConfig+0x2e8>
 80065c2:	2300      	movs	r3, #0
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e04b      	b.n	8006660 <UART_SetConfig+0x348>
 80065c8:	2302      	movs	r3, #2
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e048      	b.n	8006660 <UART_SetConfig+0x348>
 80065ce:	2304      	movs	r3, #4
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e045      	b.n	8006660 <UART_SetConfig+0x348>
 80065d4:	2308      	movs	r3, #8
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e042      	b.n	8006660 <UART_SetConfig+0x348>
 80065da:	bf00      	nop
 80065dc:	efff69f3 	.word	0xefff69f3
 80065e0:	40011000 	.word	0x40011000
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40004400 	.word	0x40004400
 80065ec:	40004800 	.word	0x40004800
 80065f0:	40004c00 	.word	0x40004c00
 80065f4:	40005000 	.word	0x40005000
 80065f8:	40011400 	.word	0x40011400
 80065fc:	40007800 	.word	0x40007800
 8006600:	2310      	movs	r3, #16
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e02c      	b.n	8006660 <UART_SetConfig+0x348>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a72      	ldr	r2, [pc, #456]	; (80067d4 <UART_SetConfig+0x4bc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d125      	bne.n	800665c <UART_SetConfig+0x344>
 8006610:	4b71      	ldr	r3, [pc, #452]	; (80067d8 <UART_SetConfig+0x4c0>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800661a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800661e:	d017      	beq.n	8006650 <UART_SetConfig+0x338>
 8006620:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006624:	d817      	bhi.n	8006656 <UART_SetConfig+0x33e>
 8006626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662a:	d00b      	beq.n	8006644 <UART_SetConfig+0x32c>
 800662c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006630:	d811      	bhi.n	8006656 <UART_SetConfig+0x33e>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <UART_SetConfig+0x326>
 8006636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800663a:	d006      	beq.n	800664a <UART_SetConfig+0x332>
 800663c:	e00b      	b.n	8006656 <UART_SetConfig+0x33e>
 800663e:	2300      	movs	r3, #0
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e00d      	b.n	8006660 <UART_SetConfig+0x348>
 8006644:	2302      	movs	r3, #2
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e00a      	b.n	8006660 <UART_SetConfig+0x348>
 800664a:	2304      	movs	r3, #4
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e007      	b.n	8006660 <UART_SetConfig+0x348>
 8006650:	2308      	movs	r3, #8
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e004      	b.n	8006660 <UART_SetConfig+0x348>
 8006656:	2310      	movs	r3, #16
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e001      	b.n	8006660 <UART_SetConfig+0x348>
 800665c:	2310      	movs	r3, #16
 800665e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006668:	d15b      	bne.n	8006722 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800666a:	7ffb      	ldrb	r3, [r7, #31]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d828      	bhi.n	80066c2 <UART_SetConfig+0x3aa>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x360>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066c3 	.word	0x080066c3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066c3 	.word	0x080066c3
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066bb 	.word	0x080066bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fe fd9c 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80066a0:	61b8      	str	r0, [r7, #24]
        break;
 80066a2:	e013      	b.n	80066cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fe fdac 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 80066a8:	61b8      	str	r0, [r7, #24]
        break;
 80066aa:	e00f      	b.n	80066cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ac:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <UART_SetConfig+0x4c4>)
 80066ae:	61bb      	str	r3, [r7, #24]
        break;
 80066b0:	e00c      	b.n	80066cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fe fc7f 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 80066b6:	61b8      	str	r0, [r7, #24]
        break;
 80066b8:	e008      	b.n	80066cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066be:	61bb      	str	r3, [r7, #24]
        break;
 80066c0:	e004      	b.n	80066cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	77bb      	strb	r3, [r7, #30]
        break;
 80066ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d074      	beq.n	80067bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	005a      	lsls	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	441a      	add	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b0f      	cmp	r3, #15
 80066ec:	d916      	bls.n	800671c <UART_SetConfig+0x404>
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f4:	d212      	bcs.n	800671c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f023 030f 	bic.w	r3, r3, #15
 80066fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	b29a      	uxth	r2, r3
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	4313      	orrs	r3, r2
 8006710:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	89fa      	ldrh	r2, [r7, #14]
 8006718:	60da      	str	r2, [r3, #12]
 800671a:	e04f      	b.n	80067bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	77bb      	strb	r3, [r7, #30]
 8006720:	e04c      	b.n	80067bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006722:	7ffb      	ldrb	r3, [r7, #31]
 8006724:	2b08      	cmp	r3, #8
 8006726:	d828      	bhi.n	800677a <UART_SetConfig+0x462>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x418>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006755 	.word	0x08006755
 8006734:	0800675d 	.word	0x0800675d
 8006738:	08006765 	.word	0x08006765
 800673c:	0800677b 	.word	0x0800677b
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800677b 	.word	0x0800677b
 8006748:	0800677b 	.word	0x0800677b
 800674c:	0800677b 	.word	0x0800677b
 8006750:	08006773 	.word	0x08006773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe fd40 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8006758:	61b8      	str	r0, [r7, #24]
        break;
 800675a:	e013      	b.n	8006784 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675c:	f7fe fd50 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8006760:	61b8      	str	r0, [r7, #24]
        break;
 8006762:	e00f      	b.n	8006784 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006764:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <UART_SetConfig+0x4c4>)
 8006766:	61bb      	str	r3, [r7, #24]
        break;
 8006768:	e00c      	b.n	8006784 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676a:	f7fe fc23 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 800676e:	61b8      	str	r0, [r7, #24]
        break;
 8006770:	e008      	b.n	8006784 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006776:	61bb      	str	r3, [r7, #24]
        break;
 8006778:	e004      	b.n	8006784 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	77bb      	strb	r3, [r7, #30]
        break;
 8006782:	bf00      	nop
    }

    if (pclk != 0U)
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085a      	lsrs	r2, r3, #1
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	441a      	add	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d909      	bls.n	80067b8 <UART_SetConfig+0x4a0>
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067aa:	d205      	bcs.n	80067b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e001      	b.n	80067bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40007c00 	.word	0x40007c00
 80067d8:	40023800 	.word	0x40023800
 80067dc:	00f42400 	.word	0x00f42400

080067e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01a      	beq.n	80068f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068de:	d10a      	bne.n	80068f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  }
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af02      	add	r7, sp, #8
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006934:	f7fb fff4 	bl	8002920 <HAL_GetTick>
 8006938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b08      	cmp	r3, #8
 8006946:	d10e      	bne.n	8006966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f81b 	bl	8006992 <UART_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e011      	b.n	800698a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b09c      	sub	sp, #112	; 0x70
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	603b      	str	r3, [r7, #0]
 800699e:	4613      	mov	r3, r2
 80069a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a2:	e0a7      	b.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	f000 80a3 	beq.w	8006af4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fb ffb7 	bl	8002920 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80069be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d13f      	bne.n	8006a44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069d8:	667b      	str	r3, [r7, #100]	; 0x64
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a16:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e068      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d050      	beq.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d148      	bne.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	613b      	str	r3, [r7, #16]
   return(result);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006abe:	623a      	str	r2, [r7, #32]
 8006ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	69f9      	ldr	r1, [r7, #28]
 8006ac4:	6a3a      	ldr	r2, [r7, #32]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e5      	bne.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e010      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4013      	ands	r3, r2
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	f43f af48 	beq.w	80069a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3770      	adds	r7, #112	; 0x70
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b095      	sub	sp, #84	; 0x54
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
 8006b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d118      	bne.n	8006bc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f023 0310 	bic.w	r3, r3, #16
 8006ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bda:	bf00      	nop
 8006bdc:	3754      	adds	r7, #84	; 0x54
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fb71 	bl	80062ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff fb3d 	bl	80062d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5e:	bf00      	nop
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fce5 	bl	8008646 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006c8c:	b5b0      	push	{r4, r5, r7, lr}
 8006c8e:	b096      	sub	sp, #88	; 0x58
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006c9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d107      	bne.n	8006cb2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2188      	movs	r1, #136	; 0x88
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f004 ff02 	bl	800bab0 <VL53L0X_WrByte>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cc0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006cca:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a9e      	ldr	r2, [pc, #632]	; (8006f4c <VL53L0X_DataInit+0x2c0>)
 8006cd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a9d      	ldr	r2, [pc, #628]	; (8006f50 <VL53L0X_DataInit+0x2c4>)
 8006cda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006ce4:	f107 0310 	add.w	r3, r7, #16
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fac2 	bl	8007274 <VL53L0X_GetDeviceParameters>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006cf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d112      	bne.n	8006d24 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006d02:	2300      	movs	r3, #0
 8006d04:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f103 0410 	add.w	r4, r3, #16
 8006d0c:	f107 0510 	add.w	r5, r7, #16
 8006d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2264      	movs	r2, #100	; 0x64
 8006d28:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006d32:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006d3c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006d46:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d52:	2201      	movs	r2, #1
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f004 feaa 	bl	800bab0 <VL53L0X_WrByte>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	21ff      	movs	r1, #255	; 0xff
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f004 fe9e 	bl	800bab0 <VL53L0X_WrByte>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006d82:	2200      	movs	r2, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f004 fe92 	bl	800bab0 <VL53L0X_WrByte>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006d9a:	f107 030f 	add.w	r3, r7, #15
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2191      	movs	r1, #145	; 0x91
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f004 ff06 	bl	800bbb4 <VL53L0X_RdByte>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f004 fe74 	bl	800bab0 <VL53L0X_WrByte>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	21ff      	movs	r1, #255	; 0xff
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f004 fe68 	bl	800bab0 <VL53L0X_WrByte>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006dee:	2200      	movs	r2, #0
 8006df0:	2180      	movs	r1, #128	; 0x80
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f004 fe5c 	bl	800bab0 <VL53L0X_WrByte>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006e06:	2300      	movs	r3, #0
 8006e08:	653b      	str	r3, [r7, #80]	; 0x50
 8006e0a:	e014      	b.n	8006e36 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006e0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d114      	bne.n	8006e3e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fd4d 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
 8006e22:	4603      	mov	r3, r0
 8006e24:	461a      	mov	r2, r3
 8006e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e32:	3301      	adds	r3, #1
 8006e34:	653b      	str	r3, [r7, #80]	; 0x50
 8006e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e38:	2b05      	cmp	r3, #5
 8006e3a:	dde7      	ble.n	8006e0c <VL53L0X_DataInit+0x180>
 8006e3c:	e000      	b.n	8006e40 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006e3e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006e40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d107      	bne.n	8006e58 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fd35 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006e58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d107      	bne.n	8006e70 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006e60:	2200      	movs	r2, #0
 8006e62:	2103      	movs	r1, #3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fd29 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006e70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d107      	bne.n	8006e88 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2104      	movs	r1, #4
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fd1d 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006e88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006e90:	2200      	movs	r2, #0
 8006e92:	2105      	movs	r1, #5
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fd11 	bl	80078bc <VL53L0X_SetLimitCheckEnable>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006ea0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006ea8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006eac:	2100      	movs	r1, #0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fdb4 	bl	8007a1c <VL53L0X_SetLimitCheckValue>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006eba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d108      	bne.n	8006ed4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fda7 	bl	8007a1c <VL53L0X_SetLimitCheckValue>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ed4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006edc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006ee0:	2102      	movs	r1, #2
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fd9a 	bl	8007a1c <VL53L0X_SetLimitCheckValue>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006eee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d107      	bne.n	8006f06 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2103      	movs	r1, #3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fd8e 	bl	8007a1c <VL53L0X_SetLimitCheckValue>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	22ff      	movs	r2, #255	; 0xff
 8006f12:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	2101      	movs	r1, #1
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f004 fdc8 	bl	800bab0 <VL53L0X_WrByte>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006f2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006f3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3758      	adds	r7, #88	; 0x58
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bdb0      	pop	{r4, r5, r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	00016b85 	.word	0x00016b85
 8006f50:	000970a4 	.word	0x000970a4

08006f54 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006f54:	b5b0      	push	{r4, r5, r7, lr}
 8006f56:	b09e      	sub	sp, #120	; 0x78
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006f62:	f107 031c 	add.w	r3, r7, #28
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f007 fef6 	bl	800ed5c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006f90:	2101      	movs	r1, #1
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fad0 	bl	8009538 <VL53L0X_get_info_from_device>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006fa4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d80d      	bhi.n	8006fd4 <VL53L0X_StaticInit+0x80>
 8006fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d102      	bne.n	8006fc6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d806      	bhi.n	8006fd4 <VL53L0X_StaticInit+0x80>
 8006fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10e      	bne.n	8006fec <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fd0:	2b0c      	cmp	r3, #12
 8006fd2:	d90b      	bls.n	8006fec <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006fd4:	f107 0218 	add.w	r2, r7, #24
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fd2c 	bl	8008a3c <VL53L0X_perform_ref_spad_management>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006fea:	e009      	b.n	8007000 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 ff2d 	bl	8008e54 <VL53L0X_set_reference_spads>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007000:	4b94      	ldr	r3, [pc, #592]	; (8007254 <VL53L0X_StaticInit+0x300>)
 8007002:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007004:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10f      	bne.n	800702c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8007012:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007016:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800701a:	2b00      	cmp	r3, #0
 800701c:	d104      	bne.n	8007028 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007024:	66bb      	str	r3, [r7, #104]	; 0x68
 8007026:	e001      	b.n	800702c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007028:	4b8a      	ldr	r3, [pc, #552]	; (8007254 <VL53L0X_StaticInit+0x300>)
 800702a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800702c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007034:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f003 fe24 	bl	800ac84 <VL53L0X_load_tuning_settings>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007042:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800704a:	2300      	movs	r3, #0
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2304      	movs	r3, #4
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f8f3 	bl	8008240 <VL53L0X_SetGpioConfig>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007060:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007064:	2b00      	cmp	r3, #0
 8007066:	d121      	bne.n	80070ac <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007068:	2201      	movs	r2, #1
 800706a:	21ff      	movs	r1, #255	; 0xff
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f004 fd1f 	bl	800bab0 <VL53L0X_WrByte>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007078:	f107 031a 	add.w	r3, r7, #26
 800707c:	461a      	mov	r2, r3
 800707e:	2184      	movs	r1, #132	; 0x84
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f004 fdc1 	bl	800bc08 <VL53L0X_RdWord>
 8007086:	4603      	mov	r3, r0
 8007088:	461a      	mov	r2, r3
 800708a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800708e:	4313      	orrs	r3, r2
 8007090:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007094:	2200      	movs	r2, #0
 8007096:	21ff      	movs	r1, #255	; 0xff
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f004 fd09 	bl	800bab0 <VL53L0X_WrByte>
 800709e:	4603      	mov	r3, r0
 80070a0:	461a      	mov	r2, r3
 80070a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d105      	bne.n	80070c0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80070b4:	8b7b      	ldrh	r3, [r7, #26]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80070c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d108      	bne.n	80070da <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80070c8:	f107 031c 	add.w	r3, r7, #28
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8d0 	bl	8007274 <VL53L0X_GetDeviceParameters>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80070da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d110      	bne.n	8007104 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80070e2:	f107 0319 	add.w	r3, r7, #25
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f992 	bl	8007412 <VL53L0X_GetFractionEnable>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80070f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80070fc:	7e7a      	ldrb	r2, [r7, #25]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007104:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10e      	bne.n	800712a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f103 0410 	add.w	r4, r3, #16
 8007112:	f107 051c 	add.w	r5, r7, #28
 8007116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007122:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800712a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800712e:	2b00      	cmp	r3, #0
 8007130:	d111      	bne.n	8007156 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007132:	f107 0319 	add.w	r3, r7, #25
 8007136:	461a      	mov	r2, r3
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f004 fd3a 	bl	800bbb4 <VL53L0X_RdByte>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007146:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800714a:	2b00      	cmp	r3, #0
 800714c:	d103      	bne.n	8007156 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800714e:	7e7a      	ldrb	r2, [r7, #25]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007156:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800715a:	2b00      	cmp	r3, #0
 800715c:	d107      	bne.n	800716e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f9ca 	bl	80074fc <VL53L0X_SetSequenceStepEnable>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800716e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007172:	2b00      	cmp	r3, #0
 8007174:	d107      	bne.n	8007186 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007176:	2200      	movs	r2, #0
 8007178:	2102      	movs	r1, #2
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9be 	bl	80074fc <VL53L0X_SetSequenceStepEnable>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007186:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800718a:	2b00      	cmp	r3, #0
 800718c:	d103      	bne.n	8007196 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2203      	movs	r2, #3
 8007192:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007196:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800719e:	f107 0313 	add.w	r3, r7, #19
 80071a2:	461a      	mov	r2, r3
 80071a4:	2100      	movs	r1, #0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f990 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80071ba:	7cfa      	ldrb	r2, [r7, #19]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80071c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80071ca:	f107 0313 	add.w	r3, r7, #19
 80071ce:	461a      	mov	r2, r3
 80071d0:	2101      	movs	r1, #1
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f97a 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80071e6:	7cfa      	ldrb	r2, [r7, #19]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80071ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	461a      	mov	r2, r3
 80071fc:	2103      	movs	r1, #3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f002 ff1c 	bl	800a03c <get_sequence_step_timeout>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800720a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800721a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	461a      	mov	r2, r3
 8007228:	2104      	movs	r1, #4
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f002 ff06 	bl	800a03c <get_sequence_step_timeout>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007236:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007246:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800724a:	4618      	mov	r0, r3
 800724c:	3770      	adds	r7, #112	; 0x70
 800724e:	46bd      	mov	sp, r7
 8007250:	bdb0      	pop	{r4, r5, r7, pc}
 8007252:	bf00      	nop
 8007254:	200001a0 	.word	0x200001a0

08007258 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8007260:	239d      	movs	r3, #157	; 0x9d
 8007262:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f8b0 	bl	80073ec <VL53L0X_GetDeviceMode>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa78 	bl	8007794 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80072a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80072b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d107      	bne.n	80072ce <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3310      	adds	r3, #16
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 faae 	bl	8007826 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80072ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d107      	bne.n	80072e6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	3314      	adds	r3, #20
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff fcc2 	bl	8006c66 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80072e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d134      	bne.n	8007358 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	e02a      	b.n	800734a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80072f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d12a      	bne.n	8007352 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	b299      	uxth	r1, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	3308      	adds	r3, #8
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	4413      	add	r3, r2
 800730a:	3304      	adds	r3, #4
 800730c:	461a      	mov	r2, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fbe6 	bl	8007ae0 <VL53L0X_GetLimitCheckValue>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	4313      	orrs	r3, r2
 800731c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800731e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d117      	bne.n	8007356 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	b299      	uxth	r1, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3318      	adds	r3, #24
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	4413      	add	r3, r2
 8007332:	461a      	mov	r2, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fb4d 	bl	80079d4 <VL53L0X_GetLimitCheckEnable>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	4313      	orrs	r3, r2
 8007342:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3301      	adds	r3, #1
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b05      	cmp	r3, #5
 800734e:	ddd1      	ble.n	80072f4 <VL53L0X_GetDeviceParameters+0x80>
 8007350:	e002      	b.n	8007358 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007356:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d107      	bne.n	8007370 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	333c      	adds	r3, #60	; 0x3c
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fc48 	bl	8007bfc <VL53L0X_GetWrapAroundCheckEnable>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f879 	bl	8007476 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	2b15      	cmp	r3, #21
 80073a8:	bf8c      	ite	hi
 80073aa:	2201      	movhi	r2, #1
 80073ac:	2200      	movls	r2, #0
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	d10e      	bne.n	80073d2 <VL53L0X_SetDeviceMode+0x3e>
 80073b4:	2201      	movs	r2, #1
 80073b6:	409a      	lsls	r2, r3
 80073b8:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <VL53L0X_SetDeviceMode+0x54>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bf14      	ite	ne
 80073c0:	2301      	movne	r3, #1
 80073c2:	2300      	moveq	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	741a      	strb	r2, [r3, #16]
		break;
 80073d0:	e001      	b.n	80073d6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80073d2:	23f8      	movs	r3, #248	; 0xf8
 80073d4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	0030000b 	.word	0x0030000b

080073ec <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7c1a      	ldrb	r2, [r3, #16]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007402:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	2109      	movs	r1, #9
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f004 fbc5 	bl	800bbb4 <VL53L0X_RdByte>
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800742e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f003 fa7e 	bl	800a962 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800746a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f003 fb4b 	bl	800ab22 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
 80074a8:	4613      	mov	r3, r2
 80074aa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80074b0:	78ba      	ldrb	r2, [r7, #2]
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f002 ff93 	bl	800a3e2 <VL53L0X_set_vcsel_pulse_period>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80074c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	460b      	mov	r3, r1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4619      	mov	r1, r3
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f003 fa05 	bl	800a8f4 <VL53L0X_get_vcsel_pulse_period>
 80074ea:	4603      	mov	r3, r0
 80074ec:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80074ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
 8007508:	4613      	mov	r3, r2
 800750a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800750c:	2300      	movs	r3, #0
 800750e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007518:	f107 030f 	add.w	r3, r7, #15
 800751c:	461a      	mov	r2, r3
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f004 fb47 	bl	800bbb4 <VL53L0X_RdByte>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800752e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d15a      	bne.n	80075ec <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007536:	78bb      	ldrb	r3, [r7, #2]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d12b      	bne.n	8007594 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	2b04      	cmp	r3, #4
 8007540:	d825      	bhi.n	800758e <VL53L0X_SetSequenceStepEnable+0x92>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	0800755d 	.word	0x0800755d
 800754c:	08007567 	.word	0x08007567
 8007550:	08007571 	.word	0x08007571
 8007554:	0800757b 	.word	0x0800757b
 8007558:	08007585 	.word	0x08007585
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800755c:	7dbb      	ldrb	r3, [r7, #22]
 800755e:	f043 0310 	orr.w	r3, r3, #16
 8007562:	75bb      	strb	r3, [r7, #22]
				break;
 8007564:	e043      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007566:	7dbb      	ldrb	r3, [r7, #22]
 8007568:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800756c:	75bb      	strb	r3, [r7, #22]
				break;
 800756e:	e03e      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007570:	7dbb      	ldrb	r3, [r7, #22]
 8007572:	f043 0304 	orr.w	r3, r3, #4
 8007576:	75bb      	strb	r3, [r7, #22]
				break;
 8007578:	e039      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800757a:	7dbb      	ldrb	r3, [r7, #22]
 800757c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007580:	75bb      	strb	r3, [r7, #22]
				break;
 8007582:	e034      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007584:	7dbb      	ldrb	r3, [r7, #22]
 8007586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800758a:	75bb      	strb	r3, [r7, #22]
				break;
 800758c:	e02f      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800758e:	23fc      	movs	r3, #252	; 0xfc
 8007590:	75fb      	strb	r3, [r7, #23]
 8007592:	e02c      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	2b04      	cmp	r3, #4
 8007598:	d825      	bhi.n	80075e6 <VL53L0X_SetSequenceStepEnable+0xea>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b5 	.word	0x080075b5
 80075a4:	080075bf 	.word	0x080075bf
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d3 	.word	0x080075d3
 80075b0:	080075dd 	.word	0x080075dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80075b4:	7dbb      	ldrb	r3, [r7, #22]
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	75bb      	strb	r3, [r7, #22]
				break;
 80075bc:	e017      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80075be:	7dbb      	ldrb	r3, [r7, #22]
 80075c0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80075c4:	75bb      	strb	r3, [r7, #22]
				break;
 80075c6:	e012      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80075c8:	7dbb      	ldrb	r3, [r7, #22]
 80075ca:	f023 0304 	bic.w	r3, r3, #4
 80075ce:	75bb      	strb	r3, [r7, #22]
				break;
 80075d0:	e00d      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80075d2:	7dbb      	ldrb	r3, [r7, #22]
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	75bb      	strb	r3, [r7, #22]
				break;
 80075da:	e008      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80075dc:	7dbb      	ldrb	r3, [r7, #22]
 80075de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e2:	75bb      	strb	r3, [r7, #22]
				break;
 80075e4:	e003      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075e6:	23fc      	movs	r3, #252	; 0xfc
 80075e8:	75fb      	strb	r3, [r7, #23]
 80075ea:	e000      	b.n	80075ee <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80075ec:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	7dba      	ldrb	r2, [r7, #22]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d01e      	beq.n	8007634 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80075f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d107      	bne.n	800760e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80075fe:	7dbb      	ldrb	r3, [r7, #22]
 8007600:	461a      	mov	r2, r3
 8007602:	2101      	movs	r1, #1
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f004 fa53 	bl	800bab0 <VL53L0X_WrByte>
 800760a:	4603      	mov	r3, r0
 800760c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800760e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7dba      	ldrb	r2, [r7, #22]
 800761a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800761e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800762c:	6939      	ldr	r1, [r7, #16]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ff0e 	bl	8007450 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	72fb      	strb	r3, [r7, #11]
 800764e:	4613      	mov	r3, r2
 8007650:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	2b04      	cmp	r3, #4
 8007660:	d836      	bhi.n	80076d0 <sequence_step_enabled+0x90>
 8007662:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <sequence_step_enabled+0x28>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	0800767d 	.word	0x0800767d
 800766c:	0800768f 	.word	0x0800768f
 8007670:	080076a1 	.word	0x080076a1
 8007674:	080076b3 	.word	0x080076b3
 8007678:	080076c5 	.word	0x080076c5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800767c:	7abb      	ldrb	r3, [r7, #10]
 800767e:	111b      	asrs	r3, r3, #4
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	b2da      	uxtb	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	701a      	strb	r2, [r3, #0]
		break;
 800768c:	e022      	b.n	80076d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800768e:	7abb      	ldrb	r3, [r7, #10]
 8007690:	10db      	asrs	r3, r3, #3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	701a      	strb	r2, [r3, #0]
		break;
 800769e:	e019      	b.n	80076d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80076a0:	7abb      	ldrb	r3, [r7, #10]
 80076a2:	109b      	asrs	r3, r3, #2
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	701a      	strb	r2, [r3, #0]
		break;
 80076b0:	e010      	b.n	80076d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80076b2:	7abb      	ldrb	r3, [r7, #10]
 80076b4:	119b      	asrs	r3, r3, #6
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	701a      	strb	r2, [r3, #0]
		break;
 80076c2:	e007      	b.n	80076d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80076c4:	7abb      	ldrb	r3, [r7, #10]
 80076c6:	09db      	lsrs	r3, r3, #7
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	701a      	strb	r2, [r3, #0]
		break;
 80076ce:	e001      	b.n	80076d4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076d0:	23fc      	movs	r3, #252	; 0xfc
 80076d2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80076f6:	f107 030e 	add.w	r3, r7, #14
 80076fa:	461a      	mov	r2, r3
 80076fc:	2101      	movs	r1, #1
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f004 fa58 	bl	800bbb4 <VL53L0X_RdByte>
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007710:	7bba      	ldrb	r2, [r7, #14]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff ff92 	bl	8007640 <sequence_step_enabled>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d108      	bne.n	800773a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007728:	7bba      	ldrb	r2, [r7, #14]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	3302      	adds	r3, #2
 800772e:	2101      	movs	r1, #1
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff ff85 	bl	8007640 <sequence_step_enabled>
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800773a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d108      	bne.n	8007754 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007742:	7bba      	ldrb	r2, [r7, #14]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	2102      	movs	r1, #2
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff78 	bl	8007640 <sequence_step_enabled>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d108      	bne.n	800776e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800775c:	7bba      	ldrb	r2, [r7, #14]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	3303      	adds	r3, #3
 8007762:	2103      	movs	r1, #3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff ff6b 	bl	8007640 <sequence_step_enabled>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800776e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d108      	bne.n	8007788 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007776:	7bba      	ldrb	r2, [r7, #14]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	3304      	adds	r3, #4
 800777c:	2104      	movs	r1, #4
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ff5e 	bl	8007640 <sequence_step_enabled>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80077a2:	f107 030c 	add.w	r3, r7, #12
 80077a6:	461a      	mov	r2, r3
 80077a8:	21f8      	movs	r1, #248	; 0xf8
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f004 fa2c 	bl	800bc08 <VL53L0X_RdWord>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80077b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d108      	bne.n	80077ce <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80077bc:	f107 0308 	add.w	r3, r7, #8
 80077c0:	461a      	mov	r2, r3
 80077c2:	2104      	movs	r1, #4
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f004 fa57 	bl	800bc78 <VL53L0X_RdDWord>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10c      	bne.n	80077f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80077d6:	89bb      	ldrh	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	89ba      	ldrh	r2, [r7, #12]
 80077e0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7f1b      	ldrb	r3, [r3, #28]
 800780e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	7bba      	ldrb	r2, [r7, #14]
 8007814:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007816:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007830:	2300      	movs	r3, #0
 8007832:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007834:	f107 030e 	add.w	r3, r7, #14
 8007838:	461a      	mov	r2, r3
 800783a:	2120      	movs	r1, #32
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f004 f9e3 	bl	800bc08 <VL53L0X_RdWord>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d118      	bne.n	8007880 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800784e:	89fb      	ldrh	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	771a      	strb	r2, [r3, #28]
 8007866:	e00b      	b.n	8007880 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007868:	89fb      	ldrh	r3, [r7, #14]
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
 8007898:	4613      	mov	r3, r2
 800789a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 80078a0:	78ba      	ldrb	r2, [r7, #2]
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fd56 	bl	8009358 <VL53L0X_set_ref_calibration>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80078b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	807b      	strh	r3, [r7, #2]
 80078c8:	4613      	mov	r3, r2
 80078ca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80078dc:	887b      	ldrh	r3, [r7, #2]
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d902      	bls.n	80078e8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078e2:	23fc      	movs	r3, #252	; 0xfc
 80078e4:	75fb      	strb	r3, [r7, #23]
 80078e6:	e05b      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80078e8:	787b      	ldrb	r3, [r7, #1]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80078f6:	2301      	movs	r3, #1
 80078f8:	73bb      	strb	r3, [r7, #14]
 80078fa:	e00a      	b.n	8007912 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078fc:	887b      	ldrh	r3, [r7, #2]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	330c      	adds	r3, #12
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800790e:	2301      	movs	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007912:	887b      	ldrh	r3, [r7, #2]
 8007914:	2b05      	cmp	r3, #5
 8007916:	d841      	bhi.n	800799c <VL53L0X_SetLimitCheckEnable+0xe0>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <VL53L0X_SetLimitCheckEnable+0x64>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007939 	.word	0x08007939
 8007924:	08007943 	.word	0x08007943
 8007928:	08007959 	.word	0x08007959
 800792c:	08007963 	.word	0x08007963
 8007930:	0800796d 	.word	0x0800796d
 8007934:	08007985 	.word	0x08007985

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7bfa      	ldrb	r2, [r7, #15]
 800793c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007940:	e02e      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007946:	b29b      	uxth	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	2144      	movs	r1, #68	; 0x44
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f004 f8d3 	bl	800baf8 <VL53L0X_WrWord>
 8007952:	4603      	mov	r3, r0
 8007954:	75fb      	strb	r3, [r7, #23]

			break;
 8007956:	e023      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7bfa      	ldrb	r2, [r7, #15]
 800795c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007960:	e01e      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7bfa      	ldrb	r2, [r7, #15]
 8007966:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800796a:	e019      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	22fe      	movs	r2, #254	; 0xfe
 8007976:	2160      	movs	r1, #96	; 0x60
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f004 f8e7 	bl	800bb4c <VL53L0X_UpdateByte>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007982:	e00d      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800798a:	7b7b      	ldrb	r3, [r7, #13]
 800798c:	22ef      	movs	r2, #239	; 0xef
 800798e:	2160      	movs	r1, #96	; 0x60
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f004 f8db 	bl	800bb4c <VL53L0X_UpdateByte>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800799a:	e001      	b.n	80079a0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800799c:	23fc      	movs	r3, #252	; 0xfc
 800799e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80079a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10f      	bne.n	80079c8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80079a8:	787b      	ldrb	r3, [r7, #1]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80079ae:	887b      	ldrh	r3, [r7, #2]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80079ba:	e005      	b.n	80079c8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80079bc:	887b      	ldrh	r3, [r7, #2]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	460b      	mov	r3, r1
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80079e6:	897b      	ldrh	r3, [r7, #10]
 80079e8:	2b05      	cmp	r3, #5
 80079ea:	d905      	bls.n	80079f8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079ec:	23fc      	movs	r3, #252	; 0xfc
 80079ee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	e008      	b.n	8007a0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80079f8:	897b      	ldrh	r3, [r7, #10]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7dba      	ldrb	r2, [r7, #22]
 8007a08:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	460b      	mov	r3, r1
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007a2e:	897b      	ldrh	r3, [r7, #10]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a38:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007a3a:	7dbb      	ldrb	r3, [r7, #22]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d107      	bne.n	8007a50 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a40:	897b      	ldrh	r3, [r7, #10]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	330c      	adds	r3, #12
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	e040      	b.n	8007ad2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007a50:	897b      	ldrh	r3, [r7, #10]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d830      	bhi.n	8007ab8 <VL53L0X_SetLimitCheckValue+0x9c>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <VL53L0X_SetLimitCheckValue+0x40>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a93 	.word	0x08007a93
 8007a68:	08007a9b 	.word	0x08007a9b
 8007a6c:	08007aa3 	.word	0x08007aa3
 8007a70:	08007aa3 	.word	0x08007aa3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007a7a:	e01f      	b.n	8007abc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	2144      	movs	r1, #68	; 0x44
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f004 f836 	bl	800baf8 <VL53L0X_WrWord>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007a90:	e014      	b.n	8007abc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007a98:	e010      	b.n	8007abc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007aa0:	e00c      	b.n	8007abc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2164      	movs	r1, #100	; 0x64
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f004 f823 	bl	800baf8 <VL53L0X_WrWord>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007ab6:	e001      	b.n	8007abc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ab8:	23fc      	movs	r3, #252	; 0xfc
 8007aba:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ac4:	897b      	ldrh	r3, [r7, #10]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop

08007ae0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aee:	2300      	movs	r3, #0
 8007af0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007af6:	897b      	ldrh	r3, [r7, #10]
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d847      	bhi.n	8007b8c <VL53L0X_GetLimitCheckValue+0xac>
 8007afc:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <VL53L0X_GetLimitCheckValue+0x24>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007b1d 	.word	0x08007b1d
 8007b08:	08007b29 	.word	0x08007b29
 8007b0c:	08007b4f 	.word	0x08007b4f
 8007b10:	08007b5b 	.word	0x08007b5b
 8007b14:	08007b67 	.word	0x08007b67
 8007b18:	08007b67 	.word	0x08007b67

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b20:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	77bb      	strb	r3, [r7, #30]
		break;
 8007b26:	e033      	b.n	8007b90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007b28:	f107 0316 	add.w	r3, r7, #22
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2144      	movs	r1, #68	; 0x44
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f004 f869 	bl	800bc08 <VL53L0X_RdWord>
 8007b36:	4603      	mov	r3, r0
 8007b38:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007b42:	8afb      	ldrh	r3, [r7, #22]
 8007b44:	025b      	lsls	r3, r3, #9
 8007b46:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	77bb      	strb	r3, [r7, #30]
		break;
 8007b4c:	e020      	b.n	8007b90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	77bb      	strb	r3, [r7, #30]
		break;
 8007b58:	e01a      	b.n	8007b90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	77bb      	strb	r3, [r7, #30]
		break;
 8007b64:	e014      	b.n	8007b90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007b66:	f107 0316 	add.w	r3, r7, #22
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	2164      	movs	r1, #100	; 0x64
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f004 f84a 	bl	800bc08 <VL53L0X_RdWord>
 8007b74:	4603      	mov	r3, r0
 8007b76:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007b80:	8afb      	ldrh	r3, [r7, #22]
 8007b82:	025b      	lsls	r3, r3, #9
 8007b84:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	77bb      	strb	r3, [r7, #30]
		break;
 8007b8a:	e001      	b.n	8007b90 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b8c:	23fc      	movs	r3, #252	; 0xfc
 8007b8e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d12a      	bne.n	8007bee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007b98:	7fbb      	ldrb	r3, [r7, #30]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d124      	bne.n	8007be8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d110      	bne.n	8007bc6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007ba4:	897b      	ldrh	r3, [r7, #10]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	330c      	adds	r3, #12
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007bb8:	897b      	ldrh	r3, [r7, #10]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007bc4:	e013      	b.n	8007bee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007bcc:	897b      	ldrh	r3, [r7, #10]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007bda:	897b      	ldrh	r3, [r7, #10]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007be6:	e002      	b.n	8007bee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop

08007bfc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007c0a:	f107 030e 	add.w	r3, r7, #14
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2101      	movs	r1, #1
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f003 ffce 	bl	800bbb4 <VL53L0X_RdByte>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10e      	bne.n	8007c42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007c24:	7bba      	ldrb	r2, [r7, #14]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	b25b      	sxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da03      	bge.n	8007c3c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007c6c:	f107 030e 	add.w	r3, r7, #14
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fbba 	bl	80073ec <VL53L0X_GetDeviceMode>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d104      	bne.n	8007c94 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f882 	bl	8007d94 <VL53L0X_StartMeasurement>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 fb7e 	bl	800939e <VL53L0X_measurement_poll_for_completion>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007cde:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007ce0:	7dbb      	ldrb	r3, [r7, #22]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d005      	beq.n	8007cf2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d002      	beq.n	8007cf2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007cec:	7dbb      	ldrb	r3, [r7, #22]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d147      	bne.n	8007d82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	f107 0210 	add.w	r2, r7, #16
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fbc3 	bl	8008488 <VL53L0X_GetInterruptThresholds>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007d0c:	d803      	bhi.n	8007d16 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007d0e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007d10:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007d14:	d935      	bls.n	8007d82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d131      	bne.n	8007d82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d006      	beq.n	8007d32 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007d24:	491a      	ldr	r1, [pc, #104]	; (8007d90 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f002 ffac 	bl	800ac84 <VL53L0X_load_tuning_settings>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	75fb      	strb	r3, [r7, #23]
 8007d30:	e027      	b.n	8007d82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007d32:	2204      	movs	r2, #4
 8007d34:	21ff      	movs	r1, #255	; 0xff
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f003 feba 	bl	800bab0 <VL53L0X_WrByte>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2170      	movs	r1, #112	; 0x70
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f003 feb0 	bl	800bab0 <VL53L0X_WrByte>
 8007d50:	4603      	mov	r3, r0
 8007d52:	461a      	mov	r2, r3
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	21ff      	movs	r1, #255	; 0xff
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f003 fea6 	bl	800bab0 <VL53L0X_WrByte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2180      	movs	r1, #128	; 0x80
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f003 fe9c 	bl	800bab0 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007d82:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000294 	.word	0x20000294

08007d94 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007da4:	f107 030e 	add.w	r3, r7, #14
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff fb1e 	bl	80073ec <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007db0:	2201      	movs	r2, #1
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f003 fe7b 	bl	800bab0 <VL53L0X_WrByte>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	21ff      	movs	r1, #255	; 0xff
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f003 fe74 	bl	800bab0 <VL53L0X_WrByte>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f003 fe6d 	bl	800bab0 <VL53L0X_WrByte>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007de0:	461a      	mov	r2, r3
 8007de2:	2191      	movs	r1, #145	; 0x91
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f003 fe63 	bl	800bab0 <VL53L0X_WrByte>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007dee:	2201      	movs	r2, #1
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f003 fe5c 	bl	800bab0 <VL53L0X_WrByte>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	21ff      	movs	r1, #255	; 0xff
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f003 fe55 	bl	800bab0 <VL53L0X_WrByte>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2180      	movs	r1, #128	; 0x80
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f003 fe4e 	bl	800bab0 <VL53L0X_WrByte>
 8007e14:	4603      	mov	r3, r0
 8007e16:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d054      	beq.n	8007ec8 <VL53L0X_StartMeasurement+0x134>
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	dc6c      	bgt.n	8007efc <VL53L0X_StartMeasurement+0x168>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <VL53L0X_StartMeasurement+0x98>
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d034      	beq.n	8007e94 <VL53L0X_StartMeasurement+0x100>
 8007e2a:	e067      	b.n	8007efc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	2100      	movs	r1, #0
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f003 fe3d 	bl	800bab0 <VL53L0X_WrByte>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d15d      	bne.n	8007f02 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007e50:	f107 030d 	add.w	r3, r7, #13
 8007e54:	461a      	mov	r2, r3
 8007e56:	2100      	movs	r1, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f003 feab 	bl	800bbb4 <VL53L0X_RdByte>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	3301      	adds	r3, #1
 8007e66:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007e68:	7b7a      	ldrb	r2, [r7, #13]
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007e70:	7bfa      	ldrb	r2, [r7, #15]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d107      	bne.n	8007e86 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e84:	d3e1      	bcc.n	8007e4a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e8c:	d339      	bcc.n	8007f02 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007e8e:	23f9      	movs	r3, #249	; 0xf9
 8007e90:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007e92:	e036      	b.n	8007f02 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff ff12 	bl	8007cc8 <VL53L0X_CheckAndLoadInterruptSettings>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f003 fdff 	bl	800bab0 <VL53L0X_WrByte>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d123      	bne.n	8007f06 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007ec6:	e01e      	b.n	8007f06 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fef8 	bl	8007cc8 <VL53L0X_CheckAndLoadInterruptSettings>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007edc:	2204      	movs	r2, #4
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f003 fde5 	bl	800bab0 <VL53L0X_WrByte>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10b      	bne.n	8007f0a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007efa:	e006      	b.n	8007f0a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007efc:	23f8      	movs	r3, #248	; 0xf8
 8007efe:	75fb      	strb	r3, [r7, #23]
 8007f00:	e004      	b.n	8007f0c <VL53L0X_StartMeasurement+0x178>
		break;
 8007f02:	bf00      	nop
 8007f04:	e002      	b.n	8007f0c <VL53L0X_StartMeasurement+0x178>
		break;
 8007f06:	bf00      	nop
 8007f08:	e000      	b.n	8007f0c <VL53L0X_StartMeasurement+0x178>
		break;
 8007f0a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007f2c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d112      	bne.n	8007f5a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fb1a 	bl	8008574 <VL53L0X_GetInterruptMaskStatus>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d103      	bne.n	8007f52 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e01c      	b.n	8007f8c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e018      	b.n	8007f8c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007f5a:	f107 030d 	add.w	r3, r7, #13
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2114      	movs	r1, #20
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f003 fe26 	bl	800bbb4 <VL53L0X_RdByte>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10b      	bne.n	8007f8c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007f74:	7b7b      	ldrb	r3, [r7, #13]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2201      	movs	r2, #1
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e002      	b.n	8007f8c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007f98:	b5b0      	push	{r4, r5, r7, lr}
 8007f9a:	b096      	sub	sp, #88	; 0x58
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007fa8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007fac:	230c      	movs	r3, #12
 8007fae:	2114      	movs	r1, #20
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f003 fd51 	bl	800ba58 <VL53L0X_ReadMulti>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007fbc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f040 80d1 	bne.w	8008168 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007fd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2200      	movs	r2, #0
 8007fec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007fee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4413      	add	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	025b      	lsls	r3, r3, #9
 8008004:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800800a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800800c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008010:	b29b      	uxth	r3, r3
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	b29a      	uxth	r2, r3
 8008016:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800801a:	b29b      	uxth	r3, r3
 800801c:	4413      	add	r3, r2
 800801e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008022:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008026:	025b      	lsls	r3, r3, #9
 8008028:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800802e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29a      	uxth	r2, r3
 8008038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800803c:	b29b      	uxth	r3, r3
 800803e:	4413      	add	r3, r2
 8008040:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800804a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800804c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800805a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800806c:	d046      	beq.n	80080fc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800806e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008070:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800807c:	4a57      	ldr	r2, [pc, #348]	; (80081dc <VL53L0X_GetRangingMeasurementData+0x244>)
 800807e:	fb82 1203 	smull	r1, r2, r2, r3
 8008082:	1192      	asrs	r2, r2, #6
 8008084:	17db      	asrs	r3, r3, #31
 8008086:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008088:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7f1b      	ldrb	r3, [r3, #28]
 8008096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800809a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d02c      	beq.n	80080fc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80080a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080a4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80080a8:	fb02 f303 	mul.w	r3, r2, r3
 80080ac:	121a      	asrs	r2, r3, #8
					<= 0) {
 80080ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d10d      	bne.n	80080d0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80080b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80080bc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80080c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80080c4:	e016      	b.n	80080f4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80080c6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80080ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80080ce:	e011      	b.n	80080f4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80080d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80080d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080d6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80080da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080dc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80080e4:	121b      	asrs	r3, r3, #8
 80080e6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80080f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80080f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80080fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00d      	beq.n	8008120 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008104:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008108:	089b      	lsrs	r3, r3, #2
 800810a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008110:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	019b      	lsls	r3, r3, #6
 8008118:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	75da      	strb	r2, [r3, #23]
 800811e:	e006      	b.n	800812e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008126:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800812e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008132:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008136:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f003 fa3b 	bl	800b5c0 <VL53L0X_get_pal_range_status>
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008152:	4313      	orrs	r3, r2
 8008154:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008158:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800815c:	2b00      	cmp	r3, #0
 800815e:	d103      	bne.n	8008168 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008160:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008168:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800816c:	2b00      	cmp	r3, #0
 800816e:	d12f      	bne.n	80081d0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f107 040c 	add.w	r4, r7, #12
 8008176:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800817a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800817c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800817e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008182:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800818a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008198:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800819e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80081a4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80081aa:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80081b0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80081b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80081c0:	f107 050c 	add.w	r5, r7, #12
 80081c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80081cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3750      	adds	r7, #80	; 0x50
 80081d8:	46bd      	mov	sp, r7
 80081da:	bdb0      	pop	{r4, r5, r7, pc}
 80081dc:	10624dd3 	.word	0x10624dd3

080081e0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff f8cf 	bl	8007394 <VL53L0X_SetDeviceMode>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80081fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d104      	bne.n	800820c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fd2c 	bl	8007c60 <VL53L0X_PerformSingleMeasurement>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800820c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff febe 	bl	8007f98 <VL53L0X_GetRangingMeasurementData>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f962 	bl	80084f4 <VL53L0X_ClearInterruptMask>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	461a      	mov	r2, r3
 800824e:	4603      	mov	r3, r0
 8008250:	70fb      	strb	r3, [r7, #3]
 8008252:	460b      	mov	r3, r1
 8008254:	70bb      	strb	r3, [r7, #2]
 8008256:	4613      	mov	r3, r2
 8008258:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008264:	23f6      	movs	r3, #246	; 0xf6
 8008266:	73fb      	strb	r3, [r7, #15]
 8008268:	e107      	b.n	800847a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800826a:	78bb      	ldrb	r3, [r7, #2]
 800826c:	2b14      	cmp	r3, #20
 800826e:	d110      	bne.n	8008292 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008270:	7e3b      	ldrb	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008276:	2310      	movs	r3, #16
 8008278:	73bb      	strb	r3, [r7, #14]
 800827a:	e001      	b.n	8008280 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800827c:	2301      	movs	r3, #1
 800827e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	461a      	mov	r2, r3
 8008284:	2184      	movs	r1, #132	; 0x84
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f003 fc12 	bl	800bab0 <VL53L0X_WrByte>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e0f3      	b.n	800847a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008292:	78bb      	ldrb	r3, [r7, #2]
 8008294:	2b15      	cmp	r3, #21
 8008296:	f040 8097 	bne.w	80083c8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800829a:	2201      	movs	r2, #1
 800829c:	21ff      	movs	r1, #255	; 0xff
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f003 fc06 	bl	800bab0 <VL53L0X_WrByte>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f003 fbfc 	bl	800bab0 <VL53L0X_WrByte>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461a      	mov	r2, r3
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	4313      	orrs	r3, r2
 80082c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80082c2:	2200      	movs	r2, #0
 80082c4:	21ff      	movs	r1, #255	; 0xff
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f003 fbf2 	bl	800bab0 <VL53L0X_WrByte>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80082d6:	2201      	movs	r2, #1
 80082d8:	2180      	movs	r1, #128	; 0x80
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f003 fbe8 	bl	800bab0 <VL53L0X_WrByte>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80082ea:	2202      	movs	r2, #2
 80082ec:	2185      	movs	r1, #133	; 0x85
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f003 fbde 	bl	800bab0 <VL53L0X_WrByte>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80082fe:	2204      	movs	r2, #4
 8008300:	21ff      	movs	r1, #255	; 0xff
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f003 fbd4 	bl	800bab0 <VL53L0X_WrByte>
 8008308:	4603      	mov	r3, r0
 800830a:	461a      	mov	r2, r3
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4313      	orrs	r3, r2
 8008310:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008312:	2200      	movs	r2, #0
 8008314:	21cd      	movs	r1, #205	; 0xcd
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f003 fbca 	bl	800bab0 <VL53L0X_WrByte>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4313      	orrs	r3, r2
 8008324:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008326:	2211      	movs	r2, #17
 8008328:	21cc      	movs	r1, #204	; 0xcc
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f003 fbc0 	bl	800bab0 <VL53L0X_WrByte>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	4313      	orrs	r3, r2
 8008338:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800833a:	2207      	movs	r2, #7
 800833c:	21ff      	movs	r1, #255	; 0xff
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f003 fbb6 	bl	800bab0 <VL53L0X_WrByte>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	4313      	orrs	r3, r2
 800834c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800834e:	2200      	movs	r2, #0
 8008350:	21be      	movs	r1, #190	; 0xbe
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f003 fbac 	bl	800bab0 <VL53L0X_WrByte>
 8008358:	4603      	mov	r3, r0
 800835a:	461a      	mov	r2, r3
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	4313      	orrs	r3, r2
 8008360:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008362:	2206      	movs	r2, #6
 8008364:	21ff      	movs	r1, #255	; 0xff
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f003 fba2 	bl	800bab0 <VL53L0X_WrByte>
 800836c:	4603      	mov	r3, r0
 800836e:	461a      	mov	r2, r3
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4313      	orrs	r3, r2
 8008374:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008376:	2209      	movs	r2, #9
 8008378:	21cc      	movs	r1, #204	; 0xcc
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f003 fb98 	bl	800bab0 <VL53L0X_WrByte>
 8008380:	4603      	mov	r3, r0
 8008382:	461a      	mov	r2, r3
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	4313      	orrs	r3, r2
 8008388:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800838a:	2200      	movs	r2, #0
 800838c:	21ff      	movs	r1, #255	; 0xff
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f003 fb8e 	bl	800bab0 <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4313      	orrs	r3, r2
 800839c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800839e:	2201      	movs	r2, #1
 80083a0:	21ff      	movs	r1, #255	; 0xff
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f003 fb84 	bl	800bab0 <VL53L0X_WrByte>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f003 fb7a 	bl	800bab0 <VL53L0X_WrByte>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	73fb      	strb	r3, [r7, #15]
 80083c6:	e058      	b.n	800847a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80083c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d121      	bne.n	8008414 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80083d0:	787b      	ldrb	r3, [r7, #1]
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d81b      	bhi.n	800840e <VL53L0X_SetGpioConfig+0x1ce>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <VL53L0X_SetGpioConfig+0x19c>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	080083f1 	.word	0x080083f1
 80083e0:	080083f7 	.word	0x080083f7
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	08008403 	.word	0x08008403
 80083ec:	08008409 	.word	0x08008409
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73bb      	strb	r3, [r7, #14]
				break;
 80083f4:	e00f      	b.n	8008416 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80083f6:	2301      	movs	r3, #1
 80083f8:	73bb      	strb	r3, [r7, #14]
				break;
 80083fa:	e00c      	b.n	8008416 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80083fc:	2302      	movs	r3, #2
 80083fe:	73bb      	strb	r3, [r7, #14]
				break;
 8008400:	e009      	b.n	8008416 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008402:	2303      	movs	r3, #3
 8008404:	73bb      	strb	r3, [r7, #14]
				break;
 8008406:	e006      	b.n	8008416 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008408:	2304      	movs	r3, #4
 800840a:	73bb      	strb	r3, [r7, #14]
				break;
 800840c:	e003      	b.n	8008416 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800840e:	23f5      	movs	r3, #245	; 0xf5
 8008410:	73fb      	strb	r3, [r7, #15]
 8008412:	e000      	b.n	8008416 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008414:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d107      	bne.n	800842e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	461a      	mov	r2, r3
 8008422:	210a      	movs	r1, #10
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f003 fb43 	bl	800bab0 <VL53L0X_WrByte>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800842e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10f      	bne.n	8008456 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008436:	7e3b      	ldrb	r3, [r7, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]
 8008440:	e001      	b.n	8008446 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008442:	2310      	movs	r3, #16
 8008444:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	22ef      	movs	r2, #239	; 0xef
 800844a:	2184      	movs	r1, #132	; 0x84
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f003 fb7d 	bl	800bb4c <VL53L0X_UpdateByte>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	787a      	ldrb	r2, [r7, #1]
 8008462:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d105      	bne.n	800847a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800846e:	2100      	movs	r1, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f83f 	bl	80084f4 <VL53L0X_ClearInterruptMask>
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800847a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop

08008488 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	460b      	mov	r3, r1
 8008496:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800849c:	f107 0314 	add.w	r3, r7, #20
 80084a0:	461a      	mov	r2, r3
 80084a2:	210e      	movs	r1, #14
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f003 fbaf 	bl	800bc08 <VL53L0X_RdWord>
 80084aa:	4603      	mov	r3, r0
 80084ac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80084ae:	8abb      	ldrh	r3, [r7, #20]
 80084b0:	045b      	lsls	r3, r3, #17
 80084b2:	461a      	mov	r2, r3
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80084bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10f      	bne.n	80084e4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80084c4:	f107 0314 	add.w	r3, r7, #20
 80084c8:	461a      	mov	r2, r3
 80084ca:	210c      	movs	r1, #12
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f003 fb9b 	bl	800bc08 <VL53L0X_RdWord>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80084d6:	8abb      	ldrh	r3, [r7, #20]
 80084d8:	045b      	lsls	r3, r3, #17
 80084da:	461a      	mov	r2, r3
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80084de:	4013      	ands	r3, r2
		*pThresholdHigh =
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	1ffe0000 	.word	0x1ffe0000

080084f4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008506:	2201      	movs	r2, #1
 8008508:	210b      	movs	r1, #11
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f003 fad0 	bl	800bab0 <VL53L0X_WrByte>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008514:	2200      	movs	r2, #0
 8008516:	210b      	movs	r1, #11
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f003 fac9 	bl	800bab0 <VL53L0X_WrByte>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4313      	orrs	r3, r2
 8008526:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008528:	f107 030d 	add.w	r3, r7, #13
 800852c:	461a      	mov	r2, r3
 800852e:	2113      	movs	r1, #19
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f003 fb3f 	bl	800bbb4 <VL53L0X_RdByte>
 8008536:	4603      	mov	r3, r0
 8008538:	461a      	mov	r2, r3
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	4313      	orrs	r3, r2
 800853e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	3301      	adds	r3, #1
 8008544:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008546:	7b7b      	ldrb	r3, [r7, #13]
 8008548:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d803      	bhi.n	800855e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0d3      	beq.n	8008506 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008564:	23f4      	movs	r3, #244	; 0xf4
 8008566:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008582:	f107 030e 	add.w	r3, r7, #14
 8008586:	461a      	mov	r2, r3
 8008588:	2113      	movs	r1, #19
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f003 fb12 	bl	800bbb4 <VL53L0X_RdByte>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 0207 	and.w	r2, r3, #7
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	f003 0318 	and.w	r3, r3, #24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80085a8:	23fa      	movs	r3, #250	; 0xfa
 80085aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80085ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	461a      	mov	r2, r3
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fc3f 	bl	8008e54 <VL53L0X_set_reference_spads>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 80085da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <VL53L0X_PerformContinuousRangingMeasurement>:

	return Status;
}


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80085f0:	2101      	movs	r1, #1
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fe fece 	bl	8007394 <VL53L0X_SetDeviceMode>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80085fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 8008604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008608:	e019      	b.n	800863e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fbc2 	bl	8007d94 <VL53L0X_StartMeasurement>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8008614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800861c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008620:	e00d      	b.n	800863e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fcb7 	bl	8007f98 <VL53L0X_GetRangingMeasurementData>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800862e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 8008636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800863a:	e000      	b.n	800863e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008650:	2300      	movs	r3, #0
 8008652:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008654:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008658:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800865a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008660:	f107 0308 	add.w	r3, r7, #8
 8008664:	461a      	mov	r2, r3
 8008666:	2128      	movs	r1, #40	; 0x28
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f003 facd 	bl	800bc08 <VL53L0X_RdWord>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d11e      	bne.n	80086b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800867a:	893b      	ldrh	r3, [r7, #8]
 800867c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008680:	b29b      	uxth	r3, r3
 8008682:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008684:	893b      	ldrh	r3, [r7, #8]
 8008686:	461a      	mov	r2, r3
 8008688:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800868c:	429a      	cmp	r2, r3
 800868e:	dd0b      	ble.n	80086a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008690:	893a      	ldrh	r2, [r7, #8]
 8008692:	897b      	ldrh	r3, [r7, #10]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	b29b      	uxth	r3, r3
 8008698:	b21b      	sxth	r3, r3
 800869a:	461a      	mov	r2, r3
					* 250;
 800869c:	23fa      	movs	r3, #250	; 0xfa
 800869e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	e007      	b.n	80086b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80086a8:	893b      	ldrh	r3, [r7, #8]
 80086aa:	b21b      	sxth	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	23fa      	movs	r3, #250	; 0xfa
 80086b0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80086b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b08b      	sub	sp, #44	; 0x2c
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80086d2:	2308      	movs	r3, #8
 80086d4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f04f 32ff 	mov.w	r2, #4294967295
 80086e0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ea:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80086f4:	69b9      	ldr	r1, [r7, #24]
 80086f6:	fb01 f202 	mul.w	r2, r1, r2
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
 8008702:	e030      	b.n	8008766 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	4413      	add	r3, r2
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	429a      	cmp	r2, r3
 8008718:	d11e      	bne.n	8008758 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800871a:	7ffa      	ldrb	r2, [r7, #31]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	fa42 f303 	asr.w	r3, r2, r3
 8008722:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008728:	e016      	b.n	8008758 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800872a:	7ffb      	ldrb	r3, [r7, #31]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <get_next_good_spad+0x88>
				success = 1;
 8008734:	2301      	movs	r3, #1
 8008736:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	fb03 f202 	mul.w	r2, r3, r2
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	4413      	add	r3, r2
 8008744:	461a      	mov	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	601a      	str	r2, [r3, #0]
				break;
 800874a:	e009      	b.n	8008760 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800874c:	7ffb      	ldrb	r3, [r7, #31]
 800874e:	085b      	lsrs	r3, r3, #1
 8008750:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	3301      	adds	r3, #1
 8008756:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008758:	6a3a      	ldr	r2, [r7, #32]
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	429a      	cmp	r2, r3
 800875e:	d3e4      	bcc.n	800872a <get_next_good_spad+0x66>
				coarseIndex++) {
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	3301      	adds	r3, #1
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	429a      	cmp	r2, r3
 800876c:	d202      	bcs.n	8008774 <get_next_good_spad+0xb0>
 800876e:	7fbb      	ldrb	r3, [r7, #30]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0c7      	beq.n	8008704 <get_next_good_spad+0x40>
		}
	}
}
 8008774:	bf00      	nop
 8008776:	372c      	adds	r7, #44	; 0x2c
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	099b      	lsrs	r3, r3, #6
 8008790:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008792:	4a07      	ldr	r2, [pc, #28]	; (80087b0 <is_aperture+0x30>)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <is_aperture+0x22>
		isAperture = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	2000044c 	.word	0x2000044c

080087b4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b089      	sub	sp, #36	; 0x24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80087c4:	2308      	movs	r3, #8
 80087c6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80087da:	69b9      	ldr	r1, [r7, #24]
 80087dc:	fb01 f202 	mul.w	r2, r1, r2
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d302      	bcc.n	80087f2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80087ec:	23ce      	movs	r3, #206	; 0xce
 80087ee:	77fb      	strb	r3, [r7, #31]
 80087f0:	e010      	b.n	8008814 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4413      	add	r3, r2
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b25a      	sxtb	r2, r3
 80087fc:	2101      	movs	r1, #1
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	fa01 f303 	lsl.w	r3, r1, r3
 8008804:	b25b      	sxtb	r3, r3
 8008806:	4313      	orrs	r3, r2
 8008808:	b259      	sxtb	r1, r3
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	4413      	add	r3, r2
 8008810:	b2ca      	uxtb	r2, r1
 8008812:	701a      	strb	r2, [r3, #0]

	return status;
 8008814:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3724      	adds	r7, #36	; 0x24
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800882e:	2306      	movs	r3, #6
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	21b0      	movs	r1, #176	; 0xb0
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f003 f8df 	bl	800b9f8 <VL53L0X_WriteMulti>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800883e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008854:	2306      	movs	r3, #6
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	21b0      	movs	r1, #176	; 0xb0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f003 f8fc 	bl	800ba58 <VL53L0X_ReadMulti>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08c      	sub	sp, #48	; 0x30
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	460b      	mov	r3, r1
 800887e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008880:	2300      	movs	r3, #0
 8008882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008888:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800888a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800888c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800888e:	2300      	movs	r3, #0
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
 8008892:	e02b      	b.n	80088ec <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008894:	f107 031c 	add.w	r3, r7, #28
 8008898:	6a3a      	ldr	r2, [r7, #32]
 800889a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff ff11 	bl	80086c4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d103      	bne.n	80088b2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80088aa:	23ce      	movs	r3, #206	; 0xce
 80088ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80088b0:	e020      	b.n	80088f4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	4413      	add	r3, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff ff60 	bl	8008780 <is_aperture>
 80088c0:	4603      	mov	r3, r0
 80088c2:	461a      	mov	r2, r3
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80088ca:	23ce      	movs	r3, #206	; 0xce
 80088cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80088d0:	e010      	b.n	80088f4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088da:	6838      	ldr	r0, [r7, #0]
 80088dc:	f7ff ff6a 	bl	80087b4 <enable_spad_bit>
		currentSpad++;
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	3301      	adds	r3, #1
 80088e4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	3301      	adds	r3, #1
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d3cf      	bcc.n	8008894 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80088f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f6:	6a3a      	ldr	r2, [r7, #32]
 80088f8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80088fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff ff8d 	bl	8008824 <set_ref_spad_map>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008910:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008914:	2b00      	cmp	r3, #0
 8008916:	d121      	bne.n	800895c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	4619      	mov	r1, r3
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff ff93 	bl	800884a <get_ref_spad_map>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800892e:	e011      	b.n	8008954 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	4413      	add	r3, r2
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	f107 0114 	add.w	r1, r7, #20
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	440b      	add	r3, r1
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d003      	beq.n	800894e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008946:	23ce      	movs	r3, #206	; 0xce
 8008948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800894c:	e006      	b.n	800895c <enable_ref_spads+0xec>
			}
			i++;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	3301      	adds	r3, #1
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	429a      	cmp	r2, r3
 800895a:	d3e9      	bcc.n	8008930 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800895c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008960:	4618      	mov	r0, r3
 8008962:	3730      	adds	r7, #48	; 0x30
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	; 0x28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008972:	2300      	movs	r3, #0
 8008974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800898c:	2b00      	cmp	r3, #0
 800898e:	d107      	bne.n	80089a0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008990:	22c0      	movs	r2, #192	; 0xc0
 8008992:	2101      	movs	r1, #1
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f003 f88b 	bl	800bab0 <VL53L0X_WrByte>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80089a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d108      	bne.n	80089ba <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80089a8:	f107 0308 	add.w	r3, r7, #8
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff fc16 	bl	80081e0 <VL53L0X_PerformSingleRangingMeasurement>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80089ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d107      	bne.n	80089d2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80089c2:	2201      	movs	r2, #1
 80089c4:	21ff      	movs	r1, #255	; 0xff
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f003 f872 	bl	800bab0 <VL53L0X_WrByte>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80089d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	21b6      	movs	r1, #182	; 0xb6
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f003 f912 	bl	800bc08 <VL53L0X_RdWord>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80089ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d107      	bne.n	8008a02 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80089f2:	2200      	movs	r2, #0
 80089f4:	21ff      	movs	r1, #255	; 0xff
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f003 f85a 	bl	800bab0 <VL53L0X_WrByte>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008a02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d112      	bne.n	8008a30 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008a0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a0e:	461a      	mov	r2, r3
 8008a10:	2101      	movs	r1, #1
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f003 f84c 	bl	800bab0 <VL53L0X_WrByte>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008a1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008a2c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008a30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3728      	adds	r7, #40	; 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008a3c:	b590      	push	{r4, r7, lr}
 8008a3e:	b09d      	sub	sp, #116	; 0x74
 8008a40:	af06      	add	r7, sp, #24
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008a4e:	23b4      	movs	r3, #180	; 0xb4
 8008a50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008a54:	2303      	movs	r3, #3
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008a58:	232c      	movs	r3, #44	; 0x2c
 8008a5a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008a68:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008a6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008a76:	2306      	movs	r3, #6
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aa6:	e009      	b.n	8008abc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ab8:	3301      	adds	r3, #1
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3f1      	bcc.n	8008aa8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	21ff      	movs	r1, #255	; 0xff
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f002 fff1 	bl	800bab0 <VL53L0X_WrByte>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008ad4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d107      	bne.n	8008aec <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008adc:	2200      	movs	r2, #0
 8008ade:	214f      	movs	r1, #79	; 0x4f
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f002 ffe5 	bl	800bab0 <VL53L0X_WrByte>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008aec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d107      	bne.n	8008b04 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008af4:	222c      	movs	r2, #44	; 0x2c
 8008af6:	214e      	movs	r1, #78	; 0x4e
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f002 ffd9 	bl	800bab0 <VL53L0X_WrByte>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008b04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d107      	bne.n	8008b1c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	21ff      	movs	r1, #255	; 0xff
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f002 ffcd 	bl	800bab0 <VL53L0X_WrByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008b1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d109      	bne.n	8008b38 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008b24:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008b28:	461a      	mov	r2, r3
 8008b2a:	21b6      	movs	r1, #182	; 0xb6
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f002 ffbf 	bl	800bab0 <VL53L0X_WrByte>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008b38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d107      	bne.n	8008b50 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008b40:	2200      	movs	r2, #0
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f002 ffb3 	bl	800bab0 <VL53L0X_WrByte>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008b50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008b58:	f107 0210 	add.w	r2, r7, #16
 8008b5c:	f107 0111 	add.w	r1, r7, #17
 8008b60:	2300      	movs	r3, #0
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fbbb 	bl	80092de <VL53L0X_perform_ref_calibration>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008b6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d121      	bne.n	8008bba <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b7c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b84:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008b92:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008b96:	f107 0218 	add.w	r2, r7, #24
 8008b9a:	9204      	str	r2, [sp, #16]
 8008b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b9e:	9203      	str	r2, [sp, #12]
 8008ba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ba2:	9202      	str	r2, [sp, #8]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4623      	mov	r3, r4
 8008bac:	4602      	mov	r2, r0
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff fe5e 	bl	8008870 <enable_ref_spads>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008bba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d174      	bne.n	8008cac <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008bc6:	f107 0312 	add.w	r3, r7, #18
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff fecb 	bl	8008968 <perform_ref_signal_measurement>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d161      	bne.n	8008ca4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008be0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008be2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d25d      	bcs.n	8008ca4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008be8:	2300      	movs	r3, #0
 8008bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bec:	e009      	b.n	8008c02 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfe:	3301      	adds	r3, #1
 8008c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3f1      	bcc.n	8008bee <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008c0a:	e002      	b.n	8008c12 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c0e:	3301      	adds	r3, #1
 8008c10:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008c12:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c18:	4413      	add	r3, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff fdb0 	bl	8008780 <is_aperture>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008c26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d3ee      	bcc.n	8008c0c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c34:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008c42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c46:	f107 0218 	add.w	r2, r7, #24
 8008c4a:	9204      	str	r2, [sp, #16]
 8008c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c4e:	9203      	str	r2, [sp, #12]
 8008c50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c52:	9202      	str	r2, [sp, #8]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff fe06 	bl	8008870 <enable_ref_spads>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008c6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11b      	bne.n	8008caa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008c76:	f107 0312 	add.w	r3, r7, #18
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff fe73 	bl	8008968 <perform_ref_signal_measurement>
 8008c82:	4603      	mov	r3, r0
 8008c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008c88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008c90:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008c92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d208      	bcs.n	8008caa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008ca2:	e002      	b.n	8008caa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca8:	e000      	b.n	8008cac <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008caa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008cac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f040 80af 	bne.w	8008e14 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008cb6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008cb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	f240 80aa 	bls.w	8008e14 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008cd0:	f107 031c 	add.w	r3, r7, #28
 8008cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f006 f832 	bl	800ed40 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008cdc:	8a7b      	ldrh	r3, [r7, #18]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfb8      	it	lt
 8008ce8:	425b      	neglt	r3, r3
 8008cea:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008cf2:	e086      	b.n	8008e02 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008cfa:	f107 0314 	add.w	r3, r7, #20
 8008cfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d02:	f7ff fcdf 	bl	80086c4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0c:	d103      	bne.n	8008d16 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008d0e:	23ce      	movs	r3, #206	; 0xce
 8008d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008d14:	e07e      	b.n	8008e14 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008d16:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fd2e 	bl	8008780 <is_aperture>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008d34:	e06e      	b.n	8008e14 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d38:	3301      	adds	r3, #1
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff fd32 	bl	80087b4 <enable_spad_bit>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008d56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10c      	bne.n	8008d78 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d60:	3301      	adds	r3, #1
 8008d62:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7ff fd59 	bl	8008824 <set_ref_spad_map>
 8008d72:	4603      	mov	r3, r0
 8008d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008d78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d146      	bne.n	8008e0e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008d80:	f107 0312 	add.w	r3, r7, #18
 8008d84:	4619      	mov	r1, r3
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff fdee 	bl	8008968 <perform_ref_signal_measurement>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008d92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d13b      	bne.n	8008e12 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008d9a:	8a7b      	ldrh	r3, [r7, #18]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfb8      	it	lt
 8008da6:	425b      	neglt	r3, r3
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008daa:	8a7b      	ldrh	r3, [r7, #18]
 8008dac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d21c      	bcs.n	8008dec <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d914      	bls.n	8008de4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008dba:	f107 031c 	add.w	r3, r7, #28
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff fd2f 	bl	8008824 <set_ref_spad_map>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008dd2:	f107 011c 	add.w	r1, r7, #28
 8008dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f005 ffb1 	bl	800ed40 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de0:	3b01      	subs	r3, #1
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dea:	e00a      	b.n	8008e02 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008df6:	f107 031c 	add.w	r3, r7, #28
 8008dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f005 ff9f 	bl	800ed40 <memcpy>
		while (!complete) {
 8008e02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f43f af74 	beq.w	8008cf4 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008e0c:	e002      	b.n	8008e14 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008e0e:	bf00      	nop
 8008e10:	e000      	b.n	8008e14 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008e12:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d115      	bne.n	8008e48 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e20:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008e28:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008e48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	375c      	adds	r7, #92	; 0x5c
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd90      	pop	{r4, r7, pc}

08008e54 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008e54:	b590      	push	{r4, r7, lr}
 8008e56:	b093      	sub	sp, #76	; 0x4c
 8008e58:	af06      	add	r7, sp, #24
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008e6c:	23b4      	movs	r3, #180	; 0xb4
 8008e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008e72:	2306      	movs	r3, #6
 8008e74:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008e76:	232c      	movs	r3, #44	; 0x2c
 8008e78:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	21ff      	movs	r1, #255	; 0xff
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f002 fe16 	bl	800bab0 <VL53L0X_WrByte>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008e8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d107      	bne.n	8008ea2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008e92:	2200      	movs	r2, #0
 8008e94:	214f      	movs	r1, #79	; 0x4f
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f002 fe0a 	bl	800bab0 <VL53L0X_WrByte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d107      	bne.n	8008eba <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008eaa:	222c      	movs	r2, #44	; 0x2c
 8008eac:	214e      	movs	r1, #78	; 0x4e
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f002 fdfe 	bl	800bab0 <VL53L0X_WrByte>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008eba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d107      	bne.n	8008ed2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	21ff      	movs	r1, #255	; 0xff
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f002 fdf2 	bl	800bab0 <VL53L0X_WrByte>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008ed2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d109      	bne.n	8008eee <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ede:	461a      	mov	r2, r3
 8008ee0:	21b6      	movs	r1, #182	; 0xb6
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f002 fde4 	bl	800bab0 <VL53L0X_WrByte>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef2:	e009      	b.n	8008f08 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	3301      	adds	r3, #1
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d3f1      	bcc.n	8008ef4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d011      	beq.n	8008f3a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008f16:	e002      	b.n	8008f1e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008f1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	4413      	add	r3, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff fc2a 	bl	8008780 <is_aperture>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d103      	bne.n	8008f3a <VL53L0X_set_reference_spads+0xe6>
 8008f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3ee      	bcc.n	8008f18 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f4a:	79f9      	ldrb	r1, [r7, #7]
 8008f4c:	f107 0214 	add.w	r2, r7, #20
 8008f50:	9204      	str	r2, [sp, #16]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	9203      	str	r2, [sp, #12]
 8008f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f58:	9202      	str	r2, [sp, #8]
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4623      	mov	r3, r4
 8008f62:	4602      	mov	r2, r0
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fc83 	bl	8008870 <enable_ref_spads>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10c      	bne.n	8008f92 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	79fa      	ldrb	r2, [r7, #7]
 8008f8e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008f92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3734      	adds	r7, #52	; 0x34
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd90      	pop	{r4, r7, pc}

08008f9e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 fd74 	bl	800bab0 <VL53L0X_WrByte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9e2 	bl	800939e <VL53L0X_measurement_poll_for_completion>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff fa83 	bl	80084f4 <VL53L0X_ClearInterruptMask>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f002 fd56 	bl	800bab0 <VL53L0X_WrByte>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	4608      	mov	r0, r1
 800901e:	4611      	mov	r1, r2
 8009020:	461a      	mov	r2, r3
 8009022:	4603      	mov	r3, r0
 8009024:	70fb      	strb	r3, [r7, #3]
 8009026:	460b      	mov	r3, r1
 8009028:	70bb      	strb	r3, [r7, #2]
 800902a:	4613      	mov	r3, r2
 800902c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009036:	2201      	movs	r2, #1
 8009038:	21ff      	movs	r1, #255	; 0xff
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f002 fd38 	bl	800bab0 <VL53L0X_WrByte>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	4313      	orrs	r3, r2
 8009048:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800904a:	2200      	movs	r2, #0
 800904c:	2100      	movs	r1, #0
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f002 fd2e 	bl	800bab0 <VL53L0X_WrByte>
 8009054:	4603      	mov	r3, r0
 8009056:	461a      	mov	r2, r3
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	4313      	orrs	r3, r2
 800905c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800905e:	2200      	movs	r2, #0
 8009060:	21ff      	movs	r1, #255	; 0xff
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f002 fd24 	bl	800bab0 <VL53L0X_WrByte>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4313      	orrs	r3, r2
 8009070:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01e      	beq.n	80090b6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009078:	f897 3020 	ldrb.w	r3, [r7, #32]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	21cb      	movs	r1, #203	; 0xcb
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f002 fd95 	bl	800bbb4 <VL53L0X_RdByte>
 800908a:	4603      	mov	r3, r0
 800908c:	461a      	mov	r2, r3
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	4313      	orrs	r3, r2
 8009092:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d02a      	beq.n	80090f2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800909c:	f107 030e 	add.w	r3, r7, #14
 80090a0:	461a      	mov	r2, r3
 80090a2:	21ee      	movs	r1, #238	; 0xee
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f002 fd85 	bl	800bbb4 <VL53L0X_RdByte>
 80090aa:	4603      	mov	r3, r0
 80090ac:	461a      	mov	r2, r3
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	73fb      	strb	r3, [r7, #15]
 80090b4:	e01d      	b.n	80090f2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80090b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80090be:	78bb      	ldrb	r3, [r7, #2]
 80090c0:	461a      	mov	r2, r3
 80090c2:	21cb      	movs	r1, #203	; 0xcb
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f002 fcf3 	bl	800bab0 <VL53L0X_WrByte>
 80090ca:	4603      	mov	r3, r0
 80090cc:	461a      	mov	r2, r3
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80090d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80090dc:	787b      	ldrb	r3, [r7, #1]
 80090de:	2280      	movs	r2, #128	; 0x80
 80090e0:	21ee      	movs	r1, #238	; 0xee
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f002 fd32 	bl	800bb4c <VL53L0X_UpdateByte>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090f2:	2201      	movs	r2, #1
 80090f4:	21ff      	movs	r1, #255	; 0xff
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f002 fcda 	bl	800bab0 <VL53L0X_WrByte>
 80090fc:	4603      	mov	r3, r0
 80090fe:	461a      	mov	r2, r3
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	4313      	orrs	r3, r2
 8009104:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009106:	2201      	movs	r2, #1
 8009108:	2100      	movs	r1, #0
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f002 fcd0 	bl	800bab0 <VL53L0X_WrByte>
 8009110:	4603      	mov	r3, r0
 8009112:	461a      	mov	r2, r3
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4313      	orrs	r3, r2
 8009118:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800911a:	2200      	movs	r2, #0
 800911c:	21ff      	movs	r1, #255	; 0xff
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f002 fcc6 	bl	800bab0 <VL53L0X_WrByte>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4313      	orrs	r3, r2
 800912c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	f023 0310 	bic.w	r3, r3, #16
 8009134:	b2da      	uxtb	r2, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	701a      	strb	r2, [r3, #0]

	return Status;
 800913a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b08a      	sub	sp, #40	; 0x28
 800914a:	af04      	add	r7, sp, #16
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	4611      	mov	r1, r2
 8009152:	461a      	mov	r2, r3
 8009154:	460b      	mov	r3, r1
 8009156:	71fb      	strb	r3, [r7, #7]
 8009158:	4613      	mov	r3, r2
 800915a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009170:	79bb      	ldrb	r3, [r7, #6]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800917c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800917e:	2201      	movs	r2, #1
 8009180:	2101      	movs	r1, #1
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f002 fc94 	bl	800bab0 <VL53L0X_WrByte>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800918c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009194:	2140      	movs	r1, #64	; 0x40
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff ff01 	bl	8008f9e <VL53L0X_perform_single_ref_calibration>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80091a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d115      	bne.n	80091d4 <VL53L0X_perform_vhv_calibration+0x8e>
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d112      	bne.n	80091d4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80091ae:	7d39      	ldrb	r1, [r7, #20]
 80091b0:	7d7a      	ldrb	r2, [r7, #21]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	2301      	movs	r3, #1
 80091b8:	9302      	str	r3, [sp, #8]
 80091ba:	f107 0313 	add.w	r3, r7, #19
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	460b      	mov	r3, r1
 80091c6:	2101      	movs	r1, #1
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7ff ff23 	bl	8009014 <VL53L0X_ref_calibration_io>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75fb      	strb	r3, [r7, #23]
 80091d2:	e002      	b.n	80091da <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2200      	movs	r2, #0
 80091d8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80091da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d112      	bne.n	8009208 <VL53L0X_perform_vhv_calibration+0xc2>
 80091e2:	79bb      	ldrb	r3, [r7, #6]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00f      	beq.n	8009208 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80091e8:	7dbb      	ldrb	r3, [r7, #22]
 80091ea:	461a      	mov	r2, r3
 80091ec:	2101      	movs	r1, #1
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f002 fc5e 	bl	800bab0 <VL53L0X_WrByte>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80091f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d103      	bne.n	8009208 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	7dba      	ldrb	r2, [r7, #22]
 8009204:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009208:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08a      	sub	sp, #40	; 0x28
 8009218:	af04      	add	r7, sp, #16
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4611      	mov	r1, r2
 8009220:	461a      	mov	r2, r3
 8009222:	460b      	mov	r3, r1
 8009224:	71fb      	strb	r3, [r7, #7]
 8009226:	4613      	mov	r3, r2
 8009228:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800922a:	2300      	movs	r3, #0
 800922c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800922e:	2300      	movs	r3, #0
 8009230:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800923a:	79bb      	ldrb	r3, [r7, #6]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009246:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009248:	2202      	movs	r2, #2
 800924a:	2101      	movs	r1, #1
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f002 fc2f 	bl	800bab0 <VL53L0X_WrByte>
 8009252:	4603      	mov	r3, r0
 8009254:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d105      	bne.n	800926a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800925e:	2100      	movs	r1, #0
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7ff fe9c 	bl	8008f9e <VL53L0X_perform_single_ref_calibration>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800926a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d115      	bne.n	800929e <VL53L0X_perform_phase_calibration+0x8a>
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d112      	bne.n	800929e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009278:	7d39      	ldrb	r1, [r7, #20]
 800927a:	7d7a      	ldrb	r2, [r7, #21]
 800927c:	2301      	movs	r3, #1
 800927e:	9303      	str	r3, [sp, #12]
 8009280:	2300      	movs	r3, #0
 8009282:	9302      	str	r3, [sp, #8]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	f107 0313 	add.w	r3, r7, #19
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	460b      	mov	r3, r1
 8009290:	2101      	movs	r1, #1
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff febe 	bl	8009014 <VL53L0X_ref_calibration_io>
 8009298:	4603      	mov	r3, r0
 800929a:	75fb      	strb	r3, [r7, #23]
 800929c:	e002      	b.n	80092a4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2200      	movs	r2, #0
 80092a2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80092a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d112      	bne.n	80092d2 <VL53L0X_perform_phase_calibration+0xbe>
 80092ac:	79bb      	ldrb	r3, [r7, #6]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00f      	beq.n	80092d2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80092b2:	7dbb      	ldrb	r3, [r7, #22]
 80092b4:	461a      	mov	r2, r3
 80092b6:	2101      	movs	r1, #1
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f002 fbf9 	bl	800bab0 <VL53L0X_WrByte>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80092c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d103      	bne.n	80092d2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	7dba      	ldrb	r2, [r7, #22]
 80092ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80092d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80092fa:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	2300      	movs	r3, #0
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff ff1f 	bl	8009146 <VL53L0X_perform_vhv_calibration>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800930c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d107      	bne.n	8009324 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	2300      	movs	r3, #0
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f7ff ff7a 	bl	8009214 <VL53L0X_perform_phase_calibration>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10f      	bne.n	800934c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800932c:	7dbb      	ldrb	r3, [r7, #22]
 800932e:	461a      	mov	r2, r3
 8009330:	2101      	movs	r1, #1
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f002 fbbc 	bl	800bab0 <VL53L0X_WrByte>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800933c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	7dba      	ldrb	r2, [r7, #22]
 8009348:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800934c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af04      	add	r7, sp, #16
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
 8009364:	4613      	mov	r3, r2
 8009366:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009368:	2300      	movs	r3, #0
 800936a:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800936c:	78b9      	ldrb	r1, [r7, #2]
 800936e:	78fa      	ldrb	r2, [r7, #3]
 8009370:	2301      	movs	r3, #1
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	2301      	movs	r3, #1
 8009376:	9302      	str	r3, [sp, #8]
 8009378:	f107 030d 	add.w	r3, r7, #13
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	f107 030e 	add.w	r3, r7, #14
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	460b      	mov	r3, r1
 8009386:	2100      	movs	r1, #0
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fe43 	bl	8009014 <VL53L0X_ref_calibration_io>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 8009392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80093b2:	f107 030f 	add.w	r3, r7, #15
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fe fdad 	bl	8007f18 <VL53L0X_GetMeasurementDataReady>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80093c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d110      	bne.n	80093ec <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d00f      	beq.n	80093f0 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3301      	adds	r3, #1
 80093d4:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80093dc:	d302      	bcc.n	80093e4 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80093de:	23f9      	movs	r3, #249	; 0xf9
 80093e0:	75fb      	strb	r3, [r7, #23]
			break;
 80093e2:	e006      	b.n	80093f2 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 fc83 	bl	800bcf0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80093ea:	e7e2      	b.n	80093b2 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80093ec:	bf00      	nop
 80093ee:	e000      	b.n	80093f2 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80093f0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80093f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	4603      	mov	r3, r0
 8009406:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800940c:	79fb      	ldrb	r3, [r7, #7]
 800940e:	3301      	adds	r3, #1
 8009410:	b2db      	uxtb	r3, r3
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	b2db      	uxtb	r3, r3
 8009438:	3b01      	subs	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800945a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800945c:	e002      	b.n	8009464 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	089b      	lsrs	r3, r3, #2
 8009462:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	429a      	cmp	r2, r3
 800946a:	d8f8      	bhi.n	800945e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800946c:	e017      	b.n	800949e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4413      	add	r3, r2
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d30b      	bcc.n	8009492 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4413      	add	r3, r2
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	085b      	lsrs	r3, r3, #1
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	e002      	b.n	8009498 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	089b      	lsrs	r3, r3, #2
 800949c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e4      	bne.n	800946e <VL53L0X_isqrt+0x24>
	}

	return res;
 80094a4:	68fb      	ldr	r3, [r7, #12]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b086      	sub	sp, #24
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80094be:	2200      	movs	r2, #0
 80094c0:	2183      	movs	r1, #131	; 0x83
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f002 faf4 	bl	800bab0 <VL53L0X_WrByte>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80094d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d11e      	bne.n	8009518 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80094de:	f107 030f 	add.w	r3, r7, #15
 80094e2:	461a      	mov	r2, r3
 80094e4:	2183      	movs	r1, #131	; 0x83
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f002 fb64 	bl	800bbb4 <VL53L0X_RdByte>
 80094ec:	4603      	mov	r3, r0
 80094ee:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <VL53L0X_device_read_strobe+0x5a>
 80094f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d106      	bne.n	800950c <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	3301      	adds	r3, #1
 8009502:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800950a:	d3e8      	bcc.n	80094de <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009512:	d301      	bcc.n	8009518 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009514:	23f9      	movs	r3, #249	; 0xf9
 8009516:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009518:	2201      	movs	r2, #1
 800951a:	2183      	movs	r1, #131	; 0x83
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f002 fac7 	bl	800bab0 <VL53L0X_WrByte>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	4313      	orrs	r3, r2
 800952a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800952c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b098      	sub	sp, #96	; 0x60
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009544:	2300      	movs	r3, #0
 8009546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009568:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800956c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009580:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009584:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009588:	2b07      	cmp	r3, #7
 800958a:	f000 8408 	beq.w	8009d9e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800958e:	2201      	movs	r2, #1
 8009590:	2180      	movs	r1, #128	; 0x80
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f002 fa8c 	bl	800bab0 <VL53L0X_WrByte>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80095a6:	2201      	movs	r2, #1
 80095a8:	21ff      	movs	r1, #255	; 0xff
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f002 fa80 	bl	800bab0 <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80095be:	2200      	movs	r2, #0
 80095c0:	2100      	movs	r1, #0
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f002 fa74 	bl	800bab0 <VL53L0X_WrByte>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461a      	mov	r2, r3
 80095cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80095d6:	2206      	movs	r2, #6
 80095d8:	21ff      	movs	r1, #255	; 0xff
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f002 fa68 	bl	800bab0 <VL53L0X_WrByte>
 80095e0:	4603      	mov	r3, r0
 80095e2:	461a      	mov	r2, r3
 80095e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095e8:	4313      	orrs	r3, r2
 80095ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80095ee:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80095f2:	461a      	mov	r2, r3
 80095f4:	2183      	movs	r1, #131	; 0x83
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f002 fadc 	bl	800bbb4 <VL53L0X_RdByte>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009604:	4313      	orrs	r3, r2
 8009606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800960a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800960e:	f043 0304 	orr.w	r3, r3, #4
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	2183      	movs	r1, #131	; 0x83
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f002 fa49 	bl	800bab0 <VL53L0X_WrByte>
 800961e:	4603      	mov	r3, r0
 8009620:	461a      	mov	r2, r3
 8009622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009626:	4313      	orrs	r3, r2
 8009628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800962c:	2207      	movs	r2, #7
 800962e:	21ff      	movs	r1, #255	; 0xff
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f002 fa3d 	bl	800bab0 <VL53L0X_WrByte>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800963e:	4313      	orrs	r3, r2
 8009640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009644:	2201      	movs	r2, #1
 8009646:	2181      	movs	r1, #129	; 0x81
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f002 fa31 	bl	800bab0 <VL53L0X_WrByte>
 800964e:	4603      	mov	r3, r0
 8009650:	461a      	mov	r2, r3
 8009652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009656:	4313      	orrs	r3, r2
 8009658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f002 fb47 	bl	800bcf0 <VL53L0X_PollingDelay>
 8009662:	4603      	mov	r3, r0
 8009664:	461a      	mov	r2, r3
 8009666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966a:	4313      	orrs	r3, r2
 800966c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009670:	2201      	movs	r2, #1
 8009672:	2180      	movs	r1, #128	; 0x80
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 fa1b 	bl	800bab0 <VL53L0X_WrByte>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009682:	4313      	orrs	r3, r2
 8009684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 8098 	beq.w	80097c4 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009694:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009698:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8091 	bne.w	80097c4 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80096a2:	226b      	movs	r2, #107	; 0x6b
 80096a4:	2194      	movs	r1, #148	; 0x94
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f002 fa02 	bl	800bab0 <VL53L0X_WrByte>
 80096ac:	4603      	mov	r3, r0
 80096ae:	461a      	mov	r2, r3
 80096b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096b4:	4313      	orrs	r3, r2
 80096b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff fef9 	bl	80094b2 <VL53L0X_device_read_strobe>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c8:	4313      	orrs	r3, r2
 80096ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80096ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096d2:	461a      	mov	r2, r3
 80096d4:	2190      	movs	r1, #144	; 0x90
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 face 	bl	800bc78 <VL53L0X_RdDWord>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	0a1b      	lsrs	r3, r3, #8
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	0bdb      	lsrs	r3, r3, #15
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009706:	2224      	movs	r2, #36	; 0x24
 8009708:	2194      	movs	r1, #148	; 0x94
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f002 f9d0 	bl	800bab0 <VL53L0X_WrByte>
 8009710:	4603      	mov	r3, r0
 8009712:	461a      	mov	r2, r3
 8009714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009718:	4313      	orrs	r3, r2
 800971a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff fec7 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009724:	4603      	mov	r3, r0
 8009726:	461a      	mov	r2, r3
 8009728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800972c:	4313      	orrs	r3, r2
 800972e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009736:	461a      	mov	r2, r3
 8009738:	2190      	movs	r1, #144	; 0x90
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f002 fa9c 	bl	800bc78 <VL53L0X_RdDWord>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009748:	4313      	orrs	r3, r2
 800974a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	0e1b      	lsrs	r3, r3, #24
 8009752:	b2db      	uxtb	r3, r3
 8009754:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	b2db      	uxtb	r3, r3
 800975c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	b2db      	uxtb	r3, r3
 8009764:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	b2db      	uxtb	r3, r3
 800976a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800976c:	2225      	movs	r2, #37	; 0x25
 800976e:	2194      	movs	r1, #148	; 0x94
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f002 f99d 	bl	800bab0 <VL53L0X_WrByte>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800977e:	4313      	orrs	r3, r2
 8009780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fe94 	bl	80094b2 <VL53L0X_device_read_strobe>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009792:	4313      	orrs	r3, r2
 8009794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800979c:	461a      	mov	r2, r3
 800979e:	2190      	movs	r1, #144	; 0x90
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f002 fa69 	bl	800bc78 <VL53L0X_RdDWord>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	0e1b      	lsrs	r3, r3, #24
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	0c1b      	lsrs	r3, r3, #16
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 8189 	beq.w	8009ae2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80097d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80097d4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 8182 	bne.w	8009ae2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80097de:	2202      	movs	r2, #2
 80097e0:	2194      	movs	r1, #148	; 0x94
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f002 f964 	bl	800bab0 <VL53L0X_WrByte>
 80097e8:	4603      	mov	r3, r0
 80097ea:	461a      	mov	r2, r3
 80097ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097f0:	4313      	orrs	r3, r2
 80097f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff fe5b 	bl	80094b2 <VL53L0X_device_read_strobe>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009804:	4313      	orrs	r3, r2
 8009806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800980a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800980e:	461a      	mov	r2, r3
 8009810:	2190      	movs	r1, #144	; 0x90
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f002 f9ce 	bl	800bbb4 <VL53L0X_RdByte>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009820:	4313      	orrs	r3, r2
 8009822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009826:	227b      	movs	r2, #123	; 0x7b
 8009828:	2194      	movs	r1, #148	; 0x94
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f002 f940 	bl	800bab0 <VL53L0X_WrByte>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009838:	4313      	orrs	r3, r2
 800983a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff fe37 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800984c:	4313      	orrs	r3, r2
 800984e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009852:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009856:	461a      	mov	r2, r3
 8009858:	2190      	movs	r1, #144	; 0x90
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f002 f9aa 	bl	800bbb4 <VL53L0X_RdByte>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009868:	4313      	orrs	r3, r2
 800986a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800986e:	2277      	movs	r2, #119	; 0x77
 8009870:	2194      	movs	r1, #148	; 0x94
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f002 f91c 	bl	800bab0 <VL53L0X_WrByte>
 8009878:	4603      	mov	r3, r0
 800987a:	461a      	mov	r2, r3
 800987c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009880:	4313      	orrs	r3, r2
 8009882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff fe13 	bl	80094b2 <VL53L0X_device_read_strobe>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009894:	4313      	orrs	r3, r2
 8009896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800989a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800989e:	461a      	mov	r2, r3
 80098a0:	2190      	movs	r1, #144	; 0x90
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f002 f9e8 	bl	800bc78 <VL53L0X_RdDWord>
 80098a8:	4603      	mov	r3, r0
 80098aa:	461a      	mov	r2, r3
 80098ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098b0:	4313      	orrs	r3, r2
 80098b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	0e5b      	lsrs	r3, r3, #25
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	0c9b      	lsrs	r3, r3, #18
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	0adb      	lsrs	r3, r3, #11
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	091b      	lsrs	r3, r3, #4
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009900:	2278      	movs	r2, #120	; 0x78
 8009902:	2194      	movs	r1, #148	; 0x94
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f002 f8d3 	bl	800bab0 <VL53L0X_WrByte>
 800990a:	4603      	mov	r3, r0
 800990c:	461a      	mov	r2, r3
 800990e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009912:	4313      	orrs	r3, r2
 8009914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7ff fdca 	bl	80094b2 <VL53L0X_device_read_strobe>
 800991e:	4603      	mov	r3, r0
 8009920:	461a      	mov	r2, r3
 8009922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009926:	4313      	orrs	r3, r2
 8009928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800992c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009930:	461a      	mov	r2, r3
 8009932:	2190      	movs	r1, #144	; 0x90
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f002 f99f 	bl	800bc78 <VL53L0X_RdDWord>
 800993a:	4603      	mov	r3, r0
 800993c:	461a      	mov	r2, r3
 800993e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009942:	4313      	orrs	r3, r2
 8009944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	0f5b      	lsrs	r3, r3, #29
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009952:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009958:	4413      	add	r3, r2
 800995a:	b2db      	uxtb	r3, r3
 800995c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	0d9b      	lsrs	r3, r3, #22
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009968:	b2db      	uxtb	r3, r3
 800996a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	0bdb      	lsrs	r3, r3, #15
 8009970:	b2db      	uxtb	r3, r3
 8009972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009976:	b2db      	uxtb	r3, r3
 8009978:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	0a1b      	lsrs	r3, r3, #8
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009984:	b2db      	uxtb	r3, r3
 8009986:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	b2db      	uxtb	r3, r3
 8009994:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	b2db      	uxtb	r3, r3
 800999a:	019b      	lsls	r3, r3, #6
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80099a8:	2279      	movs	r2, #121	; 0x79
 80099aa:	2194      	movs	r1, #148	; 0x94
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 f87f 	bl	800bab0 <VL53L0X_WrByte>
 80099b2:	4603      	mov	r3, r0
 80099b4:	461a      	mov	r2, r3
 80099b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ba:	4313      	orrs	r3, r2
 80099bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff fd76 	bl	80094b2 <VL53L0X_device_read_strobe>
 80099c6:	4603      	mov	r3, r0
 80099c8:	461a      	mov	r2, r3
 80099ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099d8:	461a      	mov	r2, r3
 80099da:	2190      	movs	r1, #144	; 0x90
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f002 f94b 	bl	800bc78 <VL53L0X_RdDWord>
 80099e2:	4603      	mov	r3, r0
 80099e4:	461a      	mov	r2, r3
 80099e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	0e9b      	lsrs	r3, r3, #26
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fa:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80099fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a00:	4413      	add	r3, r2
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	0cdb      	lsrs	r3, r3, #19
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	0b1b      	lsrs	r3, r3, #12
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	095b      	lsrs	r3, r3, #5
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009a42:	227a      	movs	r2, #122	; 0x7a
 8009a44:	2194      	movs	r1, #148	; 0x94
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f002 f832 	bl	800bab0 <VL53L0X_WrByte>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7ff fd29 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a72:	461a      	mov	r2, r3
 8009a74:	2190      	movs	r1, #144	; 0x90
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f002 f8fe 	bl	800bc78 <VL53L0X_RdDWord>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	0f9b      	lsrs	r3, r3, #30
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a94:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009a96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a9a:	4413      	add	r3, r2
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	0ddb      	lsrs	r3, r3, #23
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	0a5b      	lsrs	r3, r3, #9
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	089b      	lsrs	r3, r3, #2
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 80f1 	beq.w	8009cd0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009aee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009af2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 80ea 	bne.w	8009cd0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009afc:	227b      	movs	r2, #123	; 0x7b
 8009afe:	2194      	movs	r1, #148	; 0x94
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 ffd5 	bl	800bab0 <VL53L0X_WrByte>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff fccc 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b22:	4313      	orrs	r3, r2
 8009b24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2190      	movs	r1, #144	; 0x90
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f002 f8a1 	bl	800bc78 <VL53L0X_RdDWord>
 8009b36:	4603      	mov	r3, r0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009b44:	227c      	movs	r2, #124	; 0x7c
 8009b46:	2194      	movs	r1, #148	; 0x94
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 ffb1 	bl	800bab0 <VL53L0X_WrByte>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	461a      	mov	r2, r3
 8009b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b56:	4313      	orrs	r3, r2
 8009b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff fca8 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009b62:	4603      	mov	r3, r0
 8009b64:	461a      	mov	r2, r3
 8009b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b74:	461a      	mov	r2, r3
 8009b76:	2190      	movs	r1, #144	; 0x90
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f002 f87d 	bl	800bc78 <VL53L0X_RdDWord>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b86:	4313      	orrs	r3, r2
 8009b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009b8c:	2273      	movs	r2, #115	; 0x73
 8009b8e:	2194      	movs	r1, #148	; 0x94
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 ff8d 	bl	800bab0 <VL53L0X_WrByte>
 8009b96:	4603      	mov	r3, r0
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff fc84 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009baa:	4603      	mov	r3, r0
 8009bac:	461a      	mov	r2, r3
 8009bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	2190      	movs	r1, #144	; 0x90
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f002 f859 	bl	800bc78 <VL53L0X_RdDWord>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009bdc:	2274      	movs	r2, #116	; 0x74
 8009bde:	2194      	movs	r1, #148	; 0x94
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 ff65 	bl	800bab0 <VL53L0X_WrByte>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fc5c 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	2190      	movs	r1, #144	; 0x90
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f002 f831 	bl	800bc78 <VL53L0X_RdDWord>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009c28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009c2e:	2275      	movs	r2, #117	; 0x75
 8009c30:	2194      	movs	r1, #148	; 0x94
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 ff3c 	bl	800bab0 <VL53L0X_WrByte>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fc33 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2190      	movs	r1, #144	; 0x90
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f002 f808 	bl	800bc78 <VL53L0X_RdDWord>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009c7e:	2276      	movs	r2, #118	; 0x76
 8009c80:	2194      	movs	r1, #148	; 0x94
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 ff14 	bl	800bab0 <VL53L0X_WrByte>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fc0b 	bl	80094b2 <VL53L0X_device_read_strobe>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2190      	movs	r1, #144	; 0x90
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 ffe0 	bl	800bc78 <VL53L0X_RdDWord>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009cca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2181      	movs	r1, #129	; 0x81
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 feeb 	bl	800bab0 <VL53L0X_WrByte>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009ce8:	2206      	movs	r2, #6
 8009cea:	21ff      	movs	r1, #255	; 0xff
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 fedf 	bl	800bab0 <VL53L0X_WrByte>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009d00:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009d04:	461a      	mov	r2, r3
 8009d06:	2183      	movs	r1, #131	; 0x83
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 ff53 	bl	800bbb4 <VL53L0X_RdByte>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	461a      	mov	r2, r3
 8009d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d16:	4313      	orrs	r3, r2
 8009d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d20:	f023 0304 	bic.w	r3, r3, #4
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	2183      	movs	r1, #131	; 0x83
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 fec0 	bl	800bab0 <VL53L0X_WrByte>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d3e:	2201      	movs	r2, #1
 8009d40:	21ff      	movs	r1, #255	; 0xff
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 feb4 	bl	800bab0 <VL53L0X_WrByte>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009d56:	2201      	movs	r2, #1
 8009d58:	2100      	movs	r1, #0
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fea8 	bl	800bab0 <VL53L0X_WrByte>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d6e:	2200      	movs	r2, #0
 8009d70:	21ff      	movs	r1, #255	; 0xff
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 fe9c 	bl	800bab0 <VL53L0X_WrByte>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009d86:	2200      	movs	r2, #0
 8009d88:	2180      	movs	r1, #128	; 0x80
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 fe90 	bl	800bab0 <VL53L0X_WrByte>
 8009d90:	4603      	mov	r3, r0
 8009d92:	461a      	mov	r2, r3
 8009d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009d9e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 808f 	bne.w	8009ec6 <VL53L0X_get_info_from_device+0x98e>
 8009da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dac:	2b07      	cmp	r3, #7
 8009dae:	f000 808a 	beq.w	8009ec6 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d024      	beq.n	8009e06 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dc0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11e      	bne.n	8009e06 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009dce:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009dd8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009ddc:	2300      	movs	r3, #0
 8009dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009de0:	e00e      	b.n	8009e00 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009de2:	f107 0208 	add.w	r2, r7, #8
 8009de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de8:	4413      	add	r3, r2
 8009dea:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009df6:	460a      	mov	r2, r1
 8009df8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e02:	2b05      	cmp	r3, #5
 8009e04:	dded      	ble.n	8009de2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d018      	beq.n	8009e42 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009e10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e14:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d112      	bne.n	8009e42 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	33f3      	adds	r3, #243	; 0xf3
 8009e34:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009e36:	f107 0310 	add.w	r3, r7, #16
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e3e:	f005 fd0f 	bl	800f860 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d030      	beq.n	8009eae <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009e4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e50:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d12a      	bne.n	8009eae <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e6a:	025b      	lsls	r3, r3, #9
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e72:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d011      	beq.n	8009ea6 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009e82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e90:	fb02 f303 	mul.w	r3, r2, r3
 8009e94:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009e96:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009e9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009e9e:	425b      	negs	r3, r3
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009ea6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009eae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009ebc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ec6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3760      	adds	r7, #96	; 0x60
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b087      	sub	sp, #28
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009ede:	f240 6277 	movw	r2, #1655	; 0x677
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009eea:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009eee:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	fb02 f303 	mul.w	r3, r2, r3
 8009efe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009f00:	68bb      	ldr	r3, [r7, #8]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b087      	sub	sp, #28
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d017      	beq.n	8009f58 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009f2e:	e005      	b.n	8009f3c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	085b      	lsrs	r3, r3, #1
 8009f34:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009f36:	89fb      	ldrh	r3, [r7, #14]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1f4      	bne.n	8009f30 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009f46:	89fb      	ldrh	r3, [r7, #14]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009f54:	4413      	add	r3, r2
 8009f56:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009f58:	8afb      	ldrh	r3, [r7, #22]

}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009f74:	88fb      	ldrh	r3, [r7, #6]
 8009f76:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009f78:	88fa      	ldrh	r2, [r7, #6]
 8009f7a:	0a12      	lsrs	r2, r2, #8
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009f80:	3301      	adds	r3, #1
 8009f82:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009f84:	68fb      	ldr	r3, [r7, #12]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff ff91 	bl	8009ed2 <VL53L0X_calc_macro_period_ps>
 8009fb0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009fb8:	4a0a      	ldr	r2, [pc, #40]	; (8009fe4 <VL53L0X_calc_timeout_mclks+0x50>)
 8009fba:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbe:	099b      	lsrs	r3, r3, #6
 8009fc0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fc8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	441a      	add	r2, r3
	timeout_period_mclks =
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009fda:	69fb      	ldr	r3, [r7, #28]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3720      	adds	r7, #32
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	10624dd3 	.word	0x10624dd3

08009fe8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	807b      	strh	r3, [r7, #2]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009ffc:	787b      	ldrb	r3, [r7, #1]
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff66 	bl	8009ed2 <VL53L0X_calc_macro_period_ps>
 800a006:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a00e:	4a0a      	ldr	r2, [pc, #40]	; (800a038 <VL53L0X_calc_timeout_us+0x50>)
 800a010:	fba2 2303 	umull	r2, r3, r2, r3
 800a014:	099b      	lsrs	r3, r3, #6
 800a016:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a018:	887b      	ldrh	r3, [r7, #2]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	fb02 f303 	mul.w	r3, r2, r3
 800a020:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a024:	4a04      	ldr	r2, [pc, #16]	; (800a038 <VL53L0X_calc_timeout_us+0x50>)
 800a026:	fba2 2303 	umull	r2, r3, r2, r3
 800a02a:	099b      	lsrs	r3, r3, #6
 800a02c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a02e:	697b      	ldr	r3, [r7, #20]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	10624dd3 	.word	0x10624dd3

0800a03c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08c      	sub	sp, #48	; 0x30
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	460b      	mov	r3, r1
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a062:	7afb      	ldrb	r3, [r7, #11]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <get_sequence_step_timeout+0x38>
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d002      	beq.n	800a074 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d128      	bne.n	800a0c6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a074:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a078:	461a      	mov	r2, r3
 800a07a:	2100      	movs	r1, #0
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7fd fa25 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a082:	4603      	mov	r3, r0
 800a084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a088:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d109      	bne.n	800a0a4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a090:	f107 0320 	add.w	r3, r7, #32
 800a094:	461a      	mov	r2, r3
 800a096:	2146      	movs	r1, #70	; 0x46
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f001 fd8b 	bl	800bbb4 <VL53L0X_RdByte>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a0a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff ff5b 	bl	8009f66 <VL53L0X_decode_timeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a0b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a0b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7ff ff93 	bl	8009fe8 <VL53L0X_calc_timeout_us>
 800a0c2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a0c4:	e092      	b.n	800a1ec <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d135      	bne.n	800a138 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a0cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7fd f9f9 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a0e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f040 8081 	bne.w	800a1ec <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a0ea:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7fd f9ea 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a0fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a106:	f107 031e 	add.w	r3, r7, #30
 800a10a:	461a      	mov	r2, r3
 800a10c:	2151      	movs	r1, #81	; 0x51
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f001 fd7a 	bl	800bc08 <VL53L0X_RdWord>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a11a:	8bfb      	ldrh	r3, [r7, #30]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff ff22 	bl	8009f66 <VL53L0X_decode_timeout>
 800a122:	4603      	mov	r3, r0
 800a124:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a126:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a12a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a12c:	4619      	mov	r1, r3
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff ff5a 	bl	8009fe8 <VL53L0X_calc_timeout_us>
 800a134:	62b8      	str	r0, [r7, #40]	; 0x28
 800a136:	e059      	b.n	800a1ec <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d156      	bne.n	800a1ec <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a13e:	f107 0314 	add.w	r3, r7, #20
 800a142:	4619      	mov	r1, r3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7fd facd 	bl	80076e4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01d      	beq.n	800a190 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a154:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a158:	461a      	mov	r2, r3
 800a15a:	2100      	movs	r1, #0
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7fd f9b5 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a162:	4603      	mov	r3, r0
 800a164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a168:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10f      	bne.n	800a190 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a170:	f107 031e 	add.w	r3, r7, #30
 800a174:	461a      	mov	r2, r3
 800a176:	2151      	movs	r1, #81	; 0x51
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f001 fd45 	bl	800bc08 <VL53L0X_RdWord>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a184:	8bfb      	ldrh	r3, [r7, #30]
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff feed 	bl	8009f66 <VL53L0X_decode_timeout>
 800a18c:	4603      	mov	r3, r0
 800a18e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a190:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a198:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a19c:	461a      	mov	r2, r3
 800a19e:	2101      	movs	r1, #1
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7fd f993 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a1ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10f      	bne.n	800a1d4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a1b4:	f107 031c 	add.w	r3, r7, #28
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	2171      	movs	r1, #113	; 0x71
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f001 fd23 	bl	800bc08 <VL53L0X_RdWord>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a1c8:	8bbb      	ldrh	r3, [r7, #28]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff fecb 	bl	8009f66 <VL53L0X_decode_timeout>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a1d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a1dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff feff 	bl	8009fe8 <VL53L0X_calc_timeout_us>
 800a1ea:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f0:	601a      	str	r2, [r3, #0]

	return Status;
 800a1f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3730      	adds	r7, #48	; 0x30
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b08a      	sub	sp, #40	; 0x28
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	460b      	mov	r3, r1
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <set_sequence_step_timeout+0x26>
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d002      	beq.n	800a224 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d138      	bne.n	800a296 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a224:	f107 031b 	add.w	r3, r7, #27
 800a228:	461a      	mov	r2, r3
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7fd f94d 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d11a      	bne.n	800a276 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a240:	7efb      	ldrb	r3, [r7, #27]
 800a242:	461a      	mov	r2, r3
 800a244:	6879      	ldr	r1, [r7, #4]
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff fea4 	bl	8009f94 <VL53L0X_calc_timeout_mclks>
 800a24c:	4603      	mov	r3, r0
 800a24e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a250:	8bbb      	ldrh	r3, [r7, #28]
 800a252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a256:	d903      	bls.n	800a260 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a258:	23ff      	movs	r3, #255	; 0xff
 800a25a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a25e:	e004      	b.n	800a26a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a260:	8bbb      	ldrh	r3, [r7, #28]
 800a262:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a264:	3b01      	subs	r3, #1
 800a266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a26a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f040 80ab 	bne.w	800a3d6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a284:	461a      	mov	r2, r3
 800a286:	2146      	movs	r1, #70	; 0x46
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f001 fc11 	bl	800bab0 <VL53L0X_WrByte>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a294:	e09f      	b.n	800a3d6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a296:	7afb      	ldrb	r3, [r7, #11]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d135      	bne.n	800a308 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d11b      	bne.n	800a2dc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a2a4:	f107 031b 	add.w	r3, r7, #27
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7fd f90d 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a2b8:	7efb      	ldrb	r3, [r7, #27]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff fe68 	bl	8009f94 <VL53L0X_calc_timeout_mclks>
 800a2c4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a2c6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff fe1f 	bl	8009f0e <VL53L0X_encode_timeout>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a2d4:	8b3a      	ldrh	r2, [r7, #24]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a2dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d108      	bne.n	800a2f6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a2e4:	8b3b      	ldrh	r3, [r7, #24]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	2151      	movs	r1, #81	; 0x51
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f001 fc04 	bl	800baf8 <VL53L0X_WrWord>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a2f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d16b      	bne.n	800a3d6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a306:	e066      	b.n	800a3d6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	d160      	bne.n	800a3d0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a30e:	f107 0310 	add.w	r3, r7, #16
 800a312:	4619      	mov	r1, r3
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f7fd f9e5 	bl	80076e4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a31e:	7cfb      	ldrb	r3, [r7, #19]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d01d      	beq.n	800a360 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a324:	f107 031b 	add.w	r3, r7, #27
 800a328:	461a      	mov	r2, r3
 800a32a:	2100      	movs	r1, #0
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f7fd f8cd 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a332:	4603      	mov	r3, r0
 800a334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10f      	bne.n	800a360 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a340:	f107 0318 	add.w	r3, r7, #24
 800a344:	461a      	mov	r2, r3
 800a346:	2151      	movs	r1, #81	; 0x51
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f001 fc5d 	bl	800bc08 <VL53L0X_RdWord>
 800a34e:	4603      	mov	r3, r0
 800a350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a354:	8b3b      	ldrh	r3, [r7, #24]
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fe05 	bl	8009f66 <VL53L0X_decode_timeout>
 800a35c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a35e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a360:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a364:	2b00      	cmp	r3, #0
 800a366:	d109      	bne.n	800a37c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a368:	f107 031b 	add.w	r3, r7, #27
 800a36c:	461a      	mov	r2, r3
 800a36e:	2101      	movs	r1, #1
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f7fd f8ab 	bl	80074cc <VL53L0X_GetVcselPulsePeriod>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a37c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a380:	2b00      	cmp	r3, #0
 800a382:	d128      	bne.n	800a3d6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a384:	7efb      	ldrb	r3, [r7, #27]
 800a386:	461a      	mov	r2, r3
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff fe02 	bl	8009f94 <VL53L0X_calc_timeout_mclks>
 800a390:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a394:	6a3a      	ldr	r2, [r7, #32]
 800a396:	4413      	add	r3, r2
 800a398:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a39a:	6a38      	ldr	r0, [r7, #32]
 800a39c:	f7ff fdb7 	bl	8009f0e <VL53L0X_encode_timeout>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a3a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d108      	bne.n	800a3be <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a3ac:	8bfb      	ldrh	r3, [r7, #30]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2171      	movs	r1, #113	; 0x71
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f001 fba0 	bl	800baf8 <VL53L0X_WrWord>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a3be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d107      	bne.n	800a3d6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a3ce:	e002      	b.n	800a3d6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3d0:	23fc      	movs	r3, #252	; 0xfc
 800a3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a3d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3728      	adds	r7, #40	; 0x28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b08a      	sub	sp, #40	; 0x28
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a3f8:	230c      	movs	r3, #12
 800a3fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a3fe:	2312      	movs	r3, #18
 800a400:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a404:	2308      	movs	r3, #8
 800a406:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a40a:	230e      	movs	r3, #14
 800a40c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a414:	78bb      	ldrb	r3, [r7, #2]
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a420:	23fc      	movs	r3, #252	; 0xfc
 800a422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a426:	e020      	b.n	800a46a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10d      	bne.n	800a44a <VL53L0X_set_vcsel_pulse_period+0x68>
 800a42e:	78ba      	ldrb	r2, [r7, #2]
 800a430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a434:	429a      	cmp	r2, r3
 800a436:	d304      	bcc.n	800a442 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a438:	78ba      	ldrb	r2, [r7, #2]
 800a43a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a43e:	429a      	cmp	r2, r3
 800a440:	d903      	bls.n	800a44a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a442:	23fc      	movs	r3, #252	; 0xfc
 800a444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a448:	e00f      	b.n	800a46a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d10c      	bne.n	800a46a <VL53L0X_set_vcsel_pulse_period+0x88>
 800a450:	78ba      	ldrb	r2, [r7, #2]
 800a452:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a456:	429a      	cmp	r2, r3
 800a458:	d304      	bcc.n	800a464 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a45a:	78ba      	ldrb	r2, [r7, #2]
 800a45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a460:	429a      	cmp	r2, r3
 800a462:	d902      	bls.n	800a46a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a464:	23fc      	movs	r3, #252	; 0xfc
 800a466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a46a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a472:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a476:	e239      	b.n	800a8ec <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d150      	bne.n	800a520 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a47e:	78bb      	ldrb	r3, [r7, #2]
 800a480:	2b0c      	cmp	r3, #12
 800a482:	d110      	bne.n	800a4a6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a484:	2218      	movs	r2, #24
 800a486:	2157      	movs	r1, #87	; 0x57
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fb11 	bl	800bab0 <VL53L0X_WrByte>
 800a48e:	4603      	mov	r3, r0
 800a490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a494:	2208      	movs	r2, #8
 800a496:	2156      	movs	r1, #86	; 0x56
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 fb09 	bl	800bab0 <VL53L0X_WrByte>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4a4:	e17f      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a4a6:	78bb      	ldrb	r3, [r7, #2]
 800a4a8:	2b0e      	cmp	r3, #14
 800a4aa:	d110      	bne.n	800a4ce <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a4ac:	2230      	movs	r2, #48	; 0x30
 800a4ae:	2157      	movs	r1, #87	; 0x57
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 fafd 	bl	800bab0 <VL53L0X_WrByte>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a4bc:	2208      	movs	r2, #8
 800a4be:	2156      	movs	r1, #86	; 0x56
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 faf5 	bl	800bab0 <VL53L0X_WrByte>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4cc:	e16b      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a4ce:	78bb      	ldrb	r3, [r7, #2]
 800a4d0:	2b10      	cmp	r3, #16
 800a4d2:	d110      	bne.n	800a4f6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a4d4:	2240      	movs	r2, #64	; 0x40
 800a4d6:	2157      	movs	r1, #87	; 0x57
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 fae9 	bl	800bab0 <VL53L0X_WrByte>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	2156      	movs	r1, #86	; 0x56
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 fae1 	bl	800bab0 <VL53L0X_WrByte>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4f4:	e157      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a4f6:	78bb      	ldrb	r3, [r7, #2]
 800a4f8:	2b12      	cmp	r3, #18
 800a4fa:	f040 8154 	bne.w	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a4fe:	2250      	movs	r2, #80	; 0x50
 800a500:	2157      	movs	r1, #87	; 0x57
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 fad4 	bl	800bab0 <VL53L0X_WrByte>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a50e:	2208      	movs	r2, #8
 800a510:	2156      	movs	r1, #86	; 0x56
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f001 facc 	bl	800bab0 <VL53L0X_WrByte>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a51e:	e142      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a520:	78fb      	ldrb	r3, [r7, #3]
 800a522:	2b01      	cmp	r3, #1
 800a524:	f040 813f 	bne.w	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a528:	78bb      	ldrb	r3, [r7, #2]
 800a52a:	2b08      	cmp	r3, #8
 800a52c:	d14c      	bne.n	800a5c8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a52e:	2210      	movs	r2, #16
 800a530:	2148      	movs	r1, #72	; 0x48
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fabc 	bl	800bab0 <VL53L0X_WrByte>
 800a538:	4603      	mov	r3, r0
 800a53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a53e:	2208      	movs	r2, #8
 800a540:	2147      	movs	r1, #71	; 0x47
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fab4 	bl	800bab0 <VL53L0X_WrByte>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a54e:	2202      	movs	r2, #2
 800a550:	2132      	movs	r1, #50	; 0x32
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f001 faac 	bl	800bab0 <VL53L0X_WrByte>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a560:	4313      	orrs	r3, r2
 800a562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a566:	220c      	movs	r2, #12
 800a568:	2130      	movs	r1, #48	; 0x30
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 faa0 	bl	800bab0 <VL53L0X_WrByte>
 800a570:	4603      	mov	r3, r0
 800a572:	461a      	mov	r2, r3
 800a574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a578:	4313      	orrs	r3, r2
 800a57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a57e:	2201      	movs	r2, #1
 800a580:	21ff      	movs	r1, #255	; 0xff
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fa94 	bl	800bab0 <VL53L0X_WrByte>
 800a588:	4603      	mov	r3, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a590:	4313      	orrs	r3, r2
 800a592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a596:	2230      	movs	r2, #48	; 0x30
 800a598:	2130      	movs	r1, #48	; 0x30
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 fa88 	bl	800bab0 <VL53L0X_WrByte>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	21ff      	movs	r1, #255	; 0xff
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fa7c 	bl	800bab0 <VL53L0X_WrByte>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5c6:	e0ee      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a5c8:	78bb      	ldrb	r3, [r7, #2]
 800a5ca:	2b0a      	cmp	r3, #10
 800a5cc:	d14c      	bne.n	800a668 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a5ce:	2228      	movs	r2, #40	; 0x28
 800a5d0:	2148      	movs	r1, #72	; 0x48
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fa6c 	bl	800bab0 <VL53L0X_WrByte>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a5de:	2208      	movs	r2, #8
 800a5e0:	2147      	movs	r1, #71	; 0x47
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 fa64 	bl	800bab0 <VL53L0X_WrByte>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	2132      	movs	r1, #50	; 0x32
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 fa5c 	bl	800bab0 <VL53L0X_WrByte>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a600:	4313      	orrs	r3, r2
 800a602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a606:	2209      	movs	r2, #9
 800a608:	2130      	movs	r1, #48	; 0x30
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fa50 	bl	800bab0 <VL53L0X_WrByte>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a618:	4313      	orrs	r3, r2
 800a61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a61e:	2201      	movs	r2, #1
 800a620:	21ff      	movs	r1, #255	; 0xff
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fa44 	bl	800bab0 <VL53L0X_WrByte>
 800a628:	4603      	mov	r3, r0
 800a62a:	461a      	mov	r2, r3
 800a62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a630:	4313      	orrs	r3, r2
 800a632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a636:	2220      	movs	r2, #32
 800a638:	2130      	movs	r1, #48	; 0x30
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 fa38 	bl	800bab0 <VL53L0X_WrByte>
 800a640:	4603      	mov	r3, r0
 800a642:	461a      	mov	r2, r3
 800a644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a648:	4313      	orrs	r3, r2
 800a64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a64e:	2200      	movs	r2, #0
 800a650:	21ff      	movs	r1, #255	; 0xff
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f001 fa2c 	bl	800bab0 <VL53L0X_WrByte>
 800a658:	4603      	mov	r3, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a660:	4313      	orrs	r3, r2
 800a662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a666:	e09e      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a668:	78bb      	ldrb	r3, [r7, #2]
 800a66a:	2b0c      	cmp	r3, #12
 800a66c:	d14c      	bne.n	800a708 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a66e:	2238      	movs	r2, #56	; 0x38
 800a670:	2148      	movs	r1, #72	; 0x48
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fa1c 	bl	800bab0 <VL53L0X_WrByte>
 800a678:	4603      	mov	r3, r0
 800a67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a67e:	2208      	movs	r2, #8
 800a680:	2147      	movs	r1, #71	; 0x47
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fa14 	bl	800bab0 <VL53L0X_WrByte>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a68e:	2203      	movs	r2, #3
 800a690:	2132      	movs	r1, #50	; 0x32
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 fa0c 	bl	800bab0 <VL53L0X_WrByte>
 800a698:	4603      	mov	r3, r0
 800a69a:	461a      	mov	r2, r3
 800a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a6a6:	2208      	movs	r2, #8
 800a6a8:	2130      	movs	r1, #48	; 0x30
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f001 fa00 	bl	800bab0 <VL53L0X_WrByte>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a6be:	2201      	movs	r2, #1
 800a6c0:	21ff      	movs	r1, #255	; 0xff
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 f9f4 	bl	800bab0 <VL53L0X_WrByte>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	2130      	movs	r1, #48	; 0x30
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f001 f9e8 	bl	800bab0 <VL53L0X_WrByte>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	21ff      	movs	r1, #255	; 0xff
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f9dc 	bl	800bab0 <VL53L0X_WrByte>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a700:	4313      	orrs	r3, r2
 800a702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a706:	e04e      	b.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a708:	78bb      	ldrb	r3, [r7, #2]
 800a70a:	2b0e      	cmp	r3, #14
 800a70c:	d14b      	bne.n	800a7a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a70e:	2248      	movs	r2, #72	; 0x48
 800a710:	2148      	movs	r1, #72	; 0x48
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 f9cc 	bl	800bab0 <VL53L0X_WrByte>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a71e:	2208      	movs	r2, #8
 800a720:	2147      	movs	r1, #71	; 0x47
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f001 f9c4 	bl	800bab0 <VL53L0X_WrByte>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a72e:	2203      	movs	r2, #3
 800a730:	2132      	movs	r1, #50	; 0x32
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 f9bc 	bl	800bab0 <VL53L0X_WrByte>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a740:	4313      	orrs	r3, r2
 800a742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a746:	2207      	movs	r2, #7
 800a748:	2130      	movs	r1, #48	; 0x30
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 f9b0 	bl	800bab0 <VL53L0X_WrByte>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a758:	4313      	orrs	r3, r2
 800a75a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a75e:	2201      	movs	r2, #1
 800a760:	21ff      	movs	r1, #255	; 0xff
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f9a4 	bl	800bab0 <VL53L0X_WrByte>
 800a768:	4603      	mov	r3, r0
 800a76a:	461a      	mov	r2, r3
 800a76c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a770:	4313      	orrs	r3, r2
 800a772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a776:	2220      	movs	r2, #32
 800a778:	2130      	movs	r1, #48	; 0x30
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 f998 	bl	800bab0 <VL53L0X_WrByte>
 800a780:	4603      	mov	r3, r0
 800a782:	461a      	mov	r2, r3
 800a784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a788:	4313      	orrs	r3, r2
 800a78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a78e:	2200      	movs	r2, #0
 800a790:	21ff      	movs	r1, #255	; 0xff
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f001 f98c 	bl	800bab0 <VL53L0X_WrByte>
 800a798:	4603      	mov	r3, r0
 800a79a:	461a      	mov	r2, r3
 800a79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a7a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d17f      	bne.n	800a8ae <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a7ae:	78bb      	ldrb	r3, [r7, #2]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fe37 	bl	8009424 <VL53L0X_encode_vcsel_period>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d045      	beq.n	800a852 <VL53L0X_set_vcsel_pulse_period+0x470>
 800a7c6:	e06e      	b.n	800a8a6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a7c8:	f107 0314 	add.w	r3, r7, #20
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2103      	movs	r1, #3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7ff fc33 	bl	800a03c <get_sequence_step_timeout>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a7dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d109      	bne.n	800a7f8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	2102      	movs	r1, #2
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff fc25 	bl	800a03c <get_sequence_step_timeout>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a7f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d109      	bne.n	800a814 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a800:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a804:	461a      	mov	r2, r3
 800a806:	2150      	movs	r1, #80	; 0x50
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 f951 	bl	800bab0 <VL53L0X_WrByte>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	461a      	mov	r2, r3
 800a820:	2103      	movs	r1, #3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fceb 	bl	800a1fe <set_sequence_step_timeout>
 800a828:	4603      	mov	r3, r0
 800a82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a82e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a832:	2b00      	cmp	r3, #0
 800a834:	d108      	bne.n	800a848 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	461a      	mov	r2, r3
 800a83a:	2102      	movs	r1, #2
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff fcde 	bl	800a1fe <set_sequence_step_timeout>
 800a842:	4603      	mov	r3, r0
 800a844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	78ba      	ldrb	r2, [r7, #2]
 800a84c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a850:	e02e      	b.n	800a8b0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a852:	f107 0318 	add.w	r3, r7, #24
 800a856:	461a      	mov	r2, r3
 800a858:	2104      	movs	r1, #4
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fbee 	bl	800a03c <get_sequence_step_timeout>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a866:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a86e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a872:	461a      	mov	r2, r3
 800a874:	2170      	movs	r1, #112	; 0x70
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 f91a 	bl	800bab0 <VL53L0X_WrByte>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a882:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a886:	2b00      	cmp	r3, #0
 800a888:	d108      	bne.n	800a89c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	461a      	mov	r2, r3
 800a88e:	2104      	movs	r1, #4
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fcb4 	bl	800a1fe <set_sequence_step_timeout>
 800a896:	4603      	mov	r3, r0
 800a898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	78ba      	ldrb	r2, [r7, #2]
 800a8a0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a8a4:	e004      	b.n	800a8b0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8a6:	23fc      	movs	r3, #252	; 0xfc
 800a8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8ac:	e000      	b.n	800a8b0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a8ae:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a8b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d109      	bne.n	800a8cc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a8be:	69f9      	ldr	r1, [r7, #28]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7fc fdc5 	bl	8007450 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a8cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a8d4:	f107 010f 	add.w	r1, r7, #15
 800a8d8:	2301      	movs	r3, #1
 800a8da:	2200      	movs	r2, #0
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7fe fc99 	bl	8009214 <VL53L0X_perform_phase_calibration>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a8e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3728      	adds	r7, #40	; 0x28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a902:	2300      	movs	r3, #0
 800a904:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a906:	7afb      	ldrb	r3, [r7, #11]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d00a      	beq.n	800a926 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a910:	e013      	b.n	800a93a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a912:	f107 0316 	add.w	r3, r7, #22
 800a916:	461a      	mov	r2, r3
 800a918:	2150      	movs	r1, #80	; 0x50
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 f94a 	bl	800bbb4 <VL53L0X_RdByte>
 800a920:	4603      	mov	r3, r0
 800a922:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a924:	e00b      	b.n	800a93e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a926:	f107 0316 	add.w	r3, r7, #22
 800a92a:	461a      	mov	r2, r3
 800a92c:	2170      	movs	r1, #112	; 0x70
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f001 f940 	bl	800bbb4 <VL53L0X_RdByte>
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a938:	e001      	b.n	800a93e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a93a:	23fc      	movs	r3, #252	; 0xfc
 800a93c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a93e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d107      	bne.n	800a956 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a946:	7dbb      	ldrb	r3, [r7, #22]
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fd58 	bl	80093fe <VL53L0X_decode_vcsel_period>
 800a94e:	4603      	mov	r3, r0
 800a950:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	701a      	strb	r2, [r3, #0]

	return Status;
 800a956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b092      	sub	sp, #72	; 0x48
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a96c:	2300      	movs	r3, #0
 800a96e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a976:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a978:	f240 7376 	movw	r3, #1910	; 0x776
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a97e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a982:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a984:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a988:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a98a:	f240 234e 	movw	r3, #590	; 0x24e
 800a98e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a990:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a994:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a996:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a99c:	f240 2326 	movw	r3, #550	; 0x226
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a9a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a9aa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d205      	bcs.n	800a9c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9b8:	23fc      	movs	r3, #252	; 0xfc
 800a9ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a9be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a9c2:	e0aa      	b.n	800ab1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a9c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a9d0:	f107 0314 	add.w	r3, r7, #20
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7fc fe84 	bl	80076e4 <VL53L0X_GetSequenceStepEnables>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a9e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d15b      	bne.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a9ea:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d105      	bne.n	800a9fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a9f0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a9f6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d052      	beq.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a9fc:	f107 0310 	add.w	r3, r7, #16
 800aa00:	461a      	mov	r2, r3
 800aa02:	2102      	movs	r1, #2
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff fb19 	bl	800a03c <get_sequence_step_timeout>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800aa10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800aa18:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa1c:	e07d      	b.n	800ab1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800aa1e:	7d3b      	ldrb	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00f      	beq.n	800aa44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800aa24:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800aa26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa28:	4413      	add	r3, r2
 800aa2a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d204      	bcs.n	800aa3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800aa34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa3c:	e002      	b.n	800aa44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa3e:	23fc      	movs	r3, #252	; 0xfc
 800aa40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800aa44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800aa4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa50:	e063      	b.n	800ab1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800aa52:	7dbb      	ldrb	r3, [r7, #22]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d011      	beq.n	800aa7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d204      	bcs.n	800aa74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aa6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	643b      	str	r3, [r7, #64]	; 0x40
 800aa72:	e016      	b.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa74:	23fc      	movs	r3, #252	; 0xfc
 800aa76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aa7a:	e012      	b.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800aa7c:	7d7b      	ldrb	r3, [r7, #21]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00f      	beq.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa86:	4413      	add	r3, r2
 800aa88:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d204      	bcs.n	800aa9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aa92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	643b      	str	r3, [r7, #64]	; 0x40
 800aa9a:	e002      	b.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa9c:	23fc      	movs	r3, #252	; 0xfc
 800aa9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800aaa2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800aaaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aaae:	e034      	b.n	800ab1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d019      	beq.n	800aaea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800aab6:	f107 030c 	add.w	r3, r7, #12
 800aaba:	461a      	mov	r2, r3
 800aabc:	2103      	movs	r1, #3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff fabc 	bl	800a03c <get_sequence_step_timeout>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aace:	4413      	add	r3, r2
 800aad0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aad2:	69fa      	ldr	r2, [r7, #28]
 800aad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d204      	bcs.n	800aae4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800aada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	643b      	str	r3, [r7, #64]	; 0x40
 800aae2:	e002      	b.n	800aaea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aae4:	23fc      	movs	r3, #252	; 0xfc
 800aae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800aaea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d111      	bne.n	800ab16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800aaf2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00e      	beq.n	800ab16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800aaf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ab00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab02:	2104      	movs	r1, #4
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fb7a 	bl	800a1fe <set_sequence_step_timeout>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ab16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3748      	adds	r7, #72	; 0x48
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b090      	sub	sp, #64	; 0x40
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ab32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ab36:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ab38:	f240 7376 	movw	r3, #1910	; 0x776
 800ab3c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ab3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ab42:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ab44:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ab48:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ab4a:	f240 234e 	movw	r3, #590	; 0x24e
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ab50:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ab54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ab56:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ab5a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ab5c:	f240 2326 	movw	r3, #550	; 0x226
 800ab60:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ab66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6a:	441a      	add	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ab70:	f107 0318 	add.w	r3, r7, #24
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7fc fdb4 	bl	80076e4 <VL53L0X_GetSequenceStepEnables>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ab82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ab8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab8e:	e075      	b.n	800ac7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ab90:	7e3b      	ldrb	r3, [r7, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d105      	bne.n	800aba2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ab96:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d102      	bne.n	800aba2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ab9c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d030      	beq.n	800ac04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800aba2:	f107 0310 	add.w	r3, r7, #16
 800aba6:	461a      	mov	r2, r3
 800aba8:	2102      	movs	r1, #2
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fa46 	bl	800a03c <get_sequence_step_timeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800abb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d122      	bne.n	800ac04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800abbe:	7e3b      	ldrb	r3, [r7, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800abc8:	6939      	ldr	r1, [r7, #16]
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800abce:	441a      	add	r2, r3
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800abd4:	7ebb      	ldrb	r3, [r7, #26]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d009      	beq.n	800abee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800abde:	6939      	ldr	r1, [r7, #16]
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	440b      	add	r3, r1
 800abe4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800abe6:	441a      	add	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	e00a      	b.n	800ac04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800abee:	7e7b      	ldrb	r3, [r7, #25]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800abf8:	6939      	ldr	r1, [r7, #16]
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800abfe:	441a      	add	r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d114      	bne.n	800ac36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ac0c:	7efb      	ldrb	r3, [r7, #27]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d011      	beq.n	800ac36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ac12:	f107 030c 	add.w	r3, r7, #12
 800ac16:	461a      	mov	r2, r3
 800ac18:	2103      	movs	r1, #3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fa0e 	bl	800a03c <get_sequence_step_timeout>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ac2a:	68f9      	ldr	r1, [r7, #12]
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac30:	441a      	add	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d114      	bne.n	800ac68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ac3e:	7f3b      	ldrb	r3, [r7, #28]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d011      	beq.n	800ac68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ac44:	f107 0314 	add.w	r3, r7, #20
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff f9f5 	bl	800a03c <get_sequence_step_timeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ac5c:	6979      	ldr	r1, [r7, #20]
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac62:	441a      	add	r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3740      	adds	r7, #64	; 0x40
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ac96:	e0c6      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	3301      	adds	r3, #1
 800aca6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800aca8:	7cfb      	ldrb	r3, [r7, #19]
 800acaa:	2bff      	cmp	r3, #255	; 0xff
 800acac:	f040 808d 	bne.w	800adca <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	4413      	add	r3, r2
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	747b      	strb	r3, [r7, #17]
			Index++;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	3301      	adds	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800acc0:	7c7b      	ldrb	r3, [r7, #17]
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d87e      	bhi.n	800adc4 <VL53L0X_load_tuning_settings+0x140>
 800acc6:	a201      	add	r2, pc, #4	; (adr r2, 800accc <VL53L0X_load_tuning_settings+0x48>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800acdd 	.word	0x0800acdd
 800acd0:	0800ad17 	.word	0x0800ad17
 800acd4:	0800ad51 	.word	0x0800ad51
 800acd8:	0800ad8b 	.word	0x0800ad8b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4413      	add	r3, r2
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	743b      	strb	r3, [r7, #16]
				Index++;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	3301      	adds	r3, #1
 800acea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	4413      	add	r3, r2
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	3301      	adds	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800acfc:	7c3b      	ldrb	r3, [r7, #16]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	021b      	lsls	r3, r3, #8
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	4413      	add	r3, r2
 800ad0a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	89ba      	ldrh	r2, [r7, #12]
 800ad10:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ad14:	e087      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	3301      	adds	r3, #1
 800ad24:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	3301      	adds	r3, #1
 800ad34:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ad36:	7c3b      	ldrb	r3, [r7, #16]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	89ba      	ldrh	r2, [r7, #12]
 800ad4a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ad4e:	e06a      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4413      	add	r3, r2
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ad70:	7c3b      	ldrb	r3, [r7, #16]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	4413      	add	r3, r2
 800ad7e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	89ba      	ldrh	r2, [r7, #12]
 800ad84:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ad88:	e04d      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	4413      	add	r3, r2
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	3301      	adds	r3, #1
 800ad98:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	4413      	add	r3, r2
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	3301      	adds	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800adaa:	7c3b      	ldrb	r3, [r7, #16]
 800adac:	b29b      	uxth	r3, r3
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	4413      	add	r3, r2
 800adb8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	89ba      	ldrh	r2, [r7, #12]
 800adbe:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800adc2:	e030      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800adc4:	23fc      	movs	r3, #252	; 0xfc
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	e02d      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800adca:	7cfb      	ldrb	r3, [r7, #19]
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d828      	bhi.n	800ae22 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	4413      	add	r3, r2
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	3301      	adds	r3, #1
 800adde:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ade0:	2300      	movs	r3, #0
 800ade2:	61bb      	str	r3, [r7, #24]
 800ade4:	e00f      	b.n	800ae06 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	4413      	add	r3, r2
 800adec:	7819      	ldrb	r1, [r3, #0]
 800adee:	f107 0208 	add.w	r2, r7, #8
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	4413      	add	r3, r2
 800adf6:	460a      	mov	r2, r1
 800adf8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3301      	adds	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	3301      	adds	r3, #1
 800ae04:	61bb      	str	r3, [r7, #24]
 800ae06:	7cfb      	ldrb	r3, [r7, #19]
 800ae08:	69ba      	ldr	r2, [r7, #24]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	dbeb      	blt.n	800ade6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ae0e:	7cfb      	ldrb	r3, [r7, #19]
 800ae10:	f107 0208 	add.w	r2, r7, #8
 800ae14:	7cb9      	ldrb	r1, [r7, #18]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fdee 	bl	800b9f8 <VL53L0X_WriteMulti>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	77fb      	strb	r3, [r7, #31]
 800ae20:	e001      	b.n	800ae26 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae22:	23fc      	movs	r3, #252	; 0xfc
 800ae24:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d004      	beq.n	800ae3c <VL53L0X_load_tuning_settings+0x1b8>
 800ae32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f43f af2e 	beq.w	800ac98 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3720      	adds	r7, #32
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ae5e:	f107 0313 	add.w	r3, r7, #19
 800ae62:	4619      	mov	r1, r3
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7fc fcc9 	bl	80077fc <VL53L0X_GetXTalkCompensationEnable>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ae6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d111      	bne.n	800ae9a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ae76:	7cfb      	ldrb	r3, [r7, #19]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00e      	beq.n	800ae9a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	8a9b      	ldrh	r3, [r3, #20]
 800ae86:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	fb02 f303 	mul.w	r3, r2, r3
 800ae8e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	3380      	adds	r3, #128	; 0x80
 800ae94:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ae9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b086      	sub	sp, #24
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800aebe:	f107 0310 	add.w	r3, r7, #16
 800aec2:	461a      	mov	r2, r3
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7ff ffbe 	bl	800ae48 <VL53L0X_get_total_xtalk_rate>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800aed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d105      	bne.n	800aee4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	441a      	add	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]

	return Status;
 800aee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b09a      	sub	sp, #104	; 0x68
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800aefe:	2312      	movs	r3, #18
 800af00:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800af02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800af06:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800af08:	2342      	movs	r3, #66	; 0x42
 800af0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800af0c:	2306      	movs	r3, #6
 800af0e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800af10:	2307      	movs	r3, #7
 800af12:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af14:	2300      	movs	r3, #0
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800af28:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800af2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af2e:	fb02 f303 	mul.w	r3, r2, r3
 800af32:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800af34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af36:	3380      	adds	r3, #128	; 0x80
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800af3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af40:	fb02 f303 	mul.w	r3, r2, r3
 800af44:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01a      	beq.n	800af86 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	029b      	lsls	r3, r3, #10
 800af54:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800af5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af5c:	4413      	add	r3, r2
 800af5e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800af60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	fbb2 f3f3 	udiv	r3, r2, r3
 800af68:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800af6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af6c:	4613      	mov	r3, r2
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	4413      	add	r3, r2
 800af72:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800af74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af76:	fb03 f303 	mul.w	r3, r3, r3
 800af7a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800af7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800af8a:	fb02 f303 	mul.w	r3, r2, r3
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800af90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af96:	0c1b      	lsrs	r3, r3, #16
 800af98:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800af9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9c:	fb03 f303 	mul.w	r3, r3, r3
 800afa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800afa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afa8:	0c1b      	lsrs	r3, r3, #16
 800afaa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800afac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afae:	085a      	lsrs	r2, r3, #1
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	441a      	add	r2, r3
 800afb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afba:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afc0:	fb02 f303 	mul.w	r3, r2, r3
 800afc4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afcc:	d302      	bcc.n	800afd4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800afce:	4b54      	ldr	r3, [pc, #336]	; (800b120 <VL53L0X_calc_dmax+0x230>)
 800afd0:	663b      	str	r3, [r7, #96]	; 0x60
 800afd2:	e015      	b.n	800b000 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800afd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd6:	085a      	lsrs	r2, r3, #1
 800afd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afda:	441a      	add	r2, r3
 800afdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afde:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800afe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe8:	fb02 f303 	mul.w	r3, r2, r3
 800afec:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800afee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aff0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aff4:	0c1b      	lsrs	r3, r3, #16
 800aff6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800aff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800affa:	fb03 f303 	mul.w	r3, r3, r3
 800affe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b002:	039b      	lsls	r3, r3, #14
 800b004:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b008:	4a46      	ldr	r2, [pc, #280]	; (800b124 <VL53L0X_calc_dmax+0x234>)
 800b00a:	fba2 2303 	umull	r2, r3, r2, r3
 800b00e:	099b      	lsrs	r3, r3, #6
 800b010:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	fb03 f303 	mul.w	r3, r3, r3
 800b018:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01c:	fb03 f303 	mul.w	r3, r3, r3
 800b020:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	3308      	adds	r3, #8
 800b026:	091b      	lsrs	r3, r3, #4
 800b028:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b034:	4613      	mov	r3, r2
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	4413      	add	r3, r2
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b044:	0b9b      	lsrs	r3, r3, #14
 800b046:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b04a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b04c:	4413      	add	r3, r2
 800b04e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	4413      	add	r3, r2
 800b058:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b062:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	039b      	lsls	r3, r3, #14
 800b068:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	085b      	lsrs	r3, r3, #1
 800b06e:	69ba      	ldr	r2, [r7, #24]
 800b070:	4413      	add	r3, r2
 800b072:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	fbb2 f3f3 	udiv	r3, r2, r3
 800b07c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b082:	fb02 f303 	mul.w	r3, r2, r3
 800b086:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b08e:	4a25      	ldr	r2, [pc, #148]	; (800b124 <VL53L0X_calc_dmax+0x234>)
 800b090:	fba2 2303 	umull	r2, r3, r2, r3
 800b094:	099b      	lsrs	r3, r3, #6
 800b096:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	011b      	lsls	r3, r3, #4
 800b09c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0a4:	4a1f      	ldr	r2, [pc, #124]	; (800b124 <VL53L0X_calc_dmax+0x234>)
 800b0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0aa:	099b      	lsrs	r3, r3, #6
 800b0ac:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b0:	3380      	adds	r3, #128	; 0x80
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d008      	beq.n	800b0ce <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	085a      	lsrs	r2, r3, #1
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c2:	441a      	add	r2, r3
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0cc:	e001      	b.n	800b0d2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b0d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b0d4:	f7fe f9b9 	bl	800944a <VL53L0X_isqrt>
 800b0d8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d008      	beq.n	800b0f2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	085a      	lsrs	r2, r3, #1
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e6:	441a      	add	r2, r3
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0f0:	e001      	b.n	800b0f6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b0f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b0f8:	f7fe f9a7 	bl	800944a <VL53L0X_isqrt>
 800b0fc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b0fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d902      	bls.n	800b112 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b10c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b10e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b110:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b112:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b116:	4618      	mov	r0, r3
 800b118:	3768      	adds	r7, #104	; 0x68
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	fff00000 	.word	0xfff00000
 800b124:	10624dd3 	.word	0x10624dd3

0800b128 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b0b4      	sub	sp, #208	; 0xd0
 800b12c:	af04      	add	r7, sp, #16
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b136:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b13a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b13e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b146:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b14a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b14e:	f241 235c 	movw	r3, #4700	; 0x125c
 800b152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b156:	4b9e      	ldr	r3, [pc, #632]	; (800b3d0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b15c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b160:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b162:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b170:	4b98      	ldr	r3, [pc, #608]	; (800b3d4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b172:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b178:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b17a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b17e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b180:	f240 6377 	movw	r3, #1655	; 0x677
 800b184:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b186:	2300      	movs	r3, #0
 800b188:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b19a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b19e:	0c1b      	lsrs	r3, r3, #16
 800b1a0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b1a8:	f107 0310 	add.w	r3, r7, #16
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7ff fe78 	bl	800aea6 <VL53L0X_get_total_signal_rate>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b1bc:	f107 0314 	add.w	r3, r7, #20
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff fe3f 	bl	800ae48 <VL53L0X_get_total_xtalk_rate>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1d6:	fb02 f303 	mul.w	r3, r2, r3
 800b1da:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b1dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1e2:	0c1b      	lsrs	r3, r3, #16
 800b1e4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1ec:	fb02 f303 	mul.w	r3, r2, r3
 800b1f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b1f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d902      	bls.n	800b204 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b204:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d168      	bne.n	800b2de <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b21c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b220:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7fe feb2 	bl	8009f94 <VL53L0X_calc_timeout_mclks>
 800b230:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b242:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b246:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b24a:	461a      	mov	r2, r3
 800b24c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7fe fe9f 	bl	8009f94 <VL53L0X_calc_timeout_mclks>
 800b256:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b258:	2303      	movs	r3, #3
 800b25a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b25e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b262:	2b08      	cmp	r3, #8
 800b264:	d102      	bne.n	800b26c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b266:	2302      	movs	r3, #2
 800b268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b26c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b270:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b272:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b276:	fb02 f303 	mul.w	r3, r2, r3
 800b27a:	02db      	lsls	r3, r3, #11
 800b27c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b284:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b288:	4a53      	ldr	r2, [pc, #332]	; (800b3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b28a:	fba2 2303 	umull	r2, r3, r2, r3
 800b28e:	099b      	lsrs	r3, r3, #6
 800b290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b298:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b2a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2aa:	4a4b      	ldr	r2, [pc, #300]	; (800b3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b0:	099b      	lsrs	r3, r3, #6
 800b2b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	3380      	adds	r3, #128	; 0x80
 800b2ba:	0a1b      	lsrs	r3, r3, #8
 800b2bc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2c4:	fb02 f303 	mul.w	r3, r2, r3
 800b2c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b2cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b2d0:	3380      	adds	r3, #128	; 0x80
 800b2d2:	0a1b      	lsrs	r3, r3, #8
 800b2d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b2de:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b2e6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b2ea:	e15e      	b.n	800b5aa <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b2ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10c      	bne.n	800b30c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b2f8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b300:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	e14c      	b.n	800b5a6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b30c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b310:	2b00      	cmp	r3, #0
 800b312:	d102      	bne.n	800b31a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b314:	2301      	movs	r3, #1
 800b316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b31a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b31e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b322:	041a      	lsls	r2, r3, #16
 800b324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b326:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b32e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b334:	429a      	cmp	r2, r3
 800b336:	d902      	bls.n	800b33e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b33a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b33e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b342:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b346:	fb02 f303 	mul.w	r3, r2, r3
 800b34a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b34e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b352:	4613      	mov	r3, r2
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe f875 	bl	800944a <VL53L0X_isqrt>
 800b360:	4603      	mov	r3, r0
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	891b      	ldrh	r3, [r3, #8]
 800b36a:	461a      	mov	r2, r3
 800b36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b36e:	fb02 f303 	mul.w	r3, r2, r3
 800b372:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b376:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b37c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b37e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b380:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b384:	4a14      	ldr	r2, [pc, #80]	; (800b3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b386:	fba2 2303 	umull	r2, r3, r2, r3
 800b38a:	099b      	lsrs	r3, r3, #6
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b38e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b390:	041b      	lsls	r3, r3, #16
 800b392:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b396:	4a10      	ldr	r2, [pc, #64]	; (800b3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b398:	fba2 2303 	umull	r2, r3, r2, r3
 800b39c:	099b      	lsrs	r3, r3, #6
 800b39e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a2:	021b      	lsls	r3, r3, #8
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b3a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfb8      	it	lt
 800b3b2:	425b      	neglt	r3, r3
 800b3b4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b8:	021b      	lsls	r3, r3, #8
 800b3ba:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	7e1b      	ldrb	r3, [r3, #24]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b3c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3cc:	e033      	b.n	800b436 <VL53L0X_calc_sigma_estimate+0x30e>
 800b3ce:	bf00      	nop
 800b3d0:	028f87ae 	.word	0x028f87ae
 800b3d4:	0006999a 	.word	0x0006999a
 800b3d8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b3dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ec:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b3f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3f4:	fb02 f303 	mul.w	r3, r2, r3
 800b3f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b3fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b402:	4413      	add	r3, r2
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b40a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b40e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b424:	fb03 f303 	mul.w	r3, r3, r3
 800b428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b42c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b430:	0b9b      	lsrs	r3, r3, #14
 800b432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b43a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b43c:	fb02 f303 	mul.w	r3, r2, r3
 800b440:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b448:	0c1b      	lsrs	r3, r3, #16
 800b44a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	fb03 f303 	mul.w	r3, r3, r3
 800b452:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b460:	0c1b      	lsrs	r3, r3, #16
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b466:	fb03 f303 	mul.w	r3, r3, r3
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	4413      	add	r3, r2
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b476:	f7fd ffe8 	bl	800944a <VL53L0X_isqrt>
 800b47a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	041b      	lsls	r3, r3, #16
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	3332      	adds	r3, #50	; 0x32
 800b486:	4a4b      	ldr	r2, [pc, #300]	; (800b5b4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b488:	fba2 2303 	umull	r2, r3, r2, r3
 800b48c:	095a      	lsrs	r2, r3, #5
 800b48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b490:	fbb2 f3f3 	udiv	r3, r2, r3
 800b494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b49c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b4a0:	fb02 f303 	mul.w	r3, r2, r3
 800b4a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b4a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4ac:	f241 3388 	movw	r3, #5000	; 0x1388
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4ba:	4a3f      	ldr	r2, [pc, #252]	; (800b5b8 <VL53L0X_calc_sigma_estimate+0x490>)
 800b4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c0:	0b5b      	lsrs	r3, r3, #13
 800b4c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b4c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d902      	bls.n	800b4d6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b4d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b4d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b4da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b4e4:	4a35      	ldr	r2, [pc, #212]	; (800b5bc <VL53L0X_calc_sigma_estimate+0x494>)
 800b4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ea:	099b      	lsrs	r3, r3, #6
 800b4ec:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b4f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4f6:	441a      	add	r2, r3
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd ffa3 	bl	800944a <VL53L0X_isqrt>
 800b504:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	021b      	lsls	r3, r3, #8
 800b50a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b512:	4a2a      	ldr	r2, [pc, #168]	; (800b5bc <VL53L0X_calc_sigma_estimate+0x494>)
 800b514:	fba2 2303 	umull	r2, r3, r2, r3
 800b518:	099b      	lsrs	r3, r3, #6
 800b51a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b51c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b520:	fb03 f303 	mul.w	r3, r3, r3
 800b524:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	fb03 f303 	mul.w	r3, r3, r3
 800b52c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	4413      	add	r3, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7fd ff88 	bl	800944a <VL53L0X_isqrt>
 800b53a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d009      	beq.n	800b564 <VL53L0X_calc_sigma_estimate+0x43c>
 800b550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b554:	2b00      	cmp	r3, #0
 800b556:	d005      	beq.n	800b564 <VL53L0X_calc_sigma_estimate+0x43c>
 800b558:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b55c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b560:	429a      	cmp	r2, r3
 800b562:	d903      	bls.n	800b56c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b572:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b57e:	6939      	ldr	r1, [r7, #16]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b588:	9302      	str	r3, [sp, #8]
 800b58a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7ff fca8 	bl	800aef0 <VL53L0X_calc_dmax>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	37c0      	adds	r7, #192	; 0xc0
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	51eb851f 	.word	0x51eb851f
 800b5b8:	d1b71759 	.word	0xd1b71759
 800b5bc:	10624dd3 	.word	0x10624dd3

0800b5c0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b090      	sub	sp, #64	; 0x40
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	607a      	str	r2, [r7, #4]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	72fb      	strb	r3, [r7, #11]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b5fe:	2300      	movs	r3, #0
 800b600:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b612:	7afb      	ldrb	r3, [r7, #11]
 800b614:	10db      	asrs	r3, r3, #3
 800b616:	b2db      	uxtb	r3, r3
 800b618:	f003 030f 	and.w	r3, r3, #15
 800b61c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b620:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b624:	2b00      	cmp	r3, #0
 800b626:	d017      	beq.n	800b658 <VL53L0X_get_pal_range_status+0x98>
 800b628:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b62c:	2b05      	cmp	r3, #5
 800b62e:	d013      	beq.n	800b658 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b630:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b634:	2b07      	cmp	r3, #7
 800b636:	d00f      	beq.n	800b658 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b638:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b63c:	2b0c      	cmp	r3, #12
 800b63e:	d00b      	beq.n	800b658 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b640:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b644:	2b0d      	cmp	r3, #13
 800b646:	d007      	beq.n	800b658 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b648:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b64c:	2b0e      	cmp	r3, #14
 800b64e:	d003      	beq.n	800b658 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b650:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b654:	2b0f      	cmp	r3, #15
 800b656:	d103      	bne.n	800b660 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b65e:	e002      	b.n	800b666 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b666:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d109      	bne.n	800b682 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b66e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b672:	461a      	mov	r2, r3
 800b674:	2100      	movs	r1, #0
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f7fc f9ac 	bl	80079d4 <VL53L0X_GetLimitCheckEnable>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b686:	2b00      	cmp	r3, #0
 800b688:	d02e      	beq.n	800b6e8 <VL53L0X_get_pal_range_status+0x128>
 800b68a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d12a      	bne.n	800b6e8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b692:	f107 0310 	add.w	r3, r7, #16
 800b696:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b69a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f7ff fd43 	bl	800b128 <VL53L0X_calc_sigma_estimate>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b6a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6b6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b6b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d113      	bne.n	800b6e8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b6c0:	f107 0320 	add.w	r3, r7, #32
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7fc fa09 	bl	8007ae0 <VL53L0X_GetLimitCheckValue>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d006      	beq.n	800b6e8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d902      	bls.n	800b6e8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b6e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d109      	bne.n	800b704 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b6f0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2102      	movs	r1, #2
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f7fc f96b 	bl	80079d4 <VL53L0X_GetLimitCheckEnable>
 800b6fe:	4603      	mov	r3, r0
 800b700:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b704:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d044      	beq.n	800b796 <VL53L0X_get_pal_range_status+0x1d6>
 800b70c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b710:	2b00      	cmp	r3, #0
 800b712:	d140      	bne.n	800b796 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b714:	f107 031c 	add.w	r3, r7, #28
 800b718:	461a      	mov	r2, r3
 800b71a:	2102      	movs	r1, #2
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7fc f9df 	bl	8007ae0 <VL53L0X_GetLimitCheckValue>
 800b722:	4603      	mov	r3, r0
 800b724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b728:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d107      	bne.n	800b740 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b730:	2201      	movs	r2, #1
 800b732:	21ff      	movs	r1, #255	; 0xff
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 f9bb 	bl	800bab0 <VL53L0X_WrByte>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b740:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b744:	2b00      	cmp	r3, #0
 800b746:	d109      	bne.n	800b75c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b748:	f107 0316 	add.w	r3, r7, #22
 800b74c:	461a      	mov	r2, r3
 800b74e:	21b6      	movs	r1, #182	; 0xb6
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 fa59 	bl	800bc08 <VL53L0X_RdWord>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b75c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b760:	2b00      	cmp	r3, #0
 800b762:	d107      	bne.n	800b774 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b764:	2200      	movs	r2, #0
 800b766:	21ff      	movs	r1, #255	; 0xff
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 f9a1 	bl	800bab0 <VL53L0X_WrByte>
 800b76e:	4603      	mov	r3, r0
 800b770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b774:	8afb      	ldrh	r3, [r7, #22]
 800b776:	025b      	lsls	r3, r3, #9
 800b778:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b77e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d006      	beq.n	800b796 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b788:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d902      	bls.n	800b796 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b790:	2301      	movs	r3, #1
 800b792:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b796:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d109      	bne.n	800b7b2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b79e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	2103      	movs	r1, #3
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f7fc f914 	bl	80079d4 <VL53L0X_GetLimitCheckEnable>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b7b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d023      	beq.n	800b802 <VL53L0X_get_pal_range_status+0x242>
 800b7ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d11f      	bne.n	800b802 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b7c2:	893b      	ldrh	r3, [r7, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b7cc:	e005      	b.n	800b7da <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	021a      	lsls	r2, r3, #8
 800b7d2:	893b      	ldrh	r3, [r7, #8]
 800b7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b7da:	f107 0318 	add.w	r3, r7, #24
 800b7de:	461a      	mov	r2, r3
 800b7e0:	2103      	movs	r1, #3
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f7fc f97c 	bl	8007ae0 <VL53L0X_GetLimitCheckValue>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b7f4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d202      	bcs.n	800b802 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b802:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b806:	2b00      	cmp	r3, #0
 800b808:	d14a      	bne.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b80a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d103      	bne.n	800b81a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b814:	22ff      	movs	r2, #255	; 0xff
 800b816:	701a      	strb	r2, [r3, #0]
 800b818:	e042      	b.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b81a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d007      	beq.n	800b832 <VL53L0X_get_pal_range_status+0x272>
 800b822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b826:	2b02      	cmp	r3, #2
 800b828:	d003      	beq.n	800b832 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b82a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d103      	bne.n	800b83a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b834:	2205      	movs	r2, #5
 800b836:	701a      	strb	r2, [r3, #0]
 800b838:	e032      	b.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b83a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b83e:	2b06      	cmp	r3, #6
 800b840:	d003      	beq.n	800b84a <VL53L0X_get_pal_range_status+0x28a>
 800b842:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b846:	2b09      	cmp	r3, #9
 800b848:	d103      	bne.n	800b852 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b84c:	2204      	movs	r2, #4
 800b84e:	701a      	strb	r2, [r3, #0]
 800b850:	e026      	b.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b852:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b856:	2b08      	cmp	r3, #8
 800b858:	d007      	beq.n	800b86a <VL53L0X_get_pal_range_status+0x2aa>
 800b85a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b85e:	2b0a      	cmp	r3, #10
 800b860:	d003      	beq.n	800b86a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b862:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b866:	2b01      	cmp	r3, #1
 800b868:	d103      	bne.n	800b872 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b86c:	2203      	movs	r2, #3
 800b86e:	701a      	strb	r2, [r3, #0]
 800b870:	e016      	b.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b872:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b876:	2b04      	cmp	r3, #4
 800b878:	d003      	beq.n	800b882 <VL53L0X_get_pal_range_status+0x2c2>
 800b87a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d103      	bne.n	800b88a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b884:	2202      	movs	r2, #2
 800b886:	701a      	strb	r2, [r3, #0]
 800b888:	e00a      	b.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b88a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d103      	bne.n	800b89a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b894:	2201      	movs	r2, #1
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e002      	b.n	800b8a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89c:	2200      	movs	r2, #0
 800b89e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b8ae:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7fc f88c 	bl	80079d4 <VL53L0X_GetLimitCheckEnable>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b8c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d14f      	bne.n	800b96a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b8ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <VL53L0X_get_pal_range_status+0x31a>
 800b8d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d103      	bne.n	800b8e2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8e0:	e002      	b.n	800b8e8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b8ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b8f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d003      	beq.n	800b902 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b8fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d103      	bne.n	800b90a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b902:	2301      	movs	r3, #1
 800b904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b908:	e002      	b.n	800b910 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b91a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <VL53L0X_get_pal_range_status+0x36a>
 800b922:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b926:	2b01      	cmp	r3, #1
 800b928:	d103      	bne.n	800b932 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b92a:	2301      	movs	r3, #1
 800b92c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b930:	e002      	b.n	800b938 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b93e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <VL53L0X_get_pal_range_status+0x392>
 800b94a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d103      	bne.n	800b95a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b952:	2301      	movs	r3, #1
 800b954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b958:	e002      	b.n	800b960 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b966:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b96a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b96e:	4618      	mov	r0, r3
 800b970:	3740      	adds	r7, #64	; 0x40
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b976:	b580      	push	{r7, lr}
 800b978:	b088      	sub	sp, #32
 800b97a:	af02      	add	r7, sp, #8
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	330a      	adds	r3, #10
 800b986:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b994:	b299      	uxth	r1, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	b29a      	uxth	r2, r3
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	f7f7 fcc5 	bl	8003330 <HAL_I2C_Master_Transmit>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b9aa:	693b      	ldr	r3, [r7, #16]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af02      	add	r7, sp, #8
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	330a      	adds	r3, #10
 800b9c4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b9d2:	f043 0301 	orr.w	r3, r3, #1
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	b299      	uxth	r1, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	f7f7 fd97 	bl	8003518 <HAL_I2C_Master_Receive>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b9ee:	693b      	ldr	r3, [r7, #16]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	607a      	str	r2, [r7, #4]
 800ba02:	603b      	str	r3, [r7, #0]
 800ba04:	460b      	mov	r3, r1
 800ba06:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b3f      	cmp	r3, #63	; 0x3f
 800ba10:	d902      	bls.n	800ba18 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ba12:	f06f 0303 	mvn.w	r3, #3
 800ba16:	e016      	b.n	800ba46 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ba18:	4a0d      	ldr	r2, [pc, #52]	; (800ba50 <VL53L0X_WriteMulti+0x58>)
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	480c      	ldr	r0, [pc, #48]	; (800ba54 <VL53L0X_WriteMulti+0x5c>)
 800ba24:	f003 f98c 	bl	800ed40 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4908      	ldr	r1, [pc, #32]	; (800ba50 <VL53L0X_WriteMulti+0x58>)
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f7ff ffa0 	bl	800b976 <_I2CWrite>
 800ba36:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba3e:	23ec      	movs	r3, #236	; 0xec
 800ba40:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ba42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	2000b5c8 	.word	0x2000b5c8
 800ba54:	2000b5c9 	.word	0x2000b5c9

0800ba58 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	607a      	str	r2, [r7, #4]
 800ba62:	603b      	str	r3, [r7, #0]
 800ba64:	460b      	mov	r3, r1
 800ba66:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ba6c:	f107 030b 	add.w	r3, r7, #11
 800ba70:	2201      	movs	r2, #1
 800ba72:	4619      	mov	r1, r3
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff ff7e 	bl	800b976 <_I2CWrite>
 800ba7a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba82:	23ec      	movs	r3, #236	; 0xec
 800ba84:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba86:	e00c      	b.n	800baa2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	6879      	ldr	r1, [r7, #4]
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7ff ff91 	bl	800b9b4 <_I2CRead>
 800ba92:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba9a:	23ec      	movs	r3, #236	; 0xec
 800ba9c:	75fb      	strb	r3, [r7, #23]
 800ba9e:	e000      	b.n	800baa2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800baa0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800baa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
	...

0800bab0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
 800babc:	4613      	mov	r3, r2
 800babe:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bac4:	4a0b      	ldr	r2, [pc, #44]	; (800baf4 <VL53L0X_WrByte+0x44>)
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800baca:	4a0a      	ldr	r2, [pc, #40]	; (800baf4 <VL53L0X_WrByte+0x44>)
 800bacc:	78bb      	ldrb	r3, [r7, #2]
 800bace:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bad0:	2202      	movs	r2, #2
 800bad2:	4908      	ldr	r1, [pc, #32]	; (800baf4 <VL53L0X_WrByte+0x44>)
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff ff4e 	bl	800b976 <_I2CWrite>
 800bada:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bae2:	23ec      	movs	r3, #236	; 0xec
 800bae4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2000b5c8 	.word	0x2000b5c8

0800baf8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	460b      	mov	r3, r1
 800bb02:	70fb      	strb	r3, [r7, #3]
 800bb04:	4613      	mov	r3, r2
 800bb06:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bb0c:	4a0e      	ldr	r2, [pc, #56]	; (800bb48 <VL53L0X_WrWord+0x50>)
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bb12:	883b      	ldrh	r3, [r7, #0]
 800bb14:	0a1b      	lsrs	r3, r3, #8
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <VL53L0X_WrWord+0x50>)
 800bb1c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bb1e:	883b      	ldrh	r3, [r7, #0]
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <VL53L0X_WrWord+0x50>)
 800bb24:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bb26:	2203      	movs	r2, #3
 800bb28:	4907      	ldr	r1, [pc, #28]	; (800bb48 <VL53L0X_WrWord+0x50>)
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff ff23 	bl	800b976 <_I2CWrite>
 800bb30:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb38:	23ec      	movs	r3, #236	; 0xec
 800bb3a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	2000b5c8 	.word	0x2000b5c8

0800bb4c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	4608      	mov	r0, r1
 800bb56:	4611      	mov	r1, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	70fb      	strb	r3, [r7, #3]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	70bb      	strb	r3, [r7, #2]
 800bb62:	4613      	mov	r3, r2
 800bb64:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bb6a:	f107 020e 	add.w	r2, r7, #14
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f81e 	bl	800bbb4 <VL53L0X_RdByte>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bb7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d110      	bne.n	800bba6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bb84:	7bba      	ldrb	r2, [r7, #14]
 800bb86:	78bb      	ldrb	r3, [r7, #2]
 800bb88:	4013      	ands	r3, r2
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	787b      	ldrb	r3, [r7, #1]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bb94:	7bba      	ldrb	r2, [r7, #14]
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff ff88 	bl	800bab0 <VL53L0X_WrByte>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73fb      	strb	r3, [r7, #15]
 800bba4:	e000      	b.n	800bba8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bba6:	bf00      	nop
done:
    return Status;
 800bba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bbc6:	f107 030b 	add.w	r3, r7, #11
 800bbca:	2201      	movs	r2, #1
 800bbcc:	4619      	mov	r1, r3
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff fed1 	bl	800b976 <_I2CWrite>
 800bbd4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bbdc:	23ec      	movs	r3, #236	; 0xec
 800bbde:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bbe0:	e00c      	b.n	800bbfc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fee4 	bl	800b9b4 <_I2CRead>
 800bbec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bbf4:	23ec      	movs	r3, #236	; 0xec
 800bbf6:	75fb      	strb	r3, [r7, #23]
 800bbf8:	e000      	b.n	800bbfc <VL53L0X_RdByte+0x48>
    }
done:
 800bbfa:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bbfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	460b      	mov	r3, r1
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bc1a:	f107 030b 	add.w	r3, r7, #11
 800bc1e:	2201      	movs	r2, #1
 800bc20:	4619      	mov	r1, r3
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff fea7 	bl	800b976 <_I2CWrite>
 800bc28:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc30:	23ec      	movs	r3, #236	; 0xec
 800bc32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bc34:	e017      	b.n	800bc66 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bc36:	2202      	movs	r2, #2
 800bc38:	490e      	ldr	r1, [pc, #56]	; (800bc74 <VL53L0X_RdWord+0x6c>)
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7ff feba 	bl	800b9b4 <_I2CRead>
 800bc40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc48:	23ec      	movs	r3, #236	; 0xec
 800bc4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bc4c:	e00b      	b.n	800bc66 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <VL53L0X_RdWord+0x6c>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	021b      	lsls	r3, r3, #8
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <VL53L0X_RdWord+0x6c>)
 800bc5a:	785b      	ldrb	r3, [r3, #1]
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	4413      	add	r3, r2
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bc66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	2000b5c8 	.word	0x2000b5c8

0800bc78 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	460b      	mov	r3, r1
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bc8a:	f107 030b 	add.w	r3, r7, #11
 800bc8e:	2201      	movs	r2, #1
 800bc90:	4619      	mov	r1, r3
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f7ff fe6f 	bl	800b976 <_I2CWrite>
 800bc98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bca0:	23ec      	movs	r3, #236	; 0xec
 800bca2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bca4:	e01b      	b.n	800bcde <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bca6:	2204      	movs	r2, #4
 800bca8:	4910      	ldr	r1, [pc, #64]	; (800bcec <VL53L0X_RdDWord+0x74>)
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f7ff fe82 	bl	800b9b4 <_I2CRead>
 800bcb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bcb8:	23ec      	movs	r3, #236	; 0xec
 800bcba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bcbc:	e00f      	b.n	800bcde <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <VL53L0X_RdDWord+0x74>)
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	061a      	lsls	r2, r3, #24
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <VL53L0X_RdDWord+0x74>)
 800bcc6:	785b      	ldrb	r3, [r3, #1]
 800bcc8:	041b      	lsls	r3, r3, #16
 800bcca:	441a      	add	r2, r3
 800bccc:	4b07      	ldr	r3, [pc, #28]	; (800bcec <VL53L0X_RdDWord+0x74>)
 800bcce:	789b      	ldrb	r3, [r3, #2]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	4413      	add	r3, r2
 800bcd4:	4a05      	ldr	r2, [pc, #20]	; (800bcec <VL53L0X_RdDWord+0x74>)
 800bcd6:	78d2      	ldrb	r2, [r2, #3]
 800bcd8:	441a      	add	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bcde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	2000b5c8 	.word	0x2000b5c8

0800bcf0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bcfc:	2002      	movs	r0, #2
 800bcfe:	f7f6 fe1b 	bl	8002938 <HAL_Delay>
    return status;
 800bd02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <twoline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool twoline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_twoline_activations_map, 1, params)) {
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	483b      	ldr	r0, [pc, #236]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd20:	f000 fb5e 	bl	800c3e0 <ai_platform_get_activations_map>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d065      	beq.n	800bdf6 <twoline_configure_activations+0xe6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_twoline_activations_map[0] + 416);
 800bd2a:	4b38      	ldr	r3, [pc, #224]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bd32:	4a37      	ldr	r2, [pc, #220]	; (800be10 <twoline_configure_activations+0x100>)
 800bd34:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 416);
 800bd36:	4b35      	ldr	r3, [pc, #212]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bd3e:	4a34      	ldr	r2, [pc, #208]	; (800be10 <twoline_configure_activations+0x100>)
 800bd40:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_twoline_activations_map[0] + 512);
 800bd42:	4b32      	ldr	r3, [pc, #200]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd4a:	4a32      	ldr	r2, [pc, #200]	; (800be14 <twoline_configure_activations+0x104>)
 800bd4c:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 512);
 800bd4e:	4b2f      	ldr	r3, [pc, #188]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd56:	4a2f      	ldr	r2, [pc, #188]	; (800be14 <twoline_configure_activations+0x104>)
 800bd58:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_twoline_activations_map[0] + 512);
 800bd5a:	4b2c      	ldr	r3, [pc, #176]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd62:	4a2d      	ldr	r2, [pc, #180]	; (800be18 <twoline_configure_activations+0x108>)
 800bd64:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 512);
 800bd66:	4b29      	ldr	r3, [pc, #164]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd6e:	4a2a      	ldr	r2, [pc, #168]	; (800be18 <twoline_configure_activations+0x108>)
 800bd70:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800bd72:	4b26      	ldr	r3, [pc, #152]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a29      	ldr	r2, [pc, #164]	; (800be1c <twoline_configure_activations+0x10c>)
 800bd78:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800bd7a:	4b24      	ldr	r3, [pc, #144]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a27      	ldr	r2, [pc, #156]	; (800be1c <twoline_configure_activations+0x10c>)
 800bd80:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_twoline_activations_map[0] + 512);
 800bd82:	4b22      	ldr	r3, [pc, #136]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd8a:	4a25      	ldr	r2, [pc, #148]	; (800be20 <twoline_configure_activations+0x110>)
 800bd8c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 512);
 800bd8e:	4b1f      	ldr	r3, [pc, #124]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd96:	4a22      	ldr	r2, [pc, #136]	; (800be20 <twoline_configure_activations+0x110>)
 800bd98:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_output_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800bd9a:	4b1c      	ldr	r3, [pc, #112]	; (800be0c <twoline_configure_activations+0xfc>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a21      	ldr	r2, [pc, #132]	; (800be24 <twoline_configure_activations+0x114>)
 800bda0:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800bda2:	4b1a      	ldr	r3, [pc, #104]	; (800be0c <twoline_configure_activations+0xfc>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a1f      	ldr	r2, [pc, #124]	; (800be24 <twoline_configure_activations+0x114>)
 800bda8:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_twoline_activations_map[0] + 128);
 800bdaa:	4b18      	ldr	r3, [pc, #96]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3380      	adds	r3, #128	; 0x80
 800bdb0:	4a1d      	ldr	r2, [pc, #116]	; (800be28 <twoline_configure_activations+0x118>)
 800bdb2:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 128);
 800bdb4:	4b15      	ldr	r3, [pc, #84]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3380      	adds	r3, #128	; 0x80
 800bdba:	4a1b      	ldr	r2, [pc, #108]	; (800be28 <twoline_configure_activations+0x118>)
 800bdbc:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_output_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800bdbe:	4b13      	ldr	r3, [pc, #76]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a1a      	ldr	r2, [pc, #104]	; (800be2c <twoline_configure_activations+0x11c>)
 800bdc4:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800bdc6:	4b11      	ldr	r3, [pc, #68]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a18      	ldr	r2, [pc, #96]	; (800be2c <twoline_configure_activations+0x11c>)
 800bdcc:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_twoline_activations_map[0] + 128);
 800bdce:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3380      	adds	r3, #128	; 0x80
 800bdd4:	4a16      	ldr	r2, [pc, #88]	; (800be30 <twoline_configure_activations+0x120>)
 800bdd6:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 128);
 800bdd8:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3380      	adds	r3, #128	; 0x80
 800bdde:	4a14      	ldr	r2, [pc, #80]	; (800be30 <twoline_configure_activations+0x120>)
 800bde0:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_output_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800bde2:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <twoline_configure_activations+0xfc>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a13      	ldr	r2, [pc, #76]	; (800be34 <twoline_configure_activations+0x124>)
 800bde8:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800bdea:	4b08      	ldr	r3, [pc, #32]	; (800be0c <twoline_configure_activations+0xfc>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a11      	ldr	r2, [pc, #68]	; (800be34 <twoline_configure_activations+0x124>)
 800bdf0:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e005      	b.n	800be02 <twoline_configure_activations+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800bdf6:	2213      	movs	r2, #19
 800bdf8:	2130      	movs	r1, #48	; 0x30
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fc6e 	bl	800c6dc <ai_platform_network_set_error>
  return false;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	2000b608 	.word	0x2000b608
 800be10:	2000045c 	.word	0x2000045c
 800be14:	2000046c 	.word	0x2000046c
 800be18:	2000047c 	.word	0x2000047c
 800be1c:	2000048c 	.word	0x2000048c
 800be20:	2000049c 	.word	0x2000049c
 800be24:	200004ac 	.word	0x200004ac
 800be28:	200004bc 	.word	0x200004bc
 800be2c:	200004cc 	.word	0x200004cc
 800be30:	200004dc 	.word	0x200004dc
 800be34:	200004ec 	.word	0x200004ec

0800be38 <twoline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool twoline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_twoline_weights_map, 1, params)) {
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	2101      	movs	r1, #1
 800be46:	4861      	ldr	r0, [pc, #388]	; (800bfcc <twoline_configure_weights+0x194>)
 800be48:	f000 fa72 	bl	800c330 <ai_platform_get_weights_map>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 80b2 	beq.w	800bfb8 <twoline_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800be54:	4b5e      	ldr	r3, [pc, #376]	; (800bfd0 <twoline_configure_weights+0x198>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be5c:	4a5c      	ldr	r2, [pc, #368]	; (800bfd0 <twoline_configure_weights+0x198>)
 800be5e:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 0);
 800be60:	4b5a      	ldr	r3, [pc, #360]	; (800bfcc <twoline_configure_weights+0x194>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a5a      	ldr	r2, [pc, #360]	; (800bfd0 <twoline_configure_weights+0x198>)
 800be66:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 0);
 800be68:	4b58      	ldr	r3, [pc, #352]	; (800bfcc <twoline_configure_weights+0x194>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a58      	ldr	r2, [pc, #352]	; (800bfd0 <twoline_configure_weights+0x198>)
 800be6e:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800be70:	4b58      	ldr	r3, [pc, #352]	; (800bfd4 <twoline_configure_weights+0x19c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be78:	4a56      	ldr	r2, [pc, #344]	; (800bfd4 <twoline_configure_weights+0x19c>)
 800be7a:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 49152);
 800be7c:	4b53      	ldr	r3, [pc, #332]	; (800bfcc <twoline_configure_weights+0x194>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800be84:	4a53      	ldr	r2, [pc, #332]	; (800bfd4 <twoline_configure_weights+0x19c>)
 800be86:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 49152);
 800be88:	4b50      	ldr	r3, [pc, #320]	; (800bfcc <twoline_configure_weights+0x194>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800be90:	4a50      	ldr	r2, [pc, #320]	; (800bfd4 <twoline_configure_weights+0x19c>)
 800be92:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800be94:	4b50      	ldr	r3, [pc, #320]	; (800bfd8 <twoline_configure_weights+0x1a0>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be9c:	4a4e      	ldr	r2, [pc, #312]	; (800bfd8 <twoline_configure_weights+0x1a0>)
 800be9e:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 51200);
 800bea0:	4b4a      	ldr	r3, [pc, #296]	; (800bfcc <twoline_configure_weights+0x194>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 800bea8:	4a4b      	ldr	r2, [pc, #300]	; (800bfd8 <twoline_configure_weights+0x1a0>)
 800beaa:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 51200);
 800beac:	4b47      	ldr	r3, [pc, #284]	; (800bfcc <twoline_configure_weights+0x194>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 800beb4:	4a48      	ldr	r2, [pc, #288]	; (800bfd8 <twoline_configure_weights+0x1a0>)
 800beb6:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800beb8:	4b48      	ldr	r3, [pc, #288]	; (800bfdc <twoline_configure_weights+0x1a4>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bec0:	4a46      	ldr	r2, [pc, #280]	; (800bfdc <twoline_configure_weights+0x1a4>)
 800bec2:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 313344);
 800bec4:	4b41      	ldr	r3, [pc, #260]	; (800bfcc <twoline_configure_weights+0x194>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f503 2399 	add.w	r3, r3, #313344	; 0x4c800
 800becc:	4a43      	ldr	r2, [pc, #268]	; (800bfdc <twoline_configure_weights+0x1a4>)
 800bece:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 313344);
 800bed0:	4b3e      	ldr	r3, [pc, #248]	; (800bfcc <twoline_configure_weights+0x194>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f503 2399 	add.w	r3, r3, #313344	; 0x4c800
 800bed8:	4a40      	ldr	r2, [pc, #256]	; (800bfdc <twoline_configure_weights+0x1a4>)
 800beda:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800bedc:	4b40      	ldr	r3, [pc, #256]	; (800bfe0 <twoline_configure_weights+0x1a8>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bee4:	4a3e      	ldr	r2, [pc, #248]	; (800bfe0 <twoline_configure_weights+0x1a8>)
 800bee6:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 313856);
 800bee8:	4b38      	ldr	r3, [pc, #224]	; (800bfcc <twoline_configure_weights+0x194>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	4b3d      	ldr	r3, [pc, #244]	; (800bfe4 <twoline_configure_weights+0x1ac>)
 800beee:	4413      	add	r3, r2
 800bef0:	4a3b      	ldr	r2, [pc, #236]	; (800bfe0 <twoline_configure_weights+0x1a8>)
 800bef2:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 313856);
 800bef4:	4b35      	ldr	r3, [pc, #212]	; (800bfcc <twoline_configure_weights+0x194>)
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	4b3a      	ldr	r3, [pc, #232]	; (800bfe4 <twoline_configure_weights+0x1ac>)
 800befa:	4413      	add	r3, r2
 800befc:	4a38      	ldr	r2, [pc, #224]	; (800bfe0 <twoline_configure_weights+0x1a8>)
 800befe:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800bf00:	4b39      	ldr	r3, [pc, #228]	; (800bfe8 <twoline_configure_weights+0x1b0>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf08:	4a37      	ldr	r2, [pc, #220]	; (800bfe8 <twoline_configure_weights+0x1b0>)
 800bf0a:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 330240);
 800bf0c:	4b2f      	ldr	r3, [pc, #188]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	4b36      	ldr	r3, [pc, #216]	; (800bfec <twoline_configure_weights+0x1b4>)
 800bf12:	4413      	add	r3, r2
 800bf14:	4a34      	ldr	r2, [pc, #208]	; (800bfe8 <twoline_configure_weights+0x1b0>)
 800bf16:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 330240);
 800bf18:	4b2c      	ldr	r3, [pc, #176]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	4b33      	ldr	r3, [pc, #204]	; (800bfec <twoline_configure_weights+0x1b4>)
 800bf1e:	4413      	add	r3, r2
 800bf20:	4a31      	ldr	r2, [pc, #196]	; (800bfe8 <twoline_configure_weights+0x1b0>)
 800bf22:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800bf24:	4b32      	ldr	r3, [pc, #200]	; (800bff0 <twoline_configure_weights+0x1b8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf2c:	4a30      	ldr	r2, [pc, #192]	; (800bff0 <twoline_configure_weights+0x1b8>)
 800bf2e:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 330368);
 800bf30:	4b26      	ldr	r3, [pc, #152]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	4b2f      	ldr	r3, [pc, #188]	; (800bff4 <twoline_configure_weights+0x1bc>)
 800bf36:	4413      	add	r3, r2
 800bf38:	4a2d      	ldr	r2, [pc, #180]	; (800bff0 <twoline_configure_weights+0x1b8>)
 800bf3a:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 330368);
 800bf3c:	4b23      	ldr	r3, [pc, #140]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	4b2c      	ldr	r3, [pc, #176]	; (800bff4 <twoline_configure_weights+0x1bc>)
 800bf42:	4413      	add	r3, r2
 800bf44:	4a2a      	ldr	r2, [pc, #168]	; (800bff0 <twoline_configure_weights+0x1b8>)
 800bf46:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800bf48:	4b2b      	ldr	r3, [pc, #172]	; (800bff8 <twoline_configure_weights+0x1c0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf50:	4a29      	ldr	r2, [pc, #164]	; (800bff8 <twoline_configure_weights+0x1c0>)
 800bf52:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 334464);
 800bf54:	4b1d      	ldr	r3, [pc, #116]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	4b28      	ldr	r3, [pc, #160]	; (800bffc <twoline_configure_weights+0x1c4>)
 800bf5a:	4413      	add	r3, r2
 800bf5c:	4a26      	ldr	r2, [pc, #152]	; (800bff8 <twoline_configure_weights+0x1c0>)
 800bf5e:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 334464);
 800bf60:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	4b25      	ldr	r3, [pc, #148]	; (800bffc <twoline_configure_weights+0x1c4>)
 800bf66:	4413      	add	r3, r2
 800bf68:	4a23      	ldr	r2, [pc, #140]	; (800bff8 <twoline_configure_weights+0x1c0>)
 800bf6a:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800bf6c:	4b24      	ldr	r3, [pc, #144]	; (800c000 <twoline_configure_weights+0x1c8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf74:	4a22      	ldr	r2, [pc, #136]	; (800c000 <twoline_configure_weights+0x1c8>)
 800bf76:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 334592);
 800bf78:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	4b21      	ldr	r3, [pc, #132]	; (800c004 <twoline_configure_weights+0x1cc>)
 800bf7e:	4413      	add	r3, r2
 800bf80:	4a1f      	ldr	r2, [pc, #124]	; (800c000 <twoline_configure_weights+0x1c8>)
 800bf82:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 334592);
 800bf84:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	4b1e      	ldr	r3, [pc, #120]	; (800c004 <twoline_configure_weights+0x1cc>)
 800bf8a:	4413      	add	r3, r2
 800bf8c:	4a1c      	ldr	r2, [pc, #112]	; (800c000 <twoline_configure_weights+0x1c8>)
 800bf8e:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800bf90:	4b1d      	ldr	r3, [pc, #116]	; (800c008 <twoline_configure_weights+0x1d0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf98:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <twoline_configure_weights+0x1d0>)
 800bf9a:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 335104);
 800bf9c:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <twoline_configure_weights+0x194>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	4b1a      	ldr	r3, [pc, #104]	; (800c00c <twoline_configure_weights+0x1d4>)
 800bfa2:	4413      	add	r3, r2
 800bfa4:	4a18      	ldr	r2, [pc, #96]	; (800c008 <twoline_configure_weights+0x1d0>)
 800bfa6:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 335104);
 800bfa8:	4b08      	ldr	r3, [pc, #32]	; (800bfcc <twoline_configure_weights+0x194>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	4b17      	ldr	r3, [pc, #92]	; (800c00c <twoline_configure_weights+0x1d4>)
 800bfae:	4413      	add	r3, r2
 800bfb0:	4a15      	ldr	r2, [pc, #84]	; (800c008 <twoline_configure_weights+0x1d0>)
 800bfb2:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e005      	b.n	800bfc4 <twoline_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800bfb8:	2212      	movs	r2, #18
 800bfba:	2130      	movs	r1, #48	; 0x30
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fb8d 	bl	800c6dc <ai_platform_network_set_error>
  return false;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	2000b60c 	.word	0x2000b60c
 800bfd0:	200004fc 	.word	0x200004fc
 800bfd4:	2000050c 	.word	0x2000050c
 800bfd8:	2000051c 	.word	0x2000051c
 800bfdc:	2000052c 	.word	0x2000052c
 800bfe0:	2000053c 	.word	0x2000053c
 800bfe4:	0004ca00 	.word	0x0004ca00
 800bfe8:	2000054c 	.word	0x2000054c
 800bfec:	00050a00 	.word	0x00050a00
 800bff0:	2000055c 	.word	0x2000055c
 800bff4:	00050a80 	.word	0x00050a80
 800bff8:	2000056c 	.word	0x2000056c
 800bffc:	00051a80 	.word	0x00051a80
 800c000:	2000057c 	.word	0x2000057c
 800c004:	00051b00 	.word	0x00051b00
 800c008:	2000058c 	.word	0x2000058c
 800c00c:	00051d00 	.word	0x00051d00

0800c010 <ai_twoline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_twoline_get_error(ai_handle network)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fa53 	bl	800c4c4 <ai_platform_network_get_error>
 800c01e:	4603      	mov	r3, r0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <ai_twoline_create>:

AI_API_ENTRY
ai_error ai_twoline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af02      	add	r7, sp, #8
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800c032:	2300      	movs	r3, #0
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	2305      	movs	r3, #5
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	2301      	movs	r3, #1
 800c03c:	4a04      	ldr	r2, [pc, #16]	; (800c050 <ai_twoline_create+0x28>)
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fe65 	bl	800cd10 <ai_platform_network_create>
 800c046:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	20000e08 	.word	0x20000e08

0800c054 <ai_twoline_create_and_init>:

AI_API_ENTRY
ai_error ai_twoline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b096      	sub	sp, #88	; 0x58
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_twoline_create(network, AI_TWOLINE_DATA_CONFIG);
 800c060:	2100      	movs	r1, #0
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff ffe0 	bl	800c028 <ai_twoline_create>
 800c068:	4603      	mov	r3, r0
 800c06a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800c06c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <ai_twoline_create_and_init+0x24>
        return err;
 800c074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c076:	e05d      	b.n	800c134 <ai_twoline_create_and_init+0xe0>
    if (ai_twoline_data_params_get(&params) != true) {
 800c078:	f107 0314 	add.w	r3, r7, #20
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 f8dd 	bl	800c23c <ai_twoline_data_params_get>
 800c082:	4603      	mov	r3, r0
 800c084:	f083 0301 	eor.w	r3, r3, #1
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d008      	beq.n	800c0a0 <ai_twoline_create_and_init+0x4c>
        err = ai_twoline_get_error(*network);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff ffbc 	bl	800c010 <ai_twoline_get_error>
 800c098:	4603      	mov	r3, r0
 800c09a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800c09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c09e:	e049      	b.n	800c134 <ai_twoline_create_and_init+0xe0>
    }
#if defined(AI_TWOLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d016      	beq.n	800c0d4 <ai_twoline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	657b      	str	r3, [r7, #84]	; 0x54
 800c0aa:	e00e      	b.n	800c0ca <ai_twoline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800c0ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	f107 0314 	add.w	r3, r7, #20
 800c0bc:	330c      	adds	r3, #12
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 f922 	bl	800c308 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800c0c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	dbeb      	blt.n	800c0ac <ai_twoline_create_and_init+0x58>
    }
#endif
#if defined(AI_TWOLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d016      	beq.n	800c108 <ai_twoline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c0da:	2300      	movs	r3, #0
 800c0dc:	653b      	str	r3, [r7, #80]	; 0x50
 800c0de:	e00e      	b.n	800c0fe <ai_twoline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800c0e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	f107 0314 	add.w	r3, r7, #20
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 f908 	bl	800c308 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800c0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	653b      	str	r3, [r7, #80]	; 0x50
 800c0fe:	8b7b      	ldrh	r3, [r7, #26]
 800c100:	461a      	mov	r2, r3
 800c102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c104:	4293      	cmp	r3, r2
 800c106:	dbeb      	blt.n	800c0e0 <ai_twoline_create_and_init+0x8c>
    }
#endif
    if (ai_twoline_init(*network, &params) != true) {
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f107 0214 	add.w	r2, r7, #20
 800c110:	4611      	mov	r1, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f000 f846 	bl	800c1a4 <ai_twoline_init>
 800c118:	4603      	mov	r3, r0
 800c11a:	f083 0301 	eor.w	r3, r3, #1
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d006      	beq.n	800c132 <ai_twoline_create_and_init+0xde>
        err = ai_twoline_get_error(*network);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff ff71 	bl	800c010 <ai_twoline_get_error>
 800c12e:	4603      	mov	r3, r0
 800c130:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800c132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c134:	4618      	mov	r0, r3
 800c136:	3758      	adds	r7, #88	; 0x58
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <ai_twoline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d104      	bne.n	800c156 <ai_twoline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c14c:	4b06      	ldr	r3, [pc, #24]	; (800c168 <ai_twoline_inputs_get+0x2c>)
 800c14e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a06      	ldr	r2, [pc, #24]	; (800c16c <ai_twoline_inputs_get+0x30>)
 800c154:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fac5 	bl	800c6e8 <ai_platform_inputs_get>
 800c15e:	4603      	mov	r3, r0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20000e08 	.word	0x20000e08
 800c16c:	a1c00100 	.word	0xa1c00100

0800c170 <ai_twoline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d104      	bne.n	800c18a <ai_twoline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c180:	4b06      	ldr	r3, [pc, #24]	; (800c19c <ai_twoline_outputs_get+0x2c>)
 800c182:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a06      	ldr	r2, [pc, #24]	; (800c1a0 <ai_twoline_outputs_get+0x30>)
 800c188:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fc37 	bl	800ca00 <ai_platform_outputs_get>
 800c192:	4603      	mov	r3, r0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20000e08 	.word	0x20000e08
 800c1a0:	a1c00100 	.word	0xa1c00100

0800c1a4 <ai_twoline_init>:
}

AI_API_ENTRY
ai_bool ai_twoline_init(
  ai_handle network, const ai_network_params* params)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 ff87 	bl	800d0c4 <ai_platform_network_init>
 800c1b6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <ai_twoline_init+0x1e>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e028      	b.n	800c214 <ai_twoline_init+0x70>

  ai_bool ok = true;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	72fb      	strb	r3, [r7, #11]
  ok &= twoline_configure_weights(net_ctx, params);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff fe35 	bl	800be38 <twoline_configure_weights>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bf14      	ite	ne
 800c1da:	2301      	movne	r3, #1
 800c1dc:	2300      	moveq	r3, #0
 800c1de:	72fb      	strb	r3, [r7, #11]
  ok &= twoline_configure_activations(net_ctx, params);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7ff fd94 	bl	800bd10 <twoline_configure_activations>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	7afb      	ldrb	r3, [r7, #11]
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bf14      	ite	ne
 800c1f4:	2301      	movne	r3, #1
 800c1f6:	2300      	moveq	r3, #0
 800c1f8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 f8fe 	bl	800d3fc <ai_platform_network_post_init>
 800c200:	4603      	mov	r3, r0
 800c202:	461a      	mov	r2, r3
 800c204:	7afb      	ldrb	r3, [r7, #11]
 800c206:	4013      	ands	r3, r2
 800c208:	2b00      	cmp	r3, #0
 800c20a:	bf14      	ite	ne
 800c20c:	2301      	movne	r3, #1
 800c20e:	2300      	moveq	r3, #0
 800c210:	72fb      	strb	r3, [r7, #11]

  return ok;
 800c212:	7afb      	ldrb	r3, [r7, #11]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <ai_twoline_run>:


AI_API_ENTRY
ai_i32 ai_twoline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	68b9      	ldr	r1, [r7, #8]
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f001 fa0f 	bl	800d650 <ai_platform_network_process>
 800c232:	4603      	mov	r3, r0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <ai_twoline_data_params_get>:
 * @ingroup twoline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_twoline_data_params_get(ai_network_params* params)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <ai_twoline_data_params_get+0x12>
 800c24a:	2300      	movs	r3, #0
 800c24c:	e016      	b.n	800c27c <ai_twoline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800c24e:	4a0d      	ldr	r2, [pc, #52]	; (800c284 <ai_twoline_data_params_get+0x48>)
 800c250:	f107 0310 	add.w	r3, r7, #16
 800c254:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c258:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWOLINE_DATA_ACTIVATIONS_COUNT, g_twoline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800c25c:	4a0a      	ldr	r2, [pc, #40]	; (800c288 <ai_twoline_data_params_get+0x4c>)
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c266:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWOLINE_DATA_WEIGHTS_COUNT, g_twoline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800c26a:	f107 0210 	add.w	r2, r7, #16
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f90b 	bl	800c490 <ai_platform_bind_network_params>
 800c27a:	4603      	mov	r3, r0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	08012cc4 	.word	0x08012cc4
 800c288:	08012ccc 	.word	0x08012ccc

0800c28c <ai_buffer_get_size>:
 800c28c:	b368      	cbz	r0, 800c2ea <ai_buffer_get_size+0x5e>
 800c28e:	4b17      	ldr	r3, [pc, #92]	; (800c2ec <ai_buffer_get_size+0x60>)
 800c290:	4a17      	ldr	r2, [pc, #92]	; (800c2f0 <ai_buffer_get_size+0x64>)
 800c292:	b410      	push	{r4}
 800c294:	6804      	ldr	r4, [r0, #0]
 800c296:	4023      	ands	r3, r4
 800c298:	4293      	cmp	r3, r2
 800c29a:	d123      	bne.n	800c2e4 <ai_buffer_get_size+0x58>
 800c29c:	b311      	cbz	r1, 800c2e4 <ai_buffer_get_size+0x58>
 800c29e:	6984      	ldr	r4, [r0, #24]
 800c2a0:	6862      	ldr	r2, [r4, #4]
 800c2a2:	321f      	adds	r2, #31
 800c2a4:	f022 021f 	bic.w	r2, r2, #31
 800c2a8:	7d03      	ldrb	r3, [r0, #20]
 800c2aa:	6941      	ldr	r1, [r0, #20]
 800c2ac:	f1a3 0301 	sub.w	r3, r3, #1
 800c2b0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800c2b4:	fab3 f383 	clz	r3, r3
 800c2b8:	095b      	lsrs	r3, r3, #5
 800c2ba:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800c2be:	da0c      	bge.n	800c2da <ai_buffer_get_size+0x4e>
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d103      	bne.n	800c2cc <ai_buffer_get_size+0x40>
 800c2c4:	2802      	cmp	r0, #2
 800c2c6:	f04f 0302 	mov.w	r3, #2
 800c2ca:	d006      	beq.n	800c2da <ai_buffer_get_size+0x4e>
 800c2cc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	4298      	cmp	r0, r3
 800c2d4:	fb01 f202 	mul.w	r2, r1, r2
 800c2d8:	d1f2      	bne.n	800c2c0 <ai_buffer_get_size+0x34>
 800c2da:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800c2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	6984      	ldr	r4, [r0, #24]
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	e7de      	b.n	800c2a8 <ai_buffer_get_size+0x1c>
 800c2ea:	4770      	bx	lr
 800c2ec:	017fffff 	.word	0x017fffff
 800c2f0:	000400c0 	.word	0x000400c0

0800c2f4 <ai_buffer_array_sane>:
 800c2f4:	b138      	cbz	r0, 800c306 <ai_buffer_array_sane+0x12>
 800c2f6:	6843      	ldr	r3, [r0, #4]
 800c2f8:	b123      	cbz	r3, 800c304 <ai_buffer_array_sane+0x10>
 800c2fa:	8840      	ldrh	r0, [r0, #2]
 800c2fc:	3800      	subs	r0, #0
 800c2fe:	bf18      	it	ne
 800c300:	2001      	movne	r0, #1
 800c302:	4770      	bx	lr
 800c304:	4618      	mov	r0, r3
 800c306:	4770      	bx	lr

0800c308 <ai_buffer_array_item_set_address>:
 800c308:	b150      	cbz	r0, 800c320 <ai_buffer_array_item_set_address+0x18>
 800c30a:	6843      	ldr	r3, [r0, #4]
 800c30c:	b14b      	cbz	r3, 800c322 <ai_buffer_array_item_set_address+0x1a>
 800c30e:	8840      	ldrh	r0, [r0, #2]
 800c310:	b900      	cbnz	r0, 800c314 <ai_buffer_array_item_set_address+0xc>
 800c312:	4770      	bx	lr
 800c314:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c318:	2001      	movs	r0, #1
 800c31a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c31e:	604a      	str	r2, [r1, #4]
 800c320:	4770      	bx	lr
 800c322:	4618      	mov	r0, r3
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop

0800c328 <_ai_platform_acquire_crc>:
 800c328:	2001      	movs	r0, #1
 800c32a:	4770      	bx	lr

0800c32c <_ai_platform_release_crc>:
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop

0800c330 <ai_platform_get_weights_map>:
 800c330:	2900      	cmp	r1, #0
 800c332:	bf18      	it	ne
 800c334:	2800      	cmpne	r0, #0
 800c336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c338:	bf0c      	ite	eq
 800c33a:	2401      	moveq	r4, #1
 800c33c:	2400      	movne	r4, #0
 800c33e:	2a00      	cmp	r2, #0
 800c340:	bf08      	it	eq
 800c342:	f044 0401 	orreq.w	r4, r4, #1
 800c346:	b114      	cbz	r4, 800c34e <ai_platform_get_weights_map+0x1e>
 800c348:	2400      	movs	r4, #0
 800c34a:	4620      	mov	r0, r4
 800c34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c34e:	4616      	mov	r6, r2
 800c350:	4b22      	ldr	r3, [pc, #136]	; (800c3dc <ai_platform_get_weights_map+0xac>)
 800c352:	6812      	ldr	r2, [r2, #0]
 800c354:	4605      	mov	r5, r0
 800c356:	460f      	mov	r7, r1
 800c358:	429a      	cmp	r2, r3
 800c35a:	d022      	beq.n	800c3a2 <ai_platform_get_weights_map+0x72>
 800c35c:	6870      	ldr	r0, [r6, #4]
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0f2      	beq.n	800c348 <ai_platform_get_weights_map+0x18>
 800c362:	6806      	ldr	r6, [r0, #0]
 800c364:	429e      	cmp	r6, r3
 800c366:	d006      	beq.n	800c376 <ai_platform_get_weights_map+0x46>
 800c368:	f1a1 0401 	sub.w	r4, r1, #1
 800c36c:	6028      	str	r0, [r5, #0]
 800c36e:	fab4 f484 	clz	r4, r4
 800c372:	0964      	lsrs	r4, r4, #5
 800c374:	e7e9      	b.n	800c34a <ai_platform_get_weights_map+0x1a>
 800c376:	3d04      	subs	r5, #4
 800c378:	4602      	mov	r2, r0
 800c37a:	4621      	mov	r1, r4
 800c37c:	e000      	b.n	800c380 <ai_platform_get_weights_map+0x50>
 800c37e:	4619      	mov	r1, r3
 800c380:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c384:	42b3      	cmp	r3, r6
 800c386:	d025      	beq.n	800c3d4 <ai_platform_get_weights_map+0xa4>
 800c388:	f845 3f04 	str.w	r3, [r5, #4]!
 800c38c:	1c4b      	adds	r3, r1, #1
 800c38e:	429f      	cmp	r7, r3
 800c390:	d8f5      	bhi.n	800c37e <ai_platform_get_weights_map+0x4e>
 800c392:	d1da      	bne.n	800c34a <ai_platform_get_weights_map+0x1a>
 800c394:	3102      	adds	r1, #2
 800c396:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c39a:	42b3      	cmp	r3, r6
 800c39c:	d1d5      	bne.n	800c34a <ai_platform_get_weights_map+0x1a>
 800c39e:	2401      	movs	r4, #1
 800c3a0:	e7d3      	b.n	800c34a <ai_platform_get_weights_map+0x1a>
 800c3a2:	1d30      	adds	r0, r6, #4
 800c3a4:	f7ff ffa6 	bl	800c2f4 <ai_buffer_array_sane>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d0cd      	beq.n	800c348 <ai_platform_get_weights_map+0x18>
 800c3ac:	88f3      	ldrh	r3, [r6, #6]
 800c3ae:	429f      	cmp	r7, r3
 800c3b0:	d1ca      	bne.n	800c348 <ai_platform_get_weights_map+0x18>
 800c3b2:	3d04      	subs	r5, #4
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	68b3      	ldr	r3, [r6, #8]
 800c3b8:	4423      	add	r3, r4
 800c3ba:	341c      	adds	r4, #28
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	b123      	cbz	r3, 800c3ca <ai_platform_get_weights_map+0x9a>
 800c3c0:	3201      	adds	r2, #1
 800c3c2:	f845 3f04 	str.w	r3, [r5, #4]!
 800c3c6:	4297      	cmp	r7, r2
 800c3c8:	d8f5      	bhi.n	800c3b6 <ai_platform_get_weights_map+0x86>
 800c3ca:	1abc      	subs	r4, r7, r2
 800c3cc:	fab4 f484 	clz	r4, r4
 800c3d0:	0964      	lsrs	r4, r4, #5
 800c3d2:	e7ba      	b.n	800c34a <ai_platform_get_weights_map+0x1a>
 800c3d4:	428f      	cmp	r7, r1
 800c3d6:	d1b8      	bne.n	800c34a <ai_platform_get_weights_map+0x1a>
 800c3d8:	e7e1      	b.n	800c39e <ai_platform_get_weights_map+0x6e>
 800c3da:	bf00      	nop
 800c3dc:	a1facade 	.word	0xa1facade

0800c3e0 <ai_platform_get_activations_map>:
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	bf18      	it	ne
 800c3e4:	2800      	cmpne	r0, #0
 800c3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e8:	bf0c      	ite	eq
 800c3ea:	2401      	moveq	r4, #1
 800c3ec:	2400      	movne	r4, #0
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	bf08      	it	eq
 800c3f2:	f044 0401 	orreq.w	r4, r4, #1
 800c3f6:	b114      	cbz	r4, 800c3fe <ai_platform_get_activations_map+0x1e>
 800c3f8:	2400      	movs	r4, #0
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3fe:	4616      	mov	r6, r2
 800c400:	4b22      	ldr	r3, [pc, #136]	; (800c48c <ai_platform_get_activations_map+0xac>)
 800c402:	6812      	ldr	r2, [r2, #0]
 800c404:	4605      	mov	r5, r0
 800c406:	460f      	mov	r7, r1
 800c408:	429a      	cmp	r2, r3
 800c40a:	d022      	beq.n	800c452 <ai_platform_get_activations_map+0x72>
 800c40c:	6a30      	ldr	r0, [r6, #32]
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0f2      	beq.n	800c3f8 <ai_platform_get_activations_map+0x18>
 800c412:	6806      	ldr	r6, [r0, #0]
 800c414:	429e      	cmp	r6, r3
 800c416:	d006      	beq.n	800c426 <ai_platform_get_activations_map+0x46>
 800c418:	f1a1 0401 	sub.w	r4, r1, #1
 800c41c:	6028      	str	r0, [r5, #0]
 800c41e:	fab4 f484 	clz	r4, r4
 800c422:	0964      	lsrs	r4, r4, #5
 800c424:	e7e9      	b.n	800c3fa <ai_platform_get_activations_map+0x1a>
 800c426:	3d04      	subs	r5, #4
 800c428:	4602      	mov	r2, r0
 800c42a:	4621      	mov	r1, r4
 800c42c:	e000      	b.n	800c430 <ai_platform_get_activations_map+0x50>
 800c42e:	4619      	mov	r1, r3
 800c430:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c434:	42b3      	cmp	r3, r6
 800c436:	d026      	beq.n	800c486 <ai_platform_get_activations_map+0xa6>
 800c438:	f845 3f04 	str.w	r3, [r5, #4]!
 800c43c:	1c4b      	adds	r3, r1, #1
 800c43e:	429f      	cmp	r7, r3
 800c440:	d8f5      	bhi.n	800c42e <ai_platform_get_activations_map+0x4e>
 800c442:	d1da      	bne.n	800c3fa <ai_platform_get_activations_map+0x1a>
 800c444:	3102      	adds	r1, #2
 800c446:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c44a:	42b3      	cmp	r3, r6
 800c44c:	d1d5      	bne.n	800c3fa <ai_platform_get_activations_map+0x1a>
 800c44e:	2401      	movs	r4, #1
 800c450:	e7d3      	b.n	800c3fa <ai_platform_get_activations_map+0x1a>
 800c452:	f106 000c 	add.w	r0, r6, #12
 800c456:	f7ff ff4d 	bl	800c2f4 <ai_buffer_array_sane>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d0cc      	beq.n	800c3f8 <ai_platform_get_activations_map+0x18>
 800c45e:	89f3      	ldrh	r3, [r6, #14]
 800c460:	429f      	cmp	r7, r3
 800c462:	d1c9      	bne.n	800c3f8 <ai_platform_get_activations_map+0x18>
 800c464:	3d04      	subs	r5, #4
 800c466:	4622      	mov	r2, r4
 800c468:	6933      	ldr	r3, [r6, #16]
 800c46a:	4423      	add	r3, r4
 800c46c:	341c      	adds	r4, #28
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	b123      	cbz	r3, 800c47c <ai_platform_get_activations_map+0x9c>
 800c472:	3201      	adds	r2, #1
 800c474:	f845 3f04 	str.w	r3, [r5, #4]!
 800c478:	4297      	cmp	r7, r2
 800c47a:	d8f5      	bhi.n	800c468 <ai_platform_get_activations_map+0x88>
 800c47c:	1abc      	subs	r4, r7, r2
 800c47e:	fab4 f484 	clz	r4, r4
 800c482:	0964      	lsrs	r4, r4, #5
 800c484:	e7b9      	b.n	800c3fa <ai_platform_get_activations_map+0x1a>
 800c486:	428f      	cmp	r7, r1
 800c488:	d1b7      	bne.n	800c3fa <ai_platform_get_activations_map+0x1a>
 800c48a:	e7e0      	b.n	800c44e <ai_platform_get_activations_map+0x6e>
 800c48c:	a1facade 	.word	0xa1facade

0800c490 <ai_platform_bind_network_params>:
 800c490:	2a00      	cmp	r2, #0
 800c492:	bf18      	it	ne
 800c494:	2900      	cmpne	r1, #0
 800c496:	d010      	beq.n	800c4ba <ai_platform_bind_network_params+0x2a>
 800c498:	b178      	cbz	r0, 800c4ba <ai_platform_bind_network_params+0x2a>
 800c49a:	4603      	mov	r3, r0
 800c49c:	4808      	ldr	r0, [pc, #32]	; (800c4c0 <ai_platform_bind_network_params+0x30>)
 800c49e:	f103 0c0c 	add.w	ip, r3, #12
 800c4a2:	f843 0b04 	str.w	r0, [r3], #4
 800c4a6:	c903      	ldmia	r1, {r0, r1}
 800c4a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4b2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	4770      	bx	lr
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	4618      	mov	r0, r3
 800c4be:	4770      	bx	lr
 800c4c0:	a1facade 	.word	0xa1facade

0800c4c4 <ai_platform_network_get_error>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d03f      	beq.n	800c54a <ai_platform_network_get_error+0x86>
 800c4ca:	4b7d      	ldr	r3, [pc, #500]	; (800c6c0 <ai_platform_network_get_error+0x1fc>)
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	6802      	ldr	r2, [r0, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d13a      	bne.n	800c54a <ai_platform_network_get_error+0x86>
 800c4d4:	f7ff ff28 	bl	800c328 <_ai_platform_acquire_crc>
 800c4d8:	4b7a      	ldr	r3, [pc, #488]	; (800c6c4 <ai_platform_network_get_error+0x200>)
 800c4da:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4e4:	189a      	adds	r2, r3, r2
 800c4e6:	2a01      	cmp	r2, #1
 800c4e8:	f240 8086 	bls.w	800c5f8 <ai_platform_network_get_error+0x134>
 800c4ec:	f240 4249 	movw	r2, #1097	; 0x449
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	f000 8081 	beq.w	800c5f8 <ai_platform_network_get_error+0x134>
 800c4f6:	4a74      	ldr	r2, [pc, #464]	; (800c6c8 <ai_platform_network_get_error+0x204>)
 800c4f8:	6813      	ldr	r3, [r2, #0]
 800c4fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4fe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c502:	f000 8087 	beq.w	800c614 <ai_platform_network_get_error+0x150>
 800c506:	6813      	ldr	r3, [r2, #0]
 800c508:	f240 4183 	movw	r1, #1155	; 0x483
 800c50c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c510:	428b      	cmp	r3, r1
 800c512:	f000 80a9 	beq.w	800c668 <ai_platform_network_get_error+0x1a4>
 800c516:	6813      	ldr	r3, [r2, #0]
 800c518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c51c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c520:	f000 80c0 	beq.w	800c6a4 <ai_platform_network_get_error+0x1e0>
 800c524:	6813      	ldr	r3, [r2, #0]
 800c526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f040 8082 	bne.w	800c634 <ai_platform_network_get_error+0x170>
 800c530:	4a66      	ldr	r2, [pc, #408]	; (800c6cc <ai_platform_network_get_error+0x208>)
 800c532:	2301      	movs	r3, #1
 800c534:	6093      	str	r3, [r2, #8]
 800c536:	6893      	ldr	r3, [r2, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1fc      	bne.n	800c536 <ai_platform_network_get_error+0x72>
 800c53c:	4964      	ldr	r1, [pc, #400]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c53e:	4b65      	ldr	r3, [pc, #404]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c540:	6011      	str	r1, [r2, #0]
 800c542:	6812      	ldr	r2, [r2, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d075      	beq.n	800c634 <ai_platform_network_get_error+0x170>
 800c548:	e7fe      	b.n	800c548 <ai_platform_network_get_error+0x84>
 800c54a:	f7ff feed 	bl	800c328 <_ai_platform_acquire_crc>
 800c54e:	4b5d      	ldr	r3, [pc, #372]	; (800c6c4 <ai_platform_network_get_error+0x200>)
 800c550:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c55a:	185a      	adds	r2, r3, r1
 800c55c:	2a01      	cmp	r2, #1
 800c55e:	d929      	bls.n	800c5b4 <ai_platform_network_get_error+0xf0>
 800c560:	f240 4249 	movw	r2, #1097	; 0x449
 800c564:	4293      	cmp	r3, r2
 800c566:	d025      	beq.n	800c5b4 <ai_platform_network_get_error+0xf0>
 800c568:	4a57      	ldr	r2, [pc, #348]	; (800c6c8 <ai_platform_network_get_error+0x204>)
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c570:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c574:	d02b      	beq.n	800c5ce <ai_platform_network_get_error+0x10a>
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	f240 4183 	movw	r1, #1155	; 0x483
 800c57c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c580:	428b      	cmp	r3, r1
 800c582:	d060      	beq.n	800c646 <ai_platform_network_get_error+0x182>
 800c584:	6813      	ldr	r3, [r2, #0]
 800c586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c58a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c58e:	d07c      	beq.n	800c68a <ai_platform_network_get_error+0x1c6>
 800c590:	6813      	ldr	r3, [r2, #0]
 800c592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c596:	2b00      	cmp	r3, #0
 800c598:	d129      	bne.n	800c5ee <ai_platform_network_get_error+0x12a>
 800c59a:	4a4c      	ldr	r2, [pc, #304]	; (800c6cc <ai_platform_network_get_error+0x208>)
 800c59c:	2301      	movs	r3, #1
 800c59e:	6093      	str	r3, [r2, #8]
 800c5a0:	6893      	ldr	r3, [r2, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1fc      	bne.n	800c5a0 <ai_platform_network_get_error+0xdc>
 800c5a6:	494a      	ldr	r1, [pc, #296]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c5a8:	4b4a      	ldr	r3, [pc, #296]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c5aa:	6011      	str	r1, [r2, #0]
 800c5ac:	6812      	ldr	r2, [r2, #0]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d01d      	beq.n	800c5ee <ai_platform_network_get_error+0x12a>
 800c5b2:	e7fe      	b.n	800c5b2 <ai_platform_network_get_error+0xee>
 800c5b4:	4a45      	ldr	r2, [pc, #276]	; (800c6cc <ai_platform_network_get_error+0x208>)
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	6093      	str	r3, [r2, #8]
 800c5ba:	6893      	ldr	r3, [r2, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1fc      	bne.n	800c5ba <ai_platform_network_get_error+0xf6>
 800c5c0:	4943      	ldr	r1, [pc, #268]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c5c2:	4b44      	ldr	r3, [pc, #272]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	6812      	ldr	r2, [r2, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d010      	beq.n	800c5ee <ai_platform_network_get_error+0x12a>
 800c5cc:	e7fe      	b.n	800c5cc <ai_platform_network_get_error+0x108>
 800c5ce:	4a42      	ldr	r2, [pc, #264]	; (800c6d8 <ai_platform_network_get_error+0x214>)
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c5d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1fb      	bne.n	800c5d6 <ai_platform_network_get_error+0x112>
 800c5de:	493c      	ldr	r1, [pc, #240]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c5e0:	4b3c      	ldr	r3, [pc, #240]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c5e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c5e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d111      	bne.n	800c612 <ai_platform_network_get_error+0x14e>
 800c5ee:	f7ff fe9d 	bl	800c32c <_ai_platform_release_crc>
 800c5f2:	f241 0010 	movw	r0, #4112	; 0x1010
 800c5f6:	bd10      	pop	{r4, pc}
 800c5f8:	4a34      	ldr	r2, [pc, #208]	; (800c6cc <ai_platform_network_get_error+0x208>)
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	6093      	str	r3, [r2, #8]
 800c5fe:	6893      	ldr	r3, [r2, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1fc      	bne.n	800c5fe <ai_platform_network_get_error+0x13a>
 800c604:	4932      	ldr	r1, [pc, #200]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c606:	4b33      	ldr	r3, [pc, #204]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c608:	6011      	str	r1, [r2, #0]
 800c60a:	6812      	ldr	r2, [r2, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d011      	beq.n	800c634 <ai_platform_network_get_error+0x170>
 800c610:	e7fe      	b.n	800c610 <ai_platform_network_get_error+0x14c>
 800c612:	e7fe      	b.n	800c612 <ai_platform_network_get_error+0x14e>
 800c614:	4a30      	ldr	r2, [pc, #192]	; (800c6d8 <ai_platform_network_get_error+0x214>)
 800c616:	2301      	movs	r3, #1
 800c618:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c61c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1fb      	bne.n	800c61c <ai_platform_network_get_error+0x158>
 800c624:	492a      	ldr	r1, [pc, #168]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c626:	4b2b      	ldr	r3, [pc, #172]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c628:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c62c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c630:	429a      	cmp	r2, r3
 800c632:	d107      	bne.n	800c644 <ai_platform_network_get_error+0x180>
 800c634:	f7ff fe7a 	bl	800c32c <_ai_platform_release_crc>
 800c638:	f104 0010 	add.w	r0, r4, #16
 800c63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c640:	f001 bae4 	b.w	800dc0c <core_get_error>
 800c644:	e7fe      	b.n	800c644 <ai_platform_network_get_error+0x180>
 800c646:	4a24      	ldr	r2, [pc, #144]	; (800c6d8 <ai_platform_network_get_error+0x214>)
 800c648:	2301      	movs	r3, #1
 800c64a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c64e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1fb      	bne.n	800c64e <ai_platform_network_get_error+0x18a>
 800c656:	491e      	ldr	r1, [pc, #120]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c658:	4b1e      	ldr	r3, [pc, #120]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c65a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c65e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c662:	429a      	cmp	r2, r3
 800c664:	d0c3      	beq.n	800c5ee <ai_platform_network_get_error+0x12a>
 800c666:	e7fe      	b.n	800c666 <ai_platform_network_get_error+0x1a2>
 800c668:	4a1b      	ldr	r2, [pc, #108]	; (800c6d8 <ai_platform_network_get_error+0x214>)
 800c66a:	2301      	movs	r3, #1
 800c66c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c670:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1fb      	bne.n	800c670 <ai_platform_network_get_error+0x1ac>
 800c678:	4915      	ldr	r1, [pc, #84]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c67a:	4b16      	ldr	r3, [pc, #88]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c67c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c680:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c684:	429a      	cmp	r2, r3
 800c686:	d0d5      	beq.n	800c634 <ai_platform_network_get_error+0x170>
 800c688:	e7fe      	b.n	800c688 <ai_platform_network_get_error+0x1c4>
 800c68a:	4a10      	ldr	r2, [pc, #64]	; (800c6cc <ai_platform_network_get_error+0x208>)
 800c68c:	2301      	movs	r3, #1
 800c68e:	6093      	str	r3, [r2, #8]
 800c690:	6893      	ldr	r3, [r2, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1fc      	bne.n	800c690 <ai_platform_network_get_error+0x1cc>
 800c696:	490e      	ldr	r1, [pc, #56]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c698:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c69a:	6011      	str	r1, [r2, #0]
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d0a5      	beq.n	800c5ee <ai_platform_network_get_error+0x12a>
 800c6a2:	e7fe      	b.n	800c6a2 <ai_platform_network_get_error+0x1de>
 800c6a4:	4a09      	ldr	r2, [pc, #36]	; (800c6cc <ai_platform_network_get_error+0x208>)
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	6093      	str	r3, [r2, #8]
 800c6aa:	6893      	ldr	r3, [r2, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1fc      	bne.n	800c6aa <ai_platform_network_get_error+0x1e6>
 800c6b0:	4907      	ldr	r1, [pc, #28]	; (800c6d0 <ai_platform_network_get_error+0x20c>)
 800c6b2:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <ai_platform_network_get_error+0x210>)
 800c6b4:	6011      	str	r1, [r2, #0]
 800c6b6:	6812      	ldr	r2, [r2, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d0bb      	beq.n	800c634 <ai_platform_network_get_error+0x170>
 800c6bc:	e7fe      	b.n	800c6bc <ai_platform_network_get_error+0x1f8>
 800c6be:	bf00      	nop
 800c6c0:	a1c00100 	.word	0xa1c00100
 800c6c4:	e0042000 	.word	0xe0042000
 800c6c8:	5c001000 	.word	0x5c001000
 800c6cc:	40023000 	.word	0x40023000
 800c6d0:	f407a5c2 	.word	0xf407a5c2
 800c6d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c6d8:	58024000 	.word	0x58024000

0800c6dc <ai_platform_network_set_error>:
 800c6dc:	b110      	cbz	r0, 800c6e4 <ai_platform_network_set_error+0x8>
 800c6de:	3010      	adds	r0, #16
 800c6e0:	f001 ba9a 	b.w	800dc18 <core_set_error>
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop

0800c6e8 <ai_platform_inputs_get>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	9102      	str	r1, [sp, #8]
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f000 8093 	beq.w	800c81c <ai_platform_inputs_get+0x134>
 800c6f6:	4baa      	ldr	r3, [pc, #680]	; (800c9a0 <ai_platform_inputs_get+0x2b8>)
 800c6f8:	4681      	mov	r9, r0
 800c6fa:	6802      	ldr	r2, [r0, #0]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	f040 808d 	bne.w	800c81c <ai_platform_inputs_get+0x134>
 800c702:	f7ff fe11 	bl	800c328 <_ai_platform_acquire_crc>
 800c706:	4ba7      	ldr	r3, [pc, #668]	; (800c9a4 <ai_platform_inputs_get+0x2bc>)
 800c708:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c712:	189a      	adds	r2, r3, r2
 800c714:	2a01      	cmp	r2, #1
 800c716:	f240 80da 	bls.w	800c8ce <ai_platform_inputs_get+0x1e6>
 800c71a:	f240 4249 	movw	r2, #1097	; 0x449
 800c71e:	4293      	cmp	r3, r2
 800c720:	f000 80d5 	beq.w	800c8ce <ai_platform_inputs_get+0x1e6>
 800c724:	4aa0      	ldr	r2, [pc, #640]	; (800c9a8 <ai_platform_inputs_get+0x2c0>)
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c72c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c730:	f000 80dc 	beq.w	800c8ec <ai_platform_inputs_get+0x204>
 800c734:	6813      	ldr	r3, [r2, #0]
 800c736:	f240 4183 	movw	r1, #1155	; 0x483
 800c73a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c73e:	428b      	cmp	r3, r1
 800c740:	f000 810e 	beq.w	800c960 <ai_platform_inputs_get+0x278>
 800c744:	6813      	ldr	r3, [r2, #0]
 800c746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c74a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c74e:	f000 8143 	beq.w	800c9d8 <ai_platform_inputs_get+0x2f0>
 800c752:	6813      	ldr	r3, [r2, #0]
 800c754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 8113 	beq.w	800c984 <ai_platform_inputs_get+0x29c>
 800c75e:	f7ff fde5 	bl	800c32c <_ai_platform_release_crc>
 800c762:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80d2 	beq.w	800c910 <ai_platform_inputs_get+0x228>
 800c76c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c770:	f1ba 0f00 	cmp.w	sl, #0
 800c774:	f000 80cc 	beq.w	800c910 <ai_platform_inputs_get+0x228>
 800c778:	2100      	movs	r1, #0
 800c77a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c77e:	460d      	mov	r5, r1
 800c780:	4689      	mov	r9, r1
 800c782:	e016      	b.n	800c7b2 <ai_platform_inputs_get+0xca>
 800c784:	9a01      	ldr	r2, [sp, #4]
 800c786:	2301      	movs	r3, #1
 800c788:	f848 3002 	str.w	r3, [r8, r2]
 800c78c:	69b2      	ldr	r2, [r6, #24]
 800c78e:	f04f 0301 	mov.w	r3, #1
 800c792:	6856      	ldr	r6, [r2, #4]
 800c794:	3501      	adds	r5, #1
 800c796:	f109 091c 	add.w	r9, r9, #28
 800c79a:	7523      	strb	r3, [r4, #20]
 800c79c:	2300      	movs	r3, #0
 800c79e:	6962      	ldr	r2, [r4, #20]
 800c7a0:	60a7      	str	r7, [r4, #8]
 800c7a2:	f36b 221f 	bfi	r2, fp, #8, #24
 800c7a6:	6126      	str	r6, [r4, #16]
 800c7a8:	61a1      	str	r1, [r4, #24]
 800c7aa:	60e3      	str	r3, [r4, #12]
 800c7ac:	6162      	str	r2, [r4, #20]
 800c7ae:	e9c4 0c00 	strd	r0, ip, [r4]
 800c7b2:	f8ba 3000 	ldrh.w	r3, [sl]
 800c7b6:	b2ac      	uxth	r4, r5
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c7be:	9301      	str	r3, [sp, #4]
 800c7c0:	f240 80b5 	bls.w	800c92e <ai_platform_inputs_get+0x246>
 800c7c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 80b0 	beq.w	800c92e <ai_platform_inputs_get+0x246>
 800c7ce:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c7d2:	2e00      	cmp	r6, #0
 800c7d4:	f000 80ab 	beq.w	800c92e <ai_platform_inputs_get+0x246>
 800c7d8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c7dc:	69b2      	ldr	r2, [r6, #24]
 800c7de:	68f1      	ldr	r1, [r6, #12]
 800c7e0:	6810      	ldr	r0, [r2, #0]
 800c7e2:	9100      	str	r1, [sp, #0]
 800c7e4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800c7e8:	68b3      	ldr	r3, [r6, #8]
 800c7ea:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c7ee:	444c      	add	r4, r9
 800c7f0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c7f4:	f002 f9b2 	bl	800eb5c <ai_array_to_buffer_fmt>
 800c7f8:	69b2      	ldr	r2, [r6, #24]
 800c7fa:	9900      	ldr	r1, [sp, #0]
 800c7fc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c800:	2f00      	cmp	r7, #0
 800c802:	d0c4      	beq.n	800c78e <ai_platform_inputs_get+0xa6>
 800c804:	2200      	movs	r2, #0
 800c806:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800c80a:	6832      	ldr	r2, [r6, #0]
 800c80c:	607a      	str	r2, [r7, #4]
 800c80e:	b112      	cbz	r2, 800c816 <ai_platform_inputs_get+0x12e>
 800c810:	8852      	ldrh	r2, [r2, #2]
 800c812:	2a00      	cmp	r2, #0
 800c814:	d1b6      	bne.n	800c784 <ai_platform_inputs_get+0x9c>
 800c816:	69b2      	ldr	r2, [r6, #24]
 800c818:	2700      	movs	r7, #0
 800c81a:	e7b8      	b.n	800c78e <ai_platform_inputs_get+0xa6>
 800c81c:	f7ff fd84 	bl	800c328 <_ai_platform_acquire_crc>
 800c820:	4b60      	ldr	r3, [pc, #384]	; (800c9a4 <ai_platform_inputs_get+0x2bc>)
 800c822:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c82c:	185a      	adds	r2, r3, r1
 800c82e:	2a01      	cmp	r2, #1
 800c830:	d92a      	bls.n	800c888 <ai_platform_inputs_get+0x1a0>
 800c832:	f240 4249 	movw	r2, #1097	; 0x449
 800c836:	4293      	cmp	r3, r2
 800c838:	d026      	beq.n	800c888 <ai_platform_inputs_get+0x1a0>
 800c83a:	4a5b      	ldr	r2, [pc, #364]	; (800c9a8 <ai_platform_inputs_get+0x2c0>)
 800c83c:	6813      	ldr	r3, [r2, #0]
 800c83e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c842:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c846:	d02c      	beq.n	800c8a2 <ai_platform_inputs_get+0x1ba>
 800c848:	6813      	ldr	r3, [r2, #0]
 800c84a:	f240 4183 	movw	r1, #1155	; 0x483
 800c84e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c852:	428b      	cmp	r3, r1
 800c854:	d073      	beq.n	800c93e <ai_platform_inputs_get+0x256>
 800c856:	6813      	ldr	r3, [r2, #0]
 800c858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c85c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c860:	f000 80ac 	beq.w	800c9bc <ai_platform_inputs_get+0x2d4>
 800c864:	6813      	ldr	r3, [r2, #0]
 800c866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d129      	bne.n	800c8c2 <ai_platform_inputs_get+0x1da>
 800c86e:	4a4f      	ldr	r2, [pc, #316]	; (800c9ac <ai_platform_inputs_get+0x2c4>)
 800c870:	2301      	movs	r3, #1
 800c872:	6093      	str	r3, [r2, #8]
 800c874:	6893      	ldr	r3, [r2, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1fc      	bne.n	800c874 <ai_platform_inputs_get+0x18c>
 800c87a:	494d      	ldr	r1, [pc, #308]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c87c:	4b4d      	ldr	r3, [pc, #308]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c87e:	6011      	str	r1, [r2, #0]
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d01d      	beq.n	800c8c2 <ai_platform_inputs_get+0x1da>
 800c886:	e7fe      	b.n	800c886 <ai_platform_inputs_get+0x19e>
 800c888:	4a48      	ldr	r2, [pc, #288]	; (800c9ac <ai_platform_inputs_get+0x2c4>)
 800c88a:	2301      	movs	r3, #1
 800c88c:	6093      	str	r3, [r2, #8]
 800c88e:	6893      	ldr	r3, [r2, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1fc      	bne.n	800c88e <ai_platform_inputs_get+0x1a6>
 800c894:	4946      	ldr	r1, [pc, #280]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c896:	4b47      	ldr	r3, [pc, #284]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c898:	6011      	str	r1, [r2, #0]
 800c89a:	6812      	ldr	r2, [r2, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d010      	beq.n	800c8c2 <ai_platform_inputs_get+0x1da>
 800c8a0:	e7fe      	b.n	800c8a0 <ai_platform_inputs_get+0x1b8>
 800c8a2:	4a45      	ldr	r2, [pc, #276]	; (800c9b8 <ai_platform_inputs_get+0x2d0>)
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c8aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1fb      	bne.n	800c8aa <ai_platform_inputs_get+0x1c2>
 800c8b2:	493f      	ldr	r1, [pc, #252]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c8b4:	4b3f      	ldr	r3, [pc, #252]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c8b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c8ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d113      	bne.n	800c8ea <ai_platform_inputs_get+0x202>
 800c8c2:	f7ff fd33 	bl	800c32c <_ai_platform_release_crc>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	b005      	add	sp, #20
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	4a37      	ldr	r2, [pc, #220]	; (800c9ac <ai_platform_inputs_get+0x2c4>)
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	6093      	str	r3, [r2, #8]
 800c8d4:	6893      	ldr	r3, [r2, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1fc      	bne.n	800c8d4 <ai_platform_inputs_get+0x1ec>
 800c8da:	4b35      	ldr	r3, [pc, #212]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	4b35      	ldr	r3, [pc, #212]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	f43f af3b 	beq.w	800c75e <ai_platform_inputs_get+0x76>
 800c8e8:	e7fe      	b.n	800c8e8 <ai_platform_inputs_get+0x200>
 800c8ea:	e7fe      	b.n	800c8ea <ai_platform_inputs_get+0x202>
 800c8ec:	4a32      	ldr	r2, [pc, #200]	; (800c9b8 <ai_platform_inputs_get+0x2d0>)
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c8f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1fb      	bne.n	800c8f4 <ai_platform_inputs_get+0x20c>
 800c8fc:	4b2c      	ldr	r3, [pc, #176]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c8fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c902:	4b2c      	ldr	r3, [pc, #176]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c904:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c908:	429a      	cmp	r2, r3
 800c90a:	f43f af28 	beq.w	800c75e <ai_platform_inputs_get+0x76>
 800c90e:	e7fe      	b.n	800c90e <ai_platform_inputs_get+0x226>
 800c910:	2400      	movs	r4, #0
 800c912:	2218      	movs	r2, #24
 800c914:	2111      	movs	r1, #17
 800c916:	f109 0010 	add.w	r0, r9, #16
 800c91a:	f001 f97d 	bl	800dc18 <core_set_error>
 800c91e:	4620      	mov	r0, r4
 800c920:	9b02      	ldr	r3, [sp, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0d0      	beq.n	800c8c8 <ai_platform_inputs_get+0x1e0>
 800c926:	801c      	strh	r4, [r3, #0]
 800c928:	b005      	add	sp, #20
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c932:	2c00      	cmp	r4, #0
 800c934:	d0ec      	beq.n	800c910 <ai_platform_inputs_get+0x228>
 800c936:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c93a:	6858      	ldr	r0, [r3, #4]
 800c93c:	e7f0      	b.n	800c920 <ai_platform_inputs_get+0x238>
 800c93e:	4a1e      	ldr	r2, [pc, #120]	; (800c9b8 <ai_platform_inputs_get+0x2d0>)
 800c940:	2301      	movs	r3, #1
 800c942:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c946:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1fb      	bne.n	800c946 <ai_platform_inputs_get+0x25e>
 800c94e:	4918      	ldr	r1, [pc, #96]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c950:	4b18      	ldr	r3, [pc, #96]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c952:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c956:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d0b1      	beq.n	800c8c2 <ai_platform_inputs_get+0x1da>
 800c95e:	e7fe      	b.n	800c95e <ai_platform_inputs_get+0x276>
 800c960:	4a15      	ldr	r2, [pc, #84]	; (800c9b8 <ai_platform_inputs_get+0x2d0>)
 800c962:	2301      	movs	r3, #1
 800c964:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c968:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1fb      	bne.n	800c968 <ai_platform_inputs_get+0x280>
 800c970:	4b0f      	ldr	r3, [pc, #60]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c972:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c976:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c978:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c97c:	429a      	cmp	r2, r3
 800c97e:	f43f aeee 	beq.w	800c75e <ai_platform_inputs_get+0x76>
 800c982:	e7fe      	b.n	800c982 <ai_platform_inputs_get+0x29a>
 800c984:	4a09      	ldr	r2, [pc, #36]	; (800c9ac <ai_platform_inputs_get+0x2c4>)
 800c986:	2301      	movs	r3, #1
 800c988:	6093      	str	r3, [r2, #8]
 800c98a:	6893      	ldr	r3, [r2, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1fc      	bne.n	800c98a <ai_platform_inputs_get+0x2a2>
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <ai_platform_inputs_get+0x2c8>)
 800c992:	6013      	str	r3, [r2, #0]
 800c994:	4b07      	ldr	r3, [pc, #28]	; (800c9b4 <ai_platform_inputs_get+0x2cc>)
 800c996:	6812      	ldr	r2, [r2, #0]
 800c998:	429a      	cmp	r2, r3
 800c99a:	f43f aee0 	beq.w	800c75e <ai_platform_inputs_get+0x76>
 800c99e:	e7fe      	b.n	800c99e <ai_platform_inputs_get+0x2b6>
 800c9a0:	a1c00100 	.word	0xa1c00100
 800c9a4:	e0042000 	.word	0xe0042000
 800c9a8:	5c001000 	.word	0x5c001000
 800c9ac:	40023000 	.word	0x40023000
 800c9b0:	f407a5c2 	.word	0xf407a5c2
 800c9b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c9b8:	58024000 	.word	0x58024000
 800c9bc:	4a0d      	ldr	r2, [pc, #52]	; (800c9f4 <ai_platform_inputs_get+0x30c>)
 800c9be:	2301      	movs	r3, #1
 800c9c0:	6093      	str	r3, [r2, #8]
 800c9c2:	6893      	ldr	r3, [r2, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1fc      	bne.n	800c9c2 <ai_platform_inputs_get+0x2da>
 800c9c8:	490b      	ldr	r1, [pc, #44]	; (800c9f8 <ai_platform_inputs_get+0x310>)
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <ai_platform_inputs_get+0x314>)
 800c9cc:	6011      	str	r1, [r2, #0]
 800c9ce:	6812      	ldr	r2, [r2, #0]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	f43f af76 	beq.w	800c8c2 <ai_platform_inputs_get+0x1da>
 800c9d6:	e7fe      	b.n	800c9d6 <ai_platform_inputs_get+0x2ee>
 800c9d8:	4a06      	ldr	r2, [pc, #24]	; (800c9f4 <ai_platform_inputs_get+0x30c>)
 800c9da:	2301      	movs	r3, #1
 800c9dc:	6093      	str	r3, [r2, #8]
 800c9de:	6893      	ldr	r3, [r2, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1fc      	bne.n	800c9de <ai_platform_inputs_get+0x2f6>
 800c9e4:	4b04      	ldr	r3, [pc, #16]	; (800c9f8 <ai_platform_inputs_get+0x310>)
 800c9e6:	6013      	str	r3, [r2, #0]
 800c9e8:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <ai_platform_inputs_get+0x314>)
 800c9ea:	6812      	ldr	r2, [r2, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	f43f aeb6 	beq.w	800c75e <ai_platform_inputs_get+0x76>
 800c9f2:	e7fe      	b.n	800c9f2 <ai_platform_inputs_get+0x30a>
 800c9f4:	40023000 	.word	0x40023000
 800c9f8:	f407a5c2 	.word	0xf407a5c2
 800c9fc:	b5e8b5cd 	.word	0xb5e8b5cd

0800ca00 <ai_platform_outputs_get>:
 800ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca04:	b085      	sub	sp, #20
 800ca06:	9102      	str	r1, [sp, #8]
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f000 808f 	beq.w	800cb2c <ai_platform_outputs_get+0x12c>
 800ca0e:	4ba8      	ldr	r3, [pc, #672]	; (800ccb0 <ai_platform_outputs_get+0x2b0>)
 800ca10:	4681      	mov	r9, r0
 800ca12:	6802      	ldr	r2, [r0, #0]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	f040 8089 	bne.w	800cb2c <ai_platform_outputs_get+0x12c>
 800ca1a:	f7ff fc85 	bl	800c328 <_ai_platform_acquire_crc>
 800ca1e:	4ba5      	ldr	r3, [pc, #660]	; (800ccb4 <ai_platform_outputs_get+0x2b4>)
 800ca20:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca2a:	189a      	adds	r2, r3, r2
 800ca2c:	2a01      	cmp	r2, #1
 800ca2e:	f240 80d6 	bls.w	800cbde <ai_platform_outputs_get+0x1de>
 800ca32:	f240 4249 	movw	r2, #1097	; 0x449
 800ca36:	4293      	cmp	r3, r2
 800ca38:	f000 80d1 	beq.w	800cbde <ai_platform_outputs_get+0x1de>
 800ca3c:	4a9e      	ldr	r2, [pc, #632]	; (800ccb8 <ai_platform_outputs_get+0x2b8>)
 800ca3e:	6813      	ldr	r3, [r2, #0]
 800ca40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca44:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ca48:	f000 80d8 	beq.w	800cbfc <ai_platform_outputs_get+0x1fc>
 800ca4c:	6813      	ldr	r3, [r2, #0]
 800ca4e:	f240 4183 	movw	r1, #1155	; 0x483
 800ca52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca56:	428b      	cmp	r3, r1
 800ca58:	f000 8109 	beq.w	800cc6e <ai_platform_outputs_get+0x26e>
 800ca5c:	6813      	ldr	r3, [r2, #0]
 800ca5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca62:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ca66:	f000 813f 	beq.w	800cce8 <ai_platform_outputs_get+0x2e8>
 800ca6a:	6813      	ldr	r3, [r2, #0]
 800ca6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 810e 	beq.w	800cc92 <ai_platform_outputs_get+0x292>
 800ca76:	f7ff fc59 	bl	800c32c <_ai_platform_release_crc>
 800ca7a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	f240 80db 	bls.w	800cc3a <ai_platform_outputs_get+0x23a>
 800ca84:	2100      	movs	r1, #0
 800ca86:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800ca8a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca8e:	460d      	mov	r5, r1
 800ca90:	4689      	mov	r9, r1
 800ca92:	e016      	b.n	800cac2 <ai_platform_outputs_get+0xc2>
 800ca94:	9a01      	ldr	r2, [sp, #4]
 800ca96:	2301      	movs	r3, #1
 800ca98:	f848 3002 	str.w	r3, [r8, r2]
 800ca9c:	69b2      	ldr	r2, [r6, #24]
 800ca9e:	f04f 0301 	mov.w	r3, #1
 800caa2:	6856      	ldr	r6, [r2, #4]
 800caa4:	3501      	adds	r5, #1
 800caa6:	f109 091c 	add.w	r9, r9, #28
 800caaa:	7523      	strb	r3, [r4, #20]
 800caac:	2300      	movs	r3, #0
 800caae:	6962      	ldr	r2, [r4, #20]
 800cab0:	60a7      	str	r7, [r4, #8]
 800cab2:	f36b 221f 	bfi	r2, fp, #8, #24
 800cab6:	6126      	str	r6, [r4, #16]
 800cab8:	61a1      	str	r1, [r4, #24]
 800caba:	60e3      	str	r3, [r4, #12]
 800cabc:	6162      	str	r2, [r4, #20]
 800cabe:	e9c4 0c00 	strd	r0, ip, [r4]
 800cac2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cac6:	b2ac      	uxth	r4, r5
 800cac8:	42ab      	cmp	r3, r5
 800caca:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	f240 80a6 	bls.w	800cc20 <ai_platform_outputs_get+0x220>
 800cad4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 80a1 	beq.w	800cc20 <ai_platform_outputs_get+0x220>
 800cade:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800cae2:	2e00      	cmp	r6, #0
 800cae4:	f000 809c 	beq.w	800cc20 <ai_platform_outputs_get+0x220>
 800cae8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800caec:	69b2      	ldr	r2, [r6, #24]
 800caee:	68f1      	ldr	r1, [r6, #12]
 800caf0:	6810      	ldr	r0, [r2, #0]
 800caf2:	9100      	str	r1, [sp, #0]
 800caf4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800caf8:	68b3      	ldr	r3, [r6, #8]
 800cafa:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800cafe:	444c      	add	r4, r9
 800cb00:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800cb04:	f002 f82a 	bl	800eb5c <ai_array_to_buffer_fmt>
 800cb08:	69b2      	ldr	r2, [r6, #24]
 800cb0a:	9900      	ldr	r1, [sp, #0]
 800cb0c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800cb10:	2f00      	cmp	r7, #0
 800cb12:	d0c4      	beq.n	800ca9e <ai_platform_outputs_get+0x9e>
 800cb14:	2200      	movs	r2, #0
 800cb16:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800cb1a:	6832      	ldr	r2, [r6, #0]
 800cb1c:	607a      	str	r2, [r7, #4]
 800cb1e:	b112      	cbz	r2, 800cb26 <ai_platform_outputs_get+0x126>
 800cb20:	8852      	ldrh	r2, [r2, #2]
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	d1b6      	bne.n	800ca94 <ai_platform_outputs_get+0x94>
 800cb26:	69b2      	ldr	r2, [r6, #24]
 800cb28:	2700      	movs	r7, #0
 800cb2a:	e7b8      	b.n	800ca9e <ai_platform_outputs_get+0x9e>
 800cb2c:	f7ff fbfc 	bl	800c328 <_ai_platform_acquire_crc>
 800cb30:	4b60      	ldr	r3, [pc, #384]	; (800ccb4 <ai_platform_outputs_get+0x2b4>)
 800cb32:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb3c:	185a      	adds	r2, r3, r1
 800cb3e:	2a01      	cmp	r2, #1
 800cb40:	d92a      	bls.n	800cb98 <ai_platform_outputs_get+0x198>
 800cb42:	f240 4249 	movw	r2, #1097	; 0x449
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d026      	beq.n	800cb98 <ai_platform_outputs_get+0x198>
 800cb4a:	4a5b      	ldr	r2, [pc, #364]	; (800ccb8 <ai_platform_outputs_get+0x2b8>)
 800cb4c:	6813      	ldr	r3, [r2, #0]
 800cb4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cb56:	d02c      	beq.n	800cbb2 <ai_platform_outputs_get+0x1b2>
 800cb58:	6813      	ldr	r3, [r2, #0]
 800cb5a:	f240 4183 	movw	r1, #1155	; 0x483
 800cb5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb62:	428b      	cmp	r3, r1
 800cb64:	d072      	beq.n	800cc4c <ai_platform_outputs_get+0x24c>
 800cb66:	6813      	ldr	r3, [r2, #0]
 800cb68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb6c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cb70:	f000 80ac 	beq.w	800cccc <ai_platform_outputs_get+0x2cc>
 800cb74:	6813      	ldr	r3, [r2, #0]
 800cb76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d129      	bne.n	800cbd2 <ai_platform_outputs_get+0x1d2>
 800cb7e:	4a4f      	ldr	r2, [pc, #316]	; (800ccbc <ai_platform_outputs_get+0x2bc>)
 800cb80:	2301      	movs	r3, #1
 800cb82:	6093      	str	r3, [r2, #8]
 800cb84:	6893      	ldr	r3, [r2, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1fc      	bne.n	800cb84 <ai_platform_outputs_get+0x184>
 800cb8a:	494d      	ldr	r1, [pc, #308]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cb8c:	4b4d      	ldr	r3, [pc, #308]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cb8e:	6011      	str	r1, [r2, #0]
 800cb90:	6812      	ldr	r2, [r2, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d01d      	beq.n	800cbd2 <ai_platform_outputs_get+0x1d2>
 800cb96:	e7fe      	b.n	800cb96 <ai_platform_outputs_get+0x196>
 800cb98:	4a48      	ldr	r2, [pc, #288]	; (800ccbc <ai_platform_outputs_get+0x2bc>)
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	6093      	str	r3, [r2, #8]
 800cb9e:	6893      	ldr	r3, [r2, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1fc      	bne.n	800cb9e <ai_platform_outputs_get+0x19e>
 800cba4:	4946      	ldr	r1, [pc, #280]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cba6:	4b47      	ldr	r3, [pc, #284]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cba8:	6011      	str	r1, [r2, #0]
 800cbaa:	6812      	ldr	r2, [r2, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d010      	beq.n	800cbd2 <ai_platform_outputs_get+0x1d2>
 800cbb0:	e7fe      	b.n	800cbb0 <ai_platform_outputs_get+0x1b0>
 800cbb2:	4a45      	ldr	r2, [pc, #276]	; (800ccc8 <ai_platform_outputs_get+0x2c8>)
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cbba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1fb      	bne.n	800cbba <ai_platform_outputs_get+0x1ba>
 800cbc2:	493f      	ldr	r1, [pc, #252]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cbc4:	4b3f      	ldr	r3, [pc, #252]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cbc6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cbca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d113      	bne.n	800cbfa <ai_platform_outputs_get+0x1fa>
 800cbd2:	f7ff fbab 	bl	800c32c <_ai_platform_release_crc>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	b005      	add	sp, #20
 800cbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbde:	4a37      	ldr	r2, [pc, #220]	; (800ccbc <ai_platform_outputs_get+0x2bc>)
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	6093      	str	r3, [r2, #8]
 800cbe4:	6893      	ldr	r3, [r2, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1fc      	bne.n	800cbe4 <ai_platform_outputs_get+0x1e4>
 800cbea:	4b35      	ldr	r3, [pc, #212]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	4b35      	ldr	r3, [pc, #212]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cbf0:	6812      	ldr	r2, [r2, #0]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	f43f af3f 	beq.w	800ca76 <ai_platform_outputs_get+0x76>
 800cbf8:	e7fe      	b.n	800cbf8 <ai_platform_outputs_get+0x1f8>
 800cbfa:	e7fe      	b.n	800cbfa <ai_platform_outputs_get+0x1fa>
 800cbfc:	4a32      	ldr	r2, [pc, #200]	; (800ccc8 <ai_platform_outputs_get+0x2c8>)
 800cbfe:	2301      	movs	r3, #1
 800cc00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1fb      	bne.n	800cc04 <ai_platform_outputs_get+0x204>
 800cc0c:	4b2c      	ldr	r3, [pc, #176]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cc0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cc12:	4b2c      	ldr	r3, [pc, #176]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cc14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	f43f af2c 	beq.w	800ca76 <ai_platform_outputs_get+0x76>
 800cc1e:	e7fe      	b.n	800cc1e <ai_platform_outputs_get+0x21e>
 800cc20:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cc24:	b14c      	cbz	r4, 800cc3a <ai_platform_outputs_get+0x23a>
 800cc26:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cc2a:	6858      	ldr	r0, [r3, #4]
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0d2      	beq.n	800cbd8 <ai_platform_outputs_get+0x1d8>
 800cc32:	801c      	strh	r4, [r3, #0]
 800cc34:	b005      	add	sp, #20
 800cc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3a:	2400      	movs	r4, #0
 800cc3c:	2218      	movs	r2, #24
 800cc3e:	2111      	movs	r1, #17
 800cc40:	f109 0010 	add.w	r0, r9, #16
 800cc44:	f000 ffe8 	bl	800dc18 <core_set_error>
 800cc48:	4620      	mov	r0, r4
 800cc4a:	e7ef      	b.n	800cc2c <ai_platform_outputs_get+0x22c>
 800cc4c:	4a1e      	ldr	r2, [pc, #120]	; (800ccc8 <ai_platform_outputs_get+0x2c8>)
 800cc4e:	2301      	movs	r3, #1
 800cc50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1fb      	bne.n	800cc54 <ai_platform_outputs_get+0x254>
 800cc5c:	4918      	ldr	r1, [pc, #96]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cc5e:	4b19      	ldr	r3, [pc, #100]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cc60:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cc64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d0b2      	beq.n	800cbd2 <ai_platform_outputs_get+0x1d2>
 800cc6c:	e7fe      	b.n	800cc6c <ai_platform_outputs_get+0x26c>
 800cc6e:	4a16      	ldr	r2, [pc, #88]	; (800ccc8 <ai_platform_outputs_get+0x2c8>)
 800cc70:	2301      	movs	r3, #1
 800cc72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1fb      	bne.n	800cc76 <ai_platform_outputs_get+0x276>
 800cc7e:	4b10      	ldr	r3, [pc, #64]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cc80:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cc84:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cc86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	f43f aef3 	beq.w	800ca76 <ai_platform_outputs_get+0x76>
 800cc90:	e7fe      	b.n	800cc90 <ai_platform_outputs_get+0x290>
 800cc92:	4a0a      	ldr	r2, [pc, #40]	; (800ccbc <ai_platform_outputs_get+0x2bc>)
 800cc94:	2301      	movs	r3, #1
 800cc96:	6093      	str	r3, [r2, #8]
 800cc98:	6893      	ldr	r3, [r2, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1fc      	bne.n	800cc98 <ai_platform_outputs_get+0x298>
 800cc9e:	4b08      	ldr	r3, [pc, #32]	; (800ccc0 <ai_platform_outputs_get+0x2c0>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <ai_platform_outputs_get+0x2c4>)
 800cca4:	6812      	ldr	r2, [r2, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	f43f aee5 	beq.w	800ca76 <ai_platform_outputs_get+0x76>
 800ccac:	e7fe      	b.n	800ccac <ai_platform_outputs_get+0x2ac>
 800ccae:	bf00      	nop
 800ccb0:	a1c00100 	.word	0xa1c00100
 800ccb4:	e0042000 	.word	0xe0042000
 800ccb8:	5c001000 	.word	0x5c001000
 800ccbc:	40023000 	.word	0x40023000
 800ccc0:	f407a5c2 	.word	0xf407a5c2
 800ccc4:	b5e8b5cd 	.word	0xb5e8b5cd
 800ccc8:	58024000 	.word	0x58024000
 800cccc:	4a0d      	ldr	r2, [pc, #52]	; (800cd04 <ai_platform_outputs_get+0x304>)
 800ccce:	2301      	movs	r3, #1
 800ccd0:	6093      	str	r3, [r2, #8]
 800ccd2:	6893      	ldr	r3, [r2, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1fc      	bne.n	800ccd2 <ai_platform_outputs_get+0x2d2>
 800ccd8:	490b      	ldr	r1, [pc, #44]	; (800cd08 <ai_platform_outputs_get+0x308>)
 800ccda:	4b0c      	ldr	r3, [pc, #48]	; (800cd0c <ai_platform_outputs_get+0x30c>)
 800ccdc:	6011      	str	r1, [r2, #0]
 800ccde:	6812      	ldr	r2, [r2, #0]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	f43f af76 	beq.w	800cbd2 <ai_platform_outputs_get+0x1d2>
 800cce6:	e7fe      	b.n	800cce6 <ai_platform_outputs_get+0x2e6>
 800cce8:	4a06      	ldr	r2, [pc, #24]	; (800cd04 <ai_platform_outputs_get+0x304>)
 800ccea:	2301      	movs	r3, #1
 800ccec:	6093      	str	r3, [r2, #8]
 800ccee:	6893      	ldr	r3, [r2, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1fc      	bne.n	800ccee <ai_platform_outputs_get+0x2ee>
 800ccf4:	4b04      	ldr	r3, [pc, #16]	; (800cd08 <ai_platform_outputs_get+0x308>)
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	4b04      	ldr	r3, [pc, #16]	; (800cd0c <ai_platform_outputs_get+0x30c>)
 800ccfa:	6812      	ldr	r2, [r2, #0]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f43f aeba 	beq.w	800ca76 <ai_platform_outputs_get+0x76>
 800cd02:	e7fe      	b.n	800cd02 <ai_platform_outputs_get+0x302>
 800cd04:	40023000 	.word	0x40023000
 800cd08:	f407a5c2 	.word	0xf407a5c2
 800cd0c:	b5e8b5cd 	.word	0xb5e8b5cd

0800cd10 <ai_platform_network_create>:
 800cd10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd14:	b083      	sub	sp, #12
 800cd16:	4604      	mov	r4, r0
 800cd18:	4615      	mov	r5, r2
 800cd1a:	461e      	mov	r6, r3
 800cd1c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800cd20:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cd24:	f7ff fb00 	bl	800c328 <_ai_platform_acquire_crc>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f000 80bd 	beq.w	800cea8 <ai_platform_network_create+0x198>
 800cd2e:	4ba5      	ldr	r3, [pc, #660]	; (800cfc4 <ai_platform_network_create+0x2b4>)
 800cd30:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800cd34:	4601      	mov	r1, r0
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd3c:	eb03 020c 	add.w	r2, r3, ip
 800cd40:	2a01      	cmp	r2, #1
 800cd42:	f240 80a8 	bls.w	800ce96 <ai_platform_network_create+0x186>
 800cd46:	f240 4249 	movw	r2, #1097	; 0x449
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	f000 80a3 	beq.w	800ce96 <ai_platform_network_create+0x186>
 800cd50:	4a9d      	ldr	r2, [pc, #628]	; (800cfc8 <ai_platform_network_create+0x2b8>)
 800cd52:	6813      	ldr	r3, [r2, #0]
 800cd54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd58:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cd5c:	f000 80b9 	beq.w	800ced2 <ai_platform_network_create+0x1c2>
 800cd60:	6813      	ldr	r3, [r2, #0]
 800cd62:	f240 4c83 	movw	ip, #1155	; 0x483
 800cd66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd6a:	4563      	cmp	r3, ip
 800cd6c:	f000 80a1 	beq.w	800ceb2 <ai_platform_network_create+0x1a2>
 800cd70:	6813      	ldr	r3, [r2, #0]
 800cd72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd76:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cd7a:	f000 8153 	beq.w	800d024 <ai_platform_network_create+0x314>
 800cd7e:	6813      	ldr	r3, [r2, #0]
 800cd80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 808d 	bne.w	800cea4 <ai_platform_network_create+0x194>
 800cd8a:	4a90      	ldr	r2, [pc, #576]	; (800cfcc <ai_platform_network_create+0x2bc>)
 800cd8c:	2318      	movs	r3, #24
 800cd8e:	6093      	str	r3, [r2, #8]
 800cd90:	6893      	ldr	r3, [r2, #8]
 800cd92:	2b18      	cmp	r3, #24
 800cd94:	f040 8086 	bne.w	800cea4 <ai_platform_network_create+0x194>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6093      	str	r3, [r2, #8]
 800cd9c:	6893      	ldr	r3, [r2, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1fc      	bne.n	800cd9c <ai_platform_network_create+0x8c>
 800cda2:	4608      	mov	r0, r1
 800cda4:	f7ff fac2 	bl	800c32c <_ai_platform_release_crc>
 800cda8:	f7ff fabe 	bl	800c328 <_ai_platform_acquire_crc>
 800cdac:	4b85      	ldr	r3, [pc, #532]	; (800cfc4 <ai_platform_network_create+0x2b4>)
 800cdae:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdb8:	189a      	adds	r2, r3, r2
 800cdba:	2a01      	cmp	r2, #1
 800cdbc:	f240 809f 	bls.w	800cefe <ai_platform_network_create+0x1ee>
 800cdc0:	f240 4249 	movw	r2, #1097	; 0x449
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	f000 809a 	beq.w	800cefe <ai_platform_network_create+0x1ee>
 800cdca:	4a7f      	ldr	r2, [pc, #508]	; (800cfc8 <ai_platform_network_create+0x2b8>)
 800cdcc:	6813      	ldr	r3, [r2, #0]
 800cdce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdd2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cdd6:	f000 80a0 	beq.w	800cf1a <ai_platform_network_create+0x20a>
 800cdda:	6813      	ldr	r3, [r2, #0]
 800cddc:	f240 4183 	movw	r1, #1155	; 0x483
 800cde0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cde4:	428b      	cmp	r3, r1
 800cde6:	f000 80bf 	beq.w	800cf68 <ai_platform_network_create+0x258>
 800cdea:	6813      	ldr	r3, [r2, #0]
 800cdec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdf0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cdf4:	f000 8123 	beq.w	800d03e <ai_platform_network_create+0x32e>
 800cdf8:	6813      	ldr	r3, [r2, #0]
 800cdfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f000 80c4 	beq.w	800cf8c <ai_platform_network_create+0x27c>
 800ce04:	f7ff fa92 	bl	800c32c <_ai_platform_release_crc>
 800ce08:	2c00      	cmp	r4, #0
 800ce0a:	f000 80aa 	beq.w	800cf62 <ai_platform_network_create+0x252>
 800ce0e:	4b70      	ldr	r3, [pc, #448]	; (800cfd0 <ai_platform_network_create+0x2c0>)
 800ce10:	602b      	str	r3, [r5, #0]
 800ce12:	6025      	str	r5, [r4, #0]
 800ce14:	f000 fef8 	bl	800dc08 <core_init>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f000 8090 	beq.w	800cf3e <ai_platform_network_create+0x22e>
 800ce1e:	f7ff fa83 	bl	800c328 <_ai_platform_acquire_crc>
 800ce22:	4b68      	ldr	r3, [pc, #416]	; (800cfc4 <ai_platform_network_create+0x2b4>)
 800ce24:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce2e:	185a      	adds	r2, r3, r1
 800ce30:	2a01      	cmp	r2, #1
 800ce32:	f240 80b9 	bls.w	800cfa8 <ai_platform_network_create+0x298>
 800ce36:	f240 4249 	movw	r2, #1097	; 0x449
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	f000 80b4 	beq.w	800cfa8 <ai_platform_network_create+0x298>
 800ce40:	4a61      	ldr	r2, [pc, #388]	; (800cfc8 <ai_platform_network_create+0x2b8>)
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce48:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ce4c:	f000 80c8 	beq.w	800cfe0 <ai_platform_network_create+0x2d0>
 800ce50:	6813      	ldr	r3, [r2, #0]
 800ce52:	f240 4183 	movw	r1, #1155	; 0x483
 800ce56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce5a:	428b      	cmp	r3, r1
 800ce5c:	f000 8107 	beq.w	800d06e <ai_platform_network_create+0x35e>
 800ce60:	6813      	ldr	r3, [r2, #0]
 800ce62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce66:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ce6a:	f000 8111 	beq.w	800d090 <ai_platform_network_create+0x380>
 800ce6e:	6813      	ldr	r3, [r2, #0]
 800ce70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f040 80c3 	bne.w	800d000 <ai_platform_network_create+0x2f0>
 800ce7a:	4b54      	ldr	r3, [pc, #336]	; (800cfcc <ai_platform_network_create+0x2bc>)
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	609a      	str	r2, [r3, #8]
 800ce80:	689a      	ldr	r2, [r3, #8]
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	d1fc      	bne.n	800ce80 <ai_platform_network_create+0x170>
 800ce86:	4a53      	ldr	r2, [pc, #332]	; (800cfd4 <ai_platform_network_create+0x2c4>)
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	4b52      	ldr	r3, [pc, #328]	; (800cfd8 <ai_platform_network_create+0x2c8>)
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	f000 80b6 	beq.w	800d000 <ai_platform_network_create+0x2f0>
 800ce94:	e7fe      	b.n	800ce94 <ai_platform_network_create+0x184>
 800ce96:	4b4d      	ldr	r3, [pc, #308]	; (800cfcc <ai_platform_network_create+0x2bc>)
 800ce98:	2218      	movs	r2, #24
 800ce9a:	609a      	str	r2, [r3, #8]
 800ce9c:	689a      	ldr	r2, [r3, #8]
 800ce9e:	2a18      	cmp	r2, #24
 800cea0:	d027      	beq.n	800cef2 <ai_platform_network_create+0x1e2>
 800cea2:	4608      	mov	r0, r1
 800cea4:	f7ff fa42 	bl	800c32c <_ai_platform_release_crc>
 800cea8:	f244 1033 	movw	r0, #16691	; 0x4133
 800ceac:	b003      	add	sp, #12
 800ceae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb2:	4a4a      	ldr	r2, [pc, #296]	; (800cfdc <ai_platform_network_create+0x2cc>)
 800ceb4:	2318      	movs	r3, #24
 800ceb6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ceba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cebe:	2b18      	cmp	r3, #24
 800cec0:	d1f0      	bne.n	800cea4 <ai_platform_network_create+0x194>
 800cec2:	2301      	movs	r3, #1
 800cec4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cec8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1fb      	bne.n	800cec8 <ai_platform_network_create+0x1b8>
 800ced0:	e767      	b.n	800cda2 <ai_platform_network_create+0x92>
 800ced2:	4a42      	ldr	r2, [pc, #264]	; (800cfdc <ai_platform_network_create+0x2cc>)
 800ced4:	2318      	movs	r3, #24
 800ced6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ceda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cede:	2b18      	cmp	r3, #24
 800cee0:	d1e0      	bne.n	800cea4 <ai_platform_network_create+0x194>
 800cee2:	2301      	movs	r3, #1
 800cee4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cee8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1fb      	bne.n	800cee8 <ai_platform_network_create+0x1d8>
 800cef0:	e757      	b.n	800cda2 <ai_platform_network_create+0x92>
 800cef2:	2201      	movs	r2, #1
 800cef4:	609a      	str	r2, [r3, #8]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	2a00      	cmp	r2, #0
 800cefa:	d1fc      	bne.n	800cef6 <ai_platform_network_create+0x1e6>
 800cefc:	e751      	b.n	800cda2 <ai_platform_network_create+0x92>
 800cefe:	4a33      	ldr	r2, [pc, #204]	; (800cfcc <ai_platform_network_create+0x2bc>)
 800cf00:	2301      	movs	r3, #1
 800cf02:	6093      	str	r3, [r2, #8]
 800cf04:	6891      	ldr	r1, [r2, #8]
 800cf06:	2900      	cmp	r1, #0
 800cf08:	d1fc      	bne.n	800cf04 <ai_platform_network_create+0x1f4>
 800cf0a:	4b32      	ldr	r3, [pc, #200]	; (800cfd4 <ai_platform_network_create+0x2c4>)
 800cf0c:	6013      	str	r3, [r2, #0]
 800cf0e:	4b32      	ldr	r3, [pc, #200]	; (800cfd8 <ai_platform_network_create+0x2c8>)
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	f43f af76 	beq.w	800ce04 <ai_platform_network_create+0xf4>
 800cf18:	e7fe      	b.n	800cf18 <ai_platform_network_create+0x208>
 800cf1a:	4a30      	ldr	r2, [pc, #192]	; (800cfdc <ai_platform_network_create+0x2cc>)
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1fb      	bne.n	800cf22 <ai_platform_network_create+0x212>
 800cf2a:	4b2a      	ldr	r3, [pc, #168]	; (800cfd4 <ai_platform_network_create+0x2c4>)
 800cf2c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cf30:	4b29      	ldr	r3, [pc, #164]	; (800cfd8 <ai_platform_network_create+0x2c8>)
 800cf32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf36:	429a      	cmp	r2, r3
 800cf38:	f43f af64 	beq.w	800ce04 <ai_platform_network_create+0xf4>
 800cf3c:	e7fe      	b.n	800cf3c <ai_platform_network_create+0x22c>
 800cf3e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800cf42:	2300      	movs	r3, #0
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	2410      	movs	r4, #16
 800cf48:	4642      	mov	r2, r8
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f001 fea9 	bl	800eca4 <ai_version_get>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2000      	movs	r0, #0
 800cf56:	64ab      	str	r3, [r5, #72]	; 0x48
 800cf58:	f369 0007 	bfi	r0, r9, #0, #8
 800cf5c:	f364 201f 	bfi	r0, r4, #8, #24
 800cf60:	e7a4      	b.n	800ceac <ai_platform_network_create+0x19c>
 800cf62:	f241 0010 	movw	r0, #4112	; 0x1010
 800cf66:	e7a1      	b.n	800ceac <ai_platform_network_create+0x19c>
 800cf68:	4a1c      	ldr	r2, [pc, #112]	; (800cfdc <ai_platform_network_create+0x2cc>)
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1fb      	bne.n	800cf70 <ai_platform_network_create+0x260>
 800cf78:	4b16      	ldr	r3, [pc, #88]	; (800cfd4 <ai_platform_network_create+0x2c4>)
 800cf7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cf7e:	4b16      	ldr	r3, [pc, #88]	; (800cfd8 <ai_platform_network_create+0x2c8>)
 800cf80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf84:	429a      	cmp	r2, r3
 800cf86:	f43f af3d 	beq.w	800ce04 <ai_platform_network_create+0xf4>
 800cf8a:	e7fe      	b.n	800cf8a <ai_platform_network_create+0x27a>
 800cf8c:	4a0f      	ldr	r2, [pc, #60]	; (800cfcc <ai_platform_network_create+0x2bc>)
 800cf8e:	2301      	movs	r3, #1
 800cf90:	6093      	str	r3, [r2, #8]
 800cf92:	6893      	ldr	r3, [r2, #8]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1fc      	bne.n	800cf92 <ai_platform_network_create+0x282>
 800cf98:	4b0e      	ldr	r3, [pc, #56]	; (800cfd4 <ai_platform_network_create+0x2c4>)
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	4b0e      	ldr	r3, [pc, #56]	; (800cfd8 <ai_platform_network_create+0x2c8>)
 800cf9e:	6812      	ldr	r2, [r2, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	f43f af2f 	beq.w	800ce04 <ai_platform_network_create+0xf4>
 800cfa6:	e7fe      	b.n	800cfa6 <ai_platform_network_create+0x296>
 800cfa8:	4a08      	ldr	r2, [pc, #32]	; (800cfcc <ai_platform_network_create+0x2bc>)
 800cfaa:	2301      	movs	r3, #1
 800cfac:	6093      	str	r3, [r2, #8]
 800cfae:	6893      	ldr	r3, [r2, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1fc      	bne.n	800cfae <ai_platform_network_create+0x29e>
 800cfb4:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <ai_platform_network_create+0x2c4>)
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <ai_platform_network_create+0x2c8>)
 800cfba:	6812      	ldr	r2, [r2, #0]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d01f      	beq.n	800d000 <ai_platform_network_create+0x2f0>
 800cfc0:	e7fe      	b.n	800cfc0 <ai_platform_network_create+0x2b0>
 800cfc2:	bf00      	nop
 800cfc4:	e0042000 	.word	0xe0042000
 800cfc8:	5c001000 	.word	0x5c001000
 800cfcc:	40023000 	.word	0x40023000
 800cfd0:	a1c00100 	.word	0xa1c00100
 800cfd4:	f407a5c2 	.word	0xf407a5c2
 800cfd8:	b5e8b5cd 	.word	0xb5e8b5cd
 800cfdc:	58024000 	.word	0x58024000
 800cfe0:	4a33      	ldr	r2, [pc, #204]	; (800d0b0 <ai_platform_network_create+0x3a0>)
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfe8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1fb      	bne.n	800cfe8 <ai_platform_network_create+0x2d8>
 800cff0:	4b30      	ldr	r3, [pc, #192]	; (800d0b4 <ai_platform_network_create+0x3a4>)
 800cff2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cff6:	4b30      	ldr	r3, [pc, #192]	; (800d0b8 <ai_platform_network_create+0x3a8>)
 800cff8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d12c      	bne.n	800d05a <ai_platform_network_create+0x34a>
 800d000:	f7ff f994 	bl	800c32c <_ai_platform_release_crc>
 800d004:	2200      	movs	r2, #0
 800d006:	4639      	mov	r1, r7
 800d008:	4630      	mov	r0, r6
 800d00a:	f001 fe4b 	bl	800eca4 <ai_version_get>
 800d00e:	4681      	mov	r9, r0
 800d010:	2200      	movs	r2, #0
 800d012:	2105      	movs	r1, #5
 800d014:	2001      	movs	r0, #1
 800d016:	f001 fe45 	bl	800eca4 <ai_version_get>
 800d01a:	4581      	cmp	r9, r0
 800d01c:	d01e      	beq.n	800d05c <ai_platform_network_create+0x34c>
 800d01e:	f04f 0901 	mov.w	r9, #1
 800d022:	e78e      	b.n	800cf42 <ai_platform_network_create+0x232>
 800d024:	4b25      	ldr	r3, [pc, #148]	; (800d0bc <ai_platform_network_create+0x3ac>)
 800d026:	2218      	movs	r2, #24
 800d028:	609a      	str	r2, [r3, #8]
 800d02a:	689a      	ldr	r2, [r3, #8]
 800d02c:	2a18      	cmp	r2, #24
 800d02e:	f47f af39 	bne.w	800cea4 <ai_platform_network_create+0x194>
 800d032:	2201      	movs	r2, #1
 800d034:	609a      	str	r2, [r3, #8]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d1fc      	bne.n	800d036 <ai_platform_network_create+0x326>
 800d03c:	e6b1      	b.n	800cda2 <ai_platform_network_create+0x92>
 800d03e:	4a1f      	ldr	r2, [pc, #124]	; (800d0bc <ai_platform_network_create+0x3ac>)
 800d040:	2301      	movs	r3, #1
 800d042:	6093      	str	r3, [r2, #8]
 800d044:	6893      	ldr	r3, [r2, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1fc      	bne.n	800d044 <ai_platform_network_create+0x334>
 800d04a:	4b1a      	ldr	r3, [pc, #104]	; (800d0b4 <ai_platform_network_create+0x3a4>)
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	4b1a      	ldr	r3, [pc, #104]	; (800d0b8 <ai_platform_network_create+0x3a8>)
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	f43f aed6 	beq.w	800ce04 <ai_platform_network_create+0xf4>
 800d058:	e7fe      	b.n	800d058 <ai_platform_network_create+0x348>
 800d05a:	e7fe      	b.n	800d05a <ai_platform_network_create+0x34a>
 800d05c:	4b18      	ldr	r3, [pc, #96]	; (800d0c0 <ai_platform_network_create+0x3b0>)
 800d05e:	a801      	add	r0, sp, #4
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	f000 fde5 	bl	800dc30 <ai_check_custom_types>
 800d066:	b300      	cbz	r0, 800d0aa <ai_platform_network_create+0x39a>
 800d068:	2400      	movs	r4, #0
 800d06a:	46a1      	mov	r9, r4
 800d06c:	e76c      	b.n	800cf48 <ai_platform_network_create+0x238>
 800d06e:	4b10      	ldr	r3, [pc, #64]	; (800d0b0 <ai_platform_network_create+0x3a0>)
 800d070:	2201      	movs	r2, #1
 800d072:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800d076:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800d07a:	2a00      	cmp	r2, #0
 800d07c:	d1fb      	bne.n	800d076 <ai_platform_network_create+0x366>
 800d07e:	4a0d      	ldr	r2, [pc, #52]	; (800d0b4 <ai_platform_network_create+0x3a4>)
 800d080:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800d084:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800d088:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <ai_platform_network_create+0x3a8>)
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d0b8      	beq.n	800d000 <ai_platform_network_create+0x2f0>
 800d08e:	e7fe      	b.n	800d08e <ai_platform_network_create+0x37e>
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <ai_platform_network_create+0x3ac>)
 800d092:	2201      	movs	r2, #1
 800d094:	609a      	str	r2, [r3, #8]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	2a00      	cmp	r2, #0
 800d09a:	d1fc      	bne.n	800d096 <ai_platform_network_create+0x386>
 800d09c:	4a05      	ldr	r2, [pc, #20]	; (800d0b4 <ai_platform_network_create+0x3a4>)
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <ai_platform_network_create+0x3a8>)
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d0ab      	beq.n	800d000 <ai_platform_network_create+0x2f0>
 800d0a8:	e7fe      	b.n	800d0a8 <ai_platform_network_create+0x398>
 800d0aa:	f04f 0902 	mov.w	r9, #2
 800d0ae:	e748      	b.n	800cf42 <ai_platform_network_create+0x232>
 800d0b0:	58024000 	.word	0x58024000
 800d0b4:	f407a5c2 	.word	0xf407a5c2
 800d0b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d0bc:	40023000 	.word	0x40023000
 800d0c0:	84048403 	.word	0x84048403

0800d0c4 <ai_platform_network_init>:
 800d0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d052      	beq.n	800d172 <ai_platform_network_init+0xae>
 800d0cc:	4bab      	ldr	r3, [pc, #684]	; (800d37c <ai_platform_network_init+0x2b8>)
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	6802      	ldr	r2, [r0, #0]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d14d      	bne.n	800d172 <ai_platform_network_init+0xae>
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	f7ff f926 	bl	800c328 <_ai_platform_acquire_crc>
 800d0dc:	4ba8      	ldr	r3, [pc, #672]	; (800d380 <ai_platform_network_init+0x2bc>)
 800d0de:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0e8:	189a      	adds	r2, r3, r2
 800d0ea:	2a01      	cmp	r2, #1
 800d0ec:	f240 809b 	bls.w	800d226 <ai_platform_network_init+0x162>
 800d0f0:	f240 4249 	movw	r2, #1097	; 0x449
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	f000 8096 	beq.w	800d226 <ai_platform_network_init+0x162>
 800d0fa:	4aa2      	ldr	r2, [pc, #648]	; (800d384 <ai_platform_network_init+0x2c0>)
 800d0fc:	6813      	ldr	r3, [r2, #0]
 800d0fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d102:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d106:	f000 809d 	beq.w	800d244 <ai_platform_network_init+0x180>
 800d10a:	6813      	ldr	r3, [r2, #0]
 800d10c:	f240 4183 	movw	r1, #1155	; 0x483
 800d110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d114:	428b      	cmp	r3, r1
 800d116:	f000 80e4 	beq.w	800d2e2 <ai_platform_network_init+0x21e>
 800d11a:	6813      	ldr	r3, [r2, #0]
 800d11c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d120:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d124:	f000 811b 	beq.w	800d35e <ai_platform_network_init+0x29a>
 800d128:	6813      	ldr	r3, [r2, #0]
 800d12a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 80f9 	beq.w	800d326 <ai_platform_network_init+0x262>
 800d134:	f7ff f8fa 	bl	800c32c <_ai_platform_release_crc>
 800d138:	2d00      	cmp	r5, #0
 800d13a:	f000 8147 	beq.w	800d3cc <ai_platform_network_init+0x308>
 800d13e:	4b92      	ldr	r3, [pc, #584]	; (800d388 <ai_platform_network_init+0x2c4>)
 800d140:	682a      	ldr	r2, [r5, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	f040 8090 	bne.w	800d268 <ai_platform_network_init+0x1a4>
 800d148:	692b      	ldr	r3, [r5, #16]
 800d14a:	89ae      	ldrh	r6, [r5, #12]
 800d14c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800d150:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800d154:	62a3      	str	r3, [r4, #40]	; 0x28
 800d156:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800d15a:	2303      	movs	r3, #3
 800d15c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d15e:	4626      	mov	r6, r4
 800d160:	4620      	mov	r0, r4
 800d162:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800d166:	60e3      	str	r3, [r4, #12]
 800d168:	f000 fd8a 	bl	800dc80 <ai_layers_init_all>
 800d16c:	4630      	mov	r0, r6
 800d16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d172:	f7ff f8d9 	bl	800c328 <_ai_platform_acquire_crc>
 800d176:	4b82      	ldr	r3, [pc, #520]	; (800d380 <ai_platform_network_init+0x2bc>)
 800d178:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d182:	185a      	adds	r2, r3, r1
 800d184:	2a01      	cmp	r2, #1
 800d186:	d92b      	bls.n	800d1e0 <ai_platform_network_init+0x11c>
 800d188:	f240 4249 	movw	r2, #1097	; 0x449
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d027      	beq.n	800d1e0 <ai_platform_network_init+0x11c>
 800d190:	4a7c      	ldr	r2, [pc, #496]	; (800d384 <ai_platform_network_init+0x2c0>)
 800d192:	6813      	ldr	r3, [r2, #0]
 800d194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d198:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d19c:	d02d      	beq.n	800d1fa <ai_platform_network_init+0x136>
 800d19e:	6813      	ldr	r3, [r2, #0]
 800d1a0:	f240 4183 	movw	r1, #1155	; 0x483
 800d1a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1a8:	428b      	cmp	r3, r1
 800d1aa:	f000 8089 	beq.w	800d2c0 <ai_platform_network_init+0x1fc>
 800d1ae:	6813      	ldr	r3, [r2, #0]
 800d1b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d1b8:	f000 80c3 	beq.w	800d342 <ai_platform_network_init+0x27e>
 800d1bc:	6813      	ldr	r3, [r2, #0]
 800d1be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d129      	bne.n	800d21a <ai_platform_network_init+0x156>
 800d1c6:	4a71      	ldr	r2, [pc, #452]	; (800d38c <ai_platform_network_init+0x2c8>)
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	6093      	str	r3, [r2, #8]
 800d1cc:	6893      	ldr	r3, [r2, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1fc      	bne.n	800d1cc <ai_platform_network_init+0x108>
 800d1d2:	496f      	ldr	r1, [pc, #444]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d1d4:	4b6f      	ldr	r3, [pc, #444]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d1d6:	6011      	str	r1, [r2, #0]
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d01d      	beq.n	800d21a <ai_platform_network_init+0x156>
 800d1de:	e7fe      	b.n	800d1de <ai_platform_network_init+0x11a>
 800d1e0:	4a6a      	ldr	r2, [pc, #424]	; (800d38c <ai_platform_network_init+0x2c8>)
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	6093      	str	r3, [r2, #8]
 800d1e6:	6893      	ldr	r3, [r2, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1fc      	bne.n	800d1e6 <ai_platform_network_init+0x122>
 800d1ec:	4968      	ldr	r1, [pc, #416]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d1ee:	4b69      	ldr	r3, [pc, #420]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d1f0:	6011      	str	r1, [r2, #0]
 800d1f2:	6812      	ldr	r2, [r2, #0]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d010      	beq.n	800d21a <ai_platform_network_init+0x156>
 800d1f8:	e7fe      	b.n	800d1f8 <ai_platform_network_init+0x134>
 800d1fa:	4a67      	ldr	r2, [pc, #412]	; (800d398 <ai_platform_network_init+0x2d4>)
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d202:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1fb      	bne.n	800d202 <ai_platform_network_init+0x13e>
 800d20a:	4961      	ldr	r1, [pc, #388]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d20c:	4b61      	ldr	r3, [pc, #388]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d20e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d212:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d216:	429a      	cmp	r2, r3
 800d218:	d113      	bne.n	800d242 <ai_platform_network_init+0x17e>
 800d21a:	2600      	movs	r6, #0
 800d21c:	f7ff f886 	bl	800c32c <_ai_platform_release_crc>
 800d220:	4630      	mov	r0, r6
 800d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d226:	4a59      	ldr	r2, [pc, #356]	; (800d38c <ai_platform_network_init+0x2c8>)
 800d228:	2301      	movs	r3, #1
 800d22a:	6093      	str	r3, [r2, #8]
 800d22c:	6893      	ldr	r3, [r2, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1fc      	bne.n	800d22c <ai_platform_network_init+0x168>
 800d232:	4b57      	ldr	r3, [pc, #348]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	4b57      	ldr	r3, [pc, #348]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d238:	6812      	ldr	r2, [r2, #0]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	f43f af7a 	beq.w	800d134 <ai_platform_network_init+0x70>
 800d240:	e7fe      	b.n	800d240 <ai_platform_network_init+0x17c>
 800d242:	e7fe      	b.n	800d242 <ai_platform_network_init+0x17e>
 800d244:	4a54      	ldr	r2, [pc, #336]	; (800d398 <ai_platform_network_init+0x2d4>)
 800d246:	2301      	movs	r3, #1
 800d248:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d24c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1fb      	bne.n	800d24c <ai_platform_network_init+0x188>
 800d254:	4b4e      	ldr	r3, [pc, #312]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d256:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d25a:	4b4e      	ldr	r3, [pc, #312]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d25c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d260:	429a      	cmp	r2, r3
 800d262:	f43f af67 	beq.w	800d134 <ai_platform_network_init+0x70>
 800d266:	e7fe      	b.n	800d266 <ai_platform_network_init+0x1a2>
 800d268:	2101      	movs	r1, #1
 800d26a:	4628      	mov	r0, r5
 800d26c:	f105 081c 	add.w	r8, r5, #28
 800d270:	686e      	ldr	r6, [r5, #4]
 800d272:	f7ff f80b 	bl	800c28c <ai_buffer_get_size>
 800d276:	4607      	mov	r7, r0
 800d278:	2101      	movs	r1, #1
 800d27a:	4640      	mov	r0, r8
 800d27c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800d280:	f7ff f804 	bl	800c28c <ai_buffer_get_size>
 800d284:	2f00      	cmp	r7, #0
 800d286:	d13e      	bne.n	800d306 <ai_platform_network_init+0x242>
 800d288:	2800      	cmp	r0, #0
 800d28a:	f000 808e 	beq.w	800d3aa <ai_platform_network_init+0x2e6>
 800d28e:	f1b9 0f00 	cmp.w	r9, #0
 800d292:	f000 8094 	beq.w	800d3be <ai_platform_network_init+0x2fa>
 800d296:	f04f 0c01 	mov.w	ip, #1
 800d29a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d29c:	2600      	movs	r6, #0
 800d29e:	83e7      	strh	r7, [r4, #30]
 800d2a0:	4563      	cmp	r3, ip
 800d2a2:	83a6      	strh	r6, [r4, #28]
 800d2a4:	d37a      	bcc.n	800d39c <ai_platform_network_init+0x2d8>
 800d2a6:	f1bc 0f00 	cmp.w	ip, #0
 800d2aa:	f000 809c 	beq.w	800d3e6 <ai_platform_network_init+0x322>
 800d2ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d2b0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d2b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d2b6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d2ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d2be:	e74c      	b.n	800d15a <ai_platform_network_init+0x96>
 800d2c0:	4a35      	ldr	r2, [pc, #212]	; (800d398 <ai_platform_network_init+0x2d4>)
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1fb      	bne.n	800d2c8 <ai_platform_network_init+0x204>
 800d2d0:	492f      	ldr	r1, [pc, #188]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d2d2:	4b30      	ldr	r3, [pc, #192]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d2d4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d2d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d09c      	beq.n	800d21a <ai_platform_network_init+0x156>
 800d2e0:	e7fe      	b.n	800d2e0 <ai_platform_network_init+0x21c>
 800d2e2:	4a2d      	ldr	r2, [pc, #180]	; (800d398 <ai_platform_network_init+0x2d4>)
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1fb      	bne.n	800d2ea <ai_platform_network_init+0x226>
 800d2f2:	4b27      	ldr	r3, [pc, #156]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d2f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d2f8:	4b26      	ldr	r3, [pc, #152]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d2fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2fe:	429a      	cmp	r2, r3
 800d300:	f43f af18 	beq.w	800d134 <ai_platform_network_init+0x70>
 800d304:	e7fe      	b.n	800d304 <ai_platform_network_init+0x240>
 800d306:	2800      	cmp	r0, #0
 800d308:	d153      	bne.n	800d3b2 <ai_platform_network_init+0x2ee>
 800d30a:	4680      	mov	r8, r0
 800d30c:	4684      	mov	ip, r0
 800d30e:	2e00      	cmp	r6, #0
 800d310:	d063      	beq.n	800d3da <ai_platform_network_init+0x316>
 800d312:	8be6      	ldrh	r6, [r4, #30]
 800d314:	2e00      	cmp	r6, #0
 800d316:	d168      	bne.n	800d3ea <ai_platform_network_init+0x326>
 800d318:	2212      	movs	r2, #18
 800d31a:	2116      	movs	r1, #22
 800d31c:	f104 0010 	add.w	r0, r4, #16
 800d320:	f000 fc7a 	bl	800dc18 <core_set_error>
 800d324:	e77c      	b.n	800d220 <ai_platform_network_init+0x15c>
 800d326:	4a19      	ldr	r2, [pc, #100]	; (800d38c <ai_platform_network_init+0x2c8>)
 800d328:	2301      	movs	r3, #1
 800d32a:	6093      	str	r3, [r2, #8]
 800d32c:	6893      	ldr	r3, [r2, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1fc      	bne.n	800d32c <ai_platform_network_init+0x268>
 800d332:	4b17      	ldr	r3, [pc, #92]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	4b17      	ldr	r3, [pc, #92]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d338:	6812      	ldr	r2, [r2, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	f43f aefa 	beq.w	800d134 <ai_platform_network_init+0x70>
 800d340:	e7fe      	b.n	800d340 <ai_platform_network_init+0x27c>
 800d342:	4a12      	ldr	r2, [pc, #72]	; (800d38c <ai_platform_network_init+0x2c8>)
 800d344:	2301      	movs	r3, #1
 800d346:	6093      	str	r3, [r2, #8]
 800d348:	6893      	ldr	r3, [r2, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1fc      	bne.n	800d348 <ai_platform_network_init+0x284>
 800d34e:	4910      	ldr	r1, [pc, #64]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d350:	4b10      	ldr	r3, [pc, #64]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d352:	6011      	str	r1, [r2, #0]
 800d354:	6812      	ldr	r2, [r2, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	f43f af5f 	beq.w	800d21a <ai_platform_network_init+0x156>
 800d35c:	e7fe      	b.n	800d35c <ai_platform_network_init+0x298>
 800d35e:	4a0b      	ldr	r2, [pc, #44]	; (800d38c <ai_platform_network_init+0x2c8>)
 800d360:	2301      	movs	r3, #1
 800d362:	6093      	str	r3, [r2, #8]
 800d364:	6893      	ldr	r3, [r2, #8]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1fc      	bne.n	800d364 <ai_platform_network_init+0x2a0>
 800d36a:	4b09      	ldr	r3, [pc, #36]	; (800d390 <ai_platform_network_init+0x2cc>)
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	4b09      	ldr	r3, [pc, #36]	; (800d394 <ai_platform_network_init+0x2d0>)
 800d370:	6812      	ldr	r2, [r2, #0]
 800d372:	429a      	cmp	r2, r3
 800d374:	f43f aede 	beq.w	800d134 <ai_platform_network_init+0x70>
 800d378:	e7fe      	b.n	800d378 <ai_platform_network_init+0x2b4>
 800d37a:	bf00      	nop
 800d37c:	a1c00100 	.word	0xa1c00100
 800d380:	e0042000 	.word	0xe0042000
 800d384:	5c001000 	.word	0x5c001000
 800d388:	a1facade 	.word	0xa1facade
 800d38c:	40023000 	.word	0x40023000
 800d390:	f407a5c2 	.word	0xf407a5c2
 800d394:	b5e8b5cd 	.word	0xb5e8b5cd
 800d398:	58024000 	.word	0x58024000
 800d39c:	2213      	movs	r2, #19
 800d39e:	2116      	movs	r1, #22
 800d3a0:	f104 0010 	add.w	r0, r4, #16
 800d3a4:	f000 fc38 	bl	800dc18 <core_set_error>
 800d3a8:	e73a      	b.n	800d220 <ai_platform_network_init+0x15c>
 800d3aa:	4607      	mov	r7, r0
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4684      	mov	ip, r0
 800d3b0:	e773      	b.n	800d29a <ai_platform_network_init+0x1d6>
 800d3b2:	f1b9 0f00 	cmp.w	r9, #0
 800d3b6:	d002      	beq.n	800d3be <ai_platform_network_init+0x2fa>
 800d3b8:	f04f 0c01 	mov.w	ip, #1
 800d3bc:	e7a7      	b.n	800d30e <ai_platform_network_init+0x24a>
 800d3be:	2110      	movs	r1, #16
 800d3c0:	2213      	movs	r2, #19
 800d3c2:	2600      	movs	r6, #0
 800d3c4:	1860      	adds	r0, r4, r1
 800d3c6:	f000 fc27 	bl	800dc18 <core_set_error>
 800d3ca:	e729      	b.n	800d220 <ai_platform_network_init+0x15c>
 800d3cc:	2110      	movs	r1, #16
 800d3ce:	2211      	movs	r2, #17
 800d3d0:	462e      	mov	r6, r5
 800d3d2:	1860      	adds	r0, r4, r1
 800d3d4:	f000 fc20 	bl	800dc18 <core_set_error>
 800d3d8:	e722      	b.n	800d220 <ai_platform_network_init+0x15c>
 800d3da:	2110      	movs	r1, #16
 800d3dc:	2212      	movs	r2, #18
 800d3de:	1860      	adds	r0, r4, r1
 800d3e0:	f000 fc1a 	bl	800dc18 <core_set_error>
 800d3e4:	e71c      	b.n	800d220 <ai_platform_network_init+0x15c>
 800d3e6:	4666      	mov	r6, ip
 800d3e8:	e6b7      	b.n	800d15a <ai_platform_network_init+0x96>
 800d3ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3ec:	6a26      	ldr	r6, [r4, #32]
 800d3ee:	2701      	movs	r7, #1
 800d3f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d3f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3f6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d3fa:	e74e      	b.n	800d29a <ai_platform_network_init+0x1d6>

0800d3fc <ai_platform_network_post_init>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d04e      	beq.n	800d4a0 <ai_platform_network_post_init+0xa4>
 800d402:	4b8c      	ldr	r3, [pc, #560]	; (800d634 <ai_platform_network_post_init+0x238>)
 800d404:	4604      	mov	r4, r0
 800d406:	6802      	ldr	r2, [r0, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d149      	bne.n	800d4a0 <ai_platform_network_post_init+0xa4>
 800d40c:	f7fe ff8c 	bl	800c328 <_ai_platform_acquire_crc>
 800d410:	4b89      	ldr	r3, [pc, #548]	; (800d638 <ai_platform_network_post_init+0x23c>)
 800d412:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d41c:	189a      	adds	r2, r3, r2
 800d41e:	2a01      	cmp	r2, #1
 800d420:	f240 8095 	bls.w	800d54e <ai_platform_network_post_init+0x152>
 800d424:	f240 4249 	movw	r2, #1097	; 0x449
 800d428:	4293      	cmp	r3, r2
 800d42a:	f000 8090 	beq.w	800d54e <ai_platform_network_post_init+0x152>
 800d42e:	4a83      	ldr	r2, [pc, #524]	; (800d63c <ai_platform_network_post_init+0x240>)
 800d430:	6813      	ldr	r3, [r2, #0]
 800d432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d436:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d43a:	f000 8096 	beq.w	800d56a <ai_platform_network_post_init+0x16e>
 800d43e:	6813      	ldr	r3, [r2, #0]
 800d440:	f240 4183 	movw	r1, #1155	; 0x483
 800d444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d448:	428b      	cmp	r3, r1
 800d44a:	f000 80b8 	beq.w	800d5be <ai_platform_network_post_init+0x1c2>
 800d44e:	6813      	ldr	r3, [r2, #0]
 800d450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d454:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d458:	f000 80de 	beq.w	800d618 <ai_platform_network_post_init+0x21c>
 800d45c:	6813      	ldr	r3, [r2, #0]
 800d45e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 80bd 	beq.w	800d5e2 <ai_platform_network_post_init+0x1e6>
 800d468:	f7fe ff60 	bl	800c32c <_ai_platform_release_crc>
 800d46c:	68e3      	ldr	r3, [r4, #12]
 800d46e:	f013 0502 	ands.w	r5, r3, #2
 800d472:	f000 808c 	beq.w	800d58e <ai_platform_network_post_init+0x192>
 800d476:	4620      	mov	r0, r4
 800d478:	f000 fc10 	bl	800dc9c <ai_layers_post_init_all>
 800d47c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d47e:	b16b      	cbz	r3, 800d49c <ai_platform_network_post_init+0xa0>
 800d480:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d482:	e007      	b.n	800d494 <ai_platform_network_post_init+0x98>
 800d484:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800d488:	4798      	blx	r3
 800d48a:	692b      	ldr	r3, [r5, #16]
 800d48c:	b133      	cbz	r3, 800d49c <ai_platform_network_post_init+0xa0>
 800d48e:	42ab      	cmp	r3, r5
 800d490:	461d      	mov	r5, r3
 800d492:	d003      	beq.n	800d49c <ai_platform_network_post_init+0xa0>
 800d494:	4629      	mov	r1, r5
 800d496:	2000      	movs	r0, #0
 800d498:	2d00      	cmp	r5, #0
 800d49a:	d1f3      	bne.n	800d484 <ai_platform_network_post_init+0x88>
 800d49c:	2001      	movs	r0, #1
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	f7fe ff42 	bl	800c328 <_ai_platform_acquire_crc>
 800d4a4:	4b64      	ldr	r3, [pc, #400]	; (800d638 <ai_platform_network_post_init+0x23c>)
 800d4a6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4b0:	185a      	adds	r2, r3, r1
 800d4b2:	2a01      	cmp	r2, #1
 800d4b4:	d92a      	bls.n	800d50c <ai_platform_network_post_init+0x110>
 800d4b6:	f240 4249 	movw	r2, #1097	; 0x449
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d026      	beq.n	800d50c <ai_platform_network_post_init+0x110>
 800d4be:	4a5f      	ldr	r2, [pc, #380]	; (800d63c <ai_platform_network_post_init+0x240>)
 800d4c0:	6813      	ldr	r3, [r2, #0]
 800d4c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4c6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d4ca:	d02c      	beq.n	800d526 <ai_platform_network_post_init+0x12a>
 800d4cc:	6813      	ldr	r3, [r2, #0]
 800d4ce:	f240 4183 	movw	r1, #1155	; 0x483
 800d4d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4d6:	428b      	cmp	r3, r1
 800d4d8:	d060      	beq.n	800d59c <ai_platform_network_post_init+0x1a0>
 800d4da:	6813      	ldr	r3, [r2, #0]
 800d4dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4e0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d4e4:	f000 808b 	beq.w	800d5fe <ai_platform_network_post_init+0x202>
 800d4e8:	6813      	ldr	r3, [r2, #0]
 800d4ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d129      	bne.n	800d546 <ai_platform_network_post_init+0x14a>
 800d4f2:	4a53      	ldr	r2, [pc, #332]	; (800d640 <ai_platform_network_post_init+0x244>)
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	6093      	str	r3, [r2, #8]
 800d4f8:	6893      	ldr	r3, [r2, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1fc      	bne.n	800d4f8 <ai_platform_network_post_init+0xfc>
 800d4fe:	4951      	ldr	r1, [pc, #324]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d500:	4b51      	ldr	r3, [pc, #324]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d502:	6011      	str	r1, [r2, #0]
 800d504:	6812      	ldr	r2, [r2, #0]
 800d506:	429a      	cmp	r2, r3
 800d508:	d01d      	beq.n	800d546 <ai_platform_network_post_init+0x14a>
 800d50a:	e7fe      	b.n	800d50a <ai_platform_network_post_init+0x10e>
 800d50c:	4a4c      	ldr	r2, [pc, #304]	; (800d640 <ai_platform_network_post_init+0x244>)
 800d50e:	2301      	movs	r3, #1
 800d510:	6093      	str	r3, [r2, #8]
 800d512:	6893      	ldr	r3, [r2, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1fc      	bne.n	800d512 <ai_platform_network_post_init+0x116>
 800d518:	494a      	ldr	r1, [pc, #296]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d51a:	4b4b      	ldr	r3, [pc, #300]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d51c:	6011      	str	r1, [r2, #0]
 800d51e:	6812      	ldr	r2, [r2, #0]
 800d520:	429a      	cmp	r2, r3
 800d522:	d010      	beq.n	800d546 <ai_platform_network_post_init+0x14a>
 800d524:	e7fe      	b.n	800d524 <ai_platform_network_post_init+0x128>
 800d526:	4a49      	ldr	r2, [pc, #292]	; (800d64c <ai_platform_network_post_init+0x250>)
 800d528:	2301      	movs	r3, #1
 800d52a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d52e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1fb      	bne.n	800d52e <ai_platform_network_post_init+0x132>
 800d536:	4943      	ldr	r1, [pc, #268]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d538:	4b43      	ldr	r3, [pc, #268]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d53a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d53e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d542:	429a      	cmp	r2, r3
 800d544:	d110      	bne.n	800d568 <ai_platform_network_post_init+0x16c>
 800d546:	f7fe fef1 	bl	800c32c <_ai_platform_release_crc>
 800d54a:	2000      	movs	r0, #0
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	4a3c      	ldr	r2, [pc, #240]	; (800d640 <ai_platform_network_post_init+0x244>)
 800d550:	2301      	movs	r3, #1
 800d552:	6093      	str	r3, [r2, #8]
 800d554:	6893      	ldr	r3, [r2, #8]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1fc      	bne.n	800d554 <ai_platform_network_post_init+0x158>
 800d55a:	493a      	ldr	r1, [pc, #232]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d55c:	4b3a      	ldr	r3, [pc, #232]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d55e:	6011      	str	r1, [r2, #0]
 800d560:	6812      	ldr	r2, [r2, #0]
 800d562:	429a      	cmp	r2, r3
 800d564:	d080      	beq.n	800d468 <ai_platform_network_post_init+0x6c>
 800d566:	e7fe      	b.n	800d566 <ai_platform_network_post_init+0x16a>
 800d568:	e7fe      	b.n	800d568 <ai_platform_network_post_init+0x16c>
 800d56a:	4a38      	ldr	r2, [pc, #224]	; (800d64c <ai_platform_network_post_init+0x250>)
 800d56c:	2301      	movs	r3, #1
 800d56e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d572:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1fb      	bne.n	800d572 <ai_platform_network_post_init+0x176>
 800d57a:	4932      	ldr	r1, [pc, #200]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d57c:	4b32      	ldr	r3, [pc, #200]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d57e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d582:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d586:	429a      	cmp	r2, r3
 800d588:	f43f af6e 	beq.w	800d468 <ai_platform_network_post_init+0x6c>
 800d58c:	e7fe      	b.n	800d58c <ai_platform_network_post_init+0x190>
 800d58e:	2210      	movs	r2, #16
 800d590:	2111      	movs	r1, #17
 800d592:	18a0      	adds	r0, r4, r2
 800d594:	f000 fb40 	bl	800dc18 <core_set_error>
 800d598:	4628      	mov	r0, r5
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	4a2b      	ldr	r2, [pc, #172]	; (800d64c <ai_platform_network_post_init+0x250>)
 800d59e:	2301      	movs	r3, #1
 800d5a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d5a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1fb      	bne.n	800d5a4 <ai_platform_network_post_init+0x1a8>
 800d5ac:	4925      	ldr	r1, [pc, #148]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d5ae:	4b26      	ldr	r3, [pc, #152]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d5b0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d5b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d0c4      	beq.n	800d546 <ai_platform_network_post_init+0x14a>
 800d5bc:	e7fe      	b.n	800d5bc <ai_platform_network_post_init+0x1c0>
 800d5be:	4a23      	ldr	r2, [pc, #140]	; (800d64c <ai_platform_network_post_init+0x250>)
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d5c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1fb      	bne.n	800d5c6 <ai_platform_network_post_init+0x1ca>
 800d5ce:	491d      	ldr	r1, [pc, #116]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d5d2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d5d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	f43f af44 	beq.w	800d468 <ai_platform_network_post_init+0x6c>
 800d5e0:	e7fe      	b.n	800d5e0 <ai_platform_network_post_init+0x1e4>
 800d5e2:	4a17      	ldr	r2, [pc, #92]	; (800d640 <ai_platform_network_post_init+0x244>)
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	6093      	str	r3, [r2, #8]
 800d5e8:	6893      	ldr	r3, [r2, #8]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1fc      	bne.n	800d5e8 <ai_platform_network_post_init+0x1ec>
 800d5ee:	4915      	ldr	r1, [pc, #84]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d5f0:	4b15      	ldr	r3, [pc, #84]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d5f2:	6011      	str	r1, [r2, #0]
 800d5f4:	6812      	ldr	r2, [r2, #0]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	f43f af36 	beq.w	800d468 <ai_platform_network_post_init+0x6c>
 800d5fc:	e7fe      	b.n	800d5fc <ai_platform_network_post_init+0x200>
 800d5fe:	4a10      	ldr	r2, [pc, #64]	; (800d640 <ai_platform_network_post_init+0x244>)
 800d600:	2301      	movs	r3, #1
 800d602:	6093      	str	r3, [r2, #8]
 800d604:	6893      	ldr	r3, [r2, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1fc      	bne.n	800d604 <ai_platform_network_post_init+0x208>
 800d60a:	490e      	ldr	r1, [pc, #56]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d60c:	4b0e      	ldr	r3, [pc, #56]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d60e:	6011      	str	r1, [r2, #0]
 800d610:	6812      	ldr	r2, [r2, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d097      	beq.n	800d546 <ai_platform_network_post_init+0x14a>
 800d616:	e7fe      	b.n	800d616 <ai_platform_network_post_init+0x21a>
 800d618:	4a09      	ldr	r2, [pc, #36]	; (800d640 <ai_platform_network_post_init+0x244>)
 800d61a:	2301      	movs	r3, #1
 800d61c:	6093      	str	r3, [r2, #8]
 800d61e:	6893      	ldr	r3, [r2, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1fc      	bne.n	800d61e <ai_platform_network_post_init+0x222>
 800d624:	4907      	ldr	r1, [pc, #28]	; (800d644 <ai_platform_network_post_init+0x248>)
 800d626:	4b08      	ldr	r3, [pc, #32]	; (800d648 <ai_platform_network_post_init+0x24c>)
 800d628:	6011      	str	r1, [r2, #0]
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	f43f af1b 	beq.w	800d468 <ai_platform_network_post_init+0x6c>
 800d632:	e7fe      	b.n	800d632 <ai_platform_network_post_init+0x236>
 800d634:	a1c00100 	.word	0xa1c00100
 800d638:	e0042000 	.word	0xe0042000
 800d63c:	5c001000 	.word	0x5c001000
 800d640:	40023000 	.word	0x40023000
 800d644:	f407a5c2 	.word	0xf407a5c2
 800d648:	b5e8b5cd 	.word	0xb5e8b5cd
 800d64c:	58024000 	.word	0x58024000

0800d650 <ai_platform_network_process>:
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	b085      	sub	sp, #20
 800d656:	460e      	mov	r6, r1
 800d658:	4605      	mov	r5, r0
 800d65a:	9201      	str	r2, [sp, #4]
 800d65c:	b120      	cbz	r0, 800d668 <ai_platform_network_process+0x18>
 800d65e:	4b24      	ldr	r3, [pc, #144]	; (800d6f0 <ai_platform_network_process+0xa0>)
 800d660:	6802      	ldr	r2, [r0, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	bf18      	it	ne
 800d666:	2500      	movne	r5, #0
 800d668:	f7fe fe5e 	bl	800c328 <_ai_platform_acquire_crc>
 800d66c:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <ai_platform_network_process+0xa4>)
 800d66e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d678:	185a      	adds	r2, r3, r1
 800d67a:	2a01      	cmp	r2, #1
 800d67c:	d92b      	bls.n	800d6d6 <ai_platform_network_process+0x86>
 800d67e:	f240 4249 	movw	r2, #1097	; 0x449
 800d682:	4293      	cmp	r3, r2
 800d684:	d027      	beq.n	800d6d6 <ai_platform_network_process+0x86>
 800d686:	4a1c      	ldr	r2, [pc, #112]	; (800d6f8 <ai_platform_network_process+0xa8>)
 800d688:	6813      	ldr	r3, [r2, #0]
 800d68a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d68e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d692:	d039      	beq.n	800d708 <ai_platform_network_process+0xb8>
 800d694:	6813      	ldr	r3, [r2, #0]
 800d696:	f240 4183 	movw	r1, #1155	; 0x483
 800d69a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d69e:	428b      	cmp	r3, r1
 800d6a0:	f000 819c 	beq.w	800d9dc <ai_platform_network_process+0x38c>
 800d6a4:	6813      	ldr	r3, [r2, #0]
 800d6a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6aa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d6ae:	f000 8179 	beq.w	800d9a4 <ai_platform_network_process+0x354>
 800d6b2:	6813      	ldr	r3, [r2, #0]
 800d6b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d136      	bne.n	800d72a <ai_platform_network_process+0xda>
 800d6bc:	4a0f      	ldr	r2, [pc, #60]	; (800d6fc <ai_platform_network_process+0xac>)
 800d6be:	2301      	movs	r3, #1
 800d6c0:	6093      	str	r3, [r2, #8]
 800d6c2:	6893      	ldr	r3, [r2, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1fc      	bne.n	800d6c2 <ai_platform_network_process+0x72>
 800d6c8:	4b0d      	ldr	r3, [pc, #52]	; (800d700 <ai_platform_network_process+0xb0>)
 800d6ca:	6013      	str	r3, [r2, #0]
 800d6cc:	4b0d      	ldr	r3, [pc, #52]	; (800d704 <ai_platform_network_process+0xb4>)
 800d6ce:	6812      	ldr	r2, [r2, #0]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d02a      	beq.n	800d72a <ai_platform_network_process+0xda>
 800d6d4:	e7fe      	b.n	800d6d4 <ai_platform_network_process+0x84>
 800d6d6:	4a09      	ldr	r2, [pc, #36]	; (800d6fc <ai_platform_network_process+0xac>)
 800d6d8:	2301      	movs	r3, #1
 800d6da:	6093      	str	r3, [r2, #8]
 800d6dc:	6893      	ldr	r3, [r2, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1fc      	bne.n	800d6dc <ai_platform_network_process+0x8c>
 800d6e2:	4b07      	ldr	r3, [pc, #28]	; (800d700 <ai_platform_network_process+0xb0>)
 800d6e4:	6013      	str	r3, [r2, #0]
 800d6e6:	4b07      	ldr	r3, [pc, #28]	; (800d704 <ai_platform_network_process+0xb4>)
 800d6e8:	6812      	ldr	r2, [r2, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d01d      	beq.n	800d72a <ai_platform_network_process+0xda>
 800d6ee:	e7fe      	b.n	800d6ee <ai_platform_network_process+0x9e>
 800d6f0:	a1c00100 	.word	0xa1c00100
 800d6f4:	e0042000 	.word	0xe0042000
 800d6f8:	5c001000 	.word	0x5c001000
 800d6fc:	40023000 	.word	0x40023000
 800d700:	f407a5c2 	.word	0xf407a5c2
 800d704:	b5e8b5cd 	.word	0xb5e8b5cd
 800d708:	4ab0      	ldr	r2, [pc, #704]	; (800d9cc <ai_platform_network_process+0x37c>)
 800d70a:	2301      	movs	r3, #1
 800d70c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d710:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1fb      	bne.n	800d710 <ai_platform_network_process+0xc0>
 800d718:	4bad      	ldr	r3, [pc, #692]	; (800d9d0 <ai_platform_network_process+0x380>)
 800d71a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d71e:	4bad      	ldr	r3, [pc, #692]	; (800d9d4 <ai_platform_network_process+0x384>)
 800d720:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d724:	429a      	cmp	r2, r3
 800d726:	f040 812b 	bne.w	800d980 <ai_platform_network_process+0x330>
 800d72a:	f7fe fdff 	bl	800c32c <_ai_platform_release_crc>
 800d72e:	2d00      	cmp	r5, #0
 800d730:	f000 8172 	beq.w	800da18 <ai_platform_network_process+0x3c8>
 800d734:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 8123 	beq.w	800d982 <ai_platform_network_process+0x332>
 800d73c:	68eb      	ldr	r3, [r5, #12]
 800d73e:	2200      	movs	r2, #0
 800d740:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800d744:	f003 0303 	and.w	r3, r3, #3
 800d748:	616a      	str	r2, [r5, #20]
 800d74a:	2b03      	cmp	r3, #3
 800d74c:	f040 811f 	bne.w	800d98e <ai_platform_network_process+0x33e>
 800d750:	2e00      	cmp	r6, #0
 800d752:	f000 8156 	beq.w	800da02 <ai_platform_network_process+0x3b2>
 800d756:	fab8 f788 	clz	r7, r8
 800d75a:	097f      	lsrs	r7, r7, #5
 800d75c:	f1b8 0f00 	cmp.w	r8, #0
 800d760:	f000 814f 	beq.w	800da02 <ai_platform_network_process+0x3b2>
 800d764:	f8b8 3000 	ldrh.w	r3, [r8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 814a 	beq.w	800da02 <ai_platform_network_process+0x3b2>
 800d76e:	69b3      	ldr	r3, [r6, #24]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800d776:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d072      	beq.n	800d864 <ai_platform_network_process+0x214>
 800d77e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d782:	2c00      	cmp	r4, #0
 800d784:	d06e      	beq.n	800d864 <ai_platform_network_process+0x214>
 800d786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d78a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d78e:	f8d3 a000 	ldr.w	sl, [r3]
 800d792:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800d796:	f000 8133 	beq.w	800da00 <ai_platform_network_process+0x3b0>
 800d79a:	69a3      	ldr	r3, [r4, #24]
 800d79c:	2101      	movs	r1, #1
 800d79e:	4630      	mov	r0, r6
 800d7a0:	685d      	ldr	r5, [r3, #4]
 800d7a2:	f7fe fd73 	bl	800c28c <ai_buffer_get_size>
 800d7a6:	4285      	cmp	r5, r0
 800d7a8:	f0c0 8138 	bcc.w	800da1c <ai_platform_network_process+0x3cc>
 800d7ac:	68e0      	ldr	r0, [r4, #12]
 800d7ae:	69b1      	ldr	r1, [r6, #24]
 800d7b0:	68c2      	ldr	r2, [r0, #12]
 800d7b2:	68cb      	ldr	r3, [r1, #12]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	f040 8131 	bne.w	800da1c <ai_platform_network_process+0x3cc>
 800d7ba:	6882      	ldr	r2, [r0, #8]
 800d7bc:	688b      	ldr	r3, [r1, #8]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	f040 812c 	bne.w	800da1c <ai_platform_network_process+0x3cc>
 800d7c4:	6842      	ldr	r2, [r0, #4]
 800d7c6:	684b      	ldr	r3, [r1, #4]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	f040 8127 	bne.w	800da1c <ai_platform_network_process+0x3cc>
 800d7ce:	69a3      	ldr	r3, [r4, #24]
 800d7d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7d4:	f001 fa56 	bl	800ec84 <ai_array_get_data_byte_size>
 800d7d8:	4605      	mov	r5, r0
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f001 fa68 	bl	800ecb0 <get_tensor_byte_size>
 800d7e0:	4285      	cmp	r5, r0
 800d7e2:	f0c0 811b 	bcc.w	800da1c <ai_platform_network_process+0x3cc>
 800d7e6:	69a3      	ldr	r3, [r4, #24]
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	f001 f9b7 	bl	800eb5c <ai_array_to_buffer_fmt>
 800d7ee:	6833      	ldr	r3, [r6, #0]
 800d7f0:	4058      	eors	r0, r3
 800d7f2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d7f6:	f040 81c8 	bne.w	800db8a <ai_platform_network_process+0x53a>
 800d7fa:	6873      	ldr	r3, [r6, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 81bb 	beq.w	800db78 <ai_platform_network_process+0x528>
 800d802:	69b3      	ldr	r3, [r6, #24]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 81c8 	beq.w	800db9c <ai_platform_network_process+0x54c>
 800d80c:	9a02      	ldr	r2, [sp, #8]
 800d80e:	4620      	mov	r0, r4
 800d810:	3701      	adds	r7, #1
 800d812:	361c      	adds	r6, #28
 800d814:	429a      	cmp	r2, r3
 800d816:	bf38      	it	cc
 800d818:	461a      	movcc	r2, r3
 800d81a:	9202      	str	r2, [sp, #8]
 800d81c:	f001 fa48 	bl	800ecb0 <get_tensor_byte_size>
 800d820:	f8c9 0008 	str.w	r0, [r9, #8]
 800d824:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	fb00 f303 	mul.w	r3, r0, r3
 800d82e:	f8c9 300c 	str.w	r3, [r9, #12]
 800d832:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d836:	440b      	add	r3, r1
 800d838:	f8c9 1004 	str.w	r1, [r9, #4]
 800d83c:	f84a 300b 	str.w	r3, [sl, fp]
 800d840:	69a0      	ldr	r0, [r4, #24]
 800d842:	6803      	ldr	r3, [r0, #0]
 800d844:	009a      	lsls	r2, r3, #2
 800d846:	f100 80bb 	bmi.w	800d9c0 <ai_platform_network_process+0x370>
 800d84a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	4419      	add	r1, r3
 800d852:	6081      	str	r1, [r0, #8]
 800d854:	69a3      	ldr	r3, [r4, #24]
 800d856:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d85a:	60da      	str	r2, [r3, #12]
 800d85c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d860:	42bb      	cmp	r3, r7
 800d862:	d888      	bhi.n	800d776 <ai_platform_network_process+0x126>
 800d864:	9d03      	ldr	r5, [sp, #12]
 800d866:	9b01      	ldr	r3, [sp, #4]
 800d868:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 819f 	beq.w	800dbae <ai_platform_network_process+0x55e>
 800d870:	2a01      	cmp	r2, #1
 800d872:	f240 8179 	bls.w	800db68 <ai_platform_network_process+0x518>
 800d876:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800d87a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f000 8172 	beq.w	800db68 <ai_platform_network_process+0x518>
 800d884:	9e01      	ldr	r6, [sp, #4]
 800d886:	2700      	movs	r7, #0
 800d888:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 80d3 	beq.w	800da38 <ai_platform_network_process+0x3e8>
 800d892:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d896:	2c00      	cmp	r4, #0
 800d898:	f000 80ce 	beq.w	800da38 <ai_platform_network_process+0x3e8>
 800d89c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d8a0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d8a4:	f8d3 8000 	ldr.w	r8, [r3]
 800d8a8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800d8ac:	f000 819d 	beq.w	800dbea <ai_platform_network_process+0x59a>
 800d8b0:	69a3      	ldr	r3, [r4, #24]
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	f7fe fce7 	bl	800c28c <ai_buffer_get_size>
 800d8be:	9b01      	ldr	r3, [sp, #4]
 800d8c0:	4283      	cmp	r3, r0
 800d8c2:	f0c0 8151 	bcc.w	800db68 <ai_platform_network_process+0x518>
 800d8c6:	68e0      	ldr	r0, [r4, #12]
 800d8c8:	69b1      	ldr	r1, [r6, #24]
 800d8ca:	68c2      	ldr	r2, [r0, #12]
 800d8cc:	68cb      	ldr	r3, [r1, #12]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	f040 814a 	bne.w	800db68 <ai_platform_network_process+0x518>
 800d8d4:	6882      	ldr	r2, [r0, #8]
 800d8d6:	688b      	ldr	r3, [r1, #8]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	f040 8145 	bne.w	800db68 <ai_platform_network_process+0x518>
 800d8de:	6842      	ldr	r2, [r0, #4]
 800d8e0:	684b      	ldr	r3, [r1, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	f040 8140 	bne.w	800db68 <ai_platform_network_process+0x518>
 800d8e8:	69a3      	ldr	r3, [r4, #24]
 800d8ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8ee:	f001 f9c9 	bl	800ec84 <ai_array_get_data_byte_size>
 800d8f2:	9001      	str	r0, [sp, #4]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f001 f9db 	bl	800ecb0 <get_tensor_byte_size>
 800d8fa:	9b01      	ldr	r3, [sp, #4]
 800d8fc:	4283      	cmp	r3, r0
 800d8fe:	f0c0 8133 	bcc.w	800db68 <ai_platform_network_process+0x518>
 800d902:	69a3      	ldr	r3, [r4, #24]
 800d904:	6818      	ldr	r0, [r3, #0]
 800d906:	f001 f929 	bl	800eb5c <ai_array_to_buffer_fmt>
 800d90a:	6833      	ldr	r3, [r6, #0]
 800d90c:	4058      	eors	r0, r3
 800d90e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d912:	f040 815a 	bne.w	800dbca <ai_platform_network_process+0x57a>
 800d916:	6873      	ldr	r3, [r6, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 814e 	beq.w	800dbba <ai_platform_network_process+0x56a>
 800d91e:	69b3      	ldr	r3, [r6, #24]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	f000 8159 	beq.w	800dbda <ai_platform_network_process+0x58a>
 800d928:	9a02      	ldr	r2, [sp, #8]
 800d92a:	4620      	mov	r0, r4
 800d92c:	3701      	adds	r7, #1
 800d92e:	361c      	adds	r6, #28
 800d930:	429a      	cmp	r2, r3
 800d932:	bf38      	it	cc
 800d934:	461a      	movcc	r2, r3
 800d936:	9202      	str	r2, [sp, #8]
 800d938:	f001 f9ba 	bl	800ecb0 <get_tensor_byte_size>
 800d93c:	f8ca 0008 	str.w	r0, [sl, #8]
 800d940:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	fb00 f303 	mul.w	r3, r0, r3
 800d94a:	f8ca 300c 	str.w	r3, [sl, #12]
 800d94e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d952:	440b      	add	r3, r1
 800d954:	f8ca 1004 	str.w	r1, [sl, #4]
 800d958:	f848 300b 	str.w	r3, [r8, fp]
 800d95c:	69a0      	ldr	r0, [r4, #24]
 800d95e:	6803      	ldr	r3, [r0, #0]
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	d464      	bmi.n	800da2e <ai_platform_network_process+0x3de>
 800d964:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d968:	1a9b      	subs	r3, r3, r2
 800d96a:	4419      	add	r1, r3
 800d96c:	6081      	str	r1, [r0, #8]
 800d96e:	69a3      	ldr	r3, [r4, #24]
 800d970:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d974:	60da      	str	r2, [r3, #12]
 800d976:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d97a:	429f      	cmp	r7, r3
 800d97c:	d384      	bcc.n	800d888 <ai_platform_network_process+0x238>
 800d97e:	e05b      	b.n	800da38 <ai_platform_network_process+0x3e8>
 800d980:	e7fe      	b.n	800d980 <ai_platform_network_process+0x330>
 800d982:	68ea      	ldr	r2, [r5, #12]
 800d984:	616b      	str	r3, [r5, #20]
 800d986:	f002 0203 	and.w	r2, r2, #3
 800d98a:	2a03      	cmp	r2, #3
 800d98c:	d039      	beq.n	800da02 <ai_platform_network_process+0x3b2>
 800d98e:	2230      	movs	r2, #48	; 0x30
 800d990:	2111      	movs	r1, #17
 800d992:	f105 0010 	add.w	r0, r5, #16
 800d996:	2400      	movs	r4, #0
 800d998:	f000 f93e 	bl	800dc18 <core_set_error>
 800d99c:	4620      	mov	r0, r4
 800d99e:	b005      	add	sp, #20
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	4a0c      	ldr	r2, [pc, #48]	; (800d9d8 <ai_platform_network_process+0x388>)
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	6093      	str	r3, [r2, #8]
 800d9aa:	6893      	ldr	r3, [r2, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1fc      	bne.n	800d9aa <ai_platform_network_process+0x35a>
 800d9b0:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <ai_platform_network_process+0x380>)
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	4b07      	ldr	r3, [pc, #28]	; (800d9d4 <ai_platform_network_process+0x384>)
 800d9b6:	6812      	ldr	r2, [r2, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	f43f aeb6 	beq.w	800d72a <ai_platform_network_process+0xda>
 800d9be:	e7fe      	b.n	800d9be <ai_platform_network_process+0x36e>
 800d9c0:	f8b8 3000 	ldrh.w	r3, [r8]
 800d9c4:	429f      	cmp	r7, r3
 800d9c6:	f4ff aed6 	bcc.w	800d776 <ai_platform_network_process+0x126>
 800d9ca:	e74b      	b.n	800d864 <ai_platform_network_process+0x214>
 800d9cc:	58024000 	.word	0x58024000
 800d9d0:	f407a5c2 	.word	0xf407a5c2
 800d9d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d9d8:	40023000 	.word	0x40023000
 800d9dc:	4a87      	ldr	r2, [pc, #540]	; (800dbfc <ai_platform_network_process+0x5ac>)
 800d9de:	2301      	movs	r3, #1
 800d9e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d9e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1fb      	bne.n	800d9e4 <ai_platform_network_process+0x394>
 800d9ec:	4b84      	ldr	r3, [pc, #528]	; (800dc00 <ai_platform_network_process+0x5b0>)
 800d9ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d9f2:	4b84      	ldr	r3, [pc, #528]	; (800dc04 <ai_platform_network_process+0x5b4>)
 800d9f4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	f43f ae96 	beq.w	800d72a <ai_platform_network_process+0xda>
 800d9fe:	e7fe      	b.n	800d9fe <ai_platform_network_process+0x3ae>
 800da00:	9d03      	ldr	r5, [sp, #12]
 800da02:	2400      	movs	r4, #0
 800da04:	2217      	movs	r2, #23
 800da06:	2112      	movs	r1, #18
 800da08:	f105 0010 	add.w	r0, r5, #16
 800da0c:	f000 f904 	bl	800dc18 <core_set_error>
 800da10:	4620      	mov	r0, r4
 800da12:	b005      	add	sp, #20
 800da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da18:	462c      	mov	r4, r5
 800da1a:	e7bf      	b.n	800d99c <ai_platform_network_process+0x34c>
 800da1c:	9d03      	ldr	r5, [sp, #12]
 800da1e:	2218      	movs	r2, #24
 800da20:	2112      	movs	r1, #18
 800da22:	2400      	movs	r4, #0
 800da24:	f105 0010 	add.w	r0, r5, #16
 800da28:	f000 f8f6 	bl	800dc18 <core_set_error>
 800da2c:	e7b6      	b.n	800d99c <ai_platform_network_process+0x34c>
 800da2e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800da32:	429f      	cmp	r7, r3
 800da34:	f4ff af28 	bcc.w	800d888 <ai_platform_network_process+0x238>
 800da38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800da3c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800da3e:	82ab      	strh	r3, [r5, #20]
 800da40:	2a00      	cmp	r2, #0
 800da42:	f040 808b 	bne.w	800db5c <ai_platform_network_process+0x50c>
 800da46:	4616      	mov	r6, r2
 800da48:	4617      	mov	r7, r2
 800da4a:	8aec      	ldrh	r4, [r5, #22]
 800da4c:	429c      	cmp	r4, r3
 800da4e:	d2a5      	bcs.n	800d99c <ai_platform_network_process+0x34c>
 800da50:	46ab      	mov	fp, r5
 800da52:	2e00      	cmp	r6, #0
 800da54:	d030      	beq.n	800dab8 <ai_platform_network_process+0x468>
 800da56:	f04f 0800 	mov.w	r8, #0
 800da5a:	e014      	b.n	800da86 <ai_platform_network_process+0x436>
 800da5c:	6882      	ldr	r2, [r0, #8]
 800da5e:	68c5      	ldr	r5, [r0, #12]
 800da60:	6863      	ldr	r3, [r4, #4]
 800da62:	1b52      	subs	r2, r2, r5
 800da64:	4413      	add	r3, r2
 800da66:	6083      	str	r3, [r0, #8]
 800da68:	698b      	ldr	r3, [r1, #24]
 800da6a:	6862      	ldr	r2, [r4, #4]
 800da6c:	60da      	str	r2, [r3, #12]
 800da6e:	f859 200a 	ldr.w	r2, [r9, sl]
 800da72:	f108 0801 	add.w	r8, r8, #1
 800da76:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800da7a:	440b      	add	r3, r1
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d301      	bcc.n	800da84 <ai_platform_network_process+0x434>
 800da80:	68e3      	ldr	r3, [r4, #12]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	6063      	str	r3, [r4, #4]
 800da86:	8833      	ldrh	r3, [r6, #0]
 800da88:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800da8c:	4543      	cmp	r3, r8
 800da8e:	d913      	bls.n	800dab8 <ai_platform_network_process+0x468>
 800da90:	6873      	ldr	r3, [r6, #4]
 800da92:	b18b      	cbz	r3, 800dab8 <ai_platform_network_process+0x468>
 800da94:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800da98:	b171      	cbz	r1, 800dab8 <ai_platform_network_process+0x468>
 800da9a:	6988      	ldr	r0, [r1, #24]
 800da9c:	68b2      	ldr	r2, [r6, #8]
 800da9e:	6803      	ldr	r3, [r0, #0]
 800daa0:	f8d2 9000 	ldr.w	r9, [r2]
 800daa4:	009d      	lsls	r5, r3, #2
 800daa6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800daaa:	d5d7      	bpl.n	800da5c <ai_platform_network_process+0x40c>
 800daac:	6881      	ldr	r1, [r0, #8]
 800daae:	68a2      	ldr	r2, [r4, #8]
 800dab0:	6860      	ldr	r0, [r4, #4]
 800dab2:	f000 ffcb 	bl	800ea4c <st_int8_copy>
 800dab6:	e7da      	b.n	800da6e <ai_platform_network_process+0x41e>
 800dab8:	4658      	mov	r0, fp
 800daba:	f000 f903 	bl	800dcc4 <ai_layers_forward_all>
 800dabe:	2f00      	cmp	r7, #0
 800dac0:	d03d      	beq.n	800db3e <ai_platform_network_process+0x4ee>
 800dac2:	2400      	movs	r4, #0
 800dac4:	e016      	b.n	800daf4 <ai_platform_network_process+0x4a4>
 800dac6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800daca:	f859 100a 	ldr.w	r1, [r9, sl]
 800dace:	4413      	add	r3, r2
 800dad0:	428b      	cmp	r3, r1
 800dad2:	d302      	bcc.n	800dada <ai_platform_network_process+0x48a>
 800dad4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dad8:	1acb      	subs	r3, r1, r3
 800dada:	f8c8 3004 	str.w	r3, [r8, #4]
 800dade:	6981      	ldr	r1, [r0, #24]
 800dae0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800dae4:	1b52      	subs	r2, r2, r5
 800dae6:	4413      	add	r3, r2
 800dae8:	608b      	str	r3, [r1, #8]
 800daea:	6983      	ldr	r3, [r0, #24]
 800daec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800daf0:	60da      	str	r2, [r3, #12]
 800daf2:	3401      	adds	r4, #1
 800daf4:	883b      	ldrh	r3, [r7, #0]
 800daf6:	42a3      	cmp	r3, r4
 800daf8:	d921      	bls.n	800db3e <ai_platform_network_process+0x4ee>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	b1fb      	cbz	r3, 800db3e <ai_platform_network_process+0x4ee>
 800dafe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800db02:	b1e0      	cbz	r0, 800db3e <ai_platform_network_process+0x4ee>
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800db0a:	6983      	ldr	r3, [r0, #24]
 800db0c:	f8d2 9000 	ldr.w	r9, [r2]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800db16:	0092      	lsls	r2, r2, #2
 800db18:	d5d5      	bpl.n	800dac6 <ai_platform_network_process+0x476>
 800db1a:	6898      	ldr	r0, [r3, #8]
 800db1c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800db20:	f000 ff94 	bl	800ea4c <st_int8_copy>
 800db24:	f859 200a 	ldr.w	r2, [r9, sl]
 800db28:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800db2c:	440b      	add	r3, r1
 800db2e:	4293      	cmp	r3, r2
 800db30:	d302      	bcc.n	800db38 <ai_platform_network_process+0x4e8>
 800db32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	f8c8 3004 	str.w	r3, [r8, #4]
 800db3c:	e7d9      	b.n	800daf2 <ai_platform_network_process+0x4a2>
 800db3e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800db42:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800db46:	3401      	adds	r4, #1
 800db48:	b2a4      	uxth	r4, r4
 800db4a:	42a3      	cmp	r3, r4
 800db4c:	f8ab 4016 	strh.w	r4, [fp, #22]
 800db50:	f63f af7f 	bhi.w	800da52 <ai_platform_network_process+0x402>
 800db54:	4620      	mov	r0, r4
 800db56:	b005      	add	sp, #20
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	2a01      	cmp	r2, #1
 800db5e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800db60:	d029      	beq.n	800dbb6 <ai_platform_network_process+0x566>
 800db62:	f106 070c 	add.w	r7, r6, #12
 800db66:	e770      	b.n	800da4a <ai_platform_network_process+0x3fa>
 800db68:	2218      	movs	r2, #24
 800db6a:	2113      	movs	r1, #19
 800db6c:	f105 0010 	add.w	r0, r5, #16
 800db70:	2400      	movs	r4, #0
 800db72:	f000 f851 	bl	800dc18 <core_set_error>
 800db76:	e711      	b.n	800d99c <ai_platform_network_process+0x34c>
 800db78:	9d03      	ldr	r5, [sp, #12]
 800db7a:	4604      	mov	r4, r0
 800db7c:	2217      	movs	r2, #23
 800db7e:	2112      	movs	r1, #18
 800db80:	f105 0010 	add.w	r0, r5, #16
 800db84:	f000 f848 	bl	800dc18 <core_set_error>
 800db88:	e708      	b.n	800d99c <ai_platform_network_process+0x34c>
 800db8a:	9d03      	ldr	r5, [sp, #12]
 800db8c:	2219      	movs	r2, #25
 800db8e:	2112      	movs	r1, #18
 800db90:	2400      	movs	r4, #0
 800db92:	f105 0010 	add.w	r0, r5, #16
 800db96:	f000 f83f 	bl	800dc18 <core_set_error>
 800db9a:	e6ff      	b.n	800d99c <ai_platform_network_process+0x34c>
 800db9c:	9d03      	ldr	r5, [sp, #12]
 800db9e:	4604      	mov	r4, r0
 800dba0:	2221      	movs	r2, #33	; 0x21
 800dba2:	2112      	movs	r1, #18
 800dba4:	f105 0010 	add.w	r0, r5, #16
 800dba8:	f000 f836 	bl	800dc18 <core_set_error>
 800dbac:	e6f6      	b.n	800d99c <ai_platform_network_process+0x34c>
 800dbae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800dbb2:	82ab      	strh	r3, [r5, #20]
 800dbb4:	e744      	b.n	800da40 <ai_platform_network_process+0x3f0>
 800dbb6:	2700      	movs	r7, #0
 800dbb8:	e747      	b.n	800da4a <ai_platform_network_process+0x3fa>
 800dbba:	4604      	mov	r4, r0
 800dbbc:	2217      	movs	r2, #23
 800dbbe:	2113      	movs	r1, #19
 800dbc0:	f105 0010 	add.w	r0, r5, #16
 800dbc4:	f000 f828 	bl	800dc18 <core_set_error>
 800dbc8:	e6e8      	b.n	800d99c <ai_platform_network_process+0x34c>
 800dbca:	2219      	movs	r2, #25
 800dbcc:	2113      	movs	r1, #19
 800dbce:	f105 0010 	add.w	r0, r5, #16
 800dbd2:	2400      	movs	r4, #0
 800dbd4:	f000 f820 	bl	800dc18 <core_set_error>
 800dbd8:	e6e0      	b.n	800d99c <ai_platform_network_process+0x34c>
 800dbda:	4604      	mov	r4, r0
 800dbdc:	2221      	movs	r2, #33	; 0x21
 800dbde:	2113      	movs	r1, #19
 800dbe0:	f105 0010 	add.w	r0, r5, #16
 800dbe4:	f000 f818 	bl	800dc18 <core_set_error>
 800dbe8:	e6d8      	b.n	800d99c <ai_platform_network_process+0x34c>
 800dbea:	2217      	movs	r2, #23
 800dbec:	2113      	movs	r1, #19
 800dbee:	f105 0010 	add.w	r0, r5, #16
 800dbf2:	4654      	mov	r4, sl
 800dbf4:	f000 f810 	bl	800dc18 <core_set_error>
 800dbf8:	e6d0      	b.n	800d99c <ai_platform_network_process+0x34c>
 800dbfa:	bf00      	nop
 800dbfc:	58024000 	.word	0x58024000
 800dc00:	f407a5c2 	.word	0xf407a5c2
 800dc04:	b5e8b5cd 	.word	0xb5e8b5cd

0800dc08 <core_init>:
 800dc08:	2001      	movs	r0, #1
 800dc0a:	4770      	bx	lr

0800dc0c <core_get_error>:
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2200      	movs	r2, #0
 800dc10:	6800      	ldr	r0, [r0, #0]
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop

0800dc18 <core_set_error>:
 800dc18:	4603      	mov	r3, r0
 800dc1a:	7800      	ldrb	r0, [r0, #0]
 800dc1c:	b108      	cbz	r0, 800dc22 <core_set_error+0xa>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	4770      	bx	lr
 800dc22:	7019      	strb	r1, [r3, #0]
 800dc24:	2001      	movs	r0, #1
 800dc26:	6819      	ldr	r1, [r3, #0]
 800dc28:	f362 211f 	bfi	r1, r2, #8, #24
 800dc2c:	6019      	str	r1, [r3, #0]
 800dc2e:	4770      	bx	lr

0800dc30 <ai_check_custom_types>:
 800dc30:	b082      	sub	sp, #8
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <ai_check_custom_types+0x4c>)
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	b118      	cbz	r0, 800dc40 <ai_check_custom_types+0x10>
 800dc38:	7803      	ldrb	r3, [r0, #0]
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	d002      	beq.n	800dc44 <ai_check_custom_types+0x14>
 800dc3e:	2000      	movs	r0, #0
 800dc40:	b002      	add	sp, #8
 800dc42:	4770      	bx	lr
 800dc44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d004      	beq.n	800dc56 <ai_check_custom_types+0x26>
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	f080 0001 	eor.w	r0, r0, #1
 800dc52:	b002      	add	sp, #8
 800dc54:	4770      	bx	lr
 800dc56:	7842      	ldrb	r2, [r0, #1]
 800dc58:	3001      	adds	r0, #1
 800dc5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d1f4      	bne.n	800dc4c <ai_check_custom_types+0x1c>
 800dc62:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800dc66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d1ee      	bne.n	800dc4c <ai_check_custom_types+0x1c>
 800dc6e:	7842      	ldrb	r2, [r0, #1]
 800dc70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d1e9      	bne.n	800dc4c <ai_check_custom_types+0x1c>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e7e8      	b.n	800dc4e <ai_check_custom_types+0x1e>
 800dc7c:	84048403 	.word	0x84048403

0800dc80 <ai_layers_init_all>:
 800dc80:	2100      	movs	r1, #0
 800dc82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc84:	b13b      	cbz	r3, 800dc96 <ai_layers_init_all+0x16>
 800dc86:	691a      	ldr	r2, [r3, #16]
 800dc88:	3101      	adds	r1, #1
 800dc8a:	60d8      	str	r0, [r3, #12]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	4613      	mov	r3, r2
 800dc90:	d001      	beq.n	800dc96 <ai_layers_init_all+0x16>
 800dc92:	2a00      	cmp	r2, #0
 800dc94:	d1f6      	bne.n	800dc84 <ai_layers_init_all+0x4>
 800dc96:	4608      	mov	r0, r1
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop

0800dc9c <ai_layers_post_init_all>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	2500      	movs	r5, #0
 800dca0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800dca2:	b16c      	cbz	r4, 800dcc0 <ai_layers_post_init_all+0x24>
 800dca4:	6863      	ldr	r3, [r4, #4]
 800dca6:	07db      	lsls	r3, r3, #31
 800dca8:	d504      	bpl.n	800dcb4 <ai_layers_post_init_all+0x18>
 800dcaa:	6a23      	ldr	r3, [r4, #32]
 800dcac:	4620      	mov	r0, r4
 800dcae:	b10b      	cbz	r3, 800dcb4 <ai_layers_post_init_all+0x18>
 800dcb0:	3501      	adds	r5, #1
 800dcb2:	4798      	blx	r3
 800dcb4:	6923      	ldr	r3, [r4, #16]
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	461c      	mov	r4, r3
 800dcba:	d001      	beq.n	800dcc0 <ai_layers_post_init_all+0x24>
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1f0      	bne.n	800dca2 <ai_layers_post_init_all+0x6>
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}

0800dcc4 <ai_layers_forward_all>:
 800dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800dccc:	4604      	mov	r4, r0
 800dcce:	f1b8 0f00 	cmp.w	r8, #0
 800dcd2:	d02a      	beq.n	800dd2a <ai_layers_forward_all+0x66>
 800dcd4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800dcd6:	6381      	str	r1, [r0, #56]	; 0x38
 800dcd8:	b319      	cbz	r1, 800dd22 <ai_layers_forward_all+0x5e>
 800dcda:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dcdc:	2001      	movs	r0, #1
 800dcde:	47c0      	blx	r8
 800dce0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dce2:	b1f6      	cbz	r6, 800dd22 <ai_layers_forward_all+0x5e>
 800dce4:	2700      	movs	r7, #0
 800dce6:	4631      	mov	r1, r6
 800dce8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dcea:	2002      	movs	r0, #2
 800dcec:	47c0      	blx	r8
 800dcee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	696b      	ldr	r3, [r5, #20]
 800dcf4:	4798      	blx	r3
 800dcf6:	692e      	ldr	r6, [r5, #16]
 800dcf8:	2003      	movs	r0, #3
 800dcfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dcfc:	42b5      	cmp	r5, r6
 800dcfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd00:	d007      	beq.n	800dd12 <ai_layers_forward_all+0x4e>
 800dd02:	47c0      	blx	r8
 800dd04:	3701      	adds	r7, #1
 800dd06:	63a6      	str	r6, [r4, #56]	; 0x38
 800dd08:	2e00      	cmp	r6, #0
 800dd0a:	d1ec      	bne.n	800dce6 <ai_layers_forward_all+0x22>
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd12:	2003      	movs	r0, #3
 800dd14:	3701      	adds	r7, #1
 800dd16:	47c0      	blx	r8
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800dd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd22:	2700      	movs	r7, #0
 800dd24:	4638      	mov	r0, r7
 800dd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800dd2c:	6385      	str	r5, [r0, #56]	; 0x38
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	d0f7      	beq.n	800dd22 <ai_layers_forward_all+0x5e>
 800dd32:	4647      	mov	r7, r8
 800dd34:	696b      	ldr	r3, [r5, #20]
 800dd36:	4628      	mov	r0, r5
 800dd38:	4798      	blx	r3
 800dd3a:	462b      	mov	r3, r5
 800dd3c:	692d      	ldr	r5, [r5, #16]
 800dd3e:	429d      	cmp	r5, r3
 800dd40:	d004      	beq.n	800dd4c <ai_layers_forward_all+0x88>
 800dd42:	3701      	adds	r7, #1
 800dd44:	63a5      	str	r5, [r4, #56]	; 0x38
 800dd46:	2d00      	cmp	r5, #0
 800dd48:	d1f4      	bne.n	800dd34 <ai_layers_forward_all+0x70>
 800dd4a:	e7df      	b.n	800dd0c <ai_layers_forward_all+0x48>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	3701      	adds	r7, #1
 800dd50:	63a3      	str	r3, [r4, #56]	; 0x38
 800dd52:	e7db      	b.n	800dd0c <ai_layers_forward_all+0x48>

0800dd54 <forward_dense>:
 800dd54:	6983      	ldr	r3, [r0, #24]
 800dd56:	881a      	ldrh	r2, [r3, #0]
 800dd58:	2a00      	cmp	r2, #0
 800dd5a:	f000 80f0 	beq.w	800df3e <forward_dense+0x1ea>
 800dd5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd62:	ed2d 8b02 	vpush	{d8}
 800dd66:	6858      	ldr	r0, [r3, #4]
 800dd68:	b09b      	sub	sp, #108	; 0x6c
 800dd6a:	6845      	ldr	r5, [r0, #4]
 800dd6c:	b105      	cbz	r5, 800dd70 <forward_dense+0x1c>
 800dd6e:	682d      	ldr	r5, [r5, #0]
 800dd70:	2a01      	cmp	r2, #1
 800dd72:	f000 840a 	beq.w	800e58a <forward_dense+0x836>
 800dd76:	6906      	ldr	r6, [r0, #16]
 800dd78:	b106      	cbz	r6, 800dd7c <forward_dense+0x28>
 800dd7a:	6836      	ldr	r6, [r6, #0]
 800dd7c:	2a02      	cmp	r2, #2
 800dd7e:	f000 80e0 	beq.w	800df42 <forward_dense+0x1ee>
 800dd82:	69c3      	ldr	r3, [r0, #28]
 800dd84:	930d      	str	r3, [sp, #52]	; 0x34
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f000 83f1 	beq.w	800e56e <forward_dense+0x81a>
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	8b03      	ldrh	r3, [r0, #24]
 800dd90:	6809      	ldr	r1, [r1, #0]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	910f      	str	r1, [sp, #60]	; 0x3c
 800dd96:	f240 83ec 	bls.w	800e572 <forward_dense+0x81e>
 800dd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	930d      	str	r3, [sp, #52]	; 0x34
 800dda0:	460b      	mov	r3, r1
 800dda2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800dda6:	2a03      	cmp	r2, #3
 800dda8:	68eb      	ldr	r3, [r5, #12]
 800ddaa:	68f7      	ldr	r7, [r6, #12]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	687c      	ldr	r4, [r7, #4]
 800ddb0:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	9419      	str	r4, [sp, #100]	; 0x64
 800ddba:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800ddbe:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800ddc2:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800ddc6:	fb01 f404 	mul.w	r4, r1, r4
 800ddca:	fa4e f10c 	asr.w	r1, lr, ip
 800ddce:	9116      	str	r1, [sp, #88]	; 0x58
 800ddd0:	f000 83d8 	beq.w	800e584 <forward_dense+0x830>
 800ddd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ddd6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	f000 83c2 	beq.w	800e564 <forward_dense+0x810>
 800dde0:	6812      	ldr	r2, [r2, #0]
 800dde2:	2a00      	cmp	r2, #0
 800dde4:	f000 83be 	beq.w	800e564 <forward_dense+0x810>
 800dde8:	2b04      	cmp	r3, #4
 800ddea:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800ddee:	f000 83a8 	beq.w	800e542 <forward_dense+0x7ee>
 800ddf2:	2b08      	cmp	r3, #8
 800ddf4:	f000 83a5 	beq.w	800e542 <forward_dense+0x7ee>
 800ddf8:	f04f 0a00 	mov.w	sl, #0
 800ddfc:	69ab      	ldr	r3, [r5, #24]
 800ddfe:	fb07 f404 	mul.w	r4, r7, r4
 800de02:	69b2      	ldr	r2, [r6, #24]
 800de04:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800de08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de0a:	6892      	ldr	r2, [r2, #8]
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800de12:	9206      	str	r2, [sp, #24]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	428a      	cmp	r2, r1
 800de18:	9110      	str	r1, [sp, #64]	; 0x40
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de1e:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800de22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de26:	900e      	str	r0, [sp, #56]	; 0x38
 800de28:	9303      	str	r3, [sp, #12]
 800de2a:	f080 8380 	bcs.w	800e52e <forward_dense+0x7da>
 800de2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800de30:	4654      	mov	r4, sl
 800de32:	4bb9      	ldr	r3, [pc, #740]	; (800e118 <forward_dense+0x3c4>)
 800de34:	46ca      	mov	sl, r9
 800de36:	08d0      	lsrs	r0, r2, #3
 800de38:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800e11c <forward_dense+0x3c8>
 800de3c:	4413      	add	r3, r2
 800de3e:	9009      	str	r0, [sp, #36]	; 0x24
 800de40:	0099      	lsls	r1, r3, #2
 800de42:	f022 0301 	bic.w	r3, r2, #1
 800de46:	f002 0201 	and.w	r2, r2, #1
 800de4a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800de4e:	9118      	str	r1, [sp, #96]	; 0x60
 800de50:	920a      	str	r2, [sp, #40]	; 0x28
 800de52:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800de56:	9305      	str	r3, [sp, #20]
 800de58:	f101 0320 	add.w	r3, r1, #32
 800de5c:	9207      	str	r2, [sp, #28]
 800de5e:	9311      	str	r3, [sp, #68]	; 0x44
 800de60:	444b      	add	r3, r9
 800de62:	469b      	mov	fp, r3
 800de64:	930b      	str	r3, [sp, #44]	; 0x2c
 800de66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de68:	699b      	ldr	r3, [r3, #24]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de6e:	b10b      	cbz	r3, 800de74 <forward_dense+0x120>
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	2c00      	cmp	r4, #0
 800de76:	f000 834b 	beq.w	800e510 <forward_dense+0x7bc>
 800de7a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800de7c:	2904      	cmp	r1, #4
 800de7e:	f000 826a 	beq.w	800e356 <forward_dense+0x602>
 800de82:	9903      	ldr	r1, [sp, #12]
 800de84:	9806      	ldr	r0, [sp, #24]
 800de86:	4281      	cmp	r1, r0
 800de88:	f240 8356 	bls.w	800e538 <forward_dense+0x7e4>
 800de8c:	4686      	mov	lr, r0
 800de8e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800de90:	eb00 090a 	add.w	r9, r0, sl
 800de94:	0941      	lsrs	r1, r0, #5
 800de96:	f10a 0004 	add.w	r0, sl, #4
 800de9a:	f8cd 9020 	str.w	r9, [sp, #32]
 800de9e:	9012      	str	r0, [sp, #72]	; 0x48
 800dea0:	1c48      	adds	r0, r1, #1
 800dea2:	00c9      	lsls	r1, r1, #3
 800dea4:	3110      	adds	r1, #16
 800dea6:	9115      	str	r1, [sp, #84]	; 0x54
 800dea8:	00c1      	lsls	r1, r0, #3
 800deaa:	9113      	str	r1, [sp, #76]	; 0x4c
 800deac:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800deb0:	9114      	str	r1, [sp, #80]	; 0x50
 800deb2:	f1a9 0104 	sub.w	r1, r9, #4
 800deb6:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800deba:	910c      	str	r1, [sp, #48]	; 0x30
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 8128 	beq.w	800e112 <forward_dense+0x3be>
 800dec2:	ecb3 5a01 	vldmia	r3!, {s10}
 800dec6:	f1b9 0f07 	cmp.w	r9, #7
 800deca:	d83d      	bhi.n	800df48 <forward_dense+0x1f4>
 800decc:	45da      	cmp	sl, fp
 800dece:	d211      	bcs.n	800def4 <forward_dense+0x1a0>
 800ded0:	eddf 7a92 	vldr	s15, [pc, #584]	; 800e11c <forward_dense+0x3c8>
 800ded4:	4650      	mov	r0, sl
 800ded6:	4615      	mov	r5, r2
 800ded8:	f815 1b01 	ldrb.w	r1, [r5], #1
 800dedc:	ecb0 7a01 	vldmia	r0!, {s14}
 800dee0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dee4:	4558      	cmp	r0, fp
 800dee6:	edd1 6a00 	vldr	s13, [r1]
 800deea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800deee:	d3f3      	bcc.n	800ded8 <forward_dense+0x184>
 800def0:	ee35 5a27 	vadd.f32	s10, s10, s15
 800def4:	9904      	ldr	r1, [sp, #16]
 800def6:	ecae 5a01 	vstmia	lr!, {s10}
 800defa:	440a      	add	r2, r1
 800defc:	9903      	ldr	r1, [sp, #12]
 800defe:	458e      	cmp	lr, r1
 800df00:	d3dc      	bcc.n	800debc <forward_dense+0x168>
 800df02:	9a06      	ldr	r2, [sp, #24]
 800df04:	1a8b      	subs	r3, r1, r2
 800df06:	3b01      	subs	r3, #1
 800df08:	f023 0303 	bic.w	r3, r3, #3
 800df0c:	3304      	adds	r3, #4
 800df0e:	18d3      	adds	r3, r2, r3
 800df10:	4619      	mov	r1, r3
 800df12:	9306      	str	r3, [sp, #24]
 800df14:	9b03      	ldr	r3, [sp, #12]
 800df16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df18:	9810      	ldr	r0, [sp, #64]	; 0x40
 800df1a:	4413      	add	r3, r2
 800df1c:	9a07      	ldr	r2, [sp, #28]
 800df1e:	4281      	cmp	r1, r0
 800df20:	9303      	str	r3, [sp, #12]
 800df22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df24:	441a      	add	r2, r3
 800df26:	449b      	add	fp, r3
 800df28:	9207      	str	r2, [sp, #28]
 800df2a:	9a05      	ldr	r2, [sp, #20]
 800df2c:	441a      	add	r2, r3
 800df2e:	9205      	str	r2, [sp, #20]
 800df30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df32:	4692      	mov	sl, r2
 800df34:	f080 82fb 	bcs.w	800e52e <forward_dense+0x7da>
 800df38:	441a      	add	r2, r3
 800df3a:	920b      	str	r2, [sp, #44]	; 0x2c
 800df3c:	e793      	b.n	800de66 <forward_dense+0x112>
 800df3e:	6853      	ldr	r3, [r2, #4]
 800df40:	deff      	udf	#255	; 0xff
 800df42:	2300      	movs	r3, #0
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	deff      	udf	#255	; 0xff
 800df48:	f002 0103 	and.w	r1, r2, #3
 800df4c:	2902      	cmp	r1, #2
 800df4e:	f000 81e6 	beq.w	800e31e <forward_dense+0x5ca>
 800df52:	2903      	cmp	r1, #3
 800df54:	f000 80e4 	beq.w	800e120 <forward_dense+0x3cc>
 800df58:	2901      	cmp	r1, #1
 800df5a:	f000 81ef 	beq.w	800e33c <forward_dense+0x5e8>
 800df5e:	9908      	ldr	r1, [sp, #32]
 800df60:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800e11c <forward_dense+0x3c8>
 800df64:	458a      	cmp	sl, r1
 800df66:	f200 82e9 	bhi.w	800e53c <forward_dense+0x7e8>
 800df6a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800df6c:	f102 0108 	add.w	r1, r2, #8
 800df70:	f10a 0020 	add.w	r0, sl, #32
 800df74:	18ae      	adds	r6, r5, r2
 800df76:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800df7a:	3108      	adds	r1, #8
 800df7c:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800df80:	3020      	adds	r0, #32
 800df82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800df86:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800df8a:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800df8e:	edd5 7a00 	vldr	s15, [r5]
 800df92:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800df96:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800df9a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800df9e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dfa2:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800dfa6:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800dfaa:	edd5 2a00 	vldr	s5, [r5]
 800dfae:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800dfb2:	eee2 7a83 	vfma.f32	s15, s5, s6
 800dfb6:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800dfba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dfbe:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800dfc2:	ed95 3a00 	vldr	s6, [r5]
 800dfc6:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800dfca:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dfce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dfd2:	edd5 3a00 	vldr	s7, [r5]
 800dfd6:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800dfda:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dfde:	eee3 7a84 	vfma.f32	s15, s7, s8
 800dfe2:	ed95 4a00 	vldr	s8, [r5]
 800dfe6:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800dfea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dfee:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dff2:	edd5 4a00 	vldr	s9, [r5]
 800dff6:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800dffa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dffe:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800e002:	edd5 5a00 	vldr	s11, [r5]
 800e006:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800e00a:	428e      	cmp	r6, r1
 800e00c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e010:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e014:	ed95 6a00 	vldr	s12, [r5]
 800e018:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e01c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e020:	d1a9      	bne.n	800df76 <forward_dense+0x222>
 800e022:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e024:	1850      	adds	r0, r2, r1
 800e026:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e028:	4559      	cmp	r1, fp
 800e02a:	d26f      	bcs.n	800e10c <forward_dense+0x3b8>
 800e02c:	7805      	ldrb	r5, [r0, #0]
 800e02e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e032:	edd5 7a00 	vldr	s15, [r5]
 800e036:	460d      	mov	r5, r1
 800e038:	ecf5 6a01 	vldmia	r5!, {s13}
 800e03c:	45ab      	cmp	fp, r5
 800e03e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e042:	d963      	bls.n	800e10c <forward_dense+0x3b8>
 800e044:	7845      	ldrb	r5, [r0, #1]
 800e046:	edd1 6a01 	vldr	s13, [r1, #4]
 800e04a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e04e:	edd5 7a00 	vldr	s15, [r5]
 800e052:	f101 0508 	add.w	r5, r1, #8
 800e056:	45ab      	cmp	fp, r5
 800e058:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e05c:	d956      	bls.n	800e10c <forward_dense+0x3b8>
 800e05e:	7885      	ldrb	r5, [r0, #2]
 800e060:	edd1 6a02 	vldr	s13, [r1, #8]
 800e064:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e068:	edd5 7a00 	vldr	s15, [r5]
 800e06c:	f101 050c 	add.w	r5, r1, #12
 800e070:	45ab      	cmp	fp, r5
 800e072:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e076:	d949      	bls.n	800e10c <forward_dense+0x3b8>
 800e078:	78c5      	ldrb	r5, [r0, #3]
 800e07a:	edd1 6a03 	vldr	s13, [r1, #12]
 800e07e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e082:	edd5 7a00 	vldr	s15, [r5]
 800e086:	f101 0510 	add.w	r5, r1, #16
 800e08a:	45ab      	cmp	fp, r5
 800e08c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e090:	d93c      	bls.n	800e10c <forward_dense+0x3b8>
 800e092:	7905      	ldrb	r5, [r0, #4]
 800e094:	edd1 6a04 	vldr	s13, [r1, #16]
 800e098:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e09c:	edd5 7a00 	vldr	s15, [r5]
 800e0a0:	f101 0514 	add.w	r5, r1, #20
 800e0a4:	45ab      	cmp	fp, r5
 800e0a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0aa:	d92f      	bls.n	800e10c <forward_dense+0x3b8>
 800e0ac:	7945      	ldrb	r5, [r0, #5]
 800e0ae:	edd1 6a05 	vldr	s13, [r1, #20]
 800e0b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e0b6:	edd5 7a00 	vldr	s15, [r5]
 800e0ba:	f101 0518 	add.w	r5, r1, #24
 800e0be:	45ab      	cmp	fp, r5
 800e0c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0c4:	d922      	bls.n	800e10c <forward_dense+0x3b8>
 800e0c6:	7985      	ldrb	r5, [r0, #6]
 800e0c8:	edd1 6a06 	vldr	s13, [r1, #24]
 800e0cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e0d0:	edd5 7a00 	vldr	s15, [r5]
 800e0d4:	f101 051c 	add.w	r5, r1, #28
 800e0d8:	45ab      	cmp	fp, r5
 800e0da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0de:	d915      	bls.n	800e10c <forward_dense+0x3b8>
 800e0e0:	79c5      	ldrb	r5, [r0, #7]
 800e0e2:	edd1 6a07 	vldr	s13, [r1, #28]
 800e0e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e0ea:	edd5 7a00 	vldr	s15, [r5]
 800e0ee:	f101 0520 	add.w	r5, r1, #32
 800e0f2:	45ab      	cmp	fp, r5
 800e0f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0f8:	d908      	bls.n	800e10c <forward_dense+0x3b8>
 800e0fa:	edd1 7a08 	vldr	s15, [r1, #32]
 800e0fe:	7a01      	ldrb	r1, [r0, #8]
 800e100:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e104:	edd1 6a00 	vldr	s13, [r1]
 800e108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e10c:	ee35 5a07 	vadd.f32	s10, s10, s14
 800e110:	e6f0      	b.n	800def4 <forward_dense+0x1a0>
 800e112:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800e11c <forward_dense+0x3c8>
 800e116:	e6d6      	b.n	800dec6 <forward_dense+0x172>
 800e118:	3ffffff8 	.word	0x3ffffff8
 800e11c:	00000000 	.word	0x00000000
 800e120:	eeb0 7a48 	vmov.f32	s14, s16
 800e124:	4650      	mov	r0, sl
 800e126:	4611      	mov	r1, r2
 800e128:	468c      	mov	ip, r1
 800e12a:	4606      	mov	r6, r0
 800e12c:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800e130:	ecf6 7a01 	vldmia	r6!, {s15}
 800e134:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e138:	edd5 6a00 	vldr	s13, [r5]
 800e13c:	9d08      	ldr	r5, [sp, #32]
 800e13e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e142:	42ae      	cmp	r6, r5
 800e144:	d866      	bhi.n	800e214 <forward_dense+0x4c0>
 800e146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e148:	f101 0711 	add.w	r7, r1, #17
 800e14c:	3109      	adds	r1, #9
 800e14e:	eba5 0800 	sub.w	r8, r5, r0
 800e152:	3024      	adds	r0, #36	; 0x24
 800e154:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e158:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800e15c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800e160:	3108      	adds	r1, #8
 800e162:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800e166:	3020      	adds	r0, #32
 800e168:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e16c:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800e170:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800e174:	edd5 7a00 	vldr	s15, [r5]
 800e178:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800e17c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800e180:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800e184:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e188:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800e18c:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800e190:	edd5 2a00 	vldr	s5, [r5]
 800e194:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800e198:	eee2 7a83 	vfma.f32	s15, s5, s6
 800e19c:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800e1a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1a4:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800e1a8:	ed95 3a00 	vldr	s6, [r5]
 800e1ac:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800e1b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e1b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1b8:	edd5 3a00 	vldr	s7, [r5]
 800e1bc:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800e1c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1c4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e1c8:	ed95 4a00 	vldr	s8, [r5]
 800e1cc:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800e1d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e1d8:	edd5 4a00 	vldr	s9, [r5]
 800e1dc:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800e1e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1e4:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800e1e8:	edd5 5a00 	vldr	s11, [r5]
 800e1ec:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800e1f0:	428f      	cmp	r7, r1
 800e1f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1f6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e1fa:	ed95 6a00 	vldr	s12, [r5]
 800e1fe:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e202:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e206:	d1a9      	bne.n	800e15c <forward_dense+0x408>
 800e208:	f108 0801 	add.w	r8, r8, #1
 800e20c:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800e210:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800e214:	455e      	cmp	r6, fp
 800e216:	f4bf af79 	bcs.w	800e10c <forward_dense+0x3b8>
 800e21a:	f89c 1000 	ldrb.w	r1, [ip]
 800e21e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e222:	edd1 7a00 	vldr	s15, [r1]
 800e226:	4631      	mov	r1, r6
 800e228:	ecf1 6a01 	vldmia	r1!, {s13}
 800e22c:	458b      	cmp	fp, r1
 800e22e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e232:	f67f af6b 	bls.w	800e10c <forward_dense+0x3b8>
 800e236:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800e23a:	edd6 6a01 	vldr	s13, [r6, #4]
 800e23e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e242:	edd1 7a00 	vldr	s15, [r1]
 800e246:	f106 0108 	add.w	r1, r6, #8
 800e24a:	458b      	cmp	fp, r1
 800e24c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e250:	f67f af5c 	bls.w	800e10c <forward_dense+0x3b8>
 800e254:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800e258:	edd6 6a02 	vldr	s13, [r6, #8]
 800e25c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e260:	edd1 7a00 	vldr	s15, [r1]
 800e264:	f106 010c 	add.w	r1, r6, #12
 800e268:	458b      	cmp	fp, r1
 800e26a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e26e:	f67f af4d 	bls.w	800e10c <forward_dense+0x3b8>
 800e272:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800e276:	edd6 6a03 	vldr	s13, [r6, #12]
 800e27a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e27e:	edd1 7a00 	vldr	s15, [r1]
 800e282:	f106 0110 	add.w	r1, r6, #16
 800e286:	458b      	cmp	fp, r1
 800e288:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e28c:	f67f af3e 	bls.w	800e10c <forward_dense+0x3b8>
 800e290:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800e294:	edd6 6a04 	vldr	s13, [r6, #16]
 800e298:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e29c:	edd1 7a00 	vldr	s15, [r1]
 800e2a0:	f106 0114 	add.w	r1, r6, #20
 800e2a4:	458b      	cmp	fp, r1
 800e2a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2aa:	f67f af2f 	bls.w	800e10c <forward_dense+0x3b8>
 800e2ae:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800e2b2:	edd6 6a05 	vldr	s13, [r6, #20]
 800e2b6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e2ba:	edd1 7a00 	vldr	s15, [r1]
 800e2be:	f106 0118 	add.w	r1, r6, #24
 800e2c2:	458b      	cmp	fp, r1
 800e2c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2c8:	f67f af20 	bls.w	800e10c <forward_dense+0x3b8>
 800e2cc:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800e2d0:	edd6 6a06 	vldr	s13, [r6, #24]
 800e2d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e2d8:	edd1 7a00 	vldr	s15, [r1]
 800e2dc:	f106 011c 	add.w	r1, r6, #28
 800e2e0:	458b      	cmp	fp, r1
 800e2e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2e6:	f67f af11 	bls.w	800e10c <forward_dense+0x3b8>
 800e2ea:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800e2ee:	edd6 6a07 	vldr	s13, [r6, #28]
 800e2f2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e2f6:	edd1 7a00 	vldr	s15, [r1]
 800e2fa:	f106 0120 	add.w	r1, r6, #32
 800e2fe:	458b      	cmp	fp, r1
 800e300:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e304:	f67f af02 	bls.w	800e10c <forward_dense+0x3b8>
 800e308:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800e30c:	edd6 7a08 	vldr	s15, [r6, #32]
 800e310:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e314:	edd1 6a00 	vldr	s13, [r1]
 800e318:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e31c:	e6f6      	b.n	800e10c <forward_dense+0x3b8>
 800e31e:	eeb0 7a48 	vmov.f32	s14, s16
 800e322:	4650      	mov	r0, sl
 800e324:	4611      	mov	r1, r2
 800e326:	f811 5b01 	ldrb.w	r5, [r1], #1
 800e32a:	ecf0 7a01 	vldmia	r0!, {s15}
 800e32e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e332:	edd5 6a00 	vldr	s13, [r5]
 800e336:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e33a:	e6f5      	b.n	800e128 <forward_dense+0x3d4>
 800e33c:	4611      	mov	r1, r2
 800e33e:	edda 7a00 	vldr	s15, [sl]
 800e342:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e344:	f811 5b01 	ldrb.w	r5, [r1], #1
 800e348:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e34c:	ed95 7a00 	vldr	s14, [r5]
 800e350:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e354:	e7e7      	b.n	800e326 <forward_dense+0x5d2>
 800e356:	9803      	ldr	r0, [sp, #12]
 800e358:	9906      	ldr	r1, [sp, #24]
 800e35a:	4288      	cmp	r0, r1
 800e35c:	f67f adda 	bls.w	800df14 <forward_dense+0x1c0>
 800e360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e362:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800e366:	468b      	mov	fp, r1
 800e368:	f100 0c01 	add.w	ip, r0, #1
 800e36c:	9805      	ldr	r0, [sp, #20]
 800e36e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800e372:	3801      	subs	r0, #1
 800e374:	9008      	str	r0, [sp, #32]
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 80bf 	beq.w	800e4fa <forward_dense+0x7a6>
 800e37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e37e:	ecf3 2a01 	vldmia	r3!, {s5}
 800e382:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e11c <forward_dense+0x3c8>
 800e386:	2900      	cmp	r1, #0
 800e388:	f000 80bf 	beq.w	800e50a <forward_dense+0x7b6>
 800e38c:	1d10      	adds	r0, r2, #4
 800e38e:	f10a 0120 	add.w	r1, sl, #32
 800e392:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800e396:	3004      	adds	r0, #4
 800e398:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800e39c:	3120      	adds	r1, #32
 800e39e:	f007 0e0f 	and.w	lr, r7, #15
 800e3a2:	093f      	lsrs	r7, r7, #4
 800e3a4:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800e3a8:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800e3ac:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800e3b0:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e3b4:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800e3b8:	edde 7a00 	vldr	s15, [lr]
 800e3bc:	ed97 3a00 	vldr	s6, [r7]
 800e3c0:	0937      	lsrs	r7, r6, #4
 800e3c2:	ee67 7a82 	vmul.f32	s15, s15, s4
 800e3c6:	f006 060f 	and.w	r6, r6, #15
 800e3ca:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e3ce:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800e3d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e3d6:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800e3da:	eee3 7a04 	vfma.f32	s15, s6, s8
 800e3de:	ed97 3a00 	vldr	s6, [r7]
 800e3e2:	ed96 4a00 	vldr	s8, [r6]
 800e3e6:	092e      	lsrs	r6, r5, #4
 800e3e8:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800e3ec:	f005 050f 	and.w	r5, r5, #15
 800e3f0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e3f4:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800e3f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e3fc:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800e400:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800e404:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e408:	eee4 7a05 	vfma.f32	s15, s8, s10
 800e40c:	ed96 4a00 	vldr	s8, [r6]
 800e410:	ed95 5a00 	vldr	s10, [r5]
 800e414:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800e418:	4560      	cmp	r0, ip
 800e41a:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800e41e:	f005 050f 	and.w	r5, r5, #15
 800e422:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e426:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e42a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e42e:	eee5 7a06 	vfma.f32	s15, s10, s12
 800e432:	ed96 5a00 	vldr	s10, [r6]
 800e436:	ed95 6a00 	vldr	s12, [r5]
 800e43a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e43e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e442:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e446:	d1a4      	bne.n	800e392 <forward_dense+0x63e>
 800e448:	f1ac 0804 	sub.w	r8, ip, #4
 800e44c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800e450:	9905      	ldr	r1, [sp, #20]
 800e452:	458e      	cmp	lr, r1
 800e454:	d229      	bcs.n	800e4aa <forward_dense+0x756>
 800e456:	9908      	ldr	r1, [sp, #32]
 800e458:	f10e 0008 	add.w	r0, lr, #8
 800e45c:	f108 36ff 	add.w	r6, r8, #4294967295
 800e460:	eba1 070e 	sub.w	r7, r1, lr
 800e464:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800e468:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800e46c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e470:	3008      	adds	r0, #8
 800e472:	ed50 5a03 	vldr	s11, [r0, #-12]
 800e476:	f001 050f 	and.w	r5, r1, #15
 800e47a:	0909      	lsrs	r1, r1, #4
 800e47c:	ed50 6a04 	vldr	s13, [r0, #-16]
 800e480:	42b7      	cmp	r7, r6
 800e482:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e486:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e48a:	edd5 7a00 	vldr	s15, [r5]
 800e48e:	ed91 6a00 	vldr	s12, [r1]
 800e492:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e496:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e49a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e49e:	d1e5      	bne.n	800e46c <forward_dense+0x718>
 800e4a0:	f109 0901 	add.w	r9, r9, #1
 800e4a4:	44c8      	add	r8, r9
 800e4a6:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800e4aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4ac:	b1c1      	cbz	r1, 800e4e0 <forward_dense+0x78c>
 800e4ae:	f898 1000 	ldrb.w	r1, [r8]
 800e4b2:	edde 7a00 	vldr	s15, [lr]
 800e4b6:	0909      	lsrs	r1, r1, #4
 800e4b8:	9804      	ldr	r0, [sp, #16]
 800e4ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e4be:	4402      	add	r2, r0
 800e4c0:	4484      	add	ip, r0
 800e4c2:	edd1 6a00 	vldr	s13, [r1]
 800e4c6:	9903      	ldr	r1, [sp, #12]
 800e4c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e4cc:	ee72 2a87 	vadd.f32	s5, s5, s14
 800e4d0:	eceb 2a01 	vstmia	fp!, {s5}
 800e4d4:	4559      	cmp	r1, fp
 800e4d6:	f63f af4e 	bhi.w	800e376 <forward_dense+0x622>
 800e4da:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800e4de:	e510      	b.n	800df02 <forward_dense+0x1ae>
 800e4e0:	9904      	ldr	r1, [sp, #16]
 800e4e2:	ee32 7a87 	vadd.f32	s14, s5, s14
 800e4e6:	440a      	add	r2, r1
 800e4e8:	448c      	add	ip, r1
 800e4ea:	9903      	ldr	r1, [sp, #12]
 800e4ec:	ecab 7a01 	vstmia	fp!, {s14}
 800e4f0:	458b      	cmp	fp, r1
 800e4f2:	d2f2      	bcs.n	800e4da <forward_dense+0x786>
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f47f af41 	bne.w	800e37c <forward_dense+0x628>
 800e4fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4fc:	eef0 2a48 	vmov.f32	s5, s16
 800e500:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800e590 <forward_dense+0x83c>
 800e504:	2900      	cmp	r1, #0
 800e506:	f47f af41 	bne.w	800e38c <forward_dense+0x638>
 800e50a:	46d6      	mov	lr, sl
 800e50c:	4690      	mov	r8, r2
 800e50e:	e79f      	b.n	800e450 <forward_dense+0x6fc>
 800e510:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e512:	4651      	mov	r1, sl
 800e514:	9d06      	ldr	r5, [sp, #24]
 800e516:	9001      	str	r0, [sp, #4]
 800e518:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e51a:	9000      	str	r0, [sp, #0]
 800e51c:	4628      	mov	r0, r5
 800e51e:	f000 f96d 	bl	800e7fc <forward_lite_dense_if32of32wf32>
 800e522:	462b      	mov	r3, r5
 800e524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e526:	4413      	add	r3, r2
 800e528:	4619      	mov	r1, r3
 800e52a:	9306      	str	r3, [sp, #24]
 800e52c:	e4f2      	b.n	800df14 <forward_dense+0x1c0>
 800e52e:	b01b      	add	sp, #108	; 0x6c
 800e530:	ecbd 8b02 	vpop	{d8}
 800e534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	4601      	mov	r1, r0
 800e53a:	e4eb      	b.n	800df14 <forward_dense+0x1c0>
 800e53c:	4651      	mov	r1, sl
 800e53e:	4610      	mov	r0, r2
 800e540:	e572      	b.n	800e028 <forward_dense+0x2d4>
 800e542:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800e546:	f1b9 0f00 	cmp.w	r9, #0
 800e54a:	d016      	beq.n	800e57a <forward_dense+0x826>
 800e54c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e550:	f000 fb70 	bl	800ec34 <ai_array_get_byte_size>
 800e554:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800e558:	4602      	mov	r2, r0
 800e55a:	4640      	mov	r0, r8
 800e55c:	4651      	mov	r1, sl
 800e55e:	f000 fa75 	bl	800ea4c <st_int8_copy>
 800e562:	e44b      	b.n	800ddfc <forward_dense+0xa8>
 800e564:	2b04      	cmp	r3, #4
 800e566:	d00a      	beq.n	800e57e <forward_dense+0x82a>
 800e568:	f04f 0900 	mov.w	r9, #0
 800e56c:	e441      	b.n	800ddf2 <forward_dense+0x9e>
 800e56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e570:	e417      	b.n	800dda2 <forward_dense+0x4e>
 800e572:	2300      	movs	r3, #0
 800e574:	930d      	str	r3, [sp, #52]	; 0x34
 800e576:	460b      	mov	r3, r1
 800e578:	e413      	b.n	800dda2 <forward_dense+0x4e>
 800e57a:	46c2      	mov	sl, r8
 800e57c:	e43e      	b.n	800ddfc <forward_dense+0xa8>
 800e57e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800e582:	e43b      	b.n	800ddfc <forward_dense+0xa8>
 800e584:	2300      	movs	r3, #0
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	deff      	udf	#255	; 0xff
 800e58a:	2300      	movs	r3, #0
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	deff      	udf	#255	; 0xff
 800e590:	00000000 	.word	0x00000000

0800e594 <forward_relu>:
 800e594:	6982      	ldr	r2, [r0, #24]
 800e596:	8813      	ldrh	r3, [r2, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d05b      	beq.n	800e654 <forward_relu+0xc0>
 800e59c:	6851      	ldr	r1, [r2, #4]
 800e59e:	684a      	ldr	r2, [r1, #4]
 800e5a0:	b102      	cbz	r2, 800e5a4 <forward_relu+0x10>
 800e5a2:	6812      	ldr	r2, [r2, #0]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	f000 8123 	beq.w	800e7f0 <forward_relu+0x25c>
 800e5aa:	b470      	push	{r4, r5, r6}
 800e5ac:	690b      	ldr	r3, [r1, #16]
 800e5ae:	b103      	cbz	r3, 800e5b2 <forward_relu+0x1e>
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69c6      	ldr	r6, [r0, #28]
 800e5b4:	2e00      	cmp	r6, #0
 800e5b6:	f000 809e 	beq.w	800e6f6 <forward_relu+0x162>
 800e5ba:	6871      	ldr	r1, [r6, #4]
 800e5bc:	6998      	ldr	r0, [r3, #24]
 800e5be:	2901      	cmp	r1, #1
 800e5c0:	f000 80c3 	beq.w	800e74a <forward_relu+0x1b6>
 800e5c4:	6893      	ldr	r3, [r2, #8]
 800e5c6:	6991      	ldr	r1, [r2, #24]
 800e5c8:	0a1b      	lsrs	r3, r3, #8
 800e5ca:	6880      	ldr	r0, [r0, #8]
 800e5cc:	688d      	ldr	r5, [r1, #8]
 800e5ce:	f000 80f2 	beq.w	800e7b6 <forward_relu+0x222>
 800e5d2:	68d4      	ldr	r4, [r2, #12]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5de:	42a3      	cmp	r3, r4
 800e5e0:	fb01 f202 	mul.w	r2, r1, r2
 800e5e4:	d1f9      	bne.n	800e5da <forward_relu+0x46>
 800e5e6:	68b3      	ldr	r3, [r6, #8]
 800e5e8:	ed93 7a02 	vldr	s14, [r3, #8]
 800e5ec:	edd3 6a00 	vldr	s13, [r3]
 800e5f0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e5f4:	ed93 6a01 	vldr	s12, [r3, #4]
 800e5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fc:	d42c      	bmi.n	800e658 <forward_relu+0xc4>
 800e5fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e602:	4413      	add	r3, r2
 800e604:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e608:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e60c:	4295      	cmp	r5, r2
 800e60e:	d81f      	bhi.n	800e650 <forward_relu+0xbc>
 800e610:	3204      	adds	r2, #4
 800e612:	1d01      	adds	r1, r0, #4
 800e614:	e00d      	b.n	800e632 <forward_relu+0x9e>
 800e616:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61e:	db03      	blt.n	800e628 <forward_relu+0x94>
 800e620:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e624:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e628:	3b08      	subs	r3, #8
 800e62a:	ed61 7a01 	vstmdb	r1!, {s15}
 800e62e:	429d      	cmp	r5, r3
 800e630:	d80e      	bhi.n	800e650 <forward_relu+0xbc>
 800e632:	4613      	mov	r3, r2
 800e634:	ed72 7a01 	vldmdb	r2!, {s15}
 800e638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e640:	d9e9      	bls.n	800e616 <forward_relu+0x82>
 800e642:	3b08      	subs	r3, #8
 800e644:	eef0 7a47 	vmov.f32	s15, s14
 800e648:	429d      	cmp	r5, r3
 800e64a:	ed61 7a01 	vstmdb	r1!, {s15}
 800e64e:	d9f0      	bls.n	800e632 <forward_relu+0x9e>
 800e650:	bc70      	pop	{r4, r5, r6}
 800e652:	4770      	bx	lr
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	deff      	udf	#255	; 0xff
 800e658:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e65c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800e660:	4411      	add	r1, r2
 800e662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e666:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800e66a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e66e:	d11f      	bne.n	800e6b0 <forward_relu+0x11c>
 800e670:	429d      	cmp	r5, r3
 800e672:	d8ed      	bhi.n	800e650 <forward_relu+0xbc>
 800e674:	1b5d      	subs	r5, r3, r5
 800e676:	1d1a      	adds	r2, r3, #4
 800e678:	1d01      	adds	r1, r0, #4
 800e67a:	2000      	movs	r0, #0
 800e67c:	f025 0503 	bic.w	r5, r5, #3
 800e680:	1b5b      	subs	r3, r3, r5
 800e682:	ed72 7a01 	vldmdb	r2!, {s15}
 800e686:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e68e:	dc0a      	bgt.n	800e6a6 <forward_relu+0x112>
 800e690:	429a      	cmp	r2, r3
 800e692:	f841 0d04 	str.w	r0, [r1, #-4]!
 800e696:	d0db      	beq.n	800e650 <forward_relu+0xbc>
 800e698:	ed72 7a01 	vldmdb	r2!, {s15}
 800e69c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a4:	ddf4      	ble.n	800e690 <forward_relu+0xfc>
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	ed61 7a01 	vstmdb	r1!, {s15}
 800e6ac:	d1e9      	bne.n	800e682 <forward_relu+0xee>
 800e6ae:	e7cf      	b.n	800e650 <forward_relu+0xbc>
 800e6b0:	429d      	cmp	r5, r3
 800e6b2:	d8cd      	bhi.n	800e650 <forward_relu+0xbc>
 800e6b4:	1b5d      	subs	r5, r3, r5
 800e6b6:	1d1a      	adds	r2, r3, #4
 800e6b8:	1d01      	adds	r1, r0, #4
 800e6ba:	f025 0503 	bic.w	r5, r5, #3
 800e6be:	1b5b      	subs	r3, r3, r5
 800e6c0:	ed72 7a01 	vldmdb	r2!, {s15}
 800e6c4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	db0e      	blt.n	800e6ec <forward_relu+0x158>
 800e6ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e6d8:	ed61 7a01 	vstmdb	r1!, {s15}
 800e6dc:	d0b8      	beq.n	800e650 <forward_relu+0xbc>
 800e6de:	ed72 7a01 	vldmdb	r2!, {s15}
 800e6e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ea:	daf0      	bge.n	800e6ce <forward_relu+0x13a>
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	ed61 7a01 	vstmdb	r1!, {s15}
 800e6f2:	d1e5      	bne.n	800e6c0 <forward_relu+0x12c>
 800e6f4:	e7ac      	b.n	800e650 <forward_relu+0xbc>
 800e6f6:	6999      	ldr	r1, [r3, #24]
 800e6f8:	6893      	ldr	r3, [r2, #8]
 800e6fa:	6990      	ldr	r0, [r2, #24]
 800e6fc:	0a1b      	lsrs	r3, r3, #8
 800e6fe:	6889      	ldr	r1, [r1, #8]
 800e700:	6884      	ldr	r4, [r0, #8]
 800e702:	d06e      	beq.n	800e7e2 <forward_relu+0x24e>
 800e704:	68d5      	ldr	r5, [r2, #12]
 800e706:	2201      	movs	r2, #1
 800e708:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e70c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e710:	429d      	cmp	r5, r3
 800e712:	fb00 f202 	mul.w	r2, r0, r2
 800e716:	d1f9      	bne.n	800e70c <forward_relu+0x178>
 800e718:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e71c:	4413      	add	r3, r2
 800e71e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e722:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e726:	4294      	cmp	r4, r2
 800e728:	d892      	bhi.n	800e650 <forward_relu+0xbc>
 800e72a:	3204      	adds	r2, #4
 800e72c:	3104      	adds	r1, #4
 800e72e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e7f8 <forward_relu+0x264>
 800e732:	4613      	mov	r3, r2
 800e734:	ed72 7a01 	vldmdb	r2!, {s15}
 800e738:	3b08      	subs	r3, #8
 800e73a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e73e:	ed61 7a01 	vstmdb	r1!, {s15}
 800e742:	429c      	cmp	r4, r3
 800e744:	d9f5      	bls.n	800e732 <forward_relu+0x19e>
 800e746:	bc70      	pop	{r4, r5, r6}
 800e748:	4770      	bx	lr
 800e74a:	6993      	ldr	r3, [r2, #24]
 800e74c:	6880      	ldr	r0, [r0, #8]
 800e74e:	689c      	ldr	r4, [r3, #8]
 800e750:	6893      	ldr	r3, [r2, #8]
 800e752:	0a1b      	lsrs	r3, r3, #8
 800e754:	d047      	beq.n	800e7e6 <forward_relu+0x252>
 800e756:	68d5      	ldr	r5, [r2, #12]
 800e758:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e75c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e760:	42ab      	cmp	r3, r5
 800e762:	fb02 f101 	mul.w	r1, r2, r1
 800e766:	d1f9      	bne.n	800e75c <forward_relu+0x1c8>
 800e768:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800e76c:	68b3      	ldr	r3, [r6, #8]
 800e76e:	440a      	add	r2, r1
 800e770:	ed93 7a00 	vldr	s14, [r3]
 800e774:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e778:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e77c:	429c      	cmp	r4, r3
 800e77e:	f63f af67 	bhi.w	800e650 <forward_relu+0xbc>
 800e782:	1d02      	adds	r2, r0, #4
 800e784:	3304      	adds	r3, #4
 800e786:	2000      	movs	r0, #0
 800e788:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e78c:	1f19      	subs	r1, r3, #4
 800e78e:	3b08      	subs	r3, #8
 800e790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e798:	d406      	bmi.n	800e7a8 <forward_relu+0x214>
 800e79a:	429c      	cmp	r4, r3
 800e79c:	f842 0d04 	str.w	r0, [r2, #-4]!
 800e7a0:	f63f af56 	bhi.w	800e650 <forward_relu+0xbc>
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	e7ef      	b.n	800e788 <forward_relu+0x1f4>
 800e7a8:	429c      	cmp	r4, r3
 800e7aa:	ed62 7a01 	vstmdb	r2!, {s15}
 800e7ae:	f63f af4f 	bhi.w	800e650 <forward_relu+0xbc>
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	e7e8      	b.n	800e788 <forward_relu+0x1f4>
 800e7b6:	68b3      	ldr	r3, [r6, #8]
 800e7b8:	ed93 7a02 	vldr	s14, [r3, #8]
 800e7bc:	edd3 6a00 	vldr	s13, [r3]
 800e7c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e7c4:	ed93 6a01 	vldr	s12, [r3, #4]
 800e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7cc:	d401      	bmi.n	800e7d2 <forward_relu+0x23e>
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	e71e      	b.n	800e610 <forward_relu+0x7c>
 800e7d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e7d6:	462b      	mov	r3, r5
 800e7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7dc:	f47f af6a 	bne.w	800e6b4 <forward_relu+0x120>
 800e7e0:	e748      	b.n	800e674 <forward_relu+0xe0>
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	e7a1      	b.n	800e72a <forward_relu+0x196>
 800e7e6:	68b2      	ldr	r2, [r6, #8]
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	ed92 7a00 	vldr	s14, [r2]
 800e7ee:	e7c8      	b.n	800e782 <forward_relu+0x1ee>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	deff      	udf	#255	; 0xff
 800e7f6:	bf00      	nop
 800e7f8:	00000000 	.word	0x00000000

0800e7fc <forward_lite_dense_if32of32wf32>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	ed2d 8b0c 	vpush	{d8-d13}
 800e804:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800e808:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e80c:	4287      	cmp	r7, r0
 800e80e:	f240 8105 	bls.w	800ea1c <forward_lite_dense_if32of32wf32+0x220>
 800e812:	f1a6 0810 	sub.w	r8, r6, #16
 800e816:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e81a:	4605      	mov	r5, r0
 800e81c:	f006 0b0f 	and.w	fp, r6, #15
 800e820:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e824:	f108 0801 	add.w	r8, r8, #1
 800e828:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800e82c:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e830:	2e0f      	cmp	r6, #15
 800e832:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ea48 <forward_lite_dense_if32of32wf32+0x24c>
 800e836:	f240 8102 	bls.w	800ea3e <forward_lite_dense_if32of32wf32+0x242>
 800e83a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e83e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e842:	46b6      	mov	lr, r6
 800e844:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800e848:	f1ae 0e10 	sub.w	lr, lr, #16
 800e84c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e850:	3440      	adds	r4, #64	; 0x40
 800e852:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800e856:	f1be 0f0f 	cmp.w	lr, #15
 800e85a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e85e:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800e862:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e866:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e86a:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800e86e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e872:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800e876:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800e87a:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800e87e:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800e882:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800e886:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800e88a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e88e:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800e892:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800e896:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800e89a:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800e89e:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800e8a2:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800e8a6:	eeed 7a26 	vfma.f32	s15, s26, s13
 800e8aa:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800e8ae:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800e8b2:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800e8b6:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800e8ba:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800e8be:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800e8c2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e8c6:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e8ca:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e8ce:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e8d2:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e8d6:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e8da:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e8de:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e8e2:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e8e6:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e8ea:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e8ee:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e8f2:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e8f6:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e8fa:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e8fe:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e902:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e906:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e90a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e90e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e912:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e916:	d895      	bhi.n	800e844 <forward_lite_dense_if32of32wf32+0x48>
 800e918:	eb02 0e0a 	add.w	lr, r2, sl
 800e91c:	465c      	mov	r4, fp
 800e91e:	46c4      	mov	ip, r8
 800e920:	2c00      	cmp	r4, #0
 800e922:	d075      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e924:	eddc 6a00 	vldr	s13, [ip]
 800e928:	2c01      	cmp	r4, #1
 800e92a:	edde 7a00 	vldr	s15, [lr]
 800e92e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e932:	d06d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e934:	eddc 6a01 	vldr	s13, [ip, #4]
 800e938:	2c02      	cmp	r4, #2
 800e93a:	edde 7a01 	vldr	s15, [lr, #4]
 800e93e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e942:	d065      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e944:	eddc 6a02 	vldr	s13, [ip, #8]
 800e948:	2c03      	cmp	r4, #3
 800e94a:	edde 7a02 	vldr	s15, [lr, #8]
 800e94e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e952:	d05d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e954:	eddc 6a03 	vldr	s13, [ip, #12]
 800e958:	2c04      	cmp	r4, #4
 800e95a:	edde 7a03 	vldr	s15, [lr, #12]
 800e95e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e962:	d055      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e964:	eddc 6a04 	vldr	s13, [ip, #16]
 800e968:	2c05      	cmp	r4, #5
 800e96a:	edde 7a04 	vldr	s15, [lr, #16]
 800e96e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e972:	d04d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e974:	eddc 6a05 	vldr	s13, [ip, #20]
 800e978:	2c06      	cmp	r4, #6
 800e97a:	edde 7a05 	vldr	s15, [lr, #20]
 800e97e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e982:	d045      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e984:	eddc 6a06 	vldr	s13, [ip, #24]
 800e988:	2c07      	cmp	r4, #7
 800e98a:	edde 7a06 	vldr	s15, [lr, #24]
 800e98e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e992:	d03d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e994:	eddc 6a07 	vldr	s13, [ip, #28]
 800e998:	2c08      	cmp	r4, #8
 800e99a:	edde 7a07 	vldr	s15, [lr, #28]
 800e99e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9a2:	d035      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e9a4:	eddc 6a08 	vldr	s13, [ip, #32]
 800e9a8:	2c09      	cmp	r4, #9
 800e9aa:	edde 7a08 	vldr	s15, [lr, #32]
 800e9ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9b2:	d02d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e9b4:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e9b8:	2c0a      	cmp	r4, #10
 800e9ba:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e9be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9c2:	d025      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e9c4:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e9c8:	2c0b      	cmp	r4, #11
 800e9ca:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e9ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9d2:	d01d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e9d4:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e9d8:	2c0c      	cmp	r4, #12
 800e9da:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e9de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9e2:	d015      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e9e4:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e9e8:	3c0d      	subs	r4, #13
 800e9ea:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e9ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9f2:	d00d      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800e9f4:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e9f8:	2c01      	cmp	r4, #1
 800e9fa:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e9fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ea02:	d005      	beq.n	800ea10 <forward_lite_dense_if32of32wf32+0x214>
 800ea04:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800ea08:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800ea0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ea10:	eca5 7a01 	vstmia	r5!, {s14}
 800ea14:	42af      	cmp	r7, r5
 800ea16:	444a      	add	r2, r9
 800ea18:	f63f af0a 	bhi.w	800e830 <forward_lite_dense_if32of32wf32+0x34>
 800ea1c:	b15b      	cbz	r3, 800ea36 <forward_lite_dense_if32of32wf32+0x23a>
 800ea1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea20:	b14a      	cbz	r2, 800ea36 <forward_lite_dense_if32of32wf32+0x23a>
 800ea22:	edd0 7a00 	vldr	s15, [r0]
 800ea26:	ecb3 7a01 	vldmia	r3!, {s14}
 800ea2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea2e:	ece0 7a01 	vstmia	r0!, {s15}
 800ea32:	4287      	cmp	r7, r0
 800ea34:	d1f5      	bne.n	800ea22 <forward_lite_dense_if32of32wf32+0x226>
 800ea36:	ecbd 8b0c 	vpop	{d8-d13}
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	4634      	mov	r4, r6
 800ea40:	4696      	mov	lr, r2
 800ea42:	468c      	mov	ip, r1
 800ea44:	e76c      	b.n	800e920 <forward_lite_dense_if32of32wf32+0x124>
 800ea46:	bf00      	nop
 800ea48:	00000000 	.word	0x00000000

0800ea4c <st_int8_copy>:
 800ea4c:	4288      	cmp	r0, r1
 800ea4e:	d010      	beq.n	800ea72 <st_int8_copy+0x26>
 800ea50:	b17a      	cbz	r2, 800ea72 <st_int8_copy+0x26>
 800ea52:	4288      	cmp	r0, r1
 800ea54:	eb00 0302 	add.w	r3, r0, r2
 800ea58:	d20c      	bcs.n	800ea74 <st_int8_copy+0x28>
 800ea5a:	428b      	cmp	r3, r1
 800ea5c:	d90a      	bls.n	800ea74 <st_int8_copy+0x28>
 800ea5e:	4283      	cmp	r3, r0
 800ea60:	440a      	add	r2, r1
 800ea62:	d906      	bls.n	800ea72 <st_int8_copy+0x26>
 800ea64:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800ea68:	4283      	cmp	r3, r0
 800ea6a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800ea6e:	d1f9      	bne.n	800ea64 <st_int8_copy+0x18>
 800ea70:	4770      	bx	lr
 800ea72:	4770      	bx	lr
 800ea74:	078b      	lsls	r3, r1, #30
 800ea76:	d102      	bne.n	800ea7e <st_int8_copy+0x32>
 800ea78:	e008      	b.n	800ea8c <st_int8_copy+0x40>
 800ea7a:	2a00      	cmp	r2, #0
 800ea7c:	d04d      	beq.n	800eb1a <st_int8_copy+0xce>
 800ea7e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ea82:	3a01      	subs	r2, #1
 800ea84:	f801 3b01 	strb.w	r3, [r1], #1
 800ea88:	078b      	lsls	r3, r1, #30
 800ea8a:	d1f6      	bne.n	800ea7a <st_int8_copy+0x2e>
 800ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800ea94:	d05e      	beq.n	800eb54 <st_int8_copy+0x108>
 800ea96:	ea40 0301 	orr.w	r3, r0, r1
 800ea9a:	075b      	lsls	r3, r3, #29
 800ea9c:	d13e      	bne.n	800eb1c <st_int8_copy+0xd0>
 800ea9e:	f10e 33ff 	add.w	r3, lr, #4294967295
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d93a      	bls.n	800eb1c <st_int8_copy+0xd0>
 800eaa6:	f100 0310 	add.w	r3, r0, #16
 800eaaa:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800eaae:	f101 0c10 	add.w	ip, r1, #16
 800eab2:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800eab6:	3310      	adds	r3, #16
 800eab8:	f10c 0c10 	add.w	ip, ip, #16
 800eabc:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800eac0:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800eac4:	4573      	cmp	r3, lr
 800eac6:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800eaca:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800eace:	d1f2      	bne.n	800eab6 <st_int8_copy+0x6a>
 800ead0:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800ead4:	4421      	add	r1, r4
 800ead6:	4420      	add	r0, r4
 800ead8:	f002 0203 	and.w	r2, r2, #3
 800eadc:	b16b      	cbz	r3, 800eafa <st_int8_copy+0xae>
 800eade:	6804      	ldr	r4, [r0, #0]
 800eae0:	600c      	str	r4, [r1, #0]
 800eae2:	1e5c      	subs	r4, r3, #1
 800eae4:	d005      	beq.n	800eaf2 <st_int8_copy+0xa6>
 800eae6:	6845      	ldr	r5, [r0, #4]
 800eae8:	2c01      	cmp	r4, #1
 800eaea:	604d      	str	r5, [r1, #4]
 800eaec:	d001      	beq.n	800eaf2 <st_int8_copy+0xa6>
 800eaee:	6884      	ldr	r4, [r0, #8]
 800eaf0:	608c      	str	r4, [r1, #8]
 800eaf2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800eaf6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800eafa:	b162      	cbz	r2, 800eb16 <st_int8_copy+0xca>
 800eafc:	f990 3000 	ldrsb.w	r3, [r0]
 800eb00:	3a01      	subs	r2, #1
 800eb02:	700b      	strb	r3, [r1, #0]
 800eb04:	d007      	beq.n	800eb16 <st_int8_copy+0xca>
 800eb06:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eb0a:	2a01      	cmp	r2, #1
 800eb0c:	704b      	strb	r3, [r1, #1]
 800eb0e:	d002      	beq.n	800eb16 <st_int8_copy+0xca>
 800eb10:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800eb14:	708b      	strb	r3, [r1, #2]
 800eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1a:	4770      	bx	lr
 800eb1c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800eb20:	460b      	mov	r3, r1
 800eb22:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800eb26:	4684      	mov	ip, r0
 800eb28:	f8dc 8000 	ldr.w	r8, [ip]
 800eb2c:	3310      	adds	r3, #16
 800eb2e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800eb32:	f10c 0c10 	add.w	ip, ip, #16
 800eb36:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800eb3a:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800eb3e:	f843 8c10 	str.w	r8, [r3, #-16]
 800eb42:	f843 7c0c 	str.w	r7, [r3, #-12]
 800eb46:	f843 6c08 	str.w	r6, [r3, #-8]
 800eb4a:	f843 5c04 	str.w	r5, [r3, #-4]
 800eb4e:	459e      	cmp	lr, r3
 800eb50:	d1ea      	bne.n	800eb28 <st_int8_copy+0xdc>
 800eb52:	e7bd      	b.n	800ead0 <st_int8_copy+0x84>
 800eb54:	0893      	lsrs	r3, r2, #2
 800eb56:	f002 0203 	and.w	r2, r2, #3
 800eb5a:	e7bf      	b.n	800eadc <st_int8_copy+0x90>

0800eb5c <ai_array_to_buffer_fmt>:
 800eb5c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d050      	beq.n	800ec06 <ai_array_to_buffer_fmt+0xaa>
 800eb64:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800eb68:	4b29      	ldr	r3, [pc, #164]	; (800ec10 <ai_array_to_buffer_fmt+0xb4>)
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d00b      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800eb6e:	dc1c      	bgt.n	800ebaa <ai_array_to_buffer_fmt+0x4e>
 800eb70:	4b28      	ldr	r3, [pc, #160]	; (800ec14 <ai_array_to_buffer_fmt+0xb8>)
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d007      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800eb76:	dd0b      	ble.n	800eb90 <ai_array_to_buffer_fmt+0x34>
 800eb78:	4b27      	ldr	r3, [pc, #156]	; (800ec18 <ai_array_to_buffer_fmt+0xbc>)
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d003      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800eb7e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d131      	bne.n	800ebea <ai_array_to_buffer_fmt+0x8e>
 800eb86:	4613      	mov	r3, r2
 800eb88:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eb8c:	4318      	orrs	r0, r3
 800eb8e:	4770      	bx	lr
 800eb90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d0f6      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800eb98:	dd2c      	ble.n	800ebf4 <ai_array_to_buffer_fmt+0x98>
 800eb9a:	4b20      	ldr	r3, [pc, #128]	; (800ec1c <ai_array_to_buffer_fmt+0xc0>)
 800eb9c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eba0:	429a      	cmp	r2, r3
 800eba2:	bf18      	it	ne
 800eba4:	2340      	movne	r3, #64	; 0x40
 800eba6:	4318      	orrs	r0, r3
 800eba8:	4770      	bx	lr
 800ebaa:	4b1d      	ldr	r3, [pc, #116]	; (800ec20 <ai_array_to_buffer_fmt+0xc4>)
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d0ea      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800ebb0:	dd0e      	ble.n	800ebd0 <ai_array_to_buffer_fmt+0x74>
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <ai_array_to_buffer_fmt+0xc8>)
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d0e6      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800ebb8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d0e2      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800ebc0:	4b19      	ldr	r3, [pc, #100]	; (800ec28 <ai_array_to_buffer_fmt+0xcc>)
 800ebc2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	bf18      	it	ne
 800ebca:	2340      	movne	r3, #64	; 0x40
 800ebcc:	4318      	orrs	r0, r3
 800ebce:	4770      	bx	lr
 800ebd0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d0d6      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800ebd8:	3307      	adds	r3, #7
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d0d3      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800ebde:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	bf18      	it	ne
 800ebe6:	2340      	movne	r3, #64	; 0x40
 800ebe8:	e7ce      	b.n	800eb88 <ai_array_to_buffer_fmt+0x2c>
 800ebea:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <ai_array_to_buffer_fmt+0xd0>)
 800ebec:	429a      	cmp	r2, r3
 800ebee:	bf18      	it	ne
 800ebf0:	2340      	movne	r3, #64	; 0x40
 800ebf2:	e7c9      	b.n	800eb88 <ai_array_to_buffer_fmt+0x2c>
 800ebf4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d0c4      	beq.n	800eb86 <ai_array_to_buffer_fmt+0x2a>
 800ebfc:	3380      	adds	r3, #128	; 0x80
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	bf18      	it	ne
 800ec02:	2340      	movne	r3, #64	; 0x40
 800ec04:	e7c0      	b.n	800eb88 <ai_array_to_buffer_fmt+0x2c>
 800ec06:	4b0a      	ldr	r3, [pc, #40]	; (800ec30 <ai_array_to_buffer_fmt+0xd4>)
 800ec08:	4003      	ands	r3, r0
 800ec0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ec0e:	e7bb      	b.n	800eb88 <ai_array_to_buffer_fmt+0x2c>
 800ec10:	00840040 	.word	0x00840040
 800ec14:	00040840 	.word	0x00040840
 800ec18:	00041040 	.word	0x00041040
 800ec1c:	00040447 	.word	0x00040447
 800ec20:	00840840 	.word	0x00840840
 800ec24:	00841040 	.word	0x00841040
 800ec28:	0084084f 	.word	0x0084084f
 800ec2c:	0004084f 	.word	0x0004084f
 800ec30:	00803fff 	.word	0x00803fff

0800ec34 <ai_array_get_byte_size>:
 800ec34:	b319      	cbz	r1, 800ec7e <ai_array_get_byte_size+0x4a>
 800ec36:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ec3a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800ec3e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800ec42:	11c0      	asrs	r0, r0, #7
 800ec44:	fb03 f101 	mul.w	r1, r3, r1
 800ec48:	2a04      	cmp	r2, #4
 800ec4a:	f101 0107 	add.w	r1, r1, #7
 800ec4e:	f021 0107 	bic.w	r1, r1, #7
 800ec52:	fa21 f10c 	lsr.w	r1, r1, ip
 800ec56:	d00b      	beq.n	800ec70 <ai_array_get_byte_size+0x3c>
 800ec58:	2a08      	cmp	r2, #8
 800ec5a:	d002      	beq.n	800ec62 <ai_array_get_byte_size+0x2e>
 800ec5c:	3107      	adds	r1, #7
 800ec5e:	08c8      	lsrs	r0, r1, #3
 800ec60:	4770      	bx	lr
 800ec62:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ec66:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ec6a:	3107      	adds	r1, #7
 800ec6c:	08c8      	lsrs	r0, r1, #3
 800ec6e:	4770      	bx	lr
 800ec70:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ec74:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800ec78:	3107      	adds	r1, #7
 800ec7a:	08c8      	lsrs	r0, r1, #3
 800ec7c:	4770      	bx	lr
 800ec7e:	4608      	mov	r0, r1
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop

0800ec84 <ai_array_get_data_byte_size>:
 800ec84:	b161      	cbz	r1, 800eca0 <ai_array_get_data_byte_size+0x1c>
 800ec86:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ec8a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ec8e:	fb03 f101 	mul.w	r1, r3, r1
 800ec92:	1dc8      	adds	r0, r1, #7
 800ec94:	f020 0007 	bic.w	r0, r0, #7
 800ec98:	40d0      	lsrs	r0, r2
 800ec9a:	3007      	adds	r0, #7
 800ec9c:	08c0      	lsrs	r0, r0, #3
 800ec9e:	4770      	bx	lr
 800eca0:	4608      	mov	r0, r1
 800eca2:	4770      	bx	lr

0800eca4 <ai_version_get>:
 800eca4:	0212      	lsls	r2, r2, #8
 800eca6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ecaa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ecae:	4770      	bx	lr

0800ecb0 <get_tensor_byte_size>:
 800ecb0:	b430      	push	{r4, r5}
 800ecb2:	6985      	ldr	r5, [r0, #24]
 800ecb4:	68c4      	ldr	r4, [r0, #12]
 800ecb6:	6941      	ldr	r1, [r0, #20]
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <get_tensor_byte_size+0x24>)
 800ecba:	6828      	ldr	r0, [r5, #0]
 800ecbc:	4a06      	ldr	r2, [pc, #24]	; (800ecd8 <get_tensor_byte_size+0x28>)
 800ecbe:	4003      	ands	r3, r0
 800ecc0:	68c9      	ldr	r1, [r1, #12]
 800ecc2:	68e0      	ldr	r0, [r4, #12]
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	fb01 f000 	mul.w	r0, r1, r0
 800ecca:	d101      	bne.n	800ecd0 <get_tensor_byte_size+0x20>
 800eccc:	3007      	adds	r0, #7
 800ecce:	08c0      	lsrs	r0, r0, #3
 800ecd0:	bc30      	pop	{r4, r5}
 800ecd2:	4770      	bx	lr
 800ecd4:	017fffff 	.word	0x017fffff
 800ecd8:	000400c0 	.word	0x000400c0

0800ecdc <__errno>:
 800ecdc:	4b01      	ldr	r3, [pc, #4]	; (800ece4 <__errno+0x8>)
 800ecde:	6818      	ldr	r0, [r3, #0]
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20000eac 	.word	0x20000eac

0800ece8 <__libc_init_array>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	4d0d      	ldr	r5, [pc, #52]	; (800ed20 <__libc_init_array+0x38>)
 800ecec:	4c0d      	ldr	r4, [pc, #52]	; (800ed24 <__libc_init_array+0x3c>)
 800ecee:	1b64      	subs	r4, r4, r5
 800ecf0:	10a4      	asrs	r4, r4, #2
 800ecf2:	2600      	movs	r6, #0
 800ecf4:	42a6      	cmp	r6, r4
 800ecf6:	d109      	bne.n	800ed0c <__libc_init_array+0x24>
 800ecf8:	4d0b      	ldr	r5, [pc, #44]	; (800ed28 <__libc_init_array+0x40>)
 800ecfa:	4c0c      	ldr	r4, [pc, #48]	; (800ed2c <__libc_init_array+0x44>)
 800ecfc:	f003 fe90 	bl	8012a20 <_init>
 800ed00:	1b64      	subs	r4, r4, r5
 800ed02:	10a4      	asrs	r4, r4, #2
 800ed04:	2600      	movs	r6, #0
 800ed06:	42a6      	cmp	r6, r4
 800ed08:	d105      	bne.n	800ed16 <__libc_init_array+0x2e>
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed10:	4798      	blx	r3
 800ed12:	3601      	adds	r6, #1
 800ed14:	e7ee      	b.n	800ecf4 <__libc_init_array+0xc>
 800ed16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed1a:	4798      	blx	r3
 800ed1c:	3601      	adds	r6, #1
 800ed1e:	e7f2      	b.n	800ed06 <__libc_init_array+0x1e>
 800ed20:	08064e68 	.word	0x08064e68
 800ed24:	08064e68 	.word	0x08064e68
 800ed28:	08064e68 	.word	0x08064e68
 800ed2c:	08064e6c 	.word	0x08064e6c

0800ed30 <malloc>:
 800ed30:	4b02      	ldr	r3, [pc, #8]	; (800ed3c <malloc+0xc>)
 800ed32:	4601      	mov	r1, r0
 800ed34:	6818      	ldr	r0, [r3, #0]
 800ed36:	f000 b885 	b.w	800ee44 <_malloc_r>
 800ed3a:	bf00      	nop
 800ed3c:	20000eac 	.word	0x20000eac

0800ed40 <memcpy>:
 800ed40:	440a      	add	r2, r1
 800ed42:	4291      	cmp	r1, r2
 800ed44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed48:	d100      	bne.n	800ed4c <memcpy+0xc>
 800ed4a:	4770      	bx	lr
 800ed4c:	b510      	push	{r4, lr}
 800ed4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed56:	4291      	cmp	r1, r2
 800ed58:	d1f9      	bne.n	800ed4e <memcpy+0xe>
 800ed5a:	bd10      	pop	{r4, pc}

0800ed5c <memset>:
 800ed5c:	4402      	add	r2, r0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d100      	bne.n	800ed66 <memset+0xa>
 800ed64:	4770      	bx	lr
 800ed66:	f803 1b01 	strb.w	r1, [r3], #1
 800ed6a:	e7f9      	b.n	800ed60 <memset+0x4>

0800ed6c <_free_r>:
 800ed6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed6e:	2900      	cmp	r1, #0
 800ed70:	d044      	beq.n	800edfc <_free_r+0x90>
 800ed72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed76:	9001      	str	r0, [sp, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed7e:	bfb8      	it	lt
 800ed80:	18e4      	addlt	r4, r4, r3
 800ed82:	f001 fbf3 	bl	801056c <__malloc_lock>
 800ed86:	4a1e      	ldr	r2, [pc, #120]	; (800ee00 <_free_r+0x94>)
 800ed88:	9801      	ldr	r0, [sp, #4]
 800ed8a:	6813      	ldr	r3, [r2, #0]
 800ed8c:	b933      	cbnz	r3, 800ed9c <_free_r+0x30>
 800ed8e:	6063      	str	r3, [r4, #4]
 800ed90:	6014      	str	r4, [r2, #0]
 800ed92:	b003      	add	sp, #12
 800ed94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed98:	f001 bbee 	b.w	8010578 <__malloc_unlock>
 800ed9c:	42a3      	cmp	r3, r4
 800ed9e:	d908      	bls.n	800edb2 <_free_r+0x46>
 800eda0:	6825      	ldr	r5, [r4, #0]
 800eda2:	1961      	adds	r1, r4, r5
 800eda4:	428b      	cmp	r3, r1
 800eda6:	bf01      	itttt	eq
 800eda8:	6819      	ldreq	r1, [r3, #0]
 800edaa:	685b      	ldreq	r3, [r3, #4]
 800edac:	1949      	addeq	r1, r1, r5
 800edae:	6021      	streq	r1, [r4, #0]
 800edb0:	e7ed      	b.n	800ed8e <_free_r+0x22>
 800edb2:	461a      	mov	r2, r3
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	b10b      	cbz	r3, 800edbc <_free_r+0x50>
 800edb8:	42a3      	cmp	r3, r4
 800edba:	d9fa      	bls.n	800edb2 <_free_r+0x46>
 800edbc:	6811      	ldr	r1, [r2, #0]
 800edbe:	1855      	adds	r5, r2, r1
 800edc0:	42a5      	cmp	r5, r4
 800edc2:	d10b      	bne.n	800eddc <_free_r+0x70>
 800edc4:	6824      	ldr	r4, [r4, #0]
 800edc6:	4421      	add	r1, r4
 800edc8:	1854      	adds	r4, r2, r1
 800edca:	42a3      	cmp	r3, r4
 800edcc:	6011      	str	r1, [r2, #0]
 800edce:	d1e0      	bne.n	800ed92 <_free_r+0x26>
 800edd0:	681c      	ldr	r4, [r3, #0]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	6053      	str	r3, [r2, #4]
 800edd6:	4421      	add	r1, r4
 800edd8:	6011      	str	r1, [r2, #0]
 800edda:	e7da      	b.n	800ed92 <_free_r+0x26>
 800eddc:	d902      	bls.n	800ede4 <_free_r+0x78>
 800edde:	230c      	movs	r3, #12
 800ede0:	6003      	str	r3, [r0, #0]
 800ede2:	e7d6      	b.n	800ed92 <_free_r+0x26>
 800ede4:	6825      	ldr	r5, [r4, #0]
 800ede6:	1961      	adds	r1, r4, r5
 800ede8:	428b      	cmp	r3, r1
 800edea:	bf04      	itt	eq
 800edec:	6819      	ldreq	r1, [r3, #0]
 800edee:	685b      	ldreq	r3, [r3, #4]
 800edf0:	6063      	str	r3, [r4, #4]
 800edf2:	bf04      	itt	eq
 800edf4:	1949      	addeq	r1, r1, r5
 800edf6:	6021      	streq	r1, [r4, #0]
 800edf8:	6054      	str	r4, [r2, #4]
 800edfa:	e7ca      	b.n	800ed92 <_free_r+0x26>
 800edfc:	b003      	add	sp, #12
 800edfe:	bd30      	pop	{r4, r5, pc}
 800ee00:	2000b6ac 	.word	0x2000b6ac

0800ee04 <sbrk_aligned>:
 800ee04:	b570      	push	{r4, r5, r6, lr}
 800ee06:	4e0e      	ldr	r6, [pc, #56]	; (800ee40 <sbrk_aligned+0x3c>)
 800ee08:	460c      	mov	r4, r1
 800ee0a:	6831      	ldr	r1, [r6, #0]
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	b911      	cbnz	r1, 800ee16 <sbrk_aligned+0x12>
 800ee10:	f000 fcf6 	bl	800f800 <_sbrk_r>
 800ee14:	6030      	str	r0, [r6, #0]
 800ee16:	4621      	mov	r1, r4
 800ee18:	4628      	mov	r0, r5
 800ee1a:	f000 fcf1 	bl	800f800 <_sbrk_r>
 800ee1e:	1c43      	adds	r3, r0, #1
 800ee20:	d00a      	beq.n	800ee38 <sbrk_aligned+0x34>
 800ee22:	1cc4      	adds	r4, r0, #3
 800ee24:	f024 0403 	bic.w	r4, r4, #3
 800ee28:	42a0      	cmp	r0, r4
 800ee2a:	d007      	beq.n	800ee3c <sbrk_aligned+0x38>
 800ee2c:	1a21      	subs	r1, r4, r0
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f000 fce6 	bl	800f800 <_sbrk_r>
 800ee34:	3001      	adds	r0, #1
 800ee36:	d101      	bne.n	800ee3c <sbrk_aligned+0x38>
 800ee38:	f04f 34ff 	mov.w	r4, #4294967295
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	bd70      	pop	{r4, r5, r6, pc}
 800ee40:	2000b6b0 	.word	0x2000b6b0

0800ee44 <_malloc_r>:
 800ee44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee48:	1ccd      	adds	r5, r1, #3
 800ee4a:	f025 0503 	bic.w	r5, r5, #3
 800ee4e:	3508      	adds	r5, #8
 800ee50:	2d0c      	cmp	r5, #12
 800ee52:	bf38      	it	cc
 800ee54:	250c      	movcc	r5, #12
 800ee56:	2d00      	cmp	r5, #0
 800ee58:	4607      	mov	r7, r0
 800ee5a:	db01      	blt.n	800ee60 <_malloc_r+0x1c>
 800ee5c:	42a9      	cmp	r1, r5
 800ee5e:	d905      	bls.n	800ee6c <_malloc_r+0x28>
 800ee60:	230c      	movs	r3, #12
 800ee62:	603b      	str	r3, [r7, #0]
 800ee64:	2600      	movs	r6, #0
 800ee66:	4630      	mov	r0, r6
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	4e2e      	ldr	r6, [pc, #184]	; (800ef28 <_malloc_r+0xe4>)
 800ee6e:	f001 fb7d 	bl	801056c <__malloc_lock>
 800ee72:	6833      	ldr	r3, [r6, #0]
 800ee74:	461c      	mov	r4, r3
 800ee76:	bb34      	cbnz	r4, 800eec6 <_malloc_r+0x82>
 800ee78:	4629      	mov	r1, r5
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	f7ff ffc2 	bl	800ee04 <sbrk_aligned>
 800ee80:	1c43      	adds	r3, r0, #1
 800ee82:	4604      	mov	r4, r0
 800ee84:	d14d      	bne.n	800ef22 <_malloc_r+0xde>
 800ee86:	6834      	ldr	r4, [r6, #0]
 800ee88:	4626      	mov	r6, r4
 800ee8a:	2e00      	cmp	r6, #0
 800ee8c:	d140      	bne.n	800ef10 <_malloc_r+0xcc>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	4631      	mov	r1, r6
 800ee92:	4638      	mov	r0, r7
 800ee94:	eb04 0803 	add.w	r8, r4, r3
 800ee98:	f000 fcb2 	bl	800f800 <_sbrk_r>
 800ee9c:	4580      	cmp	r8, r0
 800ee9e:	d13a      	bne.n	800ef16 <_malloc_r+0xd2>
 800eea0:	6821      	ldr	r1, [r4, #0]
 800eea2:	3503      	adds	r5, #3
 800eea4:	1a6d      	subs	r5, r5, r1
 800eea6:	f025 0503 	bic.w	r5, r5, #3
 800eeaa:	3508      	adds	r5, #8
 800eeac:	2d0c      	cmp	r5, #12
 800eeae:	bf38      	it	cc
 800eeb0:	250c      	movcc	r5, #12
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f7ff ffa5 	bl	800ee04 <sbrk_aligned>
 800eeba:	3001      	adds	r0, #1
 800eebc:	d02b      	beq.n	800ef16 <_malloc_r+0xd2>
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	442b      	add	r3, r5
 800eec2:	6023      	str	r3, [r4, #0]
 800eec4:	e00e      	b.n	800eee4 <_malloc_r+0xa0>
 800eec6:	6822      	ldr	r2, [r4, #0]
 800eec8:	1b52      	subs	r2, r2, r5
 800eeca:	d41e      	bmi.n	800ef0a <_malloc_r+0xc6>
 800eecc:	2a0b      	cmp	r2, #11
 800eece:	d916      	bls.n	800eefe <_malloc_r+0xba>
 800eed0:	1961      	adds	r1, r4, r5
 800eed2:	42a3      	cmp	r3, r4
 800eed4:	6025      	str	r5, [r4, #0]
 800eed6:	bf18      	it	ne
 800eed8:	6059      	strne	r1, [r3, #4]
 800eeda:	6863      	ldr	r3, [r4, #4]
 800eedc:	bf08      	it	eq
 800eede:	6031      	streq	r1, [r6, #0]
 800eee0:	5162      	str	r2, [r4, r5]
 800eee2:	604b      	str	r3, [r1, #4]
 800eee4:	4638      	mov	r0, r7
 800eee6:	f104 060b 	add.w	r6, r4, #11
 800eeea:	f001 fb45 	bl	8010578 <__malloc_unlock>
 800eeee:	f026 0607 	bic.w	r6, r6, #7
 800eef2:	1d23      	adds	r3, r4, #4
 800eef4:	1af2      	subs	r2, r6, r3
 800eef6:	d0b6      	beq.n	800ee66 <_malloc_r+0x22>
 800eef8:	1b9b      	subs	r3, r3, r6
 800eefa:	50a3      	str	r3, [r4, r2]
 800eefc:	e7b3      	b.n	800ee66 <_malloc_r+0x22>
 800eefe:	6862      	ldr	r2, [r4, #4]
 800ef00:	42a3      	cmp	r3, r4
 800ef02:	bf0c      	ite	eq
 800ef04:	6032      	streq	r2, [r6, #0]
 800ef06:	605a      	strne	r2, [r3, #4]
 800ef08:	e7ec      	b.n	800eee4 <_malloc_r+0xa0>
 800ef0a:	4623      	mov	r3, r4
 800ef0c:	6864      	ldr	r4, [r4, #4]
 800ef0e:	e7b2      	b.n	800ee76 <_malloc_r+0x32>
 800ef10:	4634      	mov	r4, r6
 800ef12:	6876      	ldr	r6, [r6, #4]
 800ef14:	e7b9      	b.n	800ee8a <_malloc_r+0x46>
 800ef16:	230c      	movs	r3, #12
 800ef18:	603b      	str	r3, [r7, #0]
 800ef1a:	4638      	mov	r0, r7
 800ef1c:	f001 fb2c 	bl	8010578 <__malloc_unlock>
 800ef20:	e7a1      	b.n	800ee66 <_malloc_r+0x22>
 800ef22:	6025      	str	r5, [r4, #0]
 800ef24:	e7de      	b.n	800eee4 <_malloc_r+0xa0>
 800ef26:	bf00      	nop
 800ef28:	2000b6ac 	.word	0x2000b6ac

0800ef2c <__cvt>:
 800ef2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef30:	ec55 4b10 	vmov	r4, r5, d0
 800ef34:	2d00      	cmp	r5, #0
 800ef36:	460e      	mov	r6, r1
 800ef38:	4619      	mov	r1, r3
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	bfbb      	ittet	lt
 800ef3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef42:	461d      	movlt	r5, r3
 800ef44:	2300      	movge	r3, #0
 800ef46:	232d      	movlt	r3, #45	; 0x2d
 800ef48:	700b      	strb	r3, [r1, #0]
 800ef4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef50:	4691      	mov	r9, r2
 800ef52:	f023 0820 	bic.w	r8, r3, #32
 800ef56:	bfbc      	itt	lt
 800ef58:	4622      	movlt	r2, r4
 800ef5a:	4614      	movlt	r4, r2
 800ef5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef60:	d005      	beq.n	800ef6e <__cvt+0x42>
 800ef62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ef66:	d100      	bne.n	800ef6a <__cvt+0x3e>
 800ef68:	3601      	adds	r6, #1
 800ef6a:	2102      	movs	r1, #2
 800ef6c:	e000      	b.n	800ef70 <__cvt+0x44>
 800ef6e:	2103      	movs	r1, #3
 800ef70:	ab03      	add	r3, sp, #12
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	ab02      	add	r3, sp, #8
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	ec45 4b10 	vmov	d0, r4, r5
 800ef7c:	4653      	mov	r3, sl
 800ef7e:	4632      	mov	r2, r6
 800ef80:	f000 fd02 	bl	800f988 <_dtoa_r>
 800ef84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ef88:	4607      	mov	r7, r0
 800ef8a:	d102      	bne.n	800ef92 <__cvt+0x66>
 800ef8c:	f019 0f01 	tst.w	r9, #1
 800ef90:	d022      	beq.n	800efd8 <__cvt+0xac>
 800ef92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef96:	eb07 0906 	add.w	r9, r7, r6
 800ef9a:	d110      	bne.n	800efbe <__cvt+0x92>
 800ef9c:	783b      	ldrb	r3, [r7, #0]
 800ef9e:	2b30      	cmp	r3, #48	; 0x30
 800efa0:	d10a      	bne.n	800efb8 <__cvt+0x8c>
 800efa2:	2200      	movs	r2, #0
 800efa4:	2300      	movs	r3, #0
 800efa6:	4620      	mov	r0, r4
 800efa8:	4629      	mov	r1, r5
 800efaa:	f7f1 fdbd 	bl	8000b28 <__aeabi_dcmpeq>
 800efae:	b918      	cbnz	r0, 800efb8 <__cvt+0x8c>
 800efb0:	f1c6 0601 	rsb	r6, r6, #1
 800efb4:	f8ca 6000 	str.w	r6, [sl]
 800efb8:	f8da 3000 	ldr.w	r3, [sl]
 800efbc:	4499      	add	r9, r3
 800efbe:	2200      	movs	r2, #0
 800efc0:	2300      	movs	r3, #0
 800efc2:	4620      	mov	r0, r4
 800efc4:	4629      	mov	r1, r5
 800efc6:	f7f1 fdaf 	bl	8000b28 <__aeabi_dcmpeq>
 800efca:	b108      	cbz	r0, 800efd0 <__cvt+0xa4>
 800efcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800efd0:	2230      	movs	r2, #48	; 0x30
 800efd2:	9b03      	ldr	r3, [sp, #12]
 800efd4:	454b      	cmp	r3, r9
 800efd6:	d307      	bcc.n	800efe8 <__cvt+0xbc>
 800efd8:	9b03      	ldr	r3, [sp, #12]
 800efda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efdc:	1bdb      	subs	r3, r3, r7
 800efde:	4638      	mov	r0, r7
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	b004      	add	sp, #16
 800efe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe8:	1c59      	adds	r1, r3, #1
 800efea:	9103      	str	r1, [sp, #12]
 800efec:	701a      	strb	r2, [r3, #0]
 800efee:	e7f0      	b.n	800efd2 <__cvt+0xa6>

0800eff0 <__exponent>:
 800eff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eff2:	4603      	mov	r3, r0
 800eff4:	2900      	cmp	r1, #0
 800eff6:	bfb8      	it	lt
 800eff8:	4249      	neglt	r1, r1
 800effa:	f803 2b02 	strb.w	r2, [r3], #2
 800effe:	bfb4      	ite	lt
 800f000:	222d      	movlt	r2, #45	; 0x2d
 800f002:	222b      	movge	r2, #43	; 0x2b
 800f004:	2909      	cmp	r1, #9
 800f006:	7042      	strb	r2, [r0, #1]
 800f008:	dd2a      	ble.n	800f060 <__exponent+0x70>
 800f00a:	f10d 0407 	add.w	r4, sp, #7
 800f00e:	46a4      	mov	ip, r4
 800f010:	270a      	movs	r7, #10
 800f012:	46a6      	mov	lr, r4
 800f014:	460a      	mov	r2, r1
 800f016:	fb91 f6f7 	sdiv	r6, r1, r7
 800f01a:	fb07 1516 	mls	r5, r7, r6, r1
 800f01e:	3530      	adds	r5, #48	; 0x30
 800f020:	2a63      	cmp	r2, #99	; 0x63
 800f022:	f104 34ff 	add.w	r4, r4, #4294967295
 800f026:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f02a:	4631      	mov	r1, r6
 800f02c:	dcf1      	bgt.n	800f012 <__exponent+0x22>
 800f02e:	3130      	adds	r1, #48	; 0x30
 800f030:	f1ae 0502 	sub.w	r5, lr, #2
 800f034:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f038:	1c44      	adds	r4, r0, #1
 800f03a:	4629      	mov	r1, r5
 800f03c:	4561      	cmp	r1, ip
 800f03e:	d30a      	bcc.n	800f056 <__exponent+0x66>
 800f040:	f10d 0209 	add.w	r2, sp, #9
 800f044:	eba2 020e 	sub.w	r2, r2, lr
 800f048:	4565      	cmp	r5, ip
 800f04a:	bf88      	it	hi
 800f04c:	2200      	movhi	r2, #0
 800f04e:	4413      	add	r3, r2
 800f050:	1a18      	subs	r0, r3, r0
 800f052:	b003      	add	sp, #12
 800f054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f05a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f05e:	e7ed      	b.n	800f03c <__exponent+0x4c>
 800f060:	2330      	movs	r3, #48	; 0x30
 800f062:	3130      	adds	r1, #48	; 0x30
 800f064:	7083      	strb	r3, [r0, #2]
 800f066:	70c1      	strb	r1, [r0, #3]
 800f068:	1d03      	adds	r3, r0, #4
 800f06a:	e7f1      	b.n	800f050 <__exponent+0x60>

0800f06c <_printf_float>:
 800f06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	ed2d 8b02 	vpush	{d8}
 800f074:	b08d      	sub	sp, #52	; 0x34
 800f076:	460c      	mov	r4, r1
 800f078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f07c:	4616      	mov	r6, r2
 800f07e:	461f      	mov	r7, r3
 800f080:	4605      	mov	r5, r0
 800f082:	f001 fa6f 	bl	8010564 <_localeconv_r>
 800f086:	f8d0 a000 	ldr.w	sl, [r0]
 800f08a:	4650      	mov	r0, sl
 800f08c:	f7f1 f8ca 	bl	8000224 <strlen>
 800f090:	2300      	movs	r3, #0
 800f092:	930a      	str	r3, [sp, #40]	; 0x28
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	9305      	str	r3, [sp, #20]
 800f098:	f8d8 3000 	ldr.w	r3, [r8]
 800f09c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	f023 0307 	bic.w	r3, r3, #7
 800f0a6:	f103 0208 	add.w	r2, r3, #8
 800f0aa:	f8c8 2000 	str.w	r2, [r8]
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f0b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f0ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f0be:	9307      	str	r3, [sp, #28]
 800f0c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f0c4:	ee08 0a10 	vmov	s16, r0
 800f0c8:	4b9f      	ldr	r3, [pc, #636]	; (800f348 <_printf_float+0x2dc>)
 800f0ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f0d2:	f7f1 fd5b 	bl	8000b8c <__aeabi_dcmpun>
 800f0d6:	bb88      	cbnz	r0, 800f13c <_printf_float+0xd0>
 800f0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0dc:	4b9a      	ldr	r3, [pc, #616]	; (800f348 <_printf_float+0x2dc>)
 800f0de:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e2:	f7f1 fd35 	bl	8000b50 <__aeabi_dcmple>
 800f0e6:	bb48      	cbnz	r0, 800f13c <_printf_float+0xd0>
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	4649      	mov	r1, r9
 800f0f0:	f7f1 fd24 	bl	8000b3c <__aeabi_dcmplt>
 800f0f4:	b110      	cbz	r0, 800f0fc <_printf_float+0x90>
 800f0f6:	232d      	movs	r3, #45	; 0x2d
 800f0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0fc:	4b93      	ldr	r3, [pc, #588]	; (800f34c <_printf_float+0x2e0>)
 800f0fe:	4894      	ldr	r0, [pc, #592]	; (800f350 <_printf_float+0x2e4>)
 800f100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f104:	bf94      	ite	ls
 800f106:	4698      	movls	r8, r3
 800f108:	4680      	movhi	r8, r0
 800f10a:	2303      	movs	r3, #3
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	9b05      	ldr	r3, [sp, #20]
 800f110:	f023 0204 	bic.w	r2, r3, #4
 800f114:	6022      	str	r2, [r4, #0]
 800f116:	f04f 0900 	mov.w	r9, #0
 800f11a:	9700      	str	r7, [sp, #0]
 800f11c:	4633      	mov	r3, r6
 800f11e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f120:	4621      	mov	r1, r4
 800f122:	4628      	mov	r0, r5
 800f124:	f000 f9d8 	bl	800f4d8 <_printf_common>
 800f128:	3001      	adds	r0, #1
 800f12a:	f040 8090 	bne.w	800f24e <_printf_float+0x1e2>
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295
 800f132:	b00d      	add	sp, #52	; 0x34
 800f134:	ecbd 8b02 	vpop	{d8}
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	4642      	mov	r2, r8
 800f13e:	464b      	mov	r3, r9
 800f140:	4640      	mov	r0, r8
 800f142:	4649      	mov	r1, r9
 800f144:	f7f1 fd22 	bl	8000b8c <__aeabi_dcmpun>
 800f148:	b140      	cbz	r0, 800f15c <_printf_float+0xf0>
 800f14a:	464b      	mov	r3, r9
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	bfbc      	itt	lt
 800f150:	232d      	movlt	r3, #45	; 0x2d
 800f152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f156:	487f      	ldr	r0, [pc, #508]	; (800f354 <_printf_float+0x2e8>)
 800f158:	4b7f      	ldr	r3, [pc, #508]	; (800f358 <_printf_float+0x2ec>)
 800f15a:	e7d1      	b.n	800f100 <_printf_float+0x94>
 800f15c:	6863      	ldr	r3, [r4, #4]
 800f15e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f162:	9206      	str	r2, [sp, #24]
 800f164:	1c5a      	adds	r2, r3, #1
 800f166:	d13f      	bne.n	800f1e8 <_printf_float+0x17c>
 800f168:	2306      	movs	r3, #6
 800f16a:	6063      	str	r3, [r4, #4]
 800f16c:	9b05      	ldr	r3, [sp, #20]
 800f16e:	6861      	ldr	r1, [r4, #4]
 800f170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f174:	2300      	movs	r3, #0
 800f176:	9303      	str	r3, [sp, #12]
 800f178:	ab0a      	add	r3, sp, #40	; 0x28
 800f17a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f17e:	ab09      	add	r3, sp, #36	; 0x24
 800f180:	ec49 8b10 	vmov	d0, r8, r9
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	6022      	str	r2, [r4, #0]
 800f188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f18c:	4628      	mov	r0, r5
 800f18e:	f7ff fecd 	bl	800ef2c <__cvt>
 800f192:	9b06      	ldr	r3, [sp, #24]
 800f194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f196:	2b47      	cmp	r3, #71	; 0x47
 800f198:	4680      	mov	r8, r0
 800f19a:	d108      	bne.n	800f1ae <_printf_float+0x142>
 800f19c:	1cc8      	adds	r0, r1, #3
 800f19e:	db02      	blt.n	800f1a6 <_printf_float+0x13a>
 800f1a0:	6863      	ldr	r3, [r4, #4]
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	dd41      	ble.n	800f22a <_printf_float+0x1be>
 800f1a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f1aa:	fa5f fb8b 	uxtb.w	fp, fp
 800f1ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f1b2:	d820      	bhi.n	800f1f6 <_printf_float+0x18a>
 800f1b4:	3901      	subs	r1, #1
 800f1b6:	465a      	mov	r2, fp
 800f1b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f1bc:	9109      	str	r1, [sp, #36]	; 0x24
 800f1be:	f7ff ff17 	bl	800eff0 <__exponent>
 800f1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c4:	1813      	adds	r3, r2, r0
 800f1c6:	2a01      	cmp	r2, #1
 800f1c8:	4681      	mov	r9, r0
 800f1ca:	6123      	str	r3, [r4, #16]
 800f1cc:	dc02      	bgt.n	800f1d4 <_printf_float+0x168>
 800f1ce:	6822      	ldr	r2, [r4, #0]
 800f1d0:	07d2      	lsls	r2, r2, #31
 800f1d2:	d501      	bpl.n	800f1d8 <_printf_float+0x16c>
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	6123      	str	r3, [r4, #16]
 800f1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d09c      	beq.n	800f11a <_printf_float+0xae>
 800f1e0:	232d      	movs	r3, #45	; 0x2d
 800f1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1e6:	e798      	b.n	800f11a <_printf_float+0xae>
 800f1e8:	9a06      	ldr	r2, [sp, #24]
 800f1ea:	2a47      	cmp	r2, #71	; 0x47
 800f1ec:	d1be      	bne.n	800f16c <_printf_float+0x100>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1bc      	bne.n	800f16c <_printf_float+0x100>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e7b9      	b.n	800f16a <_printf_float+0xfe>
 800f1f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f1fa:	d118      	bne.n	800f22e <_printf_float+0x1c2>
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	6863      	ldr	r3, [r4, #4]
 800f200:	dd0b      	ble.n	800f21a <_printf_float+0x1ae>
 800f202:	6121      	str	r1, [r4, #16]
 800f204:	b913      	cbnz	r3, 800f20c <_printf_float+0x1a0>
 800f206:	6822      	ldr	r2, [r4, #0]
 800f208:	07d0      	lsls	r0, r2, #31
 800f20a:	d502      	bpl.n	800f212 <_printf_float+0x1a6>
 800f20c:	3301      	adds	r3, #1
 800f20e:	440b      	add	r3, r1
 800f210:	6123      	str	r3, [r4, #16]
 800f212:	65a1      	str	r1, [r4, #88]	; 0x58
 800f214:	f04f 0900 	mov.w	r9, #0
 800f218:	e7de      	b.n	800f1d8 <_printf_float+0x16c>
 800f21a:	b913      	cbnz	r3, 800f222 <_printf_float+0x1b6>
 800f21c:	6822      	ldr	r2, [r4, #0]
 800f21e:	07d2      	lsls	r2, r2, #31
 800f220:	d501      	bpl.n	800f226 <_printf_float+0x1ba>
 800f222:	3302      	adds	r3, #2
 800f224:	e7f4      	b.n	800f210 <_printf_float+0x1a4>
 800f226:	2301      	movs	r3, #1
 800f228:	e7f2      	b.n	800f210 <_printf_float+0x1a4>
 800f22a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f230:	4299      	cmp	r1, r3
 800f232:	db05      	blt.n	800f240 <_printf_float+0x1d4>
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	6121      	str	r1, [r4, #16]
 800f238:	07d8      	lsls	r0, r3, #31
 800f23a:	d5ea      	bpl.n	800f212 <_printf_float+0x1a6>
 800f23c:	1c4b      	adds	r3, r1, #1
 800f23e:	e7e7      	b.n	800f210 <_printf_float+0x1a4>
 800f240:	2900      	cmp	r1, #0
 800f242:	bfd4      	ite	le
 800f244:	f1c1 0202 	rsble	r2, r1, #2
 800f248:	2201      	movgt	r2, #1
 800f24a:	4413      	add	r3, r2
 800f24c:	e7e0      	b.n	800f210 <_printf_float+0x1a4>
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	055a      	lsls	r2, r3, #21
 800f252:	d407      	bmi.n	800f264 <_printf_float+0x1f8>
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	4642      	mov	r2, r8
 800f258:	4631      	mov	r1, r6
 800f25a:	4628      	mov	r0, r5
 800f25c:	47b8      	blx	r7
 800f25e:	3001      	adds	r0, #1
 800f260:	d12c      	bne.n	800f2bc <_printf_float+0x250>
 800f262:	e764      	b.n	800f12e <_printf_float+0xc2>
 800f264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f268:	f240 80e0 	bls.w	800f42c <_printf_float+0x3c0>
 800f26c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f270:	2200      	movs	r2, #0
 800f272:	2300      	movs	r3, #0
 800f274:	f7f1 fc58 	bl	8000b28 <__aeabi_dcmpeq>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d034      	beq.n	800f2e6 <_printf_float+0x27a>
 800f27c:	4a37      	ldr	r2, [pc, #220]	; (800f35c <_printf_float+0x2f0>)
 800f27e:	2301      	movs	r3, #1
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f af51 	beq.w	800f12e <_printf_float+0xc2>
 800f28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f290:	429a      	cmp	r2, r3
 800f292:	db02      	blt.n	800f29a <_printf_float+0x22e>
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	07d8      	lsls	r0, r3, #31
 800f298:	d510      	bpl.n	800f2bc <_printf_float+0x250>
 800f29a:	ee18 3a10 	vmov	r3, s16
 800f29e:	4652      	mov	r2, sl
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	f43f af41 	beq.w	800f12e <_printf_float+0xc2>
 800f2ac:	f04f 0800 	mov.w	r8, #0
 800f2b0:	f104 091a 	add.w	r9, r4, #26
 800f2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	4543      	cmp	r3, r8
 800f2ba:	dc09      	bgt.n	800f2d0 <_printf_float+0x264>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	079b      	lsls	r3, r3, #30
 800f2c0:	f100 8105 	bmi.w	800f4ce <_printf_float+0x462>
 800f2c4:	68e0      	ldr	r0, [r4, #12]
 800f2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c8:	4298      	cmp	r0, r3
 800f2ca:	bfb8      	it	lt
 800f2cc:	4618      	movlt	r0, r3
 800f2ce:	e730      	b.n	800f132 <_printf_float+0xc6>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	464a      	mov	r2, r9
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	47b8      	blx	r7
 800f2da:	3001      	adds	r0, #1
 800f2dc:	f43f af27 	beq.w	800f12e <_printf_float+0xc2>
 800f2e0:	f108 0801 	add.w	r8, r8, #1
 800f2e4:	e7e6      	b.n	800f2b4 <_printf_float+0x248>
 800f2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dc39      	bgt.n	800f360 <_printf_float+0x2f4>
 800f2ec:	4a1b      	ldr	r2, [pc, #108]	; (800f35c <_printf_float+0x2f0>)
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4631      	mov	r1, r6
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	47b8      	blx	r7
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	f43f af19 	beq.w	800f12e <_printf_float+0xc2>
 800f2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f300:	4313      	orrs	r3, r2
 800f302:	d102      	bne.n	800f30a <_printf_float+0x29e>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	07d9      	lsls	r1, r3, #31
 800f308:	d5d8      	bpl.n	800f2bc <_printf_float+0x250>
 800f30a:	ee18 3a10 	vmov	r3, s16
 800f30e:	4652      	mov	r2, sl
 800f310:	4631      	mov	r1, r6
 800f312:	4628      	mov	r0, r5
 800f314:	47b8      	blx	r7
 800f316:	3001      	adds	r0, #1
 800f318:	f43f af09 	beq.w	800f12e <_printf_float+0xc2>
 800f31c:	f04f 0900 	mov.w	r9, #0
 800f320:	f104 0a1a 	add.w	sl, r4, #26
 800f324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f326:	425b      	negs	r3, r3
 800f328:	454b      	cmp	r3, r9
 800f32a:	dc01      	bgt.n	800f330 <_printf_float+0x2c4>
 800f32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f32e:	e792      	b.n	800f256 <_printf_float+0x1ea>
 800f330:	2301      	movs	r3, #1
 800f332:	4652      	mov	r2, sl
 800f334:	4631      	mov	r1, r6
 800f336:	4628      	mov	r0, r5
 800f338:	47b8      	blx	r7
 800f33a:	3001      	adds	r0, #1
 800f33c:	f43f aef7 	beq.w	800f12e <_printf_float+0xc2>
 800f340:	f109 0901 	add.w	r9, r9, #1
 800f344:	e7ee      	b.n	800f324 <_printf_float+0x2b8>
 800f346:	bf00      	nop
 800f348:	7fefffff 	.word	0x7fefffff
 800f34c:	08064a54 	.word	0x08064a54
 800f350:	08064a58 	.word	0x08064a58
 800f354:	08064a60 	.word	0x08064a60
 800f358:	08064a5c 	.word	0x08064a5c
 800f35c:	08064a64 	.word	0x08064a64
 800f360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f364:	429a      	cmp	r2, r3
 800f366:	bfa8      	it	ge
 800f368:	461a      	movge	r2, r3
 800f36a:	2a00      	cmp	r2, #0
 800f36c:	4691      	mov	r9, r2
 800f36e:	dc37      	bgt.n	800f3e0 <_printf_float+0x374>
 800f370:	f04f 0b00 	mov.w	fp, #0
 800f374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f378:	f104 021a 	add.w	r2, r4, #26
 800f37c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f37e:	9305      	str	r3, [sp, #20]
 800f380:	eba3 0309 	sub.w	r3, r3, r9
 800f384:	455b      	cmp	r3, fp
 800f386:	dc33      	bgt.n	800f3f0 <_printf_float+0x384>
 800f388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f38c:	429a      	cmp	r2, r3
 800f38e:	db3b      	blt.n	800f408 <_printf_float+0x39c>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	07da      	lsls	r2, r3, #31
 800f394:	d438      	bmi.n	800f408 <_printf_float+0x39c>
 800f396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f398:	9a05      	ldr	r2, [sp, #20]
 800f39a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f39c:	1a9a      	subs	r2, r3, r2
 800f39e:	eba3 0901 	sub.w	r9, r3, r1
 800f3a2:	4591      	cmp	r9, r2
 800f3a4:	bfa8      	it	ge
 800f3a6:	4691      	movge	r9, r2
 800f3a8:	f1b9 0f00 	cmp.w	r9, #0
 800f3ac:	dc35      	bgt.n	800f41a <_printf_float+0x3ae>
 800f3ae:	f04f 0800 	mov.w	r8, #0
 800f3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3b6:	f104 0a1a 	add.w	sl, r4, #26
 800f3ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3be:	1a9b      	subs	r3, r3, r2
 800f3c0:	eba3 0309 	sub.w	r3, r3, r9
 800f3c4:	4543      	cmp	r3, r8
 800f3c6:	f77f af79 	ble.w	800f2bc <_printf_float+0x250>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	4652      	mov	r2, sl
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	47b8      	blx	r7
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	f43f aeaa 	beq.w	800f12e <_printf_float+0xc2>
 800f3da:	f108 0801 	add.w	r8, r8, #1
 800f3de:	e7ec      	b.n	800f3ba <_printf_float+0x34e>
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	4642      	mov	r2, r8
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	47b8      	blx	r7
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	d1c0      	bne.n	800f370 <_printf_float+0x304>
 800f3ee:	e69e      	b.n	800f12e <_printf_float+0xc2>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	9205      	str	r2, [sp, #20]
 800f3f8:	47b8      	blx	r7
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	f43f ae97 	beq.w	800f12e <_printf_float+0xc2>
 800f400:	9a05      	ldr	r2, [sp, #20]
 800f402:	f10b 0b01 	add.w	fp, fp, #1
 800f406:	e7b9      	b.n	800f37c <_printf_float+0x310>
 800f408:	ee18 3a10 	vmov	r3, s16
 800f40c:	4652      	mov	r2, sl
 800f40e:	4631      	mov	r1, r6
 800f410:	4628      	mov	r0, r5
 800f412:	47b8      	blx	r7
 800f414:	3001      	adds	r0, #1
 800f416:	d1be      	bne.n	800f396 <_printf_float+0x32a>
 800f418:	e689      	b.n	800f12e <_printf_float+0xc2>
 800f41a:	9a05      	ldr	r2, [sp, #20]
 800f41c:	464b      	mov	r3, r9
 800f41e:	4442      	add	r2, r8
 800f420:	4631      	mov	r1, r6
 800f422:	4628      	mov	r0, r5
 800f424:	47b8      	blx	r7
 800f426:	3001      	adds	r0, #1
 800f428:	d1c1      	bne.n	800f3ae <_printf_float+0x342>
 800f42a:	e680      	b.n	800f12e <_printf_float+0xc2>
 800f42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f42e:	2a01      	cmp	r2, #1
 800f430:	dc01      	bgt.n	800f436 <_printf_float+0x3ca>
 800f432:	07db      	lsls	r3, r3, #31
 800f434:	d538      	bpl.n	800f4a8 <_printf_float+0x43c>
 800f436:	2301      	movs	r3, #1
 800f438:	4642      	mov	r2, r8
 800f43a:	4631      	mov	r1, r6
 800f43c:	4628      	mov	r0, r5
 800f43e:	47b8      	blx	r7
 800f440:	3001      	adds	r0, #1
 800f442:	f43f ae74 	beq.w	800f12e <_printf_float+0xc2>
 800f446:	ee18 3a10 	vmov	r3, s16
 800f44a:	4652      	mov	r2, sl
 800f44c:	4631      	mov	r1, r6
 800f44e:	4628      	mov	r0, r5
 800f450:	47b8      	blx	r7
 800f452:	3001      	adds	r0, #1
 800f454:	f43f ae6b 	beq.w	800f12e <_printf_float+0xc2>
 800f458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f45c:	2200      	movs	r2, #0
 800f45e:	2300      	movs	r3, #0
 800f460:	f7f1 fb62 	bl	8000b28 <__aeabi_dcmpeq>
 800f464:	b9d8      	cbnz	r0, 800f49e <_printf_float+0x432>
 800f466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f468:	f108 0201 	add.w	r2, r8, #1
 800f46c:	3b01      	subs	r3, #1
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	d10e      	bne.n	800f496 <_printf_float+0x42a>
 800f478:	e659      	b.n	800f12e <_printf_float+0xc2>
 800f47a:	2301      	movs	r3, #1
 800f47c:	4652      	mov	r2, sl
 800f47e:	4631      	mov	r1, r6
 800f480:	4628      	mov	r0, r5
 800f482:	47b8      	blx	r7
 800f484:	3001      	adds	r0, #1
 800f486:	f43f ae52 	beq.w	800f12e <_printf_float+0xc2>
 800f48a:	f108 0801 	add.w	r8, r8, #1
 800f48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f490:	3b01      	subs	r3, #1
 800f492:	4543      	cmp	r3, r8
 800f494:	dcf1      	bgt.n	800f47a <_printf_float+0x40e>
 800f496:	464b      	mov	r3, r9
 800f498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f49c:	e6dc      	b.n	800f258 <_printf_float+0x1ec>
 800f49e:	f04f 0800 	mov.w	r8, #0
 800f4a2:	f104 0a1a 	add.w	sl, r4, #26
 800f4a6:	e7f2      	b.n	800f48e <_printf_float+0x422>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	4642      	mov	r2, r8
 800f4ac:	e7df      	b.n	800f46e <_printf_float+0x402>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	464a      	mov	r2, r9
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	47b8      	blx	r7
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f ae38 	beq.w	800f12e <_printf_float+0xc2>
 800f4be:	f108 0801 	add.w	r8, r8, #1
 800f4c2:	68e3      	ldr	r3, [r4, #12]
 800f4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4c6:	1a5b      	subs	r3, r3, r1
 800f4c8:	4543      	cmp	r3, r8
 800f4ca:	dcf0      	bgt.n	800f4ae <_printf_float+0x442>
 800f4cc:	e6fa      	b.n	800f2c4 <_printf_float+0x258>
 800f4ce:	f04f 0800 	mov.w	r8, #0
 800f4d2:	f104 0919 	add.w	r9, r4, #25
 800f4d6:	e7f4      	b.n	800f4c2 <_printf_float+0x456>

0800f4d8 <_printf_common>:
 800f4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4dc:	4616      	mov	r6, r2
 800f4de:	4699      	mov	r9, r3
 800f4e0:	688a      	ldr	r2, [r1, #8]
 800f4e2:	690b      	ldr	r3, [r1, #16]
 800f4e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	bfb8      	it	lt
 800f4ec:	4613      	movlt	r3, r2
 800f4ee:	6033      	str	r3, [r6, #0]
 800f4f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4f4:	4607      	mov	r7, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	b10a      	cbz	r2, 800f4fe <_printf_common+0x26>
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	6033      	str	r3, [r6, #0]
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	0699      	lsls	r1, r3, #26
 800f502:	bf42      	ittt	mi
 800f504:	6833      	ldrmi	r3, [r6, #0]
 800f506:	3302      	addmi	r3, #2
 800f508:	6033      	strmi	r3, [r6, #0]
 800f50a:	6825      	ldr	r5, [r4, #0]
 800f50c:	f015 0506 	ands.w	r5, r5, #6
 800f510:	d106      	bne.n	800f520 <_printf_common+0x48>
 800f512:	f104 0a19 	add.w	sl, r4, #25
 800f516:	68e3      	ldr	r3, [r4, #12]
 800f518:	6832      	ldr	r2, [r6, #0]
 800f51a:	1a9b      	subs	r3, r3, r2
 800f51c:	42ab      	cmp	r3, r5
 800f51e:	dc26      	bgt.n	800f56e <_printf_common+0x96>
 800f520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f524:	1e13      	subs	r3, r2, #0
 800f526:	6822      	ldr	r2, [r4, #0]
 800f528:	bf18      	it	ne
 800f52a:	2301      	movne	r3, #1
 800f52c:	0692      	lsls	r2, r2, #26
 800f52e:	d42b      	bmi.n	800f588 <_printf_common+0xb0>
 800f530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f534:	4649      	mov	r1, r9
 800f536:	4638      	mov	r0, r7
 800f538:	47c0      	blx	r8
 800f53a:	3001      	adds	r0, #1
 800f53c:	d01e      	beq.n	800f57c <_printf_common+0xa4>
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	68e5      	ldr	r5, [r4, #12]
 800f542:	6832      	ldr	r2, [r6, #0]
 800f544:	f003 0306 	and.w	r3, r3, #6
 800f548:	2b04      	cmp	r3, #4
 800f54a:	bf08      	it	eq
 800f54c:	1aad      	subeq	r5, r5, r2
 800f54e:	68a3      	ldr	r3, [r4, #8]
 800f550:	6922      	ldr	r2, [r4, #16]
 800f552:	bf0c      	ite	eq
 800f554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f558:	2500      	movne	r5, #0
 800f55a:	4293      	cmp	r3, r2
 800f55c:	bfc4      	itt	gt
 800f55e:	1a9b      	subgt	r3, r3, r2
 800f560:	18ed      	addgt	r5, r5, r3
 800f562:	2600      	movs	r6, #0
 800f564:	341a      	adds	r4, #26
 800f566:	42b5      	cmp	r5, r6
 800f568:	d11a      	bne.n	800f5a0 <_printf_common+0xc8>
 800f56a:	2000      	movs	r0, #0
 800f56c:	e008      	b.n	800f580 <_printf_common+0xa8>
 800f56e:	2301      	movs	r3, #1
 800f570:	4652      	mov	r2, sl
 800f572:	4649      	mov	r1, r9
 800f574:	4638      	mov	r0, r7
 800f576:	47c0      	blx	r8
 800f578:	3001      	adds	r0, #1
 800f57a:	d103      	bne.n	800f584 <_printf_common+0xac>
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f584:	3501      	adds	r5, #1
 800f586:	e7c6      	b.n	800f516 <_printf_common+0x3e>
 800f588:	18e1      	adds	r1, r4, r3
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	2030      	movs	r0, #48	; 0x30
 800f58e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f592:	4422      	add	r2, r4
 800f594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f59c:	3302      	adds	r3, #2
 800f59e:	e7c7      	b.n	800f530 <_printf_common+0x58>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	4649      	mov	r1, r9
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	47c0      	blx	r8
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	d0e6      	beq.n	800f57c <_printf_common+0xa4>
 800f5ae:	3601      	adds	r6, #1
 800f5b0:	e7d9      	b.n	800f566 <_printf_common+0x8e>
	...

0800f5b4 <_printf_i>:
 800f5b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	7e0f      	ldrb	r7, [r1, #24]
 800f5ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f5bc:	2f78      	cmp	r7, #120	; 0x78
 800f5be:	4691      	mov	r9, r2
 800f5c0:	4680      	mov	r8, r0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	469a      	mov	sl, r3
 800f5c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5ca:	d807      	bhi.n	800f5dc <_printf_i+0x28>
 800f5cc:	2f62      	cmp	r7, #98	; 0x62
 800f5ce:	d80a      	bhi.n	800f5e6 <_printf_i+0x32>
 800f5d0:	2f00      	cmp	r7, #0
 800f5d2:	f000 80d8 	beq.w	800f786 <_printf_i+0x1d2>
 800f5d6:	2f58      	cmp	r7, #88	; 0x58
 800f5d8:	f000 80a3 	beq.w	800f722 <_printf_i+0x16e>
 800f5dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f5e4:	e03a      	b.n	800f65c <_printf_i+0xa8>
 800f5e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5ea:	2b15      	cmp	r3, #21
 800f5ec:	d8f6      	bhi.n	800f5dc <_printf_i+0x28>
 800f5ee:	a101      	add	r1, pc, #4	; (adr r1, 800f5f4 <_printf_i+0x40>)
 800f5f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5f4:	0800f64d 	.word	0x0800f64d
 800f5f8:	0800f661 	.word	0x0800f661
 800f5fc:	0800f5dd 	.word	0x0800f5dd
 800f600:	0800f5dd 	.word	0x0800f5dd
 800f604:	0800f5dd 	.word	0x0800f5dd
 800f608:	0800f5dd 	.word	0x0800f5dd
 800f60c:	0800f661 	.word	0x0800f661
 800f610:	0800f5dd 	.word	0x0800f5dd
 800f614:	0800f5dd 	.word	0x0800f5dd
 800f618:	0800f5dd 	.word	0x0800f5dd
 800f61c:	0800f5dd 	.word	0x0800f5dd
 800f620:	0800f76d 	.word	0x0800f76d
 800f624:	0800f691 	.word	0x0800f691
 800f628:	0800f74f 	.word	0x0800f74f
 800f62c:	0800f5dd 	.word	0x0800f5dd
 800f630:	0800f5dd 	.word	0x0800f5dd
 800f634:	0800f78f 	.word	0x0800f78f
 800f638:	0800f5dd 	.word	0x0800f5dd
 800f63c:	0800f691 	.word	0x0800f691
 800f640:	0800f5dd 	.word	0x0800f5dd
 800f644:	0800f5dd 	.word	0x0800f5dd
 800f648:	0800f757 	.word	0x0800f757
 800f64c:	682b      	ldr	r3, [r5, #0]
 800f64e:	1d1a      	adds	r2, r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	602a      	str	r2, [r5, #0]
 800f654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f65c:	2301      	movs	r3, #1
 800f65e:	e0a3      	b.n	800f7a8 <_printf_i+0x1f4>
 800f660:	6820      	ldr	r0, [r4, #0]
 800f662:	6829      	ldr	r1, [r5, #0]
 800f664:	0606      	lsls	r6, r0, #24
 800f666:	f101 0304 	add.w	r3, r1, #4
 800f66a:	d50a      	bpl.n	800f682 <_printf_i+0xce>
 800f66c:	680e      	ldr	r6, [r1, #0]
 800f66e:	602b      	str	r3, [r5, #0]
 800f670:	2e00      	cmp	r6, #0
 800f672:	da03      	bge.n	800f67c <_printf_i+0xc8>
 800f674:	232d      	movs	r3, #45	; 0x2d
 800f676:	4276      	negs	r6, r6
 800f678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f67c:	485e      	ldr	r0, [pc, #376]	; (800f7f8 <_printf_i+0x244>)
 800f67e:	230a      	movs	r3, #10
 800f680:	e019      	b.n	800f6b6 <_printf_i+0x102>
 800f682:	680e      	ldr	r6, [r1, #0]
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f68a:	bf18      	it	ne
 800f68c:	b236      	sxthne	r6, r6
 800f68e:	e7ef      	b.n	800f670 <_printf_i+0xbc>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	6820      	ldr	r0, [r4, #0]
 800f694:	1d19      	adds	r1, r3, #4
 800f696:	6029      	str	r1, [r5, #0]
 800f698:	0601      	lsls	r1, r0, #24
 800f69a:	d501      	bpl.n	800f6a0 <_printf_i+0xec>
 800f69c:	681e      	ldr	r6, [r3, #0]
 800f69e:	e002      	b.n	800f6a6 <_printf_i+0xf2>
 800f6a0:	0646      	lsls	r6, r0, #25
 800f6a2:	d5fb      	bpl.n	800f69c <_printf_i+0xe8>
 800f6a4:	881e      	ldrh	r6, [r3, #0]
 800f6a6:	4854      	ldr	r0, [pc, #336]	; (800f7f8 <_printf_i+0x244>)
 800f6a8:	2f6f      	cmp	r7, #111	; 0x6f
 800f6aa:	bf0c      	ite	eq
 800f6ac:	2308      	moveq	r3, #8
 800f6ae:	230a      	movne	r3, #10
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6b6:	6865      	ldr	r5, [r4, #4]
 800f6b8:	60a5      	str	r5, [r4, #8]
 800f6ba:	2d00      	cmp	r5, #0
 800f6bc:	bfa2      	ittt	ge
 800f6be:	6821      	ldrge	r1, [r4, #0]
 800f6c0:	f021 0104 	bicge.w	r1, r1, #4
 800f6c4:	6021      	strge	r1, [r4, #0]
 800f6c6:	b90e      	cbnz	r6, 800f6cc <_printf_i+0x118>
 800f6c8:	2d00      	cmp	r5, #0
 800f6ca:	d04d      	beq.n	800f768 <_printf_i+0x1b4>
 800f6cc:	4615      	mov	r5, r2
 800f6ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800f6d2:	fb03 6711 	mls	r7, r3, r1, r6
 800f6d6:	5dc7      	ldrb	r7, [r0, r7]
 800f6d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f6dc:	4637      	mov	r7, r6
 800f6de:	42bb      	cmp	r3, r7
 800f6e0:	460e      	mov	r6, r1
 800f6e2:	d9f4      	bls.n	800f6ce <_printf_i+0x11a>
 800f6e4:	2b08      	cmp	r3, #8
 800f6e6:	d10b      	bne.n	800f700 <_printf_i+0x14c>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	07de      	lsls	r6, r3, #31
 800f6ec:	d508      	bpl.n	800f700 <_printf_i+0x14c>
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	6861      	ldr	r1, [r4, #4]
 800f6f2:	4299      	cmp	r1, r3
 800f6f4:	bfde      	ittt	le
 800f6f6:	2330      	movle	r3, #48	; 0x30
 800f6f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f700:	1b52      	subs	r2, r2, r5
 800f702:	6122      	str	r2, [r4, #16]
 800f704:	f8cd a000 	str.w	sl, [sp]
 800f708:	464b      	mov	r3, r9
 800f70a:	aa03      	add	r2, sp, #12
 800f70c:	4621      	mov	r1, r4
 800f70e:	4640      	mov	r0, r8
 800f710:	f7ff fee2 	bl	800f4d8 <_printf_common>
 800f714:	3001      	adds	r0, #1
 800f716:	d14c      	bne.n	800f7b2 <_printf_i+0x1fe>
 800f718:	f04f 30ff 	mov.w	r0, #4294967295
 800f71c:	b004      	add	sp, #16
 800f71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f722:	4835      	ldr	r0, [pc, #212]	; (800f7f8 <_printf_i+0x244>)
 800f724:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f728:	6829      	ldr	r1, [r5, #0]
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f730:	6029      	str	r1, [r5, #0]
 800f732:	061d      	lsls	r5, r3, #24
 800f734:	d514      	bpl.n	800f760 <_printf_i+0x1ac>
 800f736:	07df      	lsls	r7, r3, #31
 800f738:	bf44      	itt	mi
 800f73a:	f043 0320 	orrmi.w	r3, r3, #32
 800f73e:	6023      	strmi	r3, [r4, #0]
 800f740:	b91e      	cbnz	r6, 800f74a <_printf_i+0x196>
 800f742:	6823      	ldr	r3, [r4, #0]
 800f744:	f023 0320 	bic.w	r3, r3, #32
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	2310      	movs	r3, #16
 800f74c:	e7b0      	b.n	800f6b0 <_printf_i+0xfc>
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	f043 0320 	orr.w	r3, r3, #32
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	2378      	movs	r3, #120	; 0x78
 800f758:	4828      	ldr	r0, [pc, #160]	; (800f7fc <_printf_i+0x248>)
 800f75a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f75e:	e7e3      	b.n	800f728 <_printf_i+0x174>
 800f760:	0659      	lsls	r1, r3, #25
 800f762:	bf48      	it	mi
 800f764:	b2b6      	uxthmi	r6, r6
 800f766:	e7e6      	b.n	800f736 <_printf_i+0x182>
 800f768:	4615      	mov	r5, r2
 800f76a:	e7bb      	b.n	800f6e4 <_printf_i+0x130>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	6826      	ldr	r6, [r4, #0]
 800f770:	6961      	ldr	r1, [r4, #20]
 800f772:	1d18      	adds	r0, r3, #4
 800f774:	6028      	str	r0, [r5, #0]
 800f776:	0635      	lsls	r5, r6, #24
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	d501      	bpl.n	800f780 <_printf_i+0x1cc>
 800f77c:	6019      	str	r1, [r3, #0]
 800f77e:	e002      	b.n	800f786 <_printf_i+0x1d2>
 800f780:	0670      	lsls	r0, r6, #25
 800f782:	d5fb      	bpl.n	800f77c <_printf_i+0x1c8>
 800f784:	8019      	strh	r1, [r3, #0]
 800f786:	2300      	movs	r3, #0
 800f788:	6123      	str	r3, [r4, #16]
 800f78a:	4615      	mov	r5, r2
 800f78c:	e7ba      	b.n	800f704 <_printf_i+0x150>
 800f78e:	682b      	ldr	r3, [r5, #0]
 800f790:	1d1a      	adds	r2, r3, #4
 800f792:	602a      	str	r2, [r5, #0]
 800f794:	681d      	ldr	r5, [r3, #0]
 800f796:	6862      	ldr	r2, [r4, #4]
 800f798:	2100      	movs	r1, #0
 800f79a:	4628      	mov	r0, r5
 800f79c:	f7f0 fd50 	bl	8000240 <memchr>
 800f7a0:	b108      	cbz	r0, 800f7a6 <_printf_i+0x1f2>
 800f7a2:	1b40      	subs	r0, r0, r5
 800f7a4:	6060      	str	r0, [r4, #4]
 800f7a6:	6863      	ldr	r3, [r4, #4]
 800f7a8:	6123      	str	r3, [r4, #16]
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7b0:	e7a8      	b.n	800f704 <_printf_i+0x150>
 800f7b2:	6923      	ldr	r3, [r4, #16]
 800f7b4:	462a      	mov	r2, r5
 800f7b6:	4649      	mov	r1, r9
 800f7b8:	4640      	mov	r0, r8
 800f7ba:	47d0      	blx	sl
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d0ab      	beq.n	800f718 <_printf_i+0x164>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	079b      	lsls	r3, r3, #30
 800f7c4:	d413      	bmi.n	800f7ee <_printf_i+0x23a>
 800f7c6:	68e0      	ldr	r0, [r4, #12]
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	4298      	cmp	r0, r3
 800f7cc:	bfb8      	it	lt
 800f7ce:	4618      	movlt	r0, r3
 800f7d0:	e7a4      	b.n	800f71c <_printf_i+0x168>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	4640      	mov	r0, r8
 800f7da:	47d0      	blx	sl
 800f7dc:	3001      	adds	r0, #1
 800f7de:	d09b      	beq.n	800f718 <_printf_i+0x164>
 800f7e0:	3501      	adds	r5, #1
 800f7e2:	68e3      	ldr	r3, [r4, #12]
 800f7e4:	9903      	ldr	r1, [sp, #12]
 800f7e6:	1a5b      	subs	r3, r3, r1
 800f7e8:	42ab      	cmp	r3, r5
 800f7ea:	dcf2      	bgt.n	800f7d2 <_printf_i+0x21e>
 800f7ec:	e7eb      	b.n	800f7c6 <_printf_i+0x212>
 800f7ee:	2500      	movs	r5, #0
 800f7f0:	f104 0619 	add.w	r6, r4, #25
 800f7f4:	e7f5      	b.n	800f7e2 <_printf_i+0x22e>
 800f7f6:	bf00      	nop
 800f7f8:	08064a66 	.word	0x08064a66
 800f7fc:	08064a77 	.word	0x08064a77

0800f800 <_sbrk_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4d06      	ldr	r5, [pc, #24]	; (800f81c <_sbrk_r+0x1c>)
 800f804:	2300      	movs	r3, #0
 800f806:	4604      	mov	r4, r0
 800f808:	4608      	mov	r0, r1
 800f80a:	602b      	str	r3, [r5, #0]
 800f80c:	f7f2 fe76 	bl	80024fc <_sbrk>
 800f810:	1c43      	adds	r3, r0, #1
 800f812:	d102      	bne.n	800f81a <_sbrk_r+0x1a>
 800f814:	682b      	ldr	r3, [r5, #0]
 800f816:	b103      	cbz	r3, 800f81a <_sbrk_r+0x1a>
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	bd38      	pop	{r3, r4, r5, pc}
 800f81c:	2000b6b4 	.word	0x2000b6b4

0800f820 <siprintf>:
 800f820:	b40e      	push	{r1, r2, r3}
 800f822:	b500      	push	{lr}
 800f824:	b09c      	sub	sp, #112	; 0x70
 800f826:	ab1d      	add	r3, sp, #116	; 0x74
 800f828:	9002      	str	r0, [sp, #8]
 800f82a:	9006      	str	r0, [sp, #24]
 800f82c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f830:	4809      	ldr	r0, [pc, #36]	; (800f858 <siprintf+0x38>)
 800f832:	9107      	str	r1, [sp, #28]
 800f834:	9104      	str	r1, [sp, #16]
 800f836:	4909      	ldr	r1, [pc, #36]	; (800f85c <siprintf+0x3c>)
 800f838:	f853 2b04 	ldr.w	r2, [r3], #4
 800f83c:	9105      	str	r1, [sp, #20]
 800f83e:	6800      	ldr	r0, [r0, #0]
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	a902      	add	r1, sp, #8
 800f844:	f001 fac2 	bl	8010dcc <_svfiprintf_r>
 800f848:	9b02      	ldr	r3, [sp, #8]
 800f84a:	2200      	movs	r2, #0
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	b01c      	add	sp, #112	; 0x70
 800f850:	f85d eb04 	ldr.w	lr, [sp], #4
 800f854:	b003      	add	sp, #12
 800f856:	4770      	bx	lr
 800f858:	20000eac 	.word	0x20000eac
 800f85c:	ffff0208 	.word	0xffff0208

0800f860 <strcpy>:
 800f860:	4603      	mov	r3, r0
 800f862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f866:	f803 2b01 	strb.w	r2, [r3], #1
 800f86a:	2a00      	cmp	r2, #0
 800f86c:	d1f9      	bne.n	800f862 <strcpy+0x2>
 800f86e:	4770      	bx	lr

0800f870 <quorem>:
 800f870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	6903      	ldr	r3, [r0, #16]
 800f876:	690c      	ldr	r4, [r1, #16]
 800f878:	42a3      	cmp	r3, r4
 800f87a:	4607      	mov	r7, r0
 800f87c:	f2c0 8081 	blt.w	800f982 <quorem+0x112>
 800f880:	3c01      	subs	r4, #1
 800f882:	f101 0814 	add.w	r8, r1, #20
 800f886:	f100 0514 	add.w	r5, r0, #20
 800f88a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f88e:	9301      	str	r3, [sp, #4]
 800f890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f898:	3301      	adds	r3, #1
 800f89a:	429a      	cmp	r2, r3
 800f89c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f8a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8a8:	d331      	bcc.n	800f90e <quorem+0x9e>
 800f8aa:	f04f 0e00 	mov.w	lr, #0
 800f8ae:	4640      	mov	r0, r8
 800f8b0:	46ac      	mov	ip, r5
 800f8b2:	46f2      	mov	sl, lr
 800f8b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f8b8:	b293      	uxth	r3, r2
 800f8ba:	fb06 e303 	mla	r3, r6, r3, lr
 800f8be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	ebaa 0303 	sub.w	r3, sl, r3
 800f8c8:	f8dc a000 	ldr.w	sl, [ip]
 800f8cc:	0c12      	lsrs	r2, r2, #16
 800f8ce:	fa13 f38a 	uxtah	r3, r3, sl
 800f8d2:	fb06 e202 	mla	r2, r6, r2, lr
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	9b00      	ldr	r3, [sp, #0]
 800f8da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f8de:	b292      	uxth	r2, r2
 800f8e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f8e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f8e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f8ec:	4581      	cmp	r9, r0
 800f8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8f2:	f84c 3b04 	str.w	r3, [ip], #4
 800f8f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f8fa:	d2db      	bcs.n	800f8b4 <quorem+0x44>
 800f8fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f900:	b92b      	cbnz	r3, 800f90e <quorem+0x9e>
 800f902:	9b01      	ldr	r3, [sp, #4]
 800f904:	3b04      	subs	r3, #4
 800f906:	429d      	cmp	r5, r3
 800f908:	461a      	mov	r2, r3
 800f90a:	d32e      	bcc.n	800f96a <quorem+0xfa>
 800f90c:	613c      	str	r4, [r7, #16]
 800f90e:	4638      	mov	r0, r7
 800f910:	f001 f8ba 	bl	8010a88 <__mcmp>
 800f914:	2800      	cmp	r0, #0
 800f916:	db24      	blt.n	800f962 <quorem+0xf2>
 800f918:	3601      	adds	r6, #1
 800f91a:	4628      	mov	r0, r5
 800f91c:	f04f 0c00 	mov.w	ip, #0
 800f920:	f858 2b04 	ldr.w	r2, [r8], #4
 800f924:	f8d0 e000 	ldr.w	lr, [r0]
 800f928:	b293      	uxth	r3, r2
 800f92a:	ebac 0303 	sub.w	r3, ip, r3
 800f92e:	0c12      	lsrs	r2, r2, #16
 800f930:	fa13 f38e 	uxtah	r3, r3, lr
 800f934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f942:	45c1      	cmp	r9, r8
 800f944:	f840 3b04 	str.w	r3, [r0], #4
 800f948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f94c:	d2e8      	bcs.n	800f920 <quorem+0xb0>
 800f94e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f956:	b922      	cbnz	r2, 800f962 <quorem+0xf2>
 800f958:	3b04      	subs	r3, #4
 800f95a:	429d      	cmp	r5, r3
 800f95c:	461a      	mov	r2, r3
 800f95e:	d30a      	bcc.n	800f976 <quorem+0x106>
 800f960:	613c      	str	r4, [r7, #16]
 800f962:	4630      	mov	r0, r6
 800f964:	b003      	add	sp, #12
 800f966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96a:	6812      	ldr	r2, [r2, #0]
 800f96c:	3b04      	subs	r3, #4
 800f96e:	2a00      	cmp	r2, #0
 800f970:	d1cc      	bne.n	800f90c <quorem+0x9c>
 800f972:	3c01      	subs	r4, #1
 800f974:	e7c7      	b.n	800f906 <quorem+0x96>
 800f976:	6812      	ldr	r2, [r2, #0]
 800f978:	3b04      	subs	r3, #4
 800f97a:	2a00      	cmp	r2, #0
 800f97c:	d1f0      	bne.n	800f960 <quorem+0xf0>
 800f97e:	3c01      	subs	r4, #1
 800f980:	e7eb      	b.n	800f95a <quorem+0xea>
 800f982:	2000      	movs	r0, #0
 800f984:	e7ee      	b.n	800f964 <quorem+0xf4>
	...

0800f988 <_dtoa_r>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	ed2d 8b04 	vpush	{d8-d9}
 800f990:	ec57 6b10 	vmov	r6, r7, d0
 800f994:	b093      	sub	sp, #76	; 0x4c
 800f996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f99c:	9106      	str	r1, [sp, #24]
 800f99e:	ee10 aa10 	vmov	sl, s0
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	9209      	str	r2, [sp, #36]	; 0x24
 800f9a6:	930c      	str	r3, [sp, #48]	; 0x30
 800f9a8:	46bb      	mov	fp, r7
 800f9aa:	b975      	cbnz	r5, 800f9ca <_dtoa_r+0x42>
 800f9ac:	2010      	movs	r0, #16
 800f9ae:	f7ff f9bf 	bl	800ed30 <malloc>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	6260      	str	r0, [r4, #36]	; 0x24
 800f9b6:	b920      	cbnz	r0, 800f9c2 <_dtoa_r+0x3a>
 800f9b8:	4ba7      	ldr	r3, [pc, #668]	; (800fc58 <_dtoa_r+0x2d0>)
 800f9ba:	21ea      	movs	r1, #234	; 0xea
 800f9bc:	48a7      	ldr	r0, [pc, #668]	; (800fc5c <_dtoa_r+0x2d4>)
 800f9be:	f001 fb05 	bl	8010fcc <__assert_func>
 800f9c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f9c6:	6005      	str	r5, [r0, #0]
 800f9c8:	60c5      	str	r5, [r0, #12]
 800f9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9cc:	6819      	ldr	r1, [r3, #0]
 800f9ce:	b151      	cbz	r1, 800f9e6 <_dtoa_r+0x5e>
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	604a      	str	r2, [r1, #4]
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4093      	lsls	r3, r2
 800f9d8:	608b      	str	r3, [r1, #8]
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f000 fe12 	bl	8010604 <_Bfree>
 800f9e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	601a      	str	r2, [r3, #0]
 800f9e6:	1e3b      	subs	r3, r7, #0
 800f9e8:	bfaa      	itet	ge
 800f9ea:	2300      	movge	r3, #0
 800f9ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f9f0:	f8c8 3000 	strge.w	r3, [r8]
 800f9f4:	4b9a      	ldr	r3, [pc, #616]	; (800fc60 <_dtoa_r+0x2d8>)
 800f9f6:	bfbc      	itt	lt
 800f9f8:	2201      	movlt	r2, #1
 800f9fa:	f8c8 2000 	strlt.w	r2, [r8]
 800f9fe:	ea33 030b 	bics.w	r3, r3, fp
 800fa02:	d11b      	bne.n	800fa3c <_dtoa_r+0xb4>
 800fa04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa06:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa0a:	6013      	str	r3, [r2, #0]
 800fa0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa10:	4333      	orrs	r3, r6
 800fa12:	f000 8592 	beq.w	801053a <_dtoa_r+0xbb2>
 800fa16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa18:	b963      	cbnz	r3, 800fa34 <_dtoa_r+0xac>
 800fa1a:	4b92      	ldr	r3, [pc, #584]	; (800fc64 <_dtoa_r+0x2dc>)
 800fa1c:	e022      	b.n	800fa64 <_dtoa_r+0xdc>
 800fa1e:	4b92      	ldr	r3, [pc, #584]	; (800fc68 <_dtoa_r+0x2e0>)
 800fa20:	9301      	str	r3, [sp, #4]
 800fa22:	3308      	adds	r3, #8
 800fa24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa26:	6013      	str	r3, [r2, #0]
 800fa28:	9801      	ldr	r0, [sp, #4]
 800fa2a:	b013      	add	sp, #76	; 0x4c
 800fa2c:	ecbd 8b04 	vpop	{d8-d9}
 800fa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa34:	4b8b      	ldr	r3, [pc, #556]	; (800fc64 <_dtoa_r+0x2dc>)
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	3303      	adds	r3, #3
 800fa3a:	e7f3      	b.n	800fa24 <_dtoa_r+0x9c>
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	2300      	movs	r3, #0
 800fa40:	4650      	mov	r0, sl
 800fa42:	4659      	mov	r1, fp
 800fa44:	f7f1 f870 	bl	8000b28 <__aeabi_dcmpeq>
 800fa48:	ec4b ab19 	vmov	d9, sl, fp
 800fa4c:	4680      	mov	r8, r0
 800fa4e:	b158      	cbz	r0, 800fa68 <_dtoa_r+0xe0>
 800fa50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa52:	2301      	movs	r3, #1
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f000 856b 	beq.w	8010534 <_dtoa_r+0xbac>
 800fa5e:	4883      	ldr	r0, [pc, #524]	; (800fc6c <_dtoa_r+0x2e4>)
 800fa60:	6018      	str	r0, [r3, #0]
 800fa62:	1e43      	subs	r3, r0, #1
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	e7df      	b.n	800fa28 <_dtoa_r+0xa0>
 800fa68:	ec4b ab10 	vmov	d0, sl, fp
 800fa6c:	aa10      	add	r2, sp, #64	; 0x40
 800fa6e:	a911      	add	r1, sp, #68	; 0x44
 800fa70:	4620      	mov	r0, r4
 800fa72:	f001 f8af 	bl	8010bd4 <__d2b>
 800fa76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fa7a:	ee08 0a10 	vmov	s16, r0
 800fa7e:	2d00      	cmp	r5, #0
 800fa80:	f000 8084 	beq.w	800fb8c <_dtoa_r+0x204>
 800fa84:	ee19 3a90 	vmov	r3, s19
 800fa88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fa90:	4656      	mov	r6, sl
 800fa92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fa96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fa9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fa9e:	4b74      	ldr	r3, [pc, #464]	; (800fc70 <_dtoa_r+0x2e8>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	4630      	mov	r0, r6
 800faa4:	4639      	mov	r1, r7
 800faa6:	f7f0 fc1f 	bl	80002e8 <__aeabi_dsub>
 800faaa:	a365      	add	r3, pc, #404	; (adr r3, 800fc40 <_dtoa_r+0x2b8>)
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	f7f0 fdd2 	bl	8000658 <__aeabi_dmul>
 800fab4:	a364      	add	r3, pc, #400	; (adr r3, 800fc48 <_dtoa_r+0x2c0>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f0 fc17 	bl	80002ec <__adddf3>
 800fabe:	4606      	mov	r6, r0
 800fac0:	4628      	mov	r0, r5
 800fac2:	460f      	mov	r7, r1
 800fac4:	f7f0 fd5e 	bl	8000584 <__aeabi_i2d>
 800fac8:	a361      	add	r3, pc, #388	; (adr r3, 800fc50 <_dtoa_r+0x2c8>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fdc3 	bl	8000658 <__aeabi_dmul>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	4630      	mov	r0, r6
 800fad8:	4639      	mov	r1, r7
 800fada:	f7f0 fc07 	bl	80002ec <__adddf3>
 800fade:	4606      	mov	r6, r0
 800fae0:	460f      	mov	r7, r1
 800fae2:	f7f1 f869 	bl	8000bb8 <__aeabi_d2iz>
 800fae6:	2200      	movs	r2, #0
 800fae8:	9000      	str	r0, [sp, #0]
 800faea:	2300      	movs	r3, #0
 800faec:	4630      	mov	r0, r6
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f1 f824 	bl	8000b3c <__aeabi_dcmplt>
 800faf4:	b150      	cbz	r0, 800fb0c <_dtoa_r+0x184>
 800faf6:	9800      	ldr	r0, [sp, #0]
 800faf8:	f7f0 fd44 	bl	8000584 <__aeabi_i2d>
 800fafc:	4632      	mov	r2, r6
 800fafe:	463b      	mov	r3, r7
 800fb00:	f7f1 f812 	bl	8000b28 <__aeabi_dcmpeq>
 800fb04:	b910      	cbnz	r0, 800fb0c <_dtoa_r+0x184>
 800fb06:	9b00      	ldr	r3, [sp, #0]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	9b00      	ldr	r3, [sp, #0]
 800fb0e:	2b16      	cmp	r3, #22
 800fb10:	d85a      	bhi.n	800fbc8 <_dtoa_r+0x240>
 800fb12:	9a00      	ldr	r2, [sp, #0]
 800fb14:	4b57      	ldr	r3, [pc, #348]	; (800fc74 <_dtoa_r+0x2ec>)
 800fb16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1e:	ec51 0b19 	vmov	r0, r1, d9
 800fb22:	f7f1 f80b 	bl	8000b3c <__aeabi_dcmplt>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d050      	beq.n	800fbcc <_dtoa_r+0x244>
 800fb2a:	9b00      	ldr	r3, [sp, #0]
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	2300      	movs	r3, #0
 800fb32:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb36:	1b5d      	subs	r5, r3, r5
 800fb38:	1e6b      	subs	r3, r5, #1
 800fb3a:	9305      	str	r3, [sp, #20]
 800fb3c:	bf45      	ittet	mi
 800fb3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb42:	9304      	strmi	r3, [sp, #16]
 800fb44:	2300      	movpl	r3, #0
 800fb46:	2300      	movmi	r3, #0
 800fb48:	bf4c      	ite	mi
 800fb4a:	9305      	strmi	r3, [sp, #20]
 800fb4c:	9304      	strpl	r3, [sp, #16]
 800fb4e:	9b00      	ldr	r3, [sp, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	db3d      	blt.n	800fbd0 <_dtoa_r+0x248>
 800fb54:	9b05      	ldr	r3, [sp, #20]
 800fb56:	9a00      	ldr	r2, [sp, #0]
 800fb58:	920a      	str	r2, [sp, #40]	; 0x28
 800fb5a:	4413      	add	r3, r2
 800fb5c:	9305      	str	r3, [sp, #20]
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9307      	str	r3, [sp, #28]
 800fb62:	9b06      	ldr	r3, [sp, #24]
 800fb64:	2b09      	cmp	r3, #9
 800fb66:	f200 8089 	bhi.w	800fc7c <_dtoa_r+0x2f4>
 800fb6a:	2b05      	cmp	r3, #5
 800fb6c:	bfc4      	itt	gt
 800fb6e:	3b04      	subgt	r3, #4
 800fb70:	9306      	strgt	r3, [sp, #24]
 800fb72:	9b06      	ldr	r3, [sp, #24]
 800fb74:	f1a3 0302 	sub.w	r3, r3, #2
 800fb78:	bfcc      	ite	gt
 800fb7a:	2500      	movgt	r5, #0
 800fb7c:	2501      	movle	r5, #1
 800fb7e:	2b03      	cmp	r3, #3
 800fb80:	f200 8087 	bhi.w	800fc92 <_dtoa_r+0x30a>
 800fb84:	e8df f003 	tbb	[pc, r3]
 800fb88:	59383a2d 	.word	0x59383a2d
 800fb8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fb90:	441d      	add	r5, r3
 800fb92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fb96:	2b20      	cmp	r3, #32
 800fb98:	bfc1      	itttt	gt
 800fb9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fb9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fba2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fbaa:	bfda      	itte	le
 800fbac:	f1c3 0320 	rsble	r3, r3, #32
 800fbb0:	fa06 f003 	lslle.w	r0, r6, r3
 800fbb4:	4318      	orrgt	r0, r3
 800fbb6:	f7f0 fcd5 	bl	8000564 <__aeabi_ui2d>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	4606      	mov	r6, r0
 800fbbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fbc2:	3d01      	subs	r5, #1
 800fbc4:	930e      	str	r3, [sp, #56]	; 0x38
 800fbc6:	e76a      	b.n	800fa9e <_dtoa_r+0x116>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	e7b2      	b.n	800fb32 <_dtoa_r+0x1aa>
 800fbcc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fbce:	e7b1      	b.n	800fb34 <_dtoa_r+0x1ac>
 800fbd0:	9b04      	ldr	r3, [sp, #16]
 800fbd2:	9a00      	ldr	r2, [sp, #0]
 800fbd4:	1a9b      	subs	r3, r3, r2
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	4253      	negs	r3, r2
 800fbda:	9307      	str	r3, [sp, #28]
 800fbdc:	2300      	movs	r3, #0
 800fbde:	930a      	str	r3, [sp, #40]	; 0x28
 800fbe0:	e7bf      	b.n	800fb62 <_dtoa_r+0x1da>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9308      	str	r3, [sp, #32]
 800fbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dc55      	bgt.n	800fc98 <_dtoa_r+0x310>
 800fbec:	2301      	movs	r3, #1
 800fbee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf6:	e00c      	b.n	800fc12 <_dtoa_r+0x28a>
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	e7f3      	b.n	800fbe4 <_dtoa_r+0x25c>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc00:	9308      	str	r3, [sp, #32]
 800fc02:	9b00      	ldr	r3, [sp, #0]
 800fc04:	4413      	add	r3, r2
 800fc06:	9302      	str	r3, [sp, #8]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	9303      	str	r3, [sp, #12]
 800fc0e:	bfb8      	it	lt
 800fc10:	2301      	movlt	r3, #1
 800fc12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc14:	2200      	movs	r2, #0
 800fc16:	6042      	str	r2, [r0, #4]
 800fc18:	2204      	movs	r2, #4
 800fc1a:	f102 0614 	add.w	r6, r2, #20
 800fc1e:	429e      	cmp	r6, r3
 800fc20:	6841      	ldr	r1, [r0, #4]
 800fc22:	d93d      	bls.n	800fca0 <_dtoa_r+0x318>
 800fc24:	4620      	mov	r0, r4
 800fc26:	f000 fcad 	bl	8010584 <_Balloc>
 800fc2a:	9001      	str	r0, [sp, #4]
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d13b      	bne.n	800fca8 <_dtoa_r+0x320>
 800fc30:	4b11      	ldr	r3, [pc, #68]	; (800fc78 <_dtoa_r+0x2f0>)
 800fc32:	4602      	mov	r2, r0
 800fc34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc38:	e6c0      	b.n	800f9bc <_dtoa_r+0x34>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e7df      	b.n	800fbfe <_dtoa_r+0x276>
 800fc3e:	bf00      	nop
 800fc40:	636f4361 	.word	0x636f4361
 800fc44:	3fd287a7 	.word	0x3fd287a7
 800fc48:	8b60c8b3 	.word	0x8b60c8b3
 800fc4c:	3fc68a28 	.word	0x3fc68a28
 800fc50:	509f79fb 	.word	0x509f79fb
 800fc54:	3fd34413 	.word	0x3fd34413
 800fc58:	08064a95 	.word	0x08064a95
 800fc5c:	08064aac 	.word	0x08064aac
 800fc60:	7ff00000 	.word	0x7ff00000
 800fc64:	08064a91 	.word	0x08064a91
 800fc68:	08064a88 	.word	0x08064a88
 800fc6c:	08064a65 	.word	0x08064a65
 800fc70:	3ff80000 	.word	0x3ff80000
 800fc74:	08064ba0 	.word	0x08064ba0
 800fc78:	08064b07 	.word	0x08064b07
 800fc7c:	2501      	movs	r5, #1
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9306      	str	r3, [sp, #24]
 800fc82:	9508      	str	r5, [sp, #32]
 800fc84:	f04f 33ff 	mov.w	r3, #4294967295
 800fc88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2312      	movs	r3, #18
 800fc90:	e7b0      	b.n	800fbf4 <_dtoa_r+0x26c>
 800fc92:	2301      	movs	r3, #1
 800fc94:	9308      	str	r3, [sp, #32]
 800fc96:	e7f5      	b.n	800fc84 <_dtoa_r+0x2fc>
 800fc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc9e:	e7b8      	b.n	800fc12 <_dtoa_r+0x28a>
 800fca0:	3101      	adds	r1, #1
 800fca2:	6041      	str	r1, [r0, #4]
 800fca4:	0052      	lsls	r2, r2, #1
 800fca6:	e7b8      	b.n	800fc1a <_dtoa_r+0x292>
 800fca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcaa:	9a01      	ldr	r2, [sp, #4]
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	9b03      	ldr	r3, [sp, #12]
 800fcb0:	2b0e      	cmp	r3, #14
 800fcb2:	f200 809d 	bhi.w	800fdf0 <_dtoa_r+0x468>
 800fcb6:	2d00      	cmp	r5, #0
 800fcb8:	f000 809a 	beq.w	800fdf0 <_dtoa_r+0x468>
 800fcbc:	9b00      	ldr	r3, [sp, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	dd32      	ble.n	800fd28 <_dtoa_r+0x3a0>
 800fcc2:	4ab7      	ldr	r2, [pc, #732]	; (800ffa0 <_dtoa_r+0x618>)
 800fcc4:	f003 030f 	and.w	r3, r3, #15
 800fcc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fcd0:	9b00      	ldr	r3, [sp, #0]
 800fcd2:	05d8      	lsls	r0, r3, #23
 800fcd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fcd8:	d516      	bpl.n	800fd08 <_dtoa_r+0x380>
 800fcda:	4bb2      	ldr	r3, [pc, #712]	; (800ffa4 <_dtoa_r+0x61c>)
 800fcdc:	ec51 0b19 	vmov	r0, r1, d9
 800fce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fce4:	f7f0 fde2 	bl	80008ac <__aeabi_ddiv>
 800fce8:	f007 070f 	and.w	r7, r7, #15
 800fcec:	4682      	mov	sl, r0
 800fcee:	468b      	mov	fp, r1
 800fcf0:	2503      	movs	r5, #3
 800fcf2:	4eac      	ldr	r6, [pc, #688]	; (800ffa4 <_dtoa_r+0x61c>)
 800fcf4:	b957      	cbnz	r7, 800fd0c <_dtoa_r+0x384>
 800fcf6:	4642      	mov	r2, r8
 800fcf8:	464b      	mov	r3, r9
 800fcfa:	4650      	mov	r0, sl
 800fcfc:	4659      	mov	r1, fp
 800fcfe:	f7f0 fdd5 	bl	80008ac <__aeabi_ddiv>
 800fd02:	4682      	mov	sl, r0
 800fd04:	468b      	mov	fp, r1
 800fd06:	e028      	b.n	800fd5a <_dtoa_r+0x3d2>
 800fd08:	2502      	movs	r5, #2
 800fd0a:	e7f2      	b.n	800fcf2 <_dtoa_r+0x36a>
 800fd0c:	07f9      	lsls	r1, r7, #31
 800fd0e:	d508      	bpl.n	800fd22 <_dtoa_r+0x39a>
 800fd10:	4640      	mov	r0, r8
 800fd12:	4649      	mov	r1, r9
 800fd14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd18:	f7f0 fc9e 	bl	8000658 <__aeabi_dmul>
 800fd1c:	3501      	adds	r5, #1
 800fd1e:	4680      	mov	r8, r0
 800fd20:	4689      	mov	r9, r1
 800fd22:	107f      	asrs	r7, r7, #1
 800fd24:	3608      	adds	r6, #8
 800fd26:	e7e5      	b.n	800fcf4 <_dtoa_r+0x36c>
 800fd28:	f000 809b 	beq.w	800fe62 <_dtoa_r+0x4da>
 800fd2c:	9b00      	ldr	r3, [sp, #0]
 800fd2e:	4f9d      	ldr	r7, [pc, #628]	; (800ffa4 <_dtoa_r+0x61c>)
 800fd30:	425e      	negs	r6, r3
 800fd32:	4b9b      	ldr	r3, [pc, #620]	; (800ffa0 <_dtoa_r+0x618>)
 800fd34:	f006 020f 	and.w	r2, r6, #15
 800fd38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd40:	ec51 0b19 	vmov	r0, r1, d9
 800fd44:	f7f0 fc88 	bl	8000658 <__aeabi_dmul>
 800fd48:	1136      	asrs	r6, r6, #4
 800fd4a:	4682      	mov	sl, r0
 800fd4c:	468b      	mov	fp, r1
 800fd4e:	2300      	movs	r3, #0
 800fd50:	2502      	movs	r5, #2
 800fd52:	2e00      	cmp	r6, #0
 800fd54:	d17a      	bne.n	800fe4c <_dtoa_r+0x4c4>
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1d3      	bne.n	800fd02 <_dtoa_r+0x37a>
 800fd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 8082 	beq.w	800fe66 <_dtoa_r+0x4de>
 800fd62:	4b91      	ldr	r3, [pc, #580]	; (800ffa8 <_dtoa_r+0x620>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	4650      	mov	r0, sl
 800fd68:	4659      	mov	r1, fp
 800fd6a:	f7f0 fee7 	bl	8000b3c <__aeabi_dcmplt>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d079      	beq.n	800fe66 <_dtoa_r+0x4de>
 800fd72:	9b03      	ldr	r3, [sp, #12]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d076      	beq.n	800fe66 <_dtoa_r+0x4de>
 800fd78:	9b02      	ldr	r3, [sp, #8]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	dd36      	ble.n	800fdec <_dtoa_r+0x464>
 800fd7e:	9b00      	ldr	r3, [sp, #0]
 800fd80:	4650      	mov	r0, sl
 800fd82:	4659      	mov	r1, fp
 800fd84:	1e5f      	subs	r7, r3, #1
 800fd86:	2200      	movs	r2, #0
 800fd88:	4b88      	ldr	r3, [pc, #544]	; (800ffac <_dtoa_r+0x624>)
 800fd8a:	f7f0 fc65 	bl	8000658 <__aeabi_dmul>
 800fd8e:	9e02      	ldr	r6, [sp, #8]
 800fd90:	4682      	mov	sl, r0
 800fd92:	468b      	mov	fp, r1
 800fd94:	3501      	adds	r5, #1
 800fd96:	4628      	mov	r0, r5
 800fd98:	f7f0 fbf4 	bl	8000584 <__aeabi_i2d>
 800fd9c:	4652      	mov	r2, sl
 800fd9e:	465b      	mov	r3, fp
 800fda0:	f7f0 fc5a 	bl	8000658 <__aeabi_dmul>
 800fda4:	4b82      	ldr	r3, [pc, #520]	; (800ffb0 <_dtoa_r+0x628>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	f7f0 faa0 	bl	80002ec <__adddf3>
 800fdac:	46d0      	mov	r8, sl
 800fdae:	46d9      	mov	r9, fp
 800fdb0:	4682      	mov	sl, r0
 800fdb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fdb6:	2e00      	cmp	r6, #0
 800fdb8:	d158      	bne.n	800fe6c <_dtoa_r+0x4e4>
 800fdba:	4b7e      	ldr	r3, [pc, #504]	; (800ffb4 <_dtoa_r+0x62c>)
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	4640      	mov	r0, r8
 800fdc0:	4649      	mov	r1, r9
 800fdc2:	f7f0 fa91 	bl	80002e8 <__aeabi_dsub>
 800fdc6:	4652      	mov	r2, sl
 800fdc8:	465b      	mov	r3, fp
 800fdca:	4680      	mov	r8, r0
 800fdcc:	4689      	mov	r9, r1
 800fdce:	f7f0 fed3 	bl	8000b78 <__aeabi_dcmpgt>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	f040 8295 	bne.w	8010302 <_dtoa_r+0x97a>
 800fdd8:	4652      	mov	r2, sl
 800fdda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fdde:	4640      	mov	r0, r8
 800fde0:	4649      	mov	r1, r9
 800fde2:	f7f0 feab 	bl	8000b3c <__aeabi_dcmplt>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	f040 8289 	bne.w	80102fe <_dtoa_r+0x976>
 800fdec:	ec5b ab19 	vmov	sl, fp, d9
 800fdf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f2c0 8148 	blt.w	8010088 <_dtoa_r+0x700>
 800fdf8:	9a00      	ldr	r2, [sp, #0]
 800fdfa:	2a0e      	cmp	r2, #14
 800fdfc:	f300 8144 	bgt.w	8010088 <_dtoa_r+0x700>
 800fe00:	4b67      	ldr	r3, [pc, #412]	; (800ffa0 <_dtoa_r+0x618>)
 800fe02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f280 80d5 	bge.w	800ffbc <_dtoa_r+0x634>
 800fe12:	9b03      	ldr	r3, [sp, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f300 80d1 	bgt.w	800ffbc <_dtoa_r+0x634>
 800fe1a:	f040 826f 	bne.w	80102fc <_dtoa_r+0x974>
 800fe1e:	4b65      	ldr	r3, [pc, #404]	; (800ffb4 <_dtoa_r+0x62c>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	4640      	mov	r0, r8
 800fe24:	4649      	mov	r1, r9
 800fe26:	f7f0 fc17 	bl	8000658 <__aeabi_dmul>
 800fe2a:	4652      	mov	r2, sl
 800fe2c:	465b      	mov	r3, fp
 800fe2e:	f7f0 fe99 	bl	8000b64 <__aeabi_dcmpge>
 800fe32:	9e03      	ldr	r6, [sp, #12]
 800fe34:	4637      	mov	r7, r6
 800fe36:	2800      	cmp	r0, #0
 800fe38:	f040 8245 	bne.w	80102c6 <_dtoa_r+0x93e>
 800fe3c:	9d01      	ldr	r5, [sp, #4]
 800fe3e:	2331      	movs	r3, #49	; 0x31
 800fe40:	f805 3b01 	strb.w	r3, [r5], #1
 800fe44:	9b00      	ldr	r3, [sp, #0]
 800fe46:	3301      	adds	r3, #1
 800fe48:	9300      	str	r3, [sp, #0]
 800fe4a:	e240      	b.n	80102ce <_dtoa_r+0x946>
 800fe4c:	07f2      	lsls	r2, r6, #31
 800fe4e:	d505      	bpl.n	800fe5c <_dtoa_r+0x4d4>
 800fe50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe54:	f7f0 fc00 	bl	8000658 <__aeabi_dmul>
 800fe58:	3501      	adds	r5, #1
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	1076      	asrs	r6, r6, #1
 800fe5e:	3708      	adds	r7, #8
 800fe60:	e777      	b.n	800fd52 <_dtoa_r+0x3ca>
 800fe62:	2502      	movs	r5, #2
 800fe64:	e779      	b.n	800fd5a <_dtoa_r+0x3d2>
 800fe66:	9f00      	ldr	r7, [sp, #0]
 800fe68:	9e03      	ldr	r6, [sp, #12]
 800fe6a:	e794      	b.n	800fd96 <_dtoa_r+0x40e>
 800fe6c:	9901      	ldr	r1, [sp, #4]
 800fe6e:	4b4c      	ldr	r3, [pc, #304]	; (800ffa0 <_dtoa_r+0x618>)
 800fe70:	4431      	add	r1, r6
 800fe72:	910d      	str	r1, [sp, #52]	; 0x34
 800fe74:	9908      	ldr	r1, [sp, #32]
 800fe76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fe7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe7e:	2900      	cmp	r1, #0
 800fe80:	d043      	beq.n	800ff0a <_dtoa_r+0x582>
 800fe82:	494d      	ldr	r1, [pc, #308]	; (800ffb8 <_dtoa_r+0x630>)
 800fe84:	2000      	movs	r0, #0
 800fe86:	f7f0 fd11 	bl	80008ac <__aeabi_ddiv>
 800fe8a:	4652      	mov	r2, sl
 800fe8c:	465b      	mov	r3, fp
 800fe8e:	f7f0 fa2b 	bl	80002e8 <__aeabi_dsub>
 800fe92:	9d01      	ldr	r5, [sp, #4]
 800fe94:	4682      	mov	sl, r0
 800fe96:	468b      	mov	fp, r1
 800fe98:	4649      	mov	r1, r9
 800fe9a:	4640      	mov	r0, r8
 800fe9c:	f7f0 fe8c 	bl	8000bb8 <__aeabi_d2iz>
 800fea0:	4606      	mov	r6, r0
 800fea2:	f7f0 fb6f 	bl	8000584 <__aeabi_i2d>
 800fea6:	4602      	mov	r2, r0
 800fea8:	460b      	mov	r3, r1
 800feaa:	4640      	mov	r0, r8
 800feac:	4649      	mov	r1, r9
 800feae:	f7f0 fa1b 	bl	80002e8 <__aeabi_dsub>
 800feb2:	3630      	adds	r6, #48	; 0x30
 800feb4:	f805 6b01 	strb.w	r6, [r5], #1
 800feb8:	4652      	mov	r2, sl
 800feba:	465b      	mov	r3, fp
 800febc:	4680      	mov	r8, r0
 800febe:	4689      	mov	r9, r1
 800fec0:	f7f0 fe3c 	bl	8000b3c <__aeabi_dcmplt>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d163      	bne.n	800ff90 <_dtoa_r+0x608>
 800fec8:	4642      	mov	r2, r8
 800feca:	464b      	mov	r3, r9
 800fecc:	4936      	ldr	r1, [pc, #216]	; (800ffa8 <_dtoa_r+0x620>)
 800fece:	2000      	movs	r0, #0
 800fed0:	f7f0 fa0a 	bl	80002e8 <__aeabi_dsub>
 800fed4:	4652      	mov	r2, sl
 800fed6:	465b      	mov	r3, fp
 800fed8:	f7f0 fe30 	bl	8000b3c <__aeabi_dcmplt>
 800fedc:	2800      	cmp	r0, #0
 800fede:	f040 80b5 	bne.w	801004c <_dtoa_r+0x6c4>
 800fee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fee4:	429d      	cmp	r5, r3
 800fee6:	d081      	beq.n	800fdec <_dtoa_r+0x464>
 800fee8:	4b30      	ldr	r3, [pc, #192]	; (800ffac <_dtoa_r+0x624>)
 800feea:	2200      	movs	r2, #0
 800feec:	4650      	mov	r0, sl
 800feee:	4659      	mov	r1, fp
 800fef0:	f7f0 fbb2 	bl	8000658 <__aeabi_dmul>
 800fef4:	4b2d      	ldr	r3, [pc, #180]	; (800ffac <_dtoa_r+0x624>)
 800fef6:	4682      	mov	sl, r0
 800fef8:	468b      	mov	fp, r1
 800fefa:	4640      	mov	r0, r8
 800fefc:	4649      	mov	r1, r9
 800fefe:	2200      	movs	r2, #0
 800ff00:	f7f0 fbaa 	bl	8000658 <__aeabi_dmul>
 800ff04:	4680      	mov	r8, r0
 800ff06:	4689      	mov	r9, r1
 800ff08:	e7c6      	b.n	800fe98 <_dtoa_r+0x510>
 800ff0a:	4650      	mov	r0, sl
 800ff0c:	4659      	mov	r1, fp
 800ff0e:	f7f0 fba3 	bl	8000658 <__aeabi_dmul>
 800ff12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff14:	9d01      	ldr	r5, [sp, #4]
 800ff16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff18:	4682      	mov	sl, r0
 800ff1a:	468b      	mov	fp, r1
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	4640      	mov	r0, r8
 800ff20:	f7f0 fe4a 	bl	8000bb8 <__aeabi_d2iz>
 800ff24:	4606      	mov	r6, r0
 800ff26:	f7f0 fb2d 	bl	8000584 <__aeabi_i2d>
 800ff2a:	3630      	adds	r6, #48	; 0x30
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	460b      	mov	r3, r1
 800ff30:	4640      	mov	r0, r8
 800ff32:	4649      	mov	r1, r9
 800ff34:	f7f0 f9d8 	bl	80002e8 <__aeabi_dsub>
 800ff38:	f805 6b01 	strb.w	r6, [r5], #1
 800ff3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff3e:	429d      	cmp	r5, r3
 800ff40:	4680      	mov	r8, r0
 800ff42:	4689      	mov	r9, r1
 800ff44:	f04f 0200 	mov.w	r2, #0
 800ff48:	d124      	bne.n	800ff94 <_dtoa_r+0x60c>
 800ff4a:	4b1b      	ldr	r3, [pc, #108]	; (800ffb8 <_dtoa_r+0x630>)
 800ff4c:	4650      	mov	r0, sl
 800ff4e:	4659      	mov	r1, fp
 800ff50:	f7f0 f9cc 	bl	80002ec <__adddf3>
 800ff54:	4602      	mov	r2, r0
 800ff56:	460b      	mov	r3, r1
 800ff58:	4640      	mov	r0, r8
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	f7f0 fe0c 	bl	8000b78 <__aeabi_dcmpgt>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d173      	bne.n	801004c <_dtoa_r+0x6c4>
 800ff64:	4652      	mov	r2, sl
 800ff66:	465b      	mov	r3, fp
 800ff68:	4913      	ldr	r1, [pc, #76]	; (800ffb8 <_dtoa_r+0x630>)
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	f7f0 f9bc 	bl	80002e8 <__aeabi_dsub>
 800ff70:	4602      	mov	r2, r0
 800ff72:	460b      	mov	r3, r1
 800ff74:	4640      	mov	r0, r8
 800ff76:	4649      	mov	r1, r9
 800ff78:	f7f0 fde0 	bl	8000b3c <__aeabi_dcmplt>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	f43f af35 	beq.w	800fdec <_dtoa_r+0x464>
 800ff82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ff84:	1e6b      	subs	r3, r5, #1
 800ff86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff8c:	2b30      	cmp	r3, #48	; 0x30
 800ff8e:	d0f8      	beq.n	800ff82 <_dtoa_r+0x5fa>
 800ff90:	9700      	str	r7, [sp, #0]
 800ff92:	e049      	b.n	8010028 <_dtoa_r+0x6a0>
 800ff94:	4b05      	ldr	r3, [pc, #20]	; (800ffac <_dtoa_r+0x624>)
 800ff96:	f7f0 fb5f 	bl	8000658 <__aeabi_dmul>
 800ff9a:	4680      	mov	r8, r0
 800ff9c:	4689      	mov	r9, r1
 800ff9e:	e7bd      	b.n	800ff1c <_dtoa_r+0x594>
 800ffa0:	08064ba0 	.word	0x08064ba0
 800ffa4:	08064b78 	.word	0x08064b78
 800ffa8:	3ff00000 	.word	0x3ff00000
 800ffac:	40240000 	.word	0x40240000
 800ffb0:	401c0000 	.word	0x401c0000
 800ffb4:	40140000 	.word	0x40140000
 800ffb8:	3fe00000 	.word	0x3fe00000
 800ffbc:	9d01      	ldr	r5, [sp, #4]
 800ffbe:	4656      	mov	r6, sl
 800ffc0:	465f      	mov	r7, fp
 800ffc2:	4642      	mov	r2, r8
 800ffc4:	464b      	mov	r3, r9
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	4639      	mov	r1, r7
 800ffca:	f7f0 fc6f 	bl	80008ac <__aeabi_ddiv>
 800ffce:	f7f0 fdf3 	bl	8000bb8 <__aeabi_d2iz>
 800ffd2:	4682      	mov	sl, r0
 800ffd4:	f7f0 fad6 	bl	8000584 <__aeabi_i2d>
 800ffd8:	4642      	mov	r2, r8
 800ffda:	464b      	mov	r3, r9
 800ffdc:	f7f0 fb3c 	bl	8000658 <__aeabi_dmul>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ffec:	f7f0 f97c 	bl	80002e8 <__aeabi_dsub>
 800fff0:	f805 6b01 	strb.w	r6, [r5], #1
 800fff4:	9e01      	ldr	r6, [sp, #4]
 800fff6:	9f03      	ldr	r7, [sp, #12]
 800fff8:	1bae      	subs	r6, r5, r6
 800fffa:	42b7      	cmp	r7, r6
 800fffc:	4602      	mov	r2, r0
 800fffe:	460b      	mov	r3, r1
 8010000:	d135      	bne.n	801006e <_dtoa_r+0x6e6>
 8010002:	f7f0 f973 	bl	80002ec <__adddf3>
 8010006:	4642      	mov	r2, r8
 8010008:	464b      	mov	r3, r9
 801000a:	4606      	mov	r6, r0
 801000c:	460f      	mov	r7, r1
 801000e:	f7f0 fdb3 	bl	8000b78 <__aeabi_dcmpgt>
 8010012:	b9d0      	cbnz	r0, 801004a <_dtoa_r+0x6c2>
 8010014:	4642      	mov	r2, r8
 8010016:	464b      	mov	r3, r9
 8010018:	4630      	mov	r0, r6
 801001a:	4639      	mov	r1, r7
 801001c:	f7f0 fd84 	bl	8000b28 <__aeabi_dcmpeq>
 8010020:	b110      	cbz	r0, 8010028 <_dtoa_r+0x6a0>
 8010022:	f01a 0f01 	tst.w	sl, #1
 8010026:	d110      	bne.n	801004a <_dtoa_r+0x6c2>
 8010028:	4620      	mov	r0, r4
 801002a:	ee18 1a10 	vmov	r1, s16
 801002e:	f000 fae9 	bl	8010604 <_Bfree>
 8010032:	2300      	movs	r3, #0
 8010034:	9800      	ldr	r0, [sp, #0]
 8010036:	702b      	strb	r3, [r5, #0]
 8010038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801003a:	3001      	adds	r0, #1
 801003c:	6018      	str	r0, [r3, #0]
 801003e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010040:	2b00      	cmp	r3, #0
 8010042:	f43f acf1 	beq.w	800fa28 <_dtoa_r+0xa0>
 8010046:	601d      	str	r5, [r3, #0]
 8010048:	e4ee      	b.n	800fa28 <_dtoa_r+0xa0>
 801004a:	9f00      	ldr	r7, [sp, #0]
 801004c:	462b      	mov	r3, r5
 801004e:	461d      	mov	r5, r3
 8010050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010054:	2a39      	cmp	r2, #57	; 0x39
 8010056:	d106      	bne.n	8010066 <_dtoa_r+0x6de>
 8010058:	9a01      	ldr	r2, [sp, #4]
 801005a:	429a      	cmp	r2, r3
 801005c:	d1f7      	bne.n	801004e <_dtoa_r+0x6c6>
 801005e:	9901      	ldr	r1, [sp, #4]
 8010060:	2230      	movs	r2, #48	; 0x30
 8010062:	3701      	adds	r7, #1
 8010064:	700a      	strb	r2, [r1, #0]
 8010066:	781a      	ldrb	r2, [r3, #0]
 8010068:	3201      	adds	r2, #1
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	e790      	b.n	800ff90 <_dtoa_r+0x608>
 801006e:	4ba6      	ldr	r3, [pc, #664]	; (8010308 <_dtoa_r+0x980>)
 8010070:	2200      	movs	r2, #0
 8010072:	f7f0 faf1 	bl	8000658 <__aeabi_dmul>
 8010076:	2200      	movs	r2, #0
 8010078:	2300      	movs	r3, #0
 801007a:	4606      	mov	r6, r0
 801007c:	460f      	mov	r7, r1
 801007e:	f7f0 fd53 	bl	8000b28 <__aeabi_dcmpeq>
 8010082:	2800      	cmp	r0, #0
 8010084:	d09d      	beq.n	800ffc2 <_dtoa_r+0x63a>
 8010086:	e7cf      	b.n	8010028 <_dtoa_r+0x6a0>
 8010088:	9a08      	ldr	r2, [sp, #32]
 801008a:	2a00      	cmp	r2, #0
 801008c:	f000 80d7 	beq.w	801023e <_dtoa_r+0x8b6>
 8010090:	9a06      	ldr	r2, [sp, #24]
 8010092:	2a01      	cmp	r2, #1
 8010094:	f300 80ba 	bgt.w	801020c <_dtoa_r+0x884>
 8010098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801009a:	2a00      	cmp	r2, #0
 801009c:	f000 80b2 	beq.w	8010204 <_dtoa_r+0x87c>
 80100a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80100a4:	9e07      	ldr	r6, [sp, #28]
 80100a6:	9d04      	ldr	r5, [sp, #16]
 80100a8:	9a04      	ldr	r2, [sp, #16]
 80100aa:	441a      	add	r2, r3
 80100ac:	9204      	str	r2, [sp, #16]
 80100ae:	9a05      	ldr	r2, [sp, #20]
 80100b0:	2101      	movs	r1, #1
 80100b2:	441a      	add	r2, r3
 80100b4:	4620      	mov	r0, r4
 80100b6:	9205      	str	r2, [sp, #20]
 80100b8:	f000 fb5c 	bl	8010774 <__i2b>
 80100bc:	4607      	mov	r7, r0
 80100be:	2d00      	cmp	r5, #0
 80100c0:	dd0c      	ble.n	80100dc <_dtoa_r+0x754>
 80100c2:	9b05      	ldr	r3, [sp, #20]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	dd09      	ble.n	80100dc <_dtoa_r+0x754>
 80100c8:	42ab      	cmp	r3, r5
 80100ca:	9a04      	ldr	r2, [sp, #16]
 80100cc:	bfa8      	it	ge
 80100ce:	462b      	movge	r3, r5
 80100d0:	1ad2      	subs	r2, r2, r3
 80100d2:	9204      	str	r2, [sp, #16]
 80100d4:	9a05      	ldr	r2, [sp, #20]
 80100d6:	1aed      	subs	r5, r5, r3
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	9305      	str	r3, [sp, #20]
 80100dc:	9b07      	ldr	r3, [sp, #28]
 80100de:	b31b      	cbz	r3, 8010128 <_dtoa_r+0x7a0>
 80100e0:	9b08      	ldr	r3, [sp, #32]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 80af 	beq.w	8010246 <_dtoa_r+0x8be>
 80100e8:	2e00      	cmp	r6, #0
 80100ea:	dd13      	ble.n	8010114 <_dtoa_r+0x78c>
 80100ec:	4639      	mov	r1, r7
 80100ee:	4632      	mov	r2, r6
 80100f0:	4620      	mov	r0, r4
 80100f2:	f000 fbff 	bl	80108f4 <__pow5mult>
 80100f6:	ee18 2a10 	vmov	r2, s16
 80100fa:	4601      	mov	r1, r0
 80100fc:	4607      	mov	r7, r0
 80100fe:	4620      	mov	r0, r4
 8010100:	f000 fb4e 	bl	80107a0 <__multiply>
 8010104:	ee18 1a10 	vmov	r1, s16
 8010108:	4680      	mov	r8, r0
 801010a:	4620      	mov	r0, r4
 801010c:	f000 fa7a 	bl	8010604 <_Bfree>
 8010110:	ee08 8a10 	vmov	s16, r8
 8010114:	9b07      	ldr	r3, [sp, #28]
 8010116:	1b9a      	subs	r2, r3, r6
 8010118:	d006      	beq.n	8010128 <_dtoa_r+0x7a0>
 801011a:	ee18 1a10 	vmov	r1, s16
 801011e:	4620      	mov	r0, r4
 8010120:	f000 fbe8 	bl	80108f4 <__pow5mult>
 8010124:	ee08 0a10 	vmov	s16, r0
 8010128:	2101      	movs	r1, #1
 801012a:	4620      	mov	r0, r4
 801012c:	f000 fb22 	bl	8010774 <__i2b>
 8010130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010132:	2b00      	cmp	r3, #0
 8010134:	4606      	mov	r6, r0
 8010136:	f340 8088 	ble.w	801024a <_dtoa_r+0x8c2>
 801013a:	461a      	mov	r2, r3
 801013c:	4601      	mov	r1, r0
 801013e:	4620      	mov	r0, r4
 8010140:	f000 fbd8 	bl	80108f4 <__pow5mult>
 8010144:	9b06      	ldr	r3, [sp, #24]
 8010146:	2b01      	cmp	r3, #1
 8010148:	4606      	mov	r6, r0
 801014a:	f340 8081 	ble.w	8010250 <_dtoa_r+0x8c8>
 801014e:	f04f 0800 	mov.w	r8, #0
 8010152:	6933      	ldr	r3, [r6, #16]
 8010154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010158:	6918      	ldr	r0, [r3, #16]
 801015a:	f000 fabb 	bl	80106d4 <__hi0bits>
 801015e:	f1c0 0020 	rsb	r0, r0, #32
 8010162:	9b05      	ldr	r3, [sp, #20]
 8010164:	4418      	add	r0, r3
 8010166:	f010 001f 	ands.w	r0, r0, #31
 801016a:	f000 8092 	beq.w	8010292 <_dtoa_r+0x90a>
 801016e:	f1c0 0320 	rsb	r3, r0, #32
 8010172:	2b04      	cmp	r3, #4
 8010174:	f340 808a 	ble.w	801028c <_dtoa_r+0x904>
 8010178:	f1c0 001c 	rsb	r0, r0, #28
 801017c:	9b04      	ldr	r3, [sp, #16]
 801017e:	4403      	add	r3, r0
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	9b05      	ldr	r3, [sp, #20]
 8010184:	4403      	add	r3, r0
 8010186:	4405      	add	r5, r0
 8010188:	9305      	str	r3, [sp, #20]
 801018a:	9b04      	ldr	r3, [sp, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	dd07      	ble.n	80101a0 <_dtoa_r+0x818>
 8010190:	ee18 1a10 	vmov	r1, s16
 8010194:	461a      	mov	r2, r3
 8010196:	4620      	mov	r0, r4
 8010198:	f000 fc06 	bl	80109a8 <__lshift>
 801019c:	ee08 0a10 	vmov	s16, r0
 80101a0:	9b05      	ldr	r3, [sp, #20]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	dd05      	ble.n	80101b2 <_dtoa_r+0x82a>
 80101a6:	4631      	mov	r1, r6
 80101a8:	461a      	mov	r2, r3
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 fbfc 	bl	80109a8 <__lshift>
 80101b0:	4606      	mov	r6, r0
 80101b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d06e      	beq.n	8010296 <_dtoa_r+0x90e>
 80101b8:	ee18 0a10 	vmov	r0, s16
 80101bc:	4631      	mov	r1, r6
 80101be:	f000 fc63 	bl	8010a88 <__mcmp>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	da67      	bge.n	8010296 <_dtoa_r+0x90e>
 80101c6:	9b00      	ldr	r3, [sp, #0]
 80101c8:	3b01      	subs	r3, #1
 80101ca:	ee18 1a10 	vmov	r1, s16
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	220a      	movs	r2, #10
 80101d2:	2300      	movs	r3, #0
 80101d4:	4620      	mov	r0, r4
 80101d6:	f000 fa37 	bl	8010648 <__multadd>
 80101da:	9b08      	ldr	r3, [sp, #32]
 80101dc:	ee08 0a10 	vmov	s16, r0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f000 81b1 	beq.w	8010548 <_dtoa_r+0xbc0>
 80101e6:	2300      	movs	r3, #0
 80101e8:	4639      	mov	r1, r7
 80101ea:	220a      	movs	r2, #10
 80101ec:	4620      	mov	r0, r4
 80101ee:	f000 fa2b 	bl	8010648 <__multadd>
 80101f2:	9b02      	ldr	r3, [sp, #8]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	4607      	mov	r7, r0
 80101f8:	f300 808e 	bgt.w	8010318 <_dtoa_r+0x990>
 80101fc:	9b06      	ldr	r3, [sp, #24]
 80101fe:	2b02      	cmp	r3, #2
 8010200:	dc51      	bgt.n	80102a6 <_dtoa_r+0x91e>
 8010202:	e089      	b.n	8010318 <_dtoa_r+0x990>
 8010204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801020a:	e74b      	b.n	80100a4 <_dtoa_r+0x71c>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	1e5e      	subs	r6, r3, #1
 8010210:	9b07      	ldr	r3, [sp, #28]
 8010212:	42b3      	cmp	r3, r6
 8010214:	bfbf      	itttt	lt
 8010216:	9b07      	ldrlt	r3, [sp, #28]
 8010218:	9607      	strlt	r6, [sp, #28]
 801021a:	1af2      	sublt	r2, r6, r3
 801021c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801021e:	bfb6      	itet	lt
 8010220:	189b      	addlt	r3, r3, r2
 8010222:	1b9e      	subge	r6, r3, r6
 8010224:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010226:	9b03      	ldr	r3, [sp, #12]
 8010228:	bfb8      	it	lt
 801022a:	2600      	movlt	r6, #0
 801022c:	2b00      	cmp	r3, #0
 801022e:	bfb7      	itett	lt
 8010230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010238:	1a9d      	sublt	r5, r3, r2
 801023a:	2300      	movlt	r3, #0
 801023c:	e734      	b.n	80100a8 <_dtoa_r+0x720>
 801023e:	9e07      	ldr	r6, [sp, #28]
 8010240:	9d04      	ldr	r5, [sp, #16]
 8010242:	9f08      	ldr	r7, [sp, #32]
 8010244:	e73b      	b.n	80100be <_dtoa_r+0x736>
 8010246:	9a07      	ldr	r2, [sp, #28]
 8010248:	e767      	b.n	801011a <_dtoa_r+0x792>
 801024a:	9b06      	ldr	r3, [sp, #24]
 801024c:	2b01      	cmp	r3, #1
 801024e:	dc18      	bgt.n	8010282 <_dtoa_r+0x8fa>
 8010250:	f1ba 0f00 	cmp.w	sl, #0
 8010254:	d115      	bne.n	8010282 <_dtoa_r+0x8fa>
 8010256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801025a:	b993      	cbnz	r3, 8010282 <_dtoa_r+0x8fa>
 801025c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010260:	0d1b      	lsrs	r3, r3, #20
 8010262:	051b      	lsls	r3, r3, #20
 8010264:	b183      	cbz	r3, 8010288 <_dtoa_r+0x900>
 8010266:	9b04      	ldr	r3, [sp, #16]
 8010268:	3301      	adds	r3, #1
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	9b05      	ldr	r3, [sp, #20]
 801026e:	3301      	adds	r3, #1
 8010270:	9305      	str	r3, [sp, #20]
 8010272:	f04f 0801 	mov.w	r8, #1
 8010276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010278:	2b00      	cmp	r3, #0
 801027a:	f47f af6a 	bne.w	8010152 <_dtoa_r+0x7ca>
 801027e:	2001      	movs	r0, #1
 8010280:	e76f      	b.n	8010162 <_dtoa_r+0x7da>
 8010282:	f04f 0800 	mov.w	r8, #0
 8010286:	e7f6      	b.n	8010276 <_dtoa_r+0x8ee>
 8010288:	4698      	mov	r8, r3
 801028a:	e7f4      	b.n	8010276 <_dtoa_r+0x8ee>
 801028c:	f43f af7d 	beq.w	801018a <_dtoa_r+0x802>
 8010290:	4618      	mov	r0, r3
 8010292:	301c      	adds	r0, #28
 8010294:	e772      	b.n	801017c <_dtoa_r+0x7f4>
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	dc37      	bgt.n	801030c <_dtoa_r+0x984>
 801029c:	9b06      	ldr	r3, [sp, #24]
 801029e:	2b02      	cmp	r3, #2
 80102a0:	dd34      	ble.n	801030c <_dtoa_r+0x984>
 80102a2:	9b03      	ldr	r3, [sp, #12]
 80102a4:	9302      	str	r3, [sp, #8]
 80102a6:	9b02      	ldr	r3, [sp, #8]
 80102a8:	b96b      	cbnz	r3, 80102c6 <_dtoa_r+0x93e>
 80102aa:	4631      	mov	r1, r6
 80102ac:	2205      	movs	r2, #5
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 f9ca 	bl	8010648 <__multadd>
 80102b4:	4601      	mov	r1, r0
 80102b6:	4606      	mov	r6, r0
 80102b8:	ee18 0a10 	vmov	r0, s16
 80102bc:	f000 fbe4 	bl	8010a88 <__mcmp>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	f73f adbb 	bgt.w	800fe3c <_dtoa_r+0x4b4>
 80102c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c8:	9d01      	ldr	r5, [sp, #4]
 80102ca:	43db      	mvns	r3, r3
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	f04f 0800 	mov.w	r8, #0
 80102d2:	4631      	mov	r1, r6
 80102d4:	4620      	mov	r0, r4
 80102d6:	f000 f995 	bl	8010604 <_Bfree>
 80102da:	2f00      	cmp	r7, #0
 80102dc:	f43f aea4 	beq.w	8010028 <_dtoa_r+0x6a0>
 80102e0:	f1b8 0f00 	cmp.w	r8, #0
 80102e4:	d005      	beq.n	80102f2 <_dtoa_r+0x96a>
 80102e6:	45b8      	cmp	r8, r7
 80102e8:	d003      	beq.n	80102f2 <_dtoa_r+0x96a>
 80102ea:	4641      	mov	r1, r8
 80102ec:	4620      	mov	r0, r4
 80102ee:	f000 f989 	bl	8010604 <_Bfree>
 80102f2:	4639      	mov	r1, r7
 80102f4:	4620      	mov	r0, r4
 80102f6:	f000 f985 	bl	8010604 <_Bfree>
 80102fa:	e695      	b.n	8010028 <_dtoa_r+0x6a0>
 80102fc:	2600      	movs	r6, #0
 80102fe:	4637      	mov	r7, r6
 8010300:	e7e1      	b.n	80102c6 <_dtoa_r+0x93e>
 8010302:	9700      	str	r7, [sp, #0]
 8010304:	4637      	mov	r7, r6
 8010306:	e599      	b.n	800fe3c <_dtoa_r+0x4b4>
 8010308:	40240000 	.word	0x40240000
 801030c:	9b08      	ldr	r3, [sp, #32]
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 80ca 	beq.w	80104a8 <_dtoa_r+0xb20>
 8010314:	9b03      	ldr	r3, [sp, #12]
 8010316:	9302      	str	r3, [sp, #8]
 8010318:	2d00      	cmp	r5, #0
 801031a:	dd05      	ble.n	8010328 <_dtoa_r+0x9a0>
 801031c:	4639      	mov	r1, r7
 801031e:	462a      	mov	r2, r5
 8010320:	4620      	mov	r0, r4
 8010322:	f000 fb41 	bl	80109a8 <__lshift>
 8010326:	4607      	mov	r7, r0
 8010328:	f1b8 0f00 	cmp.w	r8, #0
 801032c:	d05b      	beq.n	80103e6 <_dtoa_r+0xa5e>
 801032e:	6879      	ldr	r1, [r7, #4]
 8010330:	4620      	mov	r0, r4
 8010332:	f000 f927 	bl	8010584 <_Balloc>
 8010336:	4605      	mov	r5, r0
 8010338:	b928      	cbnz	r0, 8010346 <_dtoa_r+0x9be>
 801033a:	4b87      	ldr	r3, [pc, #540]	; (8010558 <_dtoa_r+0xbd0>)
 801033c:	4602      	mov	r2, r0
 801033e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010342:	f7ff bb3b 	b.w	800f9bc <_dtoa_r+0x34>
 8010346:	693a      	ldr	r2, [r7, #16]
 8010348:	3202      	adds	r2, #2
 801034a:	0092      	lsls	r2, r2, #2
 801034c:	f107 010c 	add.w	r1, r7, #12
 8010350:	300c      	adds	r0, #12
 8010352:	f7fe fcf5 	bl	800ed40 <memcpy>
 8010356:	2201      	movs	r2, #1
 8010358:	4629      	mov	r1, r5
 801035a:	4620      	mov	r0, r4
 801035c:	f000 fb24 	bl	80109a8 <__lshift>
 8010360:	9b01      	ldr	r3, [sp, #4]
 8010362:	f103 0901 	add.w	r9, r3, #1
 8010366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801036a:	4413      	add	r3, r2
 801036c:	9305      	str	r3, [sp, #20]
 801036e:	f00a 0301 	and.w	r3, sl, #1
 8010372:	46b8      	mov	r8, r7
 8010374:	9304      	str	r3, [sp, #16]
 8010376:	4607      	mov	r7, r0
 8010378:	4631      	mov	r1, r6
 801037a:	ee18 0a10 	vmov	r0, s16
 801037e:	f7ff fa77 	bl	800f870 <quorem>
 8010382:	4641      	mov	r1, r8
 8010384:	9002      	str	r0, [sp, #8]
 8010386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801038a:	ee18 0a10 	vmov	r0, s16
 801038e:	f000 fb7b 	bl	8010a88 <__mcmp>
 8010392:	463a      	mov	r2, r7
 8010394:	9003      	str	r0, [sp, #12]
 8010396:	4631      	mov	r1, r6
 8010398:	4620      	mov	r0, r4
 801039a:	f000 fb91 	bl	8010ac0 <__mdiff>
 801039e:	68c2      	ldr	r2, [r0, #12]
 80103a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80103a4:	4605      	mov	r5, r0
 80103a6:	bb02      	cbnz	r2, 80103ea <_dtoa_r+0xa62>
 80103a8:	4601      	mov	r1, r0
 80103aa:	ee18 0a10 	vmov	r0, s16
 80103ae:	f000 fb6b 	bl	8010a88 <__mcmp>
 80103b2:	4602      	mov	r2, r0
 80103b4:	4629      	mov	r1, r5
 80103b6:	4620      	mov	r0, r4
 80103b8:	9207      	str	r2, [sp, #28]
 80103ba:	f000 f923 	bl	8010604 <_Bfree>
 80103be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80103c2:	ea43 0102 	orr.w	r1, r3, r2
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	430b      	orrs	r3, r1
 80103ca:	464d      	mov	r5, r9
 80103cc:	d10f      	bne.n	80103ee <_dtoa_r+0xa66>
 80103ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80103d2:	d02a      	beq.n	801042a <_dtoa_r+0xaa2>
 80103d4:	9b03      	ldr	r3, [sp, #12]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	dd02      	ble.n	80103e0 <_dtoa_r+0xa58>
 80103da:	9b02      	ldr	r3, [sp, #8]
 80103dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80103e0:	f88b a000 	strb.w	sl, [fp]
 80103e4:	e775      	b.n	80102d2 <_dtoa_r+0x94a>
 80103e6:	4638      	mov	r0, r7
 80103e8:	e7ba      	b.n	8010360 <_dtoa_r+0x9d8>
 80103ea:	2201      	movs	r2, #1
 80103ec:	e7e2      	b.n	80103b4 <_dtoa_r+0xa2c>
 80103ee:	9b03      	ldr	r3, [sp, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	db04      	blt.n	80103fe <_dtoa_r+0xa76>
 80103f4:	9906      	ldr	r1, [sp, #24]
 80103f6:	430b      	orrs	r3, r1
 80103f8:	9904      	ldr	r1, [sp, #16]
 80103fa:	430b      	orrs	r3, r1
 80103fc:	d122      	bne.n	8010444 <_dtoa_r+0xabc>
 80103fe:	2a00      	cmp	r2, #0
 8010400:	ddee      	ble.n	80103e0 <_dtoa_r+0xa58>
 8010402:	ee18 1a10 	vmov	r1, s16
 8010406:	2201      	movs	r2, #1
 8010408:	4620      	mov	r0, r4
 801040a:	f000 facd 	bl	80109a8 <__lshift>
 801040e:	4631      	mov	r1, r6
 8010410:	ee08 0a10 	vmov	s16, r0
 8010414:	f000 fb38 	bl	8010a88 <__mcmp>
 8010418:	2800      	cmp	r0, #0
 801041a:	dc03      	bgt.n	8010424 <_dtoa_r+0xa9c>
 801041c:	d1e0      	bne.n	80103e0 <_dtoa_r+0xa58>
 801041e:	f01a 0f01 	tst.w	sl, #1
 8010422:	d0dd      	beq.n	80103e0 <_dtoa_r+0xa58>
 8010424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010428:	d1d7      	bne.n	80103da <_dtoa_r+0xa52>
 801042a:	2339      	movs	r3, #57	; 0x39
 801042c:	f88b 3000 	strb.w	r3, [fp]
 8010430:	462b      	mov	r3, r5
 8010432:	461d      	mov	r5, r3
 8010434:	3b01      	subs	r3, #1
 8010436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801043a:	2a39      	cmp	r2, #57	; 0x39
 801043c:	d071      	beq.n	8010522 <_dtoa_r+0xb9a>
 801043e:	3201      	adds	r2, #1
 8010440:	701a      	strb	r2, [r3, #0]
 8010442:	e746      	b.n	80102d2 <_dtoa_r+0x94a>
 8010444:	2a00      	cmp	r2, #0
 8010446:	dd07      	ble.n	8010458 <_dtoa_r+0xad0>
 8010448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801044c:	d0ed      	beq.n	801042a <_dtoa_r+0xaa2>
 801044e:	f10a 0301 	add.w	r3, sl, #1
 8010452:	f88b 3000 	strb.w	r3, [fp]
 8010456:	e73c      	b.n	80102d2 <_dtoa_r+0x94a>
 8010458:	9b05      	ldr	r3, [sp, #20]
 801045a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801045e:	4599      	cmp	r9, r3
 8010460:	d047      	beq.n	80104f2 <_dtoa_r+0xb6a>
 8010462:	ee18 1a10 	vmov	r1, s16
 8010466:	2300      	movs	r3, #0
 8010468:	220a      	movs	r2, #10
 801046a:	4620      	mov	r0, r4
 801046c:	f000 f8ec 	bl	8010648 <__multadd>
 8010470:	45b8      	cmp	r8, r7
 8010472:	ee08 0a10 	vmov	s16, r0
 8010476:	f04f 0300 	mov.w	r3, #0
 801047a:	f04f 020a 	mov.w	r2, #10
 801047e:	4641      	mov	r1, r8
 8010480:	4620      	mov	r0, r4
 8010482:	d106      	bne.n	8010492 <_dtoa_r+0xb0a>
 8010484:	f000 f8e0 	bl	8010648 <__multadd>
 8010488:	4680      	mov	r8, r0
 801048a:	4607      	mov	r7, r0
 801048c:	f109 0901 	add.w	r9, r9, #1
 8010490:	e772      	b.n	8010378 <_dtoa_r+0x9f0>
 8010492:	f000 f8d9 	bl	8010648 <__multadd>
 8010496:	4639      	mov	r1, r7
 8010498:	4680      	mov	r8, r0
 801049a:	2300      	movs	r3, #0
 801049c:	220a      	movs	r2, #10
 801049e:	4620      	mov	r0, r4
 80104a0:	f000 f8d2 	bl	8010648 <__multadd>
 80104a4:	4607      	mov	r7, r0
 80104a6:	e7f1      	b.n	801048c <_dtoa_r+0xb04>
 80104a8:	9b03      	ldr	r3, [sp, #12]
 80104aa:	9302      	str	r3, [sp, #8]
 80104ac:	9d01      	ldr	r5, [sp, #4]
 80104ae:	ee18 0a10 	vmov	r0, s16
 80104b2:	4631      	mov	r1, r6
 80104b4:	f7ff f9dc 	bl	800f870 <quorem>
 80104b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80104bc:	9b01      	ldr	r3, [sp, #4]
 80104be:	f805 ab01 	strb.w	sl, [r5], #1
 80104c2:	1aea      	subs	r2, r5, r3
 80104c4:	9b02      	ldr	r3, [sp, #8]
 80104c6:	4293      	cmp	r3, r2
 80104c8:	dd09      	ble.n	80104de <_dtoa_r+0xb56>
 80104ca:	ee18 1a10 	vmov	r1, s16
 80104ce:	2300      	movs	r3, #0
 80104d0:	220a      	movs	r2, #10
 80104d2:	4620      	mov	r0, r4
 80104d4:	f000 f8b8 	bl	8010648 <__multadd>
 80104d8:	ee08 0a10 	vmov	s16, r0
 80104dc:	e7e7      	b.n	80104ae <_dtoa_r+0xb26>
 80104de:	9b02      	ldr	r3, [sp, #8]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	bfc8      	it	gt
 80104e4:	461d      	movgt	r5, r3
 80104e6:	9b01      	ldr	r3, [sp, #4]
 80104e8:	bfd8      	it	le
 80104ea:	2501      	movle	r5, #1
 80104ec:	441d      	add	r5, r3
 80104ee:	f04f 0800 	mov.w	r8, #0
 80104f2:	ee18 1a10 	vmov	r1, s16
 80104f6:	2201      	movs	r2, #1
 80104f8:	4620      	mov	r0, r4
 80104fa:	f000 fa55 	bl	80109a8 <__lshift>
 80104fe:	4631      	mov	r1, r6
 8010500:	ee08 0a10 	vmov	s16, r0
 8010504:	f000 fac0 	bl	8010a88 <__mcmp>
 8010508:	2800      	cmp	r0, #0
 801050a:	dc91      	bgt.n	8010430 <_dtoa_r+0xaa8>
 801050c:	d102      	bne.n	8010514 <_dtoa_r+0xb8c>
 801050e:	f01a 0f01 	tst.w	sl, #1
 8010512:	d18d      	bne.n	8010430 <_dtoa_r+0xaa8>
 8010514:	462b      	mov	r3, r5
 8010516:	461d      	mov	r5, r3
 8010518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801051c:	2a30      	cmp	r2, #48	; 0x30
 801051e:	d0fa      	beq.n	8010516 <_dtoa_r+0xb8e>
 8010520:	e6d7      	b.n	80102d2 <_dtoa_r+0x94a>
 8010522:	9a01      	ldr	r2, [sp, #4]
 8010524:	429a      	cmp	r2, r3
 8010526:	d184      	bne.n	8010432 <_dtoa_r+0xaaa>
 8010528:	9b00      	ldr	r3, [sp, #0]
 801052a:	3301      	adds	r3, #1
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	2331      	movs	r3, #49	; 0x31
 8010530:	7013      	strb	r3, [r2, #0]
 8010532:	e6ce      	b.n	80102d2 <_dtoa_r+0x94a>
 8010534:	4b09      	ldr	r3, [pc, #36]	; (801055c <_dtoa_r+0xbd4>)
 8010536:	f7ff ba95 	b.w	800fa64 <_dtoa_r+0xdc>
 801053a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801053c:	2b00      	cmp	r3, #0
 801053e:	f47f aa6e 	bne.w	800fa1e <_dtoa_r+0x96>
 8010542:	4b07      	ldr	r3, [pc, #28]	; (8010560 <_dtoa_r+0xbd8>)
 8010544:	f7ff ba8e 	b.w	800fa64 <_dtoa_r+0xdc>
 8010548:	9b02      	ldr	r3, [sp, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	dcae      	bgt.n	80104ac <_dtoa_r+0xb24>
 801054e:	9b06      	ldr	r3, [sp, #24]
 8010550:	2b02      	cmp	r3, #2
 8010552:	f73f aea8 	bgt.w	80102a6 <_dtoa_r+0x91e>
 8010556:	e7a9      	b.n	80104ac <_dtoa_r+0xb24>
 8010558:	08064b07 	.word	0x08064b07
 801055c:	08064a64 	.word	0x08064a64
 8010560:	08064a88 	.word	0x08064a88

08010564 <_localeconv_r>:
 8010564:	4800      	ldr	r0, [pc, #0]	; (8010568 <_localeconv_r+0x4>)
 8010566:	4770      	bx	lr
 8010568:	20001000 	.word	0x20001000

0801056c <__malloc_lock>:
 801056c:	4801      	ldr	r0, [pc, #4]	; (8010574 <__malloc_lock+0x8>)
 801056e:	f000 bd5e 	b.w	801102e <__retarget_lock_acquire_recursive>
 8010572:	bf00      	nop
 8010574:	2000b6b8 	.word	0x2000b6b8

08010578 <__malloc_unlock>:
 8010578:	4801      	ldr	r0, [pc, #4]	; (8010580 <__malloc_unlock+0x8>)
 801057a:	f000 bd59 	b.w	8011030 <__retarget_lock_release_recursive>
 801057e:	bf00      	nop
 8010580:	2000b6b8 	.word	0x2000b6b8

08010584 <_Balloc>:
 8010584:	b570      	push	{r4, r5, r6, lr}
 8010586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010588:	4604      	mov	r4, r0
 801058a:	460d      	mov	r5, r1
 801058c:	b976      	cbnz	r6, 80105ac <_Balloc+0x28>
 801058e:	2010      	movs	r0, #16
 8010590:	f7fe fbce 	bl	800ed30 <malloc>
 8010594:	4602      	mov	r2, r0
 8010596:	6260      	str	r0, [r4, #36]	; 0x24
 8010598:	b920      	cbnz	r0, 80105a4 <_Balloc+0x20>
 801059a:	4b18      	ldr	r3, [pc, #96]	; (80105fc <_Balloc+0x78>)
 801059c:	4818      	ldr	r0, [pc, #96]	; (8010600 <_Balloc+0x7c>)
 801059e:	2166      	movs	r1, #102	; 0x66
 80105a0:	f000 fd14 	bl	8010fcc <__assert_func>
 80105a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105a8:	6006      	str	r6, [r0, #0]
 80105aa:	60c6      	str	r6, [r0, #12]
 80105ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80105ae:	68f3      	ldr	r3, [r6, #12]
 80105b0:	b183      	cbz	r3, 80105d4 <_Balloc+0x50>
 80105b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80105ba:	b9b8      	cbnz	r0, 80105ec <_Balloc+0x68>
 80105bc:	2101      	movs	r1, #1
 80105be:	fa01 f605 	lsl.w	r6, r1, r5
 80105c2:	1d72      	adds	r2, r6, #5
 80105c4:	0092      	lsls	r2, r2, #2
 80105c6:	4620      	mov	r0, r4
 80105c8:	f000 fb60 	bl	8010c8c <_calloc_r>
 80105cc:	b160      	cbz	r0, 80105e8 <_Balloc+0x64>
 80105ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80105d2:	e00e      	b.n	80105f2 <_Balloc+0x6e>
 80105d4:	2221      	movs	r2, #33	; 0x21
 80105d6:	2104      	movs	r1, #4
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 fb57 	bl	8010c8c <_calloc_r>
 80105de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105e0:	60f0      	str	r0, [r6, #12]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e4      	bne.n	80105b2 <_Balloc+0x2e>
 80105e8:	2000      	movs	r0, #0
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
 80105ec:	6802      	ldr	r2, [r0, #0]
 80105ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105f2:	2300      	movs	r3, #0
 80105f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105f8:	e7f7      	b.n	80105ea <_Balloc+0x66>
 80105fa:	bf00      	nop
 80105fc:	08064a95 	.word	0x08064a95
 8010600:	08064b18 	.word	0x08064b18

08010604 <_Bfree>:
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010608:	4605      	mov	r5, r0
 801060a:	460c      	mov	r4, r1
 801060c:	b976      	cbnz	r6, 801062c <_Bfree+0x28>
 801060e:	2010      	movs	r0, #16
 8010610:	f7fe fb8e 	bl	800ed30 <malloc>
 8010614:	4602      	mov	r2, r0
 8010616:	6268      	str	r0, [r5, #36]	; 0x24
 8010618:	b920      	cbnz	r0, 8010624 <_Bfree+0x20>
 801061a:	4b09      	ldr	r3, [pc, #36]	; (8010640 <_Bfree+0x3c>)
 801061c:	4809      	ldr	r0, [pc, #36]	; (8010644 <_Bfree+0x40>)
 801061e:	218a      	movs	r1, #138	; 0x8a
 8010620:	f000 fcd4 	bl	8010fcc <__assert_func>
 8010624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010628:	6006      	str	r6, [r0, #0]
 801062a:	60c6      	str	r6, [r0, #12]
 801062c:	b13c      	cbz	r4, 801063e <_Bfree+0x3a>
 801062e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010630:	6862      	ldr	r2, [r4, #4]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010638:	6021      	str	r1, [r4, #0]
 801063a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801063e:	bd70      	pop	{r4, r5, r6, pc}
 8010640:	08064a95 	.word	0x08064a95
 8010644:	08064b18 	.word	0x08064b18

08010648 <__multadd>:
 8010648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064c:	690d      	ldr	r5, [r1, #16]
 801064e:	4607      	mov	r7, r0
 8010650:	460c      	mov	r4, r1
 8010652:	461e      	mov	r6, r3
 8010654:	f101 0c14 	add.w	ip, r1, #20
 8010658:	2000      	movs	r0, #0
 801065a:	f8dc 3000 	ldr.w	r3, [ip]
 801065e:	b299      	uxth	r1, r3
 8010660:	fb02 6101 	mla	r1, r2, r1, r6
 8010664:	0c1e      	lsrs	r6, r3, #16
 8010666:	0c0b      	lsrs	r3, r1, #16
 8010668:	fb02 3306 	mla	r3, r2, r6, r3
 801066c:	b289      	uxth	r1, r1
 801066e:	3001      	adds	r0, #1
 8010670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010674:	4285      	cmp	r5, r0
 8010676:	f84c 1b04 	str.w	r1, [ip], #4
 801067a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801067e:	dcec      	bgt.n	801065a <__multadd+0x12>
 8010680:	b30e      	cbz	r6, 80106c6 <__multadd+0x7e>
 8010682:	68a3      	ldr	r3, [r4, #8]
 8010684:	42ab      	cmp	r3, r5
 8010686:	dc19      	bgt.n	80106bc <__multadd+0x74>
 8010688:	6861      	ldr	r1, [r4, #4]
 801068a:	4638      	mov	r0, r7
 801068c:	3101      	adds	r1, #1
 801068e:	f7ff ff79 	bl	8010584 <_Balloc>
 8010692:	4680      	mov	r8, r0
 8010694:	b928      	cbnz	r0, 80106a2 <__multadd+0x5a>
 8010696:	4602      	mov	r2, r0
 8010698:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <__multadd+0x84>)
 801069a:	480d      	ldr	r0, [pc, #52]	; (80106d0 <__multadd+0x88>)
 801069c:	21b5      	movs	r1, #181	; 0xb5
 801069e:	f000 fc95 	bl	8010fcc <__assert_func>
 80106a2:	6922      	ldr	r2, [r4, #16]
 80106a4:	3202      	adds	r2, #2
 80106a6:	f104 010c 	add.w	r1, r4, #12
 80106aa:	0092      	lsls	r2, r2, #2
 80106ac:	300c      	adds	r0, #12
 80106ae:	f7fe fb47 	bl	800ed40 <memcpy>
 80106b2:	4621      	mov	r1, r4
 80106b4:	4638      	mov	r0, r7
 80106b6:	f7ff ffa5 	bl	8010604 <_Bfree>
 80106ba:	4644      	mov	r4, r8
 80106bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80106c0:	3501      	adds	r5, #1
 80106c2:	615e      	str	r6, [r3, #20]
 80106c4:	6125      	str	r5, [r4, #16]
 80106c6:	4620      	mov	r0, r4
 80106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106cc:	08064b07 	.word	0x08064b07
 80106d0:	08064b18 	.word	0x08064b18

080106d4 <__hi0bits>:
 80106d4:	0c03      	lsrs	r3, r0, #16
 80106d6:	041b      	lsls	r3, r3, #16
 80106d8:	b9d3      	cbnz	r3, 8010710 <__hi0bits+0x3c>
 80106da:	0400      	lsls	r0, r0, #16
 80106dc:	2310      	movs	r3, #16
 80106de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106e2:	bf04      	itt	eq
 80106e4:	0200      	lsleq	r0, r0, #8
 80106e6:	3308      	addeq	r3, #8
 80106e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106ec:	bf04      	itt	eq
 80106ee:	0100      	lsleq	r0, r0, #4
 80106f0:	3304      	addeq	r3, #4
 80106f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106f6:	bf04      	itt	eq
 80106f8:	0080      	lsleq	r0, r0, #2
 80106fa:	3302      	addeq	r3, #2
 80106fc:	2800      	cmp	r0, #0
 80106fe:	db05      	blt.n	801070c <__hi0bits+0x38>
 8010700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010704:	f103 0301 	add.w	r3, r3, #1
 8010708:	bf08      	it	eq
 801070a:	2320      	moveq	r3, #32
 801070c:	4618      	mov	r0, r3
 801070e:	4770      	bx	lr
 8010710:	2300      	movs	r3, #0
 8010712:	e7e4      	b.n	80106de <__hi0bits+0xa>

08010714 <__lo0bits>:
 8010714:	6803      	ldr	r3, [r0, #0]
 8010716:	f013 0207 	ands.w	r2, r3, #7
 801071a:	4601      	mov	r1, r0
 801071c:	d00b      	beq.n	8010736 <__lo0bits+0x22>
 801071e:	07da      	lsls	r2, r3, #31
 8010720:	d423      	bmi.n	801076a <__lo0bits+0x56>
 8010722:	0798      	lsls	r0, r3, #30
 8010724:	bf49      	itett	mi
 8010726:	085b      	lsrmi	r3, r3, #1
 8010728:	089b      	lsrpl	r3, r3, #2
 801072a:	2001      	movmi	r0, #1
 801072c:	600b      	strmi	r3, [r1, #0]
 801072e:	bf5c      	itt	pl
 8010730:	600b      	strpl	r3, [r1, #0]
 8010732:	2002      	movpl	r0, #2
 8010734:	4770      	bx	lr
 8010736:	b298      	uxth	r0, r3
 8010738:	b9a8      	cbnz	r0, 8010766 <__lo0bits+0x52>
 801073a:	0c1b      	lsrs	r3, r3, #16
 801073c:	2010      	movs	r0, #16
 801073e:	b2da      	uxtb	r2, r3
 8010740:	b90a      	cbnz	r2, 8010746 <__lo0bits+0x32>
 8010742:	3008      	adds	r0, #8
 8010744:	0a1b      	lsrs	r3, r3, #8
 8010746:	071a      	lsls	r2, r3, #28
 8010748:	bf04      	itt	eq
 801074a:	091b      	lsreq	r3, r3, #4
 801074c:	3004      	addeq	r0, #4
 801074e:	079a      	lsls	r2, r3, #30
 8010750:	bf04      	itt	eq
 8010752:	089b      	lsreq	r3, r3, #2
 8010754:	3002      	addeq	r0, #2
 8010756:	07da      	lsls	r2, r3, #31
 8010758:	d403      	bmi.n	8010762 <__lo0bits+0x4e>
 801075a:	085b      	lsrs	r3, r3, #1
 801075c:	f100 0001 	add.w	r0, r0, #1
 8010760:	d005      	beq.n	801076e <__lo0bits+0x5a>
 8010762:	600b      	str	r3, [r1, #0]
 8010764:	4770      	bx	lr
 8010766:	4610      	mov	r0, r2
 8010768:	e7e9      	b.n	801073e <__lo0bits+0x2a>
 801076a:	2000      	movs	r0, #0
 801076c:	4770      	bx	lr
 801076e:	2020      	movs	r0, #32
 8010770:	4770      	bx	lr
	...

08010774 <__i2b>:
 8010774:	b510      	push	{r4, lr}
 8010776:	460c      	mov	r4, r1
 8010778:	2101      	movs	r1, #1
 801077a:	f7ff ff03 	bl	8010584 <_Balloc>
 801077e:	4602      	mov	r2, r0
 8010780:	b928      	cbnz	r0, 801078e <__i2b+0x1a>
 8010782:	4b05      	ldr	r3, [pc, #20]	; (8010798 <__i2b+0x24>)
 8010784:	4805      	ldr	r0, [pc, #20]	; (801079c <__i2b+0x28>)
 8010786:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801078a:	f000 fc1f 	bl	8010fcc <__assert_func>
 801078e:	2301      	movs	r3, #1
 8010790:	6144      	str	r4, [r0, #20]
 8010792:	6103      	str	r3, [r0, #16]
 8010794:	bd10      	pop	{r4, pc}
 8010796:	bf00      	nop
 8010798:	08064b07 	.word	0x08064b07
 801079c:	08064b18 	.word	0x08064b18

080107a0 <__multiply>:
 80107a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a4:	4691      	mov	r9, r2
 80107a6:	690a      	ldr	r2, [r1, #16]
 80107a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	bfb8      	it	lt
 80107b0:	460b      	movlt	r3, r1
 80107b2:	460c      	mov	r4, r1
 80107b4:	bfbc      	itt	lt
 80107b6:	464c      	movlt	r4, r9
 80107b8:	4699      	movlt	r9, r3
 80107ba:	6927      	ldr	r7, [r4, #16]
 80107bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80107c0:	68a3      	ldr	r3, [r4, #8]
 80107c2:	6861      	ldr	r1, [r4, #4]
 80107c4:	eb07 060a 	add.w	r6, r7, sl
 80107c8:	42b3      	cmp	r3, r6
 80107ca:	b085      	sub	sp, #20
 80107cc:	bfb8      	it	lt
 80107ce:	3101      	addlt	r1, #1
 80107d0:	f7ff fed8 	bl	8010584 <_Balloc>
 80107d4:	b930      	cbnz	r0, 80107e4 <__multiply+0x44>
 80107d6:	4602      	mov	r2, r0
 80107d8:	4b44      	ldr	r3, [pc, #272]	; (80108ec <__multiply+0x14c>)
 80107da:	4845      	ldr	r0, [pc, #276]	; (80108f0 <__multiply+0x150>)
 80107dc:	f240 115d 	movw	r1, #349	; 0x15d
 80107e0:	f000 fbf4 	bl	8010fcc <__assert_func>
 80107e4:	f100 0514 	add.w	r5, r0, #20
 80107e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107ec:	462b      	mov	r3, r5
 80107ee:	2200      	movs	r2, #0
 80107f0:	4543      	cmp	r3, r8
 80107f2:	d321      	bcc.n	8010838 <__multiply+0x98>
 80107f4:	f104 0314 	add.w	r3, r4, #20
 80107f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107fc:	f109 0314 	add.w	r3, r9, #20
 8010800:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010804:	9202      	str	r2, [sp, #8]
 8010806:	1b3a      	subs	r2, r7, r4
 8010808:	3a15      	subs	r2, #21
 801080a:	f022 0203 	bic.w	r2, r2, #3
 801080e:	3204      	adds	r2, #4
 8010810:	f104 0115 	add.w	r1, r4, #21
 8010814:	428f      	cmp	r7, r1
 8010816:	bf38      	it	cc
 8010818:	2204      	movcc	r2, #4
 801081a:	9201      	str	r2, [sp, #4]
 801081c:	9a02      	ldr	r2, [sp, #8]
 801081e:	9303      	str	r3, [sp, #12]
 8010820:	429a      	cmp	r2, r3
 8010822:	d80c      	bhi.n	801083e <__multiply+0x9e>
 8010824:	2e00      	cmp	r6, #0
 8010826:	dd03      	ble.n	8010830 <__multiply+0x90>
 8010828:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801082c:	2b00      	cmp	r3, #0
 801082e:	d05a      	beq.n	80108e6 <__multiply+0x146>
 8010830:	6106      	str	r6, [r0, #16]
 8010832:	b005      	add	sp, #20
 8010834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010838:	f843 2b04 	str.w	r2, [r3], #4
 801083c:	e7d8      	b.n	80107f0 <__multiply+0x50>
 801083e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010842:	f1ba 0f00 	cmp.w	sl, #0
 8010846:	d024      	beq.n	8010892 <__multiply+0xf2>
 8010848:	f104 0e14 	add.w	lr, r4, #20
 801084c:	46a9      	mov	r9, r5
 801084e:	f04f 0c00 	mov.w	ip, #0
 8010852:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010856:	f8d9 1000 	ldr.w	r1, [r9]
 801085a:	fa1f fb82 	uxth.w	fp, r2
 801085e:	b289      	uxth	r1, r1
 8010860:	fb0a 110b 	mla	r1, sl, fp, r1
 8010864:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010868:	f8d9 2000 	ldr.w	r2, [r9]
 801086c:	4461      	add	r1, ip
 801086e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010872:	fb0a c20b 	mla	r2, sl, fp, ip
 8010876:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801087a:	b289      	uxth	r1, r1
 801087c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010880:	4577      	cmp	r7, lr
 8010882:	f849 1b04 	str.w	r1, [r9], #4
 8010886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801088a:	d8e2      	bhi.n	8010852 <__multiply+0xb2>
 801088c:	9a01      	ldr	r2, [sp, #4]
 801088e:	f845 c002 	str.w	ip, [r5, r2]
 8010892:	9a03      	ldr	r2, [sp, #12]
 8010894:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010898:	3304      	adds	r3, #4
 801089a:	f1b9 0f00 	cmp.w	r9, #0
 801089e:	d020      	beq.n	80108e2 <__multiply+0x142>
 80108a0:	6829      	ldr	r1, [r5, #0]
 80108a2:	f104 0c14 	add.w	ip, r4, #20
 80108a6:	46ae      	mov	lr, r5
 80108a8:	f04f 0a00 	mov.w	sl, #0
 80108ac:	f8bc b000 	ldrh.w	fp, [ip]
 80108b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80108b4:	fb09 220b 	mla	r2, r9, fp, r2
 80108b8:	4492      	add	sl, r2
 80108ba:	b289      	uxth	r1, r1
 80108bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80108c0:	f84e 1b04 	str.w	r1, [lr], #4
 80108c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80108c8:	f8be 1000 	ldrh.w	r1, [lr]
 80108cc:	0c12      	lsrs	r2, r2, #16
 80108ce:	fb09 1102 	mla	r1, r9, r2, r1
 80108d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80108d6:	4567      	cmp	r7, ip
 80108d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108dc:	d8e6      	bhi.n	80108ac <__multiply+0x10c>
 80108de:	9a01      	ldr	r2, [sp, #4]
 80108e0:	50a9      	str	r1, [r5, r2]
 80108e2:	3504      	adds	r5, #4
 80108e4:	e79a      	b.n	801081c <__multiply+0x7c>
 80108e6:	3e01      	subs	r6, #1
 80108e8:	e79c      	b.n	8010824 <__multiply+0x84>
 80108ea:	bf00      	nop
 80108ec:	08064b07 	.word	0x08064b07
 80108f0:	08064b18 	.word	0x08064b18

080108f4 <__pow5mult>:
 80108f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f8:	4615      	mov	r5, r2
 80108fa:	f012 0203 	ands.w	r2, r2, #3
 80108fe:	4606      	mov	r6, r0
 8010900:	460f      	mov	r7, r1
 8010902:	d007      	beq.n	8010914 <__pow5mult+0x20>
 8010904:	4c25      	ldr	r4, [pc, #148]	; (801099c <__pow5mult+0xa8>)
 8010906:	3a01      	subs	r2, #1
 8010908:	2300      	movs	r3, #0
 801090a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801090e:	f7ff fe9b 	bl	8010648 <__multadd>
 8010912:	4607      	mov	r7, r0
 8010914:	10ad      	asrs	r5, r5, #2
 8010916:	d03d      	beq.n	8010994 <__pow5mult+0xa0>
 8010918:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801091a:	b97c      	cbnz	r4, 801093c <__pow5mult+0x48>
 801091c:	2010      	movs	r0, #16
 801091e:	f7fe fa07 	bl	800ed30 <malloc>
 8010922:	4602      	mov	r2, r0
 8010924:	6270      	str	r0, [r6, #36]	; 0x24
 8010926:	b928      	cbnz	r0, 8010934 <__pow5mult+0x40>
 8010928:	4b1d      	ldr	r3, [pc, #116]	; (80109a0 <__pow5mult+0xac>)
 801092a:	481e      	ldr	r0, [pc, #120]	; (80109a4 <__pow5mult+0xb0>)
 801092c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010930:	f000 fb4c 	bl	8010fcc <__assert_func>
 8010934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010938:	6004      	str	r4, [r0, #0]
 801093a:	60c4      	str	r4, [r0, #12]
 801093c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010944:	b94c      	cbnz	r4, 801095a <__pow5mult+0x66>
 8010946:	f240 2171 	movw	r1, #625	; 0x271
 801094a:	4630      	mov	r0, r6
 801094c:	f7ff ff12 	bl	8010774 <__i2b>
 8010950:	2300      	movs	r3, #0
 8010952:	f8c8 0008 	str.w	r0, [r8, #8]
 8010956:	4604      	mov	r4, r0
 8010958:	6003      	str	r3, [r0, #0]
 801095a:	f04f 0900 	mov.w	r9, #0
 801095e:	07eb      	lsls	r3, r5, #31
 8010960:	d50a      	bpl.n	8010978 <__pow5mult+0x84>
 8010962:	4639      	mov	r1, r7
 8010964:	4622      	mov	r2, r4
 8010966:	4630      	mov	r0, r6
 8010968:	f7ff ff1a 	bl	80107a0 <__multiply>
 801096c:	4639      	mov	r1, r7
 801096e:	4680      	mov	r8, r0
 8010970:	4630      	mov	r0, r6
 8010972:	f7ff fe47 	bl	8010604 <_Bfree>
 8010976:	4647      	mov	r7, r8
 8010978:	106d      	asrs	r5, r5, #1
 801097a:	d00b      	beq.n	8010994 <__pow5mult+0xa0>
 801097c:	6820      	ldr	r0, [r4, #0]
 801097e:	b938      	cbnz	r0, 8010990 <__pow5mult+0x9c>
 8010980:	4622      	mov	r2, r4
 8010982:	4621      	mov	r1, r4
 8010984:	4630      	mov	r0, r6
 8010986:	f7ff ff0b 	bl	80107a0 <__multiply>
 801098a:	6020      	str	r0, [r4, #0]
 801098c:	f8c0 9000 	str.w	r9, [r0]
 8010990:	4604      	mov	r4, r0
 8010992:	e7e4      	b.n	801095e <__pow5mult+0x6a>
 8010994:	4638      	mov	r0, r7
 8010996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801099a:	bf00      	nop
 801099c:	08064c68 	.word	0x08064c68
 80109a0:	08064a95 	.word	0x08064a95
 80109a4:	08064b18 	.word	0x08064b18

080109a8 <__lshift>:
 80109a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ac:	460c      	mov	r4, r1
 80109ae:	6849      	ldr	r1, [r1, #4]
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80109b6:	68a3      	ldr	r3, [r4, #8]
 80109b8:	4607      	mov	r7, r0
 80109ba:	4691      	mov	r9, r2
 80109bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109c0:	f108 0601 	add.w	r6, r8, #1
 80109c4:	42b3      	cmp	r3, r6
 80109c6:	db0b      	blt.n	80109e0 <__lshift+0x38>
 80109c8:	4638      	mov	r0, r7
 80109ca:	f7ff fddb 	bl	8010584 <_Balloc>
 80109ce:	4605      	mov	r5, r0
 80109d0:	b948      	cbnz	r0, 80109e6 <__lshift+0x3e>
 80109d2:	4602      	mov	r2, r0
 80109d4:	4b2a      	ldr	r3, [pc, #168]	; (8010a80 <__lshift+0xd8>)
 80109d6:	482b      	ldr	r0, [pc, #172]	; (8010a84 <__lshift+0xdc>)
 80109d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80109dc:	f000 faf6 	bl	8010fcc <__assert_func>
 80109e0:	3101      	adds	r1, #1
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	e7ee      	b.n	80109c4 <__lshift+0x1c>
 80109e6:	2300      	movs	r3, #0
 80109e8:	f100 0114 	add.w	r1, r0, #20
 80109ec:	f100 0210 	add.w	r2, r0, #16
 80109f0:	4618      	mov	r0, r3
 80109f2:	4553      	cmp	r3, sl
 80109f4:	db37      	blt.n	8010a66 <__lshift+0xbe>
 80109f6:	6920      	ldr	r0, [r4, #16]
 80109f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109fc:	f104 0314 	add.w	r3, r4, #20
 8010a00:	f019 091f 	ands.w	r9, r9, #31
 8010a04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010a0c:	d02f      	beq.n	8010a6e <__lshift+0xc6>
 8010a0e:	f1c9 0e20 	rsb	lr, r9, #32
 8010a12:	468a      	mov	sl, r1
 8010a14:	f04f 0c00 	mov.w	ip, #0
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	fa02 f209 	lsl.w	r2, r2, r9
 8010a1e:	ea42 020c 	orr.w	r2, r2, ip
 8010a22:	f84a 2b04 	str.w	r2, [sl], #4
 8010a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a2a:	4298      	cmp	r0, r3
 8010a2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010a30:	d8f2      	bhi.n	8010a18 <__lshift+0x70>
 8010a32:	1b03      	subs	r3, r0, r4
 8010a34:	3b15      	subs	r3, #21
 8010a36:	f023 0303 	bic.w	r3, r3, #3
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	f104 0215 	add.w	r2, r4, #21
 8010a40:	4290      	cmp	r0, r2
 8010a42:	bf38      	it	cc
 8010a44:	2304      	movcc	r3, #4
 8010a46:	f841 c003 	str.w	ip, [r1, r3]
 8010a4a:	f1bc 0f00 	cmp.w	ip, #0
 8010a4e:	d001      	beq.n	8010a54 <__lshift+0xac>
 8010a50:	f108 0602 	add.w	r6, r8, #2
 8010a54:	3e01      	subs	r6, #1
 8010a56:	4638      	mov	r0, r7
 8010a58:	612e      	str	r6, [r5, #16]
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	f7ff fdd2 	bl	8010604 <_Bfree>
 8010a60:	4628      	mov	r0, r5
 8010a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	e7c1      	b.n	80109f2 <__lshift+0x4a>
 8010a6e:	3904      	subs	r1, #4
 8010a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a78:	4298      	cmp	r0, r3
 8010a7a:	d8f9      	bhi.n	8010a70 <__lshift+0xc8>
 8010a7c:	e7ea      	b.n	8010a54 <__lshift+0xac>
 8010a7e:	bf00      	nop
 8010a80:	08064b07 	.word	0x08064b07
 8010a84:	08064b18 	.word	0x08064b18

08010a88 <__mcmp>:
 8010a88:	b530      	push	{r4, r5, lr}
 8010a8a:	6902      	ldr	r2, [r0, #16]
 8010a8c:	690c      	ldr	r4, [r1, #16]
 8010a8e:	1b12      	subs	r2, r2, r4
 8010a90:	d10e      	bne.n	8010ab0 <__mcmp+0x28>
 8010a92:	f100 0314 	add.w	r3, r0, #20
 8010a96:	3114      	adds	r1, #20
 8010a98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010aa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010aa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010aa8:	42a5      	cmp	r5, r4
 8010aaa:	d003      	beq.n	8010ab4 <__mcmp+0x2c>
 8010aac:	d305      	bcc.n	8010aba <__mcmp+0x32>
 8010aae:	2201      	movs	r2, #1
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	bd30      	pop	{r4, r5, pc}
 8010ab4:	4283      	cmp	r3, r0
 8010ab6:	d3f3      	bcc.n	8010aa0 <__mcmp+0x18>
 8010ab8:	e7fa      	b.n	8010ab0 <__mcmp+0x28>
 8010aba:	f04f 32ff 	mov.w	r2, #4294967295
 8010abe:	e7f7      	b.n	8010ab0 <__mcmp+0x28>

08010ac0 <__mdiff>:
 8010ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	4611      	mov	r1, r2
 8010aca:	4620      	mov	r0, r4
 8010acc:	4690      	mov	r8, r2
 8010ace:	f7ff ffdb 	bl	8010a88 <__mcmp>
 8010ad2:	1e05      	subs	r5, r0, #0
 8010ad4:	d110      	bne.n	8010af8 <__mdiff+0x38>
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f7ff fd53 	bl	8010584 <_Balloc>
 8010ade:	b930      	cbnz	r0, 8010aee <__mdiff+0x2e>
 8010ae0:	4b3a      	ldr	r3, [pc, #232]	; (8010bcc <__mdiff+0x10c>)
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	f240 2132 	movw	r1, #562	; 0x232
 8010ae8:	4839      	ldr	r0, [pc, #228]	; (8010bd0 <__mdiff+0x110>)
 8010aea:	f000 fa6f 	bl	8010fcc <__assert_func>
 8010aee:	2301      	movs	r3, #1
 8010af0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af8:	bfa4      	itt	ge
 8010afa:	4643      	movge	r3, r8
 8010afc:	46a0      	movge	r8, r4
 8010afe:	4630      	mov	r0, r6
 8010b00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b04:	bfa6      	itte	ge
 8010b06:	461c      	movge	r4, r3
 8010b08:	2500      	movge	r5, #0
 8010b0a:	2501      	movlt	r5, #1
 8010b0c:	f7ff fd3a 	bl	8010584 <_Balloc>
 8010b10:	b920      	cbnz	r0, 8010b1c <__mdiff+0x5c>
 8010b12:	4b2e      	ldr	r3, [pc, #184]	; (8010bcc <__mdiff+0x10c>)
 8010b14:	4602      	mov	r2, r0
 8010b16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010b1a:	e7e5      	b.n	8010ae8 <__mdiff+0x28>
 8010b1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b20:	6926      	ldr	r6, [r4, #16]
 8010b22:	60c5      	str	r5, [r0, #12]
 8010b24:	f104 0914 	add.w	r9, r4, #20
 8010b28:	f108 0514 	add.w	r5, r8, #20
 8010b2c:	f100 0e14 	add.w	lr, r0, #20
 8010b30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010b34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010b38:	f108 0210 	add.w	r2, r8, #16
 8010b3c:	46f2      	mov	sl, lr
 8010b3e:	2100      	movs	r1, #0
 8010b40:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b48:	fa1f f883 	uxth.w	r8, r3
 8010b4c:	fa11 f18b 	uxtah	r1, r1, fp
 8010b50:	0c1b      	lsrs	r3, r3, #16
 8010b52:	eba1 0808 	sub.w	r8, r1, r8
 8010b56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b5e:	fa1f f888 	uxth.w	r8, r8
 8010b62:	1419      	asrs	r1, r3, #16
 8010b64:	454e      	cmp	r6, r9
 8010b66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b6a:	f84a 3b04 	str.w	r3, [sl], #4
 8010b6e:	d8e7      	bhi.n	8010b40 <__mdiff+0x80>
 8010b70:	1b33      	subs	r3, r6, r4
 8010b72:	3b15      	subs	r3, #21
 8010b74:	f023 0303 	bic.w	r3, r3, #3
 8010b78:	3304      	adds	r3, #4
 8010b7a:	3415      	adds	r4, #21
 8010b7c:	42a6      	cmp	r6, r4
 8010b7e:	bf38      	it	cc
 8010b80:	2304      	movcc	r3, #4
 8010b82:	441d      	add	r5, r3
 8010b84:	4473      	add	r3, lr
 8010b86:	469e      	mov	lr, r3
 8010b88:	462e      	mov	r6, r5
 8010b8a:	4566      	cmp	r6, ip
 8010b8c:	d30e      	bcc.n	8010bac <__mdiff+0xec>
 8010b8e:	f10c 0203 	add.w	r2, ip, #3
 8010b92:	1b52      	subs	r2, r2, r5
 8010b94:	f022 0203 	bic.w	r2, r2, #3
 8010b98:	3d03      	subs	r5, #3
 8010b9a:	45ac      	cmp	ip, r5
 8010b9c:	bf38      	it	cc
 8010b9e:	2200      	movcc	r2, #0
 8010ba0:	441a      	add	r2, r3
 8010ba2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ba6:	b17b      	cbz	r3, 8010bc8 <__mdiff+0x108>
 8010ba8:	6107      	str	r7, [r0, #16]
 8010baa:	e7a3      	b.n	8010af4 <__mdiff+0x34>
 8010bac:	f856 8b04 	ldr.w	r8, [r6], #4
 8010bb0:	fa11 f288 	uxtah	r2, r1, r8
 8010bb4:	1414      	asrs	r4, r2, #16
 8010bb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010bba:	b292      	uxth	r2, r2
 8010bbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010bc0:	f84e 2b04 	str.w	r2, [lr], #4
 8010bc4:	1421      	asrs	r1, r4, #16
 8010bc6:	e7e0      	b.n	8010b8a <__mdiff+0xca>
 8010bc8:	3f01      	subs	r7, #1
 8010bca:	e7ea      	b.n	8010ba2 <__mdiff+0xe2>
 8010bcc:	08064b07 	.word	0x08064b07
 8010bd0:	08064b18 	.word	0x08064b18

08010bd4 <__d2b>:
 8010bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010bd8:	4689      	mov	r9, r1
 8010bda:	2101      	movs	r1, #1
 8010bdc:	ec57 6b10 	vmov	r6, r7, d0
 8010be0:	4690      	mov	r8, r2
 8010be2:	f7ff fccf 	bl	8010584 <_Balloc>
 8010be6:	4604      	mov	r4, r0
 8010be8:	b930      	cbnz	r0, 8010bf8 <__d2b+0x24>
 8010bea:	4602      	mov	r2, r0
 8010bec:	4b25      	ldr	r3, [pc, #148]	; (8010c84 <__d2b+0xb0>)
 8010bee:	4826      	ldr	r0, [pc, #152]	; (8010c88 <__d2b+0xb4>)
 8010bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8010bf4:	f000 f9ea 	bl	8010fcc <__assert_func>
 8010bf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c00:	bb35      	cbnz	r5, 8010c50 <__d2b+0x7c>
 8010c02:	2e00      	cmp	r6, #0
 8010c04:	9301      	str	r3, [sp, #4]
 8010c06:	d028      	beq.n	8010c5a <__d2b+0x86>
 8010c08:	4668      	mov	r0, sp
 8010c0a:	9600      	str	r6, [sp, #0]
 8010c0c:	f7ff fd82 	bl	8010714 <__lo0bits>
 8010c10:	9900      	ldr	r1, [sp, #0]
 8010c12:	b300      	cbz	r0, 8010c56 <__d2b+0x82>
 8010c14:	9a01      	ldr	r2, [sp, #4]
 8010c16:	f1c0 0320 	rsb	r3, r0, #32
 8010c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010c1e:	430b      	orrs	r3, r1
 8010c20:	40c2      	lsrs	r2, r0
 8010c22:	6163      	str	r3, [r4, #20]
 8010c24:	9201      	str	r2, [sp, #4]
 8010c26:	9b01      	ldr	r3, [sp, #4]
 8010c28:	61a3      	str	r3, [r4, #24]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	bf14      	ite	ne
 8010c2e:	2202      	movne	r2, #2
 8010c30:	2201      	moveq	r2, #1
 8010c32:	6122      	str	r2, [r4, #16]
 8010c34:	b1d5      	cbz	r5, 8010c6c <__d2b+0x98>
 8010c36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c3a:	4405      	add	r5, r0
 8010c3c:	f8c9 5000 	str.w	r5, [r9]
 8010c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c44:	f8c8 0000 	str.w	r0, [r8]
 8010c48:	4620      	mov	r0, r4
 8010c4a:	b003      	add	sp, #12
 8010c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c54:	e7d5      	b.n	8010c02 <__d2b+0x2e>
 8010c56:	6161      	str	r1, [r4, #20]
 8010c58:	e7e5      	b.n	8010c26 <__d2b+0x52>
 8010c5a:	a801      	add	r0, sp, #4
 8010c5c:	f7ff fd5a 	bl	8010714 <__lo0bits>
 8010c60:	9b01      	ldr	r3, [sp, #4]
 8010c62:	6163      	str	r3, [r4, #20]
 8010c64:	2201      	movs	r2, #1
 8010c66:	6122      	str	r2, [r4, #16]
 8010c68:	3020      	adds	r0, #32
 8010c6a:	e7e3      	b.n	8010c34 <__d2b+0x60>
 8010c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c74:	f8c9 0000 	str.w	r0, [r9]
 8010c78:	6918      	ldr	r0, [r3, #16]
 8010c7a:	f7ff fd2b 	bl	80106d4 <__hi0bits>
 8010c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c82:	e7df      	b.n	8010c44 <__d2b+0x70>
 8010c84:	08064b07 	.word	0x08064b07
 8010c88:	08064b18 	.word	0x08064b18

08010c8c <_calloc_r>:
 8010c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c8e:	fba1 2402 	umull	r2, r4, r1, r2
 8010c92:	b94c      	cbnz	r4, 8010ca8 <_calloc_r+0x1c>
 8010c94:	4611      	mov	r1, r2
 8010c96:	9201      	str	r2, [sp, #4]
 8010c98:	f7fe f8d4 	bl	800ee44 <_malloc_r>
 8010c9c:	9a01      	ldr	r2, [sp, #4]
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	b930      	cbnz	r0, 8010cb0 <_calloc_r+0x24>
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	b003      	add	sp, #12
 8010ca6:	bd30      	pop	{r4, r5, pc}
 8010ca8:	220c      	movs	r2, #12
 8010caa:	6002      	str	r2, [r0, #0]
 8010cac:	2500      	movs	r5, #0
 8010cae:	e7f8      	b.n	8010ca2 <_calloc_r+0x16>
 8010cb0:	4621      	mov	r1, r4
 8010cb2:	f7fe f853 	bl	800ed5c <memset>
 8010cb6:	e7f4      	b.n	8010ca2 <_calloc_r+0x16>

08010cb8 <_realloc_r>:
 8010cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	4614      	mov	r4, r2
 8010cc0:	460e      	mov	r6, r1
 8010cc2:	b921      	cbnz	r1, 8010cce <_realloc_r+0x16>
 8010cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc8:	4611      	mov	r1, r2
 8010cca:	f7fe b8bb 	b.w	800ee44 <_malloc_r>
 8010cce:	b92a      	cbnz	r2, 8010cdc <_realloc_r+0x24>
 8010cd0:	f7fe f84c 	bl	800ed6c <_free_r>
 8010cd4:	4625      	mov	r5, r4
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cdc:	f000 f9d5 	bl	801108a <_malloc_usable_size_r>
 8010ce0:	4284      	cmp	r4, r0
 8010ce2:	4607      	mov	r7, r0
 8010ce4:	d802      	bhi.n	8010cec <_realloc_r+0x34>
 8010ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010cea:	d812      	bhi.n	8010d12 <_realloc_r+0x5a>
 8010cec:	4621      	mov	r1, r4
 8010cee:	4640      	mov	r0, r8
 8010cf0:	f7fe f8a8 	bl	800ee44 <_malloc_r>
 8010cf4:	4605      	mov	r5, r0
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d0ed      	beq.n	8010cd6 <_realloc_r+0x1e>
 8010cfa:	42bc      	cmp	r4, r7
 8010cfc:	4622      	mov	r2, r4
 8010cfe:	4631      	mov	r1, r6
 8010d00:	bf28      	it	cs
 8010d02:	463a      	movcs	r2, r7
 8010d04:	f7fe f81c 	bl	800ed40 <memcpy>
 8010d08:	4631      	mov	r1, r6
 8010d0a:	4640      	mov	r0, r8
 8010d0c:	f7fe f82e 	bl	800ed6c <_free_r>
 8010d10:	e7e1      	b.n	8010cd6 <_realloc_r+0x1e>
 8010d12:	4635      	mov	r5, r6
 8010d14:	e7df      	b.n	8010cd6 <_realloc_r+0x1e>

08010d16 <__ssputs_r>:
 8010d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d1a:	688e      	ldr	r6, [r1, #8]
 8010d1c:	429e      	cmp	r6, r3
 8010d1e:	4682      	mov	sl, r0
 8010d20:	460c      	mov	r4, r1
 8010d22:	4690      	mov	r8, r2
 8010d24:	461f      	mov	r7, r3
 8010d26:	d838      	bhi.n	8010d9a <__ssputs_r+0x84>
 8010d28:	898a      	ldrh	r2, [r1, #12]
 8010d2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d2e:	d032      	beq.n	8010d96 <__ssputs_r+0x80>
 8010d30:	6825      	ldr	r5, [r4, #0]
 8010d32:	6909      	ldr	r1, [r1, #16]
 8010d34:	eba5 0901 	sub.w	r9, r5, r1
 8010d38:	6965      	ldr	r5, [r4, #20]
 8010d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d42:	3301      	adds	r3, #1
 8010d44:	444b      	add	r3, r9
 8010d46:	106d      	asrs	r5, r5, #1
 8010d48:	429d      	cmp	r5, r3
 8010d4a:	bf38      	it	cc
 8010d4c:	461d      	movcc	r5, r3
 8010d4e:	0553      	lsls	r3, r2, #21
 8010d50:	d531      	bpl.n	8010db6 <__ssputs_r+0xa0>
 8010d52:	4629      	mov	r1, r5
 8010d54:	f7fe f876 	bl	800ee44 <_malloc_r>
 8010d58:	4606      	mov	r6, r0
 8010d5a:	b950      	cbnz	r0, 8010d72 <__ssputs_r+0x5c>
 8010d5c:	230c      	movs	r3, #12
 8010d5e:	f8ca 3000 	str.w	r3, [sl]
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d68:	81a3      	strh	r3, [r4, #12]
 8010d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d72:	6921      	ldr	r1, [r4, #16]
 8010d74:	464a      	mov	r2, r9
 8010d76:	f7fd ffe3 	bl	800ed40 <memcpy>
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d84:	81a3      	strh	r3, [r4, #12]
 8010d86:	6126      	str	r6, [r4, #16]
 8010d88:	6165      	str	r5, [r4, #20]
 8010d8a:	444e      	add	r6, r9
 8010d8c:	eba5 0509 	sub.w	r5, r5, r9
 8010d90:	6026      	str	r6, [r4, #0]
 8010d92:	60a5      	str	r5, [r4, #8]
 8010d94:	463e      	mov	r6, r7
 8010d96:	42be      	cmp	r6, r7
 8010d98:	d900      	bls.n	8010d9c <__ssputs_r+0x86>
 8010d9a:	463e      	mov	r6, r7
 8010d9c:	6820      	ldr	r0, [r4, #0]
 8010d9e:	4632      	mov	r2, r6
 8010da0:	4641      	mov	r1, r8
 8010da2:	f000 f958 	bl	8011056 <memmove>
 8010da6:	68a3      	ldr	r3, [r4, #8]
 8010da8:	1b9b      	subs	r3, r3, r6
 8010daa:	60a3      	str	r3, [r4, #8]
 8010dac:	6823      	ldr	r3, [r4, #0]
 8010dae:	4433      	add	r3, r6
 8010db0:	6023      	str	r3, [r4, #0]
 8010db2:	2000      	movs	r0, #0
 8010db4:	e7db      	b.n	8010d6e <__ssputs_r+0x58>
 8010db6:	462a      	mov	r2, r5
 8010db8:	f7ff ff7e 	bl	8010cb8 <_realloc_r>
 8010dbc:	4606      	mov	r6, r0
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d1e1      	bne.n	8010d86 <__ssputs_r+0x70>
 8010dc2:	6921      	ldr	r1, [r4, #16]
 8010dc4:	4650      	mov	r0, sl
 8010dc6:	f7fd ffd1 	bl	800ed6c <_free_r>
 8010dca:	e7c7      	b.n	8010d5c <__ssputs_r+0x46>

08010dcc <_svfiprintf_r>:
 8010dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd0:	4698      	mov	r8, r3
 8010dd2:	898b      	ldrh	r3, [r1, #12]
 8010dd4:	061b      	lsls	r3, r3, #24
 8010dd6:	b09d      	sub	sp, #116	; 0x74
 8010dd8:	4607      	mov	r7, r0
 8010dda:	460d      	mov	r5, r1
 8010ddc:	4614      	mov	r4, r2
 8010dde:	d50e      	bpl.n	8010dfe <_svfiprintf_r+0x32>
 8010de0:	690b      	ldr	r3, [r1, #16]
 8010de2:	b963      	cbnz	r3, 8010dfe <_svfiprintf_r+0x32>
 8010de4:	2140      	movs	r1, #64	; 0x40
 8010de6:	f7fe f82d 	bl	800ee44 <_malloc_r>
 8010dea:	6028      	str	r0, [r5, #0]
 8010dec:	6128      	str	r0, [r5, #16]
 8010dee:	b920      	cbnz	r0, 8010dfa <_svfiprintf_r+0x2e>
 8010df0:	230c      	movs	r3, #12
 8010df2:	603b      	str	r3, [r7, #0]
 8010df4:	f04f 30ff 	mov.w	r0, #4294967295
 8010df8:	e0d1      	b.n	8010f9e <_svfiprintf_r+0x1d2>
 8010dfa:	2340      	movs	r3, #64	; 0x40
 8010dfc:	616b      	str	r3, [r5, #20]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	9309      	str	r3, [sp, #36]	; 0x24
 8010e02:	2320      	movs	r3, #32
 8010e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e0c:	2330      	movs	r3, #48	; 0x30
 8010e0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010fb8 <_svfiprintf_r+0x1ec>
 8010e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e16:	f04f 0901 	mov.w	r9, #1
 8010e1a:	4623      	mov	r3, r4
 8010e1c:	469a      	mov	sl, r3
 8010e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e22:	b10a      	cbz	r2, 8010e28 <_svfiprintf_r+0x5c>
 8010e24:	2a25      	cmp	r2, #37	; 0x25
 8010e26:	d1f9      	bne.n	8010e1c <_svfiprintf_r+0x50>
 8010e28:	ebba 0b04 	subs.w	fp, sl, r4
 8010e2c:	d00b      	beq.n	8010e46 <_svfiprintf_r+0x7a>
 8010e2e:	465b      	mov	r3, fp
 8010e30:	4622      	mov	r2, r4
 8010e32:	4629      	mov	r1, r5
 8010e34:	4638      	mov	r0, r7
 8010e36:	f7ff ff6e 	bl	8010d16 <__ssputs_r>
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	f000 80aa 	beq.w	8010f94 <_svfiprintf_r+0x1c8>
 8010e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e42:	445a      	add	r2, fp
 8010e44:	9209      	str	r2, [sp, #36]	; 0x24
 8010e46:	f89a 3000 	ldrb.w	r3, [sl]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 80a2 	beq.w	8010f94 <_svfiprintf_r+0x1c8>
 8010e50:	2300      	movs	r3, #0
 8010e52:	f04f 32ff 	mov.w	r2, #4294967295
 8010e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e5a:	f10a 0a01 	add.w	sl, sl, #1
 8010e5e:	9304      	str	r3, [sp, #16]
 8010e60:	9307      	str	r3, [sp, #28]
 8010e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e66:	931a      	str	r3, [sp, #104]	; 0x68
 8010e68:	4654      	mov	r4, sl
 8010e6a:	2205      	movs	r2, #5
 8010e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e70:	4851      	ldr	r0, [pc, #324]	; (8010fb8 <_svfiprintf_r+0x1ec>)
 8010e72:	f7ef f9e5 	bl	8000240 <memchr>
 8010e76:	9a04      	ldr	r2, [sp, #16]
 8010e78:	b9d8      	cbnz	r0, 8010eb2 <_svfiprintf_r+0xe6>
 8010e7a:	06d0      	lsls	r0, r2, #27
 8010e7c:	bf44      	itt	mi
 8010e7e:	2320      	movmi	r3, #32
 8010e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e84:	0711      	lsls	r1, r2, #28
 8010e86:	bf44      	itt	mi
 8010e88:	232b      	movmi	r3, #43	; 0x2b
 8010e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010e92:	2b2a      	cmp	r3, #42	; 0x2a
 8010e94:	d015      	beq.n	8010ec2 <_svfiprintf_r+0xf6>
 8010e96:	9a07      	ldr	r2, [sp, #28]
 8010e98:	4654      	mov	r4, sl
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	f04f 0c0a 	mov.w	ip, #10
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ea6:	3b30      	subs	r3, #48	; 0x30
 8010ea8:	2b09      	cmp	r3, #9
 8010eaa:	d94e      	bls.n	8010f4a <_svfiprintf_r+0x17e>
 8010eac:	b1b0      	cbz	r0, 8010edc <_svfiprintf_r+0x110>
 8010eae:	9207      	str	r2, [sp, #28]
 8010eb0:	e014      	b.n	8010edc <_svfiprintf_r+0x110>
 8010eb2:	eba0 0308 	sub.w	r3, r0, r8
 8010eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	9304      	str	r3, [sp, #16]
 8010ebe:	46a2      	mov	sl, r4
 8010ec0:	e7d2      	b.n	8010e68 <_svfiprintf_r+0x9c>
 8010ec2:	9b03      	ldr	r3, [sp, #12]
 8010ec4:	1d19      	adds	r1, r3, #4
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	9103      	str	r1, [sp, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	bfbb      	ittet	lt
 8010ece:	425b      	neglt	r3, r3
 8010ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8010ed4:	9307      	strge	r3, [sp, #28]
 8010ed6:	9307      	strlt	r3, [sp, #28]
 8010ed8:	bfb8      	it	lt
 8010eda:	9204      	strlt	r2, [sp, #16]
 8010edc:	7823      	ldrb	r3, [r4, #0]
 8010ede:	2b2e      	cmp	r3, #46	; 0x2e
 8010ee0:	d10c      	bne.n	8010efc <_svfiprintf_r+0x130>
 8010ee2:	7863      	ldrb	r3, [r4, #1]
 8010ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ee6:	d135      	bne.n	8010f54 <_svfiprintf_r+0x188>
 8010ee8:	9b03      	ldr	r3, [sp, #12]
 8010eea:	1d1a      	adds	r2, r3, #4
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	9203      	str	r2, [sp, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	bfb8      	it	lt
 8010ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ef8:	3402      	adds	r4, #2
 8010efa:	9305      	str	r3, [sp, #20]
 8010efc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010fc8 <_svfiprintf_r+0x1fc>
 8010f00:	7821      	ldrb	r1, [r4, #0]
 8010f02:	2203      	movs	r2, #3
 8010f04:	4650      	mov	r0, sl
 8010f06:	f7ef f99b 	bl	8000240 <memchr>
 8010f0a:	b140      	cbz	r0, 8010f1e <_svfiprintf_r+0x152>
 8010f0c:	2340      	movs	r3, #64	; 0x40
 8010f0e:	eba0 000a 	sub.w	r0, r0, sl
 8010f12:	fa03 f000 	lsl.w	r0, r3, r0
 8010f16:	9b04      	ldr	r3, [sp, #16]
 8010f18:	4303      	orrs	r3, r0
 8010f1a:	3401      	adds	r4, #1
 8010f1c:	9304      	str	r3, [sp, #16]
 8010f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f22:	4826      	ldr	r0, [pc, #152]	; (8010fbc <_svfiprintf_r+0x1f0>)
 8010f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f28:	2206      	movs	r2, #6
 8010f2a:	f7ef f989 	bl	8000240 <memchr>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d038      	beq.n	8010fa4 <_svfiprintf_r+0x1d8>
 8010f32:	4b23      	ldr	r3, [pc, #140]	; (8010fc0 <_svfiprintf_r+0x1f4>)
 8010f34:	bb1b      	cbnz	r3, 8010f7e <_svfiprintf_r+0x1b2>
 8010f36:	9b03      	ldr	r3, [sp, #12]
 8010f38:	3307      	adds	r3, #7
 8010f3a:	f023 0307 	bic.w	r3, r3, #7
 8010f3e:	3308      	adds	r3, #8
 8010f40:	9303      	str	r3, [sp, #12]
 8010f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f44:	4433      	add	r3, r6
 8010f46:	9309      	str	r3, [sp, #36]	; 0x24
 8010f48:	e767      	b.n	8010e1a <_svfiprintf_r+0x4e>
 8010f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f4e:	460c      	mov	r4, r1
 8010f50:	2001      	movs	r0, #1
 8010f52:	e7a5      	b.n	8010ea0 <_svfiprintf_r+0xd4>
 8010f54:	2300      	movs	r3, #0
 8010f56:	3401      	adds	r4, #1
 8010f58:	9305      	str	r3, [sp, #20]
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	f04f 0c0a 	mov.w	ip, #10
 8010f60:	4620      	mov	r0, r4
 8010f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f66:	3a30      	subs	r2, #48	; 0x30
 8010f68:	2a09      	cmp	r2, #9
 8010f6a:	d903      	bls.n	8010f74 <_svfiprintf_r+0x1a8>
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d0c5      	beq.n	8010efc <_svfiprintf_r+0x130>
 8010f70:	9105      	str	r1, [sp, #20]
 8010f72:	e7c3      	b.n	8010efc <_svfiprintf_r+0x130>
 8010f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f78:	4604      	mov	r4, r0
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e7f0      	b.n	8010f60 <_svfiprintf_r+0x194>
 8010f7e:	ab03      	add	r3, sp, #12
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	462a      	mov	r2, r5
 8010f84:	4b0f      	ldr	r3, [pc, #60]	; (8010fc4 <_svfiprintf_r+0x1f8>)
 8010f86:	a904      	add	r1, sp, #16
 8010f88:	4638      	mov	r0, r7
 8010f8a:	f7fe f86f 	bl	800f06c <_printf_float>
 8010f8e:	1c42      	adds	r2, r0, #1
 8010f90:	4606      	mov	r6, r0
 8010f92:	d1d6      	bne.n	8010f42 <_svfiprintf_r+0x176>
 8010f94:	89ab      	ldrh	r3, [r5, #12]
 8010f96:	065b      	lsls	r3, r3, #25
 8010f98:	f53f af2c 	bmi.w	8010df4 <_svfiprintf_r+0x28>
 8010f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f9e:	b01d      	add	sp, #116	; 0x74
 8010fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa4:	ab03      	add	r3, sp, #12
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	462a      	mov	r2, r5
 8010faa:	4b06      	ldr	r3, [pc, #24]	; (8010fc4 <_svfiprintf_r+0x1f8>)
 8010fac:	a904      	add	r1, sp, #16
 8010fae:	4638      	mov	r0, r7
 8010fb0:	f7fe fb00 	bl	800f5b4 <_printf_i>
 8010fb4:	e7eb      	b.n	8010f8e <_svfiprintf_r+0x1c2>
 8010fb6:	bf00      	nop
 8010fb8:	08064c74 	.word	0x08064c74
 8010fbc:	08064c7e 	.word	0x08064c7e
 8010fc0:	0800f06d 	.word	0x0800f06d
 8010fc4:	08010d17 	.word	0x08010d17
 8010fc8:	08064c7a 	.word	0x08064c7a

08010fcc <__assert_func>:
 8010fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fce:	4614      	mov	r4, r2
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	4b09      	ldr	r3, [pc, #36]	; (8010ff8 <__assert_func+0x2c>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	68d8      	ldr	r0, [r3, #12]
 8010fda:	b14c      	cbz	r4, 8010ff0 <__assert_func+0x24>
 8010fdc:	4b07      	ldr	r3, [pc, #28]	; (8010ffc <__assert_func+0x30>)
 8010fde:	9100      	str	r1, [sp, #0]
 8010fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fe4:	4906      	ldr	r1, [pc, #24]	; (8011000 <__assert_func+0x34>)
 8010fe6:	462b      	mov	r3, r5
 8010fe8:	f000 f80e 	bl	8011008 <fiprintf>
 8010fec:	f000 fa7c 	bl	80114e8 <abort>
 8010ff0:	4b04      	ldr	r3, [pc, #16]	; (8011004 <__assert_func+0x38>)
 8010ff2:	461c      	mov	r4, r3
 8010ff4:	e7f3      	b.n	8010fde <__assert_func+0x12>
 8010ff6:	bf00      	nop
 8010ff8:	20000eac 	.word	0x20000eac
 8010ffc:	08064c85 	.word	0x08064c85
 8011000:	08064c92 	.word	0x08064c92
 8011004:	08064cc0 	.word	0x08064cc0

08011008 <fiprintf>:
 8011008:	b40e      	push	{r1, r2, r3}
 801100a:	b503      	push	{r0, r1, lr}
 801100c:	4601      	mov	r1, r0
 801100e:	ab03      	add	r3, sp, #12
 8011010:	4805      	ldr	r0, [pc, #20]	; (8011028 <fiprintf+0x20>)
 8011012:	f853 2b04 	ldr.w	r2, [r3], #4
 8011016:	6800      	ldr	r0, [r0, #0]
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	f000 f867 	bl	80110ec <_vfiprintf_r>
 801101e:	b002      	add	sp, #8
 8011020:	f85d eb04 	ldr.w	lr, [sp], #4
 8011024:	b003      	add	sp, #12
 8011026:	4770      	bx	lr
 8011028:	20000eac 	.word	0x20000eac

0801102c <__retarget_lock_init_recursive>:
 801102c:	4770      	bx	lr

0801102e <__retarget_lock_acquire_recursive>:
 801102e:	4770      	bx	lr

08011030 <__retarget_lock_release_recursive>:
 8011030:	4770      	bx	lr

08011032 <__ascii_mbtowc>:
 8011032:	b082      	sub	sp, #8
 8011034:	b901      	cbnz	r1, 8011038 <__ascii_mbtowc+0x6>
 8011036:	a901      	add	r1, sp, #4
 8011038:	b142      	cbz	r2, 801104c <__ascii_mbtowc+0x1a>
 801103a:	b14b      	cbz	r3, 8011050 <__ascii_mbtowc+0x1e>
 801103c:	7813      	ldrb	r3, [r2, #0]
 801103e:	600b      	str	r3, [r1, #0]
 8011040:	7812      	ldrb	r2, [r2, #0]
 8011042:	1e10      	subs	r0, r2, #0
 8011044:	bf18      	it	ne
 8011046:	2001      	movne	r0, #1
 8011048:	b002      	add	sp, #8
 801104a:	4770      	bx	lr
 801104c:	4610      	mov	r0, r2
 801104e:	e7fb      	b.n	8011048 <__ascii_mbtowc+0x16>
 8011050:	f06f 0001 	mvn.w	r0, #1
 8011054:	e7f8      	b.n	8011048 <__ascii_mbtowc+0x16>

08011056 <memmove>:
 8011056:	4288      	cmp	r0, r1
 8011058:	b510      	push	{r4, lr}
 801105a:	eb01 0402 	add.w	r4, r1, r2
 801105e:	d902      	bls.n	8011066 <memmove+0x10>
 8011060:	4284      	cmp	r4, r0
 8011062:	4623      	mov	r3, r4
 8011064:	d807      	bhi.n	8011076 <memmove+0x20>
 8011066:	1e43      	subs	r3, r0, #1
 8011068:	42a1      	cmp	r1, r4
 801106a:	d008      	beq.n	801107e <memmove+0x28>
 801106c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011070:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011074:	e7f8      	b.n	8011068 <memmove+0x12>
 8011076:	4402      	add	r2, r0
 8011078:	4601      	mov	r1, r0
 801107a:	428a      	cmp	r2, r1
 801107c:	d100      	bne.n	8011080 <memmove+0x2a>
 801107e:	bd10      	pop	{r4, pc}
 8011080:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011084:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011088:	e7f7      	b.n	801107a <memmove+0x24>

0801108a <_malloc_usable_size_r>:
 801108a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801108e:	1f18      	subs	r0, r3, #4
 8011090:	2b00      	cmp	r3, #0
 8011092:	bfbc      	itt	lt
 8011094:	580b      	ldrlt	r3, [r1, r0]
 8011096:	18c0      	addlt	r0, r0, r3
 8011098:	4770      	bx	lr

0801109a <__sfputc_r>:
 801109a:	6893      	ldr	r3, [r2, #8]
 801109c:	3b01      	subs	r3, #1
 801109e:	2b00      	cmp	r3, #0
 80110a0:	b410      	push	{r4}
 80110a2:	6093      	str	r3, [r2, #8]
 80110a4:	da08      	bge.n	80110b8 <__sfputc_r+0x1e>
 80110a6:	6994      	ldr	r4, [r2, #24]
 80110a8:	42a3      	cmp	r3, r4
 80110aa:	db01      	blt.n	80110b0 <__sfputc_r+0x16>
 80110ac:	290a      	cmp	r1, #10
 80110ae:	d103      	bne.n	80110b8 <__sfputc_r+0x1e>
 80110b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b4:	f000 b94a 	b.w	801134c <__swbuf_r>
 80110b8:	6813      	ldr	r3, [r2, #0]
 80110ba:	1c58      	adds	r0, r3, #1
 80110bc:	6010      	str	r0, [r2, #0]
 80110be:	7019      	strb	r1, [r3, #0]
 80110c0:	4608      	mov	r0, r1
 80110c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <__sfputs_r>:
 80110c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ca:	4606      	mov	r6, r0
 80110cc:	460f      	mov	r7, r1
 80110ce:	4614      	mov	r4, r2
 80110d0:	18d5      	adds	r5, r2, r3
 80110d2:	42ac      	cmp	r4, r5
 80110d4:	d101      	bne.n	80110da <__sfputs_r+0x12>
 80110d6:	2000      	movs	r0, #0
 80110d8:	e007      	b.n	80110ea <__sfputs_r+0x22>
 80110da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110de:	463a      	mov	r2, r7
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7ff ffda 	bl	801109a <__sfputc_r>
 80110e6:	1c43      	adds	r3, r0, #1
 80110e8:	d1f3      	bne.n	80110d2 <__sfputs_r+0xa>
 80110ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110ec <_vfiprintf_r>:
 80110ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f0:	460d      	mov	r5, r1
 80110f2:	b09d      	sub	sp, #116	; 0x74
 80110f4:	4614      	mov	r4, r2
 80110f6:	4698      	mov	r8, r3
 80110f8:	4606      	mov	r6, r0
 80110fa:	b118      	cbz	r0, 8011104 <_vfiprintf_r+0x18>
 80110fc:	6983      	ldr	r3, [r0, #24]
 80110fe:	b90b      	cbnz	r3, 8011104 <_vfiprintf_r+0x18>
 8011100:	f000 fb14 	bl	801172c <__sinit>
 8011104:	4b89      	ldr	r3, [pc, #548]	; (801132c <_vfiprintf_r+0x240>)
 8011106:	429d      	cmp	r5, r3
 8011108:	d11b      	bne.n	8011142 <_vfiprintf_r+0x56>
 801110a:	6875      	ldr	r5, [r6, #4]
 801110c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801110e:	07d9      	lsls	r1, r3, #31
 8011110:	d405      	bmi.n	801111e <_vfiprintf_r+0x32>
 8011112:	89ab      	ldrh	r3, [r5, #12]
 8011114:	059a      	lsls	r2, r3, #22
 8011116:	d402      	bmi.n	801111e <_vfiprintf_r+0x32>
 8011118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801111a:	f7ff ff88 	bl	801102e <__retarget_lock_acquire_recursive>
 801111e:	89ab      	ldrh	r3, [r5, #12]
 8011120:	071b      	lsls	r3, r3, #28
 8011122:	d501      	bpl.n	8011128 <_vfiprintf_r+0x3c>
 8011124:	692b      	ldr	r3, [r5, #16]
 8011126:	b9eb      	cbnz	r3, 8011164 <_vfiprintf_r+0x78>
 8011128:	4629      	mov	r1, r5
 801112a:	4630      	mov	r0, r6
 801112c:	f000 f96e 	bl	801140c <__swsetup_r>
 8011130:	b1c0      	cbz	r0, 8011164 <_vfiprintf_r+0x78>
 8011132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011134:	07dc      	lsls	r4, r3, #31
 8011136:	d50e      	bpl.n	8011156 <_vfiprintf_r+0x6a>
 8011138:	f04f 30ff 	mov.w	r0, #4294967295
 801113c:	b01d      	add	sp, #116	; 0x74
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011142:	4b7b      	ldr	r3, [pc, #492]	; (8011330 <_vfiprintf_r+0x244>)
 8011144:	429d      	cmp	r5, r3
 8011146:	d101      	bne.n	801114c <_vfiprintf_r+0x60>
 8011148:	68b5      	ldr	r5, [r6, #8]
 801114a:	e7df      	b.n	801110c <_vfiprintf_r+0x20>
 801114c:	4b79      	ldr	r3, [pc, #484]	; (8011334 <_vfiprintf_r+0x248>)
 801114e:	429d      	cmp	r5, r3
 8011150:	bf08      	it	eq
 8011152:	68f5      	ldreq	r5, [r6, #12]
 8011154:	e7da      	b.n	801110c <_vfiprintf_r+0x20>
 8011156:	89ab      	ldrh	r3, [r5, #12]
 8011158:	0598      	lsls	r0, r3, #22
 801115a:	d4ed      	bmi.n	8011138 <_vfiprintf_r+0x4c>
 801115c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801115e:	f7ff ff67 	bl	8011030 <__retarget_lock_release_recursive>
 8011162:	e7e9      	b.n	8011138 <_vfiprintf_r+0x4c>
 8011164:	2300      	movs	r3, #0
 8011166:	9309      	str	r3, [sp, #36]	; 0x24
 8011168:	2320      	movs	r3, #32
 801116a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801116e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011172:	2330      	movs	r3, #48	; 0x30
 8011174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011338 <_vfiprintf_r+0x24c>
 8011178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801117c:	f04f 0901 	mov.w	r9, #1
 8011180:	4623      	mov	r3, r4
 8011182:	469a      	mov	sl, r3
 8011184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011188:	b10a      	cbz	r2, 801118e <_vfiprintf_r+0xa2>
 801118a:	2a25      	cmp	r2, #37	; 0x25
 801118c:	d1f9      	bne.n	8011182 <_vfiprintf_r+0x96>
 801118e:	ebba 0b04 	subs.w	fp, sl, r4
 8011192:	d00b      	beq.n	80111ac <_vfiprintf_r+0xc0>
 8011194:	465b      	mov	r3, fp
 8011196:	4622      	mov	r2, r4
 8011198:	4629      	mov	r1, r5
 801119a:	4630      	mov	r0, r6
 801119c:	f7ff ff94 	bl	80110c8 <__sfputs_r>
 80111a0:	3001      	adds	r0, #1
 80111a2:	f000 80aa 	beq.w	80112fa <_vfiprintf_r+0x20e>
 80111a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111a8:	445a      	add	r2, fp
 80111aa:	9209      	str	r2, [sp, #36]	; 0x24
 80111ac:	f89a 3000 	ldrb.w	r3, [sl]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	f000 80a2 	beq.w	80112fa <_vfiprintf_r+0x20e>
 80111b6:	2300      	movs	r3, #0
 80111b8:	f04f 32ff 	mov.w	r2, #4294967295
 80111bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111c0:	f10a 0a01 	add.w	sl, sl, #1
 80111c4:	9304      	str	r3, [sp, #16]
 80111c6:	9307      	str	r3, [sp, #28]
 80111c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111cc:	931a      	str	r3, [sp, #104]	; 0x68
 80111ce:	4654      	mov	r4, sl
 80111d0:	2205      	movs	r2, #5
 80111d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d6:	4858      	ldr	r0, [pc, #352]	; (8011338 <_vfiprintf_r+0x24c>)
 80111d8:	f7ef f832 	bl	8000240 <memchr>
 80111dc:	9a04      	ldr	r2, [sp, #16]
 80111de:	b9d8      	cbnz	r0, 8011218 <_vfiprintf_r+0x12c>
 80111e0:	06d1      	lsls	r1, r2, #27
 80111e2:	bf44      	itt	mi
 80111e4:	2320      	movmi	r3, #32
 80111e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111ea:	0713      	lsls	r3, r2, #28
 80111ec:	bf44      	itt	mi
 80111ee:	232b      	movmi	r3, #43	; 0x2b
 80111f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111f4:	f89a 3000 	ldrb.w	r3, [sl]
 80111f8:	2b2a      	cmp	r3, #42	; 0x2a
 80111fa:	d015      	beq.n	8011228 <_vfiprintf_r+0x13c>
 80111fc:	9a07      	ldr	r2, [sp, #28]
 80111fe:	4654      	mov	r4, sl
 8011200:	2000      	movs	r0, #0
 8011202:	f04f 0c0a 	mov.w	ip, #10
 8011206:	4621      	mov	r1, r4
 8011208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801120c:	3b30      	subs	r3, #48	; 0x30
 801120e:	2b09      	cmp	r3, #9
 8011210:	d94e      	bls.n	80112b0 <_vfiprintf_r+0x1c4>
 8011212:	b1b0      	cbz	r0, 8011242 <_vfiprintf_r+0x156>
 8011214:	9207      	str	r2, [sp, #28]
 8011216:	e014      	b.n	8011242 <_vfiprintf_r+0x156>
 8011218:	eba0 0308 	sub.w	r3, r0, r8
 801121c:	fa09 f303 	lsl.w	r3, r9, r3
 8011220:	4313      	orrs	r3, r2
 8011222:	9304      	str	r3, [sp, #16]
 8011224:	46a2      	mov	sl, r4
 8011226:	e7d2      	b.n	80111ce <_vfiprintf_r+0xe2>
 8011228:	9b03      	ldr	r3, [sp, #12]
 801122a:	1d19      	adds	r1, r3, #4
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	9103      	str	r1, [sp, #12]
 8011230:	2b00      	cmp	r3, #0
 8011232:	bfbb      	ittet	lt
 8011234:	425b      	neglt	r3, r3
 8011236:	f042 0202 	orrlt.w	r2, r2, #2
 801123a:	9307      	strge	r3, [sp, #28]
 801123c:	9307      	strlt	r3, [sp, #28]
 801123e:	bfb8      	it	lt
 8011240:	9204      	strlt	r2, [sp, #16]
 8011242:	7823      	ldrb	r3, [r4, #0]
 8011244:	2b2e      	cmp	r3, #46	; 0x2e
 8011246:	d10c      	bne.n	8011262 <_vfiprintf_r+0x176>
 8011248:	7863      	ldrb	r3, [r4, #1]
 801124a:	2b2a      	cmp	r3, #42	; 0x2a
 801124c:	d135      	bne.n	80112ba <_vfiprintf_r+0x1ce>
 801124e:	9b03      	ldr	r3, [sp, #12]
 8011250:	1d1a      	adds	r2, r3, #4
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	9203      	str	r2, [sp, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	bfb8      	it	lt
 801125a:	f04f 33ff 	movlt.w	r3, #4294967295
 801125e:	3402      	adds	r4, #2
 8011260:	9305      	str	r3, [sp, #20]
 8011262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011348 <_vfiprintf_r+0x25c>
 8011266:	7821      	ldrb	r1, [r4, #0]
 8011268:	2203      	movs	r2, #3
 801126a:	4650      	mov	r0, sl
 801126c:	f7ee ffe8 	bl	8000240 <memchr>
 8011270:	b140      	cbz	r0, 8011284 <_vfiprintf_r+0x198>
 8011272:	2340      	movs	r3, #64	; 0x40
 8011274:	eba0 000a 	sub.w	r0, r0, sl
 8011278:	fa03 f000 	lsl.w	r0, r3, r0
 801127c:	9b04      	ldr	r3, [sp, #16]
 801127e:	4303      	orrs	r3, r0
 8011280:	3401      	adds	r4, #1
 8011282:	9304      	str	r3, [sp, #16]
 8011284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011288:	482c      	ldr	r0, [pc, #176]	; (801133c <_vfiprintf_r+0x250>)
 801128a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801128e:	2206      	movs	r2, #6
 8011290:	f7ee ffd6 	bl	8000240 <memchr>
 8011294:	2800      	cmp	r0, #0
 8011296:	d03f      	beq.n	8011318 <_vfiprintf_r+0x22c>
 8011298:	4b29      	ldr	r3, [pc, #164]	; (8011340 <_vfiprintf_r+0x254>)
 801129a:	bb1b      	cbnz	r3, 80112e4 <_vfiprintf_r+0x1f8>
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	3307      	adds	r3, #7
 80112a0:	f023 0307 	bic.w	r3, r3, #7
 80112a4:	3308      	adds	r3, #8
 80112a6:	9303      	str	r3, [sp, #12]
 80112a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112aa:	443b      	add	r3, r7
 80112ac:	9309      	str	r3, [sp, #36]	; 0x24
 80112ae:	e767      	b.n	8011180 <_vfiprintf_r+0x94>
 80112b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80112b4:	460c      	mov	r4, r1
 80112b6:	2001      	movs	r0, #1
 80112b8:	e7a5      	b.n	8011206 <_vfiprintf_r+0x11a>
 80112ba:	2300      	movs	r3, #0
 80112bc:	3401      	adds	r4, #1
 80112be:	9305      	str	r3, [sp, #20]
 80112c0:	4619      	mov	r1, r3
 80112c2:	f04f 0c0a 	mov.w	ip, #10
 80112c6:	4620      	mov	r0, r4
 80112c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112cc:	3a30      	subs	r2, #48	; 0x30
 80112ce:	2a09      	cmp	r2, #9
 80112d0:	d903      	bls.n	80112da <_vfiprintf_r+0x1ee>
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d0c5      	beq.n	8011262 <_vfiprintf_r+0x176>
 80112d6:	9105      	str	r1, [sp, #20]
 80112d8:	e7c3      	b.n	8011262 <_vfiprintf_r+0x176>
 80112da:	fb0c 2101 	mla	r1, ip, r1, r2
 80112de:	4604      	mov	r4, r0
 80112e0:	2301      	movs	r3, #1
 80112e2:	e7f0      	b.n	80112c6 <_vfiprintf_r+0x1da>
 80112e4:	ab03      	add	r3, sp, #12
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	462a      	mov	r2, r5
 80112ea:	4b16      	ldr	r3, [pc, #88]	; (8011344 <_vfiprintf_r+0x258>)
 80112ec:	a904      	add	r1, sp, #16
 80112ee:	4630      	mov	r0, r6
 80112f0:	f7fd febc 	bl	800f06c <_printf_float>
 80112f4:	4607      	mov	r7, r0
 80112f6:	1c78      	adds	r0, r7, #1
 80112f8:	d1d6      	bne.n	80112a8 <_vfiprintf_r+0x1bc>
 80112fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112fc:	07d9      	lsls	r1, r3, #31
 80112fe:	d405      	bmi.n	801130c <_vfiprintf_r+0x220>
 8011300:	89ab      	ldrh	r3, [r5, #12]
 8011302:	059a      	lsls	r2, r3, #22
 8011304:	d402      	bmi.n	801130c <_vfiprintf_r+0x220>
 8011306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011308:	f7ff fe92 	bl	8011030 <__retarget_lock_release_recursive>
 801130c:	89ab      	ldrh	r3, [r5, #12]
 801130e:	065b      	lsls	r3, r3, #25
 8011310:	f53f af12 	bmi.w	8011138 <_vfiprintf_r+0x4c>
 8011314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011316:	e711      	b.n	801113c <_vfiprintf_r+0x50>
 8011318:	ab03      	add	r3, sp, #12
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	462a      	mov	r2, r5
 801131e:	4b09      	ldr	r3, [pc, #36]	; (8011344 <_vfiprintf_r+0x258>)
 8011320:	a904      	add	r1, sp, #16
 8011322:	4630      	mov	r0, r6
 8011324:	f7fe f946 	bl	800f5b4 <_printf_i>
 8011328:	e7e4      	b.n	80112f4 <_vfiprintf_r+0x208>
 801132a:	bf00      	nop
 801132c:	08064dec 	.word	0x08064dec
 8011330:	08064e0c 	.word	0x08064e0c
 8011334:	08064dcc 	.word	0x08064dcc
 8011338:	08064c74 	.word	0x08064c74
 801133c:	08064c7e 	.word	0x08064c7e
 8011340:	0800f06d 	.word	0x0800f06d
 8011344:	080110c9 	.word	0x080110c9
 8011348:	08064c7a 	.word	0x08064c7a

0801134c <__swbuf_r>:
 801134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801134e:	460e      	mov	r6, r1
 8011350:	4614      	mov	r4, r2
 8011352:	4605      	mov	r5, r0
 8011354:	b118      	cbz	r0, 801135e <__swbuf_r+0x12>
 8011356:	6983      	ldr	r3, [r0, #24]
 8011358:	b90b      	cbnz	r3, 801135e <__swbuf_r+0x12>
 801135a:	f000 f9e7 	bl	801172c <__sinit>
 801135e:	4b21      	ldr	r3, [pc, #132]	; (80113e4 <__swbuf_r+0x98>)
 8011360:	429c      	cmp	r4, r3
 8011362:	d12b      	bne.n	80113bc <__swbuf_r+0x70>
 8011364:	686c      	ldr	r4, [r5, #4]
 8011366:	69a3      	ldr	r3, [r4, #24]
 8011368:	60a3      	str	r3, [r4, #8]
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	071a      	lsls	r2, r3, #28
 801136e:	d52f      	bpl.n	80113d0 <__swbuf_r+0x84>
 8011370:	6923      	ldr	r3, [r4, #16]
 8011372:	b36b      	cbz	r3, 80113d0 <__swbuf_r+0x84>
 8011374:	6923      	ldr	r3, [r4, #16]
 8011376:	6820      	ldr	r0, [r4, #0]
 8011378:	1ac0      	subs	r0, r0, r3
 801137a:	6963      	ldr	r3, [r4, #20]
 801137c:	b2f6      	uxtb	r6, r6
 801137e:	4283      	cmp	r3, r0
 8011380:	4637      	mov	r7, r6
 8011382:	dc04      	bgt.n	801138e <__swbuf_r+0x42>
 8011384:	4621      	mov	r1, r4
 8011386:	4628      	mov	r0, r5
 8011388:	f000 f93c 	bl	8011604 <_fflush_r>
 801138c:	bb30      	cbnz	r0, 80113dc <__swbuf_r+0x90>
 801138e:	68a3      	ldr	r3, [r4, #8]
 8011390:	3b01      	subs	r3, #1
 8011392:	60a3      	str	r3, [r4, #8]
 8011394:	6823      	ldr	r3, [r4, #0]
 8011396:	1c5a      	adds	r2, r3, #1
 8011398:	6022      	str	r2, [r4, #0]
 801139a:	701e      	strb	r6, [r3, #0]
 801139c:	6963      	ldr	r3, [r4, #20]
 801139e:	3001      	adds	r0, #1
 80113a0:	4283      	cmp	r3, r0
 80113a2:	d004      	beq.n	80113ae <__swbuf_r+0x62>
 80113a4:	89a3      	ldrh	r3, [r4, #12]
 80113a6:	07db      	lsls	r3, r3, #31
 80113a8:	d506      	bpl.n	80113b8 <__swbuf_r+0x6c>
 80113aa:	2e0a      	cmp	r6, #10
 80113ac:	d104      	bne.n	80113b8 <__swbuf_r+0x6c>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	f000 f927 	bl	8011604 <_fflush_r>
 80113b6:	b988      	cbnz	r0, 80113dc <__swbuf_r+0x90>
 80113b8:	4638      	mov	r0, r7
 80113ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113bc:	4b0a      	ldr	r3, [pc, #40]	; (80113e8 <__swbuf_r+0x9c>)
 80113be:	429c      	cmp	r4, r3
 80113c0:	d101      	bne.n	80113c6 <__swbuf_r+0x7a>
 80113c2:	68ac      	ldr	r4, [r5, #8]
 80113c4:	e7cf      	b.n	8011366 <__swbuf_r+0x1a>
 80113c6:	4b09      	ldr	r3, [pc, #36]	; (80113ec <__swbuf_r+0xa0>)
 80113c8:	429c      	cmp	r4, r3
 80113ca:	bf08      	it	eq
 80113cc:	68ec      	ldreq	r4, [r5, #12]
 80113ce:	e7ca      	b.n	8011366 <__swbuf_r+0x1a>
 80113d0:	4621      	mov	r1, r4
 80113d2:	4628      	mov	r0, r5
 80113d4:	f000 f81a 	bl	801140c <__swsetup_r>
 80113d8:	2800      	cmp	r0, #0
 80113da:	d0cb      	beq.n	8011374 <__swbuf_r+0x28>
 80113dc:	f04f 37ff 	mov.w	r7, #4294967295
 80113e0:	e7ea      	b.n	80113b8 <__swbuf_r+0x6c>
 80113e2:	bf00      	nop
 80113e4:	08064dec 	.word	0x08064dec
 80113e8:	08064e0c 	.word	0x08064e0c
 80113ec:	08064dcc 	.word	0x08064dcc

080113f0 <__ascii_wctomb>:
 80113f0:	b149      	cbz	r1, 8011406 <__ascii_wctomb+0x16>
 80113f2:	2aff      	cmp	r2, #255	; 0xff
 80113f4:	bf85      	ittet	hi
 80113f6:	238a      	movhi	r3, #138	; 0x8a
 80113f8:	6003      	strhi	r3, [r0, #0]
 80113fa:	700a      	strbls	r2, [r1, #0]
 80113fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8011400:	bf98      	it	ls
 8011402:	2001      	movls	r0, #1
 8011404:	4770      	bx	lr
 8011406:	4608      	mov	r0, r1
 8011408:	4770      	bx	lr
	...

0801140c <__swsetup_r>:
 801140c:	4b32      	ldr	r3, [pc, #200]	; (80114d8 <__swsetup_r+0xcc>)
 801140e:	b570      	push	{r4, r5, r6, lr}
 8011410:	681d      	ldr	r5, [r3, #0]
 8011412:	4606      	mov	r6, r0
 8011414:	460c      	mov	r4, r1
 8011416:	b125      	cbz	r5, 8011422 <__swsetup_r+0x16>
 8011418:	69ab      	ldr	r3, [r5, #24]
 801141a:	b913      	cbnz	r3, 8011422 <__swsetup_r+0x16>
 801141c:	4628      	mov	r0, r5
 801141e:	f000 f985 	bl	801172c <__sinit>
 8011422:	4b2e      	ldr	r3, [pc, #184]	; (80114dc <__swsetup_r+0xd0>)
 8011424:	429c      	cmp	r4, r3
 8011426:	d10f      	bne.n	8011448 <__swsetup_r+0x3c>
 8011428:	686c      	ldr	r4, [r5, #4]
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011430:	0719      	lsls	r1, r3, #28
 8011432:	d42c      	bmi.n	801148e <__swsetup_r+0x82>
 8011434:	06dd      	lsls	r5, r3, #27
 8011436:	d411      	bmi.n	801145c <__swsetup_r+0x50>
 8011438:	2309      	movs	r3, #9
 801143a:	6033      	str	r3, [r6, #0]
 801143c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011440:	81a3      	strh	r3, [r4, #12]
 8011442:	f04f 30ff 	mov.w	r0, #4294967295
 8011446:	e03e      	b.n	80114c6 <__swsetup_r+0xba>
 8011448:	4b25      	ldr	r3, [pc, #148]	; (80114e0 <__swsetup_r+0xd4>)
 801144a:	429c      	cmp	r4, r3
 801144c:	d101      	bne.n	8011452 <__swsetup_r+0x46>
 801144e:	68ac      	ldr	r4, [r5, #8]
 8011450:	e7eb      	b.n	801142a <__swsetup_r+0x1e>
 8011452:	4b24      	ldr	r3, [pc, #144]	; (80114e4 <__swsetup_r+0xd8>)
 8011454:	429c      	cmp	r4, r3
 8011456:	bf08      	it	eq
 8011458:	68ec      	ldreq	r4, [r5, #12]
 801145a:	e7e6      	b.n	801142a <__swsetup_r+0x1e>
 801145c:	0758      	lsls	r0, r3, #29
 801145e:	d512      	bpl.n	8011486 <__swsetup_r+0x7a>
 8011460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011462:	b141      	cbz	r1, 8011476 <__swsetup_r+0x6a>
 8011464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011468:	4299      	cmp	r1, r3
 801146a:	d002      	beq.n	8011472 <__swsetup_r+0x66>
 801146c:	4630      	mov	r0, r6
 801146e:	f7fd fc7d 	bl	800ed6c <_free_r>
 8011472:	2300      	movs	r3, #0
 8011474:	6363      	str	r3, [r4, #52]	; 0x34
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801147c:	81a3      	strh	r3, [r4, #12]
 801147e:	2300      	movs	r3, #0
 8011480:	6063      	str	r3, [r4, #4]
 8011482:	6923      	ldr	r3, [r4, #16]
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	89a3      	ldrh	r3, [r4, #12]
 8011488:	f043 0308 	orr.w	r3, r3, #8
 801148c:	81a3      	strh	r3, [r4, #12]
 801148e:	6923      	ldr	r3, [r4, #16]
 8011490:	b94b      	cbnz	r3, 80114a6 <__swsetup_r+0x9a>
 8011492:	89a3      	ldrh	r3, [r4, #12]
 8011494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801149c:	d003      	beq.n	80114a6 <__swsetup_r+0x9a>
 801149e:	4621      	mov	r1, r4
 80114a0:	4630      	mov	r0, r6
 80114a2:	f000 fa05 	bl	80118b0 <__smakebuf_r>
 80114a6:	89a0      	ldrh	r0, [r4, #12]
 80114a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114ac:	f010 0301 	ands.w	r3, r0, #1
 80114b0:	d00a      	beq.n	80114c8 <__swsetup_r+0xbc>
 80114b2:	2300      	movs	r3, #0
 80114b4:	60a3      	str	r3, [r4, #8]
 80114b6:	6963      	ldr	r3, [r4, #20]
 80114b8:	425b      	negs	r3, r3
 80114ba:	61a3      	str	r3, [r4, #24]
 80114bc:	6923      	ldr	r3, [r4, #16]
 80114be:	b943      	cbnz	r3, 80114d2 <__swsetup_r+0xc6>
 80114c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80114c4:	d1ba      	bne.n	801143c <__swsetup_r+0x30>
 80114c6:	bd70      	pop	{r4, r5, r6, pc}
 80114c8:	0781      	lsls	r1, r0, #30
 80114ca:	bf58      	it	pl
 80114cc:	6963      	ldrpl	r3, [r4, #20]
 80114ce:	60a3      	str	r3, [r4, #8]
 80114d0:	e7f4      	b.n	80114bc <__swsetup_r+0xb0>
 80114d2:	2000      	movs	r0, #0
 80114d4:	e7f7      	b.n	80114c6 <__swsetup_r+0xba>
 80114d6:	bf00      	nop
 80114d8:	20000eac 	.word	0x20000eac
 80114dc:	08064dec 	.word	0x08064dec
 80114e0:	08064e0c 	.word	0x08064e0c
 80114e4:	08064dcc 	.word	0x08064dcc

080114e8 <abort>:
 80114e8:	b508      	push	{r3, lr}
 80114ea:	2006      	movs	r0, #6
 80114ec:	f000 fa48 	bl	8011980 <raise>
 80114f0:	2001      	movs	r0, #1
 80114f2:	f001 fa93 	bl	8012a1c <_exit>
	...

080114f8 <__sflush_r>:
 80114f8:	898a      	ldrh	r2, [r1, #12]
 80114fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114fe:	4605      	mov	r5, r0
 8011500:	0710      	lsls	r0, r2, #28
 8011502:	460c      	mov	r4, r1
 8011504:	d458      	bmi.n	80115b8 <__sflush_r+0xc0>
 8011506:	684b      	ldr	r3, [r1, #4]
 8011508:	2b00      	cmp	r3, #0
 801150a:	dc05      	bgt.n	8011518 <__sflush_r+0x20>
 801150c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801150e:	2b00      	cmp	r3, #0
 8011510:	dc02      	bgt.n	8011518 <__sflush_r+0x20>
 8011512:	2000      	movs	r0, #0
 8011514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801151a:	2e00      	cmp	r6, #0
 801151c:	d0f9      	beq.n	8011512 <__sflush_r+0x1a>
 801151e:	2300      	movs	r3, #0
 8011520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011524:	682f      	ldr	r7, [r5, #0]
 8011526:	602b      	str	r3, [r5, #0]
 8011528:	d032      	beq.n	8011590 <__sflush_r+0x98>
 801152a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801152c:	89a3      	ldrh	r3, [r4, #12]
 801152e:	075a      	lsls	r2, r3, #29
 8011530:	d505      	bpl.n	801153e <__sflush_r+0x46>
 8011532:	6863      	ldr	r3, [r4, #4]
 8011534:	1ac0      	subs	r0, r0, r3
 8011536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011538:	b10b      	cbz	r3, 801153e <__sflush_r+0x46>
 801153a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801153c:	1ac0      	subs	r0, r0, r3
 801153e:	2300      	movs	r3, #0
 8011540:	4602      	mov	r2, r0
 8011542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011544:	6a21      	ldr	r1, [r4, #32]
 8011546:	4628      	mov	r0, r5
 8011548:	47b0      	blx	r6
 801154a:	1c43      	adds	r3, r0, #1
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	d106      	bne.n	801155e <__sflush_r+0x66>
 8011550:	6829      	ldr	r1, [r5, #0]
 8011552:	291d      	cmp	r1, #29
 8011554:	d82c      	bhi.n	80115b0 <__sflush_r+0xb8>
 8011556:	4a2a      	ldr	r2, [pc, #168]	; (8011600 <__sflush_r+0x108>)
 8011558:	40ca      	lsrs	r2, r1
 801155a:	07d6      	lsls	r6, r2, #31
 801155c:	d528      	bpl.n	80115b0 <__sflush_r+0xb8>
 801155e:	2200      	movs	r2, #0
 8011560:	6062      	str	r2, [r4, #4]
 8011562:	04d9      	lsls	r1, r3, #19
 8011564:	6922      	ldr	r2, [r4, #16]
 8011566:	6022      	str	r2, [r4, #0]
 8011568:	d504      	bpl.n	8011574 <__sflush_r+0x7c>
 801156a:	1c42      	adds	r2, r0, #1
 801156c:	d101      	bne.n	8011572 <__sflush_r+0x7a>
 801156e:	682b      	ldr	r3, [r5, #0]
 8011570:	b903      	cbnz	r3, 8011574 <__sflush_r+0x7c>
 8011572:	6560      	str	r0, [r4, #84]	; 0x54
 8011574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011576:	602f      	str	r7, [r5, #0]
 8011578:	2900      	cmp	r1, #0
 801157a:	d0ca      	beq.n	8011512 <__sflush_r+0x1a>
 801157c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011580:	4299      	cmp	r1, r3
 8011582:	d002      	beq.n	801158a <__sflush_r+0x92>
 8011584:	4628      	mov	r0, r5
 8011586:	f7fd fbf1 	bl	800ed6c <_free_r>
 801158a:	2000      	movs	r0, #0
 801158c:	6360      	str	r0, [r4, #52]	; 0x34
 801158e:	e7c1      	b.n	8011514 <__sflush_r+0x1c>
 8011590:	6a21      	ldr	r1, [r4, #32]
 8011592:	2301      	movs	r3, #1
 8011594:	4628      	mov	r0, r5
 8011596:	47b0      	blx	r6
 8011598:	1c41      	adds	r1, r0, #1
 801159a:	d1c7      	bne.n	801152c <__sflush_r+0x34>
 801159c:	682b      	ldr	r3, [r5, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d0c4      	beq.n	801152c <__sflush_r+0x34>
 80115a2:	2b1d      	cmp	r3, #29
 80115a4:	d001      	beq.n	80115aa <__sflush_r+0xb2>
 80115a6:	2b16      	cmp	r3, #22
 80115a8:	d101      	bne.n	80115ae <__sflush_r+0xb6>
 80115aa:	602f      	str	r7, [r5, #0]
 80115ac:	e7b1      	b.n	8011512 <__sflush_r+0x1a>
 80115ae:	89a3      	ldrh	r3, [r4, #12]
 80115b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115b4:	81a3      	strh	r3, [r4, #12]
 80115b6:	e7ad      	b.n	8011514 <__sflush_r+0x1c>
 80115b8:	690f      	ldr	r7, [r1, #16]
 80115ba:	2f00      	cmp	r7, #0
 80115bc:	d0a9      	beq.n	8011512 <__sflush_r+0x1a>
 80115be:	0793      	lsls	r3, r2, #30
 80115c0:	680e      	ldr	r6, [r1, #0]
 80115c2:	bf08      	it	eq
 80115c4:	694b      	ldreq	r3, [r1, #20]
 80115c6:	600f      	str	r7, [r1, #0]
 80115c8:	bf18      	it	ne
 80115ca:	2300      	movne	r3, #0
 80115cc:	eba6 0807 	sub.w	r8, r6, r7
 80115d0:	608b      	str	r3, [r1, #8]
 80115d2:	f1b8 0f00 	cmp.w	r8, #0
 80115d6:	dd9c      	ble.n	8011512 <__sflush_r+0x1a>
 80115d8:	6a21      	ldr	r1, [r4, #32]
 80115da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80115dc:	4643      	mov	r3, r8
 80115de:	463a      	mov	r2, r7
 80115e0:	4628      	mov	r0, r5
 80115e2:	47b0      	blx	r6
 80115e4:	2800      	cmp	r0, #0
 80115e6:	dc06      	bgt.n	80115f6 <__sflush_r+0xfe>
 80115e8:	89a3      	ldrh	r3, [r4, #12]
 80115ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ee:	81a3      	strh	r3, [r4, #12]
 80115f0:	f04f 30ff 	mov.w	r0, #4294967295
 80115f4:	e78e      	b.n	8011514 <__sflush_r+0x1c>
 80115f6:	4407      	add	r7, r0
 80115f8:	eba8 0800 	sub.w	r8, r8, r0
 80115fc:	e7e9      	b.n	80115d2 <__sflush_r+0xda>
 80115fe:	bf00      	nop
 8011600:	20400001 	.word	0x20400001

08011604 <_fflush_r>:
 8011604:	b538      	push	{r3, r4, r5, lr}
 8011606:	690b      	ldr	r3, [r1, #16]
 8011608:	4605      	mov	r5, r0
 801160a:	460c      	mov	r4, r1
 801160c:	b913      	cbnz	r3, 8011614 <_fflush_r+0x10>
 801160e:	2500      	movs	r5, #0
 8011610:	4628      	mov	r0, r5
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	b118      	cbz	r0, 801161e <_fflush_r+0x1a>
 8011616:	6983      	ldr	r3, [r0, #24]
 8011618:	b90b      	cbnz	r3, 801161e <_fflush_r+0x1a>
 801161a:	f000 f887 	bl	801172c <__sinit>
 801161e:	4b14      	ldr	r3, [pc, #80]	; (8011670 <_fflush_r+0x6c>)
 8011620:	429c      	cmp	r4, r3
 8011622:	d11b      	bne.n	801165c <_fflush_r+0x58>
 8011624:	686c      	ldr	r4, [r5, #4]
 8011626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d0ef      	beq.n	801160e <_fflush_r+0xa>
 801162e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011630:	07d0      	lsls	r0, r2, #31
 8011632:	d404      	bmi.n	801163e <_fflush_r+0x3a>
 8011634:	0599      	lsls	r1, r3, #22
 8011636:	d402      	bmi.n	801163e <_fflush_r+0x3a>
 8011638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801163a:	f7ff fcf8 	bl	801102e <__retarget_lock_acquire_recursive>
 801163e:	4628      	mov	r0, r5
 8011640:	4621      	mov	r1, r4
 8011642:	f7ff ff59 	bl	80114f8 <__sflush_r>
 8011646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011648:	07da      	lsls	r2, r3, #31
 801164a:	4605      	mov	r5, r0
 801164c:	d4e0      	bmi.n	8011610 <_fflush_r+0xc>
 801164e:	89a3      	ldrh	r3, [r4, #12]
 8011650:	059b      	lsls	r3, r3, #22
 8011652:	d4dd      	bmi.n	8011610 <_fflush_r+0xc>
 8011654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011656:	f7ff fceb 	bl	8011030 <__retarget_lock_release_recursive>
 801165a:	e7d9      	b.n	8011610 <_fflush_r+0xc>
 801165c:	4b05      	ldr	r3, [pc, #20]	; (8011674 <_fflush_r+0x70>)
 801165e:	429c      	cmp	r4, r3
 8011660:	d101      	bne.n	8011666 <_fflush_r+0x62>
 8011662:	68ac      	ldr	r4, [r5, #8]
 8011664:	e7df      	b.n	8011626 <_fflush_r+0x22>
 8011666:	4b04      	ldr	r3, [pc, #16]	; (8011678 <_fflush_r+0x74>)
 8011668:	429c      	cmp	r4, r3
 801166a:	bf08      	it	eq
 801166c:	68ec      	ldreq	r4, [r5, #12]
 801166e:	e7da      	b.n	8011626 <_fflush_r+0x22>
 8011670:	08064dec 	.word	0x08064dec
 8011674:	08064e0c 	.word	0x08064e0c
 8011678:	08064dcc 	.word	0x08064dcc

0801167c <std>:
 801167c:	2300      	movs	r3, #0
 801167e:	b510      	push	{r4, lr}
 8011680:	4604      	mov	r4, r0
 8011682:	e9c0 3300 	strd	r3, r3, [r0]
 8011686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801168a:	6083      	str	r3, [r0, #8]
 801168c:	8181      	strh	r1, [r0, #12]
 801168e:	6643      	str	r3, [r0, #100]	; 0x64
 8011690:	81c2      	strh	r2, [r0, #14]
 8011692:	6183      	str	r3, [r0, #24]
 8011694:	4619      	mov	r1, r3
 8011696:	2208      	movs	r2, #8
 8011698:	305c      	adds	r0, #92	; 0x5c
 801169a:	f7fd fb5f 	bl	800ed5c <memset>
 801169e:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <std+0x38>)
 80116a0:	6263      	str	r3, [r4, #36]	; 0x24
 80116a2:	4b05      	ldr	r3, [pc, #20]	; (80116b8 <std+0x3c>)
 80116a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80116a6:	4b05      	ldr	r3, [pc, #20]	; (80116bc <std+0x40>)
 80116a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116aa:	4b05      	ldr	r3, [pc, #20]	; (80116c0 <std+0x44>)
 80116ac:	6224      	str	r4, [r4, #32]
 80116ae:	6323      	str	r3, [r4, #48]	; 0x30
 80116b0:	bd10      	pop	{r4, pc}
 80116b2:	bf00      	nop
 80116b4:	080119b9 	.word	0x080119b9
 80116b8:	080119db 	.word	0x080119db
 80116bc:	08011a13 	.word	0x08011a13
 80116c0:	08011a37 	.word	0x08011a37

080116c4 <_cleanup_r>:
 80116c4:	4901      	ldr	r1, [pc, #4]	; (80116cc <_cleanup_r+0x8>)
 80116c6:	f000 b8af 	b.w	8011828 <_fwalk_reent>
 80116ca:	bf00      	nop
 80116cc:	08011605 	.word	0x08011605

080116d0 <__sfmoreglue>:
 80116d0:	b570      	push	{r4, r5, r6, lr}
 80116d2:	2268      	movs	r2, #104	; 0x68
 80116d4:	1e4d      	subs	r5, r1, #1
 80116d6:	4355      	muls	r5, r2
 80116d8:	460e      	mov	r6, r1
 80116da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116de:	f7fd fbb1 	bl	800ee44 <_malloc_r>
 80116e2:	4604      	mov	r4, r0
 80116e4:	b140      	cbz	r0, 80116f8 <__sfmoreglue+0x28>
 80116e6:	2100      	movs	r1, #0
 80116e8:	e9c0 1600 	strd	r1, r6, [r0]
 80116ec:	300c      	adds	r0, #12
 80116ee:	60a0      	str	r0, [r4, #8]
 80116f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116f4:	f7fd fb32 	bl	800ed5c <memset>
 80116f8:	4620      	mov	r0, r4
 80116fa:	bd70      	pop	{r4, r5, r6, pc}

080116fc <__sfp_lock_acquire>:
 80116fc:	4801      	ldr	r0, [pc, #4]	; (8011704 <__sfp_lock_acquire+0x8>)
 80116fe:	f7ff bc96 	b.w	801102e <__retarget_lock_acquire_recursive>
 8011702:	bf00      	nop
 8011704:	2000b6b9 	.word	0x2000b6b9

08011708 <__sfp_lock_release>:
 8011708:	4801      	ldr	r0, [pc, #4]	; (8011710 <__sfp_lock_release+0x8>)
 801170a:	f7ff bc91 	b.w	8011030 <__retarget_lock_release_recursive>
 801170e:	bf00      	nop
 8011710:	2000b6b9 	.word	0x2000b6b9

08011714 <__sinit_lock_acquire>:
 8011714:	4801      	ldr	r0, [pc, #4]	; (801171c <__sinit_lock_acquire+0x8>)
 8011716:	f7ff bc8a 	b.w	801102e <__retarget_lock_acquire_recursive>
 801171a:	bf00      	nop
 801171c:	2000b6ba 	.word	0x2000b6ba

08011720 <__sinit_lock_release>:
 8011720:	4801      	ldr	r0, [pc, #4]	; (8011728 <__sinit_lock_release+0x8>)
 8011722:	f7ff bc85 	b.w	8011030 <__retarget_lock_release_recursive>
 8011726:	bf00      	nop
 8011728:	2000b6ba 	.word	0x2000b6ba

0801172c <__sinit>:
 801172c:	b510      	push	{r4, lr}
 801172e:	4604      	mov	r4, r0
 8011730:	f7ff fff0 	bl	8011714 <__sinit_lock_acquire>
 8011734:	69a3      	ldr	r3, [r4, #24]
 8011736:	b11b      	cbz	r3, 8011740 <__sinit+0x14>
 8011738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801173c:	f7ff bff0 	b.w	8011720 <__sinit_lock_release>
 8011740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011744:	6523      	str	r3, [r4, #80]	; 0x50
 8011746:	4b13      	ldr	r3, [pc, #76]	; (8011794 <__sinit+0x68>)
 8011748:	4a13      	ldr	r2, [pc, #76]	; (8011798 <__sinit+0x6c>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	62a2      	str	r2, [r4, #40]	; 0x28
 801174e:	42a3      	cmp	r3, r4
 8011750:	bf04      	itt	eq
 8011752:	2301      	moveq	r3, #1
 8011754:	61a3      	streq	r3, [r4, #24]
 8011756:	4620      	mov	r0, r4
 8011758:	f000 f820 	bl	801179c <__sfp>
 801175c:	6060      	str	r0, [r4, #4]
 801175e:	4620      	mov	r0, r4
 8011760:	f000 f81c 	bl	801179c <__sfp>
 8011764:	60a0      	str	r0, [r4, #8]
 8011766:	4620      	mov	r0, r4
 8011768:	f000 f818 	bl	801179c <__sfp>
 801176c:	2200      	movs	r2, #0
 801176e:	60e0      	str	r0, [r4, #12]
 8011770:	2104      	movs	r1, #4
 8011772:	6860      	ldr	r0, [r4, #4]
 8011774:	f7ff ff82 	bl	801167c <std>
 8011778:	68a0      	ldr	r0, [r4, #8]
 801177a:	2201      	movs	r2, #1
 801177c:	2109      	movs	r1, #9
 801177e:	f7ff ff7d 	bl	801167c <std>
 8011782:	68e0      	ldr	r0, [r4, #12]
 8011784:	2202      	movs	r2, #2
 8011786:	2112      	movs	r1, #18
 8011788:	f7ff ff78 	bl	801167c <std>
 801178c:	2301      	movs	r3, #1
 801178e:	61a3      	str	r3, [r4, #24]
 8011790:	e7d2      	b.n	8011738 <__sinit+0xc>
 8011792:	bf00      	nop
 8011794:	08064a50 	.word	0x08064a50
 8011798:	080116c5 	.word	0x080116c5

0801179c <__sfp>:
 801179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801179e:	4607      	mov	r7, r0
 80117a0:	f7ff ffac 	bl	80116fc <__sfp_lock_acquire>
 80117a4:	4b1e      	ldr	r3, [pc, #120]	; (8011820 <__sfp+0x84>)
 80117a6:	681e      	ldr	r6, [r3, #0]
 80117a8:	69b3      	ldr	r3, [r6, #24]
 80117aa:	b913      	cbnz	r3, 80117b2 <__sfp+0x16>
 80117ac:	4630      	mov	r0, r6
 80117ae:	f7ff ffbd 	bl	801172c <__sinit>
 80117b2:	3648      	adds	r6, #72	; 0x48
 80117b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117b8:	3b01      	subs	r3, #1
 80117ba:	d503      	bpl.n	80117c4 <__sfp+0x28>
 80117bc:	6833      	ldr	r3, [r6, #0]
 80117be:	b30b      	cbz	r3, 8011804 <__sfp+0x68>
 80117c0:	6836      	ldr	r6, [r6, #0]
 80117c2:	e7f7      	b.n	80117b4 <__sfp+0x18>
 80117c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80117c8:	b9d5      	cbnz	r5, 8011800 <__sfp+0x64>
 80117ca:	4b16      	ldr	r3, [pc, #88]	; (8011824 <__sfp+0x88>)
 80117cc:	60e3      	str	r3, [r4, #12]
 80117ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117d2:	6665      	str	r5, [r4, #100]	; 0x64
 80117d4:	f7ff fc2a 	bl	801102c <__retarget_lock_init_recursive>
 80117d8:	f7ff ff96 	bl	8011708 <__sfp_lock_release>
 80117dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117e4:	6025      	str	r5, [r4, #0]
 80117e6:	61a5      	str	r5, [r4, #24]
 80117e8:	2208      	movs	r2, #8
 80117ea:	4629      	mov	r1, r5
 80117ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117f0:	f7fd fab4 	bl	800ed5c <memset>
 80117f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117fc:	4620      	mov	r0, r4
 80117fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011800:	3468      	adds	r4, #104	; 0x68
 8011802:	e7d9      	b.n	80117b8 <__sfp+0x1c>
 8011804:	2104      	movs	r1, #4
 8011806:	4638      	mov	r0, r7
 8011808:	f7ff ff62 	bl	80116d0 <__sfmoreglue>
 801180c:	4604      	mov	r4, r0
 801180e:	6030      	str	r0, [r6, #0]
 8011810:	2800      	cmp	r0, #0
 8011812:	d1d5      	bne.n	80117c0 <__sfp+0x24>
 8011814:	f7ff ff78 	bl	8011708 <__sfp_lock_release>
 8011818:	230c      	movs	r3, #12
 801181a:	603b      	str	r3, [r7, #0]
 801181c:	e7ee      	b.n	80117fc <__sfp+0x60>
 801181e:	bf00      	nop
 8011820:	08064a50 	.word	0x08064a50
 8011824:	ffff0001 	.word	0xffff0001

08011828 <_fwalk_reent>:
 8011828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801182c:	4606      	mov	r6, r0
 801182e:	4688      	mov	r8, r1
 8011830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011834:	2700      	movs	r7, #0
 8011836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801183a:	f1b9 0901 	subs.w	r9, r9, #1
 801183e:	d505      	bpl.n	801184c <_fwalk_reent+0x24>
 8011840:	6824      	ldr	r4, [r4, #0]
 8011842:	2c00      	cmp	r4, #0
 8011844:	d1f7      	bne.n	8011836 <_fwalk_reent+0xe>
 8011846:	4638      	mov	r0, r7
 8011848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801184c:	89ab      	ldrh	r3, [r5, #12]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d907      	bls.n	8011862 <_fwalk_reent+0x3a>
 8011852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011856:	3301      	adds	r3, #1
 8011858:	d003      	beq.n	8011862 <_fwalk_reent+0x3a>
 801185a:	4629      	mov	r1, r5
 801185c:	4630      	mov	r0, r6
 801185e:	47c0      	blx	r8
 8011860:	4307      	orrs	r7, r0
 8011862:	3568      	adds	r5, #104	; 0x68
 8011864:	e7e9      	b.n	801183a <_fwalk_reent+0x12>

08011866 <__swhatbuf_r>:
 8011866:	b570      	push	{r4, r5, r6, lr}
 8011868:	460e      	mov	r6, r1
 801186a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801186e:	2900      	cmp	r1, #0
 8011870:	b096      	sub	sp, #88	; 0x58
 8011872:	4614      	mov	r4, r2
 8011874:	461d      	mov	r5, r3
 8011876:	da08      	bge.n	801188a <__swhatbuf_r+0x24>
 8011878:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	602a      	str	r2, [r5, #0]
 8011880:	061a      	lsls	r2, r3, #24
 8011882:	d410      	bmi.n	80118a6 <__swhatbuf_r+0x40>
 8011884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011888:	e00e      	b.n	80118a8 <__swhatbuf_r+0x42>
 801188a:	466a      	mov	r2, sp
 801188c:	f000 f8fa 	bl	8011a84 <_fstat_r>
 8011890:	2800      	cmp	r0, #0
 8011892:	dbf1      	blt.n	8011878 <__swhatbuf_r+0x12>
 8011894:	9a01      	ldr	r2, [sp, #4]
 8011896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801189a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801189e:	425a      	negs	r2, r3
 80118a0:	415a      	adcs	r2, r3
 80118a2:	602a      	str	r2, [r5, #0]
 80118a4:	e7ee      	b.n	8011884 <__swhatbuf_r+0x1e>
 80118a6:	2340      	movs	r3, #64	; 0x40
 80118a8:	2000      	movs	r0, #0
 80118aa:	6023      	str	r3, [r4, #0]
 80118ac:	b016      	add	sp, #88	; 0x58
 80118ae:	bd70      	pop	{r4, r5, r6, pc}

080118b0 <__smakebuf_r>:
 80118b0:	898b      	ldrh	r3, [r1, #12]
 80118b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118b4:	079d      	lsls	r5, r3, #30
 80118b6:	4606      	mov	r6, r0
 80118b8:	460c      	mov	r4, r1
 80118ba:	d507      	bpl.n	80118cc <__smakebuf_r+0x1c>
 80118bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80118c0:	6023      	str	r3, [r4, #0]
 80118c2:	6123      	str	r3, [r4, #16]
 80118c4:	2301      	movs	r3, #1
 80118c6:	6163      	str	r3, [r4, #20]
 80118c8:	b002      	add	sp, #8
 80118ca:	bd70      	pop	{r4, r5, r6, pc}
 80118cc:	ab01      	add	r3, sp, #4
 80118ce:	466a      	mov	r2, sp
 80118d0:	f7ff ffc9 	bl	8011866 <__swhatbuf_r>
 80118d4:	9900      	ldr	r1, [sp, #0]
 80118d6:	4605      	mov	r5, r0
 80118d8:	4630      	mov	r0, r6
 80118da:	f7fd fab3 	bl	800ee44 <_malloc_r>
 80118de:	b948      	cbnz	r0, 80118f4 <__smakebuf_r+0x44>
 80118e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118e4:	059a      	lsls	r2, r3, #22
 80118e6:	d4ef      	bmi.n	80118c8 <__smakebuf_r+0x18>
 80118e8:	f023 0303 	bic.w	r3, r3, #3
 80118ec:	f043 0302 	orr.w	r3, r3, #2
 80118f0:	81a3      	strh	r3, [r4, #12]
 80118f2:	e7e3      	b.n	80118bc <__smakebuf_r+0xc>
 80118f4:	4b0d      	ldr	r3, [pc, #52]	; (801192c <__smakebuf_r+0x7c>)
 80118f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	6020      	str	r0, [r4, #0]
 80118fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011900:	81a3      	strh	r3, [r4, #12]
 8011902:	9b00      	ldr	r3, [sp, #0]
 8011904:	6163      	str	r3, [r4, #20]
 8011906:	9b01      	ldr	r3, [sp, #4]
 8011908:	6120      	str	r0, [r4, #16]
 801190a:	b15b      	cbz	r3, 8011924 <__smakebuf_r+0x74>
 801190c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011910:	4630      	mov	r0, r6
 8011912:	f000 f8c9 	bl	8011aa8 <_isatty_r>
 8011916:	b128      	cbz	r0, 8011924 <__smakebuf_r+0x74>
 8011918:	89a3      	ldrh	r3, [r4, #12]
 801191a:	f023 0303 	bic.w	r3, r3, #3
 801191e:	f043 0301 	orr.w	r3, r3, #1
 8011922:	81a3      	strh	r3, [r4, #12]
 8011924:	89a0      	ldrh	r0, [r4, #12]
 8011926:	4305      	orrs	r5, r0
 8011928:	81a5      	strh	r5, [r4, #12]
 801192a:	e7cd      	b.n	80118c8 <__smakebuf_r+0x18>
 801192c:	080116c5 	.word	0x080116c5

08011930 <_raise_r>:
 8011930:	291f      	cmp	r1, #31
 8011932:	b538      	push	{r3, r4, r5, lr}
 8011934:	4604      	mov	r4, r0
 8011936:	460d      	mov	r5, r1
 8011938:	d904      	bls.n	8011944 <_raise_r+0x14>
 801193a:	2316      	movs	r3, #22
 801193c:	6003      	str	r3, [r0, #0]
 801193e:	f04f 30ff 	mov.w	r0, #4294967295
 8011942:	bd38      	pop	{r3, r4, r5, pc}
 8011944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011946:	b112      	cbz	r2, 801194e <_raise_r+0x1e>
 8011948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801194c:	b94b      	cbnz	r3, 8011962 <_raise_r+0x32>
 801194e:	4620      	mov	r0, r4
 8011950:	f000 f830 	bl	80119b4 <_getpid_r>
 8011954:	462a      	mov	r2, r5
 8011956:	4601      	mov	r1, r0
 8011958:	4620      	mov	r0, r4
 801195a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801195e:	f000 b817 	b.w	8011990 <_kill_r>
 8011962:	2b01      	cmp	r3, #1
 8011964:	d00a      	beq.n	801197c <_raise_r+0x4c>
 8011966:	1c59      	adds	r1, r3, #1
 8011968:	d103      	bne.n	8011972 <_raise_r+0x42>
 801196a:	2316      	movs	r3, #22
 801196c:	6003      	str	r3, [r0, #0]
 801196e:	2001      	movs	r0, #1
 8011970:	e7e7      	b.n	8011942 <_raise_r+0x12>
 8011972:	2400      	movs	r4, #0
 8011974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011978:	4628      	mov	r0, r5
 801197a:	4798      	blx	r3
 801197c:	2000      	movs	r0, #0
 801197e:	e7e0      	b.n	8011942 <_raise_r+0x12>

08011980 <raise>:
 8011980:	4b02      	ldr	r3, [pc, #8]	; (801198c <raise+0xc>)
 8011982:	4601      	mov	r1, r0
 8011984:	6818      	ldr	r0, [r3, #0]
 8011986:	f7ff bfd3 	b.w	8011930 <_raise_r>
 801198a:	bf00      	nop
 801198c:	20000eac 	.word	0x20000eac

08011990 <_kill_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4d07      	ldr	r5, [pc, #28]	; (80119b0 <_kill_r+0x20>)
 8011994:	2300      	movs	r3, #0
 8011996:	4604      	mov	r4, r0
 8011998:	4608      	mov	r0, r1
 801199a:	4611      	mov	r1, r2
 801199c:	602b      	str	r3, [r5, #0]
 801199e:	f001 f81d 	bl	80129dc <_kill>
 80119a2:	1c43      	adds	r3, r0, #1
 80119a4:	d102      	bne.n	80119ac <_kill_r+0x1c>
 80119a6:	682b      	ldr	r3, [r5, #0]
 80119a8:	b103      	cbz	r3, 80119ac <_kill_r+0x1c>
 80119aa:	6023      	str	r3, [r4, #0]
 80119ac:	bd38      	pop	{r3, r4, r5, pc}
 80119ae:	bf00      	nop
 80119b0:	2000b6b4 	.word	0x2000b6b4

080119b4 <_getpid_r>:
 80119b4:	f001 b802 	b.w	80129bc <_getpid>

080119b8 <__sread>:
 80119b8:	b510      	push	{r4, lr}
 80119ba:	460c      	mov	r4, r1
 80119bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119c0:	f000 f894 	bl	8011aec <_read_r>
 80119c4:	2800      	cmp	r0, #0
 80119c6:	bfab      	itete	ge
 80119c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80119ca:	89a3      	ldrhlt	r3, [r4, #12]
 80119cc:	181b      	addge	r3, r3, r0
 80119ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80119d2:	bfac      	ite	ge
 80119d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80119d6:	81a3      	strhlt	r3, [r4, #12]
 80119d8:	bd10      	pop	{r4, pc}

080119da <__swrite>:
 80119da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119de:	461f      	mov	r7, r3
 80119e0:	898b      	ldrh	r3, [r1, #12]
 80119e2:	05db      	lsls	r3, r3, #23
 80119e4:	4605      	mov	r5, r0
 80119e6:	460c      	mov	r4, r1
 80119e8:	4616      	mov	r6, r2
 80119ea:	d505      	bpl.n	80119f8 <__swrite+0x1e>
 80119ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119f0:	2302      	movs	r3, #2
 80119f2:	2200      	movs	r2, #0
 80119f4:	f000 f868 	bl	8011ac8 <_lseek_r>
 80119f8:	89a3      	ldrh	r3, [r4, #12]
 80119fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a02:	81a3      	strh	r3, [r4, #12]
 8011a04:	4632      	mov	r2, r6
 8011a06:	463b      	mov	r3, r7
 8011a08:	4628      	mov	r0, r5
 8011a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a0e:	f000 b817 	b.w	8011a40 <_write_r>

08011a12 <__sseek>:
 8011a12:	b510      	push	{r4, lr}
 8011a14:	460c      	mov	r4, r1
 8011a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a1a:	f000 f855 	bl	8011ac8 <_lseek_r>
 8011a1e:	1c43      	adds	r3, r0, #1
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	bf15      	itete	ne
 8011a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a2e:	81a3      	strheq	r3, [r4, #12]
 8011a30:	bf18      	it	ne
 8011a32:	81a3      	strhne	r3, [r4, #12]
 8011a34:	bd10      	pop	{r4, pc}

08011a36 <__sclose>:
 8011a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3a:	f000 b813 	b.w	8011a64 <_close_r>
	...

08011a40 <_write_r>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	4d07      	ldr	r5, [pc, #28]	; (8011a60 <_write_r+0x20>)
 8011a44:	4604      	mov	r4, r0
 8011a46:	4608      	mov	r0, r1
 8011a48:	4611      	mov	r1, r2
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	602a      	str	r2, [r5, #0]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	f000 ffdc 	bl	8012a0c <_write>
 8011a54:	1c43      	adds	r3, r0, #1
 8011a56:	d102      	bne.n	8011a5e <_write_r+0x1e>
 8011a58:	682b      	ldr	r3, [r5, #0]
 8011a5a:	b103      	cbz	r3, 8011a5e <_write_r+0x1e>
 8011a5c:	6023      	str	r3, [r4, #0]
 8011a5e:	bd38      	pop	{r3, r4, r5, pc}
 8011a60:	2000b6b4 	.word	0x2000b6b4

08011a64 <_close_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4d06      	ldr	r5, [pc, #24]	; (8011a80 <_close_r+0x1c>)
 8011a68:	2300      	movs	r3, #0
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	602b      	str	r3, [r5, #0]
 8011a70:	f000 ff94 	bl	801299c <_close>
 8011a74:	1c43      	adds	r3, r0, #1
 8011a76:	d102      	bne.n	8011a7e <_close_r+0x1a>
 8011a78:	682b      	ldr	r3, [r5, #0]
 8011a7a:	b103      	cbz	r3, 8011a7e <_close_r+0x1a>
 8011a7c:	6023      	str	r3, [r4, #0]
 8011a7e:	bd38      	pop	{r3, r4, r5, pc}
 8011a80:	2000b6b4 	.word	0x2000b6b4

08011a84 <_fstat_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	4d07      	ldr	r5, [pc, #28]	; (8011aa4 <_fstat_r+0x20>)
 8011a88:	2300      	movs	r3, #0
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	4608      	mov	r0, r1
 8011a8e:	4611      	mov	r1, r2
 8011a90:	602b      	str	r3, [r5, #0]
 8011a92:	f000 ff8b 	bl	80129ac <_fstat>
 8011a96:	1c43      	adds	r3, r0, #1
 8011a98:	d102      	bne.n	8011aa0 <_fstat_r+0x1c>
 8011a9a:	682b      	ldr	r3, [r5, #0]
 8011a9c:	b103      	cbz	r3, 8011aa0 <_fstat_r+0x1c>
 8011a9e:	6023      	str	r3, [r4, #0]
 8011aa0:	bd38      	pop	{r3, r4, r5, pc}
 8011aa2:	bf00      	nop
 8011aa4:	2000b6b4 	.word	0x2000b6b4

08011aa8 <_isatty_r>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4d06      	ldr	r5, [pc, #24]	; (8011ac4 <_isatty_r+0x1c>)
 8011aac:	2300      	movs	r3, #0
 8011aae:	4604      	mov	r4, r0
 8011ab0:	4608      	mov	r0, r1
 8011ab2:	602b      	str	r3, [r5, #0]
 8011ab4:	f000 ff8a 	bl	80129cc <_isatty>
 8011ab8:	1c43      	adds	r3, r0, #1
 8011aba:	d102      	bne.n	8011ac2 <_isatty_r+0x1a>
 8011abc:	682b      	ldr	r3, [r5, #0]
 8011abe:	b103      	cbz	r3, 8011ac2 <_isatty_r+0x1a>
 8011ac0:	6023      	str	r3, [r4, #0]
 8011ac2:	bd38      	pop	{r3, r4, r5, pc}
 8011ac4:	2000b6b4 	.word	0x2000b6b4

08011ac8 <_lseek_r>:
 8011ac8:	b538      	push	{r3, r4, r5, lr}
 8011aca:	4d07      	ldr	r5, [pc, #28]	; (8011ae8 <_lseek_r+0x20>)
 8011acc:	4604      	mov	r4, r0
 8011ace:	4608      	mov	r0, r1
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	602a      	str	r2, [r5, #0]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	f000 ff88 	bl	80129ec <_lseek>
 8011adc:	1c43      	adds	r3, r0, #1
 8011ade:	d102      	bne.n	8011ae6 <_lseek_r+0x1e>
 8011ae0:	682b      	ldr	r3, [r5, #0]
 8011ae2:	b103      	cbz	r3, 8011ae6 <_lseek_r+0x1e>
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	2000b6b4 	.word	0x2000b6b4

08011aec <_read_r>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	4d07      	ldr	r5, [pc, #28]	; (8011b0c <_read_r+0x20>)
 8011af0:	4604      	mov	r4, r0
 8011af2:	4608      	mov	r0, r1
 8011af4:	4611      	mov	r1, r2
 8011af6:	2200      	movs	r2, #0
 8011af8:	602a      	str	r2, [r5, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	f000 ff7e 	bl	80129fc <_read>
 8011b00:	1c43      	adds	r3, r0, #1
 8011b02:	d102      	bne.n	8011b0a <_read_r+0x1e>
 8011b04:	682b      	ldr	r3, [r5, #0]
 8011b06:	b103      	cbz	r3, 8011b0a <_read_r+0x1e>
 8011b08:	6023      	str	r3, [r4, #0]
 8011b0a:	bd38      	pop	{r3, r4, r5, pc}
 8011b0c:	2000b6b4 	.word	0x2000b6b4

08011b10 <pow>:
 8011b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b12:	ed2d 8b02 	vpush	{d8}
 8011b16:	eeb0 8a40 	vmov.f32	s16, s0
 8011b1a:	eef0 8a60 	vmov.f32	s17, s1
 8011b1e:	ec55 4b11 	vmov	r4, r5, d1
 8011b22:	f000 f891 	bl	8011c48 <__ieee754_pow>
 8011b26:	4622      	mov	r2, r4
 8011b28:	462b      	mov	r3, r5
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	ec57 6b10 	vmov	r6, r7, d0
 8011b32:	f7ef f82b 	bl	8000b8c <__aeabi_dcmpun>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	d13b      	bne.n	8011bb2 <pow+0xa2>
 8011b3a:	ec51 0b18 	vmov	r0, r1, d8
 8011b3e:	2200      	movs	r2, #0
 8011b40:	2300      	movs	r3, #0
 8011b42:	f7ee fff1 	bl	8000b28 <__aeabi_dcmpeq>
 8011b46:	b1b8      	cbz	r0, 8011b78 <pow+0x68>
 8011b48:	2200      	movs	r2, #0
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	f7ee ffea 	bl	8000b28 <__aeabi_dcmpeq>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d146      	bne.n	8011be6 <pow+0xd6>
 8011b58:	ec45 4b10 	vmov	d0, r4, r5
 8011b5c:	f000 fe8d 	bl	801287a <finite>
 8011b60:	b338      	cbz	r0, 8011bb2 <pow+0xa2>
 8011b62:	2200      	movs	r2, #0
 8011b64:	2300      	movs	r3, #0
 8011b66:	4620      	mov	r0, r4
 8011b68:	4629      	mov	r1, r5
 8011b6a:	f7ee ffe7 	bl	8000b3c <__aeabi_dcmplt>
 8011b6e:	b300      	cbz	r0, 8011bb2 <pow+0xa2>
 8011b70:	f7fd f8b4 	bl	800ecdc <__errno>
 8011b74:	2322      	movs	r3, #34	; 0x22
 8011b76:	e01b      	b.n	8011bb0 <pow+0xa0>
 8011b78:	ec47 6b10 	vmov	d0, r6, r7
 8011b7c:	f000 fe7d 	bl	801287a <finite>
 8011b80:	b9e0      	cbnz	r0, 8011bbc <pow+0xac>
 8011b82:	eeb0 0a48 	vmov.f32	s0, s16
 8011b86:	eef0 0a68 	vmov.f32	s1, s17
 8011b8a:	f000 fe76 	bl	801287a <finite>
 8011b8e:	b1a8      	cbz	r0, 8011bbc <pow+0xac>
 8011b90:	ec45 4b10 	vmov	d0, r4, r5
 8011b94:	f000 fe71 	bl	801287a <finite>
 8011b98:	b180      	cbz	r0, 8011bbc <pow+0xac>
 8011b9a:	4632      	mov	r2, r6
 8011b9c:	463b      	mov	r3, r7
 8011b9e:	4630      	mov	r0, r6
 8011ba0:	4639      	mov	r1, r7
 8011ba2:	f7ee fff3 	bl	8000b8c <__aeabi_dcmpun>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	d0e2      	beq.n	8011b70 <pow+0x60>
 8011baa:	f7fd f897 	bl	800ecdc <__errno>
 8011bae:	2321      	movs	r3, #33	; 0x21
 8011bb0:	6003      	str	r3, [r0, #0]
 8011bb2:	ecbd 8b02 	vpop	{d8}
 8011bb6:	ec47 6b10 	vmov	d0, r6, r7
 8011bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	4639      	mov	r1, r7
 8011bc4:	f7ee ffb0 	bl	8000b28 <__aeabi_dcmpeq>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d0f2      	beq.n	8011bb2 <pow+0xa2>
 8011bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8011bd0:	eef0 0a68 	vmov.f32	s1, s17
 8011bd4:	f000 fe51 	bl	801287a <finite>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d0ea      	beq.n	8011bb2 <pow+0xa2>
 8011bdc:	ec45 4b10 	vmov	d0, r4, r5
 8011be0:	f000 fe4b 	bl	801287a <finite>
 8011be4:	e7c3      	b.n	8011b6e <pow+0x5e>
 8011be6:	4f01      	ldr	r7, [pc, #4]	; (8011bec <pow+0xdc>)
 8011be8:	2600      	movs	r6, #0
 8011bea:	e7e2      	b.n	8011bb2 <pow+0xa2>
 8011bec:	3ff00000 	.word	0x3ff00000

08011bf0 <sqrt>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	ed2d 8b02 	vpush	{d8}
 8011bf6:	ec55 4b10 	vmov	r4, r5, d0
 8011bfa:	f000 fd53 	bl	80126a4 <__ieee754_sqrt>
 8011bfe:	4622      	mov	r2, r4
 8011c00:	462b      	mov	r3, r5
 8011c02:	4620      	mov	r0, r4
 8011c04:	4629      	mov	r1, r5
 8011c06:	eeb0 8a40 	vmov.f32	s16, s0
 8011c0a:	eef0 8a60 	vmov.f32	s17, s1
 8011c0e:	f7ee ffbd 	bl	8000b8c <__aeabi_dcmpun>
 8011c12:	b990      	cbnz	r0, 8011c3a <sqrt+0x4a>
 8011c14:	2200      	movs	r2, #0
 8011c16:	2300      	movs	r3, #0
 8011c18:	4620      	mov	r0, r4
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	f7ee ff8e 	bl	8000b3c <__aeabi_dcmplt>
 8011c20:	b158      	cbz	r0, 8011c3a <sqrt+0x4a>
 8011c22:	f7fd f85b 	bl	800ecdc <__errno>
 8011c26:	2321      	movs	r3, #33	; 0x21
 8011c28:	6003      	str	r3, [r0, #0]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4610      	mov	r0, r2
 8011c30:	4619      	mov	r1, r3
 8011c32:	f7ee fe3b 	bl	80008ac <__aeabi_ddiv>
 8011c36:	ec41 0b18 	vmov	d8, r0, r1
 8011c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8011c3e:	eef0 0a68 	vmov.f32	s1, s17
 8011c42:	ecbd 8b02 	vpop	{d8}
 8011c46:	bd38      	pop	{r3, r4, r5, pc}

08011c48 <__ieee754_pow>:
 8011c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c4c:	ed2d 8b06 	vpush	{d8-d10}
 8011c50:	b089      	sub	sp, #36	; 0x24
 8011c52:	ed8d 1b00 	vstr	d1, [sp]
 8011c56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011c5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011c5e:	ea58 0102 	orrs.w	r1, r8, r2
 8011c62:	ec57 6b10 	vmov	r6, r7, d0
 8011c66:	d115      	bne.n	8011c94 <__ieee754_pow+0x4c>
 8011c68:	19b3      	adds	r3, r6, r6
 8011c6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011c6e:	4152      	adcs	r2, r2
 8011c70:	4299      	cmp	r1, r3
 8011c72:	4b89      	ldr	r3, [pc, #548]	; (8011e98 <__ieee754_pow+0x250>)
 8011c74:	4193      	sbcs	r3, r2
 8011c76:	f080 84d2 	bcs.w	801261e <__ieee754_pow+0x9d6>
 8011c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c7e:	4630      	mov	r0, r6
 8011c80:	4639      	mov	r1, r7
 8011c82:	f7ee fb33 	bl	80002ec <__adddf3>
 8011c86:	ec41 0b10 	vmov	d0, r0, r1
 8011c8a:	b009      	add	sp, #36	; 0x24
 8011c8c:	ecbd 8b06 	vpop	{d8-d10}
 8011c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c94:	4b81      	ldr	r3, [pc, #516]	; (8011e9c <__ieee754_pow+0x254>)
 8011c96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011c9a:	429c      	cmp	r4, r3
 8011c9c:	ee10 aa10 	vmov	sl, s0
 8011ca0:	463d      	mov	r5, r7
 8011ca2:	dc06      	bgt.n	8011cb2 <__ieee754_pow+0x6a>
 8011ca4:	d101      	bne.n	8011caa <__ieee754_pow+0x62>
 8011ca6:	2e00      	cmp	r6, #0
 8011ca8:	d1e7      	bne.n	8011c7a <__ieee754_pow+0x32>
 8011caa:	4598      	cmp	r8, r3
 8011cac:	dc01      	bgt.n	8011cb2 <__ieee754_pow+0x6a>
 8011cae:	d10f      	bne.n	8011cd0 <__ieee754_pow+0x88>
 8011cb0:	b172      	cbz	r2, 8011cd0 <__ieee754_pow+0x88>
 8011cb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011cb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011cba:	ea55 050a 	orrs.w	r5, r5, sl
 8011cbe:	d1dc      	bne.n	8011c7a <__ieee754_pow+0x32>
 8011cc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011cc4:	18db      	adds	r3, r3, r3
 8011cc6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011cca:	4152      	adcs	r2, r2
 8011ccc:	429d      	cmp	r5, r3
 8011cce:	e7d0      	b.n	8011c72 <__ieee754_pow+0x2a>
 8011cd0:	2d00      	cmp	r5, #0
 8011cd2:	da3b      	bge.n	8011d4c <__ieee754_pow+0x104>
 8011cd4:	4b72      	ldr	r3, [pc, #456]	; (8011ea0 <__ieee754_pow+0x258>)
 8011cd6:	4598      	cmp	r8, r3
 8011cd8:	dc51      	bgt.n	8011d7e <__ieee754_pow+0x136>
 8011cda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011cde:	4598      	cmp	r8, r3
 8011ce0:	f340 84ac 	ble.w	801263c <__ieee754_pow+0x9f4>
 8011ce4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011ce8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011cec:	2b14      	cmp	r3, #20
 8011cee:	dd0f      	ble.n	8011d10 <__ieee754_pow+0xc8>
 8011cf0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011cf4:	fa22 f103 	lsr.w	r1, r2, r3
 8011cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	f040 849d 	bne.w	801263c <__ieee754_pow+0x9f4>
 8011d02:	f001 0101 	and.w	r1, r1, #1
 8011d06:	f1c1 0302 	rsb	r3, r1, #2
 8011d0a:	9304      	str	r3, [sp, #16]
 8011d0c:	b182      	cbz	r2, 8011d30 <__ieee754_pow+0xe8>
 8011d0e:	e05f      	b.n	8011dd0 <__ieee754_pow+0x188>
 8011d10:	2a00      	cmp	r2, #0
 8011d12:	d15b      	bne.n	8011dcc <__ieee754_pow+0x184>
 8011d14:	f1c3 0314 	rsb	r3, r3, #20
 8011d18:	fa48 f103 	asr.w	r1, r8, r3
 8011d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8011d20:	4543      	cmp	r3, r8
 8011d22:	f040 8488 	bne.w	8012636 <__ieee754_pow+0x9ee>
 8011d26:	f001 0101 	and.w	r1, r1, #1
 8011d2a:	f1c1 0302 	rsb	r3, r1, #2
 8011d2e:	9304      	str	r3, [sp, #16]
 8011d30:	4b5c      	ldr	r3, [pc, #368]	; (8011ea4 <__ieee754_pow+0x25c>)
 8011d32:	4598      	cmp	r8, r3
 8011d34:	d132      	bne.n	8011d9c <__ieee754_pow+0x154>
 8011d36:	f1b9 0f00 	cmp.w	r9, #0
 8011d3a:	f280 8478 	bge.w	801262e <__ieee754_pow+0x9e6>
 8011d3e:	4959      	ldr	r1, [pc, #356]	; (8011ea4 <__ieee754_pow+0x25c>)
 8011d40:	4632      	mov	r2, r6
 8011d42:	463b      	mov	r3, r7
 8011d44:	2000      	movs	r0, #0
 8011d46:	f7ee fdb1 	bl	80008ac <__aeabi_ddiv>
 8011d4a:	e79c      	b.n	8011c86 <__ieee754_pow+0x3e>
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	9304      	str	r3, [sp, #16]
 8011d50:	2a00      	cmp	r2, #0
 8011d52:	d13d      	bne.n	8011dd0 <__ieee754_pow+0x188>
 8011d54:	4b51      	ldr	r3, [pc, #324]	; (8011e9c <__ieee754_pow+0x254>)
 8011d56:	4598      	cmp	r8, r3
 8011d58:	d1ea      	bne.n	8011d30 <__ieee754_pow+0xe8>
 8011d5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011d5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011d62:	ea53 030a 	orrs.w	r3, r3, sl
 8011d66:	f000 845a 	beq.w	801261e <__ieee754_pow+0x9d6>
 8011d6a:	4b4f      	ldr	r3, [pc, #316]	; (8011ea8 <__ieee754_pow+0x260>)
 8011d6c:	429c      	cmp	r4, r3
 8011d6e:	dd08      	ble.n	8011d82 <__ieee754_pow+0x13a>
 8011d70:	f1b9 0f00 	cmp.w	r9, #0
 8011d74:	f2c0 8457 	blt.w	8012626 <__ieee754_pow+0x9de>
 8011d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d7c:	e783      	b.n	8011c86 <__ieee754_pow+0x3e>
 8011d7e:	2302      	movs	r3, #2
 8011d80:	e7e5      	b.n	8011d4e <__ieee754_pow+0x106>
 8011d82:	f1b9 0f00 	cmp.w	r9, #0
 8011d86:	f04f 0000 	mov.w	r0, #0
 8011d8a:	f04f 0100 	mov.w	r1, #0
 8011d8e:	f6bf af7a 	bge.w	8011c86 <__ieee754_pow+0x3e>
 8011d92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011d96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011d9a:	e774      	b.n	8011c86 <__ieee754_pow+0x3e>
 8011d9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011da0:	d106      	bne.n	8011db0 <__ieee754_pow+0x168>
 8011da2:	4632      	mov	r2, r6
 8011da4:	463b      	mov	r3, r7
 8011da6:	4630      	mov	r0, r6
 8011da8:	4639      	mov	r1, r7
 8011daa:	f7ee fc55 	bl	8000658 <__aeabi_dmul>
 8011dae:	e76a      	b.n	8011c86 <__ieee754_pow+0x3e>
 8011db0:	4b3e      	ldr	r3, [pc, #248]	; (8011eac <__ieee754_pow+0x264>)
 8011db2:	4599      	cmp	r9, r3
 8011db4:	d10c      	bne.n	8011dd0 <__ieee754_pow+0x188>
 8011db6:	2d00      	cmp	r5, #0
 8011db8:	db0a      	blt.n	8011dd0 <__ieee754_pow+0x188>
 8011dba:	ec47 6b10 	vmov	d0, r6, r7
 8011dbe:	b009      	add	sp, #36	; 0x24
 8011dc0:	ecbd 8b06 	vpop	{d8-d10}
 8011dc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc8:	f000 bc6c 	b.w	80126a4 <__ieee754_sqrt>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	9304      	str	r3, [sp, #16]
 8011dd0:	ec47 6b10 	vmov	d0, r6, r7
 8011dd4:	f000 fd48 	bl	8012868 <fabs>
 8011dd8:	ec51 0b10 	vmov	r0, r1, d0
 8011ddc:	f1ba 0f00 	cmp.w	sl, #0
 8011de0:	d129      	bne.n	8011e36 <__ieee754_pow+0x1ee>
 8011de2:	b124      	cbz	r4, 8011dee <__ieee754_pow+0x1a6>
 8011de4:	4b2f      	ldr	r3, [pc, #188]	; (8011ea4 <__ieee754_pow+0x25c>)
 8011de6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d123      	bne.n	8011e36 <__ieee754_pow+0x1ee>
 8011dee:	f1b9 0f00 	cmp.w	r9, #0
 8011df2:	da05      	bge.n	8011e00 <__ieee754_pow+0x1b8>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	2000      	movs	r0, #0
 8011dfa:	492a      	ldr	r1, [pc, #168]	; (8011ea4 <__ieee754_pow+0x25c>)
 8011dfc:	f7ee fd56 	bl	80008ac <__aeabi_ddiv>
 8011e00:	2d00      	cmp	r5, #0
 8011e02:	f6bf af40 	bge.w	8011c86 <__ieee754_pow+0x3e>
 8011e06:	9b04      	ldr	r3, [sp, #16]
 8011e08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011e0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e10:	4323      	orrs	r3, r4
 8011e12:	d108      	bne.n	8011e26 <__ieee754_pow+0x1de>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	4610      	mov	r0, r2
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	f7ee fa64 	bl	80002e8 <__aeabi_dsub>
 8011e20:	4602      	mov	r2, r0
 8011e22:	460b      	mov	r3, r1
 8011e24:	e78f      	b.n	8011d46 <__ieee754_pow+0xfe>
 8011e26:	9b04      	ldr	r3, [sp, #16]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	f47f af2c 	bne.w	8011c86 <__ieee754_pow+0x3e>
 8011e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e32:	4619      	mov	r1, r3
 8011e34:	e727      	b.n	8011c86 <__ieee754_pow+0x3e>
 8011e36:	0feb      	lsrs	r3, r5, #31
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	9306      	str	r3, [sp, #24]
 8011e3c:	9a06      	ldr	r2, [sp, #24]
 8011e3e:	9b04      	ldr	r3, [sp, #16]
 8011e40:	4313      	orrs	r3, r2
 8011e42:	d102      	bne.n	8011e4a <__ieee754_pow+0x202>
 8011e44:	4632      	mov	r2, r6
 8011e46:	463b      	mov	r3, r7
 8011e48:	e7e6      	b.n	8011e18 <__ieee754_pow+0x1d0>
 8011e4a:	4b19      	ldr	r3, [pc, #100]	; (8011eb0 <__ieee754_pow+0x268>)
 8011e4c:	4598      	cmp	r8, r3
 8011e4e:	f340 80fb 	ble.w	8012048 <__ieee754_pow+0x400>
 8011e52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011e56:	4598      	cmp	r8, r3
 8011e58:	4b13      	ldr	r3, [pc, #76]	; (8011ea8 <__ieee754_pow+0x260>)
 8011e5a:	dd0c      	ble.n	8011e76 <__ieee754_pow+0x22e>
 8011e5c:	429c      	cmp	r4, r3
 8011e5e:	dc0f      	bgt.n	8011e80 <__ieee754_pow+0x238>
 8011e60:	f1b9 0f00 	cmp.w	r9, #0
 8011e64:	da0f      	bge.n	8011e86 <__ieee754_pow+0x23e>
 8011e66:	2000      	movs	r0, #0
 8011e68:	b009      	add	sp, #36	; 0x24
 8011e6a:	ecbd 8b06 	vpop	{d8-d10}
 8011e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e72:	f000 bcf0 	b.w	8012856 <__math_oflow>
 8011e76:	429c      	cmp	r4, r3
 8011e78:	dbf2      	blt.n	8011e60 <__ieee754_pow+0x218>
 8011e7a:	4b0a      	ldr	r3, [pc, #40]	; (8011ea4 <__ieee754_pow+0x25c>)
 8011e7c:	429c      	cmp	r4, r3
 8011e7e:	dd19      	ble.n	8011eb4 <__ieee754_pow+0x26c>
 8011e80:	f1b9 0f00 	cmp.w	r9, #0
 8011e84:	dcef      	bgt.n	8011e66 <__ieee754_pow+0x21e>
 8011e86:	2000      	movs	r0, #0
 8011e88:	b009      	add	sp, #36	; 0x24
 8011e8a:	ecbd 8b06 	vpop	{d8-d10}
 8011e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e92:	f000 bcd7 	b.w	8012844 <__math_uflow>
 8011e96:	bf00      	nop
 8011e98:	fff00000 	.word	0xfff00000
 8011e9c:	7ff00000 	.word	0x7ff00000
 8011ea0:	433fffff 	.word	0x433fffff
 8011ea4:	3ff00000 	.word	0x3ff00000
 8011ea8:	3fefffff 	.word	0x3fefffff
 8011eac:	3fe00000 	.word	0x3fe00000
 8011eb0:	41e00000 	.word	0x41e00000
 8011eb4:	4b60      	ldr	r3, [pc, #384]	; (8012038 <__ieee754_pow+0x3f0>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f7ee fa16 	bl	80002e8 <__aeabi_dsub>
 8011ebc:	a354      	add	r3, pc, #336	; (adr r3, 8012010 <__ieee754_pow+0x3c8>)
 8011ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	460d      	mov	r5, r1
 8011ec6:	f7ee fbc7 	bl	8000658 <__aeabi_dmul>
 8011eca:	a353      	add	r3, pc, #332	; (adr r3, 8012018 <__ieee754_pow+0x3d0>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	4606      	mov	r6, r0
 8011ed2:	460f      	mov	r7, r1
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	4629      	mov	r1, r5
 8011ed8:	f7ee fbbe 	bl	8000658 <__aeabi_dmul>
 8011edc:	4b57      	ldr	r3, [pc, #348]	; (801203c <__ieee754_pow+0x3f4>)
 8011ede:	4682      	mov	sl, r0
 8011ee0:	468b      	mov	fp, r1
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	f7ee fbb6 	bl	8000658 <__aeabi_dmul>
 8011eec:	4602      	mov	r2, r0
 8011eee:	460b      	mov	r3, r1
 8011ef0:	a14b      	add	r1, pc, #300	; (adr r1, 8012020 <__ieee754_pow+0x3d8>)
 8011ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ef6:	f7ee f9f7 	bl	80002e8 <__aeabi_dsub>
 8011efa:	4622      	mov	r2, r4
 8011efc:	462b      	mov	r3, r5
 8011efe:	f7ee fbab 	bl	8000658 <__aeabi_dmul>
 8011f02:	4602      	mov	r2, r0
 8011f04:	460b      	mov	r3, r1
 8011f06:	2000      	movs	r0, #0
 8011f08:	494d      	ldr	r1, [pc, #308]	; (8012040 <__ieee754_pow+0x3f8>)
 8011f0a:	f7ee f9ed 	bl	80002e8 <__aeabi_dsub>
 8011f0e:	4622      	mov	r2, r4
 8011f10:	4680      	mov	r8, r0
 8011f12:	4689      	mov	r9, r1
 8011f14:	462b      	mov	r3, r5
 8011f16:	4620      	mov	r0, r4
 8011f18:	4629      	mov	r1, r5
 8011f1a:	f7ee fb9d 	bl	8000658 <__aeabi_dmul>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	4640      	mov	r0, r8
 8011f24:	4649      	mov	r1, r9
 8011f26:	f7ee fb97 	bl	8000658 <__aeabi_dmul>
 8011f2a:	a33f      	add	r3, pc, #252	; (adr r3, 8012028 <__ieee754_pow+0x3e0>)
 8011f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f30:	f7ee fb92 	bl	8000658 <__aeabi_dmul>
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	4650      	mov	r0, sl
 8011f3a:	4659      	mov	r1, fp
 8011f3c:	f7ee f9d4 	bl	80002e8 <__aeabi_dsub>
 8011f40:	4602      	mov	r2, r0
 8011f42:	460b      	mov	r3, r1
 8011f44:	4680      	mov	r8, r0
 8011f46:	4689      	mov	r9, r1
 8011f48:	4630      	mov	r0, r6
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	f7ee f9ce 	bl	80002ec <__adddf3>
 8011f50:	2000      	movs	r0, #0
 8011f52:	4632      	mov	r2, r6
 8011f54:	463b      	mov	r3, r7
 8011f56:	4604      	mov	r4, r0
 8011f58:	460d      	mov	r5, r1
 8011f5a:	f7ee f9c5 	bl	80002e8 <__aeabi_dsub>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	460b      	mov	r3, r1
 8011f62:	4640      	mov	r0, r8
 8011f64:	4649      	mov	r1, r9
 8011f66:	f7ee f9bf 	bl	80002e8 <__aeabi_dsub>
 8011f6a:	9b04      	ldr	r3, [sp, #16]
 8011f6c:	9a06      	ldr	r2, [sp, #24]
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	4313      	orrs	r3, r2
 8011f72:	4682      	mov	sl, r0
 8011f74:	468b      	mov	fp, r1
 8011f76:	f040 81e7 	bne.w	8012348 <__ieee754_pow+0x700>
 8011f7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012030 <__ieee754_pow+0x3e8>
 8011f7e:	eeb0 8a47 	vmov.f32	s16, s14
 8011f82:	eef0 8a67 	vmov.f32	s17, s15
 8011f86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011f8a:	2600      	movs	r6, #0
 8011f8c:	4632      	mov	r2, r6
 8011f8e:	463b      	mov	r3, r7
 8011f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f94:	f7ee f9a8 	bl	80002e8 <__aeabi_dsub>
 8011f98:	4622      	mov	r2, r4
 8011f9a:	462b      	mov	r3, r5
 8011f9c:	f7ee fb5c 	bl	8000658 <__aeabi_dmul>
 8011fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fa4:	4680      	mov	r8, r0
 8011fa6:	4689      	mov	r9, r1
 8011fa8:	4650      	mov	r0, sl
 8011faa:	4659      	mov	r1, fp
 8011fac:	f7ee fb54 	bl	8000658 <__aeabi_dmul>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	4640      	mov	r0, r8
 8011fb6:	4649      	mov	r1, r9
 8011fb8:	f7ee f998 	bl	80002ec <__adddf3>
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	463b      	mov	r3, r7
 8011fc0:	4680      	mov	r8, r0
 8011fc2:	4689      	mov	r9, r1
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	4629      	mov	r1, r5
 8011fc8:	f7ee fb46 	bl	8000658 <__aeabi_dmul>
 8011fcc:	460b      	mov	r3, r1
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	4649      	mov	r1, r9
 8011fd6:	4640      	mov	r0, r8
 8011fd8:	f7ee f988 	bl	80002ec <__adddf3>
 8011fdc:	4b19      	ldr	r3, [pc, #100]	; (8012044 <__ieee754_pow+0x3fc>)
 8011fde:	4299      	cmp	r1, r3
 8011fe0:	ec45 4b19 	vmov	d9, r4, r5
 8011fe4:	4606      	mov	r6, r0
 8011fe6:	460f      	mov	r7, r1
 8011fe8:	468b      	mov	fp, r1
 8011fea:	f340 82f1 	ble.w	80125d0 <__ieee754_pow+0x988>
 8011fee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011ff2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011ff6:	4303      	orrs	r3, r0
 8011ff8:	f000 81e4 	beq.w	80123c4 <__ieee754_pow+0x77c>
 8011ffc:	ec51 0b18 	vmov	r0, r1, d8
 8012000:	2200      	movs	r2, #0
 8012002:	2300      	movs	r3, #0
 8012004:	f7ee fd9a 	bl	8000b3c <__aeabi_dcmplt>
 8012008:	3800      	subs	r0, #0
 801200a:	bf18      	it	ne
 801200c:	2001      	movne	r0, #1
 801200e:	e72b      	b.n	8011e68 <__ieee754_pow+0x220>
 8012010:	60000000 	.word	0x60000000
 8012014:	3ff71547 	.word	0x3ff71547
 8012018:	f85ddf44 	.word	0xf85ddf44
 801201c:	3e54ae0b 	.word	0x3e54ae0b
 8012020:	55555555 	.word	0x55555555
 8012024:	3fd55555 	.word	0x3fd55555
 8012028:	652b82fe 	.word	0x652b82fe
 801202c:	3ff71547 	.word	0x3ff71547
 8012030:	00000000 	.word	0x00000000
 8012034:	bff00000 	.word	0xbff00000
 8012038:	3ff00000 	.word	0x3ff00000
 801203c:	3fd00000 	.word	0x3fd00000
 8012040:	3fe00000 	.word	0x3fe00000
 8012044:	408fffff 	.word	0x408fffff
 8012048:	4bd5      	ldr	r3, [pc, #852]	; (80123a0 <__ieee754_pow+0x758>)
 801204a:	402b      	ands	r3, r5
 801204c:	2200      	movs	r2, #0
 801204e:	b92b      	cbnz	r3, 801205c <__ieee754_pow+0x414>
 8012050:	4bd4      	ldr	r3, [pc, #848]	; (80123a4 <__ieee754_pow+0x75c>)
 8012052:	f7ee fb01 	bl	8000658 <__aeabi_dmul>
 8012056:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801205a:	460c      	mov	r4, r1
 801205c:	1523      	asrs	r3, r4, #20
 801205e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012062:	4413      	add	r3, r2
 8012064:	9305      	str	r3, [sp, #20]
 8012066:	4bd0      	ldr	r3, [pc, #832]	; (80123a8 <__ieee754_pow+0x760>)
 8012068:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801206c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012070:	429c      	cmp	r4, r3
 8012072:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012076:	dd08      	ble.n	801208a <__ieee754_pow+0x442>
 8012078:	4bcc      	ldr	r3, [pc, #816]	; (80123ac <__ieee754_pow+0x764>)
 801207a:	429c      	cmp	r4, r3
 801207c:	f340 8162 	ble.w	8012344 <__ieee754_pow+0x6fc>
 8012080:	9b05      	ldr	r3, [sp, #20]
 8012082:	3301      	adds	r3, #1
 8012084:	9305      	str	r3, [sp, #20]
 8012086:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801208a:	2400      	movs	r4, #0
 801208c:	00e3      	lsls	r3, r4, #3
 801208e:	9307      	str	r3, [sp, #28]
 8012090:	4bc7      	ldr	r3, [pc, #796]	; (80123b0 <__ieee754_pow+0x768>)
 8012092:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012096:	ed93 7b00 	vldr	d7, [r3]
 801209a:	4629      	mov	r1, r5
 801209c:	ec53 2b17 	vmov	r2, r3, d7
 80120a0:	eeb0 9a47 	vmov.f32	s18, s14
 80120a4:	eef0 9a67 	vmov.f32	s19, s15
 80120a8:	4682      	mov	sl, r0
 80120aa:	f7ee f91d 	bl	80002e8 <__aeabi_dsub>
 80120ae:	4652      	mov	r2, sl
 80120b0:	4606      	mov	r6, r0
 80120b2:	460f      	mov	r7, r1
 80120b4:	462b      	mov	r3, r5
 80120b6:	ec51 0b19 	vmov	r0, r1, d9
 80120ba:	f7ee f917 	bl	80002ec <__adddf3>
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	2000      	movs	r0, #0
 80120c4:	49bb      	ldr	r1, [pc, #748]	; (80123b4 <__ieee754_pow+0x76c>)
 80120c6:	f7ee fbf1 	bl	80008ac <__aeabi_ddiv>
 80120ca:	ec41 0b1a 	vmov	d10, r0, r1
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	4630      	mov	r0, r6
 80120d4:	4639      	mov	r1, r7
 80120d6:	f7ee fabf 	bl	8000658 <__aeabi_dmul>
 80120da:	2300      	movs	r3, #0
 80120dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120e0:	9302      	str	r3, [sp, #8]
 80120e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80120e6:	46ab      	mov	fp, r5
 80120e8:	106d      	asrs	r5, r5, #1
 80120ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80120ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80120f2:	ec41 0b18 	vmov	d8, r0, r1
 80120f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80120fa:	2200      	movs	r2, #0
 80120fc:	4640      	mov	r0, r8
 80120fe:	4649      	mov	r1, r9
 8012100:	4614      	mov	r4, r2
 8012102:	461d      	mov	r5, r3
 8012104:	f7ee faa8 	bl	8000658 <__aeabi_dmul>
 8012108:	4602      	mov	r2, r0
 801210a:	460b      	mov	r3, r1
 801210c:	4630      	mov	r0, r6
 801210e:	4639      	mov	r1, r7
 8012110:	f7ee f8ea 	bl	80002e8 <__aeabi_dsub>
 8012114:	ec53 2b19 	vmov	r2, r3, d9
 8012118:	4606      	mov	r6, r0
 801211a:	460f      	mov	r7, r1
 801211c:	4620      	mov	r0, r4
 801211e:	4629      	mov	r1, r5
 8012120:	f7ee f8e2 	bl	80002e8 <__aeabi_dsub>
 8012124:	4602      	mov	r2, r0
 8012126:	460b      	mov	r3, r1
 8012128:	4650      	mov	r0, sl
 801212a:	4659      	mov	r1, fp
 801212c:	f7ee f8dc 	bl	80002e8 <__aeabi_dsub>
 8012130:	4642      	mov	r2, r8
 8012132:	464b      	mov	r3, r9
 8012134:	f7ee fa90 	bl	8000658 <__aeabi_dmul>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	4630      	mov	r0, r6
 801213e:	4639      	mov	r1, r7
 8012140:	f7ee f8d2 	bl	80002e8 <__aeabi_dsub>
 8012144:	ec53 2b1a 	vmov	r2, r3, d10
 8012148:	f7ee fa86 	bl	8000658 <__aeabi_dmul>
 801214c:	ec53 2b18 	vmov	r2, r3, d8
 8012150:	ec41 0b19 	vmov	d9, r0, r1
 8012154:	ec51 0b18 	vmov	r0, r1, d8
 8012158:	f7ee fa7e 	bl	8000658 <__aeabi_dmul>
 801215c:	a37c      	add	r3, pc, #496	; (adr r3, 8012350 <__ieee754_pow+0x708>)
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	4604      	mov	r4, r0
 8012164:	460d      	mov	r5, r1
 8012166:	f7ee fa77 	bl	8000658 <__aeabi_dmul>
 801216a:	a37b      	add	r3, pc, #492	; (adr r3, 8012358 <__ieee754_pow+0x710>)
 801216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012170:	f7ee f8bc 	bl	80002ec <__adddf3>
 8012174:	4622      	mov	r2, r4
 8012176:	462b      	mov	r3, r5
 8012178:	f7ee fa6e 	bl	8000658 <__aeabi_dmul>
 801217c:	a378      	add	r3, pc, #480	; (adr r3, 8012360 <__ieee754_pow+0x718>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	f7ee f8b3 	bl	80002ec <__adddf3>
 8012186:	4622      	mov	r2, r4
 8012188:	462b      	mov	r3, r5
 801218a:	f7ee fa65 	bl	8000658 <__aeabi_dmul>
 801218e:	a376      	add	r3, pc, #472	; (adr r3, 8012368 <__ieee754_pow+0x720>)
 8012190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012194:	f7ee f8aa 	bl	80002ec <__adddf3>
 8012198:	4622      	mov	r2, r4
 801219a:	462b      	mov	r3, r5
 801219c:	f7ee fa5c 	bl	8000658 <__aeabi_dmul>
 80121a0:	a373      	add	r3, pc, #460	; (adr r3, 8012370 <__ieee754_pow+0x728>)
 80121a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a6:	f7ee f8a1 	bl	80002ec <__adddf3>
 80121aa:	4622      	mov	r2, r4
 80121ac:	462b      	mov	r3, r5
 80121ae:	f7ee fa53 	bl	8000658 <__aeabi_dmul>
 80121b2:	a371      	add	r3, pc, #452	; (adr r3, 8012378 <__ieee754_pow+0x730>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	f7ee f898 	bl	80002ec <__adddf3>
 80121bc:	4622      	mov	r2, r4
 80121be:	4606      	mov	r6, r0
 80121c0:	460f      	mov	r7, r1
 80121c2:	462b      	mov	r3, r5
 80121c4:	4620      	mov	r0, r4
 80121c6:	4629      	mov	r1, r5
 80121c8:	f7ee fa46 	bl	8000658 <__aeabi_dmul>
 80121cc:	4602      	mov	r2, r0
 80121ce:	460b      	mov	r3, r1
 80121d0:	4630      	mov	r0, r6
 80121d2:	4639      	mov	r1, r7
 80121d4:	f7ee fa40 	bl	8000658 <__aeabi_dmul>
 80121d8:	4642      	mov	r2, r8
 80121da:	4604      	mov	r4, r0
 80121dc:	460d      	mov	r5, r1
 80121de:	464b      	mov	r3, r9
 80121e0:	ec51 0b18 	vmov	r0, r1, d8
 80121e4:	f7ee f882 	bl	80002ec <__adddf3>
 80121e8:	ec53 2b19 	vmov	r2, r3, d9
 80121ec:	f7ee fa34 	bl	8000658 <__aeabi_dmul>
 80121f0:	4622      	mov	r2, r4
 80121f2:	462b      	mov	r3, r5
 80121f4:	f7ee f87a 	bl	80002ec <__adddf3>
 80121f8:	4642      	mov	r2, r8
 80121fa:	4682      	mov	sl, r0
 80121fc:	468b      	mov	fp, r1
 80121fe:	464b      	mov	r3, r9
 8012200:	4640      	mov	r0, r8
 8012202:	4649      	mov	r1, r9
 8012204:	f7ee fa28 	bl	8000658 <__aeabi_dmul>
 8012208:	4b6b      	ldr	r3, [pc, #428]	; (80123b8 <__ieee754_pow+0x770>)
 801220a:	2200      	movs	r2, #0
 801220c:	4606      	mov	r6, r0
 801220e:	460f      	mov	r7, r1
 8012210:	f7ee f86c 	bl	80002ec <__adddf3>
 8012214:	4652      	mov	r2, sl
 8012216:	465b      	mov	r3, fp
 8012218:	f7ee f868 	bl	80002ec <__adddf3>
 801221c:	2000      	movs	r0, #0
 801221e:	4604      	mov	r4, r0
 8012220:	460d      	mov	r5, r1
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	4640      	mov	r0, r8
 8012228:	4649      	mov	r1, r9
 801222a:	f7ee fa15 	bl	8000658 <__aeabi_dmul>
 801222e:	4b62      	ldr	r3, [pc, #392]	; (80123b8 <__ieee754_pow+0x770>)
 8012230:	4680      	mov	r8, r0
 8012232:	4689      	mov	r9, r1
 8012234:	2200      	movs	r2, #0
 8012236:	4620      	mov	r0, r4
 8012238:	4629      	mov	r1, r5
 801223a:	f7ee f855 	bl	80002e8 <__aeabi_dsub>
 801223e:	4632      	mov	r2, r6
 8012240:	463b      	mov	r3, r7
 8012242:	f7ee f851 	bl	80002e8 <__aeabi_dsub>
 8012246:	4602      	mov	r2, r0
 8012248:	460b      	mov	r3, r1
 801224a:	4650      	mov	r0, sl
 801224c:	4659      	mov	r1, fp
 801224e:	f7ee f84b 	bl	80002e8 <__aeabi_dsub>
 8012252:	ec53 2b18 	vmov	r2, r3, d8
 8012256:	f7ee f9ff 	bl	8000658 <__aeabi_dmul>
 801225a:	4622      	mov	r2, r4
 801225c:	4606      	mov	r6, r0
 801225e:	460f      	mov	r7, r1
 8012260:	462b      	mov	r3, r5
 8012262:	ec51 0b19 	vmov	r0, r1, d9
 8012266:	f7ee f9f7 	bl	8000658 <__aeabi_dmul>
 801226a:	4602      	mov	r2, r0
 801226c:	460b      	mov	r3, r1
 801226e:	4630      	mov	r0, r6
 8012270:	4639      	mov	r1, r7
 8012272:	f7ee f83b 	bl	80002ec <__adddf3>
 8012276:	4606      	mov	r6, r0
 8012278:	460f      	mov	r7, r1
 801227a:	4602      	mov	r2, r0
 801227c:	460b      	mov	r3, r1
 801227e:	4640      	mov	r0, r8
 8012280:	4649      	mov	r1, r9
 8012282:	f7ee f833 	bl	80002ec <__adddf3>
 8012286:	a33e      	add	r3, pc, #248	; (adr r3, 8012380 <__ieee754_pow+0x738>)
 8012288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228c:	2000      	movs	r0, #0
 801228e:	4604      	mov	r4, r0
 8012290:	460d      	mov	r5, r1
 8012292:	f7ee f9e1 	bl	8000658 <__aeabi_dmul>
 8012296:	4642      	mov	r2, r8
 8012298:	ec41 0b18 	vmov	d8, r0, r1
 801229c:	464b      	mov	r3, r9
 801229e:	4620      	mov	r0, r4
 80122a0:	4629      	mov	r1, r5
 80122a2:	f7ee f821 	bl	80002e8 <__aeabi_dsub>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4630      	mov	r0, r6
 80122ac:	4639      	mov	r1, r7
 80122ae:	f7ee f81b 	bl	80002e8 <__aeabi_dsub>
 80122b2:	a335      	add	r3, pc, #212	; (adr r3, 8012388 <__ieee754_pow+0x740>)
 80122b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b8:	f7ee f9ce 	bl	8000658 <__aeabi_dmul>
 80122bc:	a334      	add	r3, pc, #208	; (adr r3, 8012390 <__ieee754_pow+0x748>)
 80122be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c2:	4606      	mov	r6, r0
 80122c4:	460f      	mov	r7, r1
 80122c6:	4620      	mov	r0, r4
 80122c8:	4629      	mov	r1, r5
 80122ca:	f7ee f9c5 	bl	8000658 <__aeabi_dmul>
 80122ce:	4602      	mov	r2, r0
 80122d0:	460b      	mov	r3, r1
 80122d2:	4630      	mov	r0, r6
 80122d4:	4639      	mov	r1, r7
 80122d6:	f7ee f809 	bl	80002ec <__adddf3>
 80122da:	9a07      	ldr	r2, [sp, #28]
 80122dc:	4b37      	ldr	r3, [pc, #220]	; (80123bc <__ieee754_pow+0x774>)
 80122de:	4413      	add	r3, r2
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	f7ee f802 	bl	80002ec <__adddf3>
 80122e8:	4682      	mov	sl, r0
 80122ea:	9805      	ldr	r0, [sp, #20]
 80122ec:	468b      	mov	fp, r1
 80122ee:	f7ee f949 	bl	8000584 <__aeabi_i2d>
 80122f2:	9a07      	ldr	r2, [sp, #28]
 80122f4:	4b32      	ldr	r3, [pc, #200]	; (80123c0 <__ieee754_pow+0x778>)
 80122f6:	4413      	add	r3, r2
 80122f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80122fc:	4606      	mov	r6, r0
 80122fe:	460f      	mov	r7, r1
 8012300:	4652      	mov	r2, sl
 8012302:	465b      	mov	r3, fp
 8012304:	ec51 0b18 	vmov	r0, r1, d8
 8012308:	f7ed fff0 	bl	80002ec <__adddf3>
 801230c:	4642      	mov	r2, r8
 801230e:	464b      	mov	r3, r9
 8012310:	f7ed ffec 	bl	80002ec <__adddf3>
 8012314:	4632      	mov	r2, r6
 8012316:	463b      	mov	r3, r7
 8012318:	f7ed ffe8 	bl	80002ec <__adddf3>
 801231c:	2000      	movs	r0, #0
 801231e:	4632      	mov	r2, r6
 8012320:	463b      	mov	r3, r7
 8012322:	4604      	mov	r4, r0
 8012324:	460d      	mov	r5, r1
 8012326:	f7ed ffdf 	bl	80002e8 <__aeabi_dsub>
 801232a:	4642      	mov	r2, r8
 801232c:	464b      	mov	r3, r9
 801232e:	f7ed ffdb 	bl	80002e8 <__aeabi_dsub>
 8012332:	ec53 2b18 	vmov	r2, r3, d8
 8012336:	f7ed ffd7 	bl	80002e8 <__aeabi_dsub>
 801233a:	4602      	mov	r2, r0
 801233c:	460b      	mov	r3, r1
 801233e:	4650      	mov	r0, sl
 8012340:	4659      	mov	r1, fp
 8012342:	e610      	b.n	8011f66 <__ieee754_pow+0x31e>
 8012344:	2401      	movs	r4, #1
 8012346:	e6a1      	b.n	801208c <__ieee754_pow+0x444>
 8012348:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012398 <__ieee754_pow+0x750>
 801234c:	e617      	b.n	8011f7e <__ieee754_pow+0x336>
 801234e:	bf00      	nop
 8012350:	4a454eef 	.word	0x4a454eef
 8012354:	3fca7e28 	.word	0x3fca7e28
 8012358:	93c9db65 	.word	0x93c9db65
 801235c:	3fcd864a 	.word	0x3fcd864a
 8012360:	a91d4101 	.word	0xa91d4101
 8012364:	3fd17460 	.word	0x3fd17460
 8012368:	518f264d 	.word	0x518f264d
 801236c:	3fd55555 	.word	0x3fd55555
 8012370:	db6fabff 	.word	0xdb6fabff
 8012374:	3fdb6db6 	.word	0x3fdb6db6
 8012378:	33333303 	.word	0x33333303
 801237c:	3fe33333 	.word	0x3fe33333
 8012380:	e0000000 	.word	0xe0000000
 8012384:	3feec709 	.word	0x3feec709
 8012388:	dc3a03fd 	.word	0xdc3a03fd
 801238c:	3feec709 	.word	0x3feec709
 8012390:	145b01f5 	.word	0x145b01f5
 8012394:	be3e2fe0 	.word	0xbe3e2fe0
 8012398:	00000000 	.word	0x00000000
 801239c:	3ff00000 	.word	0x3ff00000
 80123a0:	7ff00000 	.word	0x7ff00000
 80123a4:	43400000 	.word	0x43400000
 80123a8:	0003988e 	.word	0x0003988e
 80123ac:	000bb679 	.word	0x000bb679
 80123b0:	08064e30 	.word	0x08064e30
 80123b4:	3ff00000 	.word	0x3ff00000
 80123b8:	40080000 	.word	0x40080000
 80123bc:	08064e50 	.word	0x08064e50
 80123c0:	08064e40 	.word	0x08064e40
 80123c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801269c <__ieee754_pow+0xa54>)
 80123c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ca:	4640      	mov	r0, r8
 80123cc:	4649      	mov	r1, r9
 80123ce:	f7ed ff8d 	bl	80002ec <__adddf3>
 80123d2:	4622      	mov	r2, r4
 80123d4:	ec41 0b1a 	vmov	d10, r0, r1
 80123d8:	462b      	mov	r3, r5
 80123da:	4630      	mov	r0, r6
 80123dc:	4639      	mov	r1, r7
 80123de:	f7ed ff83 	bl	80002e8 <__aeabi_dsub>
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	ec51 0b1a 	vmov	r0, r1, d10
 80123ea:	f7ee fbc5 	bl	8000b78 <__aeabi_dcmpgt>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	f47f ae04 	bne.w	8011ffc <__ieee754_pow+0x3b4>
 80123f4:	4aa4      	ldr	r2, [pc, #656]	; (8012688 <__ieee754_pow+0xa40>)
 80123f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123fa:	4293      	cmp	r3, r2
 80123fc:	f340 8108 	ble.w	8012610 <__ieee754_pow+0x9c8>
 8012400:	151b      	asrs	r3, r3, #20
 8012402:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012406:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801240a:	fa4a f303 	asr.w	r3, sl, r3
 801240e:	445b      	add	r3, fp
 8012410:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012414:	4e9d      	ldr	r6, [pc, #628]	; (801268c <__ieee754_pow+0xa44>)
 8012416:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801241a:	4116      	asrs	r6, r2
 801241c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012420:	2000      	movs	r0, #0
 8012422:	ea23 0106 	bic.w	r1, r3, r6
 8012426:	f1c2 0214 	rsb	r2, r2, #20
 801242a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801242e:	fa4a fa02 	asr.w	sl, sl, r2
 8012432:	f1bb 0f00 	cmp.w	fp, #0
 8012436:	4602      	mov	r2, r0
 8012438:	460b      	mov	r3, r1
 801243a:	4620      	mov	r0, r4
 801243c:	4629      	mov	r1, r5
 801243e:	bfb8      	it	lt
 8012440:	f1ca 0a00 	rsblt	sl, sl, #0
 8012444:	f7ed ff50 	bl	80002e8 <__aeabi_dsub>
 8012448:	ec41 0b19 	vmov	d9, r0, r1
 801244c:	4642      	mov	r2, r8
 801244e:	464b      	mov	r3, r9
 8012450:	ec51 0b19 	vmov	r0, r1, d9
 8012454:	f7ed ff4a 	bl	80002ec <__adddf3>
 8012458:	a37b      	add	r3, pc, #492	; (adr r3, 8012648 <__ieee754_pow+0xa00>)
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	2000      	movs	r0, #0
 8012460:	4604      	mov	r4, r0
 8012462:	460d      	mov	r5, r1
 8012464:	f7ee f8f8 	bl	8000658 <__aeabi_dmul>
 8012468:	ec53 2b19 	vmov	r2, r3, d9
 801246c:	4606      	mov	r6, r0
 801246e:	460f      	mov	r7, r1
 8012470:	4620      	mov	r0, r4
 8012472:	4629      	mov	r1, r5
 8012474:	f7ed ff38 	bl	80002e8 <__aeabi_dsub>
 8012478:	4602      	mov	r2, r0
 801247a:	460b      	mov	r3, r1
 801247c:	4640      	mov	r0, r8
 801247e:	4649      	mov	r1, r9
 8012480:	f7ed ff32 	bl	80002e8 <__aeabi_dsub>
 8012484:	a372      	add	r3, pc, #456	; (adr r3, 8012650 <__ieee754_pow+0xa08>)
 8012486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248a:	f7ee f8e5 	bl	8000658 <__aeabi_dmul>
 801248e:	a372      	add	r3, pc, #456	; (adr r3, 8012658 <__ieee754_pow+0xa10>)
 8012490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012494:	4680      	mov	r8, r0
 8012496:	4689      	mov	r9, r1
 8012498:	4620      	mov	r0, r4
 801249a:	4629      	mov	r1, r5
 801249c:	f7ee f8dc 	bl	8000658 <__aeabi_dmul>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	4640      	mov	r0, r8
 80124a6:	4649      	mov	r1, r9
 80124a8:	f7ed ff20 	bl	80002ec <__adddf3>
 80124ac:	4604      	mov	r4, r0
 80124ae:	460d      	mov	r5, r1
 80124b0:	4602      	mov	r2, r0
 80124b2:	460b      	mov	r3, r1
 80124b4:	4630      	mov	r0, r6
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ed ff18 	bl	80002ec <__adddf3>
 80124bc:	4632      	mov	r2, r6
 80124be:	463b      	mov	r3, r7
 80124c0:	4680      	mov	r8, r0
 80124c2:	4689      	mov	r9, r1
 80124c4:	f7ed ff10 	bl	80002e8 <__aeabi_dsub>
 80124c8:	4602      	mov	r2, r0
 80124ca:	460b      	mov	r3, r1
 80124cc:	4620      	mov	r0, r4
 80124ce:	4629      	mov	r1, r5
 80124d0:	f7ed ff0a 	bl	80002e8 <__aeabi_dsub>
 80124d4:	4642      	mov	r2, r8
 80124d6:	4606      	mov	r6, r0
 80124d8:	460f      	mov	r7, r1
 80124da:	464b      	mov	r3, r9
 80124dc:	4640      	mov	r0, r8
 80124de:	4649      	mov	r1, r9
 80124e0:	f7ee f8ba 	bl	8000658 <__aeabi_dmul>
 80124e4:	a35e      	add	r3, pc, #376	; (adr r3, 8012660 <__ieee754_pow+0xa18>)
 80124e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ea:	4604      	mov	r4, r0
 80124ec:	460d      	mov	r5, r1
 80124ee:	f7ee f8b3 	bl	8000658 <__aeabi_dmul>
 80124f2:	a35d      	add	r3, pc, #372	; (adr r3, 8012668 <__ieee754_pow+0xa20>)
 80124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f8:	f7ed fef6 	bl	80002e8 <__aeabi_dsub>
 80124fc:	4622      	mov	r2, r4
 80124fe:	462b      	mov	r3, r5
 8012500:	f7ee f8aa 	bl	8000658 <__aeabi_dmul>
 8012504:	a35a      	add	r3, pc, #360	; (adr r3, 8012670 <__ieee754_pow+0xa28>)
 8012506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250a:	f7ed feef 	bl	80002ec <__adddf3>
 801250e:	4622      	mov	r2, r4
 8012510:	462b      	mov	r3, r5
 8012512:	f7ee f8a1 	bl	8000658 <__aeabi_dmul>
 8012516:	a358      	add	r3, pc, #352	; (adr r3, 8012678 <__ieee754_pow+0xa30>)
 8012518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251c:	f7ed fee4 	bl	80002e8 <__aeabi_dsub>
 8012520:	4622      	mov	r2, r4
 8012522:	462b      	mov	r3, r5
 8012524:	f7ee f898 	bl	8000658 <__aeabi_dmul>
 8012528:	a355      	add	r3, pc, #340	; (adr r3, 8012680 <__ieee754_pow+0xa38>)
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	f7ed fedd 	bl	80002ec <__adddf3>
 8012532:	4622      	mov	r2, r4
 8012534:	462b      	mov	r3, r5
 8012536:	f7ee f88f 	bl	8000658 <__aeabi_dmul>
 801253a:	4602      	mov	r2, r0
 801253c:	460b      	mov	r3, r1
 801253e:	4640      	mov	r0, r8
 8012540:	4649      	mov	r1, r9
 8012542:	f7ed fed1 	bl	80002e8 <__aeabi_dsub>
 8012546:	4604      	mov	r4, r0
 8012548:	460d      	mov	r5, r1
 801254a:	4602      	mov	r2, r0
 801254c:	460b      	mov	r3, r1
 801254e:	4640      	mov	r0, r8
 8012550:	4649      	mov	r1, r9
 8012552:	f7ee f881 	bl	8000658 <__aeabi_dmul>
 8012556:	2200      	movs	r2, #0
 8012558:	ec41 0b19 	vmov	d9, r0, r1
 801255c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012560:	4620      	mov	r0, r4
 8012562:	4629      	mov	r1, r5
 8012564:	f7ed fec0 	bl	80002e8 <__aeabi_dsub>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	ec51 0b19 	vmov	r0, r1, d9
 8012570:	f7ee f99c 	bl	80008ac <__aeabi_ddiv>
 8012574:	4632      	mov	r2, r6
 8012576:	4604      	mov	r4, r0
 8012578:	460d      	mov	r5, r1
 801257a:	463b      	mov	r3, r7
 801257c:	4640      	mov	r0, r8
 801257e:	4649      	mov	r1, r9
 8012580:	f7ee f86a 	bl	8000658 <__aeabi_dmul>
 8012584:	4632      	mov	r2, r6
 8012586:	463b      	mov	r3, r7
 8012588:	f7ed feb0 	bl	80002ec <__adddf3>
 801258c:	4602      	mov	r2, r0
 801258e:	460b      	mov	r3, r1
 8012590:	4620      	mov	r0, r4
 8012592:	4629      	mov	r1, r5
 8012594:	f7ed fea8 	bl	80002e8 <__aeabi_dsub>
 8012598:	4642      	mov	r2, r8
 801259a:	464b      	mov	r3, r9
 801259c:	f7ed fea4 	bl	80002e8 <__aeabi_dsub>
 80125a0:	460b      	mov	r3, r1
 80125a2:	4602      	mov	r2, r0
 80125a4:	493a      	ldr	r1, [pc, #232]	; (8012690 <__ieee754_pow+0xa48>)
 80125a6:	2000      	movs	r0, #0
 80125a8:	f7ed fe9e 	bl	80002e8 <__aeabi_dsub>
 80125ac:	ec41 0b10 	vmov	d0, r0, r1
 80125b0:	ee10 3a90 	vmov	r3, s1
 80125b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80125b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80125bc:	da2b      	bge.n	8012616 <__ieee754_pow+0x9ce>
 80125be:	4650      	mov	r0, sl
 80125c0:	f000 f966 	bl	8012890 <scalbn>
 80125c4:	ec51 0b10 	vmov	r0, r1, d0
 80125c8:	ec53 2b18 	vmov	r2, r3, d8
 80125cc:	f7ff bbed 	b.w	8011daa <__ieee754_pow+0x162>
 80125d0:	4b30      	ldr	r3, [pc, #192]	; (8012694 <__ieee754_pow+0xa4c>)
 80125d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80125d6:	429e      	cmp	r6, r3
 80125d8:	f77f af0c 	ble.w	80123f4 <__ieee754_pow+0x7ac>
 80125dc:	4b2e      	ldr	r3, [pc, #184]	; (8012698 <__ieee754_pow+0xa50>)
 80125de:	440b      	add	r3, r1
 80125e0:	4303      	orrs	r3, r0
 80125e2:	d009      	beq.n	80125f8 <__ieee754_pow+0x9b0>
 80125e4:	ec51 0b18 	vmov	r0, r1, d8
 80125e8:	2200      	movs	r2, #0
 80125ea:	2300      	movs	r3, #0
 80125ec:	f7ee faa6 	bl	8000b3c <__aeabi_dcmplt>
 80125f0:	3800      	subs	r0, #0
 80125f2:	bf18      	it	ne
 80125f4:	2001      	movne	r0, #1
 80125f6:	e447      	b.n	8011e88 <__ieee754_pow+0x240>
 80125f8:	4622      	mov	r2, r4
 80125fa:	462b      	mov	r3, r5
 80125fc:	f7ed fe74 	bl	80002e8 <__aeabi_dsub>
 8012600:	4642      	mov	r2, r8
 8012602:	464b      	mov	r3, r9
 8012604:	f7ee faae 	bl	8000b64 <__aeabi_dcmpge>
 8012608:	2800      	cmp	r0, #0
 801260a:	f43f aef3 	beq.w	80123f4 <__ieee754_pow+0x7ac>
 801260e:	e7e9      	b.n	80125e4 <__ieee754_pow+0x99c>
 8012610:	f04f 0a00 	mov.w	sl, #0
 8012614:	e71a      	b.n	801244c <__ieee754_pow+0x804>
 8012616:	ec51 0b10 	vmov	r0, r1, d0
 801261a:	4619      	mov	r1, r3
 801261c:	e7d4      	b.n	80125c8 <__ieee754_pow+0x980>
 801261e:	491c      	ldr	r1, [pc, #112]	; (8012690 <__ieee754_pow+0xa48>)
 8012620:	2000      	movs	r0, #0
 8012622:	f7ff bb30 	b.w	8011c86 <__ieee754_pow+0x3e>
 8012626:	2000      	movs	r0, #0
 8012628:	2100      	movs	r1, #0
 801262a:	f7ff bb2c 	b.w	8011c86 <__ieee754_pow+0x3e>
 801262e:	4630      	mov	r0, r6
 8012630:	4639      	mov	r1, r7
 8012632:	f7ff bb28 	b.w	8011c86 <__ieee754_pow+0x3e>
 8012636:	9204      	str	r2, [sp, #16]
 8012638:	f7ff bb7a 	b.w	8011d30 <__ieee754_pow+0xe8>
 801263c:	2300      	movs	r3, #0
 801263e:	f7ff bb64 	b.w	8011d0a <__ieee754_pow+0xc2>
 8012642:	bf00      	nop
 8012644:	f3af 8000 	nop.w
 8012648:	00000000 	.word	0x00000000
 801264c:	3fe62e43 	.word	0x3fe62e43
 8012650:	fefa39ef 	.word	0xfefa39ef
 8012654:	3fe62e42 	.word	0x3fe62e42
 8012658:	0ca86c39 	.word	0x0ca86c39
 801265c:	be205c61 	.word	0xbe205c61
 8012660:	72bea4d0 	.word	0x72bea4d0
 8012664:	3e663769 	.word	0x3e663769
 8012668:	c5d26bf1 	.word	0xc5d26bf1
 801266c:	3ebbbd41 	.word	0x3ebbbd41
 8012670:	af25de2c 	.word	0xaf25de2c
 8012674:	3f11566a 	.word	0x3f11566a
 8012678:	16bebd93 	.word	0x16bebd93
 801267c:	3f66c16c 	.word	0x3f66c16c
 8012680:	5555553e 	.word	0x5555553e
 8012684:	3fc55555 	.word	0x3fc55555
 8012688:	3fe00000 	.word	0x3fe00000
 801268c:	000fffff 	.word	0x000fffff
 8012690:	3ff00000 	.word	0x3ff00000
 8012694:	4090cbff 	.word	0x4090cbff
 8012698:	3f6f3400 	.word	0x3f6f3400
 801269c:	652b82fe 	.word	0x652b82fe
 80126a0:	3c971547 	.word	0x3c971547

080126a4 <__ieee754_sqrt>:
 80126a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a8:	ec55 4b10 	vmov	r4, r5, d0
 80126ac:	4e55      	ldr	r6, [pc, #340]	; (8012804 <__ieee754_sqrt+0x160>)
 80126ae:	43ae      	bics	r6, r5
 80126b0:	ee10 0a10 	vmov	r0, s0
 80126b4:	ee10 3a10 	vmov	r3, s0
 80126b8:	462a      	mov	r2, r5
 80126ba:	4629      	mov	r1, r5
 80126bc:	d110      	bne.n	80126e0 <__ieee754_sqrt+0x3c>
 80126be:	ee10 2a10 	vmov	r2, s0
 80126c2:	462b      	mov	r3, r5
 80126c4:	f7ed ffc8 	bl	8000658 <__aeabi_dmul>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	4620      	mov	r0, r4
 80126ce:	4629      	mov	r1, r5
 80126d0:	f7ed fe0c 	bl	80002ec <__adddf3>
 80126d4:	4604      	mov	r4, r0
 80126d6:	460d      	mov	r5, r1
 80126d8:	ec45 4b10 	vmov	d0, r4, r5
 80126dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e0:	2d00      	cmp	r5, #0
 80126e2:	dc10      	bgt.n	8012706 <__ieee754_sqrt+0x62>
 80126e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80126e8:	4330      	orrs	r0, r6
 80126ea:	d0f5      	beq.n	80126d8 <__ieee754_sqrt+0x34>
 80126ec:	b15d      	cbz	r5, 8012706 <__ieee754_sqrt+0x62>
 80126ee:	ee10 2a10 	vmov	r2, s0
 80126f2:	462b      	mov	r3, r5
 80126f4:	ee10 0a10 	vmov	r0, s0
 80126f8:	f7ed fdf6 	bl	80002e8 <__aeabi_dsub>
 80126fc:	4602      	mov	r2, r0
 80126fe:	460b      	mov	r3, r1
 8012700:	f7ee f8d4 	bl	80008ac <__aeabi_ddiv>
 8012704:	e7e6      	b.n	80126d4 <__ieee754_sqrt+0x30>
 8012706:	1512      	asrs	r2, r2, #20
 8012708:	d074      	beq.n	80127f4 <__ieee754_sqrt+0x150>
 801270a:	07d4      	lsls	r4, r2, #31
 801270c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012710:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012718:	bf5e      	ittt	pl
 801271a:	0fda      	lsrpl	r2, r3, #31
 801271c:	005b      	lslpl	r3, r3, #1
 801271e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012722:	2400      	movs	r4, #0
 8012724:	0fda      	lsrs	r2, r3, #31
 8012726:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801272a:	107f      	asrs	r7, r7, #1
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	2516      	movs	r5, #22
 8012730:	4620      	mov	r0, r4
 8012732:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012736:	1886      	adds	r6, r0, r2
 8012738:	428e      	cmp	r6, r1
 801273a:	bfde      	ittt	le
 801273c:	1b89      	suble	r1, r1, r6
 801273e:	18b0      	addle	r0, r6, r2
 8012740:	18a4      	addle	r4, r4, r2
 8012742:	0049      	lsls	r1, r1, #1
 8012744:	3d01      	subs	r5, #1
 8012746:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801274a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801274e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012752:	d1f0      	bne.n	8012736 <__ieee754_sqrt+0x92>
 8012754:	462a      	mov	r2, r5
 8012756:	f04f 0e20 	mov.w	lr, #32
 801275a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801275e:	4281      	cmp	r1, r0
 8012760:	eb06 0c05 	add.w	ip, r6, r5
 8012764:	dc02      	bgt.n	801276c <__ieee754_sqrt+0xc8>
 8012766:	d113      	bne.n	8012790 <__ieee754_sqrt+0xec>
 8012768:	459c      	cmp	ip, r3
 801276a:	d811      	bhi.n	8012790 <__ieee754_sqrt+0xec>
 801276c:	f1bc 0f00 	cmp.w	ip, #0
 8012770:	eb0c 0506 	add.w	r5, ip, r6
 8012774:	da43      	bge.n	80127fe <__ieee754_sqrt+0x15a>
 8012776:	2d00      	cmp	r5, #0
 8012778:	db41      	blt.n	80127fe <__ieee754_sqrt+0x15a>
 801277a:	f100 0801 	add.w	r8, r0, #1
 801277e:	1a09      	subs	r1, r1, r0
 8012780:	459c      	cmp	ip, r3
 8012782:	bf88      	it	hi
 8012784:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012788:	eba3 030c 	sub.w	r3, r3, ip
 801278c:	4432      	add	r2, r6
 801278e:	4640      	mov	r0, r8
 8012790:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012794:	f1be 0e01 	subs.w	lr, lr, #1
 8012798:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801279c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80127a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80127a4:	d1db      	bne.n	801275e <__ieee754_sqrt+0xba>
 80127a6:	430b      	orrs	r3, r1
 80127a8:	d006      	beq.n	80127b8 <__ieee754_sqrt+0x114>
 80127aa:	1c50      	adds	r0, r2, #1
 80127ac:	bf13      	iteet	ne
 80127ae:	3201      	addne	r2, #1
 80127b0:	3401      	addeq	r4, #1
 80127b2:	4672      	moveq	r2, lr
 80127b4:	f022 0201 	bicne.w	r2, r2, #1
 80127b8:	1063      	asrs	r3, r4, #1
 80127ba:	0852      	lsrs	r2, r2, #1
 80127bc:	07e1      	lsls	r1, r4, #31
 80127be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80127c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80127c6:	bf48      	it	mi
 80127c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80127cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80127d0:	4614      	mov	r4, r2
 80127d2:	e781      	b.n	80126d8 <__ieee754_sqrt+0x34>
 80127d4:	0ad9      	lsrs	r1, r3, #11
 80127d6:	3815      	subs	r0, #21
 80127d8:	055b      	lsls	r3, r3, #21
 80127da:	2900      	cmp	r1, #0
 80127dc:	d0fa      	beq.n	80127d4 <__ieee754_sqrt+0x130>
 80127de:	02cd      	lsls	r5, r1, #11
 80127e0:	d50a      	bpl.n	80127f8 <__ieee754_sqrt+0x154>
 80127e2:	f1c2 0420 	rsb	r4, r2, #32
 80127e6:	fa23 f404 	lsr.w	r4, r3, r4
 80127ea:	1e55      	subs	r5, r2, #1
 80127ec:	4093      	lsls	r3, r2
 80127ee:	4321      	orrs	r1, r4
 80127f0:	1b42      	subs	r2, r0, r5
 80127f2:	e78a      	b.n	801270a <__ieee754_sqrt+0x66>
 80127f4:	4610      	mov	r0, r2
 80127f6:	e7f0      	b.n	80127da <__ieee754_sqrt+0x136>
 80127f8:	0049      	lsls	r1, r1, #1
 80127fa:	3201      	adds	r2, #1
 80127fc:	e7ef      	b.n	80127de <__ieee754_sqrt+0x13a>
 80127fe:	4680      	mov	r8, r0
 8012800:	e7bd      	b.n	801277e <__ieee754_sqrt+0xda>
 8012802:	bf00      	nop
 8012804:	7ff00000 	.word	0x7ff00000

08012808 <with_errno>:
 8012808:	b570      	push	{r4, r5, r6, lr}
 801280a:	4604      	mov	r4, r0
 801280c:	460d      	mov	r5, r1
 801280e:	4616      	mov	r6, r2
 8012810:	f7fc fa64 	bl	800ecdc <__errno>
 8012814:	4629      	mov	r1, r5
 8012816:	6006      	str	r6, [r0, #0]
 8012818:	4620      	mov	r0, r4
 801281a:	bd70      	pop	{r4, r5, r6, pc}

0801281c <xflow>:
 801281c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801281e:	4614      	mov	r4, r2
 8012820:	461d      	mov	r5, r3
 8012822:	b108      	cbz	r0, 8012828 <xflow+0xc>
 8012824:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012828:	e9cd 2300 	strd	r2, r3, [sp]
 801282c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012830:	4620      	mov	r0, r4
 8012832:	4629      	mov	r1, r5
 8012834:	f7ed ff10 	bl	8000658 <__aeabi_dmul>
 8012838:	2222      	movs	r2, #34	; 0x22
 801283a:	b003      	add	sp, #12
 801283c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012840:	f7ff bfe2 	b.w	8012808 <with_errno>

08012844 <__math_uflow>:
 8012844:	b508      	push	{r3, lr}
 8012846:	2200      	movs	r2, #0
 8012848:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801284c:	f7ff ffe6 	bl	801281c <xflow>
 8012850:	ec41 0b10 	vmov	d0, r0, r1
 8012854:	bd08      	pop	{r3, pc}

08012856 <__math_oflow>:
 8012856:	b508      	push	{r3, lr}
 8012858:	2200      	movs	r2, #0
 801285a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801285e:	f7ff ffdd 	bl	801281c <xflow>
 8012862:	ec41 0b10 	vmov	d0, r0, r1
 8012866:	bd08      	pop	{r3, pc}

08012868 <fabs>:
 8012868:	ec51 0b10 	vmov	r0, r1, d0
 801286c:	ee10 2a10 	vmov	r2, s0
 8012870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012874:	ec43 2b10 	vmov	d0, r2, r3
 8012878:	4770      	bx	lr

0801287a <finite>:
 801287a:	b082      	sub	sp, #8
 801287c:	ed8d 0b00 	vstr	d0, [sp]
 8012880:	9801      	ldr	r0, [sp, #4]
 8012882:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012886:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801288a:	0fc0      	lsrs	r0, r0, #31
 801288c:	b002      	add	sp, #8
 801288e:	4770      	bx	lr

08012890 <scalbn>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	ec55 4b10 	vmov	r4, r5, d0
 8012896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801289a:	4606      	mov	r6, r0
 801289c:	462b      	mov	r3, r5
 801289e:	b99a      	cbnz	r2, 80128c8 <scalbn+0x38>
 80128a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80128a4:	4323      	orrs	r3, r4
 80128a6:	d036      	beq.n	8012916 <scalbn+0x86>
 80128a8:	4b39      	ldr	r3, [pc, #228]	; (8012990 <scalbn+0x100>)
 80128aa:	4629      	mov	r1, r5
 80128ac:	ee10 0a10 	vmov	r0, s0
 80128b0:	2200      	movs	r2, #0
 80128b2:	f7ed fed1 	bl	8000658 <__aeabi_dmul>
 80128b6:	4b37      	ldr	r3, [pc, #220]	; (8012994 <scalbn+0x104>)
 80128b8:	429e      	cmp	r6, r3
 80128ba:	4604      	mov	r4, r0
 80128bc:	460d      	mov	r5, r1
 80128be:	da10      	bge.n	80128e2 <scalbn+0x52>
 80128c0:	a32b      	add	r3, pc, #172	; (adr r3, 8012970 <scalbn+0xe0>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	e03a      	b.n	801293e <scalbn+0xae>
 80128c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80128cc:	428a      	cmp	r2, r1
 80128ce:	d10c      	bne.n	80128ea <scalbn+0x5a>
 80128d0:	ee10 2a10 	vmov	r2, s0
 80128d4:	4620      	mov	r0, r4
 80128d6:	4629      	mov	r1, r5
 80128d8:	f7ed fd08 	bl	80002ec <__adddf3>
 80128dc:	4604      	mov	r4, r0
 80128de:	460d      	mov	r5, r1
 80128e0:	e019      	b.n	8012916 <scalbn+0x86>
 80128e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80128e6:	460b      	mov	r3, r1
 80128e8:	3a36      	subs	r2, #54	; 0x36
 80128ea:	4432      	add	r2, r6
 80128ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80128f0:	428a      	cmp	r2, r1
 80128f2:	dd08      	ble.n	8012906 <scalbn+0x76>
 80128f4:	2d00      	cmp	r5, #0
 80128f6:	a120      	add	r1, pc, #128	; (adr r1, 8012978 <scalbn+0xe8>)
 80128f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128fc:	da1c      	bge.n	8012938 <scalbn+0xa8>
 80128fe:	a120      	add	r1, pc, #128	; (adr r1, 8012980 <scalbn+0xf0>)
 8012900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012904:	e018      	b.n	8012938 <scalbn+0xa8>
 8012906:	2a00      	cmp	r2, #0
 8012908:	dd08      	ble.n	801291c <scalbn+0x8c>
 801290a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801290e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012912:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012916:	ec45 4b10 	vmov	d0, r4, r5
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012920:	da19      	bge.n	8012956 <scalbn+0xc6>
 8012922:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012926:	429e      	cmp	r6, r3
 8012928:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801292c:	dd0a      	ble.n	8012944 <scalbn+0xb4>
 801292e:	a112      	add	r1, pc, #72	; (adr r1, 8012978 <scalbn+0xe8>)
 8012930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d1e2      	bne.n	80128fe <scalbn+0x6e>
 8012938:	a30f      	add	r3, pc, #60	; (adr r3, 8012978 <scalbn+0xe8>)
 801293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293e:	f7ed fe8b 	bl	8000658 <__aeabi_dmul>
 8012942:	e7cb      	b.n	80128dc <scalbn+0x4c>
 8012944:	a10a      	add	r1, pc, #40	; (adr r1, 8012970 <scalbn+0xe0>)
 8012946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d0b8      	beq.n	80128c0 <scalbn+0x30>
 801294e:	a10e      	add	r1, pc, #56	; (adr r1, 8012988 <scalbn+0xf8>)
 8012950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012954:	e7b4      	b.n	80128c0 <scalbn+0x30>
 8012956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801295a:	3236      	adds	r2, #54	; 0x36
 801295c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012960:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012964:	4620      	mov	r0, r4
 8012966:	4b0c      	ldr	r3, [pc, #48]	; (8012998 <scalbn+0x108>)
 8012968:	2200      	movs	r2, #0
 801296a:	e7e8      	b.n	801293e <scalbn+0xae>
 801296c:	f3af 8000 	nop.w
 8012970:	c2f8f359 	.word	0xc2f8f359
 8012974:	01a56e1f 	.word	0x01a56e1f
 8012978:	8800759c 	.word	0x8800759c
 801297c:	7e37e43c 	.word	0x7e37e43c
 8012980:	8800759c 	.word	0x8800759c
 8012984:	fe37e43c 	.word	0xfe37e43c
 8012988:	c2f8f359 	.word	0xc2f8f359
 801298c:	81a56e1f 	.word	0x81a56e1f
 8012990:	43500000 	.word	0x43500000
 8012994:	ffff3cb0 	.word	0xffff3cb0
 8012998:	3c900000 	.word	0x3c900000

0801299c <_close>:
 801299c:	4b02      	ldr	r3, [pc, #8]	; (80129a8 <_close+0xc>)
 801299e:	2258      	movs	r2, #88	; 0x58
 80129a0:	601a      	str	r2, [r3, #0]
 80129a2:	f04f 30ff 	mov.w	r0, #4294967295
 80129a6:	4770      	bx	lr
 80129a8:	2000b6b4 	.word	0x2000b6b4

080129ac <_fstat>:
 80129ac:	4b02      	ldr	r3, [pc, #8]	; (80129b8 <_fstat+0xc>)
 80129ae:	2258      	movs	r2, #88	; 0x58
 80129b0:	601a      	str	r2, [r3, #0]
 80129b2:	f04f 30ff 	mov.w	r0, #4294967295
 80129b6:	4770      	bx	lr
 80129b8:	2000b6b4 	.word	0x2000b6b4

080129bc <_getpid>:
 80129bc:	4b02      	ldr	r3, [pc, #8]	; (80129c8 <_getpid+0xc>)
 80129be:	2258      	movs	r2, #88	; 0x58
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	f04f 30ff 	mov.w	r0, #4294967295
 80129c6:	4770      	bx	lr
 80129c8:	2000b6b4 	.word	0x2000b6b4

080129cc <_isatty>:
 80129cc:	4b02      	ldr	r3, [pc, #8]	; (80129d8 <_isatty+0xc>)
 80129ce:	2258      	movs	r2, #88	; 0x58
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	2000      	movs	r0, #0
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	2000b6b4 	.word	0x2000b6b4

080129dc <_kill>:
 80129dc:	4b02      	ldr	r3, [pc, #8]	; (80129e8 <_kill+0xc>)
 80129de:	2258      	movs	r2, #88	; 0x58
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	f04f 30ff 	mov.w	r0, #4294967295
 80129e6:	4770      	bx	lr
 80129e8:	2000b6b4 	.word	0x2000b6b4

080129ec <_lseek>:
 80129ec:	4b02      	ldr	r3, [pc, #8]	; (80129f8 <_lseek+0xc>)
 80129ee:	2258      	movs	r2, #88	; 0x58
 80129f0:	601a      	str	r2, [r3, #0]
 80129f2:	f04f 30ff 	mov.w	r0, #4294967295
 80129f6:	4770      	bx	lr
 80129f8:	2000b6b4 	.word	0x2000b6b4

080129fc <_read>:
 80129fc:	4b02      	ldr	r3, [pc, #8]	; (8012a08 <_read+0xc>)
 80129fe:	2258      	movs	r2, #88	; 0x58
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	f04f 30ff 	mov.w	r0, #4294967295
 8012a06:	4770      	bx	lr
 8012a08:	2000b6b4 	.word	0x2000b6b4

08012a0c <_write>:
 8012a0c:	4b02      	ldr	r3, [pc, #8]	; (8012a18 <_write+0xc>)
 8012a0e:	2258      	movs	r2, #88	; 0x58
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	f04f 30ff 	mov.w	r0, #4294967295
 8012a16:	4770      	bx	lr
 8012a18:	2000b6b4 	.word	0x2000b6b4

08012a1c <_exit>:
 8012a1c:	e7fe      	b.n	8012a1c <_exit>
	...

08012a20 <_init>:
 8012a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a22:	bf00      	nop
 8012a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a26:	bc08      	pop	{r3}
 8012a28:	469e      	mov	lr, r3
 8012a2a:	4770      	bx	lr

08012a2c <_fini>:
 8012a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a2e:	bf00      	nop
 8012a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a32:	bc08      	pop	{r3}
 8012a34:	469e      	mov	lr, r3
 8012a36:	4770      	bx	lr
