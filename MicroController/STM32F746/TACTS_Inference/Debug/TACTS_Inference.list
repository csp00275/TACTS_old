
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800e100  0800e100  0001e100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5fc  0800e5fc  000204b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5fc  0800e5fc  0001e5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e604  0800e604  000204b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e604  0800e604  0001e604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e608  0800e608  0001e608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b0  20000000  0800e60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  200004b0  0800eabc  000204b0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001a80  0800eabc  00021a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b890  00000000  00000000  000204e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fe  00000000  00000000  0003bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0003f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00040218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028168  00000000  00000000  00041258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178b3  00000000  00000000  000693c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef0af  00000000  00000000  00080c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016fd22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b4c  00000000  00000000  0016fd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001758c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0017598c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004b0 	.word	0x200004b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e0e4 	.word	0x0800e0e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004b4 	.word	0x200004b4
 800020c:	0800e0e4 	.word	0x0800e0e4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_I2C1_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <MX_I2C1_Init+0x7c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f48:	f001 fc16 	bl	8002778 <HAL_I2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f52:	f000 fae9 	bl	8001528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f5a:	f002 fe67 	bl	8003c2c <HAL_I2CEx_ConfigAnalogFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 fae0 	bl	8001528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f6c:	f002 fea9 	bl	8003cc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 fad7 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200004cc 	.word	0x200004cc
 8000f84:	40005400 	.word	0x40005400
 8000f88:	6000030d 	.word	0x6000030d

08000f8c <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6178      	str	r0, [r7, #20]
 8000f94:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f98:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f9c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000fa0:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	60da      	str	r2, [r3, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	edd3 6a04 	vldr	s13, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edd3 7a03 	vldr	s15, [r3, #12]
 800101c:	ed97 6a00 	vldr	s12, [r7]
 8001020:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edd3 7a04 	vldr	s15, [r3, #16]
 8001038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800103c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edd3 7a02 	vldr	s15, [r3, #8]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	ee07 3a90 	vmov	s15, r3
}
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800106c:	f3bf 8f4f 	dsb	sy
}
 8001070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001072:	f3bf 8f6f 	isb	sy
}
 8001076:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <SCB_EnableICache+0x48>)
 800107a:	2200      	movs	r2, #0
 800107c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001080:	f3bf 8f4f 	dsb	sy
}
 8001084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001086:	f3bf 8f6f 	isb	sy
}
 800108a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SCB_EnableICache+0x48>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <SCB_EnableICache+0x48>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001096:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800109e:	f3bf 8f6f 	isb	sy
}
 80010a2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SCB_EnableDCache+0x84>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80010c2:	f3bf 8f4f 	dsb	sy
}
 80010c6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <SCB_EnableDCache+0x84>)
 80010ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ce:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	0b5b      	lsrs	r3, r3, #13
 80010d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010d8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80010ec:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010f2:	4911      	ldr	r1, [pc, #68]	; (8001138 <SCB_EnableDCache+0x84>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	60ba      	str	r2, [r7, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ef      	bne.n	80010e4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	60fa      	str	r2, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1e5      	bne.n	80010da <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800110e:	f3bf 8f4f 	dsb	sy
}
 8001112:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <SCB_EnableDCache+0x84>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <SCB_EnableDCache+0x84>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001120:	f3bf 8f4f 	dsb	sy
}
 8001124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001126:	f3bf 8f6f 	isb	sy
}
 800112a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <ProcessCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ProcessCommand(uint8_t *command)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {
 8001144:	491a      	ldr	r1, [pc, #104]	; (80011b0 <ProcessCommand+0x74>)
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff f862 	bl	8000210 <strcmp>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10b      	bne.n	800116a <ProcessCommand+0x2e>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 8001152:	4918      	ldr	r1, [pc, #96]	; (80011b4 <ProcessCommand+0x78>)
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <ProcessCommand+0x7c>)
 8001156:	f00a fe09 	bl	800bd6c <siprintf>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	4915      	ldr	r1, [pc, #84]	; (80011b8 <ProcessCommand+0x7c>)
 8001162:	4816      	ldr	r0, [pc, #88]	; (80011bc <ProcessCommand+0x80>)
 8001164:	f003 ff52 	bl	800500c <HAL_UART_Transmit>
    } else if (strcmp((char*)command, "2") == 0) {
    	SecondCommand();
    } else {
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 8001168:	e01e      	b.n	80011a8 <ProcessCommand+0x6c>
    } else if (strcmp((char*)command, "1") == 0) {
 800116a:	4915      	ldr	r1, [pc, #84]	; (80011c0 <ProcessCommand+0x84>)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f84f 	bl	8000210 <strcmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <ProcessCommand+0x42>
    	FirstCommand();
 8001178:	f000 f828 	bl	80011cc <FirstCommand>
}
 800117c:	e014      	b.n	80011a8 <ProcessCommand+0x6c>
    } else if (strcmp((char*)command, "2") == 0) {
 800117e:	4911      	ldr	r1, [pc, #68]	; (80011c4 <ProcessCommand+0x88>)
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff f845 	bl	8000210 <strcmp>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <ProcessCommand+0x56>
    	SecondCommand();
 800118c:	f000 f834 	bl	80011f8 <SecondCommand>
}
 8001190:	e00a      	b.n	80011a8 <ProcessCommand+0x6c>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <ProcessCommand+0x8c>)
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <ProcessCommand+0x7c>)
 8001196:	f00a fde9 	bl	800bd6c <siprintf>
 800119a:	4603      	mov	r3, r0
 800119c:	b29a      	uxth	r2, r3
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	4905      	ldr	r1, [pc, #20]	; (80011b8 <ProcessCommand+0x7c>)
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <ProcessCommand+0x80>)
 80011a4:	f003 ff32 	bl	800500c <HAL_UART_Transmit>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800e100 	.word	0x0800e100
 80011b4:	0800e108 	.word	0x0800e108
 80011b8:	200005d0 	.word	0x200005d0
 80011bc:	20000548 	.word	0x20000548
 80011c0:	0800e110 	.word	0x0800e110
 80011c4:	0800e114 	.word	0x0800e114
 80011c8:	0800e118 	.word	0x0800e118

080011cc <FirstCommand>:


void FirstCommand()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "FirstCommand\n"), 100);
 80011d0:	4906      	ldr	r1, [pc, #24]	; (80011ec <FirstCommand+0x20>)
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <FirstCommand+0x24>)
 80011d4:	f00a fdca 	bl	800bd6c <siprintf>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	4904      	ldr	r1, [pc, #16]	; (80011f0 <FirstCommand+0x24>)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <FirstCommand+0x28>)
 80011e2:	f003 ff13 	bl	800500c <HAL_UART_Transmit>

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800e138 	.word	0x0800e138
 80011f0:	200005d0 	.word	0x200005d0
 80011f4:	20000548 	.word	0x20000548

080011f8 <SecondCommand>:

void SecondCommand()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80011fe:	4944      	ldr	r1, [pc, #272]	; (8001310 <SecondCommand+0x118>)
 8001200:	4844      	ldr	r0, [pc, #272]	; (8001314 <SecondCommand+0x11c>)
 8001202:	f00a fdb3 	bl	800bd6c <siprintf>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	4941      	ldr	r1, [pc, #260]	; (8001314 <SecondCommand+0x11c>)
 800120e:	4842      	ldr	r0, [pc, #264]	; (8001318 <SecondCommand+0x120>)
 8001210:	f003 fefc 	bl	800500c <HAL_UART_Transmit>

    uint32_t timeStart_s, timeEnd_s,timeDiff_s; // single
    uint32_t timeStart_a, timeEnd_a, timeDiff_a; // all

    timeStart_a = HAL_GetTick(); //
 8001214:	f000 fe38 	bl	8001e88 <HAL_GetTick>
 8001218:	61b8      	str	r0, [r7, #24]

    do {
    	timeStart_s = HAL_GetTick();
 800121a:	f000 fe35 	bl	8001e88 <HAL_GetTick>
 800121e:	6178      	str	r0, [r7, #20]

  	  /// Read the VL53l0x data ///
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	e042      	b.n	80012ac <SecondCommand+0xb4>

    	    uint8_t q = i / 12;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	4a3c      	ldr	r2, [pc, #240]	; (800131c <SecondCommand+0x124>)
 800122a:	fb82 1203 	smull	r1, r2, r2, r3
 800122e:	1052      	asrs	r2, r2, #1
 8001230:	17db      	asrs	r3, r3, #31
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	70fb      	strb	r3, [r7, #3]
    	    uint8_t r = i % 12;
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	4b38      	ldr	r3, [pc, #224]	; (800131c <SecondCommand+0x124>)
 800123a:	fb83 1302 	smull	r1, r3, r3, r2
 800123e:	1059      	asrs	r1, r3, #1
 8001240:	17d3      	asrs	r3, r2, #31
 8001242:	1ac9      	subs	r1, r1, r3
 8001244:	460b      	mov	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	1ad1      	subs	r1, r2, r3
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	78ba      	ldrb	r2, [r7, #2]
 800125a:	2a07      	cmp	r2, #7
 800125c:	bf8c      	ite	hi
 800125e:	2201      	movhi	r2, #1
 8001260:	2200      	movls	r2, #0
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	4413      	add	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001268:	78bb      	ldrb	r3, [r7, #2]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d903      	bls.n	8001276 <SecondCommand+0x7e>
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	3b08      	subs	r3, #8
 8001272:	b2db      	uxtb	r3, r3
 8001274:	e000      	b.n	8001278 <SecondCommand+0x80>
 8001276:	78bb      	ldrb	r3, [r7, #2]
 8001278:	703b      	strb	r3, [r7, #0]

    	    resetTcaDevicesExcept(active_device, tca_addr);
 800127a:	787b      	ldrb	r3, [r7, #1]
 800127c:	4928      	ldr	r1, [pc, #160]	; (8001320 <SecondCommand+0x128>)
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fbee 	bl	8001a60 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 8001284:	7839      	ldrb	r1, [r7, #0]
 8001286:	787b      	ldrb	r3, [r7, #1]
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <SecondCommand+0x128>)
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fc14 	bl	8001ab8 <setActiveTcaChannel>
            excuteVl53l0x(&vl53l0x_s[i],i);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <SecondCommand+0x12c>)
 800129c:	4413      	add	r3, r2
 800129e:	69f9      	ldr	r1, [r7, #28]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fd29 	bl	8001cf8 <excuteVl53l0x>
        for (int i = 0; i < NUM_SENSOR; i++) {
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0b      	cmp	r3, #11
 80012b0:	ddb9      	ble.n	8001226 <SecondCommand+0x2e>

        }

		timeEnd_s = HAL_GetTick();
 80012b2:	f000 fde9 	bl	8001e88 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]
		timeDiff_s = timeEnd_s - timeStart_s;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", timeDiff_s), 100);
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4919      	ldr	r1, [pc, #100]	; (8001328 <SecondCommand+0x130>)
 80012c4:	4813      	ldr	r0, [pc, #76]	; (8001314 <SecondCommand+0x11c>)
 80012c6:	f00a fd51 	bl	800bd6c <siprintf>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	4910      	ldr	r1, [pc, #64]	; (8001314 <SecondCommand+0x11c>)
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <SecondCommand+0x120>)
 80012d4:	f003 fe9a 	bl	800500c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 80012d8:	4914      	ldr	r1, [pc, #80]	; (800132c <SecondCommand+0x134>)
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <SecondCommand+0x11c>)
 80012dc:	f00a fd46 	bl	800bd6c <siprintf>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	2364      	movs	r3, #100	; 0x64
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <SecondCommand+0x11c>)
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <SecondCommand+0x120>)
 80012ea:	f003 fe8f 	bl	800500c <HAL_UART_Transmit>

		timeEnd_a = HAL_GetTick();
 80012ee:	f000 fdcb 	bl	8001e88 <HAL_GetTick>
 80012f2:	60b8      	str	r0, [r7, #8]
		timeDiff_a = timeEnd_a - timeStart_a;
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	607b      	str	r3, [r7, #4]

    } while (timeDiff_a < 10000);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001302:	4293      	cmp	r3, r2
 8001304:	d989      	bls.n	800121a <SecondCommand+0x22>

}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	0800e148 	.word	0x0800e148
 8001314:	200005d0 	.word	0x200005d0
 8001318:	20000548 	.word	0x20000548
 800131c:	2aaaaaab 	.word	0x2aaaaaab
 8001320:	20000018 	.word	0x20000018
 8001324:	20000678 	.word	0x20000678
 8001328:	0800e158 	.word	0x0800e158
 800132c:	0800e160 	.word	0x0800e160

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001334:	f7ff fe98 	bl	8001068 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001338:	f7ff febc 	bl	80010b4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 fd53 	bl	8001de6 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f828 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f000 f8c0 	bl	80014c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001348:	f000 faca 	bl	80018e0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800134c:	f7ff fdde 	bl	8000f0c <MX_I2C1_Init>
  MX_CRC_Init();
 8001350:	f000 f898 	bl	8001484 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001354:	f000 f88a 	bl	800146c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */




  initializeAllSensors(tca_addr, vl53l0x_s, filters);
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <main+0x50>)
 800135a:	490a      	ldr	r1, [pc, #40]	; (8001384 <main+0x54>)
 800135c:	480a      	ldr	r0, [pc, #40]	; (8001388 <main+0x58>)
 800135e:	f000 fc23 	bl	8001ba8 <initializeAllSensors>

  startMsg();
 8001362:	f000 fb23 	bl	80019ac <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001366:	2241      	movs	r2, #65	; 0x41
 8001368:	4908      	ldr	r1, [pc, #32]	; (800138c <main+0x5c>)
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <main+0x60>)
 800136c:	f000 fae8 	bl	8001940 <ReceiveUartMessage>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f7      	bne.n	8001366 <main+0x36>
	  {
	      ProcessCommand(rxMsg);
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <main+0x5c>)
 8001378:	f7ff fee0 	bl	800113c <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800137c:	e7f3      	b.n	8001366 <main+0x36>
 800137e:	bf00      	nop
 8001380:	20001938 	.word	0x20001938
 8001384:	20000678 	.word	0x20000678
 8001388:	20000018 	.word	0x20000018
 800138c:	20000610 	.word	0x20000610
 8001390:	20000548 	.word	0x20000548

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f009 ff80 	bl	800b2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <SystemClock_Config+0xd0>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <SystemClock_Config+0xd0>)
 80013be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <SystemClock_Config+0xd0>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <SystemClock_Config+0xd4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a24      	ldr	r2, [pc, #144]	; (8001468 <SystemClock_Config+0xd4>)
 80013d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <SystemClock_Config+0xd4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001400:	23d8      	movs	r3, #216	; 0xd8
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fcf3 	bl	8003dfc <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800141c:	f000 f884 	bl	8001528 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001420:	f002 fc9c 	bl	8003d5c <HAL_PWREx_EnableOverDrive>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800142a:	f000 f87d 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142e:	230f      	movs	r3, #15
 8001430:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2302      	movs	r3, #2
 8001434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800143a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800143e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2107      	movs	r1, #7
 800144c:	4618      	mov	r0, r3
 800144e:	f002 ff79 	bl	8004344 <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001458:	f000 f866 	bl	8001528 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3750      	adds	r7, #80	; 0x50
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000

0800146c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2025      	movs	r0, #37	; 0x25
 8001476:	f000 fe12 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800147a:	2025      	movs	r0, #37	; 0x25
 800147c:	f000 fe2b 	bl	80020d6 <HAL_NVIC_EnableIRQ>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <MX_CRC_Init+0x3c>)
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <MX_CRC_Init+0x40>)
 800148c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_CRC_Init+0x3c>)
 8001490:	2200      	movs	r2, #0
 8001492:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_CRC_Init+0x3c>)
 8001496:	2200      	movs	r2, #0
 8001498:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_CRC_Init+0x3c>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_CRC_Init+0x3c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_CRC_Init+0x3c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_CRC_Init+0x3c>)
 80014ae:	f000 fe2d 	bl	800210c <HAL_CRC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014b8:	f000 f836 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000520 	.word	0x20000520
 80014c4:	40023000 	.word	0x40023000

080014c8 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_GPIO_Init+0x5c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <MX_GPIO_Init+0x5c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_GPIO_Init+0x5c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_GPIO_Init+0x5c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <MX_GPIO_Init+0x5c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_GPIO_Init+0x5c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_GPIO_Init+0x5c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <MX_GPIO_Init+0x5c>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_GPIO_Init+0x5c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8001530:	4905      	ldr	r1, [pc, #20]	; (8001548 <Error_Handler+0x20>)
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <Error_Handler+0x24>)
 8001534:	f00a fc1a 	bl	800bd6c <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	4903      	ldr	r1, [pc, #12]	; (800154c <Error_Handler+0x24>)
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <Error_Handler+0x28>)
 8001542:	f003 fd63 	bl	800500c <HAL_UART_Transmit>
 8001546:	e7f3      	b.n	8001530 <Error_Handler+0x8>
 8001548:	0800e164 	.word	0x0800e164
 800154c:	200005d0 	.word	0x200005d0
 8001550:	20000548 	.word	0x20000548

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x44>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x44>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x44>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x44>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x44>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x44>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_CRC_MspInit+0x38>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10b      	bne.n	80015c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_CRC_MspInit+0x3c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_CRC_MspInit+0x3c>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_CRC_MspInit+0x3c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023000 	.word	0x40023000
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0aa      	sub	sp, #168	; 0xa8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	2284      	movs	r2, #132	; 0x84
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f009 fe53 	bl	800b2a8 <memset>
  if(hi2c->Instance==I2C1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_I2C_MspInit+0xd4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d14c      	bne.n	80016a6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001610:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001612:	2300      	movs	r3, #0
 8001614:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4618      	mov	r0, r3
 800161c:	f003 f8b8 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001626:	f7ff ff7f 	bl	8001528 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_I2C_MspInit+0xd8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_I2C_MspInit+0xd8>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_I2C_MspInit+0xd8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165c:	2304      	movs	r3, #4
 800165e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001666:	4619      	mov	r1, r3
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <HAL_I2C_MspInit+0xdc>)
 800166a:	f000 fed9 	bl	8002420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_I2C_MspInit+0xd8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_I2C_MspInit+0xd8>)
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_I2C_MspInit+0xd8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201f      	movs	r0, #31
 800168c:	f000 fd07 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001690:	201f      	movs	r0, #31
 8001692:	f000 fd20 	bl	80020d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2020      	movs	r0, #32
 800169c:	f000 fcff 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016a0:	2020      	movs	r0, #32
 80016a2:	f000 fd18 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	37a8      	adds	r7, #168	; 0xa8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0ac      	sub	sp, #176	; 0xb0
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	2284      	movs	r2, #132	; 0x84
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f009 fde3 	bl	800b2a8 <memset>
  if(huart->Instance==USART1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_UART_MspInit+0xf4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d15c      	bne.n	80017a6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016f0:	2300      	movs	r3, #0
 80016f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 f849 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001704:	f7ff ff10 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6453      	str	r3, [r2, #68]	; 0x44
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	6313      	str	r3, [r2, #48]	; 0x30
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6313      	str	r3, [r2, #48]	; 0x30
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_UART_MspInit+0xf8>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001768:	2307      	movs	r3, #7
 800176a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001772:	4619      	mov	r1, r3
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <HAL_UART_MspInit+0xfc>)
 8001776:	f000 fe53 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001794:	2307      	movs	r3, #7
 8001796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800179e:	4619      	mov	r1, r3
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_UART_MspInit+0x100>)
 80017a2:	f000 fe3d 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	37b0      	adds	r7, #176	; 0xb0
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020000 	.word	0x40020000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 fb28 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <I2C1_EV_IRQHandler+0x10>)
 800181a:	f001 fa27 	bl	8002c6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200004cc 	.word	0x200004cc

08001828 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <I2C1_ER_IRQHandler+0x10>)
 800182e:	f001 fa37 	bl	8002ca0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200004cc 	.word	0x200004cc

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART1_IRQHandler+0x10>)
 8001842:	f003 fd2b 	bl	800529c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000548 	.word	0x20000548

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f009 fcd2 	bl	800b228 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20050000 	.word	0x20050000
 80018b0:	00000800 	.word	0x00000800
 80018b4:	20000544 	.word	0x20000544
 80018b8:	20001a80 	.word	0x20001a80

080018bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_USART1_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART1_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001924:	f003 fb24 	bl	8004f70 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800192e:	f7ff fdfb 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000548 	.word	0x20000548
 800193c:	40011000 	.word	0x40011000

08001940 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8001952:	f107 0115 	add.w	r1, r7, #21
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	2201      	movs	r2, #1
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f003 fbd8 	bl	8005112 <HAL_UART_Receive>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f4      	bne.n	8001952 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8001968:	7d7b      	ldrb	r3, [r7, #21]
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d106      	bne.n	800197c <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800196e:	8afb      	ldrh	r3, [r7, #22]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	4413      	add	r3, r2
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e012      	b.n	80019a2 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 800197c:	8afb      	ldrh	r3, [r7, #22]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	4413      	add	r3, r2
 8001982:	7d7a      	ldrb	r2, [r7, #21]
 8001984:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8001986:	8afb      	ldrh	r3, [r7, #22]
 8001988:	3301      	adds	r3, #1
 800198a:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 800198c:	8afa      	ldrh	r2, [r7, #22]
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	429a      	cmp	r2, r3
 8001992:	d3de      	bcc.n	8001952 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8001994:	8afb      	ldrh	r3, [r7, #22]
 8001996:	3b01      	subs	r3, #1
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	4413      	add	r3, r2
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <startMsg>:

void startMsg(){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80019b0:	4927      	ldr	r1, [pc, #156]	; (8001a50 <startMsg+0xa4>)
 80019b2:	4828      	ldr	r0, [pc, #160]	; (8001a54 <startMsg+0xa8>)
 80019b4:	f00a f9da 	bl	800bd6c <siprintf>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	4925      	ldr	r1, [pc, #148]	; (8001a54 <startMsg+0xa8>)
 80019c0:	4825      	ldr	r0, [pc, #148]	; (8001a58 <startMsg+0xac>)
 80019c2:	f003 fb23 	bl	800500c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80019c6:	4922      	ldr	r1, [pc, #136]	; (8001a50 <startMsg+0xa4>)
 80019c8:	4822      	ldr	r0, [pc, #136]	; (8001a54 <startMsg+0xa8>)
 80019ca:	f00a f9cf 	bl	800bd6c <siprintf>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	2364      	movs	r3, #100	; 0x64
 80019d4:	491f      	ldr	r1, [pc, #124]	; (8001a54 <startMsg+0xa8>)
 80019d6:	4820      	ldr	r0, [pc, #128]	; (8001a58 <startMsg+0xac>)
 80019d8:	f003 fb18 	bl	800500c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80019dc:	491c      	ldr	r1, [pc, #112]	; (8001a50 <startMsg+0xa4>)
 80019de:	481d      	ldr	r0, [pc, #116]	; (8001a54 <startMsg+0xa8>)
 80019e0:	f00a f9c4 	bl	800bd6c <siprintf>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2364      	movs	r3, #100	; 0x64
 80019ea:	491a      	ldr	r1, [pc, #104]	; (8001a54 <startMsg+0xa8>)
 80019ec:	481a      	ldr	r0, [pc, #104]	; (8001a58 <startMsg+0xac>)
 80019ee:	f003 fb0d 	bl	800500c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 80019f2:	491a      	ldr	r1, [pc, #104]	; (8001a5c <startMsg+0xb0>)
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <startMsg+0xa8>)
 80019f6:	f00a f9b9 	bl	800bd6c <siprintf>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	4914      	ldr	r1, [pc, #80]	; (8001a54 <startMsg+0xa8>)
 8001a02:	4815      	ldr	r0, [pc, #84]	; (8001a58 <startMsg+0xac>)
 8001a04:	f003 fb02 	bl	800500c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8001a08:	4911      	ldr	r1, [pc, #68]	; (8001a50 <startMsg+0xa4>)
 8001a0a:	4812      	ldr	r0, [pc, #72]	; (8001a54 <startMsg+0xa8>)
 8001a0c:	f00a f9ae 	bl	800bd6c <siprintf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	2364      	movs	r3, #100	; 0x64
 8001a16:	490f      	ldr	r1, [pc, #60]	; (8001a54 <startMsg+0xa8>)
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <startMsg+0xac>)
 8001a1a:	f003 faf7 	bl	800500c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8001a1e:	490c      	ldr	r1, [pc, #48]	; (8001a50 <startMsg+0xa4>)
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <startMsg+0xa8>)
 8001a22:	f00a f9a3 	bl	800bd6c <siprintf>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2364      	movs	r3, #100	; 0x64
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <startMsg+0xa8>)
 8001a2e:	480a      	ldr	r0, [pc, #40]	; (8001a58 <startMsg+0xac>)
 8001a30:	f003 faec 	bl	800500c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <startMsg+0xa4>)
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <startMsg+0xa8>)
 8001a38:	f00a f998 	bl	800bd6c <siprintf>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	4904      	ldr	r1, [pc, #16]	; (8001a54 <startMsg+0xa8>)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <startMsg+0xac>)
 8001a46:	f003 fae1 	bl	800500c <HAL_UART_Transmit>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0800e16c 	.word	0x0800e16c
 8001a54:	200005d0 	.word	0x200005d0
 8001a58:	20000548 	.word	0x20000548
 8001a5c:	0800e1ac 	.word	0x0800e1ac

08001a60 <resetTcaDevicesExcept>:
	uint8_t tca_addr[6] = {0x70, 0x71, 0x72, 0x73, 0x74, 0x75};
#elif NUM_SENSOR <=48
	uint8_t tca_addr[8] = {0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77};
#endif

void resetTcaDevicesExcept(uint8_t active_device, const uint8_t *tca_addr) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e015      	b.n	8001a9e <resetTcaDevicesExcept+0x3e>
        if (j != active_device) {
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d00e      	beq.n	8001a98 <resetTcaDevicesExcept+0x38>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	b299      	uxth	r1, r3
 8001a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <resetTcaDevicesExcept+0x50>)
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <resetTcaDevicesExcept+0x54>)
 8001a94:	f000 ff00 	bl	8002898 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d9e6      	bls.n	8001a72 <resetTcaDevicesExcept+0x12>
        }
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20001a28 	.word	0x20001a28
 8001ab4:	200004cc 	.word	0x200004cc

08001ab8 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel, const uint8_t *tca_addr) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	4603      	mov	r3, r0
 8001ac0:	603a      	str	r2, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <setActiveTcaChannel+0x3c>)
 8001ada:	441a      	add	r2, r3
 8001adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <setActiveTcaChannel+0x40>)
 8001ae6:	f000 fed7 	bl	8002898 <HAL_I2C_Master_Transmit>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000010 	.word	0x20000010
 8001af8:	200004cc 	.word	0x200004cc

08001afc <initializeVl53l0x>:

void initializeVl53l0x(VL53L0X_Dev_t *Dev) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	Dev->I2cHandle = &hi2c1;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <initializeVl53l0x+0x98>)
 8001b08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2252      	movs	r2, #82	; 0x52
 8001b10:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	VL53L0X_WaitDeviceBooted( Dev );
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f004 fe53 	bl	80067c0 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f004 fb6a 	bl	80061f4 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f004 fccb 	bl	80064bc <VL53L0X_StaticInit>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001b26:	2101      	movs	r1, #1
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f004 fee7 	bl	80068fc <VL53L0X_SetDeviceMode>
	VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <initializeVl53l0x+0x9c>)
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <initializeVl53l0x+0xa0>)
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f005 fb64 	bl	8007200 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <initializeVl53l0x+0xa4>)
 8001b3a:	491a      	ldr	r1, [pc, #104]	; (8001ba4 <initializeVl53l0x+0xa8>)
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f005 ffed 	bl	8007b1c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2100      	movs	r1, #0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f005 f954 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f005 f94f 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001b56:	f641 1299 	movw	r2, #6553	; 0x1999
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f005 f9f9 	bl	8006f54 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001b62:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b66:	2100      	movs	r1, #0
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 f9f3 	bl	8006f54 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8001b6e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f004 ff20 	bl	80069b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001b78:	2212      	movs	r2, #18
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f004 ff41 	bl	8006a04 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001b82:	220e      	movs	r2, #14
 8001b84:	2101      	movs	r1, #1
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f004 ff3c 	bl	8006a04 <VL53L0X_SetVcselPulsePeriod>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200004cc 	.word	0x200004cc
 8001b98:	20000676 	.word	0x20000676
 8001b9c:	20000675 	.word	0x20000675
 8001ba0:	20000674 	.word	0x20000674
 8001ba4:	20000670 	.word	0x20000670

08001ba8 <initializeAllSensors>:

void initializeAllSensors(uint8_t *tca_addr, VL53L0X_Dev_t *vl53l0x_s, KalmanFilter *filters) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	e011      	b.n	8001bde <initializeAllSensors+0x36>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	b299      	uxth	r1, r3
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <initializeAllSensors+0x128>)
 8001bd2:	4840      	ldr	r0, [pc, #256]	; (8001cd4 <initializeAllSensors+0x12c>)
 8001bd4:	f000 fe60 	bl	8002898 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d9ea      	bls.n	8001bba <initializeAllSensors+0x12>
    }

    for (int i = 0; i < NUM_SENSOR; i++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	e069      	b.n	8001cbe <initializeAllSensors+0x116>
        uint8_t q = i / 12;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <initializeAllSensors+0x130>)
 8001bee:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf2:	1052      	asrs	r2, r2, #1
 8001bf4:	17db      	asrs	r3, r3, #31
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	75fb      	strb	r3, [r7, #23]
        uint8_t r = i % 12;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <initializeAllSensors+0x130>)
 8001bfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001c02:	1059      	asrs	r1, r3, #1
 8001c04:	17d3      	asrs	r3, r2, #31
 8001c06:	1ac9      	subs	r1, r1, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	1ad1      	subs	r1, r2, r3
 8001c12:	460b      	mov	r3, r1
 8001c14:	75bb      	strb	r3, [r7, #22]
        uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	7dba      	ldrb	r2, [r7, #22]
 8001c1e:	2a07      	cmp	r2, #7
 8001c20:	bf8c      	ite	hi
 8001c22:	2201      	movhi	r2, #1
 8001c24:	2200      	movls	r2, #0
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	4413      	add	r3, r2
 8001c2a:	757b      	strb	r3, [r7, #21]
        uint8_t channel = (r >= 8) ? r - 8 : r;
 8001c2c:	7dbb      	ldrb	r3, [r7, #22]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d903      	bls.n	8001c3a <initializeAllSensors+0x92>
 8001c32:	7dbb      	ldrb	r3, [r7, #22]
 8001c34:	3b08      	subs	r3, #8
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	e000      	b.n	8001c3c <initializeAllSensors+0x94>
 8001c3a:	7dbb      	ldrb	r3, [r7, #22]
 8001c3c:	753b      	strb	r3, [r7, #20]

        resetTcaDevicesExcept(active_device, tca_addr);
 8001c3e:	7d7b      	ldrb	r3, [r7, #21]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff0c 	bl	8001a60 <resetTcaDevicesExcept>
        setActiveTcaChannel(active_device, channel, tca_addr);
 8001c48:	7d39      	ldrb	r1, [r7, #20]
 8001c4a:	7d7b      	ldrb	r3, [r7, #21]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff32 	bl	8001ab8 <setActiveTcaChannel>

        initializeVl53l0x(&vl53l0x_s[i]);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	4413      	add	r3, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff4a 	bl	8001afc <initializeVl53l0x>
        Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <initializeAllSensors+0x134>)
 8001c7a:	edd2 7a00 	vldr	s15, [r2]
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <initializeAllSensors+0x138>)
 8001c80:	ed92 7a00 	vldr	s14, [r2]
 8001c84:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <initializeAllSensors+0x13c>)
 8001c86:	edd2 6a00 	vldr	s13, [r2]
 8001c8a:	eddf 1a17 	vldr	s3, [pc, #92]	; 8001ce8 <initializeAllSensors+0x140>
 8001c8e:	eeb0 1a66 	vmov.f32	s2, s13
 8001c92:	eef0 0a47 	vmov.f32	s1, s14
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f976 	bl	8000f8c <Kalman_Init>

        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r", i), 100);
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4912      	ldr	r1, [pc, #72]	; (8001cec <initializeAllSensors+0x144>)
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <initializeAllSensors+0x148>)
 8001ca6:	f00a f861 	bl	800bd6c <siprintf>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	2364      	movs	r3, #100	; 0x64
 8001cb0:	490f      	ldr	r1, [pc, #60]	; (8001cf0 <initializeAllSensors+0x148>)
 8001cb2:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <initializeAllSensors+0x14c>)
 8001cb4:	f003 f9aa 	bl	800500c <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0b      	cmp	r3, #11
 8001cc2:	dd92      	ble.n	8001bea <initializeAllSensors+0x42>
    }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20001a28 	.word	0x20001a28
 8001cd4:	200004cc 	.word	0x200004cc
 8001cd8:	2aaaaaab 	.word	0x2aaaaaab
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	0800e1ec 	.word	0x0800e1ec
 8001cf0:	200005d0 	.word	0x200005d0
 8001cf4:	20000548 	.word	0x20000548

08001cf8 <excuteVl53l0x>:

void excuteVl53l0x(VL53L0X_Dev_t *Dev,int i) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001d02:	491e      	ldr	r1, [pc, #120]	; (8001d7c <excuteVl53l0x+0x84>)
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f005 ff1e 	bl	8007b46 <VL53L0X_PerformContinuousRangingMeasurement>
    if (RangingData.RangeStatus == 0) {
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <excuteVl53l0x+0x84>)
 8001d0c:	7e1b      	ldrb	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d124      	bne.n	8001d5c <excuteVl53l0x+0x64>
        float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <excuteVl53l0x+0x88>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <excuteVl53l0x+0x84>)
 8001d22:	8912      	ldrh	r2, [r2, #8]
 8001d24:	ee07 2a90 	vmov	s15, r2
 8001d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f949 	bl	8000fc8 <Kalman_Estimate>
 8001d36:	ed87 0a03 	vstr	s0, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", filteredValue), 100);
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7fe fc34 	bl	80005a8 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	490f      	ldr	r1, [pc, #60]	; (8001d84 <excuteVl53l0x+0x8c>)
 8001d46:	4810      	ldr	r0, [pc, #64]	; (8001d88 <excuteVl53l0x+0x90>)
 8001d48:	f00a f810 	bl	800bd6c <siprintf>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2364      	movs	r3, #100	; 0x64
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <excuteVl53l0x+0x90>)
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <excuteVl53l0x+0x94>)
 8001d56:	f003 f959 	bl	800500c <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
    }
}
 8001d5a:	e00a      	b.n	8001d72 <excuteVl53l0x+0x7a>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <excuteVl53l0x+0x98>)
 8001d5e:	480a      	ldr	r0, [pc, #40]	; (8001d88 <excuteVl53l0x+0x90>)
 8001d60:	f00a f804 	bl	800bd6c <siprintf>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	4907      	ldr	r1, [pc, #28]	; (8001d88 <excuteVl53l0x+0x90>)
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <excuteVl53l0x+0x94>)
 8001d6e:	f003 f94d 	bl	800500c <HAL_UART_Transmit>
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000654 	.word	0x20000654
 8001d80:	20001938 	.word	0x20001938
 8001d84:	0800e1fc 	.word	0x0800e1fc
 8001d88:	200005d0 	.word	0x200005d0
 8001d8c:	20000548 	.word	0x20000548
 8001d90:	0800e204 	.word	0x0800e204

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db0:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dbe:	f7ff fd7d 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f009 fa37 	bl	800b234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff fab3 	bl	8001330 <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	200004b0 	.word	0x200004b0
  ldr r2, =_sidata
 8001dd8:	0800e60c 	.word	0x0800e60c
  ldr r2, =_sbss
 8001ddc:	200004b0 	.word	0x200004b0
  ldr r4, =_ebss
 8001de0:	20001a80 	.word	0x20001a80

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>

08001de6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f000 f94c 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df0:	200f      	movs	r0, #15
 8001df2:	f000 f805 	bl	8001e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df6:	f7ff fbad 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x54>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x58>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f967 	bl	80020f2 <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00e      	b.n	8001e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d80a      	bhi.n	8001e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 f92f 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_InitTick+0x5c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000020 	.word	0x20000020
 8001e5c:	2000001c 	.word	0x2000001c

08001e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000020 	.word	0x20000020
 8001e84:	20001a2c 	.word	0x20001a2c

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20001a2c 	.word	0x20001a2c

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff ffee 	bl	8001e88 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000020 	.word	0x20000020

08001ee8 <__NVIC_SetPriorityGrouping>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <__NVIC_SetPriorityGrouping+0x40>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x40>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	05fa0000 	.word	0x05fa0000

08001f30 <__NVIC_GetPriorityGrouping>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff29 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff3e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff31 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e054      	b.n	80021c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7f5b      	ldrb	r3, [r3, #29]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fa34 	bl	800159c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	791b      	ldrb	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_CRC_Init+0xc4>)
 8002148:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0218 	bic.w	r2, r2, #24
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e00c      	b.n	8002176 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	461a      	mov	r2, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f834 	bl	80021d4 <HAL_CRCEx_Polynomial_Set>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e028      	b.n	80021c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	795b      	ldrb	r3, [r3, #5]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 32ff 	mov.w	r2, #4294967295
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	e004      	b.n	8002194 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6912      	ldr	r2, [r2, #16]
 8002192:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	04c11db7 	.word	0x04c11db7

080021d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021e4:	231f      	movs	r3, #31
 80021e6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021e8:	bf00      	nop
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	613a      	str	r2, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <HAL_CRCEx_Polynomial_Set+0x34>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b18      	cmp	r3, #24
 800220c:	d846      	bhi.n	800229c <HAL_CRCEx_Polynomial_Set+0xc8>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	080022a3 	.word	0x080022a3
 8002218:	0800229d 	.word	0x0800229d
 800221c:	0800229d 	.word	0x0800229d
 8002220:	0800229d 	.word	0x0800229d
 8002224:	0800229d 	.word	0x0800229d
 8002228:	0800229d 	.word	0x0800229d
 800222c:	0800229d 	.word	0x0800229d
 8002230:	0800229d 	.word	0x0800229d
 8002234:	08002291 	.word	0x08002291
 8002238:	0800229d 	.word	0x0800229d
 800223c:	0800229d 	.word	0x0800229d
 8002240:	0800229d 	.word	0x0800229d
 8002244:	0800229d 	.word	0x0800229d
 8002248:	0800229d 	.word	0x0800229d
 800224c:	0800229d 	.word	0x0800229d
 8002250:	0800229d 	.word	0x0800229d
 8002254:	08002285 	.word	0x08002285
 8002258:	0800229d 	.word	0x0800229d
 800225c:	0800229d 	.word	0x0800229d
 8002260:	0800229d 	.word	0x0800229d
 8002264:	0800229d 	.word	0x0800229d
 8002268:	0800229d 	.word	0x0800229d
 800226c:	0800229d 	.word	0x0800229d
 8002270:	0800229d 	.word	0x0800229d
 8002274:	08002279 	.word	0x08002279
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b06      	cmp	r3, #6
 800227c:	d913      	bls.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002282:	e010      	b.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d90f      	bls.n	80022aa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800228e:	e00c      	b.n	80022aa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d90b      	bls.n	80022ae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800229a:	e008      	b.n	80022ae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	75fb      	strb	r3, [r7, #23]
      break;
 80022a0:	e006      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022a2:	bf00      	nop
 80022a4:	e004      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022ae:	bf00      	nop
  }
  if (status == HAL_OK)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 0118 	bic.w	r1, r3, #24
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022ee:	f7ff fdcb 	bl	8001e88 <HAL_GetTick>
 80022f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e052      	b.n	80023b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0216 	bic.w	r2, r2, #22
 8002320:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002330:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <HAL_DMA_Abort+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0208 	bic.w	r2, r2, #8
 8002350:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002362:	e013      	b.n	800238c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002364:	f7ff fd90 	bl	8001e88 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b05      	cmp	r3, #5
 8002370:	d90c      	bls.n	800238c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2203      	movs	r2, #3
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e015      	b.n	80023b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e4      	bne.n	8002364 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	223f      	movs	r2, #63	; 0x3f
 80023a0:	409a      	lsls	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2280      	movs	r2, #128	; 0x80
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00c      	b.n	80023f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2205      	movs	r2, #5
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002412:	b2db      	uxtb	r3, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e175      	b.n	800272c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8164 	bne.w	8002726 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_Init+0x56>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d130      	bne.n	80024d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d017      	beq.n	8002514 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80be 	beq.w	8002726 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_GPIO_Init+0x324>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_GPIO_Init+0x324>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_GPIO_Init+0x324>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025c2:	4a61      	ldr	r2, [pc, #388]	; (8002748 <HAL_GPIO_Init+0x328>)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a58      	ldr	r2, [pc, #352]	; (800274c <HAL_GPIO_Init+0x32c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d037      	beq.n	800265e <HAL_GPIO_Init+0x23e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a57      	ldr	r2, [pc, #348]	; (8002750 <HAL_GPIO_Init+0x330>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_GPIO_Init+0x23a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_GPIO_Init+0x334>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <HAL_GPIO_Init+0x236>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a55      	ldr	r2, [pc, #340]	; (8002758 <HAL_GPIO_Init+0x338>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x232>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a54      	ldr	r2, [pc, #336]	; (800275c <HAL_GPIO_Init+0x33c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x22e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a53      	ldr	r2, [pc, #332]	; (8002760 <HAL_GPIO_Init+0x340>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x22a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_GPIO_Init+0x344>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x226>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a51      	ldr	r2, [pc, #324]	; (8002768 <HAL_GPIO_Init+0x348>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x222>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a50      	ldr	r2, [pc, #320]	; (800276c <HAL_GPIO_Init+0x34c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x21e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4f      	ldr	r2, [pc, #316]	; (8002770 <HAL_GPIO_Init+0x350>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x21a>
 8002636:	2309      	movs	r3, #9
 8002638:	e012      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800263a:	230a      	movs	r3, #10
 800263c:	e010      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800263e:	2308      	movs	r3, #8
 8002640:	e00e      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002642:	2307      	movs	r3, #7
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002646:	2306      	movs	r3, #6
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800265e:	2300      	movs	r3, #0
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002670:	4935      	ldr	r1, [pc, #212]	; (8002748 <HAL_GPIO_Init+0x328>)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_GPIO_Init+0x354>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <HAL_GPIO_Init+0x354>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a8:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_GPIO_Init+0x354>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026cc:	4a29      	ldr	r2, [pc, #164]	; (8002774 <HAL_GPIO_Init+0x354>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_GPIO_Init+0x354>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_GPIO_Init+0x354>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_GPIO_Init+0x354>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_GPIO_Init+0x354>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3301      	adds	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f67f ae86 	bls.w	8002440 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40013800 	.word	0x40013800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40021000 	.word	0x40021000
 8002760:	40021400 	.word	0x40021400
 8002764:	40021800 	.word	0x40021800
 8002768:	40021c00 	.word	0x40021c00
 800276c:	40022000 	.word	0x40022000
 8002770:	40022400 	.word	0x40022400
 8002774:	40013c00 	.word	0x40013c00

08002778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe ff1c 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e006      	b.n	8002800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d104      	bne.n	8002812 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002810:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_I2C_Init+0x11c>)
 800281e:	430b      	orrs	r3, r1
 8002820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69d9      	ldr	r1, [r3, #28]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	02008000 	.word	0x02008000

08002898 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	461a      	mov	r2, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
 80028a8:	4613      	mov	r3, r2
 80028aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	f040 80da 	bne.w	8002a6e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_I2C_Master_Transmit+0x30>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0d3      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1d8>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028d0:	f7ff fada 	bl	8001e88 <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2319      	movs	r3, #25
 80028dc:	2201      	movs	r2, #1
 80028de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fefb 	bl	80036de <I2C_WaitOnFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0be      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2221      	movs	r2, #33	; 0x21
 80028f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2210      	movs	r2, #16
 80028fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	893a      	ldrh	r2, [r7, #8]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	2bff      	cmp	r3, #255	; 0xff
 8002922:	d90e      	bls.n	8002942 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	22ff      	movs	r2, #255	; 0xff
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	b2da      	uxtb	r2, r3
 8002930:	8979      	ldrh	r1, [r7, #10]
 8002932:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <HAL_I2C_Master_Transmit+0x1e0>)
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 f8e6 	bl	8003b0c <I2C_TransferConfig>
 8002940:	e06c      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	b2da      	uxtb	r2, r3
 8002952:	8979      	ldrh	r1, [r7, #10]
 8002954:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_I2C_Master_Transmit+0x1e0>)
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f001 f8d5 	bl	8003b0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002962:	e05b      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	6a39      	ldr	r1, [r7, #32]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fef8 	bl	800375e <I2C_WaitOnTXISFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e07b      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d034      	beq.n	8002a1c <HAL_I2C_Master_Transmit+0x184>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d130      	bne.n	8002a1c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fe8a 	bl	80036de <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04d      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2bff      	cmp	r3, #255	; 0xff
 80029dc:	d90e      	bls.n	80029fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f001 f889 	bl	8003b0c <I2C_TransferConfig>
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	8979      	ldrh	r1, [r7, #10]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f001 f878 	bl	8003b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d19e      	bne.n	8002964 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fed7 	bl	80037de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01a      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_I2C_Master_Transmit+0x1e4>)
 8002a4e:	400b      	ands	r3, r1
 8002a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	80002000 	.word	0x80002000
 8002a7c:	fe00e800 	.word	0xfe00e800

08002a80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	817b      	strh	r3, [r7, #10]
 8002a90:	4613      	mov	r3, r2
 8002a92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	f040 80db 	bne.w	8002c58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_I2C_Master_Receive+0x30>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0d4      	b.n	8002c5a <HAL_I2C_Master_Receive+0x1da>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ab8:	f7ff f9e6 	bl	8001e88 <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2319      	movs	r3, #25
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fe07 	bl	80036de <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0bf      	b.n	8002c5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2222      	movs	r2, #34	; 0x22
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2bff      	cmp	r3, #255	; 0xff
 8002b0a:	d90e      	bls.n	8002b2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	8979      	ldrh	r1, [r7, #10]
 8002b1a:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <HAL_I2C_Master_Receive+0x1e4>)
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fff2 	bl	8003b0c <I2C_TransferConfig>
 8002b28:	e06d      	b.n	8002c06 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_I2C_Master_Receive+0x1e4>)
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 ffe1 	bl	8003b0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b4a:	e05c      	b.n	8002c06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6a39      	ldr	r1, [r7, #32]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fe81 	bl	8003858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e07c      	b.n	8002c5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d034      	beq.n	8002c06 <HAL_I2C_Master_Receive+0x186>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d130      	bne.n	8002c06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fd95 	bl	80036de <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e04d      	b.n	8002c5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2bff      	cmp	r3, #255	; 0xff
 8002bc6:	d90e      	bls.n	8002be6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	22ff      	movs	r2, #255	; 0xff
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 ff94 	bl	8003b0c <I2C_TransferConfig>
 8002be4:	e00f      	b.n	8002c06 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 ff83 	bl	8003b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d19d      	bne.n	8002b4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fde2 	bl	80037de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e01a      	b.n	8002c5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_I2C_Master_Receive+0x1e8>)
 8002c38:	400b      	ands	r3, r1
 8002c3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	80002400 	.word	0x80002400
 8002c68:	fe00e800 	.word	0xfe00e800

08002c6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	09db      	lsrs	r3, r3, #7
 8002cc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	0a9b      	lsrs	r3, r3, #10
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	09db      	lsrs	r3, r3, #7
 8002cf6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f043 0208 	orr.w	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d12:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	0a5b      	lsrs	r3, r3, #9
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	09db      	lsrs	r3, r3, #7
 8002d24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f043 0202 	orr.w	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d40:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 030b 	and.w	r3, r3, #11
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fb89 	bl	800346c <I2C_ITError>
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
 8002d96:	4613      	mov	r3, r2
 8002d98:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <I2C_Slave_ISR_IT+0x24>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0ec      	b.n	8002fe0 <I2C_Slave_ISR_IT+0x1fe>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e26:	6939      	ldr	r1, [r7, #16]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f9bf 	bl	80031ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04d      	beq.n	8002ed6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d047      	beq.n	8002ed6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d128      	bne.n	8002ea2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b28      	cmp	r3, #40	; 0x28
 8002e5a:	d108      	bne.n	8002e6e <I2C_Slave_ISR_IT+0x8c>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e62:	d104      	bne.n	8002e6e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e64:	6939      	ldr	r1, [r7, #16]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 faaa 	bl	80033c0 <I2C_ITListenCplt>
 8002e6c:	e032      	b.n	8002ed4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b29      	cmp	r3, #41	; 0x29
 8002e78:	d10e      	bne.n	8002e98 <I2C_Slave_ISR_IT+0xb6>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e80:	d00a      	beq.n	8002e98 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fbe5 	bl	800365a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f92d 	bl	80030f0 <I2C_ITSlaveSeqCplt>
 8002e96:	e01d      	b.n	8002ed4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ea0:	e096      	b.n	8002fd0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <I2C_Slave_ISR_IT+0xe4>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec2:	f040 8085 	bne.w	8002fd0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 facd 	bl	800346c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ed2:	e07d      	b.n	8002fd0 <I2C_Slave_ISR_IT+0x1ee>
 8002ed4:	e07c      	b.n	8002fd0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d030      	beq.n	8002f44 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02a      	beq.n	8002f44 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d018      	beq.n	8002f2a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d14f      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x1f2>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f3a:	d04b      	beq.n	8002fd4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f8d7 	bl	80030f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f42:	e047      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	08db      	lsrs	r3, r3, #3
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f5c:	6939      	ldr	r1, [r7, #16]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f842 	bl	8002fe8 <I2C_ITAddrCplt>
 8002f64:	e037      	b.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d031      	beq.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02b      	beq.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d018      	beq.n	8002fba <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fb8:	e00d      	b.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc0:	d002      	beq.n	8002fc8 <I2C_Slave_ISR_IT+0x1e6>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f891 	bl	80030f0 <I2C_ITSlaveSeqCplt>
 8002fce:	e002      	b.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002fd4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ffe:	2b28      	cmp	r3, #40	; 0x28
 8003000:	d16a      	bne.n	80030d8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b29b      	uxth	r3, r3
 800301c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003020:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800303c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d138      	bne.n	80030b8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	09db      	lsrs	r3, r3, #7
 800304a:	b29a      	uxth	r2, r3
 800304c:	89bb      	ldrh	r3, [r7, #12]
 800304e:	4053      	eors	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	f003 0306 	and.w	r3, r3, #6
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11c      	bne.n	8003094 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306c:	2b02      	cmp	r3, #2
 800306e:	d13b      	bne.n	80030e8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2208      	movs	r2, #8
 800307c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003086:	89ba      	ldrh	r2, [r7, #12]
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fe7c 	bl	8002d8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003092:	e029      	b.n	80030e8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fd67 	bl	8003b70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030aa:	89ba      	ldrh	r2, [r7, #12]
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	4619      	mov	r1, r3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fe6a 	bl	8002d8a <HAL_I2C_AddrCallback>
}
 80030b6:	e017      	b.n	80030e8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fd57 	bl	8003b70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030ca:	89ba      	ldrh	r2, [r7, #12]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	4619      	mov	r1, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fe5a 	bl	8002d8a <HAL_I2C_AddrCallback>
}
 80030d6:	e007      	b.n	80030e8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2208      	movs	r2, #8
 80030de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	0b9b      	lsrs	r3, r3, #14
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e00d      	b.n	8003142 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	0bdb      	lsrs	r3, r3, #15
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003140:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b29      	cmp	r3, #41	; 0x29
 800314c:	d112      	bne.n	8003174 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2228      	movs	r2, #40	; 0x28
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800315c:	2101      	movs	r1, #1
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fd06 	bl	8003b70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fdf8 	bl	8002d62 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003172:	e017      	b.n	80031a4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b2a      	cmp	r3, #42	; 0x2a
 800317e:	d111      	bne.n	80031a4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2228      	movs	r2, #40	; 0x28
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2222      	movs	r2, #34	; 0x22
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800318e:	2102      	movs	r1, #2
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fced 	bl	8003b70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fde9 	bl	8002d76 <HAL_I2C_SlaveRxCpltCallback>
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2220      	movs	r2, #32
 80031d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	2b21      	cmp	r3, #33	; 0x21
 80031d6:	d002      	beq.n	80031de <I2C_ITSlaveCplt+0x32>
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b29      	cmp	r3, #41	; 0x29
 80031dc:	d108      	bne.n	80031f0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80031de:	f248 0101 	movw	r1, #32769	; 0x8001
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fcc4 	bl	8003b70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2221      	movs	r2, #33	; 0x21
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
 80031ee:	e00d      	b.n	800320c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b22      	cmp	r3, #34	; 0x22
 80031f4:	d002      	beq.n	80031fc <I2C_ITSlaveCplt+0x50>
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b2a      	cmp	r3, #42	; 0x2a
 80031fa:	d107      	bne.n	800320c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031fc:	f248 0102 	movw	r1, #32770	; 0x8002
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fcb5 	bl	8003b70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2222      	movs	r2, #34	; 0x22
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b64      	ldr	r3, [pc, #400]	; (80033b8 <I2C_ITSlaveCplt+0x20c>)
 8003228:	400b      	ands	r3, r1
 800322a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa14 	bl	800365a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	0b9b      	lsrs	r3, r3, #14
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d013      	beq.n	8003266 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800324c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	2b00      	cmp	r3, #0
 8003254:	d020      	beq.n	8003298 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003264:	e018      	b.n	8003298 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	0bdb      	lsrs	r3, r3, #15
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d012      	beq.n	8003298 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003280:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0304 	bic.w	r3, r3, #4
 80032aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00c      	beq.n	80032e6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0204 	orr.w	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8a7 	bl	800346c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b28      	cmp	r3, #40	; 0x28
 8003328:	d141      	bne.n	80033ae <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f847 	bl	80033c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003332:	e03c      	b.n	80033ae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800333c:	d014      	beq.n	8003368 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fed6 	bl	80030f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <I2C_ITSlaveCplt+0x210>)
 8003348:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fd20 	bl	8002da6 <HAL_I2C_ListenCpltCallback>
}
 8003366:	e022      	b.n	80033ae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b22      	cmp	r3, #34	; 0x22
 8003372:	d10e      	bne.n	8003392 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fcf3 	bl	8002d76 <HAL_I2C_SlaveRxCpltCallback>
}
 8003390:	e00d      	b.n	80033ae <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fcda 	bl	8002d62 <HAL_I2C_SlaveTxCpltCallback>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	fe00e800 	.word	0xfe00e800
 80033bc:	ffff0000 	.word	0xffff0000

080033c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <I2C_ITListenCplt+0xa8>)
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d022      	beq.n	800343e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800343e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb94 	bl	8003b70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fca4 	bl	8002da6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	ffff0000 	.word	0xffff0000

0800346c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a5d      	ldr	r2, [pc, #372]	; (8003600 <I2C_ITError+0x194>)
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b28      	cmp	r3, #40	; 0x28
 80034a2:	d005      	beq.n	80034b0 <I2C_ITError+0x44>
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b29      	cmp	r3, #41	; 0x29
 80034a8:	d002      	beq.n	80034b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b2a      	cmp	r3, #42	; 0x2a
 80034ae:	d10b      	bne.n	80034c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034b0:	2103      	movs	r1, #3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fb5c 	bl	8003b70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2228      	movs	r2, #40	; 0x28
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a50      	ldr	r2, [pc, #320]	; (8003604 <I2C_ITError+0x198>)
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
 80034c6:	e011      	b.n	80034ec <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb4f 	bl	8003b70 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b60      	cmp	r3, #96	; 0x60
 80034dc:	d003      	beq.n	80034e6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d039      	beq.n	800356e <I2C_ITError+0x102>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b11      	cmp	r3, #17
 80034fe:	d002      	beq.n	8003506 <I2C_ITError+0x9a>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b21      	cmp	r3, #33	; 0x21
 8003504:	d133      	bne.n	800356e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003514:	d107      	bne.n	8003526 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003524:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe ff6a 	bl	8002404 <HAL_DMA_GetState>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d017      	beq.n	8003566 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	4a33      	ldr	r2, [pc, #204]	; (8003608 <I2C_ITError+0x19c>)
 800353c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe ff38 	bl	80023c0 <HAL_DMA_Abort_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d04d      	beq.n	80035f2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003560:	4610      	mov	r0, r2
 8003562:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003564:	e045      	b.n	80035f2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f850 	bl	800360c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800356c:	e041      	b.n	80035f2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d039      	beq.n	80035ea <I2C_ITError+0x17e>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b12      	cmp	r3, #18
 800357a:	d002      	beq.n	8003582 <I2C_ITError+0x116>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b22      	cmp	r3, #34	; 0x22
 8003580:	d133      	bne.n	80035ea <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003590:	d107      	bne.n	80035a2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe ff2c 	bl	8002404 <HAL_DMA_GetState>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d017      	beq.n	80035e2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <I2C_ITError+0x19c>)
 80035b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fefa 	bl	80023c0 <HAL_DMA_Abort_IT>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d011      	beq.n	80035f6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035dc:	4610      	mov	r0, r2
 80035de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035e0:	e009      	b.n	80035f6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f812 	bl	800360c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035e8:	e005      	b.n	80035f6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f80e 	bl	800360c <I2C_TreatErrorCallback>
  }
}
 80035f0:	e002      	b.n	80035f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035f6:	bf00      	nop
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	ffff0000 	.word	0xffff0000
 8003604:	08002de3 	.word	0x08002de3
 8003608:	080036a3 	.word	0x080036a3

0800360c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d10e      	bne.n	800363e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fbc9 	bl	8002dce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800363c:	e009      	b.n	8003652 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fbb4 	bl	8002dba <HAL_I2C_ErrorCallback>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d103      	bne.n	8003678 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d007      	beq.n	8003696 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	619a      	str	r2, [r3, #24]
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2200      	movs	r2, #0
 80036be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	2200      	movs	r2, #0
 80036ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff ff9b 	bl	800360c <I2C_TreatErrorCallback>
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ee:	e022      	b.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d01e      	beq.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f8:	f7fe fbc6 	bl	8001e88 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d113      	bne.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	429a      	cmp	r2, r3
 8003752:	d0cd      	beq.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800376a:	e02c      	b.n	80037c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f8eb 	bl	800394c <I2C_IsErrorOccurred>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e02a      	b.n	80037d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d01e      	beq.n	80037c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fe fb7e 	bl	8001e88 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d113      	bne.n	80037c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e007      	b.n	80037d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d1cb      	bne.n	800376c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ea:	e028      	b.n	800383e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8ab 	bl	800394c <I2C_IsErrorOccurred>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e026      	b.n	800384e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7fe fb42 	bl	8001e88 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d113      	bne.n	800383e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e007      	b.n	800384e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b20      	cmp	r3, #32
 800384a:	d1cf      	bne.n	80037ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003864:	e064      	b.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f86e 	bl	800394c <I2C_IsErrorOccurred>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e062      	b.n	8003940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b20      	cmp	r3, #32
 8003886:	d138      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d105      	bne.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e04e      	b.n	8003940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d107      	bne.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2204      	movs	r2, #4
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
 80038be:	e002      	b.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2220      	movs	r2, #32
 80038cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e022      	b.n	8003940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fac5 	bl	8001e88 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10f      	bne.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e007      	b.n	8003940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d193      	bne.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fe00e800 	.word	0xfe00e800

0800394c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d068      	beq.n	8003a4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2210      	movs	r2, #16
 800397e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003980:	e049      	b.n	8003a16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d045      	beq.n	8003a16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe fa7d 	bl	8001e88 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_IsErrorOccurred+0x54>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d13a      	bne.n	8003a16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d121      	bne.n	8003a08 <I2C_IsErrorOccurred+0xbc>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ca:	d01d      	beq.n	8003a08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d01a      	beq.n	8003a08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039e2:	f7fe fa51 	bl	8001e88 <HAL_GetTick>
 80039e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e8:	e00e      	b.n	8003a08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039ea:	f7fe fa4d 	bl	8001e88 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b19      	cmp	r3, #25
 80039f6:	d907      	bls.n	8003a08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f043 0320 	orr.w	r3, r3, #32
 80039fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a06:	e006      	b.n	8003a16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d1e9      	bne.n	80039ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d003      	beq.n	8003a2c <I2C_IsErrorOccurred+0xe0>
 8003a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0aa      	beq.n	8003982 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01c      	beq.n	8003afa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fdca 	bl	800365a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <I2C_IsErrorOccurred+0x1bc>)
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	fe00e800 	.word	0xfe00e800

08003b0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b24:	7a7b      	ldrb	r3, [r7, #9]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	0d5b      	lsrs	r3, r3, #21
 8003b46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <I2C_TransferConfig+0x60>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	ea02 0103 	and.w	r1, r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	03ff63ff 	.word	0x03ff63ff

08003b70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00f      	beq.n	8003baa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b9e:	2b28      	cmp	r3, #40	; 0x28
 8003ba0:	d003      	beq.n	8003baa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ba8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00f      	beq.n	8003bd4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003bba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bc8:	2b28      	cmp	r3, #40	; 0x28
 8003bca:	d003      	beq.n	8003bd4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003bd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da03      	bge.n	8003be4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d103      	bne.n	8003bf2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d103      	bne.n	8003c00 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f043 0320 	orr.w	r3, r3, #32
 8003bfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d103      	bne.n	8003c0e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d138      	bne.n	8003cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e032      	b.n	8003cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d139      	bne.n	8003d4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e033      	b.n	8003d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2224      	movs	r2, #36	; 0x24
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d8a:	f7fe f87d 	bl	8001e88 <HAL_GetTick>
 8003d8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d90:	e009      	b.n	8003da6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d92:	f7fe f879 	bl	8001e88 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da0:	d901      	bls.n	8003da6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e022      	b.n	8003dec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d1ee      	bne.n	8003d92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc0:	f7fe f862 	bl	8001e88 <HAL_GetTick>
 8003dc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc6:	e009      	b.n	8003ddc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dc8:	f7fe f85e 	bl	8001e88 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd6:	d901      	bls.n	8003ddc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e007      	b.n	8003dec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de8:	d1ee      	bne.n	8003dc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e291      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8087 	beq.w	8003f2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e20:	4b96      	ldr	r3, [pc, #600]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d00c      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2c:	4b93      	ldr	r3, [pc, #588]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d112      	bne.n	8003e5e <HAL_RCC_OscConfig+0x62>
 8003e38:	4b90      	ldr	r3, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e44:	d10b      	bne.n	8003e5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e46:	4b8d      	ldr	r3, [pc, #564]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x130>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d168      	bne.n	8003f2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e26b      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x7a>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e02e      	b.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x9c>
 8003e7e:	4b7f      	ldr	r3, [pc, #508]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7e      	ldr	r2, [pc, #504]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7b      	ldr	r2, [pc, #492]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e01d      	b.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0xc0>
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a75      	ldr	r2, [pc, #468]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b73      	ldr	r3, [pc, #460]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a72      	ldr	r2, [pc, #456]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
 8003ebc:	4b6f      	ldr	r3, [pc, #444]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6e      	ldr	r2, [pc, #440]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6b      	ldr	r2, [pc, #428]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd ffd4 	bl	8001e88 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fd ffd0 	bl	8001e88 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e21f      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b61      	ldr	r3, [pc, #388]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xe8>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd ffc0 	bl	8001e88 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fd ffbc 	bl	8001e88 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e20b      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	4b57      	ldr	r3, [pc, #348]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x110>
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d069      	beq.n	800400e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f46:	4b4d      	ldr	r3, [pc, #308]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d11c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x190>
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d116      	bne.n	8003f8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCC_OscConfig+0x17a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1df      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	493d      	ldr	r1, [pc, #244]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	e040      	b.n	800400e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d023      	beq.n	8003fdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f94:	4b39      	ldr	r3, [pc, #228]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a38      	ldr	r2, [pc, #224]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd ff72 	bl	8001e88 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd ff6e 	bl	8001e88 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1bd      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4929      	ldr	r1, [pc, #164]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	e018      	b.n	800400e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fdc:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd ff4e 	bl	8001e88 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd ff4a 	bl	8001e88 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e199      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d038      	beq.n	800408c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d019      	beq.n	8004056 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8004024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd ff2b 	bl	8001e88 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004036:	f7fd ff27 	bl	8001e88 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e176      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x280>)
 800404a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x23a>
 8004054:	e01a      	b.n	800408c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8004058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <HAL_RCC_OscConfig+0x280>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fd ff11 	bl	8001e88 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406a:	f7fd ff0d 	bl	8001e88 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d903      	bls.n	8004080 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e15c      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
 800407c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	4b91      	ldr	r3, [pc, #580]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ee      	bne.n	800406a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a4 	beq.w	80041e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b8b      	ldr	r3, [pc, #556]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10d      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	4b88      	ldr	r3, [pc, #544]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a87      	ldr	r2, [pc, #540]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b85      	ldr	r3, [pc, #532]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c2:	4b82      	ldr	r3, [pc, #520]	; (80042cc <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040ce:	4b7f      	ldr	r3, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0x4d0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7e      	ldr	r2, [pc, #504]	; (80042cc <HAL_RCC_OscConfig+0x4d0>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040da:	f7fd fed5 	bl	8001e88 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e2:	f7fd fed1 	bl	8001e88 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b64      	cmp	r3, #100	; 0x64
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e120      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f4:	4b75      	ldr	r3, [pc, #468]	; (80042cc <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x31a>
 8004108:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a6e      	ldr	r2, [pc, #440]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	e02d      	b.n	8004172 <HAL_RCC_OscConfig+0x376>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x33c>
 800411e:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a69      	ldr	r2, [pc, #420]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
 800412a:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a66      	ldr	r2, [pc, #408]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
 8004136:	e01c      	b.n	8004172 <HAL_RCC_OscConfig+0x376>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b05      	cmp	r3, #5
 800413e:	d10c      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	4a60      	ldr	r2, [pc, #384]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	6713      	str	r3, [r2, #112]	; 0x70
 800414c:	4b5e      	ldr	r3, [pc, #376]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4a5d      	ldr	r2, [pc, #372]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	; 0x70
 8004158:	e00b      	b.n	8004172 <HAL_RCC_OscConfig+0x376>
 800415a:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a5a      	ldr	r2, [pc, #360]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	6713      	str	r3, [r2, #112]	; 0x70
 8004166:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a57      	ldr	r2, [pc, #348]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d015      	beq.n	80041a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fd fe85 	bl	8001e88 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd fe81 	bl	8001e88 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0ce      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004198:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ee      	beq.n	8004182 <HAL_RCC_OscConfig+0x386>
 80041a4:	e014      	b.n	80041d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd fe6f 	bl	8001e88 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fd fe6b 	bl	8001e88 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e0b8      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c4:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ee      	bne.n	80041ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d6:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a4 	beq.w	8004334 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ec:	4b36      	ldr	r3, [pc, #216]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d06b      	beq.n	80042d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d149      	bne.n	8004294 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd fe3c 	bl	8001e88 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fd fe38 	bl	8001e88 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e087      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	3b01      	subs	r3, #1
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	4313      	orrs	r3, r2
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800425a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800426a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fe0c 	bl	8001e88 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7fd fe08 	bl	8001e88 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e057      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x478>
 8004292:	e04f      	b.n	8004334 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd fdf2 	bl	8001e88 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd fdee 	bl	8001e88 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e03d      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4ac>
 80042c6:	e035      	b.n	8004334 <HAL_RCC_OscConfig+0x538>
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x544>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d028      	beq.n	8004330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d11a      	bne.n	8004330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004306:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0d0      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d910      	bls.n	800438c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	4965      	ldr	r1, [pc, #404]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b63      	ldr	r3, [pc, #396]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0b8      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a4:	4b59      	ldr	r3, [pc, #356]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a58      	ldr	r2, [pc, #352]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043bc:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a52      	ldr	r2, [pc, #328]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c8:	4b50      	ldr	r3, [pc, #320]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	494d      	ldr	r1, [pc, #308]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d040      	beq.n	8004468 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d115      	bne.n	8004426 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e07f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	4b41      	ldr	r3, [pc, #260]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e073      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004416:	4b3d      	ldr	r3, [pc, #244]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e06b      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b39      	ldr	r3, [pc, #228]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4936      	ldr	r1, [pc, #216]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd fd26 	bl	8001e88 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fd fd22 	bl	8001e88 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e053      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d210      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 020f 	bic.w	r2, r3, #15
 800447e:	4922      	ldr	r1, [pc, #136]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e032      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4916      	ldr	r1, [pc, #88]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044c2:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	490e      	ldr	r1, [pc, #56]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044d6:	f000 f821 	bl	800451c <HAL_RCC_GetSysClockFreq>
 80044da:	4602      	mov	r2, r0
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	490a      	ldr	r1, [pc, #40]	; (8004510 <HAL_RCC_ClockConfig+0x1cc>)
 80044e8:	5ccb      	ldrb	r3, [r1, r3]
 80044ea:	fa22 f303 	lsr.w	r3, r2, r3
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1d0>)
 80044f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x1d4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd fc82 	bl	8001e00 <HAL_InitTick>

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023c00 	.word	0x40023c00
 800450c:	40023800 	.word	0x40023800
 8004510:	0800e20c 	.word	0x0800e20c
 8004514:	20000000 	.word	0x20000000
 8004518:	2000001c 	.word	0x2000001c

0800451c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b094      	sub	sp, #80	; 0x50
 8004522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	647b      	str	r3, [r7, #68]	; 0x44
 8004528:	2300      	movs	r3, #0
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	2300      	movs	r3, #0
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004534:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d00d      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x40>
 8004540:	2b08      	cmp	r3, #8
 8004542:	f200 80e1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x34>
 800454a:	2b04      	cmp	r3, #4
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x3a>
 800454e:	e0db      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b73      	ldr	r3, [pc, #460]	; (8004720 <HAL_RCC_GetSysClockFreq+0x204>)
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004554:	e0db      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004556:	4b73      	ldr	r3, [pc, #460]	; (8004724 <HAL_RCC_GetSysClockFreq+0x208>)
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800455a:	e0d8      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455c:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004564:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004572:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	2200      	movs	r2, #0
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
 800457c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
 8004586:	2300      	movs	r3, #0
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a0:	0150      	lsls	r0, r2, #5
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4621      	mov	r1, r4
 80045a8:	1a51      	subs	r1, r2, r1
 80045aa:	6139      	str	r1, [r7, #16]
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb63 0301 	sbc.w	r3, r3, r1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c0:	4659      	mov	r1, fp
 80045c2:	018b      	lsls	r3, r1, #6
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ca:	4651      	mov	r1, sl
 80045cc:	018a      	lsls	r2, r1, #6
 80045ce:	4651      	mov	r1, sl
 80045d0:	ebb2 0801 	subs.w	r8, r2, r1
 80045d4:	4659      	mov	r1, fp
 80045d6:	eb63 0901 	sbc.w	r9, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ee:	4690      	mov	r8, r2
 80045f0:	4699      	mov	r9, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb18 0303 	adds.w	r3, r8, r3
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	462b      	mov	r3, r5
 80045fc:	eb49 0303 	adc.w	r3, r9, r3
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800460e:	4629      	mov	r1, r5
 8004610:	024b      	lsls	r3, r1, #9
 8004612:	4621      	mov	r1, r4
 8004614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004618:	4621      	mov	r1, r4
 800461a:	024a      	lsls	r2, r1, #9
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004622:	2200      	movs	r2, #0
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800462c:	f7fc faec 	bl	8000c08 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4613      	mov	r3, r2
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e058      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	2200      	movs	r2, #0
 8004642:	4618      	mov	r0, r3
 8004644:	4611      	mov	r1, r2
 8004646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	f04f 0000 	mov.w	r0, #0
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	0159      	lsls	r1, r3, #5
 8004662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004666:	0150      	lsls	r0, r2, #5
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4641      	mov	r1, r8
 800466e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004672:	4649      	mov	r1, r9
 8004674:	eb63 0b01 	sbc.w	fp, r3, r1
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800468c:	ebb2 040a 	subs.w	r4, r2, sl
 8004690:	eb63 050b 	sbc.w	r5, r3, fp
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	00eb      	lsls	r3, r5, #3
 800469e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a2:	00e2      	lsls	r2, r4, #3
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	4643      	mov	r3, r8
 80046aa:	18e3      	adds	r3, r4, r3
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb45 0303 	adc.w	r3, r5, r3
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046c2:	4629      	mov	r1, r5
 80046c4:	028b      	lsls	r3, r1, #10
 80046c6:	4621      	mov	r1, r4
 80046c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046cc:	4621      	mov	r1, r4
 80046ce:	028a      	lsls	r2, r1, #10
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d6:	2200      	movs	r2, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	61fa      	str	r2, [r7, #28]
 80046dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e0:	f7fc fa92 	bl	8000c08 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4613      	mov	r3, r2
 80046ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	3301      	adds	r3, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80046fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetSysClockFreq+0x204>)
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004710:	4618      	mov	r0, r3
 8004712:	3750      	adds	r7, #80	; 0x50
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200

08004728 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	0800e21c 	.word	0x0800e21c

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	0800e21c 	.word	0x0800e21c

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b8:	4b69      	ldr	r3, [pc, #420]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a68      	ldr	r2, [pc, #416]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047c2:	6093      	str	r3, [r2, #8]
 80047c4:	4b66      	ldr	r3, [pc, #408]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	4964      	ldr	r1, [pc, #400]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ea:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	4959      	ldr	r1, [pc, #356]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	d101      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	494a      	ldr	r1, [pc, #296]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004846:	2301      	movs	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 808b 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	4a39      	ldr	r2, [pc, #228]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487e:	6413      	str	r3, [r2, #64]	; 0x40
 8004880:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800488c:	4b35      	ldr	r3, [pc, #212]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a34      	ldr	r2, [pc, #208]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004898:	f7fd faf6 	bl	8001e88 <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a0:	f7fd faf2 	bl	8001e88 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e357      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048b2:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d035      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d02e      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048fe:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004904:	4b16      	ldr	r3, [pc, #88]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d114      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd faba 	bl	8001e88 <HAL_GetTick>
 8004914:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fd fab6 	bl	8001e88 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e319      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ee      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004946:	d111      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004956:	400b      	ands	r3, r1
 8004958:	4901      	ldr	r1, [pc, #4]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000
 8004968:	0ffffcff 	.word	0x0ffffcff
 800496c:	4baa      	ldr	r3, [pc, #680]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4aa9      	ldr	r2, [pc, #676]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004972:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004976:	6093      	str	r3, [r2, #8]
 8004978:	4ba7      	ldr	r3, [pc, #668]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004984:	49a4      	ldr	r1, [pc, #656]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004986:	4313      	orrs	r3, r2
 8004988:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004996:	4ba0      	ldr	r3, [pc, #640]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499c:	4a9e      	ldr	r2, [pc, #632]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049a6:	4b9c      	ldr	r3, [pc, #624]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	4999      	ldr	r1, [pc, #612]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c4:	4b94      	ldr	r3, [pc, #592]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d2:	4991      	ldr	r1, [pc, #580]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049e6:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f4:	4988      	ldr	r1, [pc, #544]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a08:	4b83      	ldr	r3, [pc, #524]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	4980      	ldr	r1, [pc, #512]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4977      	ldr	r1, [pc, #476]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4c:	4b72      	ldr	r3, [pc, #456]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	496f      	ldr	r1, [pc, #444]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f023 020c 	bic.w	r2, r3, #12
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	4966      	ldr	r1, [pc, #408]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a90:	4b61      	ldr	r3, [pc, #388]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9e:	495e      	ldr	r1, [pc, #376]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab2:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	4955      	ldr	r1, [pc, #340]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	494d      	ldr	r1, [pc, #308]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004af6:	4b48      	ldr	r3, [pc, #288]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	4944      	ldr	r1, [pc, #272]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b18:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	493c      	ldr	r1, [pc, #240]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b3a:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b48:	4933      	ldr	r1, [pc, #204]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b5c:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b6a:	492b      	ldr	r1, [pc, #172]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b7e:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8c:	4922      	ldr	r1, [pc, #136]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bcc:	4912      	ldr	r1, [pc, #72]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf0:	4909      	ldr	r1, [pc, #36]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d006      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80d9 	beq.w	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a01      	ldr	r2, [pc, #4]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c16:	e001      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1e:	f7fd f933 	bl	8001e88 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f7fd f92f 	bl	8001e88 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e194      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c38:	4b6c      	ldr	r3, [pc, #432]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d021      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11d      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c58:	4b64      	ldr	r3, [pc, #400]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c66:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6c:	0e1b      	lsrs	r3, r3, #24
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	019a      	lsls	r2, r3, #6
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	071b      	lsls	r3, r3, #28
 8004c8c:	4957      	ldr	r1, [pc, #348]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02e      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbe:	d129      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cc0:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd4:	0f1b      	lsrs	r3, r3, #28
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	019a      	lsls	r2, r3, #6
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	071b      	lsls	r3, r3, #28
 8004cf4:	493d      	ldr	r1, [pc, #244]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cfc:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d02:	f023 021f 	bic.w	r2, r3, #31
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	4937      	ldr	r1, [pc, #220]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01d      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d20:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d26:	0e1b      	lsrs	r3, r3, #24
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d34:	0f1b      	lsrs	r3, r3, #28
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	019a      	lsls	r2, r3, #6
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	041b      	lsls	r3, r3, #16
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	071b      	lsls	r3, r3, #28
 8004d54:	4925      	ldr	r1, [pc, #148]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d011      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	019a      	lsls	r2, r3, #6
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	071b      	lsls	r3, r3, #28
 8004d84:	4919      	ldr	r1, [pc, #100]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd f876 	bl	8001e88 <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004da0:	f7fd f872 	bl	8001e88 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0d7      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	f040 80cd 	bne.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a08      	ldr	r2, [pc, #32]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd2:	f7fd f859 	bl	8001e88 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dda:	f7fd f855 	bl	8001e88 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b64      	cmp	r3, #100	; 0x64
 8004de6:	d903      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0ba      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004dec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004df0:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfc:	d0ed      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d12a      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e34:	4b4d      	ldr	r3, [pc, #308]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	0f1b      	lsrs	r3, r3, #28
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	019a      	lsls	r2, r3, #6
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	071b      	lsls	r3, r3, #28
 8004e5a:	4944      	ldr	r1, [pc, #272]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e62:	4b42      	ldr	r3, [pc, #264]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	3b01      	subs	r3, #1
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	493d      	ldr	r1, [pc, #244]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d022      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e90:	d11d      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e92:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	0e1b      	lsrs	r3, r3, #24
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	0f1b      	lsrs	r3, r3, #28
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	019a      	lsls	r2, r3, #6
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	061b      	lsls	r3, r3, #24
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	071b      	lsls	r3, r3, #28
 8004ec6:	4929      	ldr	r1, [pc, #164]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	0e1b      	lsrs	r3, r3, #24
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ee8:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	019a      	lsls	r2, r3, #6
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	071b      	lsls	r3, r3, #28
 8004f0e:	4917      	ldr	r1, [pc, #92]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4911      	ldr	r1, [pc, #68]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0e      	ldr	r2, [pc, #56]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f38:	f7fc ffa6 	bl	8001e88 <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f40:	f7fc ffa2 	bl	8001e88 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e007      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5e:	d1ef      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800

08004f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e040      	b.n	8005004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc fb92 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fc66 	bl	8005880 <UART_SetConfig>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e022      	b.n	8005004 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 febe 	bl	8005d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 ff45 	bl	8005e8c <UART_CheckIdleState>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005020:	2b20      	cmp	r3, #32
 8005022:	d171      	bne.n	8005108 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_UART_Transmit+0x24>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e06a      	b.n	800510a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2221      	movs	r2, #33	; 0x21
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005042:	f7fc ff21 	bl	8001e88 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005060:	d108      	bne.n	8005074 <HAL_UART_Transmit+0x68>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e003      	b.n	800507c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800507c:	e02c      	b.n	80050d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 ff36 	bl	8005efa <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e038      	b.n	800510a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3302      	adds	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e007      	b.n	80050c6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1cc      	bne.n	800507e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 ff03 	bl	8005efa <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e005      	b.n	800510a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	; 0x28
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005128:	2b20      	cmp	r3, #32
 800512a:	f040 80b1 	bne.w	8005290 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Receive+0x28>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0a9      	b.n	8005292 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2222      	movs	r2, #34	; 0x22
 800514a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005154:	f7fc fe98 	bl	8001e88 <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005172:	d10e      	bne.n	8005192 <HAL_UART_Receive+0x80>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_UART_Receive+0x76>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005186:	e02d      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005190:	e028      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10d      	bne.n	80051b6 <HAL_UART_Receive+0xa4>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Receive+0x9a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051aa:	e01b      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	227f      	movs	r2, #127	; 0x7f
 80051b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051b4:	e016      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051be:	d10d      	bne.n	80051dc <HAL_UART_Receive+0xca>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_UART_Receive+0xc0>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	227f      	movs	r2, #127	; 0x7f
 80051cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051d0:	e008      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	223f      	movs	r2, #63	; 0x3f
 80051d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051da:	e003      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f4:	d108      	bne.n	8005208 <HAL_UART_Receive+0xf6>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e003      	b.n	8005210 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005210:	e032      	b.n	8005278 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	2120      	movs	r1, #32
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fe6c 	bl	8005efa <UART_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e032      	b.n	8005292 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b29a      	uxth	r2, r3
 800523a:	8a7b      	ldrh	r3, [r7, #18]
 800523c:	4013      	ands	r3, r2
 800523e:	b29a      	uxth	r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	3302      	adds	r3, #2
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e00c      	b.n	8005266 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	b2da      	uxtb	r2, r3
 8005254:	8a7b      	ldrh	r3, [r7, #18]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	4013      	ands	r3, r2
 800525a:	b2da      	uxtb	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1c6      	bne.n	8005212 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b0ba      	sub	sp, #232	; 0xe8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80052ca:	4013      	ands	r3, r2
 80052cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d115      	bne.n	8005304 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8297 	beq.w	8005828 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
      }
      return;
 8005302:	e291      	b.n	8005828 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8117 	beq.w	800553c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800530e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800531a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800531e:	4b85      	ldr	r3, [pc, #532]	; (8005534 <HAL_UART_IRQHandler+0x298>)
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 810a 	beq.w	800553c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d011      	beq.n	8005358 <HAL_UART_IRQHandler+0xbc>
 8005334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d011      	beq.n	8005388 <HAL_UART_IRQHandler+0xec>
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2202      	movs	r2, #2
 8005376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	f043 0204 	orr.w	r2, r3, #4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d011      	beq.n	80053b8 <HAL_UART_IRQHandler+0x11c>
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2204      	movs	r2, #4
 80053a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	f043 0202 	orr.w	r2, r3, #2
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d017      	beq.n	80053f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00b      	beq.n	80053f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ea:	f043 0208 	orr.w	r2, r3, #8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d012      	beq.n	8005426 <HAL_UART_IRQHandler+0x18a>
 8005400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00c      	beq.n	8005426 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 81fd 	beq.w	800582c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005460:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d005      	beq.n	800547e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005476:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800547a:	2b00      	cmp	r3, #0
 800547c:	d04f      	beq.n	800551e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fe01 	bl	8006086 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b40      	cmp	r3, #64	; 0x40
 8005490:	d141      	bne.n	8005516 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1d9      	bne.n	8005492 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d013      	beq.n	800550e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ea:	4a13      	ldr	r2, [pc, #76]	; (8005538 <HAL_UART_IRQHandler+0x29c>)
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fc ff64 	bl	80023c0 <HAL_DMA_Abort_IT>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d017      	beq.n	800552e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	e00f      	b.n	800552e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9a0 	bl	8005854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	e00b      	b.n	800552e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f99c 	bl	8005854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	e007      	b.n	800552e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f998 	bl	8005854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800552c:	e17e      	b.n	800582c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552e:	bf00      	nop
    return;
 8005530:	e17c      	b.n	800582c <HAL_UART_IRQHandler+0x590>
 8005532:	bf00      	nop
 8005534:	04000120 	.word	0x04000120
 8005538:	0800614f 	.word	0x0800614f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005540:	2b01      	cmp	r3, #1
 8005542:	f040 814c 	bne.w	80057de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8145 	beq.w	80057de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 813e 	beq.w	80057de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2210      	movs	r2, #16
 8005568:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	f040 80b6 	bne.w	80056e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005586:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8150 	beq.w	8005830 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800559a:	429a      	cmp	r2, r3
 800559c:	f080 8148 	bcs.w	8005830 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	f000 8086 	beq.w	80056c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1da      	bne.n	80055b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800562a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800562e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e1      	bne.n	8005602 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80056a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e4      	bne.n	8005684 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fc fe0e 	bl	80022e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8c2 	bl	8005868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056e4:	e0a4      	b.n	8005830 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8096 	beq.w	8005834 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8091 	beq.w	8005834 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
 8005736:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800573a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e4      	bne.n	8005712 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	623b      	str	r3, [r7, #32]
   return(result);
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800576c:	633a      	str	r2, [r7, #48]	; 0x30
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e3      	bne.n	8005748 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	617b      	str	r3, [r7, #20]
   return(result);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e4      	bne.n	8005794 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f846 	bl	8005868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057dc:	e02a      	b.n	8005834 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01c      	beq.n	8005838 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
    }
    return;
 8005806:	e017      	b.n	8005838 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <HAL_UART_IRQHandler+0x59e>
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fcaa 	bl	800617a <UART_EndTransmit_IT>
    return;
 8005826:	e008      	b.n	800583a <HAL_UART_IRQHandler+0x59e>
      return;
 8005828:	bf00      	nop
 800582a:	e006      	b.n	800583a <HAL_UART_IRQHandler+0x59e>
    return;
 800582c:	bf00      	nop
 800582e:	e004      	b.n	800583a <HAL_UART_IRQHandler+0x59e>
      return;
 8005830:	bf00      	nop
 8005832:	e002      	b.n	800583a <HAL_UART_IRQHandler+0x59e>
      return;
 8005834:	bf00      	nop
 8005836:	e000      	b.n	800583a <HAL_UART_IRQHandler+0x59e>
    return;
 8005838:	bf00      	nop
  }

}
 800583a:	37e8      	adds	r7, #232	; 0xe8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4ba6      	ldr	r3, [pc, #664]	; (8005b44 <UART_SetConfig+0x2c4>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a94      	ldr	r2, [pc, #592]	; (8005b48 <UART_SetConfig+0x2c8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d120      	bne.n	800593e <UART_SetConfig+0xbe>
 80058fc:	4b93      	ldr	r3, [pc, #588]	; (8005b4c <UART_SetConfig+0x2cc>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d816      	bhi.n	8005938 <UART_SetConfig+0xb8>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x90>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005921 	.word	0x08005921
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005927 	.word	0x08005927
 800591c:	08005933 	.word	0x08005933
 8005920:	2301      	movs	r3, #1
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e150      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e14d      	b.n	8005bc8 <UART_SetConfig+0x348>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e14a      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e147      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e144      	b.n	8005bc8 <UART_SetConfig+0x348>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a83      	ldr	r2, [pc, #524]	; (8005b50 <UART_SetConfig+0x2d0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d132      	bne.n	80059ae <UART_SetConfig+0x12e>
 8005948:	4b80      	ldr	r3, [pc, #512]	; (8005b4c <UART_SetConfig+0x2cc>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	2b0c      	cmp	r3, #12
 8005954:	d828      	bhi.n	80059a8 <UART_SetConfig+0x128>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0xdc>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	08005991 	.word	0x08005991
 8005960:	080059a9 	.word	0x080059a9
 8005964:	080059a9 	.word	0x080059a9
 8005968:	080059a9 	.word	0x080059a9
 800596c:	0800599d 	.word	0x0800599d
 8005970:	080059a9 	.word	0x080059a9
 8005974:	080059a9 	.word	0x080059a9
 8005978:	080059a9 	.word	0x080059a9
 800597c:	08005997 	.word	0x08005997
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059a9 	.word	0x080059a9
 800598c:	080059a3 	.word	0x080059a3
 8005990:	2300      	movs	r3, #0
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e118      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005996:	2302      	movs	r3, #2
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e115      	b.n	8005bc8 <UART_SetConfig+0x348>
 800599c:	2304      	movs	r3, #4
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e112      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059a2:	2308      	movs	r3, #8
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	e10f      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059a8:	2310      	movs	r3, #16
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e10c      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a68      	ldr	r2, [pc, #416]	; (8005b54 <UART_SetConfig+0x2d4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d120      	bne.n	80059fa <UART_SetConfig+0x17a>
 80059b8:	4b64      	ldr	r3, [pc, #400]	; (8005b4c <UART_SetConfig+0x2cc>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059c2:	2b30      	cmp	r3, #48	; 0x30
 80059c4:	d013      	beq.n	80059ee <UART_SetConfig+0x16e>
 80059c6:	2b30      	cmp	r3, #48	; 0x30
 80059c8:	d814      	bhi.n	80059f4 <UART_SetConfig+0x174>
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d009      	beq.n	80059e2 <UART_SetConfig+0x162>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d810      	bhi.n	80059f4 <UART_SetConfig+0x174>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <UART_SetConfig+0x15c>
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d006      	beq.n	80059e8 <UART_SetConfig+0x168>
 80059da:	e00b      	b.n	80059f4 <UART_SetConfig+0x174>
 80059dc:	2300      	movs	r3, #0
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e0f2      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059e2:	2302      	movs	r3, #2
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	e0ef      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059e8:	2304      	movs	r3, #4
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e0ec      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059ee:	2308      	movs	r3, #8
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e0e9      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059f4:	2310      	movs	r3, #16
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e0e6      	b.n	8005bc8 <UART_SetConfig+0x348>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a56      	ldr	r2, [pc, #344]	; (8005b58 <UART_SetConfig+0x2d8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d120      	bne.n	8005a46 <UART_SetConfig+0x1c6>
 8005a04:	4b51      	ldr	r3, [pc, #324]	; (8005b4c <UART_SetConfig+0x2cc>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d013      	beq.n	8005a3a <UART_SetConfig+0x1ba>
 8005a12:	2bc0      	cmp	r3, #192	; 0xc0
 8005a14:	d814      	bhi.n	8005a40 <UART_SetConfig+0x1c0>
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d009      	beq.n	8005a2e <UART_SetConfig+0x1ae>
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d810      	bhi.n	8005a40 <UART_SetConfig+0x1c0>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <UART_SetConfig+0x1a8>
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d006      	beq.n	8005a34 <UART_SetConfig+0x1b4>
 8005a26:	e00b      	b.n	8005a40 <UART_SetConfig+0x1c0>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e0cc      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e0c9      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a34:	2304      	movs	r3, #4
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e0c6      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	e0c3      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a40:	2310      	movs	r3, #16
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e0c0      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a44      	ldr	r2, [pc, #272]	; (8005b5c <UART_SetConfig+0x2dc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d125      	bne.n	8005a9c <UART_SetConfig+0x21c>
 8005a50:	4b3e      	ldr	r3, [pc, #248]	; (8005b4c <UART_SetConfig+0x2cc>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5e:	d017      	beq.n	8005a90 <UART_SetConfig+0x210>
 8005a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a64:	d817      	bhi.n	8005a96 <UART_SetConfig+0x216>
 8005a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6a:	d00b      	beq.n	8005a84 <UART_SetConfig+0x204>
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d811      	bhi.n	8005a96 <UART_SetConfig+0x216>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <UART_SetConfig+0x1fe>
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d006      	beq.n	8005a8a <UART_SetConfig+0x20a>
 8005a7c:	e00b      	b.n	8005a96 <UART_SetConfig+0x216>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e0a1      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a84:	2302      	movs	r3, #2
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e09e      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e09b      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a90:	2308      	movs	r3, #8
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e098      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a96:	2310      	movs	r3, #16
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e095      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <UART_SetConfig+0x2e0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d125      	bne.n	8005af2 <UART_SetConfig+0x272>
 8005aa6:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <UART_SetConfig+0x2cc>)
 8005aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ab4:	d017      	beq.n	8005ae6 <UART_SetConfig+0x266>
 8005ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aba:	d817      	bhi.n	8005aec <UART_SetConfig+0x26c>
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d00b      	beq.n	8005ada <UART_SetConfig+0x25a>
 8005ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac6:	d811      	bhi.n	8005aec <UART_SetConfig+0x26c>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <UART_SetConfig+0x254>
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad0:	d006      	beq.n	8005ae0 <UART_SetConfig+0x260>
 8005ad2:	e00b      	b.n	8005aec <UART_SetConfig+0x26c>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e076      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005ada:	2302      	movs	r3, #2
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e073      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e070      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e06d      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005aec:	2310      	movs	r3, #16
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e06a      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <UART_SetConfig+0x2e4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d138      	bne.n	8005b6e <UART_SetConfig+0x2ee>
 8005afc:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <UART_SetConfig+0x2cc>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b0a:	d017      	beq.n	8005b3c <UART_SetConfig+0x2bc>
 8005b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b10:	d82a      	bhi.n	8005b68 <UART_SetConfig+0x2e8>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	d00b      	beq.n	8005b30 <UART_SetConfig+0x2b0>
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1c:	d824      	bhi.n	8005b68 <UART_SetConfig+0x2e8>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <UART_SetConfig+0x2aa>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d006      	beq.n	8005b36 <UART_SetConfig+0x2b6>
 8005b28:	e01e      	b.n	8005b68 <UART_SetConfig+0x2e8>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e04b      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005b30:	2302      	movs	r3, #2
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e048      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005b36:	2304      	movs	r3, #4
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e045      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e042      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005b42:	bf00      	nop
 8005b44:	efff69f3 	.word	0xefff69f3
 8005b48:	40011000 	.word	0x40011000
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	40004400 	.word	0x40004400
 8005b54:	40004800 	.word	0x40004800
 8005b58:	40004c00 	.word	0x40004c00
 8005b5c:	40005000 	.word	0x40005000
 8005b60:	40011400 	.word	0x40011400
 8005b64:	40007800 	.word	0x40007800
 8005b68:	2310      	movs	r3, #16
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e02c      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a72      	ldr	r2, [pc, #456]	; (8005d3c <UART_SetConfig+0x4bc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d125      	bne.n	8005bc4 <UART_SetConfig+0x344>
 8005b78:	4b71      	ldr	r3, [pc, #452]	; (8005d40 <UART_SetConfig+0x4c0>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b86:	d017      	beq.n	8005bb8 <UART_SetConfig+0x338>
 8005b88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b8c:	d817      	bhi.n	8005bbe <UART_SetConfig+0x33e>
 8005b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b92:	d00b      	beq.n	8005bac <UART_SetConfig+0x32c>
 8005b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b98:	d811      	bhi.n	8005bbe <UART_SetConfig+0x33e>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <UART_SetConfig+0x326>
 8005b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba2:	d006      	beq.n	8005bb2 <UART_SetConfig+0x332>
 8005ba4:	e00b      	b.n	8005bbe <UART_SetConfig+0x33e>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e00d      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005bac:	2302      	movs	r3, #2
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e00a      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e007      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e004      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005bbe:	2310      	movs	r3, #16
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e001      	b.n	8005bc8 <UART_SetConfig+0x348>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd0:	d15b      	bne.n	8005c8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d828      	bhi.n	8005c2a <UART_SetConfig+0x3aa>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x360>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe fd9c 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8005c08:	61b8      	str	r0, [r7, #24]
        break;
 8005c0a:	e013      	b.n	8005c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fe fdac 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8005c10:	61b8      	str	r0, [r7, #24]
        break;
 8005c12:	e00f      	b.n	8005c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b4b      	ldr	r3, [pc, #300]	; (8005d44 <UART_SetConfig+0x4c4>)
 8005c16:	61bb      	str	r3, [r7, #24]
        break;
 8005c18:	e00c      	b.n	8005c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fe fc7f 	bl	800451c <HAL_RCC_GetSysClockFreq>
 8005c1e:	61b8      	str	r0, [r7, #24]
        break;
 8005c20:	e008      	b.n	8005c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c26:	61bb      	str	r3, [r7, #24]
        break;
 8005c28:	e004      	b.n	8005c34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	77bb      	strb	r3, [r7, #30]
        break;
 8005c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d074      	beq.n	8005d24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	005a      	lsls	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	441a      	add	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d916      	bls.n	8005c84 <UART_SetConfig+0x404>
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d212      	bcs.n	8005c84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	89fa      	ldrh	r2, [r7, #14]
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e04f      	b.n	8005d24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	77bb      	strb	r3, [r7, #30]
 8005c88:	e04c      	b.n	8005d24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c8a:	7ffb      	ldrb	r3, [r7, #31]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d828      	bhi.n	8005ce2 <UART_SetConfig+0x462>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x418>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005ce3 	.word	0x08005ce3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005ce3 	.word	0x08005ce3
 8005cb4:	08005ce3 	.word	0x08005ce3
 8005cb8:	08005cdb 	.word	0x08005cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cbc:	f7fe fd40 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8005cc0:	61b8      	str	r0, [r7, #24]
        break;
 8005cc2:	e013      	b.n	8005cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc4:	f7fe fd50 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8005cc8:	61b8      	str	r0, [r7, #24]
        break;
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <UART_SetConfig+0x4c4>)
 8005cce:	61bb      	str	r3, [r7, #24]
        break;
 8005cd0:	e00c      	b.n	8005cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd2:	f7fe fc23 	bl	800451c <HAL_RCC_GetSysClockFreq>
 8005cd6:	61b8      	str	r0, [r7, #24]
        break;
 8005cd8:	e008      	b.n	8005cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	61bb      	str	r3, [r7, #24]
        break;
 8005ce0:	e004      	b.n	8005cec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cea:	bf00      	nop
    }

    if (pclk != 0U)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	085a      	lsrs	r2, r3, #1
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d909      	bls.n	8005d20 <UART_SetConfig+0x4a0>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d12:	d205      	bcs.n	8005d20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e001      	b.n	8005d24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d30:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40007c00 	.word	0x40007c00
 8005d40:	40023800 	.word	0x40023800
 8005d44:	00f42400 	.word	0x00f42400

08005d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01a      	beq.n	8005e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e46:	d10a      	bne.n	8005e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e9c:	f7fb fff4 	bl	8001e88 <HAL_GetTick>
 8005ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d10e      	bne.n	8005ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f81b 	bl	8005efa <UART_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e011      	b.n	8005ef2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b09c      	sub	sp, #112	; 0x70
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0a:	e0a7      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	f000 80a3 	beq.w	800605c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f16:	f7fb ffb7 	bl	8001e88 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x32>
 8005f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d13f      	bne.n	8005fac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f40:	667b      	str	r3, [r7, #100]	; 0x64
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e6      	bne.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	663b      	str	r3, [r7, #96]	; 0x60
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e5      	bne.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e068      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d050      	beq.n	800605c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc8:	d148      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e6      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	613b      	str	r3, [r7, #16]
   return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	66bb      	str	r3, [r7, #104]	; 0x68
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006026:	623a      	str	r2, [r7, #32]
 8006028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	61bb      	str	r3, [r7, #24]
   return(result);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e010      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	4013      	ands	r3, r2
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	429a      	cmp	r2, r3
 8006078:	f43f af48 	beq.w	8005f0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3770      	adds	r7, #112	; 0x70
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006086:	b480      	push	{r7}
 8006088:	b095      	sub	sp, #84	; 0x54
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ac:	643b      	str	r3, [r7, #64]	; 0x40
 80060ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e6      	bne.n	800608e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3308      	adds	r3, #8
 80060c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3308      	adds	r3, #8
 80060de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e5      	bne.n	80060c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d118      	bne.n	800612e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	60bb      	str	r3, [r7, #8]
   return(result);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f023 0310 	bic.w	r3, r3, #16
 8006110:	647b      	str	r3, [r7, #68]	; 0x44
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6979      	ldr	r1, [r7, #20]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	613b      	str	r3, [r7, #16]
   return(result);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e6      	bne.n	80060fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006142:	bf00      	nop
 8006144:	3754      	adds	r7, #84	; 0x54
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fb71 	bl	8005854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b088      	sub	sp, #32
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	613b      	str	r3, [r7, #16]
   return(result);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e6      	bne.n	8006182 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fb3d 	bl	8005840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c6:	bf00      	nop
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fce1 	bl	8007ba6 <VL53L0X_get_offset_calibration_data_micro_meter>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80061e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80061f4:	b5b0      	push	{r4, r5, r7, lr}
 80061f6:	b096      	sub	sp, #88	; 0x58
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006202:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006206:	2b00      	cmp	r3, #0
 8006208:	d107      	bne.n	800621a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800620a:	2200      	movs	r2, #0
 800620c:	2188      	movs	r1, #136	; 0x88
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f004 feda 	bl	800afc8 <VL53L0X_WrByte>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006228:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006232:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a9e      	ldr	r2, [pc, #632]	; (80064b4 <VL53L0X_DataInit+0x2c0>)
 800623a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a9d      	ldr	r2, [pc, #628]	; (80064b8 <VL53L0X_DataInit+0x2c4>)
 8006242:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800624c:	f107 0310 	add.w	r3, r7, #16
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fac2 	bl	80067dc <VL53L0X_GetDeviceParameters>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800625e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006262:	2b00      	cmp	r3, #0
 8006264:	d112      	bne.n	800628c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006266:	2300      	movs	r3, #0
 8006268:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800626a:	2300      	movs	r3, #0
 800626c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f103 0410 	add.w	r4, r3, #16
 8006274:	f107 0510 	add.w	r5, r7, #16
 8006278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006284:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2264      	movs	r2, #100	; 0x64
 8006290:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f44f 7261 	mov.w	r2, #900	; 0x384
 800629a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80062a4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80062ae:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062ba:	2201      	movs	r2, #1
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f004 fe82 	bl	800afc8 <VL53L0X_WrByte>
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062d2:	2201      	movs	r2, #1
 80062d4:	21ff      	movs	r1, #255	; 0xff
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f004 fe76 	bl	800afc8 <VL53L0X_WrByte>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f004 fe6a 	bl	800afc8 <VL53L0X_WrByte>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006302:	f107 030f 	add.w	r3, r7, #15
 8006306:	461a      	mov	r2, r3
 8006308:	2191      	movs	r1, #145	; 0x91
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f004 fede 	bl	800b0cc <VL53L0X_RdByte>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006318:	4313      	orrs	r3, r2
 800631a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800631e:	7bfa      	ldrb	r2, [r7, #15]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006326:	2201      	movs	r2, #1
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f004 fe4c 	bl	800afc8 <VL53L0X_WrByte>
 8006330:	4603      	mov	r3, r0
 8006332:	461a      	mov	r2, r3
 8006334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006338:	4313      	orrs	r3, r2
 800633a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800633e:	2200      	movs	r2, #0
 8006340:	21ff      	movs	r1, #255	; 0xff
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f004 fe40 	bl	800afc8 <VL53L0X_WrByte>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006350:	4313      	orrs	r3, r2
 8006352:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f004 fe34 	bl	800afc8 <VL53L0X_WrByte>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006368:	4313      	orrs	r3, r2
 800636a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800636e:	2300      	movs	r3, #0
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
 8006372:	e014      	b.n	800639e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006374:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800637c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637e:	b29b      	uxth	r3, r3
 8006380:	2201      	movs	r2, #1
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fd35 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006392:	4313      	orrs	r3, r2
 8006394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639a:	3301      	adds	r3, #1
 800639c:	653b      	str	r3, [r7, #80]	; 0x50
 800639e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a0:	2b05      	cmp	r3, #5
 80063a2:	dde7      	ble.n	8006374 <VL53L0X_DataInit+0x180>
 80063a4:	e000      	b.n	80063a8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80063a6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80063a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80063b0:	2200      	movs	r2, #0
 80063b2:	2102      	movs	r1, #2
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fd1d 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80063c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d107      	bne.n	80063d8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80063c8:	2200      	movs	r2, #0
 80063ca:	2103      	movs	r1, #3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fd11 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80063d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d107      	bne.n	80063f0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80063e0:	2200      	movs	r2, #0
 80063e2:	2104      	movs	r1, #4
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fd05 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80063f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d107      	bne.n	8006408 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80063f8:	2200      	movs	r2, #0
 80063fa:	2105      	movs	r1, #5
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fcf9 	bl	8006df4 <VL53L0X_SetLimitCheckEnable>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006408:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800640c:	2b00      	cmp	r3, #0
 800640e:	d108      	bne.n	8006422 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006410:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006414:	2100      	movs	r1, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd9c 	bl	8006f54 <VL53L0X_SetLimitCheckValue>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006422:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006426:	2b00      	cmp	r3, #0
 8006428:	d108      	bne.n	800643c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800642a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800642e:	2101      	movs	r1, #1
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fd8f 	bl	8006f54 <VL53L0X_SetLimitCheckValue>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800643c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006444:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006448:	2102      	movs	r1, #2
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fd82 	bl	8006f54 <VL53L0X_SetLimitCheckValue>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006456:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800645e:	2200      	movs	r2, #0
 8006460:	2103      	movs	r1, #3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fd76 	bl	8006f54 <VL53L0X_SetLimitCheckValue>
 8006468:	4603      	mov	r3, r0
 800646a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800646e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	22ff      	movs	r2, #255	; 0xff
 800647a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	2101      	movs	r1, #1
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f004 fda0 	bl	800afc8 <VL53L0X_WrByte>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006496:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80064a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3758      	adds	r7, #88	; 0x58
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bdb0      	pop	{r4, r5, r7, pc}
 80064b2:	bf00      	nop
 80064b4:	00016b85 	.word	0x00016b85
 80064b8:	000970a4 	.word	0x000970a4

080064bc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b09e      	sub	sp, #120	; 0x78
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80064ca:	f107 031c 	add.w	r3, r7, #28
 80064ce:	2240      	movs	r2, #64	; 0x40
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f004 fee8 	bl	800b2a8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80064f8:	2101      	movs	r1, #1
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 faa9 	bl	8008a52 <VL53L0X_get_info_from_device>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800650c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800651c:	2b01      	cmp	r3, #1
 800651e:	d80d      	bhi.n	800653c <VL53L0X_StaticInit+0x80>
 8006520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006524:	2b01      	cmp	r3, #1
 8006526:	d102      	bne.n	800652e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800652a:	2b20      	cmp	r3, #32
 800652c:	d806      	bhi.n	800653c <VL53L0X_StaticInit+0x80>
 800652e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10e      	bne.n	8006554 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006538:	2b0c      	cmp	r3, #12
 800653a:	d90b      	bls.n	8006554 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800653c:	f107 0218 	add.w	r2, r7, #24
 8006540:	f107 0314 	add.w	r3, r7, #20
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fd28 	bl	8007f9c <VL53L0X_perform_ref_spad_management>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006552:	e009      	b.n	8006568 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006558:	461a      	mov	r2, r3
 800655a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 ff29 	bl	80083b4 <VL53L0X_set_reference_spads>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006568:	4b94      	ldr	r3, [pc, #592]	; (80067bc <VL53L0X_StaticInit+0x300>)
 800656a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800656c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10f      	bne.n	8006594 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800657a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800657e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800658c:	66bb      	str	r3, [r7, #104]	; 0x68
 800658e:	e001      	b.n	8006594 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006590:	4b8a      	ldr	r3, [pc, #552]	; (80067bc <VL53L0X_StaticInit+0x300>)
 8006592:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006594:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800659c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f003 fdfc 	bl	800a19c <VL53L0X_load_tuning_settings>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80065aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80065b2:	2300      	movs	r3, #0
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2304      	movs	r3, #4
 80065b8:	2200      	movs	r2, #0
 80065ba:	2100      	movs	r1, #0
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 f8f1 	bl	80077a4 <VL53L0X_SetGpioConfig>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d121      	bne.n	8006614 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065d0:	2201      	movs	r2, #1
 80065d2:	21ff      	movs	r1, #255	; 0xff
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f004 fcf7 	bl	800afc8 <VL53L0X_WrByte>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80065e0:	f107 031a 	add.w	r3, r7, #26
 80065e4:	461a      	mov	r2, r3
 80065e6:	2184      	movs	r1, #132	; 0x84
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f004 fd99 	bl	800b120 <VL53L0X_RdWord>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065fc:	2200      	movs	r2, #0
 80065fe:	21ff      	movs	r1, #255	; 0xff
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f004 fce1 	bl	800afc8 <VL53L0X_WrByte>
 8006606:	4603      	mov	r3, r0
 8006608:	461a      	mov	r2, r3
 800660a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800660e:	4313      	orrs	r3, r2
 8006610:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006614:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800661c:	8b7b      	ldrh	r3, [r7, #26]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006628:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006630:	f107 031c 	add.w	r3, r7, #28
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8d0 	bl	80067dc <VL53L0X_GetDeviceParameters>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006642:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006646:	2b00      	cmp	r3, #0
 8006648:	d110      	bne.n	800666c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800664a:	f107 0319 	add.w	r3, r7, #25
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f992 	bl	800697a <VL53L0X_GetFractionEnable>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800665c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006664:	7e7a      	ldrb	r2, [r7, #25]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800666c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10e      	bne.n	8006692 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f103 0410 	add.w	r4, r3, #16
 800667a:	f107 051c 	add.w	r5, r7, #28
 800667e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800668a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800668e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006692:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006696:	2b00      	cmp	r3, #0
 8006698:	d111      	bne.n	80066be <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800669a:	f107 0319 	add.w	r3, r7, #25
 800669e:	461a      	mov	r2, r3
 80066a0:	2101      	movs	r1, #1
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f004 fd12 	bl	800b0cc <VL53L0X_RdByte>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80066ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80066b6:	7e7a      	ldrb	r2, [r7, #25]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80066be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d107      	bne.n	80066d6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80066c6:	2200      	movs	r2, #0
 80066c8:	2100      	movs	r1, #0
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9ca 	bl	8006a64 <VL53L0X_SetSequenceStepEnable>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80066d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80066de:	2200      	movs	r2, #0
 80066e0:	2102      	movs	r1, #2
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9be 	bl	8006a64 <VL53L0X_SetSequenceStepEnable>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80066ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2203      	movs	r2, #3
 80066fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80066fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006706:	f107 0313 	add.w	r3, r7, #19
 800670a:	461a      	mov	r2, r3
 800670c:	2100      	movs	r1, #0
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f990 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800671a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006722:	7cfa      	ldrb	r2, [r7, #19]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800672a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006732:	f107 0313 	add.w	r3, r7, #19
 8006736:	461a      	mov	r2, r3
 8006738:	2101      	movs	r1, #1
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f97a 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006746:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800674a:	2b00      	cmp	r3, #0
 800674c:	d103      	bne.n	8006756 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800674e:	7cfa      	ldrb	r2, [r7, #19]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006756:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800675e:	f107 030c 	add.w	r3, r7, #12
 8006762:	461a      	mov	r2, r3
 8006764:	2103      	movs	r1, #3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f002 fef4 	bl	8009554 <get_sequence_step_timeout>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006772:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006782:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800678a:	f107 030c 	add.w	r3, r7, #12
 800678e:	461a      	mov	r2, r3
 8006790:	2104      	movs	r1, #4
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f002 fede 	bl	8009554 <get_sequence_step_timeout>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800679e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80067ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3770      	adds	r7, #112	; 0x70
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bdb0      	pop	{r4, r5, r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000024 	.word	0x20000024

080067c0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80067c8:	239d      	movs	r3, #157	; 0x9d
 80067ca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80067cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8b0 	bl	8006954 <VL53L0X_GetDeviceMode>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80067f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d107      	bne.n	8006810 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa78 	bl	8006cfc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d107      	bne.n	8006836 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	3310      	adds	r3, #16
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 faae 	bl	8006d8e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d107      	bne.n	800684e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	3314      	adds	r3, #20
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff fcc2 	bl	80061ce <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800684a:	4603      	mov	r3, r0
 800684c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800684e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d134      	bne.n	80068c0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	e02a      	b.n	80068b2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800685c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d12a      	bne.n	80068ba <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	b299      	uxth	r1, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3308      	adds	r3, #8
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4413      	add	r3, r2
 8006872:	3304      	adds	r3, #4
 8006874:	461a      	mov	r2, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fbce 	bl	8007018 <VL53L0X_GetLimitCheckValue>
 800687c:	4603      	mov	r3, r0
 800687e:	461a      	mov	r2, r3
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	4313      	orrs	r3, r2
 8006884:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d117      	bne.n	80068be <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	b299      	uxth	r1, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	3318      	adds	r3, #24
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4413      	add	r3, r2
 800689a:	461a      	mov	r2, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb35 	bl	8006f0c <VL53L0X_GetLimitCheckEnable>
 80068a2:	4603      	mov	r3, r0
 80068a4:	461a      	mov	r2, r3
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3301      	adds	r3, #1
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	ddd1      	ble.n	800685c <VL53L0X_GetDeviceParameters+0x80>
 80068b8:	e002      	b.n	80068c0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80068be:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	333c      	adds	r3, #60	; 0x3c
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc30 	bl	8007134 <VL53L0X_GetWrapAroundCheckEnable>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80068d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f879 	bl	80069de <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	2b15      	cmp	r3, #21
 8006910:	bf8c      	ite	hi
 8006912:	2201      	movhi	r2, #1
 8006914:	2200      	movls	r2, #0
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	2a00      	cmp	r2, #0
 800691a:	d10e      	bne.n	800693a <VL53L0X_SetDeviceMode+0x3e>
 800691c:	2201      	movs	r2, #1
 800691e:	409a      	lsls	r2, r3
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <VL53L0X_SetDeviceMode+0x54>)
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	741a      	strb	r2, [r3, #16]
		break;
 8006938:	e001      	b.n	800693e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800693a:	23f8      	movs	r3, #248	; 0xf8
 800693c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800693e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	0030000b 	.word	0x0030000b

08006954 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7c1a      	ldrb	r2, [r3, #16]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	2109      	movs	r1, #9
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f004 fb9d 	bl	800b0cc <VL53L0X_RdByte>
 8006992:	4603      	mov	r3, r0
 8006994:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80069ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f003 fa56 	bl	8009e7a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80069d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f003 fb23 	bl	800a03a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80069f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
 8006a10:	4613      	mov	r3, r2
 8006a12:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006a18:	78ba      	ldrb	r2, [r7, #2]
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f002 ff6b 	bl	80098fa <VL53L0X_set_vcsel_pulse_period>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f003 f9dd 	bl	8009e0c <VL53L0X_get_vcsel_pulse_period>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
 8006a70:	4613      	mov	r3, r2
 8006a72:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a80:	f107 030f 	add.w	r3, r7, #15
 8006a84:	461a      	mov	r2, r3
 8006a86:	2101      	movs	r1, #1
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f004 fb1f 	bl	800b0cc <VL53L0X_RdByte>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d15a      	bne.n	8006b54 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006a9e:	78bb      	ldrb	r3, [r7, #2]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d12b      	bne.n	8006afc <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d825      	bhi.n	8006af6 <VL53L0X_SetSequenceStepEnable+0x92>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ac5 	.word	0x08006ac5
 8006ab4:	08006acf 	.word	0x08006acf
 8006ab8:	08006ad9 	.word	0x08006ad9
 8006abc:	08006ae3 	.word	0x08006ae3
 8006ac0:	08006aed 	.word	0x08006aed
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006ac4:	7dbb      	ldrb	r3, [r7, #22]
 8006ac6:	f043 0310 	orr.w	r3, r3, #16
 8006aca:	75bb      	strb	r3, [r7, #22]
				break;
 8006acc:	e043      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006ace:	7dbb      	ldrb	r3, [r7, #22]
 8006ad0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006ad4:	75bb      	strb	r3, [r7, #22]
				break;
 8006ad6:	e03e      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006ad8:	7dbb      	ldrb	r3, [r7, #22]
 8006ada:	f043 0304 	orr.w	r3, r3, #4
 8006ade:	75bb      	strb	r3, [r7, #22]
				break;
 8006ae0:	e039      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006ae2:	7dbb      	ldrb	r3, [r7, #22]
 8006ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae8:	75bb      	strb	r3, [r7, #22]
				break;
 8006aea:	e034      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006aec:	7dbb      	ldrb	r3, [r7, #22]
 8006aee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006af2:	75bb      	strb	r3, [r7, #22]
				break;
 8006af4:	e02f      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006af6:	23fc      	movs	r3, #252	; 0xfc
 8006af8:	75fb      	strb	r3, [r7, #23]
 8006afa:	e02c      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d825      	bhi.n	8006b4e <VL53L0X_SetSequenceStepEnable+0xea>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b1d 	.word	0x08006b1d
 8006b0c:	08006b27 	.word	0x08006b27
 8006b10:	08006b31 	.word	0x08006b31
 8006b14:	08006b3b 	.word	0x08006b3b
 8006b18:	08006b45 	.word	0x08006b45
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006b1c:	7dbb      	ldrb	r3, [r7, #22]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	75bb      	strb	r3, [r7, #22]
				break;
 8006b24:	e017      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006b26:	7dbb      	ldrb	r3, [r7, #22]
 8006b28:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006b2c:	75bb      	strb	r3, [r7, #22]
				break;
 8006b2e:	e012      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006b30:	7dbb      	ldrb	r3, [r7, #22]
 8006b32:	f023 0304 	bic.w	r3, r3, #4
 8006b36:	75bb      	strb	r3, [r7, #22]
				break;
 8006b38:	e00d      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006b3a:	7dbb      	ldrb	r3, [r7, #22]
 8006b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b40:	75bb      	strb	r3, [r7, #22]
				break;
 8006b42:	e008      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006b44:	7dbb      	ldrb	r3, [r7, #22]
 8006b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4a:	75bb      	strb	r3, [r7, #22]
				break;
 8006b4c:	e003      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b4e:	23fc      	movs	r3, #252	; 0xfc
 8006b50:	75fb      	strb	r3, [r7, #23]
 8006b52:	e000      	b.n	8006b56 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006b54:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	7dba      	ldrb	r2, [r7, #22]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d01e      	beq.n	8006b9c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d107      	bne.n	8006b76 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006b66:	7dbb      	ldrb	r3, [r7, #22]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f004 fa2b 	bl	800afc8 <VL53L0X_WrByte>
 8006b72:	4603      	mov	r3, r0
 8006b74:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7dba      	ldrb	r2, [r7, #22]
 8006b82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006b94:	6939      	ldr	r1, [r7, #16]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ff0e 	bl	80069b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	72fb      	strb	r3, [r7, #11]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d836      	bhi.n	8006c38 <sequence_step_enabled+0x90>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <sequence_step_enabled+0x28>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006bf7 	.word	0x08006bf7
 8006bd8:	08006c09 	.word	0x08006c09
 8006bdc:	08006c1b 	.word	0x08006c1b
 8006be0:	08006c2d 	.word	0x08006c2d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006be4:	7abb      	ldrb	r3, [r7, #10]
 8006be6:	111b      	asrs	r3, r3, #4
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	701a      	strb	r2, [r3, #0]
		break;
 8006bf4:	e022      	b.n	8006c3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006bf6:	7abb      	ldrb	r3, [r7, #10]
 8006bf8:	10db      	asrs	r3, r3, #3
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	701a      	strb	r2, [r3, #0]
		break;
 8006c06:	e019      	b.n	8006c3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006c08:	7abb      	ldrb	r3, [r7, #10]
 8006c0a:	109b      	asrs	r3, r3, #2
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	701a      	strb	r2, [r3, #0]
		break;
 8006c18:	e010      	b.n	8006c3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006c1a:	7abb      	ldrb	r3, [r7, #10]
 8006c1c:	119b      	asrs	r3, r3, #6
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	701a      	strb	r2, [r3, #0]
		break;
 8006c2a:	e007      	b.n	8006c3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006c2c:	7abb      	ldrb	r3, [r7, #10]
 8006c2e:	09db      	lsrs	r3, r3, #7
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	701a      	strb	r2, [r3, #0]
		break;
 8006c36:	e001      	b.n	8006c3c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c38:	23fc      	movs	r3, #252	; 0xfc
 8006c3a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006c5e:	f107 030e 	add.w	r3, r7, #14
 8006c62:	461a      	mov	r2, r3
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f004 fa30 	bl	800b0cc <VL53L0X_RdByte>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006c78:	7bba      	ldrb	r2, [r7, #14]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff ff92 	bl	8006ba8 <sequence_step_enabled>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d108      	bne.n	8006ca2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006c90:	7bba      	ldrb	r2, [r7, #14]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	3302      	adds	r3, #2
 8006c96:	2101      	movs	r1, #1
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff ff85 	bl	8006ba8 <sequence_step_enabled>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d108      	bne.n	8006cbc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006caa:	7bba      	ldrb	r2, [r7, #14]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff ff78 	bl	8006ba8 <sequence_step_enabled>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d108      	bne.n	8006cd6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006cc4:	7bba      	ldrb	r2, [r7, #14]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	3303      	adds	r3, #3
 8006cca:	2103      	movs	r1, #3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff ff6b 	bl	8006ba8 <sequence_step_enabled>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d108      	bne.n	8006cf0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006cde:	7bba      	ldrb	r2, [r7, #14]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2104      	movs	r1, #4
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff ff5e 	bl	8006ba8 <sequence_step_enabled>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006d0a:	f107 030c 	add.w	r3, r7, #12
 8006d0e:	461a      	mov	r2, r3
 8006d10:	21f8      	movs	r1, #248	; 0xf8
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f004 fa04 	bl	800b120 <VL53L0X_RdWord>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d108      	bne.n	8006d36 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006d24:	f107 0308 	add.w	r3, r7, #8
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f004 fa2f 	bl	800b190 <VL53L0X_RdDWord>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10c      	bne.n	8006d58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	89ba      	ldrh	r2, [r7, #12]
 8006d48:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7f1b      	ldrb	r3, [r3, #28]
 8006d76:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	7bba      	ldrb	r2, [r7, #14]
 8006d7c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006d9c:	f107 030e 	add.w	r3, r7, #14
 8006da0:	461a      	mov	r2, r3
 8006da2:	2120      	movs	r1, #32
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f004 f9bb 	bl	800b120 <VL53L0X_RdWord>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d118      	bne.n	8006de8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006db6:	89fb      	ldrh	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	771a      	strb	r2, [r3, #28]
 8006dce:	e00b      	b.n	8006de8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	807b      	strh	r3, [r7, #2]
 8006e00:	4613      	mov	r3, r2
 8006e02:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006e14:	887b      	ldrh	r3, [r7, #2]
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d902      	bls.n	8006e20 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e1a:	23fc      	movs	r3, #252	; 0xfc
 8006e1c:	75fb      	strb	r3, [r7, #23]
 8006e1e:	e05b      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006e20:	787b      	ldrb	r3, [r7, #1]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	73bb      	strb	r3, [r7, #14]
 8006e32:	e00a      	b.n	8006e4a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006e34:	887b      	ldrh	r3, [r7, #2]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006e4a:	887b      	ldrh	r3, [r7, #2]
 8006e4c:	2b05      	cmp	r3, #5
 8006e4e:	d841      	bhi.n	8006ed4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006e50:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006e7b 	.word	0x08006e7b
 8006e60:	08006e91 	.word	0x08006e91
 8006e64:	08006e9b 	.word	0x08006e9b
 8006e68:	08006ea5 	.word	0x08006ea5
 8006e6c:	08006ebd 	.word	0x08006ebd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006e78:	e02e      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	2144      	movs	r1, #68	; 0x44
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f004 f8c3 	bl	800b010 <VL53L0X_WrWord>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	75fb      	strb	r3, [r7, #23]

			break;
 8006e8e:	e023      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7bfa      	ldrb	r2, [r7, #15]
 8006e94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006e98:	e01e      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	7bfa      	ldrb	r2, [r7, #15]
 8006e9e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006ea2:	e019      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006eaa:	7b7b      	ldrb	r3, [r7, #13]
 8006eac:	22fe      	movs	r2, #254	; 0xfe
 8006eae:	2160      	movs	r1, #96	; 0x60
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f004 f8d7 	bl	800b064 <VL53L0X_UpdateByte>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006eba:	e00d      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006ec2:	7b7b      	ldrb	r3, [r7, #13]
 8006ec4:	22ef      	movs	r2, #239	; 0xef
 8006ec6:	2160      	movs	r1, #96	; 0x60
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f004 f8cb 	bl	800b064 <VL53L0X_UpdateByte>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006ed2:	e001      	b.n	8006ed8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ed4:	23fc      	movs	r3, #252	; 0xfc
 8006ed6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10f      	bne.n	8006f00 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006ee0:	787b      	ldrb	r3, [r7, #1]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006ef2:	e005      	b.n	8006f00 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ef4:	887b      	ldrh	r3, [r7, #2]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	460b      	mov	r3, r1
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006f1e:	897b      	ldrh	r3, [r7, #10]
 8006f20:	2b05      	cmp	r3, #5
 8006f22:	d905      	bls.n	8006f30 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f24:	23fc      	movs	r3, #252	; 0xfc
 8006f26:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e008      	b.n	8006f42 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f30:	897b      	ldrh	r3, [r7, #10]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f3a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7dba      	ldrb	r2, [r7, #22]
 8006f40:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006f66:	897b      	ldrh	r3, [r7, #10]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f70:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006f72:	7dbb      	ldrb	r3, [r7, #22]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d107      	bne.n	8006f88 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	e040      	b.n	800700a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006f88:	897b      	ldrh	r3, [r7, #10]
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d830      	bhi.n	8006ff0 <VL53L0X_SetLimitCheckValue+0x9c>
 8006f8e:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <VL53L0X_SetLimitCheckValue+0x40>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fad 	.word	0x08006fad
 8006f98:	08006fb5 	.word	0x08006fb5
 8006f9c:	08006fcb 	.word	0x08006fcb
 8006fa0:	08006fd3 	.word	0x08006fd3
 8006fa4:	08006fdb 	.word	0x08006fdb
 8006fa8:	08006fdb 	.word	0x08006fdb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006fb2:	e01f      	b.n	8006ff4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	2144      	movs	r1, #68	; 0x44
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f004 f826 	bl	800b010 <VL53L0X_WrWord>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006fc8:	e014      	b.n	8006ff4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006fd0:	e010      	b.n	8006ff4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006fd8:	e00c      	b.n	8006ff4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2164      	movs	r1, #100	; 0x64
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f004 f813 	bl	800b010 <VL53L0X_WrWord>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006fee:	e001      	b.n	8006ff4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ff0:	23fc      	movs	r3, #252	; 0xfc
 8006ff2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ffc:	897b      	ldrh	r3, [r7, #10]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	330c      	adds	r3, #12
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800700a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop

08007018 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	460b      	mov	r3, r1
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007026:	2300      	movs	r3, #0
 8007028:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800702e:	897b      	ldrh	r3, [r7, #10]
 8007030:	2b05      	cmp	r3, #5
 8007032:	d847      	bhi.n	80070c4 <VL53L0X_GetLimitCheckValue+0xac>
 8007034:	a201      	add	r2, pc, #4	; (adr r2, 800703c <VL53L0X_GetLimitCheckValue+0x24>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007055 	.word	0x08007055
 8007040:	08007061 	.word	0x08007061
 8007044:	08007087 	.word	0x08007087
 8007048:	08007093 	.word	0x08007093
 800704c:	0800709f 	.word	0x0800709f
 8007050:	0800709f 	.word	0x0800709f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	77bb      	strb	r3, [r7, #30]
		break;
 800705e:	e033      	b.n	80070c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007060:	f107 0316 	add.w	r3, r7, #22
 8007064:	461a      	mov	r2, r3
 8007066:	2144      	movs	r1, #68	; 0x44
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f004 f859 	bl	800b120 <VL53L0X_RdWord>
 800706e:	4603      	mov	r3, r0
 8007070:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007072:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800707a:	8afb      	ldrh	r3, [r7, #22]
 800707c:	025b      	lsls	r3, r3, #9
 800707e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007080:	2301      	movs	r3, #1
 8007082:	77bb      	strb	r3, [r7, #30]
		break;
 8007084:	e020      	b.n	80070c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	77bb      	strb	r3, [r7, #30]
		break;
 8007090:	e01a      	b.n	80070c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	77bb      	strb	r3, [r7, #30]
		break;
 800709c:	e014      	b.n	80070c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800709e:	f107 0316 	add.w	r3, r7, #22
 80070a2:	461a      	mov	r2, r3
 80070a4:	2164      	movs	r1, #100	; 0x64
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f004 f83a 	bl	800b120 <VL53L0X_RdWord>
 80070ac:	4603      	mov	r3, r0
 80070ae:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80070b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80070b8:	8afb      	ldrh	r3, [r7, #22]
 80070ba:	025b      	lsls	r3, r3, #9
 80070bc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	77bb      	strb	r3, [r7, #30]
		break;
 80070c2:	e001      	b.n	80070c8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070c4:	23fc      	movs	r3, #252	; 0xfc
 80070c6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d12a      	bne.n	8007126 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80070d0:	7fbb      	ldrb	r3, [r7, #30]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d124      	bne.n	8007120 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d110      	bne.n	80070fe <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	330c      	adds	r3, #12
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80070f0:	897b      	ldrh	r3, [r7, #10]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80070fc:	e013      	b.n	8007126 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007104:	897b      	ldrh	r3, [r7, #10]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	330c      	adds	r3, #12
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800711e:	e002      	b.n	8007126 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007126:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop

08007134 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007142:	f107 030e 	add.w	r3, r7, #14
 8007146:	461a      	mov	r2, r3
 8007148:	2101      	movs	r1, #1
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f003 ffbe 	bl	800b0cc <VL53L0X_RdByte>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10e      	bne.n	800717a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800715c:	7bba      	ldrb	r2, [r7, #14]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	b25b      	sxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	da03      	bge.n	8007174 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2201      	movs	r2, #1
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	e002      	b.n	800717a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800717a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781a      	ldrb	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800718c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80071a4:	f107 030e 	add.w	r3, r7, #14
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff fbd2 	bl	8006954 <VL53L0X_GetDeviceMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80071b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f898 	bl	80072f8 <VL53L0X_StartMeasurement>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80071cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fb6f 	bl	80088b8 <VL53L0X_measurement_poll_for_completion>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80071de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2203      	movs	r2, #3
 80071f0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80071f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800720c:	2300      	movs	r3, #0
 800720e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007210:	2301      	movs	r3, #1
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f001 fb11 	bl	800883e <VL53L0X_perform_ref_calibration>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007220:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007238:	2300      	movs	r3, #0
 800723a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007242:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007244:	7dbb      	ldrb	r3, [r7, #22]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d005      	beq.n	8007256 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800724a:	7dbb      	ldrb	r3, [r7, #22]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d002      	beq.n	8007256 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007250:	7dbb      	ldrb	r3, [r7, #22]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d147      	bne.n	80072e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	f107 0210 	add.w	r2, r7, #16
 800725e:	2101      	movs	r1, #1
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fbc3 	bl	80079ec <VL53L0X_GetInterruptThresholds>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007270:	d803      	bhi.n	800727a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007272:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007274:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007278:	d935      	bls.n	80072e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800727a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d131      	bne.n	80072e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d006      	beq.n	8007296 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007288:	491a      	ldr	r1, [pc, #104]	; (80072f4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f002 ff86 	bl	800a19c <VL53L0X_load_tuning_settings>
 8007290:	4603      	mov	r3, r0
 8007292:	75fb      	strb	r3, [r7, #23]
 8007294:	e027      	b.n	80072e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007296:	2204      	movs	r2, #4
 8007298:	21ff      	movs	r1, #255	; 0xff
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f003 fe94 	bl	800afc8 <VL53L0X_WrByte>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80072aa:	2200      	movs	r2, #0
 80072ac:	2170      	movs	r1, #112	; 0x70
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f003 fe8a 	bl	800afc8 <VL53L0X_WrByte>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072be:	2200      	movs	r2, #0
 80072c0:	21ff      	movs	r1, #255	; 0xff
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f003 fe80 	bl	800afc8 <VL53L0X_WrByte>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80072d2:	2200      	movs	r2, #0
 80072d4:	2180      	movs	r1, #128	; 0x80
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f003 fe76 	bl	800afc8 <VL53L0X_WrByte>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80072e6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000118 	.word	0x20000118

080072f8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007300:	2300      	movs	r3, #0
 8007302:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007308:	f107 030e 	add.w	r3, r7, #14
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fb20 	bl	8006954 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007314:	2201      	movs	r2, #1
 8007316:	2180      	movs	r1, #128	; 0x80
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f003 fe55 	bl	800afc8 <VL53L0X_WrByte>
 800731e:	4603      	mov	r3, r0
 8007320:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007322:	2201      	movs	r2, #1
 8007324:	21ff      	movs	r1, #255	; 0xff
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f003 fe4e 	bl	800afc8 <VL53L0X_WrByte>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007330:	2200      	movs	r2, #0
 8007332:	2100      	movs	r1, #0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f003 fe47 	bl	800afc8 <VL53L0X_WrByte>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007344:	461a      	mov	r2, r3
 8007346:	2191      	movs	r1, #145	; 0x91
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f003 fe3d 	bl	800afc8 <VL53L0X_WrByte>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007352:	2201      	movs	r2, #1
 8007354:	2100      	movs	r1, #0
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f003 fe36 	bl	800afc8 <VL53L0X_WrByte>
 800735c:	4603      	mov	r3, r0
 800735e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007360:	2200      	movs	r2, #0
 8007362:	21ff      	movs	r1, #255	; 0xff
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f003 fe2f 	bl	800afc8 <VL53L0X_WrByte>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800736e:	2200      	movs	r2, #0
 8007370:	2180      	movs	r1, #128	; 0x80
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f003 fe28 	bl	800afc8 <VL53L0X_WrByte>
 8007378:	4603      	mov	r3, r0
 800737a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d054      	beq.n	800742c <VL53L0X_StartMeasurement+0x134>
 8007382:	2b03      	cmp	r3, #3
 8007384:	dc6c      	bgt.n	8007460 <VL53L0X_StartMeasurement+0x168>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <VL53L0X_StartMeasurement+0x98>
 800738a:	2b01      	cmp	r3, #1
 800738c:	d034      	beq.n	80073f8 <VL53L0X_StartMeasurement+0x100>
 800738e:	e067      	b.n	8007460 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007390:	2201      	movs	r2, #1
 8007392:	2100      	movs	r1, #0
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f003 fe17 	bl	800afc8 <VL53L0X_WrByte>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80073a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d15d      	bne.n	8007466 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d008      	beq.n	80073c6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80073b4:	f107 030d 	add.w	r3, r7, #13
 80073b8:	461a      	mov	r2, r3
 80073ba:	2100      	movs	r1, #0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f003 fe85 	bl	800b0cc <VL53L0X_RdByte>
 80073c2:	4603      	mov	r3, r0
 80073c4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	3301      	adds	r3, #1
 80073ca:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80073cc:	7b7a      	ldrb	r2, [r7, #13]
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	4013      	ands	r3, r2
 80073d2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80073d4:	7bfa      	ldrb	r2, [r7, #15]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d107      	bne.n	80073ea <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80073da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80073e8:	d3e1      	bcc.n	80073ae <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80073f0:	d339      	bcc.n	8007466 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80073f2:	23f9      	movs	r3, #249	; 0xf9
 80073f4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80073f6:	e036      	b.n	8007466 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80073f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007400:	2101      	movs	r1, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ff12 	bl	800722c <VL53L0X_CheckAndLoadInterruptSettings>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800740c:	2202      	movs	r2, #2
 800740e:	2100      	movs	r1, #0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f003 fdd9 	bl	800afc8 <VL53L0X_WrByte>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800741a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d123      	bne.n	800746a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2204      	movs	r2, #4
 8007426:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800742a:	e01e      	b.n	800746a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800742c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d105      	bne.n	8007440 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007434:	2101      	movs	r1, #1
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff fef8 	bl	800722c <VL53L0X_CheckAndLoadInterruptSettings>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007440:	2204      	movs	r2, #4
 8007442:	2100      	movs	r1, #0
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f003 fdbf 	bl	800afc8 <VL53L0X_WrByte>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800744e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2204      	movs	r2, #4
 800745a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800745e:	e006      	b.n	800746e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007460:	23f8      	movs	r3, #248	; 0xf8
 8007462:	75fb      	strb	r3, [r7, #23]
 8007464:	e004      	b.n	8007470 <VL53L0X_StartMeasurement+0x178>
		break;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <VL53L0X_StartMeasurement+0x178>
		break;
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <VL53L0X_StartMeasurement+0x178>
		break;
 800746e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007470:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007490:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b04      	cmp	r3, #4
 8007496:	d112      	bne.n	80074be <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007498:	f107 0308 	add.w	r3, r7, #8
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb1a 	bl	8007ad8 <VL53L0X_GetInterruptMaskStatus>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d103      	bne.n	80074b6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2201      	movs	r2, #1
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	e01c      	b.n	80074f0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e018      	b.n	80074f0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80074be:	f107 030d 	add.w	r3, r7, #13
 80074c2:	461a      	mov	r2, r3
 80074c4:	2114      	movs	r1, #20
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f003 fe00 	bl	800b0cc <VL53L0X_RdByte>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80074d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80074d8:	7b7b      	ldrb	r3, [r7, #13]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	e002      	b.n	80074f0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80074fc:	b5b0      	push	{r4, r5, r7, lr}
 80074fe:	b096      	sub	sp, #88	; 0x58
 8007500:	af02      	add	r7, sp, #8
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800750c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007510:	230c      	movs	r3, #12
 8007512:	2114      	movs	r1, #20
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f003 fd2b 	bl	800af70 <VL53L0X_ReadMulti>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007520:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 80d1 	bne.w	80076cc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007536:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800753a:	b29b      	uxth	r3, r3
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	b29a      	uxth	r2, r3
 8007540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007544:	b29b      	uxth	r3, r3
 8007546:	4413      	add	r3, r2
 8007548:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007556:	b29b      	uxth	r3, r3
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	b29a      	uxth	r2, r3
 800755c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007560:	b29b      	uxth	r3, r3
 8007562:	4413      	add	r3, r2
 8007564:	b29b      	uxth	r3, r3
 8007566:	025b      	lsls	r3, r3, #9
 8007568:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800756e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007570:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007574:	b29b      	uxth	r3, r3
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	b29a      	uxth	r2, r3
 800757a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800757e:	b29b      	uxth	r3, r3
 8007580:	4413      	add	r3, r2
 8007582:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007586:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800758a:	025b      	lsls	r3, r3, #9
 800758c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007592:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007596:	b29b      	uxth	r3, r3
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	b29a      	uxth	r2, r3
 800759c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4413      	add	r3, r2
 80075a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80075ae:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80075b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80075be:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80075c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80075ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d0:	d046      	beq.n	8007660 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80075d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075d4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80075e0:	4a57      	ldr	r2, [pc, #348]	; (8007740 <VL53L0X_GetRangingMeasurementData+0x244>)
 80075e2:	fb82 1203 	smull	r1, r2, r2, r3
 80075e6:	1192      	asrs	r2, r2, #6
 80075e8:	17db      	asrs	r3, r3, #31
 80075ea:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80075ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7f1b      	ldrb	r3, [r3, #28]
 80075fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80075fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02c      	beq.n	8007660 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007608:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007614:	429a      	cmp	r2, r3
 8007616:	d10d      	bne.n	8007634 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007618:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007620:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007624:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007628:	e016      	b.n	8007658 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800762a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800762e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007632:	e011      	b.n	8007658 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007634:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800763e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007640:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007644:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007648:	121b      	asrs	r3, r3, #8
 800764a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800764c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007650:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007654:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800765c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007668:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800766c:	089b      	lsrs	r3, r3, #2
 800766e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007674:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007678:	b2db      	uxtb	r3, r3
 800767a:	019b      	lsls	r3, r3, #6
 800767c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	75da      	strb	r2, [r3, #23]
 8007682:	e006      	b.n	8007692 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800768a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007692:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007696:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800769a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f003 fa15 	bl	800aad8 <VL53L0X_get_pal_range_status>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80076bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80076c4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d12f      	bne.n	8007734 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f107 040c 	add.w	r4, r7, #12
 80076da:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80076de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80076e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80076ee:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80076f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80076fc:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007702:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007708:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800770e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007714:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800771a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007724:	f107 050c 	add.w	r5, r7, #12
 8007728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800772a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800772c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007734:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007738:	4618      	mov	r0, r3
 800773a:	3750      	adds	r7, #80	; 0x50
 800773c:	46bd      	mov	sp, r7
 800773e:	bdb0      	pop	{r4, r5, r7, pc}
 8007740:	10624dd3 	.word	0x10624dd3

08007744 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007752:	2100      	movs	r1, #0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff f8d1 	bl	80068fc <VL53L0X_SetDeviceMode>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fd16 	bl	8007198 <VL53L0X_PerformSingleMeasurement>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff febe 	bl	80074fc <VL53L0X_GetRangingMeasurementData>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d105      	bne.n	8007798 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800778c:	2100      	movs	r1, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f962 	bl	8007a58 <VL53L0X_ClearInterruptMask>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	4608      	mov	r0, r1
 80077ae:	4611      	mov	r1, r2
 80077b0:	461a      	mov	r2, r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	70fb      	strb	r3, [r7, #3]
 80077b6:	460b      	mov	r3, r1
 80077b8:	70bb      	strb	r3, [r7, #2]
 80077ba:	4613      	mov	r3, r2
 80077bc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80077c8:	23f6      	movs	r3, #246	; 0xf6
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	e107      	b.n	80079de <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80077ce:	78bb      	ldrb	r3, [r7, #2]
 80077d0:	2b14      	cmp	r3, #20
 80077d2:	d110      	bne.n	80077f6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80077d4:	7e3b      	ldrb	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80077da:	2310      	movs	r3, #16
 80077dc:	73bb      	strb	r3, [r7, #14]
 80077de:	e001      	b.n	80077e4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	461a      	mov	r2, r3
 80077e8:	2184      	movs	r1, #132	; 0x84
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f003 fbec 	bl	800afc8 <VL53L0X_WrByte>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	e0f3      	b.n	80079de <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80077f6:	78bb      	ldrb	r3, [r7, #2]
 80077f8:	2b15      	cmp	r3, #21
 80077fa:	f040 8097 	bne.w	800792c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80077fe:	2201      	movs	r2, #1
 8007800:	21ff      	movs	r1, #255	; 0xff
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f003 fbe0 	bl	800afc8 <VL53L0X_WrByte>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	4313      	orrs	r3, r2
 8007810:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f003 fbd6 	bl	800afc8 <VL53L0X_WrByte>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	4313      	orrs	r3, r2
 8007824:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007826:	2200      	movs	r2, #0
 8007828:	21ff      	movs	r1, #255	; 0xff
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f003 fbcc 	bl	800afc8 <VL53L0X_WrByte>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	4313      	orrs	r3, r2
 8007838:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800783a:	2201      	movs	r2, #1
 800783c:	2180      	movs	r1, #128	; 0x80
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f003 fbc2 	bl	800afc8 <VL53L0X_WrByte>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	4313      	orrs	r3, r2
 800784c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800784e:	2202      	movs	r2, #2
 8007850:	2185      	movs	r1, #133	; 0x85
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f003 fbb8 	bl	800afc8 <VL53L0X_WrByte>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	4313      	orrs	r3, r2
 8007860:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007862:	2204      	movs	r2, #4
 8007864:	21ff      	movs	r1, #255	; 0xff
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f003 fbae 	bl	800afc8 <VL53L0X_WrByte>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4313      	orrs	r3, r2
 8007874:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007876:	2200      	movs	r2, #0
 8007878:	21cd      	movs	r1, #205	; 0xcd
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f003 fba4 	bl	800afc8 <VL53L0X_WrByte>
 8007880:	4603      	mov	r3, r0
 8007882:	461a      	mov	r2, r3
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4313      	orrs	r3, r2
 8007888:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800788a:	2211      	movs	r2, #17
 800788c:	21cc      	movs	r1, #204	; 0xcc
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f003 fb9a 	bl	800afc8 <VL53L0X_WrByte>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4313      	orrs	r3, r2
 800789c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800789e:	2207      	movs	r2, #7
 80078a0:	21ff      	movs	r1, #255	; 0xff
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f003 fb90 	bl	800afc8 <VL53L0X_WrByte>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80078b2:	2200      	movs	r2, #0
 80078b4:	21be      	movs	r1, #190	; 0xbe
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f003 fb86 	bl	800afc8 <VL53L0X_WrByte>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80078c6:	2206      	movs	r2, #6
 80078c8:	21ff      	movs	r1, #255	; 0xff
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f003 fb7c 	bl	800afc8 <VL53L0X_WrByte>
 80078d0:	4603      	mov	r3, r0
 80078d2:	461a      	mov	r2, r3
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80078da:	2209      	movs	r2, #9
 80078dc:	21cc      	movs	r1, #204	; 0xcc
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f003 fb72 	bl	800afc8 <VL53L0X_WrByte>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80078ee:	2200      	movs	r2, #0
 80078f0:	21ff      	movs	r1, #255	; 0xff
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f003 fb68 	bl	800afc8 <VL53L0X_WrByte>
 80078f8:	4603      	mov	r3, r0
 80078fa:	461a      	mov	r2, r3
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	4313      	orrs	r3, r2
 8007900:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007902:	2201      	movs	r2, #1
 8007904:	21ff      	movs	r1, #255	; 0xff
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f003 fb5e 	bl	800afc8 <VL53L0X_WrByte>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	4313      	orrs	r3, r2
 8007914:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f003 fb54 	bl	800afc8 <VL53L0X_WrByte>
 8007920:	4603      	mov	r3, r0
 8007922:	461a      	mov	r2, r3
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4313      	orrs	r3, r2
 8007928:	73fb      	strb	r3, [r7, #15]
 800792a:	e058      	b.n	80079de <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800792c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d121      	bne.n	8007978 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007934:	787b      	ldrb	r3, [r7, #1]
 8007936:	2b04      	cmp	r3, #4
 8007938:	d81b      	bhi.n	8007972 <VL53L0X_SetGpioConfig+0x1ce>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <VL53L0X_SetGpioConfig+0x19c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007955 	.word	0x08007955
 8007944:	0800795b 	.word	0x0800795b
 8007948:	08007961 	.word	0x08007961
 800794c:	08007967 	.word	0x08007967
 8007950:	0800796d 	.word	0x0800796d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007954:	2300      	movs	r3, #0
 8007956:	73bb      	strb	r3, [r7, #14]
				break;
 8007958:	e00f      	b.n	800797a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800795a:	2301      	movs	r3, #1
 800795c:	73bb      	strb	r3, [r7, #14]
				break;
 800795e:	e00c      	b.n	800797a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007960:	2302      	movs	r3, #2
 8007962:	73bb      	strb	r3, [r7, #14]
				break;
 8007964:	e009      	b.n	800797a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007966:	2303      	movs	r3, #3
 8007968:	73bb      	strb	r3, [r7, #14]
				break;
 800796a:	e006      	b.n	800797a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800796c:	2304      	movs	r3, #4
 800796e:	73bb      	strb	r3, [r7, #14]
				break;
 8007970:	e003      	b.n	800797a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007972:	23f5      	movs	r3, #245	; 0xf5
 8007974:	73fb      	strb	r3, [r7, #15]
 8007976:	e000      	b.n	800797a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007978:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800797a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	461a      	mov	r2, r3
 8007986:	210a      	movs	r1, #10
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f003 fb1d 	bl	800afc8 <VL53L0X_WrByte>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10f      	bne.n	80079ba <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800799a:	7e3b      	ldrb	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73bb      	strb	r3, [r7, #14]
 80079a4:	e001      	b.n	80079aa <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80079a6:	2310      	movs	r3, #16
 80079a8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	22ef      	movs	r2, #239	; 0xef
 80079ae:	2184      	movs	r1, #132	; 0x84
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f003 fb57 	bl	800b064 <VL53L0X_UpdateByte>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80079ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d103      	bne.n	80079ca <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	787a      	ldrb	r2, [r7, #1]
 80079c6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80079ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f83f 	bl	8007a58 <VL53L0X_ClearInterruptMask>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop

080079ec <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	607a      	str	r2, [r7, #4]
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	460b      	mov	r3, r1
 80079fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007a00:	f107 0314 	add.w	r3, r7, #20
 8007a04:	461a      	mov	r2, r3
 8007a06:	210e      	movs	r1, #14
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f003 fb89 	bl	800b120 <VL53L0X_RdWord>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007a12:	8abb      	ldrh	r3, [r7, #20]
 8007a14:	045b      	lsls	r3, r3, #17
 8007a16:	461a      	mov	r2, r3
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <VL53L0X_GetInterruptThresholds+0x68>)
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	210c      	movs	r1, #12
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f003 fb75 	bl	800b120 <VL53L0X_RdWord>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007a3a:	8abb      	ldrh	r3, [r7, #20]
 8007a3c:	045b      	lsls	r3, r3, #17
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <VL53L0X_GetInterruptThresholds+0x68>)
 8007a42:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	1ffe0000 	.word	0x1ffe0000

08007a58 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	210b      	movs	r1, #11
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f003 faaa 	bl	800afc8 <VL53L0X_WrByte>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007a78:	2200      	movs	r2, #0
 8007a7a:	210b      	movs	r1, #11
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f003 faa3 	bl	800afc8 <VL53L0X_WrByte>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007a8c:	f107 030d 	add.w	r3, r7, #13
 8007a90:	461a      	mov	r2, r3
 8007a92:	2113      	movs	r1, #19
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f003 fb19 	bl	800b0cc <VL53L0X_RdByte>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007aaa:	7b7b      	ldrb	r3, [r7, #13]
 8007aac:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d006      	beq.n	8007ac2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d803      	bhi.n	8007ac2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0d3      	beq.n	8007a6a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007ac8:	23f4      	movs	r3, #244	; 0xf4
 8007aca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007ae6:	f107 030e 	add.w	r3, r7, #14
 8007aea:	461a      	mov	r2, r3
 8007aec:	2113      	movs	r1, #19
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f003 faec 	bl	800b0cc <VL53L0X_RdByte>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	f003 0207 	and.w	r2, r3, #7
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	f003 0318 	and.w	r3, r3, #24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007b0c:	23fa      	movs	r3, #250	; 0xfa
 8007b0e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fa33 	bl	8007f9c <VL53L0X_perform_ref_spad_management>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fe fed2 	bl	80068fc <VL53L0X_SetDeviceMode>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8007b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 8007b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b68:	e019      	b.n	8007b9e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff fbc4 	bl	80072f8 <VL53L0X_StartMeasurement>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8007b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 8007b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b80:	e00d      	b.n	8007b9e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fcb9 	bl	80074fc <VL53L0X_GetRangingMeasurementData>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8007b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 8007b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b9a:	e000      	b.n	8007b9e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007bb4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007bb8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bbe:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007bc0:	f107 0308 	add.w	r3, r7, #8
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	2128      	movs	r1, #40	; 0x28
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f003 faa9 	bl	800b120 <VL53L0X_RdWord>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d11e      	bne.n	8007c18 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007bda:	893b      	ldrh	r3, [r7, #8]
 8007bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007be4:	893b      	ldrh	r3, [r7, #8]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	dd0b      	ble.n	8007c08 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007bf0:	893a      	ldrh	r2, [r7, #8]
 8007bf2:	897b      	ldrh	r3, [r7, #10]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
					* 250;
 8007bfc:	23fa      	movs	r3, #250	; 0xfa
 8007bfe:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e007      	b.n	8007c18 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007c08:	893b      	ldrh	r3, [r7, #8]
 8007c0a:	b21b      	sxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	23fa      	movs	r3, #250	; 0xfa
 8007c10:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b08b      	sub	sp, #44	; 0x2c
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007c32:	2308      	movs	r3, #8
 8007c34:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c40:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	fb01 f202 	mul.w	r2, r1, r2
 8007c5a:	1a9b      	subs	r3, r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
 8007c62:	e030      	b.n	8007cc6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d11e      	bne.n	8007cb8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007c7a:	7ffa      	ldrb	r2, [r7, #31]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	fa42 f303 	asr.w	r3, r2, r3
 8007c82:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007c88:	e016      	b.n	8007cb8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <get_next_good_spad+0x88>
				success = 1;
 8007c94:	2301      	movs	r3, #1
 8007c96:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	fb03 f202 	mul.w	r2, r3, r2
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	601a      	str	r2, [r3, #0]
				break;
 8007caa:	e009      	b.n	8007cc0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007cac:	7ffb      	ldrb	r3, [r7, #31]
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007cb8:	6a3a      	ldr	r2, [r7, #32]
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d3e4      	bcc.n	8007c8a <get_next_good_spad+0x66>
				coarseIndex++) {
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d202      	bcs.n	8007cd4 <get_next_good_spad+0xb0>
 8007cce:	7fbb      	ldrb	r3, [r7, #30]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0c7      	beq.n	8007c64 <get_next_good_spad+0x40>
		}
	}
}
 8007cd4:	bf00      	nop
 8007cd6:	372c      	adds	r7, #44	; 0x2c
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	099b      	lsrs	r3, r3, #6
 8007cf0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007cf2:	4a07      	ldr	r2, [pc, #28]	; (8007d10 <is_aperture+0x30>)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <is_aperture+0x22>
		isAperture = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	200002d0 	.word	0x200002d0

08007d14 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b089      	sub	sp, #36	; 0x24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007d24:	2308      	movs	r3, #8
 8007d26:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d30:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d3a:	69b9      	ldr	r1, [r7, #24]
 8007d3c:	fb01 f202 	mul.w	r2, r1, r2
 8007d40:	1a9b      	subs	r3, r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d4c:	23ce      	movs	r3, #206	; 0xce
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e010      	b.n	8007d74 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4413      	add	r3, r2
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b25a      	sxtb	r2, r3
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	fa01 f303 	lsl.w	r3, r1, r3
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b259      	sxtb	r1, r3
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	b2ca      	uxtb	r2, r1
 8007d72:	701a      	strb	r2, [r3, #0]

	return status;
 8007d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3724      	adds	r7, #36	; 0x24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007d8e:	2306      	movs	r3, #6
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	21b0      	movs	r1, #176	; 0xb0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f003 f8bb 	bl	800af10 <VL53L0X_WriteMulti>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007db4:	2306      	movs	r3, #6
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	21b0      	movs	r1, #176	; 0xb0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f003 f8d8 	bl	800af70 <VL53L0X_ReadMulti>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08c      	sub	sp, #48	; 0x30
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dec:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007dee:	2300      	movs	r3, #0
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df2:	e02b      	b.n	8007e4c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007df4:	f107 031c 	add.w	r3, r7, #28
 8007df8:	6a3a      	ldr	r2, [r7, #32]
 8007dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff ff11 	bl	8007c24 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d103      	bne.n	8007e12 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e0a:	23ce      	movs	r3, #206	; 0xce
 8007e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007e10:	e020      	b.n	8007e54 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	4413      	add	r3, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff ff60 	bl	8007ce0 <is_aperture>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e2a:	23ce      	movs	r3, #206	; 0xce
 8007e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007e30:	e010      	b.n	8007e54 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007e36:	6a3a      	ldr	r2, [r7, #32]
 8007e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e3a:	6838      	ldr	r0, [r7, #0]
 8007e3c:	f7ff ff6a 	bl	8007d14 <enable_spad_bit>
		currentSpad++;
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	3301      	adds	r3, #1
 8007e44:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	3301      	adds	r3, #1
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d3cf      	bcc.n	8007df4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e56:	6a3a      	ldr	r2, [r7, #32]
 8007e58:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007e5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff ff8d 	bl	8007d84 <set_ref_spad_map>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007e70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d121      	bne.n	8007ebc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007e78:	f107 0314 	add.w	r3, r7, #20
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff ff93 	bl	8007daa <get_ref_spad_map>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007e8e:	e011      	b.n	8007eb4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	4413      	add	r3, r2
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	f107 0114 	add.w	r1, r7, #20
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	440b      	add	r3, r1
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d003      	beq.n	8007eae <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007ea6:	23ce      	movs	r3, #206	; 0xce
 8007ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007eac:	e006      	b.n	8007ebc <enable_ref_spads+0xec>
			}
			i++;
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d3e9      	bcc.n	8007e90 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3730      	adds	r7, #48	; 0x30
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007ee4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007ee8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d107      	bne.n	8007f00 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007ef0:	22c0      	movs	r2, #192	; 0xc0
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f003 f867 	bl	800afc8 <VL53L0X_WrByte>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d108      	bne.n	8007f1a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007f08:	f107 0308 	add.w	r3, r7, #8
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fc18 	bl	8007744 <VL53L0X_PerformSingleRangingMeasurement>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d107      	bne.n	8007f32 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f22:	2201      	movs	r2, #1
 8007f24:	21ff      	movs	r1, #255	; 0xff
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f003 f84e 	bl	800afc8 <VL53L0X_WrByte>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	21b6      	movs	r1, #182	; 0xb6
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f003 f8ee 	bl	800b120 <VL53L0X_RdWord>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007f4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d107      	bne.n	8007f62 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f52:	2200      	movs	r2, #0
 8007f54:	21ff      	movs	r1, #255	; 0xff
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f003 f836 	bl	800afc8 <VL53L0X_WrByte>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007f62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d112      	bne.n	8007f90 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2101      	movs	r1, #1
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f003 f828 	bl	800afc8 <VL53L0X_WrByte>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007f7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3728      	adds	r7, #40	; 0x28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b09d      	sub	sp, #116	; 0x74
 8007fa0:	af06      	add	r7, sp, #24
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007fae:	23b4      	movs	r3, #180	; 0xb4
 8007fb0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007fb8:	232c      	movs	r3, #44	; 0x2c
 8007fba:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007fc8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007fd6:	2306      	movs	r3, #6
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008000:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008002:	2300      	movs	r3, #0
 8008004:	64bb      	str	r3, [r7, #72]	; 0x48
 8008006:	e009      	b.n	800801c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800800c:	4413      	add	r3, r2
 800800e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008018:	3301      	adds	r3, #1
 800801a:	64bb      	str	r3, [r7, #72]	; 0x48
 800801c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	429a      	cmp	r2, r3
 8008022:	d3f1      	bcc.n	8008008 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008024:	2201      	movs	r2, #1
 8008026:	21ff      	movs	r1, #255	; 0xff
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f002 ffcd 	bl	800afc8 <VL53L0X_WrByte>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008038:	2b00      	cmp	r3, #0
 800803a:	d107      	bne.n	800804c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800803c:	2200      	movs	r2, #0
 800803e:	214f      	movs	r1, #79	; 0x4f
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f002 ffc1 	bl	800afc8 <VL53L0X_WrByte>
 8008046:	4603      	mov	r3, r0
 8008048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800804c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008054:	222c      	movs	r2, #44	; 0x2c
 8008056:	214e      	movs	r1, #78	; 0x4e
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f002 ffb5 	bl	800afc8 <VL53L0X_WrByte>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008064:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008068:	2b00      	cmp	r3, #0
 800806a:	d107      	bne.n	800807c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800806c:	2200      	movs	r2, #0
 800806e:	21ff      	movs	r1, #255	; 0xff
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f002 ffa9 	bl	800afc8 <VL53L0X_WrByte>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800807c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008084:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008088:	461a      	mov	r2, r3
 800808a:	21b6      	movs	r1, #182	; 0xb6
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f002 ff9b 	bl	800afc8 <VL53L0X_WrByte>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008098:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800809c:	2b00      	cmp	r3, #0
 800809e:	d107      	bne.n	80080b0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80080a0:	2200      	movs	r2, #0
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f002 ff8f 	bl	800afc8 <VL53L0X_WrByte>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80080b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80080b8:	f107 0210 	add.w	r2, r7, #16
 80080bc:	f107 0111 	add.w	r1, r7, #17
 80080c0:	2300      	movs	r3, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fbbb 	bl	800883e <VL53L0X_perform_ref_calibration>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80080ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d121      	bne.n	800811a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80080da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080dc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80080f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80080f6:	f107 0218 	add.w	r2, r7, #24
 80080fa:	9204      	str	r2, [sp, #16]
 80080fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080fe:	9203      	str	r2, [sp, #12]
 8008100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008102:	9202      	str	r2, [sp, #8]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	4623      	mov	r3, r4
 800810c:	4602      	mov	r2, r0
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fe5e 	bl	8007dd0 <enable_ref_spads>
 8008114:	4603      	mov	r3, r0
 8008116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800811a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800811e:	2b00      	cmp	r3, #0
 8008120:	d174      	bne.n	800820c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008126:	f107 0312 	add.w	r3, r7, #18
 800812a:	4619      	mov	r1, r3
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fecb 	bl	8007ec8 <perform_ref_signal_measurement>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008138:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800813c:	2b00      	cmp	r3, #0
 800813e:	d161      	bne.n	8008204 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008140:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008142:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008144:	429a      	cmp	r2, r3
 8008146:	d25d      	bcs.n	8008204 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008148:	2300      	movs	r3, #0
 800814a:	64bb      	str	r3, [r7, #72]	; 0x48
 800814c:	e009      	b.n	8008162 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008152:	4413      	add	r3, r2
 8008154:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008158:	2200      	movs	r2, #0
 800815a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800815c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815e:	3301      	adds	r3, #1
 8008160:	64bb      	str	r3, [r7, #72]	; 0x48
 8008162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	429a      	cmp	r2, r3
 8008168:	d3f1      	bcc.n	800814e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800816a:	e002      	b.n	8008172 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800816c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800816e:	3301      	adds	r3, #1
 8008170:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008172:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008178:	4413      	add	r3, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff fdb0 	bl	8007ce0 <is_aperture>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	429a      	cmp	r2, r3
 800818c:	d3ee      	bcc.n	800816c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800818e:	2301      	movs	r3, #1
 8008190:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008194:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80081a2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80081a6:	f107 0218 	add.w	r2, r7, #24
 80081aa:	9204      	str	r2, [sp, #16]
 80081ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ae:	9203      	str	r2, [sp, #12]
 80081b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081b2:	9202      	str	r2, [sp, #8]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4623      	mov	r3, r4
 80081bc:	4602      	mov	r2, r0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff fe06 	bl	8007dd0 <enable_ref_spads>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80081ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d11b      	bne.n	800820a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80081d6:	f107 0312 	add.w	r3, r7, #18
 80081da:	4619      	mov	r1, r3
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff fe73 	bl	8007ec8 <perform_ref_signal_measurement>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80081e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10c      	bne.n	800820a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80081f0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80081f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d208      	bcs.n	800820a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008202:	e002      	b.n	800820a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008208:	e000      	b.n	800820c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800820a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800820c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008210:	2b00      	cmp	r3, #0
 8008212:	f040 80af 	bne.w	8008374 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008216:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008218:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800821a:	429a      	cmp	r2, r3
 800821c:	f240 80aa 	bls.w	8008374 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008230:	f107 031c 	add.w	r3, r7, #28
 8008234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008236:	4618      	mov	r0, r3
 8008238:	f003 f828 	bl	800b28c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800823c:	8a7b      	ldrh	r3, [r7, #18]
 800823e:	461a      	mov	r2, r3
 8008240:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfb8      	it	lt
 8008248:	425b      	neglt	r3, r3
 800824a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008252:	e086      	b.n	8008362 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800825a:	f107 0314 	add.w	r3, r7, #20
 800825e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008262:	f7ff fcdf 	bl	8007c24 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d103      	bne.n	8008276 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800826e:	23ce      	movs	r3, #206	; 0xce
 8008270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008274:	e07e      	b.n	8008374 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008276:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4413      	add	r3, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fd2e 	bl	8007ce0 <is_aperture>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008294:	e06e      	b.n	8008374 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008298:	3301      	adds	r3, #1
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80082a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff fd32 	bl	8007d14 <enable_spad_bit>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80082b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10c      	bne.n	80082d8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80082be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082c0:	3301      	adds	r3, #1
 80082c2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80082ca:	4619      	mov	r1, r3
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff fd59 	bl	8007d84 <set_ref_spad_map>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80082d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d146      	bne.n	800836e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80082e0:	f107 0312 	add.w	r3, r7, #18
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fdee 	bl	8007ec8 <perform_ref_signal_measurement>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80082f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d13b      	bne.n	8008372 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80082fa:	8a7b      	ldrh	r3, [r7, #18]
 80082fc:	461a      	mov	r2, r3
 80082fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfb8      	it	lt
 8008306:	425b      	neglt	r3, r3
 8008308:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800830a:	8a7b      	ldrh	r3, [r7, #18]
 800830c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800830e:	429a      	cmp	r2, r3
 8008310:	d21c      	bcs.n	800834c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008316:	429a      	cmp	r2, r3
 8008318:	d914      	bls.n	8008344 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800831a:	f107 031c 	add.w	r3, r7, #28
 800831e:	4619      	mov	r1, r3
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fd2f 	bl	8007d84 <set_ref_spad_map>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008332:	f107 011c 	add.w	r1, r7, #28
 8008336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008338:	4618      	mov	r0, r3
 800833a:	f002 ffa7 	bl	800b28c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800833e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008340:	3b01      	subs	r3, #1
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e00a      	b.n	8008362 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008356:	f107 031c 	add.w	r3, r7, #28
 800835a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800835c:	4618      	mov	r0, r3
 800835e:	f002 ff95 	bl	800b28c <memcpy>
		while (!complete) {
 8008362:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008366:	2b00      	cmp	r3, #0
 8008368:	f43f af74 	beq.w	8008254 <VL53L0X_perform_ref_spad_management+0x2b8>
 800836c:	e002      	b.n	8008374 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008372:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008374:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008378:	2b00      	cmp	r3, #0
 800837a:	d115      	bne.n	80083a8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008380:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008388:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80083a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	375c      	adds	r7, #92	; 0x5c
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd90      	pop	{r4, r7, pc}

080083b4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b093      	sub	sp, #76	; 0x4c
 80083b8:	af06      	add	r7, sp, #24
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80083cc:	23b4      	movs	r3, #180	; 0xb4
 80083ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80083d2:	2306      	movs	r3, #6
 80083d4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80083d6:	232c      	movs	r3, #44	; 0x2c
 80083d8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80083da:	2201      	movs	r2, #1
 80083dc:	21ff      	movs	r1, #255	; 0xff
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f002 fdf2 	bl	800afc8 <VL53L0X_WrByte>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80083ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d107      	bne.n	8008402 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80083f2:	2200      	movs	r2, #0
 80083f4:	214f      	movs	r1, #79	; 0x4f
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f002 fde6 	bl	800afc8 <VL53L0X_WrByte>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008402:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008406:	2b00      	cmp	r3, #0
 8008408:	d107      	bne.n	800841a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800840a:	222c      	movs	r2, #44	; 0x2c
 800840c:	214e      	movs	r1, #78	; 0x4e
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f002 fdda 	bl	800afc8 <VL53L0X_WrByte>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800841a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800841e:	2b00      	cmp	r3, #0
 8008420:	d107      	bne.n	8008432 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008422:	2200      	movs	r2, #0
 8008424:	21ff      	movs	r1, #255	; 0xff
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f002 fdce 	bl	800afc8 <VL53L0X_WrByte>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008432:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008436:	2b00      	cmp	r3, #0
 8008438:	d109      	bne.n	800844e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800843a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800843e:	461a      	mov	r2, r3
 8008440:	21b6      	movs	r1, #182	; 0xb6
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f002 fdc0 	bl	800afc8 <VL53L0X_WrByte>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800844e:	2300      	movs	r3, #0
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
 8008452:	e009      	b.n	8008468 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	4413      	add	r3, r2
 800845a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	3301      	adds	r3, #1
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	429a      	cmp	r2, r3
 800846e:	d3f1      	bcc.n	8008454 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d011      	beq.n	800849a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008476:	e002      	b.n	800847e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	3301      	adds	r3, #1
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800847e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	4413      	add	r3, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fc2a 	bl	8007ce0 <is_aperture>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d103      	bne.n	800849a <VL53L0X_set_reference_spads+0xe6>
 8008492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	429a      	cmp	r2, r3
 8008498:	d3ee      	bcc.n	8008478 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80084a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084aa:	79f9      	ldrb	r1, [r7, #7]
 80084ac:	f107 0214 	add.w	r2, r7, #20
 80084b0:	9204      	str	r2, [sp, #16]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	9203      	str	r2, [sp, #12]
 80084b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b8:	9202      	str	r2, [sp, #8]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4623      	mov	r3, r4
 80084c2:	4602      	mov	r2, r0
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fc83 	bl	8007dd0 <enable_ref_spads>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80084d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10c      	bne.n	80084f2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80084f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3734      	adds	r7, #52	; 0x34
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd90      	pop	{r4, r7, pc}

080084fe <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	b2db      	uxtb	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f002 fd50 	bl	800afc8 <VL53L0X_WrByte>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800852c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9bf 	bl	80088b8 <VL53L0X_measurement_poll_for_completion>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800853e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008546:	2100      	movs	r1, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff fa85 	bl	8007a58 <VL53L0X_ClearInterruptMask>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d106      	bne.n	8008568 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 fd32 	bl	800afc8 <VL53L0X_WrByte>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	461a      	mov	r2, r3
 8008582:	4603      	mov	r3, r0
 8008584:	70fb      	strb	r3, [r7, #3]
 8008586:	460b      	mov	r3, r1
 8008588:	70bb      	strb	r3, [r7, #2]
 800858a:	4613      	mov	r3, r2
 800858c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008596:	2201      	movs	r2, #1
 8008598:	21ff      	movs	r1, #255	; 0xff
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f002 fd14 	bl	800afc8 <VL53L0X_WrByte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f002 fd0a 	bl	800afc8 <VL53L0X_WrByte>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80085be:	2200      	movs	r2, #0
 80085c0:	21ff      	movs	r1, #255	; 0xff
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f002 fd00 	bl	800afc8 <VL53L0X_WrByte>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01e      	beq.n	8008616 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80085d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	21cb      	movs	r1, #203	; 0xcb
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f002 fd71 	bl	800b0cc <VL53L0X_RdByte>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80085f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d02a      	beq.n	8008652 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80085fc:	f107 030e 	add.w	r3, r7, #14
 8008600:	461a      	mov	r2, r3
 8008602:	21ee      	movs	r1, #238	; 0xee
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f002 fd61 	bl	800b0cc <VL53L0X_RdByte>
 800860a:	4603      	mov	r3, r0
 800860c:	461a      	mov	r2, r3
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	4313      	orrs	r3, r2
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	e01d      	b.n	8008652 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008616:	f897 3020 	ldrb.w	r3, [r7, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800861e:	78bb      	ldrb	r3, [r7, #2]
 8008620:	461a      	mov	r2, r3
 8008622:	21cb      	movs	r1, #203	; 0xcb
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f002 fccf 	bl	800afc8 <VL53L0X_WrByte>
 800862a:	4603      	mov	r3, r0
 800862c:	461a      	mov	r2, r3
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	4313      	orrs	r3, r2
 8008632:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800863c:	787b      	ldrb	r3, [r7, #1]
 800863e:	2280      	movs	r2, #128	; 0x80
 8008640:	21ee      	movs	r1, #238	; 0xee
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f002 fd0e 	bl	800b064 <VL53L0X_UpdateByte>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4313      	orrs	r3, r2
 8008650:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008652:	2201      	movs	r2, #1
 8008654:	21ff      	movs	r1, #255	; 0xff
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 fcb6 	bl	800afc8 <VL53L0X_WrByte>
 800865c:	4603      	mov	r3, r0
 800865e:	461a      	mov	r2, r3
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4313      	orrs	r3, r2
 8008664:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008666:	2201      	movs	r2, #1
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f002 fcac 	bl	800afc8 <VL53L0X_WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	4313      	orrs	r3, r2
 8008678:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800867a:	2200      	movs	r2, #0
 800867c:	21ff      	movs	r1, #255	; 0xff
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f002 fca2 	bl	800afc8 <VL53L0X_WrByte>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4313      	orrs	r3, r2
 800868c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f023 0310 	bic.w	r3, r3, #16
 8008694:	b2da      	uxtb	r2, r3
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	701a      	strb	r2, [r3, #0]

	return Status;
 800869a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b08a      	sub	sp, #40	; 0x28
 80086aa:	af04      	add	r7, sp, #16
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	4611      	mov	r1, r2
 80086b2:	461a      	mov	r2, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	71fb      	strb	r3, [r7, #7]
 80086b8:	4613      	mov	r3, r2
 80086ba:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086bc:	2300      	movs	r3, #0
 80086be:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80086d0:	79bb      	ldrb	r3, [r7, #6]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80086dc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80086de:	2201      	movs	r2, #1
 80086e0:	2101      	movs	r1, #1
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f002 fc70 	bl	800afc8 <VL53L0X_WrByte>
 80086e8:	4603      	mov	r3, r0
 80086ea:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80086ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d105      	bne.n	8008700 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80086f4:	2140      	movs	r1, #64	; 0x40
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7ff ff01 	bl	80084fe <VL53L0X_perform_single_ref_calibration>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d115      	bne.n	8008734 <VL53L0X_perform_vhv_calibration+0x8e>
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d112      	bne.n	8008734 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800870e:	7d39      	ldrb	r1, [r7, #20]
 8008710:	7d7a      	ldrb	r2, [r7, #21]
 8008712:	2300      	movs	r3, #0
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	2301      	movs	r3, #1
 8008718:	9302      	str	r3, [sp, #8]
 800871a:	f107 0313 	add.w	r3, r7, #19
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	460b      	mov	r3, r1
 8008726:	2101      	movs	r1, #1
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff ff23 	bl	8008574 <VL53L0X_ref_calibration_io>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
 8008732:	e002      	b.n	800873a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800873a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d112      	bne.n	8008768 <VL53L0X_perform_vhv_calibration+0xc2>
 8008742:	79bb      	ldrb	r3, [r7, #6]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00f      	beq.n	8008768 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008748:	7dbb      	ldrb	r3, [r7, #22]
 800874a:	461a      	mov	r2, r3
 800874c:	2101      	movs	r1, #1
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f002 fc3a 	bl	800afc8 <VL53L0X_WrByte>
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	7dba      	ldrb	r2, [r7, #22]
 8008764:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af04      	add	r7, sp, #16
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4611      	mov	r1, r2
 8008780:	461a      	mov	r2, r3
 8008782:	460b      	mov	r3, r1
 8008784:	71fb      	strb	r3, [r7, #7]
 8008786:	4613      	mov	r3, r2
 8008788:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800879a:	79bb      	ldrb	r3, [r7, #6]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80087a6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80087a8:	2202      	movs	r2, #2
 80087aa:	2101      	movs	r1, #1
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f002 fc0b 	bl	800afc8 <VL53L0X_WrByte>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80087b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d105      	bne.n	80087ca <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7ff fe9c 	bl	80084fe <VL53L0X_perform_single_ref_calibration>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80087ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d115      	bne.n	80087fe <VL53L0X_perform_phase_calibration+0x8a>
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d112      	bne.n	80087fe <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80087d8:	7d39      	ldrb	r1, [r7, #20]
 80087da:	7d7a      	ldrb	r2, [r7, #21]
 80087dc:	2301      	movs	r3, #1
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	2300      	movs	r3, #0
 80087e2:	9302      	str	r3, [sp, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	f107 0313 	add.w	r3, r7, #19
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	460b      	mov	r3, r1
 80087f0:	2101      	movs	r1, #1
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff febe 	bl	8008574 <VL53L0X_ref_calibration_io>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]
 80087fc:	e002      	b.n	8008804 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d112      	bne.n	8008832 <VL53L0X_perform_phase_calibration+0xbe>
 800880c:	79bb      	ldrb	r3, [r7, #6]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00f      	beq.n	8008832 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008812:	7dbb      	ldrb	r3, [r7, #22]
 8008814:	461a      	mov	r2, r3
 8008816:	2101      	movs	r1, #1
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f002 fbd5 	bl	800afc8 <VL53L0X_WrByte>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	7dba      	ldrb	r2, [r7, #22]
 800882e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800884c:	2300      	movs	r3, #0
 800884e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800885a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	2300      	movs	r3, #0
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff ff1f 	bl	80086a6 <VL53L0X_perform_vhv_calibration>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800886c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d107      	bne.n	8008884 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008874:	78fa      	ldrb	r2, [r7, #3]
 8008876:	2300      	movs	r3, #0
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff7a 	bl	8008774 <VL53L0X_perform_phase_calibration>
 8008880:	4603      	mov	r3, r0
 8008882:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10f      	bne.n	80088ac <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800888c:	7dbb      	ldrb	r3, [r7, #22]
 800888e:	461a      	mov	r2, r3
 8008890:	2101      	movs	r1, #1
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f002 fb98 	bl	800afc8 <VL53L0X_WrByte>
 8008898:	4603      	mov	r3, r0
 800889a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800889c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7dba      	ldrb	r2, [r7, #22]
 80088a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80088ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80088cc:	f107 030f 	add.w	r3, r7, #15
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7fe fdd2 	bl	800747c <VL53L0X_GetMeasurementDataReady>
 80088d8:	4603      	mov	r3, r0
 80088da:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80088dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d110      	bne.n	8008906 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d00f      	beq.n	800890a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	3301      	adds	r3, #1
 80088ee:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80088f6:	d302      	bcc.n	80088fe <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80088f8:	23f9      	movs	r3, #249	; 0xf9
 80088fa:	75fb      	strb	r3, [r7, #23]
			break;
 80088fc:	e006      	b.n	800890c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f002 fc82 	bl	800b208 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008904:	e7e2      	b.n	80088cc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008906:	bf00      	nop
 8008908:	e000      	b.n	800890c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800890a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800890c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	3301      	adds	r3, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	4603      	mov	r3, r0
 8008946:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	b2db      	uxtb	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008974:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008976:	e002      	b.n	800897e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	089b      	lsrs	r3, r3, #2
 800897c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d8f8      	bhi.n	8008978 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008986:	e017      	b.n	80089b8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4413      	add	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d30b      	bcc.n	80089ac <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4413      	add	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	4413      	add	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	e002      	b.n	80089b2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	089b      	lsrs	r3, r3, #2
 80089b6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e4      	bne.n	8008988 <VL53L0X_isqrt+0x24>
	}

	return res;
 80089be:	68fb      	ldr	r3, [r7, #12]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80089d8:	2200      	movs	r2, #0
 80089da:	2183      	movs	r1, #131	; 0x83
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f002 faf3 	bl	800afc8 <VL53L0X_WrByte>
 80089e2:	4603      	mov	r3, r0
 80089e4:	461a      	mov	r2, r3
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80089ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d11e      	bne.n	8008a32 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80089f8:	f107 030f 	add.w	r3, r7, #15
 80089fc:	461a      	mov	r2, r3
 80089fe:	2183      	movs	r1, #131	; 0x83
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 fb63 	bl	800b0cc <VL53L0X_RdByte>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <VL53L0X_device_read_strobe+0x5a>
 8008a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a24:	d3e8      	bcc.n	80089f8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a2c:	d301      	bcc.n	8008a32 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008a2e:	23f9      	movs	r3, #249	; 0xf9
 8008a30:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008a32:	2201      	movs	r2, #1
 8008a34:	2183      	movs	r1, #131	; 0x83
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f002 fac6 	bl	800afc8 <VL53L0X_WrByte>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008a46:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b098      	sub	sp, #96	; 0x60
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008a82:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008a86:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008aa2:	2b07      	cmp	r3, #7
 8008aa4:	f000 8408 	beq.w	80092b8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 fa8b 	bl	800afc8 <VL53L0X_WrByte>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	21ff      	movs	r1, #255	; 0xff
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 fa7f 	bl	800afc8 <VL53L0X_WrByte>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 fa73 	bl	800afc8 <VL53L0X_WrByte>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008af0:	2206      	movs	r2, #6
 8008af2:	21ff      	movs	r1, #255	; 0xff
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f002 fa67 	bl	800afc8 <VL53L0X_WrByte>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b02:	4313      	orrs	r3, r2
 8008b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008b08:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2183      	movs	r1, #131	; 0x83
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 fadb 	bl	800b0cc <VL53L0X_RdByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b28:	f043 0304 	orr.w	r3, r3, #4
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	2183      	movs	r1, #131	; 0x83
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f002 fa48 	bl	800afc8 <VL53L0X_WrByte>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008b46:	2207      	movs	r2, #7
 8008b48:	21ff      	movs	r1, #255	; 0xff
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f002 fa3c 	bl	800afc8 <VL53L0X_WrByte>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008b5e:	2201      	movs	r2, #1
 8008b60:	2181      	movs	r1, #129	; 0x81
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f002 fa30 	bl	800afc8 <VL53L0X_WrByte>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b70:	4313      	orrs	r3, r2
 8008b72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f002 fb46 	bl	800b208 <VL53L0X_PollingDelay>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b84:	4313      	orrs	r3, r2
 8008b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	2180      	movs	r1, #128	; 0x80
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f002 fa1a 	bl	800afc8 <VL53L0X_WrByte>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8098 	beq.w	8008cde <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bb2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 8091 	bne.w	8008cde <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008bbc:	226b      	movs	r2, #107	; 0x6b
 8008bbe:	2194      	movs	r1, #148	; 0x94
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f002 fa01 	bl	800afc8 <VL53L0X_WrByte>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fef9 	bl	80089cc <VL53L0X_device_read_strobe>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bec:	461a      	mov	r2, r3
 8008bee:	2190      	movs	r1, #144	; 0x90
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f002 facd 	bl	800b190 <VL53L0X_RdDWord>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	0bdb      	lsrs	r3, r3, #15
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008c20:	2224      	movs	r2, #36	; 0x24
 8008c22:	2194      	movs	r1, #148	; 0x94
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f002 f9cf 	bl	800afc8 <VL53L0X_WrByte>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c32:	4313      	orrs	r3, r2
 8008c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff fec7 	bl	80089cc <VL53L0X_device_read_strobe>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c50:	461a      	mov	r2, r3
 8008c52:	2190      	movs	r1, #144	; 0x90
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f002 fa9b 	bl	800b190 <VL53L0X_RdDWord>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	0e1b      	lsrs	r3, r3, #24
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	0c1b      	lsrs	r3, r3, #16
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008c86:	2225      	movs	r2, #37	; 0x25
 8008c88:	2194      	movs	r1, #148	; 0x94
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f002 f99c 	bl	800afc8 <VL53L0X_WrByte>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fe94 	bl	80089cc <VL53L0X_device_read_strobe>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	2190      	movs	r1, #144	; 0x90
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f002 fa68 	bl	800b190 <VL53L0X_RdDWord>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	0e1b      	lsrs	r3, r3, #24
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8189 	beq.w	8008ffc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cee:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f040 8182 	bne.w	8008ffc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	2194      	movs	r1, #148	; 0x94
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f002 f963 	bl	800afc8 <VL53L0X_WrByte>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fe5b 	bl	80089cc <VL53L0X_device_read_strobe>
 8008d16:	4603      	mov	r3, r0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008d24:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008d28:	461a      	mov	r2, r3
 8008d2a:	2190      	movs	r1, #144	; 0x90
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f002 f9cd 	bl	800b0cc <VL53L0X_RdByte>
 8008d32:	4603      	mov	r3, r0
 8008d34:	461a      	mov	r2, r3
 8008d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008d40:	227b      	movs	r2, #123	; 0x7b
 8008d42:	2194      	movs	r1, #148	; 0x94
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f002 f93f 	bl	800afc8 <VL53L0X_WrByte>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff fe37 	bl	80089cc <VL53L0X_device_read_strobe>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	461a      	mov	r2, r3
 8008d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d66:	4313      	orrs	r3, r2
 8008d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008d6c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008d70:	461a      	mov	r2, r3
 8008d72:	2190      	movs	r1, #144	; 0x90
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f002 f9a9 	bl	800b0cc <VL53L0X_RdByte>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d82:	4313      	orrs	r3, r2
 8008d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008d88:	2277      	movs	r2, #119	; 0x77
 8008d8a:	2194      	movs	r1, #148	; 0x94
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f002 f91b 	bl	800afc8 <VL53L0X_WrByte>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
 8008d96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fe13 	bl	80089cc <VL53L0X_device_read_strobe>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461a      	mov	r2, r3
 8008daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008db8:	461a      	mov	r2, r3
 8008dba:	2190      	movs	r1, #144	; 0x90
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f002 f9e7 	bl	800b190 <VL53L0X_RdDWord>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	0e5b      	lsrs	r3, r3, #25
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	0c9b      	lsrs	r3, r3, #18
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	0adb      	lsrs	r3, r3, #11
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	091b      	lsrs	r3, r3, #4
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008e1a:	2278      	movs	r2, #120	; 0x78
 8008e1c:	2194      	movs	r1, #148	; 0x94
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f002 f8d2 	bl	800afc8 <VL53L0X_WrByte>
 8008e24:	4603      	mov	r3, r0
 8008e26:	461a      	mov	r2, r3
 8008e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff fdca 	bl	80089cc <VL53L0X_device_read_strobe>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e40:	4313      	orrs	r3, r2
 8008e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2190      	movs	r1, #144	; 0x90
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f002 f99e 	bl	800b190 <VL53L0X_RdDWord>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461a      	mov	r2, r3
 8008e58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	0f5b      	lsrs	r3, r3, #29
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e72:	4413      	add	r3, r2
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	0d9b      	lsrs	r3, r3, #22
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	0bdb      	lsrs	r3, r3, #15
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	0a1b      	lsrs	r3, r3, #8
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	019b      	lsls	r3, r3, #6
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008ec2:	2279      	movs	r2, #121	; 0x79
 8008ec4:	2194      	movs	r1, #148	; 0x94
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f87e 	bl	800afc8 <VL53L0X_WrByte>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff fd76 	bl	80089cc <VL53L0X_device_read_strobe>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2190      	movs	r1, #144	; 0x90
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f002 f94a 	bl	800b190 <VL53L0X_RdDWord>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	0e9b      	lsrs	r3, r3, #26
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f14:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f1a:	4413      	add	r3, r2
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	0cdb      	lsrs	r3, r3, #19
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	0b1b      	lsrs	r3, r3, #12
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008f5c:	227a      	movs	r2, #122	; 0x7a
 8008f5e:	2194      	movs	r1, #148	; 0x94
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f002 f831 	bl	800afc8 <VL53L0X_WrByte>
 8008f66:	4603      	mov	r3, r0
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fd29 	bl	80089cc <VL53L0X_device_read_strobe>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	2190      	movs	r1, #144	; 0x90
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f002 f8fd 	bl	800b190 <VL53L0X_RdDWord>
 8008f96:	4603      	mov	r3, r0
 8008f98:	461a      	mov	r2, r3
 8008f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	0f9b      	lsrs	r3, r3, #30
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fb4:	4413      	add	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	0ddb      	lsrs	r3, r3, #23
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	0c1b      	lsrs	r3, r3, #16
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	0a5b      	lsrs	r3, r3, #9
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	089b      	lsrs	r3, r3, #2
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80f1 	beq.w	80091ea <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800900c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 80ea 	bne.w	80091ea <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009016:	227b      	movs	r2, #123	; 0x7b
 8009018:	2194      	movs	r1, #148	; 0x94
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 ffd4 	bl	800afc8 <VL53L0X_WrByte>
 8009020:	4603      	mov	r3, r0
 8009022:	461a      	mov	r2, r3
 8009024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009028:	4313      	orrs	r3, r2
 800902a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fccc 	bl	80089cc <VL53L0X_device_read_strobe>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800903c:	4313      	orrs	r3, r2
 800903e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009046:	461a      	mov	r2, r3
 8009048:	2190      	movs	r1, #144	; 0x90
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f002 f8a0 	bl	800b190 <VL53L0X_RdDWord>
 8009050:	4603      	mov	r3, r0
 8009052:	461a      	mov	r2, r3
 8009054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009058:	4313      	orrs	r3, r2
 800905a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800905e:	227c      	movs	r2, #124	; 0x7c
 8009060:	2194      	movs	r1, #148	; 0x94
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f001 ffb0 	bl	800afc8 <VL53L0X_WrByte>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009070:	4313      	orrs	r3, r2
 8009072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff fca8 	bl	80089cc <VL53L0X_device_read_strobe>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009084:	4313      	orrs	r3, r2
 8009086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800908a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800908e:	461a      	mov	r2, r3
 8009090:	2190      	movs	r1, #144	; 0x90
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f002 f87c 	bl	800b190 <VL53L0X_RdDWord>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80090a6:	2273      	movs	r2, #115	; 0x73
 80090a8:	2194      	movs	r1, #148	; 0x94
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 ff8c 	bl	800afc8 <VL53L0X_WrByte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fc84 	bl	80089cc <VL53L0X_device_read_strobe>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80090d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090d6:	461a      	mov	r2, r3
 80090d8:	2190      	movs	r1, #144	; 0x90
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f002 f858 	bl	800b190 <VL53L0X_RdDWord>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80090f6:	2274      	movs	r2, #116	; 0x74
 80090f8:	2194      	movs	r1, #148	; 0x94
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 ff64 	bl	800afc8 <VL53L0X_WrByte>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009108:	4313      	orrs	r3, r2
 800910a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fc5c 	bl	80089cc <VL53L0X_device_read_strobe>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800911c:	4313      	orrs	r3, r2
 800911e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009126:	461a      	mov	r2, r3
 8009128:	2190      	movs	r1, #144	; 0x90
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f002 f830 	bl	800b190 <VL53L0X_RdDWord>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009138:	4313      	orrs	r3, r2
 800913a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009144:	4313      	orrs	r3, r2
 8009146:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009148:	2275      	movs	r2, #117	; 0x75
 800914a:	2194      	movs	r1, #148	; 0x94
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 ff3b 	bl	800afc8 <VL53L0X_WrByte>
 8009152:	4603      	mov	r3, r0
 8009154:	461a      	mov	r2, r3
 8009156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800915a:	4313      	orrs	r3, r2
 800915c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fc33 	bl	80089cc <VL53L0X_device_read_strobe>
 8009166:	4603      	mov	r3, r0
 8009168:	461a      	mov	r2, r3
 800916a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800916e:	4313      	orrs	r3, r2
 8009170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009174:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009178:	461a      	mov	r2, r3
 800917a:	2190      	movs	r1, #144	; 0x90
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f002 f807 	bl	800b190 <VL53L0X_RdDWord>
 8009182:	4603      	mov	r3, r0
 8009184:	461a      	mov	r2, r3
 8009186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800918a:	4313      	orrs	r3, r2
 800918c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009194:	b29b      	uxth	r3, r3
 8009196:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009198:	2276      	movs	r2, #118	; 0x76
 800919a:	2194      	movs	r1, #148	; 0x94
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 ff13 	bl	800afc8 <VL53L0X_WrByte>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff fc0b 	bl	80089cc <VL53L0X_device_read_strobe>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091be:	4313      	orrs	r3, r2
 80091c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80091c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091c8:	461a      	mov	r2, r3
 80091ca:	2190      	movs	r1, #144	; 0x90
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 ffdf 	bl	800b190 <VL53L0X_RdDWord>
 80091d2:	4603      	mov	r3, r0
 80091d4:	461a      	mov	r2, r3
 80091d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091da:	4313      	orrs	r3, r2
 80091dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80091e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091e6:	4313      	orrs	r3, r2
 80091e8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80091ea:	2200      	movs	r2, #0
 80091ec:	2181      	movs	r1, #129	; 0x81
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 feea 	bl	800afc8 <VL53L0X_WrByte>
 80091f4:	4603      	mov	r3, r0
 80091f6:	461a      	mov	r2, r3
 80091f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009202:	2206      	movs	r2, #6
 8009204:	21ff      	movs	r1, #255	; 0xff
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fede 	bl	800afc8 <VL53L0X_WrByte>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009214:	4313      	orrs	r3, r2
 8009216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800921a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800921e:	461a      	mov	r2, r3
 8009220:	2183      	movs	r1, #131	; 0x83
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 ff52 	bl	800b0cc <VL53L0X_RdByte>
 8009228:	4603      	mov	r3, r0
 800922a:	461a      	mov	r2, r3
 800922c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009230:	4313      	orrs	r3, r2
 8009232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800923a:	f023 0304 	bic.w	r3, r3, #4
 800923e:	b2db      	uxtb	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	2183      	movs	r1, #131	; 0x83
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 febf 	bl	800afc8 <VL53L0X_WrByte>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009252:	4313      	orrs	r3, r2
 8009254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009258:	2201      	movs	r2, #1
 800925a:	21ff      	movs	r1, #255	; 0xff
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 feb3 	bl	800afc8 <VL53L0X_WrByte>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800926a:	4313      	orrs	r3, r2
 800926c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009270:	2201      	movs	r2, #1
 8009272:	2100      	movs	r1, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 fea7 	bl	800afc8 <VL53L0X_WrByte>
 800927a:	4603      	mov	r3, r0
 800927c:	461a      	mov	r2, r3
 800927e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009282:	4313      	orrs	r3, r2
 8009284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009288:	2200      	movs	r2, #0
 800928a:	21ff      	movs	r1, #255	; 0xff
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 fe9b 	bl	800afc8 <VL53L0X_WrByte>
 8009292:	4603      	mov	r3, r0
 8009294:	461a      	mov	r2, r3
 8009296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800929a:	4313      	orrs	r3, r2
 800929c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80092a0:	2200      	movs	r2, #0
 80092a2:	2180      	movs	r1, #128	; 0x80
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fe8f 	bl	800afc8 <VL53L0X_WrByte>
 80092aa:	4603      	mov	r3, r0
 80092ac:	461a      	mov	r2, r3
 80092ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80092b8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 808f 	bne.w	80093e0 <VL53L0X_get_info_from_device+0x98e>
 80092c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092c6:	2b07      	cmp	r3, #7
 80092c8:	f000 808a 	beq.w	80093e0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d024      	beq.n	8009320 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80092d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092da:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d11e      	bne.n	8009320 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80092e8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80092f2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80092f6:	2300      	movs	r3, #0
 80092f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092fa:	e00e      	b.n	800931a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80092fc:	f107 0208 	add.w	r2, r7, #8
 8009300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009302:	4413      	add	r3, r2
 8009304:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930a:	4413      	add	r3, r2
 800930c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009310:	460a      	mov	r2, r1
 8009312:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009316:	3301      	adds	r3, #1
 8009318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800931a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931c:	2b05      	cmp	r3, #5
 800931e:	dded      	ble.n	80092fc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d018      	beq.n	800935c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800932a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800932e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009332:	2b00      	cmp	r3, #0
 8009334:	d112      	bne.n	800935c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009336:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009340:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	33f3      	adds	r3, #243	; 0xf3
 800934e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009350:	f107 0310 	add.w	r3, r7, #16
 8009354:	4619      	mov	r1, r3
 8009356:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009358:	f002 fd28 	bl	800bdac <strcpy>

		}

		if (((option & 4) == 4) &&
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	2b00      	cmp	r3, #0
 8009364:	d030      	beq.n	80093c8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009366:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800936a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800936e:	2b00      	cmp	r3, #0
 8009370:	d12a      	bne.n	80093c8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800937a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009384:	025b      	lsls	r3, r3, #9
 8009386:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800938c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009398:	2b00      	cmp	r3, #0
 800939a:	d011      	beq.n	80093c0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800939c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800939e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80093a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093aa:	fb02 f303 	mul.w	r3, r2, r3
 80093ae:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80093b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80093b4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80093b8:	425b      	negs	r3, r3
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80093c0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80093c8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80093d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093e0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3760      	adds	r7, #96	; 0x60
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80093f8:	f240 6277 	movw	r2, #1655	; 0x677
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009404:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009408:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	fb02 f303 	mul.w	r3, r2, r3
 8009418:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800941a:	68bb      	ldr	r3, [r7, #8]
}
 800941c:	4618      	mov	r0, r3
 800941e:	371c      	adds	r7, #28
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d017      	beq.n	8009472 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3b01      	subs	r3, #1
 8009446:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009448:	e005      	b.n	8009456 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	085b      	lsrs	r3, r3, #1
 800944e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	3301      	adds	r3, #1
 8009454:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f4      	bne.n	800944a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009460:	89fb      	ldrh	r3, [r7, #14]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	b29b      	uxth	r3, r3
 800946a:	b2db      	uxtb	r3, r3
 800946c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800946e:	4413      	add	r3, r2
 8009470:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009472:	8afb      	ldrh	r3, [r7, #22]

}
 8009474:	4618      	mov	r0, r3
 8009476:	371c      	adds	r7, #28
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009492:	88fa      	ldrh	r2, [r7, #6]
 8009494:	0a12      	lsrs	r2, r2, #8
 8009496:	b292      	uxth	r2, r2
 8009498:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800949e:	68fb      	ldr	r3, [r7, #12]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	4619      	mov	r1, r3
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff ff92 	bl	80093ec <VL53L0X_calc_macro_period_ps>
 80094c8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80094d0:	4a0a      	ldr	r2, [pc, #40]	; (80094fc <VL53L0X_calc_timeout_mclks+0x50>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	099b      	lsrs	r3, r3, #6
 80094d8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094e0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	085b      	lsrs	r3, r3, #1
 80094e8:	441a      	add	r2, r3
	timeout_period_mclks =
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80094f2:	69fb      	ldr	r3, [r7, #28]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	10624dd3 	.word	0x10624dd3

08009500 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	807b      	strh	r3, [r7, #2]
 800950c:	4613      	mov	r3, r2
 800950e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009514:	787b      	ldrb	r3, [r7, #1]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff ff67 	bl	80093ec <VL53L0X_calc_macro_period_ps>
 800951e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009526:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <VL53L0X_calc_timeout_us+0x50>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	099b      	lsrs	r3, r3, #6
 800952e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009530:	887b      	ldrh	r3, [r7, #2]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	fb02 f303 	mul.w	r3, r2, r3
 8009538:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800953c:	4a04      	ldr	r2, [pc, #16]	; (8009550 <VL53L0X_calc_timeout_us+0x50>)
 800953e:	fba2 2303 	umull	r2, r3, r2, r3
 8009542:	099b      	lsrs	r3, r3, #6
 8009544:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009546:	697b      	ldr	r3, [r7, #20]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	10624dd3 	.word	0x10624dd3

08009554 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08c      	sub	sp, #48	; 0x30
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	460b      	mov	r3, r1
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009562:	2300      	movs	r3, #0
 8009564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <get_sequence_step_timeout+0x38>
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d002      	beq.n	800958c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009586:	7afb      	ldrb	r3, [r7, #11]
 8009588:	2b02      	cmp	r3, #2
 800958a:	d128      	bne.n	80095de <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800958c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009590:	461a      	mov	r2, r3
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7fd fa4d 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80095a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d109      	bne.n	80095bc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80095a8:	f107 0320 	add.w	r3, r7, #32
 80095ac:	461a      	mov	r2, r3
 80095ae:	2146      	movs	r1, #70	; 0x46
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 fd8b 	bl	800b0cc <VL53L0X_RdByte>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80095bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff ff5c 	bl	8009480 <VL53L0X_decode_timeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80095cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80095d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095d2:	4619      	mov	r1, r3
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff ff93 	bl	8009500 <VL53L0X_calc_timeout_us>
 80095da:	62b8      	str	r0, [r7, #40]	; 0x28
 80095dc:	e092      	b.n	8009704 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80095de:	7afb      	ldrb	r3, [r7, #11]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d135      	bne.n	8009650 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80095e4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80095e8:	461a      	mov	r2, r3
 80095ea:	2100      	movs	r1, #0
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7fd fa21 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80095f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 8081 	bne.w	8009704 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009602:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009606:	461a      	mov	r2, r3
 8009608:	2100      	movs	r1, #0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7fd fa12 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009616:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800961a:	2b00      	cmp	r3, #0
 800961c:	d109      	bne.n	8009632 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800961e:	f107 031e 	add.w	r3, r7, #30
 8009622:	461a      	mov	r2, r3
 8009624:	2151      	movs	r1, #81	; 0x51
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f001 fd7a 	bl	800b120 <VL53L0X_RdWord>
 800962c:	4603      	mov	r3, r0
 800962e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009632:	8bfb      	ldrh	r3, [r7, #30]
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ff23 	bl	8009480 <VL53L0X_decode_timeout>
 800963a:	4603      	mov	r3, r0
 800963c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800963e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009644:	4619      	mov	r1, r3
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff ff5a 	bl	8009500 <VL53L0X_calc_timeout_us>
 800964c:	62b8      	str	r0, [r7, #40]	; 0x28
 800964e:	e059      	b.n	8009704 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	2b04      	cmp	r3, #4
 8009654:	d156      	bne.n	8009704 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009656:	f107 0314 	add.w	r3, r7, #20
 800965a:	4619      	mov	r1, r3
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7fd faf5 	bl	8006c4c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01d      	beq.n	80096a8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800966c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009670:	461a      	mov	r2, r3
 8009672:	2100      	movs	r1, #0
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7fd f9dd 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 800967a:	4603      	mov	r3, r0
 800967c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009680:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10f      	bne.n	80096a8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009688:	f107 031e 	add.w	r3, r7, #30
 800968c:	461a      	mov	r2, r3
 800968e:	2151      	movs	r1, #81	; 0x51
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f001 fd45 	bl	800b120 <VL53L0X_RdWord>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800969c:	8bfb      	ldrh	r3, [r7, #30]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff feee 	bl	8009480 <VL53L0X_decode_timeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80096a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096b0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80096b4:	461a      	mov	r2, r3
 80096b6:	2101      	movs	r1, #1
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7fd f9bb 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 80096be:	4603      	mov	r3, r0
 80096c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80096c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10f      	bne.n	80096ec <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80096cc:	f107 031c 	add.w	r3, r7, #28
 80096d0:	461a      	mov	r2, r3
 80096d2:	2171      	movs	r1, #113	; 0x71
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f001 fd23 	bl	800b120 <VL53L0X_RdWord>
 80096da:	4603      	mov	r3, r0
 80096dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80096e0:	8bbb      	ldrh	r3, [r7, #28]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fecc 	bl	8009480 <VL53L0X_decode_timeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80096ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80096f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80096f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096fa:	4619      	mov	r1, r3
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff feff 	bl	8009500 <VL53L0X_calc_timeout_us>
 8009702:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009708:	601a      	str	r2, [r3, #0]

	return Status;
 800970a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800970e:	4618      	mov	r0, r3
 8009710:	3730      	adds	r7, #48	; 0x30
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b08a      	sub	sp, #40	; 0x28
 800971a:	af00      	add	r7, sp, #0
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	460b      	mov	r3, r1
 8009720:	607a      	str	r2, [r7, #4]
 8009722:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009724:	2300      	movs	r3, #0
 8009726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <set_sequence_step_timeout+0x26>
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d002      	beq.n	800973c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d138      	bne.n	80097ae <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800973c:	f107 031b 	add.w	r3, r7, #27
 8009740:	461a      	mov	r2, r3
 8009742:	2100      	movs	r1, #0
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7fd f975 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 800974a:	4603      	mov	r3, r0
 800974c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009754:	2b00      	cmp	r3, #0
 8009756:	d11a      	bne.n	800978e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009758:	7efb      	ldrb	r3, [r7, #27]
 800975a:	461a      	mov	r2, r3
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff fea4 	bl	80094ac <VL53L0X_calc_timeout_mclks>
 8009764:	4603      	mov	r3, r0
 8009766:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009768:	8bbb      	ldrh	r3, [r7, #28]
 800976a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976e:	d903      	bls.n	8009778 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009770:	23ff      	movs	r3, #255	; 0xff
 8009772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009776:	e004      	b.n	8009782 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009778:	8bbb      	ldrh	r3, [r7, #28]
 800977a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800977c:	3b01      	subs	r3, #1
 800977e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800978e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009792:	2b00      	cmp	r3, #0
 8009794:	f040 80ab 	bne.w	80098ee <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009798:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800979c:	461a      	mov	r2, r3
 800979e:	2146      	movs	r1, #70	; 0x46
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f001 fc11 	bl	800afc8 <VL53L0X_WrByte>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80097ac:	e09f      	b.n	80098ee <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d135      	bne.n	8009820 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80097b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d11b      	bne.n	80097f4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097bc:	f107 031b 	add.w	r3, r7, #27
 80097c0:	461a      	mov	r2, r3
 80097c2:	2100      	movs	r1, #0
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7fd f935 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80097d0:	7efb      	ldrb	r3, [r7, #27]
 80097d2:	461a      	mov	r2, r3
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff fe68 	bl	80094ac <VL53L0X_calc_timeout_mclks>
 80097dc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80097de:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80097e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fe20 	bl	8009428 <VL53L0X_encode_timeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097ec:	8b3a      	ldrh	r2, [r7, #24]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80097f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d108      	bne.n	800980e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80097fc:	8b3b      	ldrh	r3, [r7, #24]
 80097fe:	461a      	mov	r2, r3
 8009800:	2151      	movs	r1, #81	; 0x51
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f001 fc04 	bl	800b010 <VL53L0X_WrWord>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800980e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009812:	2b00      	cmp	r3, #0
 8009814:	d16b      	bne.n	80098ee <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800981e:	e066      	b.n	80098ee <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	2b04      	cmp	r3, #4
 8009824:	d160      	bne.n	80098e8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009826:	f107 0310 	add.w	r3, r7, #16
 800982a:	4619      	mov	r1, r3
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7fd fa0d 	bl	8006c4c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009836:	7cfb      	ldrb	r3, [r7, #19]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01d      	beq.n	8009878 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800983c:	f107 031b 	add.w	r3, r7, #27
 8009840:	461a      	mov	r2, r3
 8009842:	2100      	movs	r1, #0
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7fd f8f5 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009850:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10f      	bne.n	8009878 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009858:	f107 0318 	add.w	r3, r7, #24
 800985c:	461a      	mov	r2, r3
 800985e:	2151      	movs	r1, #81	; 0x51
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f001 fc5d 	bl	800b120 <VL53L0X_RdWord>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800986c:	8b3b      	ldrh	r3, [r7, #24]
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff fe06 	bl	8009480 <VL53L0X_decode_timeout>
 8009874:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009876:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009880:	f107 031b 	add.w	r3, r7, #27
 8009884:	461a      	mov	r2, r3
 8009886:	2101      	movs	r1, #1
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7fd f8d3 	bl	8006a34 <VL53L0X_GetVcselPulsePeriod>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009898:	2b00      	cmp	r3, #0
 800989a:	d128      	bne.n	80098ee <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800989c:	7efb      	ldrb	r3, [r7, #27]
 800989e:	461a      	mov	r2, r3
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7ff fe02 	bl	80094ac <VL53L0X_calc_timeout_mclks>
 80098a8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80098aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098ac:	6a3a      	ldr	r2, [r7, #32]
 80098ae:	4413      	add	r3, r2
 80098b0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80098b2:	6a38      	ldr	r0, [r7, #32]
 80098b4:	f7ff fdb8 	bl	8009428 <VL53L0X_encode_timeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80098bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d108      	bne.n	80098d6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80098c4:	8bfb      	ldrh	r3, [r7, #30]
 80098c6:	461a      	mov	r2, r3
 80098c8:	2171      	movs	r1, #113	; 0x71
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f001 fba0 	bl	800b010 <VL53L0X_WrWord>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80098d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d107      	bne.n	80098ee <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80098e6:	e002      	b.n	80098ee <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098e8:	23fc      	movs	r3, #252	; 0xfc
 80098ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80098ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3728      	adds	r7, #40	; 0x28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b08a      	sub	sp, #40	; 0x28
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
 8009906:	4613      	mov	r3, r2
 8009908:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800990a:	2300      	movs	r3, #0
 800990c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009910:	230c      	movs	r3, #12
 8009912:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009916:	2312      	movs	r3, #18
 8009918:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800991c:	2308      	movs	r3, #8
 800991e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009922:	230e      	movs	r3, #14
 8009924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800992c:	78bb      	ldrb	r3, [r7, #2]
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009938:	23fc      	movs	r3, #252	; 0xfc
 800993a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800993e:	e020      	b.n	8009982 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10d      	bne.n	8009962 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009946:	78ba      	ldrb	r2, [r7, #2]
 8009948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800994c:	429a      	cmp	r2, r3
 800994e:	d304      	bcc.n	800995a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009950:	78ba      	ldrb	r2, [r7, #2]
 8009952:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009956:	429a      	cmp	r2, r3
 8009958:	d903      	bls.n	8009962 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800995a:	23fc      	movs	r3, #252	; 0xfc
 800995c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009960:	e00f      	b.n	8009982 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d10c      	bne.n	8009982 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009968:	78ba      	ldrb	r2, [r7, #2]
 800996a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800996e:	429a      	cmp	r2, r3
 8009970:	d304      	bcc.n	800997c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009972:	78ba      	ldrb	r2, [r7, #2]
 8009974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009978:	429a      	cmp	r2, r3
 800997a:	d902      	bls.n	8009982 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800997c:	23fc      	movs	r3, #252	; 0xfc
 800997e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800998a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800998e:	e239      	b.n	8009e04 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d150      	bne.n	8009a38 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009996:	78bb      	ldrb	r3, [r7, #2]
 8009998:	2b0c      	cmp	r3, #12
 800999a:	d110      	bne.n	80099be <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800999c:	2218      	movs	r2, #24
 800999e:	2157      	movs	r1, #87	; 0x57
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 fb11 	bl	800afc8 <VL53L0X_WrByte>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80099ac:	2208      	movs	r2, #8
 80099ae:	2156      	movs	r1, #86	; 0x56
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 fb09 	bl	800afc8 <VL53L0X_WrByte>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099bc:	e17f      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80099be:	78bb      	ldrb	r3, [r7, #2]
 80099c0:	2b0e      	cmp	r3, #14
 80099c2:	d110      	bne.n	80099e6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80099c4:	2230      	movs	r2, #48	; 0x30
 80099c6:	2157      	movs	r1, #87	; 0x57
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 fafd 	bl	800afc8 <VL53L0X_WrByte>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80099d4:	2208      	movs	r2, #8
 80099d6:	2156      	movs	r1, #86	; 0x56
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 faf5 	bl	800afc8 <VL53L0X_WrByte>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099e4:	e16b      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80099e6:	78bb      	ldrb	r3, [r7, #2]
 80099e8:	2b10      	cmp	r3, #16
 80099ea:	d110      	bne.n	8009a0e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80099ec:	2240      	movs	r2, #64	; 0x40
 80099ee:	2157      	movs	r1, #87	; 0x57
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f001 fae9 	bl	800afc8 <VL53L0X_WrByte>
 80099f6:	4603      	mov	r3, r0
 80099f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80099fc:	2208      	movs	r2, #8
 80099fe:	2156      	movs	r1, #86	; 0x56
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 fae1 	bl	800afc8 <VL53L0X_WrByte>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a0c:	e157      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009a0e:	78bb      	ldrb	r3, [r7, #2]
 8009a10:	2b12      	cmp	r3, #18
 8009a12:	f040 8154 	bne.w	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009a16:	2250      	movs	r2, #80	; 0x50
 8009a18:	2157      	movs	r1, #87	; 0x57
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 fad4 	bl	800afc8 <VL53L0X_WrByte>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009a26:	2208      	movs	r2, #8
 8009a28:	2156      	movs	r1, #86	; 0x56
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 facc 	bl	800afc8 <VL53L0X_WrByte>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a36:	e142      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	f040 813f 	bne.w	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009a40:	78bb      	ldrb	r3, [r7, #2]
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	d14c      	bne.n	8009ae0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009a46:	2210      	movs	r2, #16
 8009a48:	2148      	movs	r1, #72	; 0x48
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 fabc 	bl	800afc8 <VL53L0X_WrByte>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009a56:	2208      	movs	r2, #8
 8009a58:	2147      	movs	r1, #71	; 0x47
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 fab4 	bl	800afc8 <VL53L0X_WrByte>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009a66:	2202      	movs	r2, #2
 8009a68:	2132      	movs	r1, #50	; 0x32
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 faac 	bl	800afc8 <VL53L0X_WrByte>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009a7e:	220c      	movs	r2, #12
 8009a80:	2130      	movs	r1, #48	; 0x30
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 faa0 	bl	800afc8 <VL53L0X_WrByte>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a90:	4313      	orrs	r3, r2
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009a96:	2201      	movs	r2, #1
 8009a98:	21ff      	movs	r1, #255	; 0xff
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fa94 	bl	800afc8 <VL53L0X_WrByte>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009aae:	2230      	movs	r2, #48	; 0x30
 8009ab0:	2130      	movs	r1, #48	; 0x30
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fa88 	bl	800afc8 <VL53L0X_WrByte>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	21ff      	movs	r1, #255	; 0xff
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 fa7c 	bl	800afc8 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ade:	e0ee      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009ae0:	78bb      	ldrb	r3, [r7, #2]
 8009ae2:	2b0a      	cmp	r3, #10
 8009ae4:	d14c      	bne.n	8009b80 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009ae6:	2228      	movs	r2, #40	; 0x28
 8009ae8:	2148      	movs	r1, #72	; 0x48
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 fa6c 	bl	800afc8 <VL53L0X_WrByte>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009af6:	2208      	movs	r2, #8
 8009af8:	2147      	movs	r1, #71	; 0x47
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fa64 	bl	800afc8 <VL53L0X_WrByte>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009b06:	2203      	movs	r2, #3
 8009b08:	2132      	movs	r1, #50	; 0x32
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 fa5c 	bl	800afc8 <VL53L0X_WrByte>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009b1e:	2209      	movs	r2, #9
 8009b20:	2130      	movs	r1, #48	; 0x30
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 fa50 	bl	800afc8 <VL53L0X_WrByte>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b36:	2201      	movs	r2, #1
 8009b38:	21ff      	movs	r1, #255	; 0xff
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 fa44 	bl	800afc8 <VL53L0X_WrByte>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461a      	mov	r2, r3
 8009b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009b4e:	2220      	movs	r2, #32
 8009b50:	2130      	movs	r1, #48	; 0x30
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 fa38 	bl	800afc8 <VL53L0X_WrByte>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b60:	4313      	orrs	r3, r2
 8009b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b66:	2200      	movs	r2, #0
 8009b68:	21ff      	movs	r1, #255	; 0xff
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fa2c 	bl	800afc8 <VL53L0X_WrByte>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461a      	mov	r2, r3
 8009b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b7e:	e09e      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009b80:	78bb      	ldrb	r3, [r7, #2]
 8009b82:	2b0c      	cmp	r3, #12
 8009b84:	d14c      	bne.n	8009c20 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009b86:	2238      	movs	r2, #56	; 0x38
 8009b88:	2148      	movs	r1, #72	; 0x48
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 fa1c 	bl	800afc8 <VL53L0X_WrByte>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009b96:	2208      	movs	r2, #8
 8009b98:	2147      	movs	r1, #71	; 0x47
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 fa14 	bl	800afc8 <VL53L0X_WrByte>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	2132      	movs	r1, #50	; 0x32
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fa0c 	bl	800afc8 <VL53L0X_WrByte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009bbe:	2208      	movs	r2, #8
 8009bc0:	2130      	movs	r1, #48	; 0x30
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 fa00 	bl	800afc8 <VL53L0X_WrByte>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	21ff      	movs	r1, #255	; 0xff
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 f9f4 	bl	800afc8 <VL53L0X_WrByte>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009bee:	2220      	movs	r2, #32
 8009bf0:	2130      	movs	r1, #48	; 0x30
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 f9e8 	bl	800afc8 <VL53L0X_WrByte>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009c06:	2200      	movs	r2, #0
 8009c08:	21ff      	movs	r1, #255	; 0xff
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 f9dc 	bl	800afc8 <VL53L0X_WrByte>
 8009c10:	4603      	mov	r3, r0
 8009c12:	461a      	mov	r2, r3
 8009c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c1e:	e04e      	b.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009c20:	78bb      	ldrb	r3, [r7, #2]
 8009c22:	2b0e      	cmp	r3, #14
 8009c24:	d14b      	bne.n	8009cbe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009c26:	2248      	movs	r2, #72	; 0x48
 8009c28:	2148      	movs	r1, #72	; 0x48
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f001 f9cc 	bl	800afc8 <VL53L0X_WrByte>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009c36:	2208      	movs	r2, #8
 8009c38:	2147      	movs	r1, #71	; 0x47
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 f9c4 	bl	800afc8 <VL53L0X_WrByte>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009c46:	2203      	movs	r2, #3
 8009c48:	2132      	movs	r1, #50	; 0x32
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 f9bc 	bl	800afc8 <VL53L0X_WrByte>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009c5e:	2207      	movs	r2, #7
 8009c60:	2130      	movs	r1, #48	; 0x30
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 f9b0 	bl	800afc8 <VL53L0X_WrByte>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009c76:	2201      	movs	r2, #1
 8009c78:	21ff      	movs	r1, #255	; 0xff
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 f9a4 	bl	800afc8 <VL53L0X_WrByte>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461a      	mov	r2, r3
 8009c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009c8e:	2220      	movs	r2, #32
 8009c90:	2130      	movs	r1, #48	; 0x30
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f998 	bl	800afc8 <VL53L0X_WrByte>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	21ff      	movs	r1, #255	; 0xff
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 f98c 	bl	800afc8 <VL53L0X_WrByte>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d17f      	bne.n	8009dc6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009cc6:	78bb      	ldrb	r3, [r7, #2]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fe38 	bl	800893e <VL53L0X_encode_vcsel_period>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d045      	beq.n	8009d6a <VL53L0X_set_vcsel_pulse_period+0x470>
 8009cde:	e06e      	b.n	8009dbe <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009ce0:	f107 0314 	add.w	r3, r7, #20
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	2103      	movs	r1, #3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fc33 	bl	8009554 <get_sequence_step_timeout>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009cf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d109      	bne.n	8009d10 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009cfc:	f107 0310 	add.w	r3, r7, #16
 8009d00:	461a      	mov	r2, r3
 8009d02:	2102      	movs	r1, #2
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff fc25 	bl	8009554 <get_sequence_step_timeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009d10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009d18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	2150      	movs	r1, #80	; 0x50
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 f951 	bl	800afc8 <VL53L0X_WrByte>
 8009d26:	4603      	mov	r3, r0
 8009d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d108      	bne.n	8009d46 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	461a      	mov	r2, r3
 8009d38:	2103      	movs	r1, #3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fceb 	bl	8009716 <set_sequence_step_timeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009d46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d108      	bne.n	8009d60 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	461a      	mov	r2, r3
 8009d52:	2102      	movs	r1, #2
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff fcde 	bl	8009716 <set_sequence_step_timeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	78ba      	ldrb	r2, [r7, #2]
 8009d64:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009d68:	e02e      	b.n	8009dc8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009d6a:	f107 0318 	add.w	r3, r7, #24
 8009d6e:	461a      	mov	r2, r3
 8009d70:	2104      	movs	r1, #4
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7ff fbee 	bl	8009554 <get_sequence_step_timeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009d7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009d86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	2170      	movs	r1, #112	; 0x70
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 f91a 	bl	800afc8 <VL53L0X_WrByte>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009d9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d108      	bne.n	8009db4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	461a      	mov	r2, r3
 8009da6:	2104      	movs	r1, #4
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff fcb4 	bl	8009716 <set_sequence_step_timeout>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	78ba      	ldrb	r2, [r7, #2]
 8009db8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009dbc:	e004      	b.n	8009dc8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dbe:	23fc      	movs	r3, #252	; 0xfc
 8009dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dc4:	e000      	b.n	8009dc8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009dc6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009dd6:	69f9      	ldr	r1, [r7, #28]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7fc fded 	bl	80069b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009dec:	f107 010f 	add.w	r1, r7, #15
 8009df0:	2301      	movs	r3, #1
 8009df2:	2200      	movs	r2, #0
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7fe fcbd 	bl	8008774 <VL53L0X_perform_phase_calibration>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3728      	adds	r7, #40	; 0x28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	460b      	mov	r3, r1
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d00a      	beq.n	8009e3e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009e28:	e013      	b.n	8009e52 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009e2a:	f107 0316 	add.w	r3, r7, #22
 8009e2e:	461a      	mov	r2, r3
 8009e30:	2150      	movs	r1, #80	; 0x50
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f001 f94a 	bl	800b0cc <VL53L0X_RdByte>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009e3c:	e00b      	b.n	8009e56 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009e3e:	f107 0316 	add.w	r3, r7, #22
 8009e42:	461a      	mov	r2, r3
 8009e44:	2170      	movs	r1, #112	; 0x70
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f001 f940 	bl	800b0cc <VL53L0X_RdByte>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009e50:	e001      	b.n	8009e56 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e52:	23fc      	movs	r3, #252	; 0xfc
 8009e54:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d107      	bne.n	8009e6e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009e5e:	7dbb      	ldrb	r3, [r7, #22]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fd59 	bl	8008918 <VL53L0X_decode_vcsel_period>
 8009e66:	4603      	mov	r3, r0
 8009e68:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	701a      	strb	r2, [r3, #0]

	return Status;
 8009e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b092      	sub	sp, #72	; 0x48
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009e8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009e8e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009e90:	f240 7376 	movw	r3, #1910	; 0x776
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009e96:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009e9c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009ea2:	f240 234e 	movw	r3, #590	; 0x24e
 8009ea6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009ea8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009eae:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009eb4:	f240 2326 	movw	r3, #550	; 0x226
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009ebe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009ec2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d205      	bcs.n	8009edc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ed0:	23fc      	movs	r3, #252	; 0xfc
 8009ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009ed6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009eda:	e0aa      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7fc feac 	bl	8006c4c <VL53L0X_GetSequenceStepEnables>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009efa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d15b      	bne.n	8009fba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009f02:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d105      	bne.n	8009f14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009f08:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009f0e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d052      	beq.n	8009fba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009f14:	f107 0310 	add.w	r3, r7, #16
 8009f18:	461a      	mov	r2, r3
 8009f1a:	2102      	movs	r1, #2
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fb19 	bl	8009554 <get_sequence_step_timeout>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009f28:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009f30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f34:	e07d      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009f36:	7d3b      	ldrb	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00f      	beq.n	8009f5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009f3c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f40:	4413      	add	r3, r2
 8009f42:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d204      	bcs.n	8009f56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	643b      	str	r3, [r7, #64]	; 0x40
 8009f54:	e002      	b.n	8009f5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f56:	23fc      	movs	r3, #252	; 0xfc
 8009f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009f5c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009f64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f68:	e063      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009f6a:	7dbb      	ldrb	r3, [r7, #22]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d011      	beq.n	8009f94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f74:	4413      	add	r3, r2
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d204      	bcs.n	8009f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	643b      	str	r3, [r7, #64]	; 0x40
 8009f8a:	e016      	b.n	8009fba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f8c:	23fc      	movs	r3, #252	; 0xfc
 8009f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f92:	e012      	b.n	8009fba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009f94:	7d7b      	ldrb	r3, [r7, #21]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00f      	beq.n	8009fba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f9e:	4413      	add	r3, r2
 8009fa0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009fa2:	69fa      	ldr	r2, [r7, #28]
 8009fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d204      	bcs.n	8009fb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb2:	e002      	b.n	8009fba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fb4:	23fc      	movs	r3, #252	; 0xfc
 8009fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009fba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009fc2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fc6:	e034      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d019      	beq.n	800a002 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009fce:	f107 030c 	add.w	r3, r7, #12
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2103      	movs	r1, #3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7ff fabc 	bl	8009554 <get_sequence_step_timeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe6:	4413      	add	r3, r2
 8009fe8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d204      	bcs.n	8009ffc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8009ffa:	e002      	b.n	800a002 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ffc:	23fc      	movs	r3, #252	; 0xfc
 8009ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a002:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a006:	2b00      	cmp	r3, #0
 800a008:	d111      	bne.n	800a02e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a00a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00e      	beq.n	800a02e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a01a:	2104      	movs	r1, #4
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff fb7a 	bl	8009716 <set_sequence_step_timeout>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a02e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a032:	4618      	mov	r0, r3
 800a034:	3748      	adds	r7, #72	; 0x48
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b090      	sub	sp, #64	; 0x40
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a044:	2300      	movs	r3, #0
 800a046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a04a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a04e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a050:	f240 7376 	movw	r3, #1910	; 0x776
 800a054:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a056:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a05a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a05c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a060:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a062:	f240 234e 	movw	r3, #590	; 0x24e
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a068:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a06c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a06e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a074:	f240 2326 	movw	r3, #550	; 0x226
 800a078:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a082:	441a      	add	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a088:	f107 0318 	add.w	r3, r7, #24
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7fc fddc 	bl	8006c4c <VL53L0X_GetSequenceStepEnables>
 800a094:	4603      	mov	r3, r0
 800a096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a09a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a0a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0a6:	e075      	b.n	800a194 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a0a8:	7e3b      	ldrb	r3, [r7, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d105      	bne.n	800a0ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a0ae:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a0b4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d030      	beq.n	800a11c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a0ba:	f107 0310 	add.w	r3, r7, #16
 800a0be:	461a      	mov	r2, r3
 800a0c0:	2102      	movs	r1, #2
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fa46 	bl	8009554 <get_sequence_step_timeout>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a0ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d122      	bne.n	800a11c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a0d6:	7e3b      	ldrb	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a0e0:	6939      	ldr	r1, [r7, #16]
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a0e6:	441a      	add	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a0ec:	7ebb      	ldrb	r3, [r7, #26]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a0f6:	6939      	ldr	r1, [r7, #16]
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	440b      	add	r3, r1
 800a0fc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a0fe:	441a      	add	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e00a      	b.n	800a11c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a106:	7e7b      	ldrb	r3, [r7, #25]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a110:	6939      	ldr	r1, [r7, #16]
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a116:	441a      	add	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a11c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a120:	2b00      	cmp	r3, #0
 800a122:	d114      	bne.n	800a14e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a124:	7efb      	ldrb	r3, [r7, #27]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d011      	beq.n	800a14e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a12a:	f107 030c 	add.w	r3, r7, #12
 800a12e:	461a      	mov	r2, r3
 800a130:	2103      	movs	r1, #3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fa0e 	bl	8009554 <get_sequence_step_timeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a142:	68f9      	ldr	r1, [r7, #12]
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a148:	441a      	add	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a14e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a152:	2b00      	cmp	r3, #0
 800a154:	d114      	bne.n	800a180 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a156:	7f3b      	ldrb	r3, [r7, #28]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d011      	beq.n	800a180 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a15c:	f107 0314 	add.w	r3, r7, #20
 800a160:	461a      	mov	r2, r3
 800a162:	2104      	movs	r1, #4
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff f9f5 	bl	8009554 <get_sequence_step_timeout>
 800a16a:	4603      	mov	r3, r0
 800a16c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a174:	6979      	ldr	r1, [r7, #20]
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a17a:	441a      	add	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a180:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a184:	2b00      	cmp	r3, #0
 800a186:	d103      	bne.n	800a190 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a190:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a194:	4618      	mov	r0, r3
 800a196:	3740      	adds	r7, #64	; 0x40
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a1ae:	e0c6      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a1c0:	7cfb      	ldrb	r3, [r7, #19]
 800a1c2:	2bff      	cmp	r3, #255	; 0xff
 800a1c4:	f040 808d 	bne.w	800a2e2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	747b      	strb	r3, [r7, #17]
			Index++;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a1d8:	7c7b      	ldrb	r3, [r7, #17]
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d87e      	bhi.n	800a2dc <VL53L0X_load_tuning_settings+0x140>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <VL53L0X_load_tuning_settings+0x48>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a1f5 	.word	0x0800a1f5
 800a1e8:	0800a22f 	.word	0x0800a22f
 800a1ec:	0800a269 	.word	0x0800a269
 800a1f0:	0800a2a3 	.word	0x0800a2a3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	743b      	strb	r3, [r7, #16]
				Index++;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	3301      	adds	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	4413      	add	r3, r2
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	3301      	adds	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a214:	7c3b      	ldrb	r3, [r7, #16]
 800a216:	b29b      	uxth	r3, r3
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4413      	add	r3, r2
 800a222:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	89ba      	ldrh	r2, [r7, #12]
 800a228:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a22c:	e087      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	4413      	add	r3, r2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	743b      	strb	r3, [r7, #16]
				Index++;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	3301      	adds	r3, #1
 800a23c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	4413      	add	r3, r2
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	3301      	adds	r3, #1
 800a24c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a24e:	7c3b      	ldrb	r3, [r7, #16]
 800a250:	b29b      	uxth	r3, r3
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	b29a      	uxth	r2, r3
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	4413      	add	r3, r2
 800a25c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	89ba      	ldrh	r2, [r7, #12]
 800a262:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a266:	e06a      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	4413      	add	r3, r2
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	743b      	strb	r3, [r7, #16]
				Index++;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	3301      	adds	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4413      	add	r3, r2
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	3301      	adds	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a288:	7c3b      	ldrb	r3, [r7, #16]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	b29a      	uxth	r2, r3
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	b29b      	uxth	r3, r3
 800a294:	4413      	add	r3, r2
 800a296:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	89ba      	ldrh	r2, [r7, #12]
 800a29c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a2a0:	e04d      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	743b      	strb	r3, [r7, #16]
				Index++;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a2c2:	7c3b      	ldrb	r3, [r7, #16]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	89ba      	ldrh	r2, [r7, #12]
 800a2d6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a2da:	e030      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2dc:	23fc      	movs	r3, #252	; 0xfc
 800a2de:	77fb      	strb	r3, [r7, #31]
 800a2e0:	e02d      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a2e2:	7cfb      	ldrb	r3, [r7, #19]
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d828      	bhi.n	800a33a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	e00f      	b.n	800a31e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	4413      	add	r3, r2
 800a304:	7819      	ldrb	r1, [r3, #0]
 800a306:	f107 0208 	add.w	r2, r7, #8
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	4413      	add	r3, r2
 800a30e:	460a      	mov	r2, r1
 800a310:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	3301      	adds	r3, #1
 800a316:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	3301      	adds	r3, #1
 800a31c:	61bb      	str	r3, [r7, #24]
 800a31e:	7cfb      	ldrb	r3, [r7, #19]
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	429a      	cmp	r2, r3
 800a324:	dbeb      	blt.n	800a2fe <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a326:	7cfb      	ldrb	r3, [r7, #19]
 800a328:	f107 0208 	add.w	r2, r7, #8
 800a32c:	7cb9      	ldrb	r1, [r7, #18]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fdee 	bl	800af10 <VL53L0X_WriteMulti>
 800a334:	4603      	mov	r3, r0
 800a336:	77fb      	strb	r3, [r7, #31]
 800a338:	e001      	b.n	800a33e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a33a:	23fc      	movs	r3, #252	; 0xfc
 800a33c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	4413      	add	r3, r2
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <VL53L0X_load_tuning_settings+0x1b8>
 800a34a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f43f af2e 	beq.w	800a1b0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a354:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a36c:	2300      	movs	r3, #0
 800a36e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a376:	f107 0313 	add.w	r3, r7, #19
 800a37a:	4619      	mov	r1, r3
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7fc fcf1 	bl	8006d64 <VL53L0X_GetXTalkCompensationEnable>
 800a382:	4603      	mov	r3, r0
 800a384:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a386:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d111      	bne.n	800a3b2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a38e:	7cfb      	ldrb	r3, [r7, #19]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00e      	beq.n	800a3b2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	8a9b      	ldrh	r3, [r3, #20]
 800a39e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
 800a3a6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	3380      	adds	r3, #128	; 0x80
 800a3ac:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a3b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3720      	adds	r7, #32
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b086      	sub	sp, #24
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a3d6:	f107 0310 	add.w	r3, r7, #16
 800a3da:	461a      	mov	r2, r3
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7ff ffbe 	bl	800a360 <VL53L0X_get_total_xtalk_rate>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a3e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d105      	bne.n	800a3fc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	441a      	add	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]

	return Status;
 800a3fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b09a      	sub	sp, #104	; 0x68
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a416:	2312      	movs	r3, #18
 800a418:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a41a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a41e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a420:	2342      	movs	r3, #66	; 0x42
 800a422:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a424:	2306      	movs	r3, #6
 800a426:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a428:	2307      	movs	r3, #7
 800a42a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a438:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a440:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a446:	fb02 f303 	mul.w	r3, r2, r3
 800a44a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44e:	3380      	adds	r3, #128	; 0x80
 800a450:	0a1b      	lsrs	r3, r3, #8
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a458:	fb02 f303 	mul.w	r3, r2, r3
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d01a      	beq.n	800a49e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	029b      	lsls	r3, r3, #10
 800a46c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a474:	4413      	add	r3, r2
 800a476:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a480:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a484:	4613      	mov	r3, r2
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	4413      	add	r3, r2
 800a48a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a48c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a48e:	fb03 f303 	mul.w	r3, r3, r3
 800a492:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a496:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a49a:	0c1b      	lsrs	r3, r3, #16
 800a49c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a4a2:	fb02 f303 	mul.w	r3, r2, r3
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4ae:	0c1b      	lsrs	r3, r3, #16
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	fb03 f303 	mul.w	r3, r3, r3
 800a4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a4ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4c0:	0c1b      	lsrs	r3, r3, #16
 800a4c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c6:	085a      	lsrs	r2, r3, #1
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	441a      	add	r2, r3
 800a4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e4:	d302      	bcc.n	800a4ec <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a4e6:	4b54      	ldr	r3, [pc, #336]	; (800a638 <VL53L0X_calc_dmax+0x230>)
 800a4e8:	663b      	str	r3, [r7, #96]	; 0x60
 800a4ea:	e015      	b.n	800a518 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ee:	085a      	lsrs	r2, r3, #1
 800a4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f2:	441a      	add	r2, r3
 800a4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fa:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a4fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a500:	fb02 f303 	mul.w	r3, r2, r3
 800a504:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a508:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a50c:	0c1b      	lsrs	r3, r3, #16
 800a50e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a512:	fb03 f303 	mul.w	r3, r3, r3
 800a516:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a51a:	039b      	lsls	r3, r3, #14
 800a51c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a520:	4a46      	ldr	r2, [pc, #280]	; (800a63c <VL53L0X_calc_dmax+0x234>)
 800a522:	fba2 2303 	umull	r2, r3, r2, r3
 800a526:	099b      	lsrs	r3, r3, #6
 800a528:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	fb03 f303 	mul.w	r3, r3, r3
 800a530:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a534:	fb03 f303 	mul.w	r3, r3, r3
 800a538:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	3308      	adds	r3, #8
 800a53e:	091b      	lsrs	r3, r3, #4
 800a540:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54c:	4613      	mov	r3, r2
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	4413      	add	r3, r2
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a55c:	0b9b      	lsrs	r3, r3, #14
 800a55e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a564:	4413      	add	r3, r2
 800a566:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	4413      	add	r3, r2
 800a570:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a576:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	039b      	lsls	r3, r3, #14
 800a580:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	085b      	lsrs	r3, r3, #1
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	4413      	add	r3, r2
 800a58a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	fbb2 f3f3 	udiv	r3, r2, r3
 800a594:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a59a:	fb02 f303 	mul.w	r3, r2, r3
 800a59e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5a6:	4a25      	ldr	r2, [pc, #148]	; (800a63c <VL53L0X_calc_dmax+0x234>)
 800a5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ac:	099b      	lsrs	r3, r3, #6
 800a5ae:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	011b      	lsls	r3, r3, #4
 800a5b4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5bc:	4a1f      	ldr	r2, [pc, #124]	; (800a63c <VL53L0X_calc_dmax+0x234>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	099b      	lsrs	r3, r3, #6
 800a5c4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a5c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c8:	3380      	adds	r3, #128	; 0x80
 800a5ca:	0a1b      	lsrs	r3, r3, #8
 800a5cc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d008      	beq.n	800a5e6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	085a      	lsrs	r2, r3, #1
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	441a      	add	r2, r3
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5e4:	e001      	b.n	800a5ea <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a5ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a5ec:	f7fe f9ba 	bl	8008964 <VL53L0X_isqrt>
 800a5f0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d008      	beq.n	800a60a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	085a      	lsrs	r2, r3, #1
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fe:	441a      	add	r2, r3
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	fbb2 f3f3 	udiv	r3, r2, r3
 800a606:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a608:	e001      	b.n	800a60e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a60e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a610:	f7fe f9a8 	bl	8008964 <VL53L0X_isqrt>
 800a614:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a620:	429a      	cmp	r2, r3
 800a622:	d902      	bls.n	800a62a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a626:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a628:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a62a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3768      	adds	r7, #104	; 0x68
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	fff00000 	.word	0xfff00000
 800a63c:	10624dd3 	.word	0x10624dd3

0800a640 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b0b4      	sub	sp, #208	; 0xd0
 800a644:	af04      	add	r7, sp, #16
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a64e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a656:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a65a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a65e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a666:	f241 235c 	movw	r3, #4700	; 0x125c
 800a66a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a66e:	4b9e      	ldr	r3, [pc, #632]	; (800a8e8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a674:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a678:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a67a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a67e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a682:	fbb2 f3f3 	udiv	r3, r2, r3
 800a686:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a688:	4b98      	ldr	r3, [pc, #608]	; (800a8ec <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a68a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a68c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a690:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a692:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a696:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a698:	f240 6377 	movw	r3, #1655	; 0x677
 800a69c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6b2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a6b6:	0c1b      	lsrs	r3, r3, #16
 800a6b8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a6c0:	f107 0310 	add.w	r3, r7, #16
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7ff fe78 	bl	800a3be <VL53L0X_get_total_signal_rate>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7ff fe3f 	bl	800a360 <VL53L0X_get_total_xtalk_rate>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6ee:	fb02 f303 	mul.w	r3, r2, r3
 800a6f2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a6fa:	0c1b      	lsrs	r3, r3, #16
 800a6fc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a704:	fb02 f303 	mul.w	r3, r2, r3
 800a708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a70c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a712:	429a      	cmp	r2, r3
 800a714:	d902      	bls.n	800a71c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a71c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a720:	2b00      	cmp	r3, #0
 800a722:	d168      	bne.n	800a7f6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a72a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a734:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a738:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a73c:	461a      	mov	r2, r3
 800a73e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7fe feb2 	bl	80094ac <VL53L0X_calc_timeout_mclks>
 800a748:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a75a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a75e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a762:	461a      	mov	r2, r3
 800a764:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7fe fe9f 	bl	80094ac <VL53L0X_calc_timeout_mclks>
 800a76e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a770:	2303      	movs	r3, #3
 800a772:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a776:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	d102      	bne.n	800a784 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a77e:	2302      	movs	r3, #2
 800a780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a788:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a78a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a78e:	fb02 f303 	mul.w	r3, r2, r3
 800a792:	02db      	lsls	r3, r3, #11
 800a794:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a798:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a79c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7a0:	4a53      	ldr	r2, [pc, #332]	; (800a8f0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a6:	099b      	lsrs	r3, r3, #6
 800a7a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a7ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7b2:	fb02 f303 	mul.w	r3, r2, r3
 800a7b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a7ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7c2:	4a4b      	ldr	r2, [pc, #300]	; (800a8f0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c8:	099b      	lsrs	r3, r3, #6
 800a7ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	3380      	adds	r3, #128	; 0x80
 800a7d2:	0a1b      	lsrs	r3, r3, #8
 800a7d4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a7e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7e8:	3380      	adds	r3, #128	; 0x80
 800a7ea:	0a1b      	lsrs	r3, r3, #8
 800a7ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	021b      	lsls	r3, r3, #8
 800a7f4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a7f6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a7fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a802:	e15e      	b.n	800aac2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10c      	bne.n	800a824 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a810:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a818:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2200      	movs	r2, #0
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	e14c      	b.n	800aabe <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a836:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a83a:	041a      	lsls	r2, r3, #16
 800a83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a84a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d902      	bls.n	800a856 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a856:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a85a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a85e:	fb02 f303 	mul.w	r3, r2, r3
 800a862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a86a:	4613      	mov	r3, r2
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	4413      	add	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe f876 	bl	8008964 <VL53L0X_isqrt>
 800a878:	4603      	mov	r3, r0
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	891b      	ldrh	r3, [r3, #8]
 800a882:	461a      	mov	r2, r3
 800a884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a886:	fb02 f303 	mul.w	r3, r2, r3
 800a88a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a88c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a88e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a890:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a894:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a896:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a898:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a89c:	4a14      	ldr	r2, [pc, #80]	; (800a8f0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a89e:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a2:	099b      	lsrs	r3, r3, #6
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8ae:	4a10      	ldr	r2, [pc, #64]	; (800a8f0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b4:	099b      	lsrs	r3, r3, #6
 800a8b6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ba:	021b      	lsls	r3, r3, #8
 800a8bc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a8be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	bfb8      	it	lt
 800a8ca:	425b      	neglt	r3, r3
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d0:	021b      	lsls	r3, r3, #8
 800a8d2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	7e1b      	ldrb	r3, [r3, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a8dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a8e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8e4:	e033      	b.n	800a94e <VL53L0X_calc_sigma_estimate+0x30e>
 800a8e6:	bf00      	nop
 800a8e8:	028f87ae 	.word	0x028f87ae
 800a8ec:	0006999a 	.word	0x0006999a
 800a8f0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a8f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a904:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a90c:	fb02 f303 	mul.w	r3, r2, r3
 800a910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a914:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a91a:	4413      	add	r3, r2
 800a91c:	0c1b      	lsrs	r3, r3, #16
 800a91e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a926:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a92a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a92e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a932:	085b      	lsrs	r3, r3, #1
 800a934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a93c:	fb03 f303 	mul.w	r3, r3, r3
 800a940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a948:	0b9b      	lsrs	r3, r3, #14
 800a94a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a94e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a960:	0c1b      	lsrs	r3, r3, #16
 800a962:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	fb03 f303 	mul.w	r3, r3, r3
 800a96a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a96c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a978:	0c1b      	lsrs	r3, r3, #16
 800a97a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	fb03 f303 	mul.w	r3, r3, r3
 800a982:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	4413      	add	r3, r2
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a98e:	f7fd ffe9 	bl	8008964 <VL53L0X_isqrt>
 800a992:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	041b      	lsls	r3, r3, #16
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	3332      	adds	r3, #50	; 0x32
 800a99e:	4a4b      	ldr	r2, [pc, #300]	; (800aacc <VL53L0X_calc_sigma_estimate+0x48c>)
 800a9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a4:	095a      	lsrs	r2, r3, #5
 800a9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a9b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9b4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
 800a9bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a9c0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9c4:	f241 3388 	movw	r3, #5000	; 0x1388
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a9ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9d2:	4a3f      	ldr	r2, [pc, #252]	; (800aad0 <VL53L0X_calc_sigma_estimate+0x490>)
 800a9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d8:	0b5b      	lsrs	r3, r3, #13
 800a9da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a9de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d902      	bls.n	800a9ee <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a9e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a9ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a9f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a9fc:	4a35      	ldr	r2, [pc, #212]	; (800aad4 <VL53L0X_calc_sigma_estimate+0x494>)
 800a9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800aa02:	099b      	lsrs	r3, r3, #6
 800aa04:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800aa0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa0e:	441a      	add	r2, r3
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fd ffa4 	bl	8008964 <VL53L0X_isqrt>
 800aa1c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aa2a:	4a2a      	ldr	r2, [pc, #168]	; (800aad4 <VL53L0X_calc_sigma_estimate+0x494>)
 800aa2c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa30:	099b      	lsrs	r3, r3, #6
 800aa32:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800aa34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa38:	fb03 f303 	mul.w	r3, r3, r3
 800aa3c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	fb03 f303 	mul.w	r3, r3, r3
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800aa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	4413      	add	r3, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fd ff89 	bl	8008964 <VL53L0X_isqrt>
 800aa52:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa5a:	fb02 f303 	mul.w	r3, r2, r3
 800aa5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800aa62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <VL53L0X_calc_sigma_estimate+0x43c>
 800aa68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <VL53L0X_calc_sigma_estimate+0x43c>
 800aa70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aa74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d903      	bls.n	800aa84 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800aa7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aa8a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800aa96:	6939      	ldr	r1, [r7, #16]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7ff fca8 	bl	800a408 <VL53L0X_calc_dmax>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aabe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	37c0      	adds	r7, #192	; 0xc0
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	51eb851f 	.word	0x51eb851f
 800aad0:	d1b71759 	.word	0xd1b71759
 800aad4:	10624dd3 	.word	0x10624dd3

0800aad8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b090      	sub	sp, #64	; 0x40
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	461a      	mov	r2, r3
 800aae4:	460b      	mov	r3, r1
 800aae6:	72fb      	strb	r3, [r7, #11]
 800aae8:	4613      	mov	r3, r2
 800aaea:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaec:	2300      	movs	r3, #0
 800aaee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	10db      	asrs	r3, r3, #3
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ab38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d017      	beq.n	800ab70 <VL53L0X_get_pal_range_status+0x98>
 800ab40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab44:	2b05      	cmp	r3, #5
 800ab46:	d013      	beq.n	800ab70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ab48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab4c:	2b07      	cmp	r3, #7
 800ab4e:	d00f      	beq.n	800ab70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800ab50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab54:	2b0c      	cmp	r3, #12
 800ab56:	d00b      	beq.n	800ab70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800ab58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab5c:	2b0d      	cmp	r3, #13
 800ab5e:	d007      	beq.n	800ab70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800ab60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab64:	2b0e      	cmp	r3, #14
 800ab66:	d003      	beq.n	800ab70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800ab68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab6c:	2b0f      	cmp	r3, #15
 800ab6e:	d103      	bne.n	800ab78 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ab76:	e002      	b.n	800ab7e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ab7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d109      	bne.n	800ab9a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ab86:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7fc f9bc 	bl	8006f0c <VL53L0X_GetLimitCheckEnable>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800ab9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d02e      	beq.n	800ac00 <VL53L0X_get_pal_range_status+0x128>
 800aba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d12a      	bne.n	800ac00 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800abaa:	f107 0310 	add.w	r3, r7, #16
 800abae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800abb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7ff fd43 	bl	800a640 <VL53L0X_calc_sigma_estimate>
 800abba:	4603      	mov	r3, r0
 800abbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800abc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d103      	bne.n	800abd0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	b29a      	uxth	r2, r3
 800abcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abce:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800abd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d113      	bne.n	800ac00 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800abd8:	f107 0320 	add.w	r3, r7, #32
 800abdc:	461a      	mov	r2, r3
 800abde:	2100      	movs	r1, #0
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7fc fa19 	bl	8007018 <VL53L0X_GetLimitCheckValue>
 800abe6:	4603      	mov	r3, r0
 800abe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d006      	beq.n	800ac00 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800abf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d902      	bls.n	800ac00 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800abfa:	2301      	movs	r3, #1
 800abfc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ac00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d109      	bne.n	800ac1c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ac08:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	2102      	movs	r1, #2
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7fc f97b 	bl	8006f0c <VL53L0X_GetLimitCheckEnable>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ac1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d044      	beq.n	800acae <VL53L0X_get_pal_range_status+0x1d6>
 800ac24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d140      	bne.n	800acae <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ac2c:	f107 031c 	add.w	r3, r7, #28
 800ac30:	461a      	mov	r2, r3
 800ac32:	2102      	movs	r1, #2
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7fc f9ef 	bl	8007018 <VL53L0X_GetLimitCheckValue>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ac40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d107      	bne.n	800ac58 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac48:	2201      	movs	r2, #1
 800ac4a:	21ff      	movs	r1, #255	; 0xff
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f9bb 	bl	800afc8 <VL53L0X_WrByte>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800ac58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d109      	bne.n	800ac74 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800ac60:	f107 0316 	add.w	r3, r7, #22
 800ac64:	461a      	mov	r2, r3
 800ac66:	21b6      	movs	r1, #182	; 0xb6
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 fa59 	bl	800b120 <VL53L0X_RdWord>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800ac74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d107      	bne.n	800ac8c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	21ff      	movs	r1, #255	; 0xff
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f9a1 	bl	800afc8 <VL53L0X_WrByte>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ac8c:	8afb      	ldrh	r3, [r7, #22]
 800ac8e:	025b      	lsls	r3, r3, #9
 800ac90:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac96:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d006      	beq.n	800acae <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800aca0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800aca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d902      	bls.n	800acae <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800acae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d109      	bne.n	800acca <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800acb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800acba:	461a      	mov	r2, r3
 800acbc:	2103      	movs	r1, #3
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f7fc f924 	bl	8006f0c <VL53L0X_GetLimitCheckEnable>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800acca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d023      	beq.n	800ad1a <VL53L0X_get_pal_range_status+0x242>
 800acd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d11f      	bne.n	800ad1a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800acda:	893b      	ldrh	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	637b      	str	r3, [r7, #52]	; 0x34
 800ace4:	e005      	b.n	800acf2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	021a      	lsls	r2, r3, #8
 800acea:	893b      	ldrh	r3, [r7, #8]
 800acec:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800acf2:	f107 0318 	add.w	r3, r7, #24
 800acf6:	461a      	mov	r2, r3
 800acf8:	2103      	movs	r1, #3
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7fc f98c 	bl	8007018 <VL53L0X_GetLimitCheckValue>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ad0c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ad0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d202      	bcs.n	800ad1a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d14a      	bne.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ad22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d103      	bne.n	800ad32 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ad2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad2c:	22ff      	movs	r2, #255	; 0xff
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	e042      	b.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ad32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d007      	beq.n	800ad4a <VL53L0X_get_pal_range_status+0x272>
 800ad3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d003      	beq.n	800ad4a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ad42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d103      	bne.n	800ad52 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ad4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad4c:	2205      	movs	r2, #5
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e032      	b.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ad52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad56:	2b06      	cmp	r3, #6
 800ad58:	d003      	beq.n	800ad62 <VL53L0X_get_pal_range_status+0x28a>
 800ad5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad5e:	2b09      	cmp	r3, #9
 800ad60:	d103      	bne.n	800ad6a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ad62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad64:	2204      	movs	r2, #4
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	e026      	b.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ad6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad6e:	2b08      	cmp	r3, #8
 800ad70:	d007      	beq.n	800ad82 <VL53L0X_get_pal_range_status+0x2aa>
 800ad72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad76:	2b0a      	cmp	r3, #10
 800ad78:	d003      	beq.n	800ad82 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ad7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d103      	bne.n	800ad8a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ad82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad84:	2203      	movs	r2, #3
 800ad86:	701a      	strb	r2, [r3, #0]
 800ad88:	e016      	b.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ad8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d003      	beq.n	800ad9a <VL53L0X_get_pal_range_status+0x2c2>
 800ad92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d103      	bne.n	800ada2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ad9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	e00a      	b.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ada2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d103      	bne.n	800adb2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800adaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adac:	2201      	movs	r2, #1
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	e002      	b.n	800adb8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800adb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adb4:	2200      	movs	r2, #0
 800adb6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800adb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d102      	bne.n	800adc6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800adc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc2:	2200      	movs	r2, #0
 800adc4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800adc6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800adca:	461a      	mov	r2, r3
 800adcc:	2101      	movs	r1, #1
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7fc f89c 	bl	8006f0c <VL53L0X_GetLimitCheckEnable>
 800add4:	4603      	mov	r3, r0
 800add6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800adda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d14f      	bne.n	800ae82 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ade2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <VL53L0X_get_pal_range_status+0x31a>
 800adea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d103      	bne.n	800adfa <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800adf2:	2301      	movs	r3, #1
 800adf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf8:	e002      	b.n	800ae00 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ae0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d003      	beq.n	800ae1a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ae12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d103      	bne.n	800ae22 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae20:	e002      	b.n	800ae28 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ae32:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <VL53L0X_get_pal_range_status+0x36a>
 800ae3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d103      	bne.n	800ae4a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ae42:	2301      	movs	r3, #1
 800ae44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae48:	e002      	b.n	800ae50 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ae5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <VL53L0X_get_pal_range_status+0x392>
 800ae62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d103      	bne.n	800ae72 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae70:	e002      	b.n	800ae78 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3740      	adds	r7, #64	; 0x40
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b088      	sub	sp, #32
 800ae92:	af02      	add	r7, sp, #8
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	330a      	adds	r3, #10
 800ae9e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800aeac:	b299      	uxth	r1, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	f7f7 fced 	bl	8002898 <HAL_I2C_Master_Transmit>
 800aebe:	4603      	mov	r3, r0
 800aec0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800aec2:	693b      	ldr	r3, [r7, #16]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	330a      	adds	r3, #10
 800aedc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	b299      	uxth	r1, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	4613      	mov	r3, r2
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	f7f7 fdbf 	bl	8002a80 <HAL_I2C_Master_Receive>
 800af02:	4603      	mov	r3, r0
 800af04:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800af06:	693b      	ldr	r3, [r7, #16]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	607a      	str	r2, [r7, #4]
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	460b      	mov	r3, r1
 800af1e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af20:	2300      	movs	r3, #0
 800af22:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b3f      	cmp	r3, #63	; 0x3f
 800af28:	d902      	bls.n	800af30 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800af2a:	f06f 0303 	mvn.w	r3, #3
 800af2e:	e016      	b.n	800af5e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800af30:	4a0d      	ldr	r2, [pc, #52]	; (800af68 <VL53L0X_WriteMulti+0x58>)
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	480c      	ldr	r0, [pc, #48]	; (800af6c <VL53L0X_WriteMulti+0x5c>)
 800af3c:	f000 f9a6 	bl	800b28c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	3301      	adds	r3, #1
 800af44:	461a      	mov	r2, r3
 800af46:	4908      	ldr	r1, [pc, #32]	; (800af68 <VL53L0X_WriteMulti+0x58>)
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f7ff ffa0 	bl	800ae8e <_I2CWrite>
 800af4e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af56:	23ec      	movs	r3, #236	; 0xec
 800af58:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800af5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20001a30 	.word	0x20001a30
 800af6c:	20001a31 	.word	0x20001a31

0800af70 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	460b      	mov	r3, r1
 800af7e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af80:	2300      	movs	r3, #0
 800af82:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800af84:	f107 030b 	add.w	r3, r7, #11
 800af88:	2201      	movs	r2, #1
 800af8a:	4619      	mov	r1, r3
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7ff ff7e 	bl	800ae8e <_I2CWrite>
 800af92:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af9a:	23ec      	movs	r3, #236	; 0xec
 800af9c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af9e:	e00c      	b.n	800afba <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	6879      	ldr	r1, [r7, #4]
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f7ff ff91 	bl	800aecc <_I2CRead>
 800afaa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afb2:	23ec      	movs	r3, #236	; 0xec
 800afb4:	75fb      	strb	r3, [r7, #23]
 800afb6:	e000      	b.n	800afba <VL53L0X_ReadMulti+0x4a>
    }
done:
 800afb8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800afba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
 800afd4:	4613      	mov	r3, r2
 800afd6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800afdc:	4a0b      	ldr	r2, [pc, #44]	; (800b00c <VL53L0X_WrByte+0x44>)
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800afe2:	4a0a      	ldr	r2, [pc, #40]	; (800b00c <VL53L0X_WrByte+0x44>)
 800afe4:	78bb      	ldrb	r3, [r7, #2]
 800afe6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800afe8:	2202      	movs	r2, #2
 800afea:	4908      	ldr	r1, [pc, #32]	; (800b00c <VL53L0X_WrByte+0x44>)
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ff4e 	bl	800ae8e <_I2CWrite>
 800aff2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800affa:	23ec      	movs	r3, #236	; 0xec
 800affc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800affe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20001a30 	.word	0x20001a30

0800b010 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
 800b01c:	4613      	mov	r3, r2
 800b01e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b024:	4a0e      	ldr	r2, [pc, #56]	; (800b060 <VL53L0X_WrWord+0x50>)
 800b026:	78fb      	ldrb	r3, [r7, #3]
 800b028:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b02a:	883b      	ldrh	r3, [r7, #0]
 800b02c:	0a1b      	lsrs	r3, r3, #8
 800b02e:	b29b      	uxth	r3, r3
 800b030:	b2da      	uxtb	r2, r3
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <VL53L0X_WrWord+0x50>)
 800b034:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b036:	883b      	ldrh	r3, [r7, #0]
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <VL53L0X_WrWord+0x50>)
 800b03c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b03e:	2203      	movs	r2, #3
 800b040:	4907      	ldr	r1, [pc, #28]	; (800b060 <VL53L0X_WrWord+0x50>)
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff ff23 	bl	800ae8e <_I2CWrite>
 800b048:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b050:	23ec      	movs	r3, #236	; 0xec
 800b052:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b054:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20001a30 	.word	0x20001a30

0800b064 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4603      	mov	r3, r0
 800b074:	70fb      	strb	r3, [r7, #3]
 800b076:	460b      	mov	r3, r1
 800b078:	70bb      	strb	r3, [r7, #2]
 800b07a:	4613      	mov	r3, r2
 800b07c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b082:	f107 020e 	add.w	r2, r7, #14
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f81e 	bl	800b0cc <VL53L0X_RdByte>
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d110      	bne.n	800b0be <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b09c:	7bba      	ldrb	r2, [r7, #14]
 800b09e:	78bb      	ldrb	r3, [r7, #2]
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	787b      	ldrb	r3, [r7, #1]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b0ac:	7bba      	ldrb	r2, [r7, #14]
 800b0ae:	78fb      	ldrb	r3, [r7, #3]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff ff88 	bl	800afc8 <VL53L0X_WrByte>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	e000      	b.n	800b0c0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b0be:	bf00      	nop
done:
    return Status;
 800b0c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b0de:	f107 030b 	add.w	r3, r7, #11
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fed1 	bl	800ae8e <_I2CWrite>
 800b0ec:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b0f4:	23ec      	movs	r3, #236	; 0xec
 800b0f6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b0f8:	e00c      	b.n	800b114 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff fee4 	bl	800aecc <_I2CRead>
 800b104:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b10c:	23ec      	movs	r3, #236	; 0xec
 800b10e:	75fb      	strb	r3, [r7, #23]
 800b110:	e000      	b.n	800b114 <VL53L0X_RdByte+0x48>
    }
done:
 800b112:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b114:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	460b      	mov	r3, r1
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b12e:	2300      	movs	r3, #0
 800b130:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b132:	f107 030b 	add.w	r3, r7, #11
 800b136:	2201      	movs	r2, #1
 800b138:	4619      	mov	r1, r3
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f7ff fea7 	bl	800ae8e <_I2CWrite>
 800b140:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b148:	23ec      	movs	r3, #236	; 0xec
 800b14a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b14c:	e017      	b.n	800b17e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b14e:	2202      	movs	r2, #2
 800b150:	490e      	ldr	r1, [pc, #56]	; (800b18c <VL53L0X_RdWord+0x6c>)
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff feba 	bl	800aecc <_I2CRead>
 800b158:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b160:	23ec      	movs	r3, #236	; 0xec
 800b162:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b164:	e00b      	b.n	800b17e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b166:	4b09      	ldr	r3, [pc, #36]	; (800b18c <VL53L0X_RdWord+0x6c>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	b29a      	uxth	r2, r3
 800b170:	4b06      	ldr	r3, [pc, #24]	; (800b18c <VL53L0X_RdWord+0x6c>)
 800b172:	785b      	ldrb	r3, [r3, #1]
 800b174:	b29b      	uxth	r3, r3
 800b176:	4413      	add	r3, r2
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b17e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20001a30 	.word	0x20001a30

0800b190 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	460b      	mov	r3, r1
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b1a2:	f107 030b 	add.w	r3, r7, #11
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fe6f 	bl	800ae8e <_I2CWrite>
 800b1b0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1b8:	23ec      	movs	r3, #236	; 0xec
 800b1ba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1bc:	e01b      	b.n	800b1f6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b1be:	2204      	movs	r2, #4
 800b1c0:	4910      	ldr	r1, [pc, #64]	; (800b204 <VL53L0X_RdDWord+0x74>)
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff fe82 	bl	800aecc <_I2CRead>
 800b1c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1d0:	23ec      	movs	r3, #236	; 0xec
 800b1d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1d4:	e00f      	b.n	800b1f6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	; (800b204 <VL53L0X_RdDWord+0x74>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	061a      	lsls	r2, r3, #24
 800b1dc:	4b09      	ldr	r3, [pc, #36]	; (800b204 <VL53L0X_RdDWord+0x74>)
 800b1de:	785b      	ldrb	r3, [r3, #1]
 800b1e0:	041b      	lsls	r3, r3, #16
 800b1e2:	441a      	add	r2, r3
 800b1e4:	4b07      	ldr	r3, [pc, #28]	; (800b204 <VL53L0X_RdDWord+0x74>)
 800b1e6:	789b      	ldrb	r3, [r3, #2]
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	4413      	add	r3, r2
 800b1ec:	4a05      	ldr	r2, [pc, #20]	; (800b204 <VL53L0X_RdDWord+0x74>)
 800b1ee:	78d2      	ldrb	r2, [r2, #3]
 800b1f0:	441a      	add	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20001a30 	.word	0x20001a30

0800b208 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b214:	2002      	movs	r0, #2
 800b216:	f7f6 fe43 	bl	8001ea0 <HAL_Delay>
    return status;
 800b21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <__errno>:
 800b228:	4b01      	ldr	r3, [pc, #4]	; (800b230 <__errno+0x8>)
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	200002e0 	.word	0x200002e0

0800b234 <__libc_init_array>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4d0d      	ldr	r5, [pc, #52]	; (800b26c <__libc_init_array+0x38>)
 800b238:	4c0d      	ldr	r4, [pc, #52]	; (800b270 <__libc_init_array+0x3c>)
 800b23a:	1b64      	subs	r4, r4, r5
 800b23c:	10a4      	asrs	r4, r4, #2
 800b23e:	2600      	movs	r6, #0
 800b240:	42a6      	cmp	r6, r4
 800b242:	d109      	bne.n	800b258 <__libc_init_array+0x24>
 800b244:	4d0b      	ldr	r5, [pc, #44]	; (800b274 <__libc_init_array+0x40>)
 800b246:	4c0c      	ldr	r4, [pc, #48]	; (800b278 <__libc_init_array+0x44>)
 800b248:	f002 ff4c 	bl	800e0e4 <_init>
 800b24c:	1b64      	subs	r4, r4, r5
 800b24e:	10a4      	asrs	r4, r4, #2
 800b250:	2600      	movs	r6, #0
 800b252:	42a6      	cmp	r6, r4
 800b254:	d105      	bne.n	800b262 <__libc_init_array+0x2e>
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	f855 3b04 	ldr.w	r3, [r5], #4
 800b25c:	4798      	blx	r3
 800b25e:	3601      	adds	r6, #1
 800b260:	e7ee      	b.n	800b240 <__libc_init_array+0xc>
 800b262:	f855 3b04 	ldr.w	r3, [r5], #4
 800b266:	4798      	blx	r3
 800b268:	3601      	adds	r6, #1
 800b26a:	e7f2      	b.n	800b252 <__libc_init_array+0x1e>
 800b26c:	0800e604 	.word	0x0800e604
 800b270:	0800e604 	.word	0x0800e604
 800b274:	0800e604 	.word	0x0800e604
 800b278:	0800e608 	.word	0x0800e608

0800b27c <malloc>:
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <malloc+0xc>)
 800b27e:	4601      	mov	r1, r0
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	f000 b885 	b.w	800b390 <_malloc_r>
 800b286:	bf00      	nop
 800b288:	200002e0 	.word	0x200002e0

0800b28c <memcpy>:
 800b28c:	440a      	add	r2, r1
 800b28e:	4291      	cmp	r1, r2
 800b290:	f100 33ff 	add.w	r3, r0, #4294967295
 800b294:	d100      	bne.n	800b298 <memcpy+0xc>
 800b296:	4770      	bx	lr
 800b298:	b510      	push	{r4, lr}
 800b29a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b29e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2a2:	4291      	cmp	r1, r2
 800b2a4:	d1f9      	bne.n	800b29a <memcpy+0xe>
 800b2a6:	bd10      	pop	{r4, pc}

0800b2a8 <memset>:
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d100      	bne.n	800b2b2 <memset+0xa>
 800b2b0:	4770      	bx	lr
 800b2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b6:	e7f9      	b.n	800b2ac <memset+0x4>

0800b2b8 <_free_r>:
 800b2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	d044      	beq.n	800b348 <_free_r+0x90>
 800b2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c2:	9001      	str	r0, [sp, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ca:	bfb8      	it	lt
 800b2cc:	18e4      	addlt	r4, r4, r3
 800b2ce:	f001 fbf5 	bl	800cabc <__malloc_lock>
 800b2d2:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <_free_r+0x94>)
 800b2d4:	9801      	ldr	r0, [sp, #4]
 800b2d6:	6813      	ldr	r3, [r2, #0]
 800b2d8:	b933      	cbnz	r3, 800b2e8 <_free_r+0x30>
 800b2da:	6063      	str	r3, [r4, #4]
 800b2dc:	6014      	str	r4, [r2, #0]
 800b2de:	b003      	add	sp, #12
 800b2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2e4:	f001 bbf0 	b.w	800cac8 <__malloc_unlock>
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	d908      	bls.n	800b2fe <_free_r+0x46>
 800b2ec:	6825      	ldr	r5, [r4, #0]
 800b2ee:	1961      	adds	r1, r4, r5
 800b2f0:	428b      	cmp	r3, r1
 800b2f2:	bf01      	itttt	eq
 800b2f4:	6819      	ldreq	r1, [r3, #0]
 800b2f6:	685b      	ldreq	r3, [r3, #4]
 800b2f8:	1949      	addeq	r1, r1, r5
 800b2fa:	6021      	streq	r1, [r4, #0]
 800b2fc:	e7ed      	b.n	800b2da <_free_r+0x22>
 800b2fe:	461a      	mov	r2, r3
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	b10b      	cbz	r3, 800b308 <_free_r+0x50>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d9fa      	bls.n	800b2fe <_free_r+0x46>
 800b308:	6811      	ldr	r1, [r2, #0]
 800b30a:	1855      	adds	r5, r2, r1
 800b30c:	42a5      	cmp	r5, r4
 800b30e:	d10b      	bne.n	800b328 <_free_r+0x70>
 800b310:	6824      	ldr	r4, [r4, #0]
 800b312:	4421      	add	r1, r4
 800b314:	1854      	adds	r4, r2, r1
 800b316:	42a3      	cmp	r3, r4
 800b318:	6011      	str	r1, [r2, #0]
 800b31a:	d1e0      	bne.n	800b2de <_free_r+0x26>
 800b31c:	681c      	ldr	r4, [r3, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	6053      	str	r3, [r2, #4]
 800b322:	4421      	add	r1, r4
 800b324:	6011      	str	r1, [r2, #0]
 800b326:	e7da      	b.n	800b2de <_free_r+0x26>
 800b328:	d902      	bls.n	800b330 <_free_r+0x78>
 800b32a:	230c      	movs	r3, #12
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	e7d6      	b.n	800b2de <_free_r+0x26>
 800b330:	6825      	ldr	r5, [r4, #0]
 800b332:	1961      	adds	r1, r4, r5
 800b334:	428b      	cmp	r3, r1
 800b336:	bf04      	itt	eq
 800b338:	6819      	ldreq	r1, [r3, #0]
 800b33a:	685b      	ldreq	r3, [r3, #4]
 800b33c:	6063      	str	r3, [r4, #4]
 800b33e:	bf04      	itt	eq
 800b340:	1949      	addeq	r1, r1, r5
 800b342:	6021      	streq	r1, [r4, #0]
 800b344:	6054      	str	r4, [r2, #4]
 800b346:	e7ca      	b.n	800b2de <_free_r+0x26>
 800b348:	b003      	add	sp, #12
 800b34a:	bd30      	pop	{r4, r5, pc}
 800b34c:	20001a70 	.word	0x20001a70

0800b350 <sbrk_aligned>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	4e0e      	ldr	r6, [pc, #56]	; (800b38c <sbrk_aligned+0x3c>)
 800b354:	460c      	mov	r4, r1
 800b356:	6831      	ldr	r1, [r6, #0]
 800b358:	4605      	mov	r5, r0
 800b35a:	b911      	cbnz	r1, 800b362 <sbrk_aligned+0x12>
 800b35c:	f000 fcf6 	bl	800bd4c <_sbrk_r>
 800b360:	6030      	str	r0, [r6, #0]
 800b362:	4621      	mov	r1, r4
 800b364:	4628      	mov	r0, r5
 800b366:	f000 fcf1 	bl	800bd4c <_sbrk_r>
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d00a      	beq.n	800b384 <sbrk_aligned+0x34>
 800b36e:	1cc4      	adds	r4, r0, #3
 800b370:	f024 0403 	bic.w	r4, r4, #3
 800b374:	42a0      	cmp	r0, r4
 800b376:	d007      	beq.n	800b388 <sbrk_aligned+0x38>
 800b378:	1a21      	subs	r1, r4, r0
 800b37a:	4628      	mov	r0, r5
 800b37c:	f000 fce6 	bl	800bd4c <_sbrk_r>
 800b380:	3001      	adds	r0, #1
 800b382:	d101      	bne.n	800b388 <sbrk_aligned+0x38>
 800b384:	f04f 34ff 	mov.w	r4, #4294967295
 800b388:	4620      	mov	r0, r4
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	20001a74 	.word	0x20001a74

0800b390 <_malloc_r>:
 800b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b394:	1ccd      	adds	r5, r1, #3
 800b396:	f025 0503 	bic.w	r5, r5, #3
 800b39a:	3508      	adds	r5, #8
 800b39c:	2d0c      	cmp	r5, #12
 800b39e:	bf38      	it	cc
 800b3a0:	250c      	movcc	r5, #12
 800b3a2:	2d00      	cmp	r5, #0
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	db01      	blt.n	800b3ac <_malloc_r+0x1c>
 800b3a8:	42a9      	cmp	r1, r5
 800b3aa:	d905      	bls.n	800b3b8 <_malloc_r+0x28>
 800b3ac:	230c      	movs	r3, #12
 800b3ae:	603b      	str	r3, [r7, #0]
 800b3b0:	2600      	movs	r6, #0
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b8:	4e2e      	ldr	r6, [pc, #184]	; (800b474 <_malloc_r+0xe4>)
 800b3ba:	f001 fb7f 	bl	800cabc <__malloc_lock>
 800b3be:	6833      	ldr	r3, [r6, #0]
 800b3c0:	461c      	mov	r4, r3
 800b3c2:	bb34      	cbnz	r4, 800b412 <_malloc_r+0x82>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	f7ff ffc2 	bl	800b350 <sbrk_aligned>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	d14d      	bne.n	800b46e <_malloc_r+0xde>
 800b3d2:	6834      	ldr	r4, [r6, #0]
 800b3d4:	4626      	mov	r6, r4
 800b3d6:	2e00      	cmp	r6, #0
 800b3d8:	d140      	bne.n	800b45c <_malloc_r+0xcc>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4638      	mov	r0, r7
 800b3e0:	eb04 0803 	add.w	r8, r4, r3
 800b3e4:	f000 fcb2 	bl	800bd4c <_sbrk_r>
 800b3e8:	4580      	cmp	r8, r0
 800b3ea:	d13a      	bne.n	800b462 <_malloc_r+0xd2>
 800b3ec:	6821      	ldr	r1, [r4, #0]
 800b3ee:	3503      	adds	r5, #3
 800b3f0:	1a6d      	subs	r5, r5, r1
 800b3f2:	f025 0503 	bic.w	r5, r5, #3
 800b3f6:	3508      	adds	r5, #8
 800b3f8:	2d0c      	cmp	r5, #12
 800b3fa:	bf38      	it	cc
 800b3fc:	250c      	movcc	r5, #12
 800b3fe:	4629      	mov	r1, r5
 800b400:	4638      	mov	r0, r7
 800b402:	f7ff ffa5 	bl	800b350 <sbrk_aligned>
 800b406:	3001      	adds	r0, #1
 800b408:	d02b      	beq.n	800b462 <_malloc_r+0xd2>
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	442b      	add	r3, r5
 800b40e:	6023      	str	r3, [r4, #0]
 800b410:	e00e      	b.n	800b430 <_malloc_r+0xa0>
 800b412:	6822      	ldr	r2, [r4, #0]
 800b414:	1b52      	subs	r2, r2, r5
 800b416:	d41e      	bmi.n	800b456 <_malloc_r+0xc6>
 800b418:	2a0b      	cmp	r2, #11
 800b41a:	d916      	bls.n	800b44a <_malloc_r+0xba>
 800b41c:	1961      	adds	r1, r4, r5
 800b41e:	42a3      	cmp	r3, r4
 800b420:	6025      	str	r5, [r4, #0]
 800b422:	bf18      	it	ne
 800b424:	6059      	strne	r1, [r3, #4]
 800b426:	6863      	ldr	r3, [r4, #4]
 800b428:	bf08      	it	eq
 800b42a:	6031      	streq	r1, [r6, #0]
 800b42c:	5162      	str	r2, [r4, r5]
 800b42e:	604b      	str	r3, [r1, #4]
 800b430:	4638      	mov	r0, r7
 800b432:	f104 060b 	add.w	r6, r4, #11
 800b436:	f001 fb47 	bl	800cac8 <__malloc_unlock>
 800b43a:	f026 0607 	bic.w	r6, r6, #7
 800b43e:	1d23      	adds	r3, r4, #4
 800b440:	1af2      	subs	r2, r6, r3
 800b442:	d0b6      	beq.n	800b3b2 <_malloc_r+0x22>
 800b444:	1b9b      	subs	r3, r3, r6
 800b446:	50a3      	str	r3, [r4, r2]
 800b448:	e7b3      	b.n	800b3b2 <_malloc_r+0x22>
 800b44a:	6862      	ldr	r2, [r4, #4]
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	bf0c      	ite	eq
 800b450:	6032      	streq	r2, [r6, #0]
 800b452:	605a      	strne	r2, [r3, #4]
 800b454:	e7ec      	b.n	800b430 <_malloc_r+0xa0>
 800b456:	4623      	mov	r3, r4
 800b458:	6864      	ldr	r4, [r4, #4]
 800b45a:	e7b2      	b.n	800b3c2 <_malloc_r+0x32>
 800b45c:	4634      	mov	r4, r6
 800b45e:	6876      	ldr	r6, [r6, #4]
 800b460:	e7b9      	b.n	800b3d6 <_malloc_r+0x46>
 800b462:	230c      	movs	r3, #12
 800b464:	603b      	str	r3, [r7, #0]
 800b466:	4638      	mov	r0, r7
 800b468:	f001 fb2e 	bl	800cac8 <__malloc_unlock>
 800b46c:	e7a1      	b.n	800b3b2 <_malloc_r+0x22>
 800b46e:	6025      	str	r5, [r4, #0]
 800b470:	e7de      	b.n	800b430 <_malloc_r+0xa0>
 800b472:	bf00      	nop
 800b474:	20001a70 	.word	0x20001a70

0800b478 <__cvt>:
 800b478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	ec55 4b10 	vmov	r4, r5, d0
 800b480:	2d00      	cmp	r5, #0
 800b482:	460e      	mov	r6, r1
 800b484:	4619      	mov	r1, r3
 800b486:	462b      	mov	r3, r5
 800b488:	bfbb      	ittet	lt
 800b48a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b48e:	461d      	movlt	r5, r3
 800b490:	2300      	movge	r3, #0
 800b492:	232d      	movlt	r3, #45	; 0x2d
 800b494:	700b      	strb	r3, [r1, #0]
 800b496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b498:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b49c:	4691      	mov	r9, r2
 800b49e:	f023 0820 	bic.w	r8, r3, #32
 800b4a2:	bfbc      	itt	lt
 800b4a4:	4622      	movlt	r2, r4
 800b4a6:	4614      	movlt	r4, r2
 800b4a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4ac:	d005      	beq.n	800b4ba <__cvt+0x42>
 800b4ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4b2:	d100      	bne.n	800b4b6 <__cvt+0x3e>
 800b4b4:	3601      	adds	r6, #1
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	e000      	b.n	800b4bc <__cvt+0x44>
 800b4ba:	2103      	movs	r1, #3
 800b4bc:	ab03      	add	r3, sp, #12
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	ab02      	add	r3, sp, #8
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	ec45 4b10 	vmov	d0, r4, r5
 800b4c8:	4653      	mov	r3, sl
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	f000 fd04 	bl	800bed8 <_dtoa_r>
 800b4d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	d102      	bne.n	800b4de <__cvt+0x66>
 800b4d8:	f019 0f01 	tst.w	r9, #1
 800b4dc:	d022      	beq.n	800b524 <__cvt+0xac>
 800b4de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4e2:	eb07 0906 	add.w	r9, r7, r6
 800b4e6:	d110      	bne.n	800b50a <__cvt+0x92>
 800b4e8:	783b      	ldrb	r3, [r7, #0]
 800b4ea:	2b30      	cmp	r3, #48	; 0x30
 800b4ec:	d10a      	bne.n	800b504 <__cvt+0x8c>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7f5 fb17 	bl	8000b28 <__aeabi_dcmpeq>
 800b4fa:	b918      	cbnz	r0, 800b504 <__cvt+0x8c>
 800b4fc:	f1c6 0601 	rsb	r6, r6, #1
 800b500:	f8ca 6000 	str.w	r6, [sl]
 800b504:	f8da 3000 	ldr.w	r3, [sl]
 800b508:	4499      	add	r9, r3
 800b50a:	2200      	movs	r2, #0
 800b50c:	2300      	movs	r3, #0
 800b50e:	4620      	mov	r0, r4
 800b510:	4629      	mov	r1, r5
 800b512:	f7f5 fb09 	bl	8000b28 <__aeabi_dcmpeq>
 800b516:	b108      	cbz	r0, 800b51c <__cvt+0xa4>
 800b518:	f8cd 900c 	str.w	r9, [sp, #12]
 800b51c:	2230      	movs	r2, #48	; 0x30
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	454b      	cmp	r3, r9
 800b522:	d307      	bcc.n	800b534 <__cvt+0xbc>
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b528:	1bdb      	subs	r3, r3, r7
 800b52a:	4638      	mov	r0, r7
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	b004      	add	sp, #16
 800b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b534:	1c59      	adds	r1, r3, #1
 800b536:	9103      	str	r1, [sp, #12]
 800b538:	701a      	strb	r2, [r3, #0]
 800b53a:	e7f0      	b.n	800b51e <__cvt+0xa6>

0800b53c <__exponent>:
 800b53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b53e:	4603      	mov	r3, r0
 800b540:	2900      	cmp	r1, #0
 800b542:	bfb8      	it	lt
 800b544:	4249      	neglt	r1, r1
 800b546:	f803 2b02 	strb.w	r2, [r3], #2
 800b54a:	bfb4      	ite	lt
 800b54c:	222d      	movlt	r2, #45	; 0x2d
 800b54e:	222b      	movge	r2, #43	; 0x2b
 800b550:	2909      	cmp	r1, #9
 800b552:	7042      	strb	r2, [r0, #1]
 800b554:	dd2a      	ble.n	800b5ac <__exponent+0x70>
 800b556:	f10d 0407 	add.w	r4, sp, #7
 800b55a:	46a4      	mov	ip, r4
 800b55c:	270a      	movs	r7, #10
 800b55e:	46a6      	mov	lr, r4
 800b560:	460a      	mov	r2, r1
 800b562:	fb91 f6f7 	sdiv	r6, r1, r7
 800b566:	fb07 1516 	mls	r5, r7, r6, r1
 800b56a:	3530      	adds	r5, #48	; 0x30
 800b56c:	2a63      	cmp	r2, #99	; 0x63
 800b56e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b572:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b576:	4631      	mov	r1, r6
 800b578:	dcf1      	bgt.n	800b55e <__exponent+0x22>
 800b57a:	3130      	adds	r1, #48	; 0x30
 800b57c:	f1ae 0502 	sub.w	r5, lr, #2
 800b580:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b584:	1c44      	adds	r4, r0, #1
 800b586:	4629      	mov	r1, r5
 800b588:	4561      	cmp	r1, ip
 800b58a:	d30a      	bcc.n	800b5a2 <__exponent+0x66>
 800b58c:	f10d 0209 	add.w	r2, sp, #9
 800b590:	eba2 020e 	sub.w	r2, r2, lr
 800b594:	4565      	cmp	r5, ip
 800b596:	bf88      	it	hi
 800b598:	2200      	movhi	r2, #0
 800b59a:	4413      	add	r3, r2
 800b59c:	1a18      	subs	r0, r3, r0
 800b59e:	b003      	add	sp, #12
 800b5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5aa:	e7ed      	b.n	800b588 <__exponent+0x4c>
 800b5ac:	2330      	movs	r3, #48	; 0x30
 800b5ae:	3130      	adds	r1, #48	; 0x30
 800b5b0:	7083      	strb	r3, [r0, #2]
 800b5b2:	70c1      	strb	r1, [r0, #3]
 800b5b4:	1d03      	adds	r3, r0, #4
 800b5b6:	e7f1      	b.n	800b59c <__exponent+0x60>

0800b5b8 <_printf_float>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	ed2d 8b02 	vpush	{d8}
 800b5c0:	b08d      	sub	sp, #52	; 0x34
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	f001 fa71 	bl	800cab4 <_localeconv_r>
 800b5d2:	f8d0 a000 	ldr.w	sl, [r0]
 800b5d6:	4650      	mov	r0, sl
 800b5d8:	f7f4 fe24 	bl	8000224 <strlen>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	930a      	str	r3, [sp, #40]	; 0x28
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b5ec:	3307      	adds	r3, #7
 800b5ee:	f023 0307 	bic.w	r3, r3, #7
 800b5f2:	f103 0208 	add.w	r2, r3, #8
 800b5f6:	f8c8 2000 	str.w	r2, [r8]
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b602:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b60a:	9307      	str	r3, [sp, #28]
 800b60c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b610:	ee08 0a10 	vmov	s16, r0
 800b614:	4b9f      	ldr	r3, [pc, #636]	; (800b894 <_printf_float+0x2dc>)
 800b616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295
 800b61e:	f7f5 fab5 	bl	8000b8c <__aeabi_dcmpun>
 800b622:	bb88      	cbnz	r0, 800b688 <_printf_float+0xd0>
 800b624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b628:	4b9a      	ldr	r3, [pc, #616]	; (800b894 <_printf_float+0x2dc>)
 800b62a:	f04f 32ff 	mov.w	r2, #4294967295
 800b62e:	f7f5 fa8f 	bl	8000b50 <__aeabi_dcmple>
 800b632:	bb48      	cbnz	r0, 800b688 <_printf_float+0xd0>
 800b634:	2200      	movs	r2, #0
 800b636:	2300      	movs	r3, #0
 800b638:	4640      	mov	r0, r8
 800b63a:	4649      	mov	r1, r9
 800b63c:	f7f5 fa7e 	bl	8000b3c <__aeabi_dcmplt>
 800b640:	b110      	cbz	r0, 800b648 <_printf_float+0x90>
 800b642:	232d      	movs	r3, #45	; 0x2d
 800b644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b648:	4b93      	ldr	r3, [pc, #588]	; (800b898 <_printf_float+0x2e0>)
 800b64a:	4894      	ldr	r0, [pc, #592]	; (800b89c <_printf_float+0x2e4>)
 800b64c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b650:	bf94      	ite	ls
 800b652:	4698      	movls	r8, r3
 800b654:	4680      	movhi	r8, r0
 800b656:	2303      	movs	r3, #3
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	9b05      	ldr	r3, [sp, #20]
 800b65c:	f023 0204 	bic.w	r2, r3, #4
 800b660:	6022      	str	r2, [r4, #0]
 800b662:	f04f 0900 	mov.w	r9, #0
 800b666:	9700      	str	r7, [sp, #0]
 800b668:	4633      	mov	r3, r6
 800b66a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b66c:	4621      	mov	r1, r4
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 f9d8 	bl	800ba24 <_printf_common>
 800b674:	3001      	adds	r0, #1
 800b676:	f040 8090 	bne.w	800b79a <_printf_float+0x1e2>
 800b67a:	f04f 30ff 	mov.w	r0, #4294967295
 800b67e:	b00d      	add	sp, #52	; 0x34
 800b680:	ecbd 8b02 	vpop	{d8}
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	4640      	mov	r0, r8
 800b68e:	4649      	mov	r1, r9
 800b690:	f7f5 fa7c 	bl	8000b8c <__aeabi_dcmpun>
 800b694:	b140      	cbz	r0, 800b6a8 <_printf_float+0xf0>
 800b696:	464b      	mov	r3, r9
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bfbc      	itt	lt
 800b69c:	232d      	movlt	r3, #45	; 0x2d
 800b69e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6a2:	487f      	ldr	r0, [pc, #508]	; (800b8a0 <_printf_float+0x2e8>)
 800b6a4:	4b7f      	ldr	r3, [pc, #508]	; (800b8a4 <_printf_float+0x2ec>)
 800b6a6:	e7d1      	b.n	800b64c <_printf_float+0x94>
 800b6a8:	6863      	ldr	r3, [r4, #4]
 800b6aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b6ae:	9206      	str	r2, [sp, #24]
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	d13f      	bne.n	800b734 <_printf_float+0x17c>
 800b6b4:	2306      	movs	r3, #6
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	6861      	ldr	r1, [r4, #4]
 800b6bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9303      	str	r3, [sp, #12]
 800b6c4:	ab0a      	add	r3, sp, #40	; 0x28
 800b6c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b6ca:	ab09      	add	r3, sp, #36	; 0x24
 800b6cc:	ec49 8b10 	vmov	d0, r8, r9
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	6022      	str	r2, [r4, #0]
 800b6d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f7ff fecd 	bl	800b478 <__cvt>
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6e2:	2b47      	cmp	r3, #71	; 0x47
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	d108      	bne.n	800b6fa <_printf_float+0x142>
 800b6e8:	1cc8      	adds	r0, r1, #3
 800b6ea:	db02      	blt.n	800b6f2 <_printf_float+0x13a>
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	4299      	cmp	r1, r3
 800b6f0:	dd41      	ble.n	800b776 <_printf_float+0x1be>
 800b6f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b6f6:	fa5f fb8b 	uxtb.w	fp, fp
 800b6fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6fe:	d820      	bhi.n	800b742 <_printf_float+0x18a>
 800b700:	3901      	subs	r1, #1
 800b702:	465a      	mov	r2, fp
 800b704:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b708:	9109      	str	r1, [sp, #36]	; 0x24
 800b70a:	f7ff ff17 	bl	800b53c <__exponent>
 800b70e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b710:	1813      	adds	r3, r2, r0
 800b712:	2a01      	cmp	r2, #1
 800b714:	4681      	mov	r9, r0
 800b716:	6123      	str	r3, [r4, #16]
 800b718:	dc02      	bgt.n	800b720 <_printf_float+0x168>
 800b71a:	6822      	ldr	r2, [r4, #0]
 800b71c:	07d2      	lsls	r2, r2, #31
 800b71e:	d501      	bpl.n	800b724 <_printf_float+0x16c>
 800b720:	3301      	adds	r3, #1
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d09c      	beq.n	800b666 <_printf_float+0xae>
 800b72c:	232d      	movs	r3, #45	; 0x2d
 800b72e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b732:	e798      	b.n	800b666 <_printf_float+0xae>
 800b734:	9a06      	ldr	r2, [sp, #24]
 800b736:	2a47      	cmp	r2, #71	; 0x47
 800b738:	d1be      	bne.n	800b6b8 <_printf_float+0x100>
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1bc      	bne.n	800b6b8 <_printf_float+0x100>
 800b73e:	2301      	movs	r3, #1
 800b740:	e7b9      	b.n	800b6b6 <_printf_float+0xfe>
 800b742:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b746:	d118      	bne.n	800b77a <_printf_float+0x1c2>
 800b748:	2900      	cmp	r1, #0
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	dd0b      	ble.n	800b766 <_printf_float+0x1ae>
 800b74e:	6121      	str	r1, [r4, #16]
 800b750:	b913      	cbnz	r3, 800b758 <_printf_float+0x1a0>
 800b752:	6822      	ldr	r2, [r4, #0]
 800b754:	07d0      	lsls	r0, r2, #31
 800b756:	d502      	bpl.n	800b75e <_printf_float+0x1a6>
 800b758:	3301      	adds	r3, #1
 800b75a:	440b      	add	r3, r1
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b760:	f04f 0900 	mov.w	r9, #0
 800b764:	e7de      	b.n	800b724 <_printf_float+0x16c>
 800b766:	b913      	cbnz	r3, 800b76e <_printf_float+0x1b6>
 800b768:	6822      	ldr	r2, [r4, #0]
 800b76a:	07d2      	lsls	r2, r2, #31
 800b76c:	d501      	bpl.n	800b772 <_printf_float+0x1ba>
 800b76e:	3302      	adds	r3, #2
 800b770:	e7f4      	b.n	800b75c <_printf_float+0x1a4>
 800b772:	2301      	movs	r3, #1
 800b774:	e7f2      	b.n	800b75c <_printf_float+0x1a4>
 800b776:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b77a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b77c:	4299      	cmp	r1, r3
 800b77e:	db05      	blt.n	800b78c <_printf_float+0x1d4>
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	6121      	str	r1, [r4, #16]
 800b784:	07d8      	lsls	r0, r3, #31
 800b786:	d5ea      	bpl.n	800b75e <_printf_float+0x1a6>
 800b788:	1c4b      	adds	r3, r1, #1
 800b78a:	e7e7      	b.n	800b75c <_printf_float+0x1a4>
 800b78c:	2900      	cmp	r1, #0
 800b78e:	bfd4      	ite	le
 800b790:	f1c1 0202 	rsble	r2, r1, #2
 800b794:	2201      	movgt	r2, #1
 800b796:	4413      	add	r3, r2
 800b798:	e7e0      	b.n	800b75c <_printf_float+0x1a4>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	055a      	lsls	r2, r3, #21
 800b79e:	d407      	bmi.n	800b7b0 <_printf_float+0x1f8>
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	4642      	mov	r2, r8
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	47b8      	blx	r7
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	d12c      	bne.n	800b808 <_printf_float+0x250>
 800b7ae:	e764      	b.n	800b67a <_printf_float+0xc2>
 800b7b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7b4:	f240 80e0 	bls.w	800b978 <_printf_float+0x3c0>
 800b7b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f7f5 f9b2 	bl	8000b28 <__aeabi_dcmpeq>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d034      	beq.n	800b832 <_printf_float+0x27a>
 800b7c8:	4a37      	ldr	r2, [pc, #220]	; (800b8a8 <_printf_float+0x2f0>)
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b8      	blx	r7
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	f43f af51 	beq.w	800b67a <_printf_float+0xc2>
 800b7d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	db02      	blt.n	800b7e6 <_printf_float+0x22e>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	07d8      	lsls	r0, r3, #31
 800b7e4:	d510      	bpl.n	800b808 <_printf_float+0x250>
 800b7e6:	ee18 3a10 	vmov	r3, s16
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b8      	blx	r7
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f af41 	beq.w	800b67a <_printf_float+0xc2>
 800b7f8:	f04f 0800 	mov.w	r8, #0
 800b7fc:	f104 091a 	add.w	r9, r4, #26
 800b800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b802:	3b01      	subs	r3, #1
 800b804:	4543      	cmp	r3, r8
 800b806:	dc09      	bgt.n	800b81c <_printf_float+0x264>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	079b      	lsls	r3, r3, #30
 800b80c:	f100 8105 	bmi.w	800ba1a <_printf_float+0x462>
 800b810:	68e0      	ldr	r0, [r4, #12]
 800b812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b814:	4298      	cmp	r0, r3
 800b816:	bfb8      	it	lt
 800b818:	4618      	movlt	r0, r3
 800b81a:	e730      	b.n	800b67e <_printf_float+0xc6>
 800b81c:	2301      	movs	r3, #1
 800b81e:	464a      	mov	r2, r9
 800b820:	4631      	mov	r1, r6
 800b822:	4628      	mov	r0, r5
 800b824:	47b8      	blx	r7
 800b826:	3001      	adds	r0, #1
 800b828:	f43f af27 	beq.w	800b67a <_printf_float+0xc2>
 800b82c:	f108 0801 	add.w	r8, r8, #1
 800b830:	e7e6      	b.n	800b800 <_printf_float+0x248>
 800b832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b834:	2b00      	cmp	r3, #0
 800b836:	dc39      	bgt.n	800b8ac <_printf_float+0x2f4>
 800b838:	4a1b      	ldr	r2, [pc, #108]	; (800b8a8 <_printf_float+0x2f0>)
 800b83a:	2301      	movs	r3, #1
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f af19 	beq.w	800b67a <_printf_float+0xc2>
 800b848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d102      	bne.n	800b856 <_printf_float+0x29e>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	07d9      	lsls	r1, r3, #31
 800b854:	d5d8      	bpl.n	800b808 <_printf_float+0x250>
 800b856:	ee18 3a10 	vmov	r3, s16
 800b85a:	4652      	mov	r2, sl
 800b85c:	4631      	mov	r1, r6
 800b85e:	4628      	mov	r0, r5
 800b860:	47b8      	blx	r7
 800b862:	3001      	adds	r0, #1
 800b864:	f43f af09 	beq.w	800b67a <_printf_float+0xc2>
 800b868:	f04f 0900 	mov.w	r9, #0
 800b86c:	f104 0a1a 	add.w	sl, r4, #26
 800b870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b872:	425b      	negs	r3, r3
 800b874:	454b      	cmp	r3, r9
 800b876:	dc01      	bgt.n	800b87c <_printf_float+0x2c4>
 800b878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b87a:	e792      	b.n	800b7a2 <_printf_float+0x1ea>
 800b87c:	2301      	movs	r3, #1
 800b87e:	4652      	mov	r2, sl
 800b880:	4631      	mov	r1, r6
 800b882:	4628      	mov	r0, r5
 800b884:	47b8      	blx	r7
 800b886:	3001      	adds	r0, #1
 800b888:	f43f aef7 	beq.w	800b67a <_printf_float+0xc2>
 800b88c:	f109 0901 	add.w	r9, r9, #1
 800b890:	e7ee      	b.n	800b870 <_printf_float+0x2b8>
 800b892:	bf00      	nop
 800b894:	7fefffff 	.word	0x7fefffff
 800b898:	0800e228 	.word	0x0800e228
 800b89c:	0800e22c 	.word	0x0800e22c
 800b8a0:	0800e234 	.word	0x0800e234
 800b8a4:	0800e230 	.word	0x0800e230
 800b8a8:	0800e238 	.word	0x0800e238
 800b8ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	bfa8      	it	ge
 800b8b4:	461a      	movge	r2, r3
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	4691      	mov	r9, r2
 800b8ba:	dc37      	bgt.n	800b92c <_printf_float+0x374>
 800b8bc:	f04f 0b00 	mov.w	fp, #0
 800b8c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8c4:	f104 021a 	add.w	r2, r4, #26
 800b8c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8ca:	9305      	str	r3, [sp, #20]
 800b8cc:	eba3 0309 	sub.w	r3, r3, r9
 800b8d0:	455b      	cmp	r3, fp
 800b8d2:	dc33      	bgt.n	800b93c <_printf_float+0x384>
 800b8d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	db3b      	blt.n	800b954 <_printf_float+0x39c>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	07da      	lsls	r2, r3, #31
 800b8e0:	d438      	bmi.n	800b954 <_printf_float+0x39c>
 800b8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e4:	9a05      	ldr	r2, [sp, #20]
 800b8e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8e8:	1a9a      	subs	r2, r3, r2
 800b8ea:	eba3 0901 	sub.w	r9, r3, r1
 800b8ee:	4591      	cmp	r9, r2
 800b8f0:	bfa8      	it	ge
 800b8f2:	4691      	movge	r9, r2
 800b8f4:	f1b9 0f00 	cmp.w	r9, #0
 800b8f8:	dc35      	bgt.n	800b966 <_printf_float+0x3ae>
 800b8fa:	f04f 0800 	mov.w	r8, #0
 800b8fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b902:	f104 0a1a 	add.w	sl, r4, #26
 800b906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b90a:	1a9b      	subs	r3, r3, r2
 800b90c:	eba3 0309 	sub.w	r3, r3, r9
 800b910:	4543      	cmp	r3, r8
 800b912:	f77f af79 	ble.w	800b808 <_printf_float+0x250>
 800b916:	2301      	movs	r3, #1
 800b918:	4652      	mov	r2, sl
 800b91a:	4631      	mov	r1, r6
 800b91c:	4628      	mov	r0, r5
 800b91e:	47b8      	blx	r7
 800b920:	3001      	adds	r0, #1
 800b922:	f43f aeaa 	beq.w	800b67a <_printf_float+0xc2>
 800b926:	f108 0801 	add.w	r8, r8, #1
 800b92a:	e7ec      	b.n	800b906 <_printf_float+0x34e>
 800b92c:	4613      	mov	r3, r2
 800b92e:	4631      	mov	r1, r6
 800b930:	4642      	mov	r2, r8
 800b932:	4628      	mov	r0, r5
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	d1c0      	bne.n	800b8bc <_printf_float+0x304>
 800b93a:	e69e      	b.n	800b67a <_printf_float+0xc2>
 800b93c:	2301      	movs	r3, #1
 800b93e:	4631      	mov	r1, r6
 800b940:	4628      	mov	r0, r5
 800b942:	9205      	str	r2, [sp, #20]
 800b944:	47b8      	blx	r7
 800b946:	3001      	adds	r0, #1
 800b948:	f43f ae97 	beq.w	800b67a <_printf_float+0xc2>
 800b94c:	9a05      	ldr	r2, [sp, #20]
 800b94e:	f10b 0b01 	add.w	fp, fp, #1
 800b952:	e7b9      	b.n	800b8c8 <_printf_float+0x310>
 800b954:	ee18 3a10 	vmov	r3, s16
 800b958:	4652      	mov	r2, sl
 800b95a:	4631      	mov	r1, r6
 800b95c:	4628      	mov	r0, r5
 800b95e:	47b8      	blx	r7
 800b960:	3001      	adds	r0, #1
 800b962:	d1be      	bne.n	800b8e2 <_printf_float+0x32a>
 800b964:	e689      	b.n	800b67a <_printf_float+0xc2>
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	464b      	mov	r3, r9
 800b96a:	4442      	add	r2, r8
 800b96c:	4631      	mov	r1, r6
 800b96e:	4628      	mov	r0, r5
 800b970:	47b8      	blx	r7
 800b972:	3001      	adds	r0, #1
 800b974:	d1c1      	bne.n	800b8fa <_printf_float+0x342>
 800b976:	e680      	b.n	800b67a <_printf_float+0xc2>
 800b978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b97a:	2a01      	cmp	r2, #1
 800b97c:	dc01      	bgt.n	800b982 <_printf_float+0x3ca>
 800b97e:	07db      	lsls	r3, r3, #31
 800b980:	d538      	bpl.n	800b9f4 <_printf_float+0x43c>
 800b982:	2301      	movs	r3, #1
 800b984:	4642      	mov	r2, r8
 800b986:	4631      	mov	r1, r6
 800b988:	4628      	mov	r0, r5
 800b98a:	47b8      	blx	r7
 800b98c:	3001      	adds	r0, #1
 800b98e:	f43f ae74 	beq.w	800b67a <_printf_float+0xc2>
 800b992:	ee18 3a10 	vmov	r3, s16
 800b996:	4652      	mov	r2, sl
 800b998:	4631      	mov	r1, r6
 800b99a:	4628      	mov	r0, r5
 800b99c:	47b8      	blx	r7
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f ae6b 	beq.w	800b67a <_printf_float+0xc2>
 800b9a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f7f5 f8bc 	bl	8000b28 <__aeabi_dcmpeq>
 800b9b0:	b9d8      	cbnz	r0, 800b9ea <_printf_float+0x432>
 800b9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b4:	f108 0201 	add.w	r2, r8, #1
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4628      	mov	r0, r5
 800b9be:	47b8      	blx	r7
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	d10e      	bne.n	800b9e2 <_printf_float+0x42a>
 800b9c4:	e659      	b.n	800b67a <_printf_float+0xc2>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	4652      	mov	r2, sl
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	47b8      	blx	r7
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	f43f ae52 	beq.w	800b67a <_printf_float+0xc2>
 800b9d6:	f108 0801 	add.w	r8, r8, #1
 800b9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	4543      	cmp	r3, r8
 800b9e0:	dcf1      	bgt.n	800b9c6 <_printf_float+0x40e>
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9e8:	e6dc      	b.n	800b7a4 <_printf_float+0x1ec>
 800b9ea:	f04f 0800 	mov.w	r8, #0
 800b9ee:	f104 0a1a 	add.w	sl, r4, #26
 800b9f2:	e7f2      	b.n	800b9da <_printf_float+0x422>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	e7df      	b.n	800b9ba <_printf_float+0x402>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	464a      	mov	r2, r9
 800b9fe:	4631      	mov	r1, r6
 800ba00:	4628      	mov	r0, r5
 800ba02:	47b8      	blx	r7
 800ba04:	3001      	adds	r0, #1
 800ba06:	f43f ae38 	beq.w	800b67a <_printf_float+0xc2>
 800ba0a:	f108 0801 	add.w	r8, r8, #1
 800ba0e:	68e3      	ldr	r3, [r4, #12]
 800ba10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba12:	1a5b      	subs	r3, r3, r1
 800ba14:	4543      	cmp	r3, r8
 800ba16:	dcf0      	bgt.n	800b9fa <_printf_float+0x442>
 800ba18:	e6fa      	b.n	800b810 <_printf_float+0x258>
 800ba1a:	f04f 0800 	mov.w	r8, #0
 800ba1e:	f104 0919 	add.w	r9, r4, #25
 800ba22:	e7f4      	b.n	800ba0e <_printf_float+0x456>

0800ba24 <_printf_common>:
 800ba24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba28:	4616      	mov	r6, r2
 800ba2a:	4699      	mov	r9, r3
 800ba2c:	688a      	ldr	r2, [r1, #8]
 800ba2e:	690b      	ldr	r3, [r1, #16]
 800ba30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	bfb8      	it	lt
 800ba38:	4613      	movlt	r3, r2
 800ba3a:	6033      	str	r3, [r6, #0]
 800ba3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba40:	4607      	mov	r7, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	b10a      	cbz	r2, 800ba4a <_printf_common+0x26>
 800ba46:	3301      	adds	r3, #1
 800ba48:	6033      	str	r3, [r6, #0]
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	0699      	lsls	r1, r3, #26
 800ba4e:	bf42      	ittt	mi
 800ba50:	6833      	ldrmi	r3, [r6, #0]
 800ba52:	3302      	addmi	r3, #2
 800ba54:	6033      	strmi	r3, [r6, #0]
 800ba56:	6825      	ldr	r5, [r4, #0]
 800ba58:	f015 0506 	ands.w	r5, r5, #6
 800ba5c:	d106      	bne.n	800ba6c <_printf_common+0x48>
 800ba5e:	f104 0a19 	add.w	sl, r4, #25
 800ba62:	68e3      	ldr	r3, [r4, #12]
 800ba64:	6832      	ldr	r2, [r6, #0]
 800ba66:	1a9b      	subs	r3, r3, r2
 800ba68:	42ab      	cmp	r3, r5
 800ba6a:	dc26      	bgt.n	800baba <_printf_common+0x96>
 800ba6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba70:	1e13      	subs	r3, r2, #0
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	bf18      	it	ne
 800ba76:	2301      	movne	r3, #1
 800ba78:	0692      	lsls	r2, r2, #26
 800ba7a:	d42b      	bmi.n	800bad4 <_printf_common+0xb0>
 800ba7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba80:	4649      	mov	r1, r9
 800ba82:	4638      	mov	r0, r7
 800ba84:	47c0      	blx	r8
 800ba86:	3001      	adds	r0, #1
 800ba88:	d01e      	beq.n	800bac8 <_printf_common+0xa4>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	68e5      	ldr	r5, [r4, #12]
 800ba8e:	6832      	ldr	r2, [r6, #0]
 800ba90:	f003 0306 	and.w	r3, r3, #6
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	bf08      	it	eq
 800ba98:	1aad      	subeq	r5, r5, r2
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	6922      	ldr	r2, [r4, #16]
 800ba9e:	bf0c      	ite	eq
 800baa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baa4:	2500      	movne	r5, #0
 800baa6:	4293      	cmp	r3, r2
 800baa8:	bfc4      	itt	gt
 800baaa:	1a9b      	subgt	r3, r3, r2
 800baac:	18ed      	addgt	r5, r5, r3
 800baae:	2600      	movs	r6, #0
 800bab0:	341a      	adds	r4, #26
 800bab2:	42b5      	cmp	r5, r6
 800bab4:	d11a      	bne.n	800baec <_printf_common+0xc8>
 800bab6:	2000      	movs	r0, #0
 800bab8:	e008      	b.n	800bacc <_printf_common+0xa8>
 800baba:	2301      	movs	r3, #1
 800babc:	4652      	mov	r2, sl
 800babe:	4649      	mov	r1, r9
 800bac0:	4638      	mov	r0, r7
 800bac2:	47c0      	blx	r8
 800bac4:	3001      	adds	r0, #1
 800bac6:	d103      	bne.n	800bad0 <_printf_common+0xac>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad0:	3501      	adds	r5, #1
 800bad2:	e7c6      	b.n	800ba62 <_printf_common+0x3e>
 800bad4:	18e1      	adds	r1, r4, r3
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	2030      	movs	r0, #48	; 0x30
 800bada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bade:	4422      	add	r2, r4
 800bae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bae8:	3302      	adds	r3, #2
 800baea:	e7c7      	b.n	800ba7c <_printf_common+0x58>
 800baec:	2301      	movs	r3, #1
 800baee:	4622      	mov	r2, r4
 800baf0:	4649      	mov	r1, r9
 800baf2:	4638      	mov	r0, r7
 800baf4:	47c0      	blx	r8
 800baf6:	3001      	adds	r0, #1
 800baf8:	d0e6      	beq.n	800bac8 <_printf_common+0xa4>
 800bafa:	3601      	adds	r6, #1
 800bafc:	e7d9      	b.n	800bab2 <_printf_common+0x8e>
	...

0800bb00 <_printf_i>:
 800bb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb04:	7e0f      	ldrb	r7, [r1, #24]
 800bb06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb08:	2f78      	cmp	r7, #120	; 0x78
 800bb0a:	4691      	mov	r9, r2
 800bb0c:	4680      	mov	r8, r0
 800bb0e:	460c      	mov	r4, r1
 800bb10:	469a      	mov	sl, r3
 800bb12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb16:	d807      	bhi.n	800bb28 <_printf_i+0x28>
 800bb18:	2f62      	cmp	r7, #98	; 0x62
 800bb1a:	d80a      	bhi.n	800bb32 <_printf_i+0x32>
 800bb1c:	2f00      	cmp	r7, #0
 800bb1e:	f000 80d8 	beq.w	800bcd2 <_printf_i+0x1d2>
 800bb22:	2f58      	cmp	r7, #88	; 0x58
 800bb24:	f000 80a3 	beq.w	800bc6e <_printf_i+0x16e>
 800bb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb30:	e03a      	b.n	800bba8 <_printf_i+0xa8>
 800bb32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb36:	2b15      	cmp	r3, #21
 800bb38:	d8f6      	bhi.n	800bb28 <_printf_i+0x28>
 800bb3a:	a101      	add	r1, pc, #4	; (adr r1, 800bb40 <_printf_i+0x40>)
 800bb3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb40:	0800bb99 	.word	0x0800bb99
 800bb44:	0800bbad 	.word	0x0800bbad
 800bb48:	0800bb29 	.word	0x0800bb29
 800bb4c:	0800bb29 	.word	0x0800bb29
 800bb50:	0800bb29 	.word	0x0800bb29
 800bb54:	0800bb29 	.word	0x0800bb29
 800bb58:	0800bbad 	.word	0x0800bbad
 800bb5c:	0800bb29 	.word	0x0800bb29
 800bb60:	0800bb29 	.word	0x0800bb29
 800bb64:	0800bb29 	.word	0x0800bb29
 800bb68:	0800bb29 	.word	0x0800bb29
 800bb6c:	0800bcb9 	.word	0x0800bcb9
 800bb70:	0800bbdd 	.word	0x0800bbdd
 800bb74:	0800bc9b 	.word	0x0800bc9b
 800bb78:	0800bb29 	.word	0x0800bb29
 800bb7c:	0800bb29 	.word	0x0800bb29
 800bb80:	0800bcdb 	.word	0x0800bcdb
 800bb84:	0800bb29 	.word	0x0800bb29
 800bb88:	0800bbdd 	.word	0x0800bbdd
 800bb8c:	0800bb29 	.word	0x0800bb29
 800bb90:	0800bb29 	.word	0x0800bb29
 800bb94:	0800bca3 	.word	0x0800bca3
 800bb98:	682b      	ldr	r3, [r5, #0]
 800bb9a:	1d1a      	adds	r2, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	602a      	str	r2, [r5, #0]
 800bba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e0a3      	b.n	800bcf4 <_printf_i+0x1f4>
 800bbac:	6820      	ldr	r0, [r4, #0]
 800bbae:	6829      	ldr	r1, [r5, #0]
 800bbb0:	0606      	lsls	r6, r0, #24
 800bbb2:	f101 0304 	add.w	r3, r1, #4
 800bbb6:	d50a      	bpl.n	800bbce <_printf_i+0xce>
 800bbb8:	680e      	ldr	r6, [r1, #0]
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	da03      	bge.n	800bbc8 <_printf_i+0xc8>
 800bbc0:	232d      	movs	r3, #45	; 0x2d
 800bbc2:	4276      	negs	r6, r6
 800bbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc8:	485e      	ldr	r0, [pc, #376]	; (800bd44 <_printf_i+0x244>)
 800bbca:	230a      	movs	r3, #10
 800bbcc:	e019      	b.n	800bc02 <_printf_i+0x102>
 800bbce:	680e      	ldr	r6, [r1, #0]
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbd6:	bf18      	it	ne
 800bbd8:	b236      	sxthne	r6, r6
 800bbda:	e7ef      	b.n	800bbbc <_printf_i+0xbc>
 800bbdc:	682b      	ldr	r3, [r5, #0]
 800bbde:	6820      	ldr	r0, [r4, #0]
 800bbe0:	1d19      	adds	r1, r3, #4
 800bbe2:	6029      	str	r1, [r5, #0]
 800bbe4:	0601      	lsls	r1, r0, #24
 800bbe6:	d501      	bpl.n	800bbec <_printf_i+0xec>
 800bbe8:	681e      	ldr	r6, [r3, #0]
 800bbea:	e002      	b.n	800bbf2 <_printf_i+0xf2>
 800bbec:	0646      	lsls	r6, r0, #25
 800bbee:	d5fb      	bpl.n	800bbe8 <_printf_i+0xe8>
 800bbf0:	881e      	ldrh	r6, [r3, #0]
 800bbf2:	4854      	ldr	r0, [pc, #336]	; (800bd44 <_printf_i+0x244>)
 800bbf4:	2f6f      	cmp	r7, #111	; 0x6f
 800bbf6:	bf0c      	ite	eq
 800bbf8:	2308      	moveq	r3, #8
 800bbfa:	230a      	movne	r3, #10
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc02:	6865      	ldr	r5, [r4, #4]
 800bc04:	60a5      	str	r5, [r4, #8]
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	bfa2      	ittt	ge
 800bc0a:	6821      	ldrge	r1, [r4, #0]
 800bc0c:	f021 0104 	bicge.w	r1, r1, #4
 800bc10:	6021      	strge	r1, [r4, #0]
 800bc12:	b90e      	cbnz	r6, 800bc18 <_printf_i+0x118>
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	d04d      	beq.n	800bcb4 <_printf_i+0x1b4>
 800bc18:	4615      	mov	r5, r2
 800bc1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc1e:	fb03 6711 	mls	r7, r3, r1, r6
 800bc22:	5dc7      	ldrb	r7, [r0, r7]
 800bc24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc28:	4637      	mov	r7, r6
 800bc2a:	42bb      	cmp	r3, r7
 800bc2c:	460e      	mov	r6, r1
 800bc2e:	d9f4      	bls.n	800bc1a <_printf_i+0x11a>
 800bc30:	2b08      	cmp	r3, #8
 800bc32:	d10b      	bne.n	800bc4c <_printf_i+0x14c>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	07de      	lsls	r6, r3, #31
 800bc38:	d508      	bpl.n	800bc4c <_printf_i+0x14c>
 800bc3a:	6923      	ldr	r3, [r4, #16]
 800bc3c:	6861      	ldr	r1, [r4, #4]
 800bc3e:	4299      	cmp	r1, r3
 800bc40:	bfde      	ittt	le
 800bc42:	2330      	movle	r3, #48	; 0x30
 800bc44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc4c:	1b52      	subs	r2, r2, r5
 800bc4e:	6122      	str	r2, [r4, #16]
 800bc50:	f8cd a000 	str.w	sl, [sp]
 800bc54:	464b      	mov	r3, r9
 800bc56:	aa03      	add	r2, sp, #12
 800bc58:	4621      	mov	r1, r4
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	f7ff fee2 	bl	800ba24 <_printf_common>
 800bc60:	3001      	adds	r0, #1
 800bc62:	d14c      	bne.n	800bcfe <_printf_i+0x1fe>
 800bc64:	f04f 30ff 	mov.w	r0, #4294967295
 800bc68:	b004      	add	sp, #16
 800bc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6e:	4835      	ldr	r0, [pc, #212]	; (800bd44 <_printf_i+0x244>)
 800bc70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc74:	6829      	ldr	r1, [r5, #0]
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc7c:	6029      	str	r1, [r5, #0]
 800bc7e:	061d      	lsls	r5, r3, #24
 800bc80:	d514      	bpl.n	800bcac <_printf_i+0x1ac>
 800bc82:	07df      	lsls	r7, r3, #31
 800bc84:	bf44      	itt	mi
 800bc86:	f043 0320 	orrmi.w	r3, r3, #32
 800bc8a:	6023      	strmi	r3, [r4, #0]
 800bc8c:	b91e      	cbnz	r6, 800bc96 <_printf_i+0x196>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f023 0320 	bic.w	r3, r3, #32
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	2310      	movs	r3, #16
 800bc98:	e7b0      	b.n	800bbfc <_printf_i+0xfc>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	f043 0320 	orr.w	r3, r3, #32
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	2378      	movs	r3, #120	; 0x78
 800bca4:	4828      	ldr	r0, [pc, #160]	; (800bd48 <_printf_i+0x248>)
 800bca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcaa:	e7e3      	b.n	800bc74 <_printf_i+0x174>
 800bcac:	0659      	lsls	r1, r3, #25
 800bcae:	bf48      	it	mi
 800bcb0:	b2b6      	uxthmi	r6, r6
 800bcb2:	e7e6      	b.n	800bc82 <_printf_i+0x182>
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	e7bb      	b.n	800bc30 <_printf_i+0x130>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	6826      	ldr	r6, [r4, #0]
 800bcbc:	6961      	ldr	r1, [r4, #20]
 800bcbe:	1d18      	adds	r0, r3, #4
 800bcc0:	6028      	str	r0, [r5, #0]
 800bcc2:	0635      	lsls	r5, r6, #24
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0x1cc>
 800bcc8:	6019      	str	r1, [r3, #0]
 800bcca:	e002      	b.n	800bcd2 <_printf_i+0x1d2>
 800bccc:	0670      	lsls	r0, r6, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0x1c8>
 800bcd0:	8019      	strh	r1, [r3, #0]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	4615      	mov	r5, r2
 800bcd8:	e7ba      	b.n	800bc50 <_printf_i+0x150>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	602a      	str	r2, [r5, #0]
 800bce0:	681d      	ldr	r5, [r3, #0]
 800bce2:	6862      	ldr	r2, [r4, #4]
 800bce4:	2100      	movs	r1, #0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f7f4 faaa 	bl	8000240 <memchr>
 800bcec:	b108      	cbz	r0, 800bcf2 <_printf_i+0x1f2>
 800bcee:	1b40      	subs	r0, r0, r5
 800bcf0:	6060      	str	r0, [r4, #4]
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcfc:	e7a8      	b.n	800bc50 <_printf_i+0x150>
 800bcfe:	6923      	ldr	r3, [r4, #16]
 800bd00:	462a      	mov	r2, r5
 800bd02:	4649      	mov	r1, r9
 800bd04:	4640      	mov	r0, r8
 800bd06:	47d0      	blx	sl
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d0ab      	beq.n	800bc64 <_printf_i+0x164>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	079b      	lsls	r3, r3, #30
 800bd10:	d413      	bmi.n	800bd3a <_printf_i+0x23a>
 800bd12:	68e0      	ldr	r0, [r4, #12]
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	4298      	cmp	r0, r3
 800bd18:	bfb8      	it	lt
 800bd1a:	4618      	movlt	r0, r3
 800bd1c:	e7a4      	b.n	800bc68 <_printf_i+0x168>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4632      	mov	r2, r6
 800bd22:	4649      	mov	r1, r9
 800bd24:	4640      	mov	r0, r8
 800bd26:	47d0      	blx	sl
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d09b      	beq.n	800bc64 <_printf_i+0x164>
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	68e3      	ldr	r3, [r4, #12]
 800bd30:	9903      	ldr	r1, [sp, #12]
 800bd32:	1a5b      	subs	r3, r3, r1
 800bd34:	42ab      	cmp	r3, r5
 800bd36:	dcf2      	bgt.n	800bd1e <_printf_i+0x21e>
 800bd38:	e7eb      	b.n	800bd12 <_printf_i+0x212>
 800bd3a:	2500      	movs	r5, #0
 800bd3c:	f104 0619 	add.w	r6, r4, #25
 800bd40:	e7f5      	b.n	800bd2e <_printf_i+0x22e>
 800bd42:	bf00      	nop
 800bd44:	0800e23a 	.word	0x0800e23a
 800bd48:	0800e24b 	.word	0x0800e24b

0800bd4c <_sbrk_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d06      	ldr	r5, [pc, #24]	; (800bd68 <_sbrk_r+0x1c>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	602b      	str	r3, [r5, #0]
 800bd58:	f7f5 fd7a 	bl	8001850 <_sbrk>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_sbrk_r+0x1a>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_sbrk_r+0x1a>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	20001a78 	.word	0x20001a78

0800bd6c <siprintf>:
 800bd6c:	b40e      	push	{r1, r2, r3}
 800bd6e:	b500      	push	{lr}
 800bd70:	b09c      	sub	sp, #112	; 0x70
 800bd72:	ab1d      	add	r3, sp, #116	; 0x74
 800bd74:	9002      	str	r0, [sp, #8]
 800bd76:	9006      	str	r0, [sp, #24]
 800bd78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd7c:	4809      	ldr	r0, [pc, #36]	; (800bda4 <siprintf+0x38>)
 800bd7e:	9107      	str	r1, [sp, #28]
 800bd80:	9104      	str	r1, [sp, #16]
 800bd82:	4909      	ldr	r1, [pc, #36]	; (800bda8 <siprintf+0x3c>)
 800bd84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd88:	9105      	str	r1, [sp, #20]
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	a902      	add	r1, sp, #8
 800bd90:	f001 fac4 	bl	800d31c <_svfiprintf_r>
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	2200      	movs	r2, #0
 800bd98:	701a      	strb	r2, [r3, #0]
 800bd9a:	b01c      	add	sp, #112	; 0x70
 800bd9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda0:	b003      	add	sp, #12
 800bda2:	4770      	bx	lr
 800bda4:	200002e0 	.word	0x200002e0
 800bda8:	ffff0208 	.word	0xffff0208

0800bdac <strcpy>:
 800bdac:	4603      	mov	r3, r0
 800bdae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdb2:	f803 2b01 	strb.w	r2, [r3], #1
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d1f9      	bne.n	800bdae <strcpy+0x2>
 800bdba:	4770      	bx	lr

0800bdbc <quorem>:
 800bdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	6903      	ldr	r3, [r0, #16]
 800bdc2:	690c      	ldr	r4, [r1, #16]
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	f2c0 8081 	blt.w	800bece <quorem+0x112>
 800bdcc:	3c01      	subs	r4, #1
 800bdce:	f101 0814 	add.w	r8, r1, #20
 800bdd2:	f100 0514 	add.w	r5, r0, #20
 800bdd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bde0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bde4:	3301      	adds	r3, #1
 800bde6:	429a      	cmp	r2, r3
 800bde8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bdec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdf4:	d331      	bcc.n	800be5a <quorem+0x9e>
 800bdf6:	f04f 0e00 	mov.w	lr, #0
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	46ac      	mov	ip, r5
 800bdfe:	46f2      	mov	sl, lr
 800be00:	f850 2b04 	ldr.w	r2, [r0], #4
 800be04:	b293      	uxth	r3, r2
 800be06:	fb06 e303 	mla	r3, r6, r3, lr
 800be0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be0e:	b29b      	uxth	r3, r3
 800be10:	ebaa 0303 	sub.w	r3, sl, r3
 800be14:	f8dc a000 	ldr.w	sl, [ip]
 800be18:	0c12      	lsrs	r2, r2, #16
 800be1a:	fa13 f38a 	uxtah	r3, r3, sl
 800be1e:	fb06 e202 	mla	r2, r6, r2, lr
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	9b00      	ldr	r3, [sp, #0]
 800be26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be2a:	b292      	uxth	r2, r2
 800be2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be34:	f8bd 3000 	ldrh.w	r3, [sp]
 800be38:	4581      	cmp	r9, r0
 800be3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be3e:	f84c 3b04 	str.w	r3, [ip], #4
 800be42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be46:	d2db      	bcs.n	800be00 <quorem+0x44>
 800be48:	f855 300b 	ldr.w	r3, [r5, fp]
 800be4c:	b92b      	cbnz	r3, 800be5a <quorem+0x9e>
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	3b04      	subs	r3, #4
 800be52:	429d      	cmp	r5, r3
 800be54:	461a      	mov	r2, r3
 800be56:	d32e      	bcc.n	800beb6 <quorem+0xfa>
 800be58:	613c      	str	r4, [r7, #16]
 800be5a:	4638      	mov	r0, r7
 800be5c:	f001 f8bc 	bl	800cfd8 <__mcmp>
 800be60:	2800      	cmp	r0, #0
 800be62:	db24      	blt.n	800beae <quorem+0xf2>
 800be64:	3601      	adds	r6, #1
 800be66:	4628      	mov	r0, r5
 800be68:	f04f 0c00 	mov.w	ip, #0
 800be6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be70:	f8d0 e000 	ldr.w	lr, [r0]
 800be74:	b293      	uxth	r3, r2
 800be76:	ebac 0303 	sub.w	r3, ip, r3
 800be7a:	0c12      	lsrs	r2, r2, #16
 800be7c:	fa13 f38e 	uxtah	r3, r3, lr
 800be80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be88:	b29b      	uxth	r3, r3
 800be8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be8e:	45c1      	cmp	r9, r8
 800be90:	f840 3b04 	str.w	r3, [r0], #4
 800be94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be98:	d2e8      	bcs.n	800be6c <quorem+0xb0>
 800be9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bea2:	b922      	cbnz	r2, 800beae <quorem+0xf2>
 800bea4:	3b04      	subs	r3, #4
 800bea6:	429d      	cmp	r5, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	d30a      	bcc.n	800bec2 <quorem+0x106>
 800beac:	613c      	str	r4, [r7, #16]
 800beae:	4630      	mov	r0, r6
 800beb0:	b003      	add	sp, #12
 800beb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb6:	6812      	ldr	r2, [r2, #0]
 800beb8:	3b04      	subs	r3, #4
 800beba:	2a00      	cmp	r2, #0
 800bebc:	d1cc      	bne.n	800be58 <quorem+0x9c>
 800bebe:	3c01      	subs	r4, #1
 800bec0:	e7c7      	b.n	800be52 <quorem+0x96>
 800bec2:	6812      	ldr	r2, [r2, #0]
 800bec4:	3b04      	subs	r3, #4
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	d1f0      	bne.n	800beac <quorem+0xf0>
 800beca:	3c01      	subs	r4, #1
 800becc:	e7eb      	b.n	800bea6 <quorem+0xea>
 800bece:	2000      	movs	r0, #0
 800bed0:	e7ee      	b.n	800beb0 <quorem+0xf4>
 800bed2:	0000      	movs	r0, r0
 800bed4:	0000      	movs	r0, r0
	...

0800bed8 <_dtoa_r>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	ed2d 8b04 	vpush	{d8-d9}
 800bee0:	ec57 6b10 	vmov	r6, r7, d0
 800bee4:	b093      	sub	sp, #76	; 0x4c
 800bee6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bee8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800beec:	9106      	str	r1, [sp, #24]
 800beee:	ee10 aa10 	vmov	sl, s0
 800bef2:	4604      	mov	r4, r0
 800bef4:	9209      	str	r2, [sp, #36]	; 0x24
 800bef6:	930c      	str	r3, [sp, #48]	; 0x30
 800bef8:	46bb      	mov	fp, r7
 800befa:	b975      	cbnz	r5, 800bf1a <_dtoa_r+0x42>
 800befc:	2010      	movs	r0, #16
 800befe:	f7ff f9bd 	bl	800b27c <malloc>
 800bf02:	4602      	mov	r2, r0
 800bf04:	6260      	str	r0, [r4, #36]	; 0x24
 800bf06:	b920      	cbnz	r0, 800bf12 <_dtoa_r+0x3a>
 800bf08:	4ba7      	ldr	r3, [pc, #668]	; (800c1a8 <_dtoa_r+0x2d0>)
 800bf0a:	21ea      	movs	r1, #234	; 0xea
 800bf0c:	48a7      	ldr	r0, [pc, #668]	; (800c1ac <_dtoa_r+0x2d4>)
 800bf0e:	f001 fb05 	bl	800d51c <__assert_func>
 800bf12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf16:	6005      	str	r5, [r0, #0]
 800bf18:	60c5      	str	r5, [r0, #12]
 800bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1c:	6819      	ldr	r1, [r3, #0]
 800bf1e:	b151      	cbz	r1, 800bf36 <_dtoa_r+0x5e>
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	604a      	str	r2, [r1, #4]
 800bf24:	2301      	movs	r3, #1
 800bf26:	4093      	lsls	r3, r2
 800bf28:	608b      	str	r3, [r1, #8]
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 fe12 	bl	800cb54 <_Bfree>
 800bf30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	1e3b      	subs	r3, r7, #0
 800bf38:	bfaa      	itet	ge
 800bf3a:	2300      	movge	r3, #0
 800bf3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bf40:	f8c8 3000 	strge.w	r3, [r8]
 800bf44:	4b9a      	ldr	r3, [pc, #616]	; (800c1b0 <_dtoa_r+0x2d8>)
 800bf46:	bfbc      	itt	lt
 800bf48:	2201      	movlt	r2, #1
 800bf4a:	f8c8 2000 	strlt.w	r2, [r8]
 800bf4e:	ea33 030b 	bics.w	r3, r3, fp
 800bf52:	d11b      	bne.n	800bf8c <_dtoa_r+0xb4>
 800bf54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf56:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf60:	4333      	orrs	r3, r6
 800bf62:	f000 8592 	beq.w	800ca8a <_dtoa_r+0xbb2>
 800bf66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf68:	b963      	cbnz	r3, 800bf84 <_dtoa_r+0xac>
 800bf6a:	4b92      	ldr	r3, [pc, #584]	; (800c1b4 <_dtoa_r+0x2dc>)
 800bf6c:	e022      	b.n	800bfb4 <_dtoa_r+0xdc>
 800bf6e:	4b92      	ldr	r3, [pc, #584]	; (800c1b8 <_dtoa_r+0x2e0>)
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	3308      	adds	r3, #8
 800bf74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	9801      	ldr	r0, [sp, #4]
 800bf7a:	b013      	add	sp, #76	; 0x4c
 800bf7c:	ecbd 8b04 	vpop	{d8-d9}
 800bf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf84:	4b8b      	ldr	r3, [pc, #556]	; (800c1b4 <_dtoa_r+0x2dc>)
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	3303      	adds	r3, #3
 800bf8a:	e7f3      	b.n	800bf74 <_dtoa_r+0x9c>
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2300      	movs	r3, #0
 800bf90:	4650      	mov	r0, sl
 800bf92:	4659      	mov	r1, fp
 800bf94:	f7f4 fdc8 	bl	8000b28 <__aeabi_dcmpeq>
 800bf98:	ec4b ab19 	vmov	d9, sl, fp
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	b158      	cbz	r0, 800bfb8 <_dtoa_r+0xe0>
 800bfa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 856b 	beq.w	800ca84 <_dtoa_r+0xbac>
 800bfae:	4883      	ldr	r0, [pc, #524]	; (800c1bc <_dtoa_r+0x2e4>)
 800bfb0:	6018      	str	r0, [r3, #0]
 800bfb2:	1e43      	subs	r3, r0, #1
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	e7df      	b.n	800bf78 <_dtoa_r+0xa0>
 800bfb8:	ec4b ab10 	vmov	d0, sl, fp
 800bfbc:	aa10      	add	r2, sp, #64	; 0x40
 800bfbe:	a911      	add	r1, sp, #68	; 0x44
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f001 f8af 	bl	800d124 <__d2b>
 800bfc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bfca:	ee08 0a10 	vmov	s16, r0
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	f000 8084 	beq.w	800c0dc <_dtoa_r+0x204>
 800bfd4:	ee19 3a90 	vmov	r3, s19
 800bfd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bfe0:	4656      	mov	r6, sl
 800bfe2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bfe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bfea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bfee:	4b74      	ldr	r3, [pc, #464]	; (800c1c0 <_dtoa_r+0x2e8>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	4630      	mov	r0, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	f7f4 f977 	bl	80002e8 <__aeabi_dsub>
 800bffa:	a365      	add	r3, pc, #404	; (adr r3, 800c190 <_dtoa_r+0x2b8>)
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 fb2a 	bl	8000658 <__aeabi_dmul>
 800c004:	a364      	add	r3, pc, #400	; (adr r3, 800c198 <_dtoa_r+0x2c0>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f96f 	bl	80002ec <__adddf3>
 800c00e:	4606      	mov	r6, r0
 800c010:	4628      	mov	r0, r5
 800c012:	460f      	mov	r7, r1
 800c014:	f7f4 fab6 	bl	8000584 <__aeabi_i2d>
 800c018:	a361      	add	r3, pc, #388	; (adr r3, 800c1a0 <_dtoa_r+0x2c8>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 fb1b 	bl	8000658 <__aeabi_dmul>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	4630      	mov	r0, r6
 800c028:	4639      	mov	r1, r7
 800c02a:	f7f4 f95f 	bl	80002ec <__adddf3>
 800c02e:	4606      	mov	r6, r0
 800c030:	460f      	mov	r7, r1
 800c032:	f7f4 fdc1 	bl	8000bb8 <__aeabi_d2iz>
 800c036:	2200      	movs	r2, #0
 800c038:	9000      	str	r0, [sp, #0]
 800c03a:	2300      	movs	r3, #0
 800c03c:	4630      	mov	r0, r6
 800c03e:	4639      	mov	r1, r7
 800c040:	f7f4 fd7c 	bl	8000b3c <__aeabi_dcmplt>
 800c044:	b150      	cbz	r0, 800c05c <_dtoa_r+0x184>
 800c046:	9800      	ldr	r0, [sp, #0]
 800c048:	f7f4 fa9c 	bl	8000584 <__aeabi_i2d>
 800c04c:	4632      	mov	r2, r6
 800c04e:	463b      	mov	r3, r7
 800c050:	f7f4 fd6a 	bl	8000b28 <__aeabi_dcmpeq>
 800c054:	b910      	cbnz	r0, 800c05c <_dtoa_r+0x184>
 800c056:	9b00      	ldr	r3, [sp, #0]
 800c058:	3b01      	subs	r3, #1
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	9b00      	ldr	r3, [sp, #0]
 800c05e:	2b16      	cmp	r3, #22
 800c060:	d85a      	bhi.n	800c118 <_dtoa_r+0x240>
 800c062:	9a00      	ldr	r2, [sp, #0]
 800c064:	4b57      	ldr	r3, [pc, #348]	; (800c1c4 <_dtoa_r+0x2ec>)
 800c066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	ec51 0b19 	vmov	r0, r1, d9
 800c072:	f7f4 fd63 	bl	8000b3c <__aeabi_dcmplt>
 800c076:	2800      	cmp	r0, #0
 800c078:	d050      	beq.n	800c11c <_dtoa_r+0x244>
 800c07a:	9b00      	ldr	r3, [sp, #0]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	2300      	movs	r3, #0
 800c082:	930b      	str	r3, [sp, #44]	; 0x2c
 800c084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c086:	1b5d      	subs	r5, r3, r5
 800c088:	1e6b      	subs	r3, r5, #1
 800c08a:	9305      	str	r3, [sp, #20]
 800c08c:	bf45      	ittet	mi
 800c08e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c092:	9304      	strmi	r3, [sp, #16]
 800c094:	2300      	movpl	r3, #0
 800c096:	2300      	movmi	r3, #0
 800c098:	bf4c      	ite	mi
 800c09a:	9305      	strmi	r3, [sp, #20]
 800c09c:	9304      	strpl	r3, [sp, #16]
 800c09e:	9b00      	ldr	r3, [sp, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	db3d      	blt.n	800c120 <_dtoa_r+0x248>
 800c0a4:	9b05      	ldr	r3, [sp, #20]
 800c0a6:	9a00      	ldr	r2, [sp, #0]
 800c0a8:	920a      	str	r2, [sp, #40]	; 0x28
 800c0aa:	4413      	add	r3, r2
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	9307      	str	r3, [sp, #28]
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b09      	cmp	r3, #9
 800c0b6:	f200 8089 	bhi.w	800c1cc <_dtoa_r+0x2f4>
 800c0ba:	2b05      	cmp	r3, #5
 800c0bc:	bfc4      	itt	gt
 800c0be:	3b04      	subgt	r3, #4
 800c0c0:	9306      	strgt	r3, [sp, #24]
 800c0c2:	9b06      	ldr	r3, [sp, #24]
 800c0c4:	f1a3 0302 	sub.w	r3, r3, #2
 800c0c8:	bfcc      	ite	gt
 800c0ca:	2500      	movgt	r5, #0
 800c0cc:	2501      	movle	r5, #1
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	f200 8087 	bhi.w	800c1e2 <_dtoa_r+0x30a>
 800c0d4:	e8df f003 	tbb	[pc, r3]
 800c0d8:	59383a2d 	.word	0x59383a2d
 800c0dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c0e0:	441d      	add	r5, r3
 800c0e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c0e6:	2b20      	cmp	r3, #32
 800c0e8:	bfc1      	itttt	gt
 800c0ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c0ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c0f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c0f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c0fa:	bfda      	itte	le
 800c0fc:	f1c3 0320 	rsble	r3, r3, #32
 800c100:	fa06 f003 	lslle.w	r0, r6, r3
 800c104:	4318      	orrgt	r0, r3
 800c106:	f7f4 fa2d 	bl	8000564 <__aeabi_ui2d>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4606      	mov	r6, r0
 800c10e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c112:	3d01      	subs	r5, #1
 800c114:	930e      	str	r3, [sp, #56]	; 0x38
 800c116:	e76a      	b.n	800bfee <_dtoa_r+0x116>
 800c118:	2301      	movs	r3, #1
 800c11a:	e7b2      	b.n	800c082 <_dtoa_r+0x1aa>
 800c11c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c11e:	e7b1      	b.n	800c084 <_dtoa_r+0x1ac>
 800c120:	9b04      	ldr	r3, [sp, #16]
 800c122:	9a00      	ldr	r2, [sp, #0]
 800c124:	1a9b      	subs	r3, r3, r2
 800c126:	9304      	str	r3, [sp, #16]
 800c128:	4253      	negs	r3, r2
 800c12a:	9307      	str	r3, [sp, #28]
 800c12c:	2300      	movs	r3, #0
 800c12e:	930a      	str	r3, [sp, #40]	; 0x28
 800c130:	e7bf      	b.n	800c0b2 <_dtoa_r+0x1da>
 800c132:	2300      	movs	r3, #0
 800c134:	9308      	str	r3, [sp, #32]
 800c136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dc55      	bgt.n	800c1e8 <_dtoa_r+0x310>
 800c13c:	2301      	movs	r3, #1
 800c13e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c142:	461a      	mov	r2, r3
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	e00c      	b.n	800c162 <_dtoa_r+0x28a>
 800c148:	2301      	movs	r3, #1
 800c14a:	e7f3      	b.n	800c134 <_dtoa_r+0x25c>
 800c14c:	2300      	movs	r3, #0
 800c14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c150:	9308      	str	r3, [sp, #32]
 800c152:	9b00      	ldr	r3, [sp, #0]
 800c154:	4413      	add	r3, r2
 800c156:	9302      	str	r3, [sp, #8]
 800c158:	3301      	adds	r3, #1
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	9303      	str	r3, [sp, #12]
 800c15e:	bfb8      	it	lt
 800c160:	2301      	movlt	r3, #1
 800c162:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c164:	2200      	movs	r2, #0
 800c166:	6042      	str	r2, [r0, #4]
 800c168:	2204      	movs	r2, #4
 800c16a:	f102 0614 	add.w	r6, r2, #20
 800c16e:	429e      	cmp	r6, r3
 800c170:	6841      	ldr	r1, [r0, #4]
 800c172:	d93d      	bls.n	800c1f0 <_dtoa_r+0x318>
 800c174:	4620      	mov	r0, r4
 800c176:	f000 fcad 	bl	800cad4 <_Balloc>
 800c17a:	9001      	str	r0, [sp, #4]
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d13b      	bne.n	800c1f8 <_dtoa_r+0x320>
 800c180:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <_dtoa_r+0x2f0>)
 800c182:	4602      	mov	r2, r0
 800c184:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c188:	e6c0      	b.n	800bf0c <_dtoa_r+0x34>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e7df      	b.n	800c14e <_dtoa_r+0x276>
 800c18e:	bf00      	nop
 800c190:	636f4361 	.word	0x636f4361
 800c194:	3fd287a7 	.word	0x3fd287a7
 800c198:	8b60c8b3 	.word	0x8b60c8b3
 800c19c:	3fc68a28 	.word	0x3fc68a28
 800c1a0:	509f79fb 	.word	0x509f79fb
 800c1a4:	3fd34413 	.word	0x3fd34413
 800c1a8:	0800e269 	.word	0x0800e269
 800c1ac:	0800e280 	.word	0x0800e280
 800c1b0:	7ff00000 	.word	0x7ff00000
 800c1b4:	0800e265 	.word	0x0800e265
 800c1b8:	0800e25c 	.word	0x0800e25c
 800c1bc:	0800e239 	.word	0x0800e239
 800c1c0:	3ff80000 	.word	0x3ff80000
 800c1c4:	0800e370 	.word	0x0800e370
 800c1c8:	0800e2db 	.word	0x0800e2db
 800c1cc:	2501      	movs	r5, #1
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	9306      	str	r3, [sp, #24]
 800c1d2:	9508      	str	r5, [sp, #32]
 800c1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2312      	movs	r3, #18
 800c1e0:	e7b0      	b.n	800c144 <_dtoa_r+0x26c>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	9308      	str	r3, [sp, #32]
 800c1e6:	e7f5      	b.n	800c1d4 <_dtoa_r+0x2fc>
 800c1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1ee:	e7b8      	b.n	800c162 <_dtoa_r+0x28a>
 800c1f0:	3101      	adds	r1, #1
 800c1f2:	6041      	str	r1, [r0, #4]
 800c1f4:	0052      	lsls	r2, r2, #1
 800c1f6:	e7b8      	b.n	800c16a <_dtoa_r+0x292>
 800c1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1fa:	9a01      	ldr	r2, [sp, #4]
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	9b03      	ldr	r3, [sp, #12]
 800c200:	2b0e      	cmp	r3, #14
 800c202:	f200 809d 	bhi.w	800c340 <_dtoa_r+0x468>
 800c206:	2d00      	cmp	r5, #0
 800c208:	f000 809a 	beq.w	800c340 <_dtoa_r+0x468>
 800c20c:	9b00      	ldr	r3, [sp, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dd32      	ble.n	800c278 <_dtoa_r+0x3a0>
 800c212:	4ab7      	ldr	r2, [pc, #732]	; (800c4f0 <_dtoa_r+0x618>)
 800c214:	f003 030f 	and.w	r3, r3, #15
 800c218:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c21c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c220:	9b00      	ldr	r3, [sp, #0]
 800c222:	05d8      	lsls	r0, r3, #23
 800c224:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c228:	d516      	bpl.n	800c258 <_dtoa_r+0x380>
 800c22a:	4bb2      	ldr	r3, [pc, #712]	; (800c4f4 <_dtoa_r+0x61c>)
 800c22c:	ec51 0b19 	vmov	r0, r1, d9
 800c230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c234:	f7f4 fb3a 	bl	80008ac <__aeabi_ddiv>
 800c238:	f007 070f 	and.w	r7, r7, #15
 800c23c:	4682      	mov	sl, r0
 800c23e:	468b      	mov	fp, r1
 800c240:	2503      	movs	r5, #3
 800c242:	4eac      	ldr	r6, [pc, #688]	; (800c4f4 <_dtoa_r+0x61c>)
 800c244:	b957      	cbnz	r7, 800c25c <_dtoa_r+0x384>
 800c246:	4642      	mov	r2, r8
 800c248:	464b      	mov	r3, r9
 800c24a:	4650      	mov	r0, sl
 800c24c:	4659      	mov	r1, fp
 800c24e:	f7f4 fb2d 	bl	80008ac <__aeabi_ddiv>
 800c252:	4682      	mov	sl, r0
 800c254:	468b      	mov	fp, r1
 800c256:	e028      	b.n	800c2aa <_dtoa_r+0x3d2>
 800c258:	2502      	movs	r5, #2
 800c25a:	e7f2      	b.n	800c242 <_dtoa_r+0x36a>
 800c25c:	07f9      	lsls	r1, r7, #31
 800c25e:	d508      	bpl.n	800c272 <_dtoa_r+0x39a>
 800c260:	4640      	mov	r0, r8
 800c262:	4649      	mov	r1, r9
 800c264:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c268:	f7f4 f9f6 	bl	8000658 <__aeabi_dmul>
 800c26c:	3501      	adds	r5, #1
 800c26e:	4680      	mov	r8, r0
 800c270:	4689      	mov	r9, r1
 800c272:	107f      	asrs	r7, r7, #1
 800c274:	3608      	adds	r6, #8
 800c276:	e7e5      	b.n	800c244 <_dtoa_r+0x36c>
 800c278:	f000 809b 	beq.w	800c3b2 <_dtoa_r+0x4da>
 800c27c:	9b00      	ldr	r3, [sp, #0]
 800c27e:	4f9d      	ldr	r7, [pc, #628]	; (800c4f4 <_dtoa_r+0x61c>)
 800c280:	425e      	negs	r6, r3
 800c282:	4b9b      	ldr	r3, [pc, #620]	; (800c4f0 <_dtoa_r+0x618>)
 800c284:	f006 020f 	and.w	r2, r6, #15
 800c288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	ec51 0b19 	vmov	r0, r1, d9
 800c294:	f7f4 f9e0 	bl	8000658 <__aeabi_dmul>
 800c298:	1136      	asrs	r6, r6, #4
 800c29a:	4682      	mov	sl, r0
 800c29c:	468b      	mov	fp, r1
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2502      	movs	r5, #2
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	d17a      	bne.n	800c39c <_dtoa_r+0x4c4>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1d3      	bne.n	800c252 <_dtoa_r+0x37a>
 800c2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 8082 	beq.w	800c3b6 <_dtoa_r+0x4de>
 800c2b2:	4b91      	ldr	r3, [pc, #580]	; (800c4f8 <_dtoa_r+0x620>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	4659      	mov	r1, fp
 800c2ba:	f7f4 fc3f 	bl	8000b3c <__aeabi_dcmplt>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d079      	beq.n	800c3b6 <_dtoa_r+0x4de>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d076      	beq.n	800c3b6 <_dtoa_r+0x4de>
 800c2c8:	9b02      	ldr	r3, [sp, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dd36      	ble.n	800c33c <_dtoa_r+0x464>
 800c2ce:	9b00      	ldr	r3, [sp, #0]
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	4659      	mov	r1, fp
 800c2d4:	1e5f      	subs	r7, r3, #1
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	4b88      	ldr	r3, [pc, #544]	; (800c4fc <_dtoa_r+0x624>)
 800c2da:	f7f4 f9bd 	bl	8000658 <__aeabi_dmul>
 800c2de:	9e02      	ldr	r6, [sp, #8]
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	468b      	mov	fp, r1
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f7f4 f94c 	bl	8000584 <__aeabi_i2d>
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	465b      	mov	r3, fp
 800c2f0:	f7f4 f9b2 	bl	8000658 <__aeabi_dmul>
 800c2f4:	4b82      	ldr	r3, [pc, #520]	; (800c500 <_dtoa_r+0x628>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f7f3 fff8 	bl	80002ec <__adddf3>
 800c2fc:	46d0      	mov	r8, sl
 800c2fe:	46d9      	mov	r9, fp
 800c300:	4682      	mov	sl, r0
 800c302:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c306:	2e00      	cmp	r6, #0
 800c308:	d158      	bne.n	800c3bc <_dtoa_r+0x4e4>
 800c30a:	4b7e      	ldr	r3, [pc, #504]	; (800c504 <_dtoa_r+0x62c>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	4640      	mov	r0, r8
 800c310:	4649      	mov	r1, r9
 800c312:	f7f3 ffe9 	bl	80002e8 <__aeabi_dsub>
 800c316:	4652      	mov	r2, sl
 800c318:	465b      	mov	r3, fp
 800c31a:	4680      	mov	r8, r0
 800c31c:	4689      	mov	r9, r1
 800c31e:	f7f4 fc2b 	bl	8000b78 <__aeabi_dcmpgt>
 800c322:	2800      	cmp	r0, #0
 800c324:	f040 8295 	bne.w	800c852 <_dtoa_r+0x97a>
 800c328:	4652      	mov	r2, sl
 800c32a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	f7f4 fc03 	bl	8000b3c <__aeabi_dcmplt>
 800c336:	2800      	cmp	r0, #0
 800c338:	f040 8289 	bne.w	800c84e <_dtoa_r+0x976>
 800c33c:	ec5b ab19 	vmov	sl, fp, d9
 800c340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c342:	2b00      	cmp	r3, #0
 800c344:	f2c0 8148 	blt.w	800c5d8 <_dtoa_r+0x700>
 800c348:	9a00      	ldr	r2, [sp, #0]
 800c34a:	2a0e      	cmp	r2, #14
 800c34c:	f300 8144 	bgt.w	800c5d8 <_dtoa_r+0x700>
 800c350:	4b67      	ldr	r3, [pc, #412]	; (800c4f0 <_dtoa_r+0x618>)
 800c352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f280 80d5 	bge.w	800c50c <_dtoa_r+0x634>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	f300 80d1 	bgt.w	800c50c <_dtoa_r+0x634>
 800c36a:	f040 826f 	bne.w	800c84c <_dtoa_r+0x974>
 800c36e:	4b65      	ldr	r3, [pc, #404]	; (800c504 <_dtoa_r+0x62c>)
 800c370:	2200      	movs	r2, #0
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f4 f96f 	bl	8000658 <__aeabi_dmul>
 800c37a:	4652      	mov	r2, sl
 800c37c:	465b      	mov	r3, fp
 800c37e:	f7f4 fbf1 	bl	8000b64 <__aeabi_dcmpge>
 800c382:	9e03      	ldr	r6, [sp, #12]
 800c384:	4637      	mov	r7, r6
 800c386:	2800      	cmp	r0, #0
 800c388:	f040 8245 	bne.w	800c816 <_dtoa_r+0x93e>
 800c38c:	9d01      	ldr	r5, [sp, #4]
 800c38e:	2331      	movs	r3, #49	; 0x31
 800c390:	f805 3b01 	strb.w	r3, [r5], #1
 800c394:	9b00      	ldr	r3, [sp, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	e240      	b.n	800c81e <_dtoa_r+0x946>
 800c39c:	07f2      	lsls	r2, r6, #31
 800c39e:	d505      	bpl.n	800c3ac <_dtoa_r+0x4d4>
 800c3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a4:	f7f4 f958 	bl	8000658 <__aeabi_dmul>
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	1076      	asrs	r6, r6, #1
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	e777      	b.n	800c2a2 <_dtoa_r+0x3ca>
 800c3b2:	2502      	movs	r5, #2
 800c3b4:	e779      	b.n	800c2aa <_dtoa_r+0x3d2>
 800c3b6:	9f00      	ldr	r7, [sp, #0]
 800c3b8:	9e03      	ldr	r6, [sp, #12]
 800c3ba:	e794      	b.n	800c2e6 <_dtoa_r+0x40e>
 800c3bc:	9901      	ldr	r1, [sp, #4]
 800c3be:	4b4c      	ldr	r3, [pc, #304]	; (800c4f0 <_dtoa_r+0x618>)
 800c3c0:	4431      	add	r1, r6
 800c3c2:	910d      	str	r1, [sp, #52]	; 0x34
 800c3c4:	9908      	ldr	r1, [sp, #32]
 800c3c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c3ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	d043      	beq.n	800c45a <_dtoa_r+0x582>
 800c3d2:	494d      	ldr	r1, [pc, #308]	; (800c508 <_dtoa_r+0x630>)
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f7f4 fa69 	bl	80008ac <__aeabi_ddiv>
 800c3da:	4652      	mov	r2, sl
 800c3dc:	465b      	mov	r3, fp
 800c3de:	f7f3 ff83 	bl	80002e8 <__aeabi_dsub>
 800c3e2:	9d01      	ldr	r5, [sp, #4]
 800c3e4:	4682      	mov	sl, r0
 800c3e6:	468b      	mov	fp, r1
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	f7f4 fbe4 	bl	8000bb8 <__aeabi_d2iz>
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	f7f4 f8c7 	bl	8000584 <__aeabi_i2d>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	f7f3 ff73 	bl	80002e8 <__aeabi_dsub>
 800c402:	3630      	adds	r6, #48	; 0x30
 800c404:	f805 6b01 	strb.w	r6, [r5], #1
 800c408:	4652      	mov	r2, sl
 800c40a:	465b      	mov	r3, fp
 800c40c:	4680      	mov	r8, r0
 800c40e:	4689      	mov	r9, r1
 800c410:	f7f4 fb94 	bl	8000b3c <__aeabi_dcmplt>
 800c414:	2800      	cmp	r0, #0
 800c416:	d163      	bne.n	800c4e0 <_dtoa_r+0x608>
 800c418:	4642      	mov	r2, r8
 800c41a:	464b      	mov	r3, r9
 800c41c:	4936      	ldr	r1, [pc, #216]	; (800c4f8 <_dtoa_r+0x620>)
 800c41e:	2000      	movs	r0, #0
 800c420:	f7f3 ff62 	bl	80002e8 <__aeabi_dsub>
 800c424:	4652      	mov	r2, sl
 800c426:	465b      	mov	r3, fp
 800c428:	f7f4 fb88 	bl	8000b3c <__aeabi_dcmplt>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	f040 80b5 	bne.w	800c59c <_dtoa_r+0x6c4>
 800c432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c434:	429d      	cmp	r5, r3
 800c436:	d081      	beq.n	800c33c <_dtoa_r+0x464>
 800c438:	4b30      	ldr	r3, [pc, #192]	; (800c4fc <_dtoa_r+0x624>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	4650      	mov	r0, sl
 800c43e:	4659      	mov	r1, fp
 800c440:	f7f4 f90a 	bl	8000658 <__aeabi_dmul>
 800c444:	4b2d      	ldr	r3, [pc, #180]	; (800c4fc <_dtoa_r+0x624>)
 800c446:	4682      	mov	sl, r0
 800c448:	468b      	mov	fp, r1
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	2200      	movs	r2, #0
 800c450:	f7f4 f902 	bl	8000658 <__aeabi_dmul>
 800c454:	4680      	mov	r8, r0
 800c456:	4689      	mov	r9, r1
 800c458:	e7c6      	b.n	800c3e8 <_dtoa_r+0x510>
 800c45a:	4650      	mov	r0, sl
 800c45c:	4659      	mov	r1, fp
 800c45e:	f7f4 f8fb 	bl	8000658 <__aeabi_dmul>
 800c462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c464:	9d01      	ldr	r5, [sp, #4]
 800c466:	930f      	str	r3, [sp, #60]	; 0x3c
 800c468:	4682      	mov	sl, r0
 800c46a:	468b      	mov	fp, r1
 800c46c:	4649      	mov	r1, r9
 800c46e:	4640      	mov	r0, r8
 800c470:	f7f4 fba2 	bl	8000bb8 <__aeabi_d2iz>
 800c474:	4606      	mov	r6, r0
 800c476:	f7f4 f885 	bl	8000584 <__aeabi_i2d>
 800c47a:	3630      	adds	r6, #48	; 0x30
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	f7f3 ff30 	bl	80002e8 <__aeabi_dsub>
 800c488:	f805 6b01 	strb.w	r6, [r5], #1
 800c48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c48e:	429d      	cmp	r5, r3
 800c490:	4680      	mov	r8, r0
 800c492:	4689      	mov	r9, r1
 800c494:	f04f 0200 	mov.w	r2, #0
 800c498:	d124      	bne.n	800c4e4 <_dtoa_r+0x60c>
 800c49a:	4b1b      	ldr	r3, [pc, #108]	; (800c508 <_dtoa_r+0x630>)
 800c49c:	4650      	mov	r0, sl
 800c49e:	4659      	mov	r1, fp
 800c4a0:	f7f3 ff24 	bl	80002ec <__adddf3>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	f7f4 fb64 	bl	8000b78 <__aeabi_dcmpgt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d173      	bne.n	800c59c <_dtoa_r+0x6c4>
 800c4b4:	4652      	mov	r2, sl
 800c4b6:	465b      	mov	r3, fp
 800c4b8:	4913      	ldr	r1, [pc, #76]	; (800c508 <_dtoa_r+0x630>)
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f7f3 ff14 	bl	80002e8 <__aeabi_dsub>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	f7f4 fb38 	bl	8000b3c <__aeabi_dcmplt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f43f af35 	beq.w	800c33c <_dtoa_r+0x464>
 800c4d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c4d4:	1e6b      	subs	r3, r5, #1
 800c4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4dc:	2b30      	cmp	r3, #48	; 0x30
 800c4de:	d0f8      	beq.n	800c4d2 <_dtoa_r+0x5fa>
 800c4e0:	9700      	str	r7, [sp, #0]
 800c4e2:	e049      	b.n	800c578 <_dtoa_r+0x6a0>
 800c4e4:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <_dtoa_r+0x624>)
 800c4e6:	f7f4 f8b7 	bl	8000658 <__aeabi_dmul>
 800c4ea:	4680      	mov	r8, r0
 800c4ec:	4689      	mov	r9, r1
 800c4ee:	e7bd      	b.n	800c46c <_dtoa_r+0x594>
 800c4f0:	0800e370 	.word	0x0800e370
 800c4f4:	0800e348 	.word	0x0800e348
 800c4f8:	3ff00000 	.word	0x3ff00000
 800c4fc:	40240000 	.word	0x40240000
 800c500:	401c0000 	.word	0x401c0000
 800c504:	40140000 	.word	0x40140000
 800c508:	3fe00000 	.word	0x3fe00000
 800c50c:	9d01      	ldr	r5, [sp, #4]
 800c50e:	4656      	mov	r6, sl
 800c510:	465f      	mov	r7, fp
 800c512:	4642      	mov	r2, r8
 800c514:	464b      	mov	r3, r9
 800c516:	4630      	mov	r0, r6
 800c518:	4639      	mov	r1, r7
 800c51a:	f7f4 f9c7 	bl	80008ac <__aeabi_ddiv>
 800c51e:	f7f4 fb4b 	bl	8000bb8 <__aeabi_d2iz>
 800c522:	4682      	mov	sl, r0
 800c524:	f7f4 f82e 	bl	8000584 <__aeabi_i2d>
 800c528:	4642      	mov	r2, r8
 800c52a:	464b      	mov	r3, r9
 800c52c:	f7f4 f894 	bl	8000658 <__aeabi_dmul>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4630      	mov	r0, r6
 800c536:	4639      	mov	r1, r7
 800c538:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c53c:	f7f3 fed4 	bl	80002e8 <__aeabi_dsub>
 800c540:	f805 6b01 	strb.w	r6, [r5], #1
 800c544:	9e01      	ldr	r6, [sp, #4]
 800c546:	9f03      	ldr	r7, [sp, #12]
 800c548:	1bae      	subs	r6, r5, r6
 800c54a:	42b7      	cmp	r7, r6
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	d135      	bne.n	800c5be <_dtoa_r+0x6e6>
 800c552:	f7f3 fecb 	bl	80002ec <__adddf3>
 800c556:	4642      	mov	r2, r8
 800c558:	464b      	mov	r3, r9
 800c55a:	4606      	mov	r6, r0
 800c55c:	460f      	mov	r7, r1
 800c55e:	f7f4 fb0b 	bl	8000b78 <__aeabi_dcmpgt>
 800c562:	b9d0      	cbnz	r0, 800c59a <_dtoa_r+0x6c2>
 800c564:	4642      	mov	r2, r8
 800c566:	464b      	mov	r3, r9
 800c568:	4630      	mov	r0, r6
 800c56a:	4639      	mov	r1, r7
 800c56c:	f7f4 fadc 	bl	8000b28 <__aeabi_dcmpeq>
 800c570:	b110      	cbz	r0, 800c578 <_dtoa_r+0x6a0>
 800c572:	f01a 0f01 	tst.w	sl, #1
 800c576:	d110      	bne.n	800c59a <_dtoa_r+0x6c2>
 800c578:	4620      	mov	r0, r4
 800c57a:	ee18 1a10 	vmov	r1, s16
 800c57e:	f000 fae9 	bl	800cb54 <_Bfree>
 800c582:	2300      	movs	r3, #0
 800c584:	9800      	ldr	r0, [sp, #0]
 800c586:	702b      	strb	r3, [r5, #0]
 800c588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c58a:	3001      	adds	r0, #1
 800c58c:	6018      	str	r0, [r3, #0]
 800c58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c590:	2b00      	cmp	r3, #0
 800c592:	f43f acf1 	beq.w	800bf78 <_dtoa_r+0xa0>
 800c596:	601d      	str	r5, [r3, #0]
 800c598:	e4ee      	b.n	800bf78 <_dtoa_r+0xa0>
 800c59a:	9f00      	ldr	r7, [sp, #0]
 800c59c:	462b      	mov	r3, r5
 800c59e:	461d      	mov	r5, r3
 800c5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5a4:	2a39      	cmp	r2, #57	; 0x39
 800c5a6:	d106      	bne.n	800c5b6 <_dtoa_r+0x6de>
 800c5a8:	9a01      	ldr	r2, [sp, #4]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d1f7      	bne.n	800c59e <_dtoa_r+0x6c6>
 800c5ae:	9901      	ldr	r1, [sp, #4]
 800c5b0:	2230      	movs	r2, #48	; 0x30
 800c5b2:	3701      	adds	r7, #1
 800c5b4:	700a      	strb	r2, [r1, #0]
 800c5b6:	781a      	ldrb	r2, [r3, #0]
 800c5b8:	3201      	adds	r2, #1
 800c5ba:	701a      	strb	r2, [r3, #0]
 800c5bc:	e790      	b.n	800c4e0 <_dtoa_r+0x608>
 800c5be:	4ba6      	ldr	r3, [pc, #664]	; (800c858 <_dtoa_r+0x980>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f7f4 f849 	bl	8000658 <__aeabi_dmul>
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	460f      	mov	r7, r1
 800c5ce:	f7f4 faab 	bl	8000b28 <__aeabi_dcmpeq>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d09d      	beq.n	800c512 <_dtoa_r+0x63a>
 800c5d6:	e7cf      	b.n	800c578 <_dtoa_r+0x6a0>
 800c5d8:	9a08      	ldr	r2, [sp, #32]
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	f000 80d7 	beq.w	800c78e <_dtoa_r+0x8b6>
 800c5e0:	9a06      	ldr	r2, [sp, #24]
 800c5e2:	2a01      	cmp	r2, #1
 800c5e4:	f300 80ba 	bgt.w	800c75c <_dtoa_r+0x884>
 800c5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	f000 80b2 	beq.w	800c754 <_dtoa_r+0x87c>
 800c5f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5f4:	9e07      	ldr	r6, [sp, #28]
 800c5f6:	9d04      	ldr	r5, [sp, #16]
 800c5f8:	9a04      	ldr	r2, [sp, #16]
 800c5fa:	441a      	add	r2, r3
 800c5fc:	9204      	str	r2, [sp, #16]
 800c5fe:	9a05      	ldr	r2, [sp, #20]
 800c600:	2101      	movs	r1, #1
 800c602:	441a      	add	r2, r3
 800c604:	4620      	mov	r0, r4
 800c606:	9205      	str	r2, [sp, #20]
 800c608:	f000 fb5c 	bl	800ccc4 <__i2b>
 800c60c:	4607      	mov	r7, r0
 800c60e:	2d00      	cmp	r5, #0
 800c610:	dd0c      	ble.n	800c62c <_dtoa_r+0x754>
 800c612:	9b05      	ldr	r3, [sp, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd09      	ble.n	800c62c <_dtoa_r+0x754>
 800c618:	42ab      	cmp	r3, r5
 800c61a:	9a04      	ldr	r2, [sp, #16]
 800c61c:	bfa8      	it	ge
 800c61e:	462b      	movge	r3, r5
 800c620:	1ad2      	subs	r2, r2, r3
 800c622:	9204      	str	r2, [sp, #16]
 800c624:	9a05      	ldr	r2, [sp, #20]
 800c626:	1aed      	subs	r5, r5, r3
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	9305      	str	r3, [sp, #20]
 800c62c:	9b07      	ldr	r3, [sp, #28]
 800c62e:	b31b      	cbz	r3, 800c678 <_dtoa_r+0x7a0>
 800c630:	9b08      	ldr	r3, [sp, #32]
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 80af 	beq.w	800c796 <_dtoa_r+0x8be>
 800c638:	2e00      	cmp	r6, #0
 800c63a:	dd13      	ble.n	800c664 <_dtoa_r+0x78c>
 800c63c:	4639      	mov	r1, r7
 800c63e:	4632      	mov	r2, r6
 800c640:	4620      	mov	r0, r4
 800c642:	f000 fbff 	bl	800ce44 <__pow5mult>
 800c646:	ee18 2a10 	vmov	r2, s16
 800c64a:	4601      	mov	r1, r0
 800c64c:	4607      	mov	r7, r0
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fb4e 	bl	800ccf0 <__multiply>
 800c654:	ee18 1a10 	vmov	r1, s16
 800c658:	4680      	mov	r8, r0
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 fa7a 	bl	800cb54 <_Bfree>
 800c660:	ee08 8a10 	vmov	s16, r8
 800c664:	9b07      	ldr	r3, [sp, #28]
 800c666:	1b9a      	subs	r2, r3, r6
 800c668:	d006      	beq.n	800c678 <_dtoa_r+0x7a0>
 800c66a:	ee18 1a10 	vmov	r1, s16
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 fbe8 	bl	800ce44 <__pow5mult>
 800c674:	ee08 0a10 	vmov	s16, r0
 800c678:	2101      	movs	r1, #1
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 fb22 	bl	800ccc4 <__i2b>
 800c680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c682:	2b00      	cmp	r3, #0
 800c684:	4606      	mov	r6, r0
 800c686:	f340 8088 	ble.w	800c79a <_dtoa_r+0x8c2>
 800c68a:	461a      	mov	r2, r3
 800c68c:	4601      	mov	r1, r0
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 fbd8 	bl	800ce44 <__pow5mult>
 800c694:	9b06      	ldr	r3, [sp, #24]
 800c696:	2b01      	cmp	r3, #1
 800c698:	4606      	mov	r6, r0
 800c69a:	f340 8081 	ble.w	800c7a0 <_dtoa_r+0x8c8>
 800c69e:	f04f 0800 	mov.w	r8, #0
 800c6a2:	6933      	ldr	r3, [r6, #16]
 800c6a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c6a8:	6918      	ldr	r0, [r3, #16]
 800c6aa:	f000 fabb 	bl	800cc24 <__hi0bits>
 800c6ae:	f1c0 0020 	rsb	r0, r0, #32
 800c6b2:	9b05      	ldr	r3, [sp, #20]
 800c6b4:	4418      	add	r0, r3
 800c6b6:	f010 001f 	ands.w	r0, r0, #31
 800c6ba:	f000 8092 	beq.w	800c7e2 <_dtoa_r+0x90a>
 800c6be:	f1c0 0320 	rsb	r3, r0, #32
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	f340 808a 	ble.w	800c7dc <_dtoa_r+0x904>
 800c6c8:	f1c0 001c 	rsb	r0, r0, #28
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	4403      	add	r3, r0
 800c6d0:	9304      	str	r3, [sp, #16]
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	4403      	add	r3, r0
 800c6d6:	4405      	add	r5, r0
 800c6d8:	9305      	str	r3, [sp, #20]
 800c6da:	9b04      	ldr	r3, [sp, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dd07      	ble.n	800c6f0 <_dtoa_r+0x818>
 800c6e0:	ee18 1a10 	vmov	r1, s16
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fc06 	bl	800cef8 <__lshift>
 800c6ec:	ee08 0a10 	vmov	s16, r0
 800c6f0:	9b05      	ldr	r3, [sp, #20]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	dd05      	ble.n	800c702 <_dtoa_r+0x82a>
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 fbfc 	bl	800cef8 <__lshift>
 800c700:	4606      	mov	r6, r0
 800c702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c704:	2b00      	cmp	r3, #0
 800c706:	d06e      	beq.n	800c7e6 <_dtoa_r+0x90e>
 800c708:	ee18 0a10 	vmov	r0, s16
 800c70c:	4631      	mov	r1, r6
 800c70e:	f000 fc63 	bl	800cfd8 <__mcmp>
 800c712:	2800      	cmp	r0, #0
 800c714:	da67      	bge.n	800c7e6 <_dtoa_r+0x90e>
 800c716:	9b00      	ldr	r3, [sp, #0]
 800c718:	3b01      	subs	r3, #1
 800c71a:	ee18 1a10 	vmov	r1, s16
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	220a      	movs	r2, #10
 800c722:	2300      	movs	r3, #0
 800c724:	4620      	mov	r0, r4
 800c726:	f000 fa37 	bl	800cb98 <__multadd>
 800c72a:	9b08      	ldr	r3, [sp, #32]
 800c72c:	ee08 0a10 	vmov	s16, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 81b1 	beq.w	800ca98 <_dtoa_r+0xbc0>
 800c736:	2300      	movs	r3, #0
 800c738:	4639      	mov	r1, r7
 800c73a:	220a      	movs	r2, #10
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fa2b 	bl	800cb98 <__multadd>
 800c742:	9b02      	ldr	r3, [sp, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	4607      	mov	r7, r0
 800c748:	f300 808e 	bgt.w	800c868 <_dtoa_r+0x990>
 800c74c:	9b06      	ldr	r3, [sp, #24]
 800c74e:	2b02      	cmp	r3, #2
 800c750:	dc51      	bgt.n	800c7f6 <_dtoa_r+0x91e>
 800c752:	e089      	b.n	800c868 <_dtoa_r+0x990>
 800c754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c75a:	e74b      	b.n	800c5f4 <_dtoa_r+0x71c>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	1e5e      	subs	r6, r3, #1
 800c760:	9b07      	ldr	r3, [sp, #28]
 800c762:	42b3      	cmp	r3, r6
 800c764:	bfbf      	itttt	lt
 800c766:	9b07      	ldrlt	r3, [sp, #28]
 800c768:	9607      	strlt	r6, [sp, #28]
 800c76a:	1af2      	sublt	r2, r6, r3
 800c76c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c76e:	bfb6      	itet	lt
 800c770:	189b      	addlt	r3, r3, r2
 800c772:	1b9e      	subge	r6, r3, r6
 800c774:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	bfb8      	it	lt
 800c77a:	2600      	movlt	r6, #0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	bfb7      	itett	lt
 800c780:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c784:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c788:	1a9d      	sublt	r5, r3, r2
 800c78a:	2300      	movlt	r3, #0
 800c78c:	e734      	b.n	800c5f8 <_dtoa_r+0x720>
 800c78e:	9e07      	ldr	r6, [sp, #28]
 800c790:	9d04      	ldr	r5, [sp, #16]
 800c792:	9f08      	ldr	r7, [sp, #32]
 800c794:	e73b      	b.n	800c60e <_dtoa_r+0x736>
 800c796:	9a07      	ldr	r2, [sp, #28]
 800c798:	e767      	b.n	800c66a <_dtoa_r+0x792>
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	dc18      	bgt.n	800c7d2 <_dtoa_r+0x8fa>
 800c7a0:	f1ba 0f00 	cmp.w	sl, #0
 800c7a4:	d115      	bne.n	800c7d2 <_dtoa_r+0x8fa>
 800c7a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7aa:	b993      	cbnz	r3, 800c7d2 <_dtoa_r+0x8fa>
 800c7ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7b0:	0d1b      	lsrs	r3, r3, #20
 800c7b2:	051b      	lsls	r3, r3, #20
 800c7b4:	b183      	cbz	r3, 800c7d8 <_dtoa_r+0x900>
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	9b05      	ldr	r3, [sp, #20]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	f04f 0801 	mov.w	r8, #1
 800c7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f47f af6a 	bne.w	800c6a2 <_dtoa_r+0x7ca>
 800c7ce:	2001      	movs	r0, #1
 800c7d0:	e76f      	b.n	800c6b2 <_dtoa_r+0x7da>
 800c7d2:	f04f 0800 	mov.w	r8, #0
 800c7d6:	e7f6      	b.n	800c7c6 <_dtoa_r+0x8ee>
 800c7d8:	4698      	mov	r8, r3
 800c7da:	e7f4      	b.n	800c7c6 <_dtoa_r+0x8ee>
 800c7dc:	f43f af7d 	beq.w	800c6da <_dtoa_r+0x802>
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	301c      	adds	r0, #28
 800c7e4:	e772      	b.n	800c6cc <_dtoa_r+0x7f4>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dc37      	bgt.n	800c85c <_dtoa_r+0x984>
 800c7ec:	9b06      	ldr	r3, [sp, #24]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	dd34      	ble.n	800c85c <_dtoa_r+0x984>
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	9302      	str	r3, [sp, #8]
 800c7f6:	9b02      	ldr	r3, [sp, #8]
 800c7f8:	b96b      	cbnz	r3, 800c816 <_dtoa_r+0x93e>
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	2205      	movs	r2, #5
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 f9ca 	bl	800cb98 <__multadd>
 800c804:	4601      	mov	r1, r0
 800c806:	4606      	mov	r6, r0
 800c808:	ee18 0a10 	vmov	r0, s16
 800c80c:	f000 fbe4 	bl	800cfd8 <__mcmp>
 800c810:	2800      	cmp	r0, #0
 800c812:	f73f adbb 	bgt.w	800c38c <_dtoa_r+0x4b4>
 800c816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c818:	9d01      	ldr	r5, [sp, #4]
 800c81a:	43db      	mvns	r3, r3
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	f04f 0800 	mov.w	r8, #0
 800c822:	4631      	mov	r1, r6
 800c824:	4620      	mov	r0, r4
 800c826:	f000 f995 	bl	800cb54 <_Bfree>
 800c82a:	2f00      	cmp	r7, #0
 800c82c:	f43f aea4 	beq.w	800c578 <_dtoa_r+0x6a0>
 800c830:	f1b8 0f00 	cmp.w	r8, #0
 800c834:	d005      	beq.n	800c842 <_dtoa_r+0x96a>
 800c836:	45b8      	cmp	r8, r7
 800c838:	d003      	beq.n	800c842 <_dtoa_r+0x96a>
 800c83a:	4641      	mov	r1, r8
 800c83c:	4620      	mov	r0, r4
 800c83e:	f000 f989 	bl	800cb54 <_Bfree>
 800c842:	4639      	mov	r1, r7
 800c844:	4620      	mov	r0, r4
 800c846:	f000 f985 	bl	800cb54 <_Bfree>
 800c84a:	e695      	b.n	800c578 <_dtoa_r+0x6a0>
 800c84c:	2600      	movs	r6, #0
 800c84e:	4637      	mov	r7, r6
 800c850:	e7e1      	b.n	800c816 <_dtoa_r+0x93e>
 800c852:	9700      	str	r7, [sp, #0]
 800c854:	4637      	mov	r7, r6
 800c856:	e599      	b.n	800c38c <_dtoa_r+0x4b4>
 800c858:	40240000 	.word	0x40240000
 800c85c:	9b08      	ldr	r3, [sp, #32]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 80ca 	beq.w	800c9f8 <_dtoa_r+0xb20>
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	9302      	str	r3, [sp, #8]
 800c868:	2d00      	cmp	r5, #0
 800c86a:	dd05      	ble.n	800c878 <_dtoa_r+0x9a0>
 800c86c:	4639      	mov	r1, r7
 800c86e:	462a      	mov	r2, r5
 800c870:	4620      	mov	r0, r4
 800c872:	f000 fb41 	bl	800cef8 <__lshift>
 800c876:	4607      	mov	r7, r0
 800c878:	f1b8 0f00 	cmp.w	r8, #0
 800c87c:	d05b      	beq.n	800c936 <_dtoa_r+0xa5e>
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	4620      	mov	r0, r4
 800c882:	f000 f927 	bl	800cad4 <_Balloc>
 800c886:	4605      	mov	r5, r0
 800c888:	b928      	cbnz	r0, 800c896 <_dtoa_r+0x9be>
 800c88a:	4b87      	ldr	r3, [pc, #540]	; (800caa8 <_dtoa_r+0xbd0>)
 800c88c:	4602      	mov	r2, r0
 800c88e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c892:	f7ff bb3b 	b.w	800bf0c <_dtoa_r+0x34>
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	3202      	adds	r2, #2
 800c89a:	0092      	lsls	r2, r2, #2
 800c89c:	f107 010c 	add.w	r1, r7, #12
 800c8a0:	300c      	adds	r0, #12
 800c8a2:	f7fe fcf3 	bl	800b28c <memcpy>
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 fb24 	bl	800cef8 <__lshift>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	f103 0901 	add.w	r9, r3, #1
 800c8b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	9305      	str	r3, [sp, #20]
 800c8be:	f00a 0301 	and.w	r3, sl, #1
 800c8c2:	46b8      	mov	r8, r7
 800c8c4:	9304      	str	r3, [sp, #16]
 800c8c6:	4607      	mov	r7, r0
 800c8c8:	4631      	mov	r1, r6
 800c8ca:	ee18 0a10 	vmov	r0, s16
 800c8ce:	f7ff fa75 	bl	800bdbc <quorem>
 800c8d2:	4641      	mov	r1, r8
 800c8d4:	9002      	str	r0, [sp, #8]
 800c8d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c8da:	ee18 0a10 	vmov	r0, s16
 800c8de:	f000 fb7b 	bl	800cfd8 <__mcmp>
 800c8e2:	463a      	mov	r2, r7
 800c8e4:	9003      	str	r0, [sp, #12]
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f000 fb91 	bl	800d010 <__mdiff>
 800c8ee:	68c2      	ldr	r2, [r0, #12]
 800c8f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	bb02      	cbnz	r2, 800c93a <_dtoa_r+0xa62>
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	ee18 0a10 	vmov	r0, s16
 800c8fe:	f000 fb6b 	bl	800cfd8 <__mcmp>
 800c902:	4602      	mov	r2, r0
 800c904:	4629      	mov	r1, r5
 800c906:	4620      	mov	r0, r4
 800c908:	9207      	str	r2, [sp, #28]
 800c90a:	f000 f923 	bl	800cb54 <_Bfree>
 800c90e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c912:	ea43 0102 	orr.w	r1, r3, r2
 800c916:	9b04      	ldr	r3, [sp, #16]
 800c918:	430b      	orrs	r3, r1
 800c91a:	464d      	mov	r5, r9
 800c91c:	d10f      	bne.n	800c93e <_dtoa_r+0xa66>
 800c91e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c922:	d02a      	beq.n	800c97a <_dtoa_r+0xaa2>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd02      	ble.n	800c930 <_dtoa_r+0xa58>
 800c92a:	9b02      	ldr	r3, [sp, #8]
 800c92c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c930:	f88b a000 	strb.w	sl, [fp]
 800c934:	e775      	b.n	800c822 <_dtoa_r+0x94a>
 800c936:	4638      	mov	r0, r7
 800c938:	e7ba      	b.n	800c8b0 <_dtoa_r+0x9d8>
 800c93a:	2201      	movs	r2, #1
 800c93c:	e7e2      	b.n	800c904 <_dtoa_r+0xa2c>
 800c93e:	9b03      	ldr	r3, [sp, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	db04      	blt.n	800c94e <_dtoa_r+0xa76>
 800c944:	9906      	ldr	r1, [sp, #24]
 800c946:	430b      	orrs	r3, r1
 800c948:	9904      	ldr	r1, [sp, #16]
 800c94a:	430b      	orrs	r3, r1
 800c94c:	d122      	bne.n	800c994 <_dtoa_r+0xabc>
 800c94e:	2a00      	cmp	r2, #0
 800c950:	ddee      	ble.n	800c930 <_dtoa_r+0xa58>
 800c952:	ee18 1a10 	vmov	r1, s16
 800c956:	2201      	movs	r2, #1
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 facd 	bl	800cef8 <__lshift>
 800c95e:	4631      	mov	r1, r6
 800c960:	ee08 0a10 	vmov	s16, r0
 800c964:	f000 fb38 	bl	800cfd8 <__mcmp>
 800c968:	2800      	cmp	r0, #0
 800c96a:	dc03      	bgt.n	800c974 <_dtoa_r+0xa9c>
 800c96c:	d1e0      	bne.n	800c930 <_dtoa_r+0xa58>
 800c96e:	f01a 0f01 	tst.w	sl, #1
 800c972:	d0dd      	beq.n	800c930 <_dtoa_r+0xa58>
 800c974:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c978:	d1d7      	bne.n	800c92a <_dtoa_r+0xa52>
 800c97a:	2339      	movs	r3, #57	; 0x39
 800c97c:	f88b 3000 	strb.w	r3, [fp]
 800c980:	462b      	mov	r3, r5
 800c982:	461d      	mov	r5, r3
 800c984:	3b01      	subs	r3, #1
 800c986:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c98a:	2a39      	cmp	r2, #57	; 0x39
 800c98c:	d071      	beq.n	800ca72 <_dtoa_r+0xb9a>
 800c98e:	3201      	adds	r2, #1
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	e746      	b.n	800c822 <_dtoa_r+0x94a>
 800c994:	2a00      	cmp	r2, #0
 800c996:	dd07      	ble.n	800c9a8 <_dtoa_r+0xad0>
 800c998:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c99c:	d0ed      	beq.n	800c97a <_dtoa_r+0xaa2>
 800c99e:	f10a 0301 	add.w	r3, sl, #1
 800c9a2:	f88b 3000 	strb.w	r3, [fp]
 800c9a6:	e73c      	b.n	800c822 <_dtoa_r+0x94a>
 800c9a8:	9b05      	ldr	r3, [sp, #20]
 800c9aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c9ae:	4599      	cmp	r9, r3
 800c9b0:	d047      	beq.n	800ca42 <_dtoa_r+0xb6a>
 800c9b2:	ee18 1a10 	vmov	r1, s16
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	220a      	movs	r2, #10
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 f8ec 	bl	800cb98 <__multadd>
 800c9c0:	45b8      	cmp	r8, r7
 800c9c2:	ee08 0a10 	vmov	s16, r0
 800c9c6:	f04f 0300 	mov.w	r3, #0
 800c9ca:	f04f 020a 	mov.w	r2, #10
 800c9ce:	4641      	mov	r1, r8
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	d106      	bne.n	800c9e2 <_dtoa_r+0xb0a>
 800c9d4:	f000 f8e0 	bl	800cb98 <__multadd>
 800c9d8:	4680      	mov	r8, r0
 800c9da:	4607      	mov	r7, r0
 800c9dc:	f109 0901 	add.w	r9, r9, #1
 800c9e0:	e772      	b.n	800c8c8 <_dtoa_r+0x9f0>
 800c9e2:	f000 f8d9 	bl	800cb98 <__multadd>
 800c9e6:	4639      	mov	r1, r7
 800c9e8:	4680      	mov	r8, r0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	220a      	movs	r2, #10
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 f8d2 	bl	800cb98 <__multadd>
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	e7f1      	b.n	800c9dc <_dtoa_r+0xb04>
 800c9f8:	9b03      	ldr	r3, [sp, #12]
 800c9fa:	9302      	str	r3, [sp, #8]
 800c9fc:	9d01      	ldr	r5, [sp, #4]
 800c9fe:	ee18 0a10 	vmov	r0, s16
 800ca02:	4631      	mov	r1, r6
 800ca04:	f7ff f9da 	bl	800bdbc <quorem>
 800ca08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	f805 ab01 	strb.w	sl, [r5], #1
 800ca12:	1aea      	subs	r2, r5, r3
 800ca14:	9b02      	ldr	r3, [sp, #8]
 800ca16:	4293      	cmp	r3, r2
 800ca18:	dd09      	ble.n	800ca2e <_dtoa_r+0xb56>
 800ca1a:	ee18 1a10 	vmov	r1, s16
 800ca1e:	2300      	movs	r3, #0
 800ca20:	220a      	movs	r2, #10
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 f8b8 	bl	800cb98 <__multadd>
 800ca28:	ee08 0a10 	vmov	s16, r0
 800ca2c:	e7e7      	b.n	800c9fe <_dtoa_r+0xb26>
 800ca2e:	9b02      	ldr	r3, [sp, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	bfc8      	it	gt
 800ca34:	461d      	movgt	r5, r3
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	bfd8      	it	le
 800ca3a:	2501      	movle	r5, #1
 800ca3c:	441d      	add	r5, r3
 800ca3e:	f04f 0800 	mov.w	r8, #0
 800ca42:	ee18 1a10 	vmov	r1, s16
 800ca46:	2201      	movs	r2, #1
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f000 fa55 	bl	800cef8 <__lshift>
 800ca4e:	4631      	mov	r1, r6
 800ca50:	ee08 0a10 	vmov	s16, r0
 800ca54:	f000 fac0 	bl	800cfd8 <__mcmp>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	dc91      	bgt.n	800c980 <_dtoa_r+0xaa8>
 800ca5c:	d102      	bne.n	800ca64 <_dtoa_r+0xb8c>
 800ca5e:	f01a 0f01 	tst.w	sl, #1
 800ca62:	d18d      	bne.n	800c980 <_dtoa_r+0xaa8>
 800ca64:	462b      	mov	r3, r5
 800ca66:	461d      	mov	r5, r3
 800ca68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca6c:	2a30      	cmp	r2, #48	; 0x30
 800ca6e:	d0fa      	beq.n	800ca66 <_dtoa_r+0xb8e>
 800ca70:	e6d7      	b.n	800c822 <_dtoa_r+0x94a>
 800ca72:	9a01      	ldr	r2, [sp, #4]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d184      	bne.n	800c982 <_dtoa_r+0xaaa>
 800ca78:	9b00      	ldr	r3, [sp, #0]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	2331      	movs	r3, #49	; 0x31
 800ca80:	7013      	strb	r3, [r2, #0]
 800ca82:	e6ce      	b.n	800c822 <_dtoa_r+0x94a>
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <_dtoa_r+0xbd4>)
 800ca86:	f7ff ba95 	b.w	800bfb4 <_dtoa_r+0xdc>
 800ca8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f47f aa6e 	bne.w	800bf6e <_dtoa_r+0x96>
 800ca92:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <_dtoa_r+0xbd8>)
 800ca94:	f7ff ba8e 	b.w	800bfb4 <_dtoa_r+0xdc>
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	dcae      	bgt.n	800c9fc <_dtoa_r+0xb24>
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	f73f aea8 	bgt.w	800c7f6 <_dtoa_r+0x91e>
 800caa6:	e7a9      	b.n	800c9fc <_dtoa_r+0xb24>
 800caa8:	0800e2db 	.word	0x0800e2db
 800caac:	0800e238 	.word	0x0800e238
 800cab0:	0800e25c 	.word	0x0800e25c

0800cab4 <_localeconv_r>:
 800cab4:	4800      	ldr	r0, [pc, #0]	; (800cab8 <_localeconv_r+0x4>)
 800cab6:	4770      	bx	lr
 800cab8:	20000434 	.word	0x20000434

0800cabc <__malloc_lock>:
 800cabc:	4801      	ldr	r0, [pc, #4]	; (800cac4 <__malloc_lock+0x8>)
 800cabe:	f000 bd5e 	b.w	800d57e <__retarget_lock_acquire_recursive>
 800cac2:	bf00      	nop
 800cac4:	20001a7c 	.word	0x20001a7c

0800cac8 <__malloc_unlock>:
 800cac8:	4801      	ldr	r0, [pc, #4]	; (800cad0 <__malloc_unlock+0x8>)
 800caca:	f000 bd59 	b.w	800d580 <__retarget_lock_release_recursive>
 800cace:	bf00      	nop
 800cad0:	20001a7c 	.word	0x20001a7c

0800cad4 <_Balloc>:
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cad8:	4604      	mov	r4, r0
 800cada:	460d      	mov	r5, r1
 800cadc:	b976      	cbnz	r6, 800cafc <_Balloc+0x28>
 800cade:	2010      	movs	r0, #16
 800cae0:	f7fe fbcc 	bl	800b27c <malloc>
 800cae4:	4602      	mov	r2, r0
 800cae6:	6260      	str	r0, [r4, #36]	; 0x24
 800cae8:	b920      	cbnz	r0, 800caf4 <_Balloc+0x20>
 800caea:	4b18      	ldr	r3, [pc, #96]	; (800cb4c <_Balloc+0x78>)
 800caec:	4818      	ldr	r0, [pc, #96]	; (800cb50 <_Balloc+0x7c>)
 800caee:	2166      	movs	r1, #102	; 0x66
 800caf0:	f000 fd14 	bl	800d51c <__assert_func>
 800caf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caf8:	6006      	str	r6, [r0, #0]
 800cafa:	60c6      	str	r6, [r0, #12]
 800cafc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cafe:	68f3      	ldr	r3, [r6, #12]
 800cb00:	b183      	cbz	r3, 800cb24 <_Balloc+0x50>
 800cb02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb0a:	b9b8      	cbnz	r0, 800cb3c <_Balloc+0x68>
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb12:	1d72      	adds	r2, r6, #5
 800cb14:	0092      	lsls	r2, r2, #2
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 fb60 	bl	800d1dc <_calloc_r>
 800cb1c:	b160      	cbz	r0, 800cb38 <_Balloc+0x64>
 800cb1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb22:	e00e      	b.n	800cb42 <_Balloc+0x6e>
 800cb24:	2221      	movs	r2, #33	; 0x21
 800cb26:	2104      	movs	r1, #4
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fb57 	bl	800d1dc <_calloc_r>
 800cb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb30:	60f0      	str	r0, [r6, #12]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e4      	bne.n	800cb02 <_Balloc+0x2e>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	6802      	ldr	r2, [r0, #0]
 800cb3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb42:	2300      	movs	r3, #0
 800cb44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb48:	e7f7      	b.n	800cb3a <_Balloc+0x66>
 800cb4a:	bf00      	nop
 800cb4c:	0800e269 	.word	0x0800e269
 800cb50:	0800e2ec 	.word	0x0800e2ec

0800cb54 <_Bfree>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb58:	4605      	mov	r5, r0
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	b976      	cbnz	r6, 800cb7c <_Bfree+0x28>
 800cb5e:	2010      	movs	r0, #16
 800cb60:	f7fe fb8c 	bl	800b27c <malloc>
 800cb64:	4602      	mov	r2, r0
 800cb66:	6268      	str	r0, [r5, #36]	; 0x24
 800cb68:	b920      	cbnz	r0, 800cb74 <_Bfree+0x20>
 800cb6a:	4b09      	ldr	r3, [pc, #36]	; (800cb90 <_Bfree+0x3c>)
 800cb6c:	4809      	ldr	r0, [pc, #36]	; (800cb94 <_Bfree+0x40>)
 800cb6e:	218a      	movs	r1, #138	; 0x8a
 800cb70:	f000 fcd4 	bl	800d51c <__assert_func>
 800cb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb78:	6006      	str	r6, [r0, #0]
 800cb7a:	60c6      	str	r6, [r0, #12]
 800cb7c:	b13c      	cbz	r4, 800cb8e <_Bfree+0x3a>
 800cb7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb80:	6862      	ldr	r2, [r4, #4]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb88:	6021      	str	r1, [r4, #0]
 800cb8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	0800e269 	.word	0x0800e269
 800cb94:	0800e2ec 	.word	0x0800e2ec

0800cb98 <__multadd>:
 800cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	690d      	ldr	r5, [r1, #16]
 800cb9e:	4607      	mov	r7, r0
 800cba0:	460c      	mov	r4, r1
 800cba2:	461e      	mov	r6, r3
 800cba4:	f101 0c14 	add.w	ip, r1, #20
 800cba8:	2000      	movs	r0, #0
 800cbaa:	f8dc 3000 	ldr.w	r3, [ip]
 800cbae:	b299      	uxth	r1, r3
 800cbb0:	fb02 6101 	mla	r1, r2, r1, r6
 800cbb4:	0c1e      	lsrs	r6, r3, #16
 800cbb6:	0c0b      	lsrs	r3, r1, #16
 800cbb8:	fb02 3306 	mla	r3, r2, r6, r3
 800cbbc:	b289      	uxth	r1, r1
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbc4:	4285      	cmp	r5, r0
 800cbc6:	f84c 1b04 	str.w	r1, [ip], #4
 800cbca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbce:	dcec      	bgt.n	800cbaa <__multadd+0x12>
 800cbd0:	b30e      	cbz	r6, 800cc16 <__multadd+0x7e>
 800cbd2:	68a3      	ldr	r3, [r4, #8]
 800cbd4:	42ab      	cmp	r3, r5
 800cbd6:	dc19      	bgt.n	800cc0c <__multadd+0x74>
 800cbd8:	6861      	ldr	r1, [r4, #4]
 800cbda:	4638      	mov	r0, r7
 800cbdc:	3101      	adds	r1, #1
 800cbde:	f7ff ff79 	bl	800cad4 <_Balloc>
 800cbe2:	4680      	mov	r8, r0
 800cbe4:	b928      	cbnz	r0, 800cbf2 <__multadd+0x5a>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	4b0c      	ldr	r3, [pc, #48]	; (800cc1c <__multadd+0x84>)
 800cbea:	480d      	ldr	r0, [pc, #52]	; (800cc20 <__multadd+0x88>)
 800cbec:	21b5      	movs	r1, #181	; 0xb5
 800cbee:	f000 fc95 	bl	800d51c <__assert_func>
 800cbf2:	6922      	ldr	r2, [r4, #16]
 800cbf4:	3202      	adds	r2, #2
 800cbf6:	f104 010c 	add.w	r1, r4, #12
 800cbfa:	0092      	lsls	r2, r2, #2
 800cbfc:	300c      	adds	r0, #12
 800cbfe:	f7fe fb45 	bl	800b28c <memcpy>
 800cc02:	4621      	mov	r1, r4
 800cc04:	4638      	mov	r0, r7
 800cc06:	f7ff ffa5 	bl	800cb54 <_Bfree>
 800cc0a:	4644      	mov	r4, r8
 800cc0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc10:	3501      	adds	r5, #1
 800cc12:	615e      	str	r6, [r3, #20]
 800cc14:	6125      	str	r5, [r4, #16]
 800cc16:	4620      	mov	r0, r4
 800cc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1c:	0800e2db 	.word	0x0800e2db
 800cc20:	0800e2ec 	.word	0x0800e2ec

0800cc24 <__hi0bits>:
 800cc24:	0c03      	lsrs	r3, r0, #16
 800cc26:	041b      	lsls	r3, r3, #16
 800cc28:	b9d3      	cbnz	r3, 800cc60 <__hi0bits+0x3c>
 800cc2a:	0400      	lsls	r0, r0, #16
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc32:	bf04      	itt	eq
 800cc34:	0200      	lsleq	r0, r0, #8
 800cc36:	3308      	addeq	r3, #8
 800cc38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc3c:	bf04      	itt	eq
 800cc3e:	0100      	lsleq	r0, r0, #4
 800cc40:	3304      	addeq	r3, #4
 800cc42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc46:	bf04      	itt	eq
 800cc48:	0080      	lsleq	r0, r0, #2
 800cc4a:	3302      	addeq	r3, #2
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	db05      	blt.n	800cc5c <__hi0bits+0x38>
 800cc50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc54:	f103 0301 	add.w	r3, r3, #1
 800cc58:	bf08      	it	eq
 800cc5a:	2320      	moveq	r3, #32
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	4770      	bx	lr
 800cc60:	2300      	movs	r3, #0
 800cc62:	e7e4      	b.n	800cc2e <__hi0bits+0xa>

0800cc64 <__lo0bits>:
 800cc64:	6803      	ldr	r3, [r0, #0]
 800cc66:	f013 0207 	ands.w	r2, r3, #7
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	d00b      	beq.n	800cc86 <__lo0bits+0x22>
 800cc6e:	07da      	lsls	r2, r3, #31
 800cc70:	d423      	bmi.n	800ccba <__lo0bits+0x56>
 800cc72:	0798      	lsls	r0, r3, #30
 800cc74:	bf49      	itett	mi
 800cc76:	085b      	lsrmi	r3, r3, #1
 800cc78:	089b      	lsrpl	r3, r3, #2
 800cc7a:	2001      	movmi	r0, #1
 800cc7c:	600b      	strmi	r3, [r1, #0]
 800cc7e:	bf5c      	itt	pl
 800cc80:	600b      	strpl	r3, [r1, #0]
 800cc82:	2002      	movpl	r0, #2
 800cc84:	4770      	bx	lr
 800cc86:	b298      	uxth	r0, r3
 800cc88:	b9a8      	cbnz	r0, 800ccb6 <__lo0bits+0x52>
 800cc8a:	0c1b      	lsrs	r3, r3, #16
 800cc8c:	2010      	movs	r0, #16
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	b90a      	cbnz	r2, 800cc96 <__lo0bits+0x32>
 800cc92:	3008      	adds	r0, #8
 800cc94:	0a1b      	lsrs	r3, r3, #8
 800cc96:	071a      	lsls	r2, r3, #28
 800cc98:	bf04      	itt	eq
 800cc9a:	091b      	lsreq	r3, r3, #4
 800cc9c:	3004      	addeq	r0, #4
 800cc9e:	079a      	lsls	r2, r3, #30
 800cca0:	bf04      	itt	eq
 800cca2:	089b      	lsreq	r3, r3, #2
 800cca4:	3002      	addeq	r0, #2
 800cca6:	07da      	lsls	r2, r3, #31
 800cca8:	d403      	bmi.n	800ccb2 <__lo0bits+0x4e>
 800ccaa:	085b      	lsrs	r3, r3, #1
 800ccac:	f100 0001 	add.w	r0, r0, #1
 800ccb0:	d005      	beq.n	800ccbe <__lo0bits+0x5a>
 800ccb2:	600b      	str	r3, [r1, #0]
 800ccb4:	4770      	bx	lr
 800ccb6:	4610      	mov	r0, r2
 800ccb8:	e7e9      	b.n	800cc8e <__lo0bits+0x2a>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	4770      	bx	lr
 800ccbe:	2020      	movs	r0, #32
 800ccc0:	4770      	bx	lr
	...

0800ccc4 <__i2b>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	2101      	movs	r1, #1
 800ccca:	f7ff ff03 	bl	800cad4 <_Balloc>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	b928      	cbnz	r0, 800ccde <__i2b+0x1a>
 800ccd2:	4b05      	ldr	r3, [pc, #20]	; (800cce8 <__i2b+0x24>)
 800ccd4:	4805      	ldr	r0, [pc, #20]	; (800ccec <__i2b+0x28>)
 800ccd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccda:	f000 fc1f 	bl	800d51c <__assert_func>
 800ccde:	2301      	movs	r3, #1
 800cce0:	6144      	str	r4, [r0, #20]
 800cce2:	6103      	str	r3, [r0, #16]
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	bf00      	nop
 800cce8:	0800e2db 	.word	0x0800e2db
 800ccec:	0800e2ec 	.word	0x0800e2ec

0800ccf0 <__multiply>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	4691      	mov	r9, r2
 800ccf6:	690a      	ldr	r2, [r1, #16]
 800ccf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	bfb8      	it	lt
 800cd00:	460b      	movlt	r3, r1
 800cd02:	460c      	mov	r4, r1
 800cd04:	bfbc      	itt	lt
 800cd06:	464c      	movlt	r4, r9
 800cd08:	4699      	movlt	r9, r3
 800cd0a:	6927      	ldr	r7, [r4, #16]
 800cd0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd10:	68a3      	ldr	r3, [r4, #8]
 800cd12:	6861      	ldr	r1, [r4, #4]
 800cd14:	eb07 060a 	add.w	r6, r7, sl
 800cd18:	42b3      	cmp	r3, r6
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	bfb8      	it	lt
 800cd1e:	3101      	addlt	r1, #1
 800cd20:	f7ff fed8 	bl	800cad4 <_Balloc>
 800cd24:	b930      	cbnz	r0, 800cd34 <__multiply+0x44>
 800cd26:	4602      	mov	r2, r0
 800cd28:	4b44      	ldr	r3, [pc, #272]	; (800ce3c <__multiply+0x14c>)
 800cd2a:	4845      	ldr	r0, [pc, #276]	; (800ce40 <__multiply+0x150>)
 800cd2c:	f240 115d 	movw	r1, #349	; 0x15d
 800cd30:	f000 fbf4 	bl	800d51c <__assert_func>
 800cd34:	f100 0514 	add.w	r5, r0, #20
 800cd38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd3c:	462b      	mov	r3, r5
 800cd3e:	2200      	movs	r2, #0
 800cd40:	4543      	cmp	r3, r8
 800cd42:	d321      	bcc.n	800cd88 <__multiply+0x98>
 800cd44:	f104 0314 	add.w	r3, r4, #20
 800cd48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd4c:	f109 0314 	add.w	r3, r9, #20
 800cd50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	1b3a      	subs	r2, r7, r4
 800cd58:	3a15      	subs	r2, #21
 800cd5a:	f022 0203 	bic.w	r2, r2, #3
 800cd5e:	3204      	adds	r2, #4
 800cd60:	f104 0115 	add.w	r1, r4, #21
 800cd64:	428f      	cmp	r7, r1
 800cd66:	bf38      	it	cc
 800cd68:	2204      	movcc	r2, #4
 800cd6a:	9201      	str	r2, [sp, #4]
 800cd6c:	9a02      	ldr	r2, [sp, #8]
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d80c      	bhi.n	800cd8e <__multiply+0x9e>
 800cd74:	2e00      	cmp	r6, #0
 800cd76:	dd03      	ble.n	800cd80 <__multiply+0x90>
 800cd78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d05a      	beq.n	800ce36 <__multiply+0x146>
 800cd80:	6106      	str	r6, [r0, #16]
 800cd82:	b005      	add	sp, #20
 800cd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd88:	f843 2b04 	str.w	r2, [r3], #4
 800cd8c:	e7d8      	b.n	800cd40 <__multiply+0x50>
 800cd8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd92:	f1ba 0f00 	cmp.w	sl, #0
 800cd96:	d024      	beq.n	800cde2 <__multiply+0xf2>
 800cd98:	f104 0e14 	add.w	lr, r4, #20
 800cd9c:	46a9      	mov	r9, r5
 800cd9e:	f04f 0c00 	mov.w	ip, #0
 800cda2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cda6:	f8d9 1000 	ldr.w	r1, [r9]
 800cdaa:	fa1f fb82 	uxth.w	fp, r2
 800cdae:	b289      	uxth	r1, r1
 800cdb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdb8:	f8d9 2000 	ldr.w	r2, [r9]
 800cdbc:	4461      	add	r1, ip
 800cdbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdca:	b289      	uxth	r1, r1
 800cdcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdd0:	4577      	cmp	r7, lr
 800cdd2:	f849 1b04 	str.w	r1, [r9], #4
 800cdd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdda:	d8e2      	bhi.n	800cda2 <__multiply+0xb2>
 800cddc:	9a01      	ldr	r2, [sp, #4]
 800cdde:	f845 c002 	str.w	ip, [r5, r2]
 800cde2:	9a03      	ldr	r2, [sp, #12]
 800cde4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cde8:	3304      	adds	r3, #4
 800cdea:	f1b9 0f00 	cmp.w	r9, #0
 800cdee:	d020      	beq.n	800ce32 <__multiply+0x142>
 800cdf0:	6829      	ldr	r1, [r5, #0]
 800cdf2:	f104 0c14 	add.w	ip, r4, #20
 800cdf6:	46ae      	mov	lr, r5
 800cdf8:	f04f 0a00 	mov.w	sl, #0
 800cdfc:	f8bc b000 	ldrh.w	fp, [ip]
 800ce00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce04:	fb09 220b 	mla	r2, r9, fp, r2
 800ce08:	4492      	add	sl, r2
 800ce0a:	b289      	uxth	r1, r1
 800ce0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce10:	f84e 1b04 	str.w	r1, [lr], #4
 800ce14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce18:	f8be 1000 	ldrh.w	r1, [lr]
 800ce1c:	0c12      	lsrs	r2, r2, #16
 800ce1e:	fb09 1102 	mla	r1, r9, r2, r1
 800ce22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce26:	4567      	cmp	r7, ip
 800ce28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce2c:	d8e6      	bhi.n	800cdfc <__multiply+0x10c>
 800ce2e:	9a01      	ldr	r2, [sp, #4]
 800ce30:	50a9      	str	r1, [r5, r2]
 800ce32:	3504      	adds	r5, #4
 800ce34:	e79a      	b.n	800cd6c <__multiply+0x7c>
 800ce36:	3e01      	subs	r6, #1
 800ce38:	e79c      	b.n	800cd74 <__multiply+0x84>
 800ce3a:	bf00      	nop
 800ce3c:	0800e2db 	.word	0x0800e2db
 800ce40:	0800e2ec 	.word	0x0800e2ec

0800ce44 <__pow5mult>:
 800ce44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce48:	4615      	mov	r5, r2
 800ce4a:	f012 0203 	ands.w	r2, r2, #3
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460f      	mov	r7, r1
 800ce52:	d007      	beq.n	800ce64 <__pow5mult+0x20>
 800ce54:	4c25      	ldr	r4, [pc, #148]	; (800ceec <__pow5mult+0xa8>)
 800ce56:	3a01      	subs	r2, #1
 800ce58:	2300      	movs	r3, #0
 800ce5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce5e:	f7ff fe9b 	bl	800cb98 <__multadd>
 800ce62:	4607      	mov	r7, r0
 800ce64:	10ad      	asrs	r5, r5, #2
 800ce66:	d03d      	beq.n	800cee4 <__pow5mult+0xa0>
 800ce68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce6a:	b97c      	cbnz	r4, 800ce8c <__pow5mult+0x48>
 800ce6c:	2010      	movs	r0, #16
 800ce6e:	f7fe fa05 	bl	800b27c <malloc>
 800ce72:	4602      	mov	r2, r0
 800ce74:	6270      	str	r0, [r6, #36]	; 0x24
 800ce76:	b928      	cbnz	r0, 800ce84 <__pow5mult+0x40>
 800ce78:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <__pow5mult+0xac>)
 800ce7a:	481e      	ldr	r0, [pc, #120]	; (800cef4 <__pow5mult+0xb0>)
 800ce7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce80:	f000 fb4c 	bl	800d51c <__assert_func>
 800ce84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce88:	6004      	str	r4, [r0, #0]
 800ce8a:	60c4      	str	r4, [r0, #12]
 800ce8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce94:	b94c      	cbnz	r4, 800ceaa <__pow5mult+0x66>
 800ce96:	f240 2171 	movw	r1, #625	; 0x271
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f7ff ff12 	bl	800ccc4 <__i2b>
 800cea0:	2300      	movs	r3, #0
 800cea2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cea6:	4604      	mov	r4, r0
 800cea8:	6003      	str	r3, [r0, #0]
 800ceaa:	f04f 0900 	mov.w	r9, #0
 800ceae:	07eb      	lsls	r3, r5, #31
 800ceb0:	d50a      	bpl.n	800cec8 <__pow5mult+0x84>
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	4622      	mov	r2, r4
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f7ff ff1a 	bl	800ccf0 <__multiply>
 800cebc:	4639      	mov	r1, r7
 800cebe:	4680      	mov	r8, r0
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7ff fe47 	bl	800cb54 <_Bfree>
 800cec6:	4647      	mov	r7, r8
 800cec8:	106d      	asrs	r5, r5, #1
 800ceca:	d00b      	beq.n	800cee4 <__pow5mult+0xa0>
 800cecc:	6820      	ldr	r0, [r4, #0]
 800cece:	b938      	cbnz	r0, 800cee0 <__pow5mult+0x9c>
 800ced0:	4622      	mov	r2, r4
 800ced2:	4621      	mov	r1, r4
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7ff ff0b 	bl	800ccf0 <__multiply>
 800ceda:	6020      	str	r0, [r4, #0]
 800cedc:	f8c0 9000 	str.w	r9, [r0]
 800cee0:	4604      	mov	r4, r0
 800cee2:	e7e4      	b.n	800ceae <__pow5mult+0x6a>
 800cee4:	4638      	mov	r0, r7
 800cee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceea:	bf00      	nop
 800ceec:	0800e438 	.word	0x0800e438
 800cef0:	0800e269 	.word	0x0800e269
 800cef4:	0800e2ec 	.word	0x0800e2ec

0800cef8 <__lshift>:
 800cef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cefc:	460c      	mov	r4, r1
 800cefe:	6849      	ldr	r1, [r1, #4]
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf06:	68a3      	ldr	r3, [r4, #8]
 800cf08:	4607      	mov	r7, r0
 800cf0a:	4691      	mov	r9, r2
 800cf0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf10:	f108 0601 	add.w	r6, r8, #1
 800cf14:	42b3      	cmp	r3, r6
 800cf16:	db0b      	blt.n	800cf30 <__lshift+0x38>
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f7ff fddb 	bl	800cad4 <_Balloc>
 800cf1e:	4605      	mov	r5, r0
 800cf20:	b948      	cbnz	r0, 800cf36 <__lshift+0x3e>
 800cf22:	4602      	mov	r2, r0
 800cf24:	4b2a      	ldr	r3, [pc, #168]	; (800cfd0 <__lshift+0xd8>)
 800cf26:	482b      	ldr	r0, [pc, #172]	; (800cfd4 <__lshift+0xdc>)
 800cf28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf2c:	f000 faf6 	bl	800d51c <__assert_func>
 800cf30:	3101      	adds	r1, #1
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	e7ee      	b.n	800cf14 <__lshift+0x1c>
 800cf36:	2300      	movs	r3, #0
 800cf38:	f100 0114 	add.w	r1, r0, #20
 800cf3c:	f100 0210 	add.w	r2, r0, #16
 800cf40:	4618      	mov	r0, r3
 800cf42:	4553      	cmp	r3, sl
 800cf44:	db37      	blt.n	800cfb6 <__lshift+0xbe>
 800cf46:	6920      	ldr	r0, [r4, #16]
 800cf48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf4c:	f104 0314 	add.w	r3, r4, #20
 800cf50:	f019 091f 	ands.w	r9, r9, #31
 800cf54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf5c:	d02f      	beq.n	800cfbe <__lshift+0xc6>
 800cf5e:	f1c9 0e20 	rsb	lr, r9, #32
 800cf62:	468a      	mov	sl, r1
 800cf64:	f04f 0c00 	mov.w	ip, #0
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	fa02 f209 	lsl.w	r2, r2, r9
 800cf6e:	ea42 020c 	orr.w	r2, r2, ip
 800cf72:	f84a 2b04 	str.w	r2, [sl], #4
 800cf76:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7a:	4298      	cmp	r0, r3
 800cf7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf80:	d8f2      	bhi.n	800cf68 <__lshift+0x70>
 800cf82:	1b03      	subs	r3, r0, r4
 800cf84:	3b15      	subs	r3, #21
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	f104 0215 	add.w	r2, r4, #21
 800cf90:	4290      	cmp	r0, r2
 800cf92:	bf38      	it	cc
 800cf94:	2304      	movcc	r3, #4
 800cf96:	f841 c003 	str.w	ip, [r1, r3]
 800cf9a:	f1bc 0f00 	cmp.w	ip, #0
 800cf9e:	d001      	beq.n	800cfa4 <__lshift+0xac>
 800cfa0:	f108 0602 	add.w	r6, r8, #2
 800cfa4:	3e01      	subs	r6, #1
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	612e      	str	r6, [r5, #16]
 800cfaa:	4621      	mov	r1, r4
 800cfac:	f7ff fdd2 	bl	800cb54 <_Bfree>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfba:	3301      	adds	r3, #1
 800cfbc:	e7c1      	b.n	800cf42 <__lshift+0x4a>
 800cfbe:	3904      	subs	r1, #4
 800cfc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfc8:	4298      	cmp	r0, r3
 800cfca:	d8f9      	bhi.n	800cfc0 <__lshift+0xc8>
 800cfcc:	e7ea      	b.n	800cfa4 <__lshift+0xac>
 800cfce:	bf00      	nop
 800cfd0:	0800e2db 	.word	0x0800e2db
 800cfd4:	0800e2ec 	.word	0x0800e2ec

0800cfd8 <__mcmp>:
 800cfd8:	b530      	push	{r4, r5, lr}
 800cfda:	6902      	ldr	r2, [r0, #16]
 800cfdc:	690c      	ldr	r4, [r1, #16]
 800cfde:	1b12      	subs	r2, r2, r4
 800cfe0:	d10e      	bne.n	800d000 <__mcmp+0x28>
 800cfe2:	f100 0314 	add.w	r3, r0, #20
 800cfe6:	3114      	adds	r1, #20
 800cfe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cff8:	42a5      	cmp	r5, r4
 800cffa:	d003      	beq.n	800d004 <__mcmp+0x2c>
 800cffc:	d305      	bcc.n	800d00a <__mcmp+0x32>
 800cffe:	2201      	movs	r2, #1
 800d000:	4610      	mov	r0, r2
 800d002:	bd30      	pop	{r4, r5, pc}
 800d004:	4283      	cmp	r3, r0
 800d006:	d3f3      	bcc.n	800cff0 <__mcmp+0x18>
 800d008:	e7fa      	b.n	800d000 <__mcmp+0x28>
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	e7f7      	b.n	800d000 <__mcmp+0x28>

0800d010 <__mdiff>:
 800d010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	460c      	mov	r4, r1
 800d016:	4606      	mov	r6, r0
 800d018:	4611      	mov	r1, r2
 800d01a:	4620      	mov	r0, r4
 800d01c:	4690      	mov	r8, r2
 800d01e:	f7ff ffdb 	bl	800cfd8 <__mcmp>
 800d022:	1e05      	subs	r5, r0, #0
 800d024:	d110      	bne.n	800d048 <__mdiff+0x38>
 800d026:	4629      	mov	r1, r5
 800d028:	4630      	mov	r0, r6
 800d02a:	f7ff fd53 	bl	800cad4 <_Balloc>
 800d02e:	b930      	cbnz	r0, 800d03e <__mdiff+0x2e>
 800d030:	4b3a      	ldr	r3, [pc, #232]	; (800d11c <__mdiff+0x10c>)
 800d032:	4602      	mov	r2, r0
 800d034:	f240 2132 	movw	r1, #562	; 0x232
 800d038:	4839      	ldr	r0, [pc, #228]	; (800d120 <__mdiff+0x110>)
 800d03a:	f000 fa6f 	bl	800d51c <__assert_func>
 800d03e:	2301      	movs	r3, #1
 800d040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d048:	bfa4      	itt	ge
 800d04a:	4643      	movge	r3, r8
 800d04c:	46a0      	movge	r8, r4
 800d04e:	4630      	mov	r0, r6
 800d050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d054:	bfa6      	itte	ge
 800d056:	461c      	movge	r4, r3
 800d058:	2500      	movge	r5, #0
 800d05a:	2501      	movlt	r5, #1
 800d05c:	f7ff fd3a 	bl	800cad4 <_Balloc>
 800d060:	b920      	cbnz	r0, 800d06c <__mdiff+0x5c>
 800d062:	4b2e      	ldr	r3, [pc, #184]	; (800d11c <__mdiff+0x10c>)
 800d064:	4602      	mov	r2, r0
 800d066:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d06a:	e7e5      	b.n	800d038 <__mdiff+0x28>
 800d06c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d070:	6926      	ldr	r6, [r4, #16]
 800d072:	60c5      	str	r5, [r0, #12]
 800d074:	f104 0914 	add.w	r9, r4, #20
 800d078:	f108 0514 	add.w	r5, r8, #20
 800d07c:	f100 0e14 	add.w	lr, r0, #20
 800d080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d088:	f108 0210 	add.w	r2, r8, #16
 800d08c:	46f2      	mov	sl, lr
 800d08e:	2100      	movs	r1, #0
 800d090:	f859 3b04 	ldr.w	r3, [r9], #4
 800d094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d098:	fa1f f883 	uxth.w	r8, r3
 800d09c:	fa11 f18b 	uxtah	r1, r1, fp
 800d0a0:	0c1b      	lsrs	r3, r3, #16
 800d0a2:	eba1 0808 	sub.w	r8, r1, r8
 800d0a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0ae:	fa1f f888 	uxth.w	r8, r8
 800d0b2:	1419      	asrs	r1, r3, #16
 800d0b4:	454e      	cmp	r6, r9
 800d0b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0ba:	f84a 3b04 	str.w	r3, [sl], #4
 800d0be:	d8e7      	bhi.n	800d090 <__mdiff+0x80>
 800d0c0:	1b33      	subs	r3, r6, r4
 800d0c2:	3b15      	subs	r3, #21
 800d0c4:	f023 0303 	bic.w	r3, r3, #3
 800d0c8:	3304      	adds	r3, #4
 800d0ca:	3415      	adds	r4, #21
 800d0cc:	42a6      	cmp	r6, r4
 800d0ce:	bf38      	it	cc
 800d0d0:	2304      	movcc	r3, #4
 800d0d2:	441d      	add	r5, r3
 800d0d4:	4473      	add	r3, lr
 800d0d6:	469e      	mov	lr, r3
 800d0d8:	462e      	mov	r6, r5
 800d0da:	4566      	cmp	r6, ip
 800d0dc:	d30e      	bcc.n	800d0fc <__mdiff+0xec>
 800d0de:	f10c 0203 	add.w	r2, ip, #3
 800d0e2:	1b52      	subs	r2, r2, r5
 800d0e4:	f022 0203 	bic.w	r2, r2, #3
 800d0e8:	3d03      	subs	r5, #3
 800d0ea:	45ac      	cmp	ip, r5
 800d0ec:	bf38      	it	cc
 800d0ee:	2200      	movcc	r2, #0
 800d0f0:	441a      	add	r2, r3
 800d0f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d0f6:	b17b      	cbz	r3, 800d118 <__mdiff+0x108>
 800d0f8:	6107      	str	r7, [r0, #16]
 800d0fa:	e7a3      	b.n	800d044 <__mdiff+0x34>
 800d0fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d100:	fa11 f288 	uxtah	r2, r1, r8
 800d104:	1414      	asrs	r4, r2, #16
 800d106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d10a:	b292      	uxth	r2, r2
 800d10c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d110:	f84e 2b04 	str.w	r2, [lr], #4
 800d114:	1421      	asrs	r1, r4, #16
 800d116:	e7e0      	b.n	800d0da <__mdiff+0xca>
 800d118:	3f01      	subs	r7, #1
 800d11a:	e7ea      	b.n	800d0f2 <__mdiff+0xe2>
 800d11c:	0800e2db 	.word	0x0800e2db
 800d120:	0800e2ec 	.word	0x0800e2ec

0800d124 <__d2b>:
 800d124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d128:	4689      	mov	r9, r1
 800d12a:	2101      	movs	r1, #1
 800d12c:	ec57 6b10 	vmov	r6, r7, d0
 800d130:	4690      	mov	r8, r2
 800d132:	f7ff fccf 	bl	800cad4 <_Balloc>
 800d136:	4604      	mov	r4, r0
 800d138:	b930      	cbnz	r0, 800d148 <__d2b+0x24>
 800d13a:	4602      	mov	r2, r0
 800d13c:	4b25      	ldr	r3, [pc, #148]	; (800d1d4 <__d2b+0xb0>)
 800d13e:	4826      	ldr	r0, [pc, #152]	; (800d1d8 <__d2b+0xb4>)
 800d140:	f240 310a 	movw	r1, #778	; 0x30a
 800d144:	f000 f9ea 	bl	800d51c <__assert_func>
 800d148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d14c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d150:	bb35      	cbnz	r5, 800d1a0 <__d2b+0x7c>
 800d152:	2e00      	cmp	r6, #0
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	d028      	beq.n	800d1aa <__d2b+0x86>
 800d158:	4668      	mov	r0, sp
 800d15a:	9600      	str	r6, [sp, #0]
 800d15c:	f7ff fd82 	bl	800cc64 <__lo0bits>
 800d160:	9900      	ldr	r1, [sp, #0]
 800d162:	b300      	cbz	r0, 800d1a6 <__d2b+0x82>
 800d164:	9a01      	ldr	r2, [sp, #4]
 800d166:	f1c0 0320 	rsb	r3, r0, #32
 800d16a:	fa02 f303 	lsl.w	r3, r2, r3
 800d16e:	430b      	orrs	r3, r1
 800d170:	40c2      	lsrs	r2, r0
 800d172:	6163      	str	r3, [r4, #20]
 800d174:	9201      	str	r2, [sp, #4]
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	61a3      	str	r3, [r4, #24]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	bf14      	ite	ne
 800d17e:	2202      	movne	r2, #2
 800d180:	2201      	moveq	r2, #1
 800d182:	6122      	str	r2, [r4, #16]
 800d184:	b1d5      	cbz	r5, 800d1bc <__d2b+0x98>
 800d186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d18a:	4405      	add	r5, r0
 800d18c:	f8c9 5000 	str.w	r5, [r9]
 800d190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d194:	f8c8 0000 	str.w	r0, [r8]
 800d198:	4620      	mov	r0, r4
 800d19a:	b003      	add	sp, #12
 800d19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1a4:	e7d5      	b.n	800d152 <__d2b+0x2e>
 800d1a6:	6161      	str	r1, [r4, #20]
 800d1a8:	e7e5      	b.n	800d176 <__d2b+0x52>
 800d1aa:	a801      	add	r0, sp, #4
 800d1ac:	f7ff fd5a 	bl	800cc64 <__lo0bits>
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	6163      	str	r3, [r4, #20]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	6122      	str	r2, [r4, #16]
 800d1b8:	3020      	adds	r0, #32
 800d1ba:	e7e3      	b.n	800d184 <__d2b+0x60>
 800d1bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1c4:	f8c9 0000 	str.w	r0, [r9]
 800d1c8:	6918      	ldr	r0, [r3, #16]
 800d1ca:	f7ff fd2b 	bl	800cc24 <__hi0bits>
 800d1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1d2:	e7df      	b.n	800d194 <__d2b+0x70>
 800d1d4:	0800e2db 	.word	0x0800e2db
 800d1d8:	0800e2ec 	.word	0x0800e2ec

0800d1dc <_calloc_r>:
 800d1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1de:	fba1 2402 	umull	r2, r4, r1, r2
 800d1e2:	b94c      	cbnz	r4, 800d1f8 <_calloc_r+0x1c>
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	9201      	str	r2, [sp, #4]
 800d1e8:	f7fe f8d2 	bl	800b390 <_malloc_r>
 800d1ec:	9a01      	ldr	r2, [sp, #4]
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	b930      	cbnz	r0, 800d200 <_calloc_r+0x24>
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	b003      	add	sp, #12
 800d1f6:	bd30      	pop	{r4, r5, pc}
 800d1f8:	220c      	movs	r2, #12
 800d1fa:	6002      	str	r2, [r0, #0]
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	e7f8      	b.n	800d1f2 <_calloc_r+0x16>
 800d200:	4621      	mov	r1, r4
 800d202:	f7fe f851 	bl	800b2a8 <memset>
 800d206:	e7f4      	b.n	800d1f2 <_calloc_r+0x16>

0800d208 <_realloc_r>:
 800d208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20c:	4680      	mov	r8, r0
 800d20e:	4614      	mov	r4, r2
 800d210:	460e      	mov	r6, r1
 800d212:	b921      	cbnz	r1, 800d21e <_realloc_r+0x16>
 800d214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d218:	4611      	mov	r1, r2
 800d21a:	f7fe b8b9 	b.w	800b390 <_malloc_r>
 800d21e:	b92a      	cbnz	r2, 800d22c <_realloc_r+0x24>
 800d220:	f7fe f84a 	bl	800b2b8 <_free_r>
 800d224:	4625      	mov	r5, r4
 800d226:	4628      	mov	r0, r5
 800d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22c:	f000 f9d5 	bl	800d5da <_malloc_usable_size_r>
 800d230:	4284      	cmp	r4, r0
 800d232:	4607      	mov	r7, r0
 800d234:	d802      	bhi.n	800d23c <_realloc_r+0x34>
 800d236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d23a:	d812      	bhi.n	800d262 <_realloc_r+0x5a>
 800d23c:	4621      	mov	r1, r4
 800d23e:	4640      	mov	r0, r8
 800d240:	f7fe f8a6 	bl	800b390 <_malloc_r>
 800d244:	4605      	mov	r5, r0
 800d246:	2800      	cmp	r0, #0
 800d248:	d0ed      	beq.n	800d226 <_realloc_r+0x1e>
 800d24a:	42bc      	cmp	r4, r7
 800d24c:	4622      	mov	r2, r4
 800d24e:	4631      	mov	r1, r6
 800d250:	bf28      	it	cs
 800d252:	463a      	movcs	r2, r7
 800d254:	f7fe f81a 	bl	800b28c <memcpy>
 800d258:	4631      	mov	r1, r6
 800d25a:	4640      	mov	r0, r8
 800d25c:	f7fe f82c 	bl	800b2b8 <_free_r>
 800d260:	e7e1      	b.n	800d226 <_realloc_r+0x1e>
 800d262:	4635      	mov	r5, r6
 800d264:	e7df      	b.n	800d226 <_realloc_r+0x1e>

0800d266 <__ssputs_r>:
 800d266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d26a:	688e      	ldr	r6, [r1, #8]
 800d26c:	429e      	cmp	r6, r3
 800d26e:	4682      	mov	sl, r0
 800d270:	460c      	mov	r4, r1
 800d272:	4690      	mov	r8, r2
 800d274:	461f      	mov	r7, r3
 800d276:	d838      	bhi.n	800d2ea <__ssputs_r+0x84>
 800d278:	898a      	ldrh	r2, [r1, #12]
 800d27a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d27e:	d032      	beq.n	800d2e6 <__ssputs_r+0x80>
 800d280:	6825      	ldr	r5, [r4, #0]
 800d282:	6909      	ldr	r1, [r1, #16]
 800d284:	eba5 0901 	sub.w	r9, r5, r1
 800d288:	6965      	ldr	r5, [r4, #20]
 800d28a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d28e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d292:	3301      	adds	r3, #1
 800d294:	444b      	add	r3, r9
 800d296:	106d      	asrs	r5, r5, #1
 800d298:	429d      	cmp	r5, r3
 800d29a:	bf38      	it	cc
 800d29c:	461d      	movcc	r5, r3
 800d29e:	0553      	lsls	r3, r2, #21
 800d2a0:	d531      	bpl.n	800d306 <__ssputs_r+0xa0>
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	f7fe f874 	bl	800b390 <_malloc_r>
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	b950      	cbnz	r0, 800d2c2 <__ssputs_r+0x5c>
 800d2ac:	230c      	movs	r3, #12
 800d2ae:	f8ca 3000 	str.w	r3, [sl]
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c2:	6921      	ldr	r1, [r4, #16]
 800d2c4:	464a      	mov	r2, r9
 800d2c6:	f7fd ffe1 	bl	800b28c <memcpy>
 800d2ca:	89a3      	ldrh	r3, [r4, #12]
 800d2cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	6126      	str	r6, [r4, #16]
 800d2d8:	6165      	str	r5, [r4, #20]
 800d2da:	444e      	add	r6, r9
 800d2dc:	eba5 0509 	sub.w	r5, r5, r9
 800d2e0:	6026      	str	r6, [r4, #0]
 800d2e2:	60a5      	str	r5, [r4, #8]
 800d2e4:	463e      	mov	r6, r7
 800d2e6:	42be      	cmp	r6, r7
 800d2e8:	d900      	bls.n	800d2ec <__ssputs_r+0x86>
 800d2ea:	463e      	mov	r6, r7
 800d2ec:	6820      	ldr	r0, [r4, #0]
 800d2ee:	4632      	mov	r2, r6
 800d2f0:	4641      	mov	r1, r8
 800d2f2:	f000 f958 	bl	800d5a6 <memmove>
 800d2f6:	68a3      	ldr	r3, [r4, #8]
 800d2f8:	1b9b      	subs	r3, r3, r6
 800d2fa:	60a3      	str	r3, [r4, #8]
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	4433      	add	r3, r6
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	2000      	movs	r0, #0
 800d304:	e7db      	b.n	800d2be <__ssputs_r+0x58>
 800d306:	462a      	mov	r2, r5
 800d308:	f7ff ff7e 	bl	800d208 <_realloc_r>
 800d30c:	4606      	mov	r6, r0
 800d30e:	2800      	cmp	r0, #0
 800d310:	d1e1      	bne.n	800d2d6 <__ssputs_r+0x70>
 800d312:	6921      	ldr	r1, [r4, #16]
 800d314:	4650      	mov	r0, sl
 800d316:	f7fd ffcf 	bl	800b2b8 <_free_r>
 800d31a:	e7c7      	b.n	800d2ac <__ssputs_r+0x46>

0800d31c <_svfiprintf_r>:
 800d31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d320:	4698      	mov	r8, r3
 800d322:	898b      	ldrh	r3, [r1, #12]
 800d324:	061b      	lsls	r3, r3, #24
 800d326:	b09d      	sub	sp, #116	; 0x74
 800d328:	4607      	mov	r7, r0
 800d32a:	460d      	mov	r5, r1
 800d32c:	4614      	mov	r4, r2
 800d32e:	d50e      	bpl.n	800d34e <_svfiprintf_r+0x32>
 800d330:	690b      	ldr	r3, [r1, #16]
 800d332:	b963      	cbnz	r3, 800d34e <_svfiprintf_r+0x32>
 800d334:	2140      	movs	r1, #64	; 0x40
 800d336:	f7fe f82b 	bl	800b390 <_malloc_r>
 800d33a:	6028      	str	r0, [r5, #0]
 800d33c:	6128      	str	r0, [r5, #16]
 800d33e:	b920      	cbnz	r0, 800d34a <_svfiprintf_r+0x2e>
 800d340:	230c      	movs	r3, #12
 800d342:	603b      	str	r3, [r7, #0]
 800d344:	f04f 30ff 	mov.w	r0, #4294967295
 800d348:	e0d1      	b.n	800d4ee <_svfiprintf_r+0x1d2>
 800d34a:	2340      	movs	r3, #64	; 0x40
 800d34c:	616b      	str	r3, [r5, #20]
 800d34e:	2300      	movs	r3, #0
 800d350:	9309      	str	r3, [sp, #36]	; 0x24
 800d352:	2320      	movs	r3, #32
 800d354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d358:	f8cd 800c 	str.w	r8, [sp, #12]
 800d35c:	2330      	movs	r3, #48	; 0x30
 800d35e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d508 <_svfiprintf_r+0x1ec>
 800d362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d366:	f04f 0901 	mov.w	r9, #1
 800d36a:	4623      	mov	r3, r4
 800d36c:	469a      	mov	sl, r3
 800d36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d372:	b10a      	cbz	r2, 800d378 <_svfiprintf_r+0x5c>
 800d374:	2a25      	cmp	r2, #37	; 0x25
 800d376:	d1f9      	bne.n	800d36c <_svfiprintf_r+0x50>
 800d378:	ebba 0b04 	subs.w	fp, sl, r4
 800d37c:	d00b      	beq.n	800d396 <_svfiprintf_r+0x7a>
 800d37e:	465b      	mov	r3, fp
 800d380:	4622      	mov	r2, r4
 800d382:	4629      	mov	r1, r5
 800d384:	4638      	mov	r0, r7
 800d386:	f7ff ff6e 	bl	800d266 <__ssputs_r>
 800d38a:	3001      	adds	r0, #1
 800d38c:	f000 80aa 	beq.w	800d4e4 <_svfiprintf_r+0x1c8>
 800d390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d392:	445a      	add	r2, fp
 800d394:	9209      	str	r2, [sp, #36]	; 0x24
 800d396:	f89a 3000 	ldrb.w	r3, [sl]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80a2 	beq.w	800d4e4 <_svfiprintf_r+0x1c8>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3aa:	f10a 0a01 	add.w	sl, sl, #1
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	9307      	str	r3, [sp, #28]
 800d3b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3b6:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b8:	4654      	mov	r4, sl
 800d3ba:	2205      	movs	r2, #5
 800d3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c0:	4851      	ldr	r0, [pc, #324]	; (800d508 <_svfiprintf_r+0x1ec>)
 800d3c2:	f7f2 ff3d 	bl	8000240 <memchr>
 800d3c6:	9a04      	ldr	r2, [sp, #16]
 800d3c8:	b9d8      	cbnz	r0, 800d402 <_svfiprintf_r+0xe6>
 800d3ca:	06d0      	lsls	r0, r2, #27
 800d3cc:	bf44      	itt	mi
 800d3ce:	2320      	movmi	r3, #32
 800d3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3d4:	0711      	lsls	r1, r2, #28
 800d3d6:	bf44      	itt	mi
 800d3d8:	232b      	movmi	r3, #43	; 0x2b
 800d3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3de:	f89a 3000 	ldrb.w	r3, [sl]
 800d3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3e4:	d015      	beq.n	800d412 <_svfiprintf_r+0xf6>
 800d3e6:	9a07      	ldr	r2, [sp, #28]
 800d3e8:	4654      	mov	r4, sl
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	f04f 0c0a 	mov.w	ip, #10
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3f6:	3b30      	subs	r3, #48	; 0x30
 800d3f8:	2b09      	cmp	r3, #9
 800d3fa:	d94e      	bls.n	800d49a <_svfiprintf_r+0x17e>
 800d3fc:	b1b0      	cbz	r0, 800d42c <_svfiprintf_r+0x110>
 800d3fe:	9207      	str	r2, [sp, #28]
 800d400:	e014      	b.n	800d42c <_svfiprintf_r+0x110>
 800d402:	eba0 0308 	sub.w	r3, r0, r8
 800d406:	fa09 f303 	lsl.w	r3, r9, r3
 800d40a:	4313      	orrs	r3, r2
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	46a2      	mov	sl, r4
 800d410:	e7d2      	b.n	800d3b8 <_svfiprintf_r+0x9c>
 800d412:	9b03      	ldr	r3, [sp, #12]
 800d414:	1d19      	adds	r1, r3, #4
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	9103      	str	r1, [sp, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfbb      	ittet	lt
 800d41e:	425b      	neglt	r3, r3
 800d420:	f042 0202 	orrlt.w	r2, r2, #2
 800d424:	9307      	strge	r3, [sp, #28]
 800d426:	9307      	strlt	r3, [sp, #28]
 800d428:	bfb8      	it	lt
 800d42a:	9204      	strlt	r2, [sp, #16]
 800d42c:	7823      	ldrb	r3, [r4, #0]
 800d42e:	2b2e      	cmp	r3, #46	; 0x2e
 800d430:	d10c      	bne.n	800d44c <_svfiprintf_r+0x130>
 800d432:	7863      	ldrb	r3, [r4, #1]
 800d434:	2b2a      	cmp	r3, #42	; 0x2a
 800d436:	d135      	bne.n	800d4a4 <_svfiprintf_r+0x188>
 800d438:	9b03      	ldr	r3, [sp, #12]
 800d43a:	1d1a      	adds	r2, r3, #4
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	9203      	str	r2, [sp, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	bfb8      	it	lt
 800d444:	f04f 33ff 	movlt.w	r3, #4294967295
 800d448:	3402      	adds	r4, #2
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d518 <_svfiprintf_r+0x1fc>
 800d450:	7821      	ldrb	r1, [r4, #0]
 800d452:	2203      	movs	r2, #3
 800d454:	4650      	mov	r0, sl
 800d456:	f7f2 fef3 	bl	8000240 <memchr>
 800d45a:	b140      	cbz	r0, 800d46e <_svfiprintf_r+0x152>
 800d45c:	2340      	movs	r3, #64	; 0x40
 800d45e:	eba0 000a 	sub.w	r0, r0, sl
 800d462:	fa03 f000 	lsl.w	r0, r3, r0
 800d466:	9b04      	ldr	r3, [sp, #16]
 800d468:	4303      	orrs	r3, r0
 800d46a:	3401      	adds	r4, #1
 800d46c:	9304      	str	r3, [sp, #16]
 800d46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d472:	4826      	ldr	r0, [pc, #152]	; (800d50c <_svfiprintf_r+0x1f0>)
 800d474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d478:	2206      	movs	r2, #6
 800d47a:	f7f2 fee1 	bl	8000240 <memchr>
 800d47e:	2800      	cmp	r0, #0
 800d480:	d038      	beq.n	800d4f4 <_svfiprintf_r+0x1d8>
 800d482:	4b23      	ldr	r3, [pc, #140]	; (800d510 <_svfiprintf_r+0x1f4>)
 800d484:	bb1b      	cbnz	r3, 800d4ce <_svfiprintf_r+0x1b2>
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	3307      	adds	r3, #7
 800d48a:	f023 0307 	bic.w	r3, r3, #7
 800d48e:	3308      	adds	r3, #8
 800d490:	9303      	str	r3, [sp, #12]
 800d492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d494:	4433      	add	r3, r6
 800d496:	9309      	str	r3, [sp, #36]	; 0x24
 800d498:	e767      	b.n	800d36a <_svfiprintf_r+0x4e>
 800d49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d49e:	460c      	mov	r4, r1
 800d4a0:	2001      	movs	r0, #1
 800d4a2:	e7a5      	b.n	800d3f0 <_svfiprintf_r+0xd4>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	3401      	adds	r4, #1
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	f04f 0c0a 	mov.w	ip, #10
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4b6:	3a30      	subs	r2, #48	; 0x30
 800d4b8:	2a09      	cmp	r2, #9
 800d4ba:	d903      	bls.n	800d4c4 <_svfiprintf_r+0x1a8>
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d0c5      	beq.n	800d44c <_svfiprintf_r+0x130>
 800d4c0:	9105      	str	r1, [sp, #20]
 800d4c2:	e7c3      	b.n	800d44c <_svfiprintf_r+0x130>
 800d4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e7f0      	b.n	800d4b0 <_svfiprintf_r+0x194>
 800d4ce:	ab03      	add	r3, sp, #12
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	462a      	mov	r2, r5
 800d4d4:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <_svfiprintf_r+0x1f8>)
 800d4d6:	a904      	add	r1, sp, #16
 800d4d8:	4638      	mov	r0, r7
 800d4da:	f7fe f86d 	bl	800b5b8 <_printf_float>
 800d4de:	1c42      	adds	r2, r0, #1
 800d4e0:	4606      	mov	r6, r0
 800d4e2:	d1d6      	bne.n	800d492 <_svfiprintf_r+0x176>
 800d4e4:	89ab      	ldrh	r3, [r5, #12]
 800d4e6:	065b      	lsls	r3, r3, #25
 800d4e8:	f53f af2c 	bmi.w	800d344 <_svfiprintf_r+0x28>
 800d4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ee:	b01d      	add	sp, #116	; 0x74
 800d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f4:	ab03      	add	r3, sp, #12
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	462a      	mov	r2, r5
 800d4fa:	4b06      	ldr	r3, [pc, #24]	; (800d514 <_svfiprintf_r+0x1f8>)
 800d4fc:	a904      	add	r1, sp, #16
 800d4fe:	4638      	mov	r0, r7
 800d500:	f7fe fafe 	bl	800bb00 <_printf_i>
 800d504:	e7eb      	b.n	800d4de <_svfiprintf_r+0x1c2>
 800d506:	bf00      	nop
 800d508:	0800e444 	.word	0x0800e444
 800d50c:	0800e44e 	.word	0x0800e44e
 800d510:	0800b5b9 	.word	0x0800b5b9
 800d514:	0800d267 	.word	0x0800d267
 800d518:	0800e44a 	.word	0x0800e44a

0800d51c <__assert_func>:
 800d51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d51e:	4614      	mov	r4, r2
 800d520:	461a      	mov	r2, r3
 800d522:	4b09      	ldr	r3, [pc, #36]	; (800d548 <__assert_func+0x2c>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4605      	mov	r5, r0
 800d528:	68d8      	ldr	r0, [r3, #12]
 800d52a:	b14c      	cbz	r4, 800d540 <__assert_func+0x24>
 800d52c:	4b07      	ldr	r3, [pc, #28]	; (800d54c <__assert_func+0x30>)
 800d52e:	9100      	str	r1, [sp, #0]
 800d530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d534:	4906      	ldr	r1, [pc, #24]	; (800d550 <__assert_func+0x34>)
 800d536:	462b      	mov	r3, r5
 800d538:	f000 f80e 	bl	800d558 <fiprintf>
 800d53c:	f000 fa7c 	bl	800da38 <abort>
 800d540:	4b04      	ldr	r3, [pc, #16]	; (800d554 <__assert_func+0x38>)
 800d542:	461c      	mov	r4, r3
 800d544:	e7f3      	b.n	800d52e <__assert_func+0x12>
 800d546:	bf00      	nop
 800d548:	200002e0 	.word	0x200002e0
 800d54c:	0800e455 	.word	0x0800e455
 800d550:	0800e462 	.word	0x0800e462
 800d554:	0800e490 	.word	0x0800e490

0800d558 <fiprintf>:
 800d558:	b40e      	push	{r1, r2, r3}
 800d55a:	b503      	push	{r0, r1, lr}
 800d55c:	4601      	mov	r1, r0
 800d55e:	ab03      	add	r3, sp, #12
 800d560:	4805      	ldr	r0, [pc, #20]	; (800d578 <fiprintf+0x20>)
 800d562:	f853 2b04 	ldr.w	r2, [r3], #4
 800d566:	6800      	ldr	r0, [r0, #0]
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	f000 f867 	bl	800d63c <_vfiprintf_r>
 800d56e:	b002      	add	sp, #8
 800d570:	f85d eb04 	ldr.w	lr, [sp], #4
 800d574:	b003      	add	sp, #12
 800d576:	4770      	bx	lr
 800d578:	200002e0 	.word	0x200002e0

0800d57c <__retarget_lock_init_recursive>:
 800d57c:	4770      	bx	lr

0800d57e <__retarget_lock_acquire_recursive>:
 800d57e:	4770      	bx	lr

0800d580 <__retarget_lock_release_recursive>:
 800d580:	4770      	bx	lr

0800d582 <__ascii_mbtowc>:
 800d582:	b082      	sub	sp, #8
 800d584:	b901      	cbnz	r1, 800d588 <__ascii_mbtowc+0x6>
 800d586:	a901      	add	r1, sp, #4
 800d588:	b142      	cbz	r2, 800d59c <__ascii_mbtowc+0x1a>
 800d58a:	b14b      	cbz	r3, 800d5a0 <__ascii_mbtowc+0x1e>
 800d58c:	7813      	ldrb	r3, [r2, #0]
 800d58e:	600b      	str	r3, [r1, #0]
 800d590:	7812      	ldrb	r2, [r2, #0]
 800d592:	1e10      	subs	r0, r2, #0
 800d594:	bf18      	it	ne
 800d596:	2001      	movne	r0, #1
 800d598:	b002      	add	sp, #8
 800d59a:	4770      	bx	lr
 800d59c:	4610      	mov	r0, r2
 800d59e:	e7fb      	b.n	800d598 <__ascii_mbtowc+0x16>
 800d5a0:	f06f 0001 	mvn.w	r0, #1
 800d5a4:	e7f8      	b.n	800d598 <__ascii_mbtowc+0x16>

0800d5a6 <memmove>:
 800d5a6:	4288      	cmp	r0, r1
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	eb01 0402 	add.w	r4, r1, r2
 800d5ae:	d902      	bls.n	800d5b6 <memmove+0x10>
 800d5b0:	4284      	cmp	r4, r0
 800d5b2:	4623      	mov	r3, r4
 800d5b4:	d807      	bhi.n	800d5c6 <memmove+0x20>
 800d5b6:	1e43      	subs	r3, r0, #1
 800d5b8:	42a1      	cmp	r1, r4
 800d5ba:	d008      	beq.n	800d5ce <memmove+0x28>
 800d5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5c4:	e7f8      	b.n	800d5b8 <memmove+0x12>
 800d5c6:	4402      	add	r2, r0
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	428a      	cmp	r2, r1
 800d5cc:	d100      	bne.n	800d5d0 <memmove+0x2a>
 800d5ce:	bd10      	pop	{r4, pc}
 800d5d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5d8:	e7f7      	b.n	800d5ca <memmove+0x24>

0800d5da <_malloc_usable_size_r>:
 800d5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5de:	1f18      	subs	r0, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	bfbc      	itt	lt
 800d5e4:	580b      	ldrlt	r3, [r1, r0]
 800d5e6:	18c0      	addlt	r0, r0, r3
 800d5e8:	4770      	bx	lr

0800d5ea <__sfputc_r>:
 800d5ea:	6893      	ldr	r3, [r2, #8]
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	b410      	push	{r4}
 800d5f2:	6093      	str	r3, [r2, #8]
 800d5f4:	da08      	bge.n	800d608 <__sfputc_r+0x1e>
 800d5f6:	6994      	ldr	r4, [r2, #24]
 800d5f8:	42a3      	cmp	r3, r4
 800d5fa:	db01      	blt.n	800d600 <__sfputc_r+0x16>
 800d5fc:	290a      	cmp	r1, #10
 800d5fe:	d103      	bne.n	800d608 <__sfputc_r+0x1e>
 800d600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d604:	f000 b94a 	b.w	800d89c <__swbuf_r>
 800d608:	6813      	ldr	r3, [r2, #0]
 800d60a:	1c58      	adds	r0, r3, #1
 800d60c:	6010      	str	r0, [r2, #0]
 800d60e:	7019      	strb	r1, [r3, #0]
 800d610:	4608      	mov	r0, r1
 800d612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <__sfputs_r>:
 800d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61a:	4606      	mov	r6, r0
 800d61c:	460f      	mov	r7, r1
 800d61e:	4614      	mov	r4, r2
 800d620:	18d5      	adds	r5, r2, r3
 800d622:	42ac      	cmp	r4, r5
 800d624:	d101      	bne.n	800d62a <__sfputs_r+0x12>
 800d626:	2000      	movs	r0, #0
 800d628:	e007      	b.n	800d63a <__sfputs_r+0x22>
 800d62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d62e:	463a      	mov	r2, r7
 800d630:	4630      	mov	r0, r6
 800d632:	f7ff ffda 	bl	800d5ea <__sfputc_r>
 800d636:	1c43      	adds	r3, r0, #1
 800d638:	d1f3      	bne.n	800d622 <__sfputs_r+0xa>
 800d63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d63c <_vfiprintf_r>:
 800d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d640:	460d      	mov	r5, r1
 800d642:	b09d      	sub	sp, #116	; 0x74
 800d644:	4614      	mov	r4, r2
 800d646:	4698      	mov	r8, r3
 800d648:	4606      	mov	r6, r0
 800d64a:	b118      	cbz	r0, 800d654 <_vfiprintf_r+0x18>
 800d64c:	6983      	ldr	r3, [r0, #24]
 800d64e:	b90b      	cbnz	r3, 800d654 <_vfiprintf_r+0x18>
 800d650:	f000 fb14 	bl	800dc7c <__sinit>
 800d654:	4b89      	ldr	r3, [pc, #548]	; (800d87c <_vfiprintf_r+0x240>)
 800d656:	429d      	cmp	r5, r3
 800d658:	d11b      	bne.n	800d692 <_vfiprintf_r+0x56>
 800d65a:	6875      	ldr	r5, [r6, #4]
 800d65c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d65e:	07d9      	lsls	r1, r3, #31
 800d660:	d405      	bmi.n	800d66e <_vfiprintf_r+0x32>
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	059a      	lsls	r2, r3, #22
 800d666:	d402      	bmi.n	800d66e <_vfiprintf_r+0x32>
 800d668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d66a:	f7ff ff88 	bl	800d57e <__retarget_lock_acquire_recursive>
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	071b      	lsls	r3, r3, #28
 800d672:	d501      	bpl.n	800d678 <_vfiprintf_r+0x3c>
 800d674:	692b      	ldr	r3, [r5, #16]
 800d676:	b9eb      	cbnz	r3, 800d6b4 <_vfiprintf_r+0x78>
 800d678:	4629      	mov	r1, r5
 800d67a:	4630      	mov	r0, r6
 800d67c:	f000 f96e 	bl	800d95c <__swsetup_r>
 800d680:	b1c0      	cbz	r0, 800d6b4 <_vfiprintf_r+0x78>
 800d682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d684:	07dc      	lsls	r4, r3, #31
 800d686:	d50e      	bpl.n	800d6a6 <_vfiprintf_r+0x6a>
 800d688:	f04f 30ff 	mov.w	r0, #4294967295
 800d68c:	b01d      	add	sp, #116	; 0x74
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	4b7b      	ldr	r3, [pc, #492]	; (800d880 <_vfiprintf_r+0x244>)
 800d694:	429d      	cmp	r5, r3
 800d696:	d101      	bne.n	800d69c <_vfiprintf_r+0x60>
 800d698:	68b5      	ldr	r5, [r6, #8]
 800d69a:	e7df      	b.n	800d65c <_vfiprintf_r+0x20>
 800d69c:	4b79      	ldr	r3, [pc, #484]	; (800d884 <_vfiprintf_r+0x248>)
 800d69e:	429d      	cmp	r5, r3
 800d6a0:	bf08      	it	eq
 800d6a2:	68f5      	ldreq	r5, [r6, #12]
 800d6a4:	e7da      	b.n	800d65c <_vfiprintf_r+0x20>
 800d6a6:	89ab      	ldrh	r3, [r5, #12]
 800d6a8:	0598      	lsls	r0, r3, #22
 800d6aa:	d4ed      	bmi.n	800d688 <_vfiprintf_r+0x4c>
 800d6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ae:	f7ff ff67 	bl	800d580 <__retarget_lock_release_recursive>
 800d6b2:	e7e9      	b.n	800d688 <_vfiprintf_r+0x4c>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b8:	2320      	movs	r3, #32
 800d6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6c2:	2330      	movs	r3, #48	; 0x30
 800d6c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d888 <_vfiprintf_r+0x24c>
 800d6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6cc:	f04f 0901 	mov.w	r9, #1
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	469a      	mov	sl, r3
 800d6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6d8:	b10a      	cbz	r2, 800d6de <_vfiprintf_r+0xa2>
 800d6da:	2a25      	cmp	r2, #37	; 0x25
 800d6dc:	d1f9      	bne.n	800d6d2 <_vfiprintf_r+0x96>
 800d6de:	ebba 0b04 	subs.w	fp, sl, r4
 800d6e2:	d00b      	beq.n	800d6fc <_vfiprintf_r+0xc0>
 800d6e4:	465b      	mov	r3, fp
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7ff ff94 	bl	800d618 <__sfputs_r>
 800d6f0:	3001      	adds	r0, #1
 800d6f2:	f000 80aa 	beq.w	800d84a <_vfiprintf_r+0x20e>
 800d6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6f8:	445a      	add	r2, fp
 800d6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 80a2 	beq.w	800d84a <_vfiprintf_r+0x20e>
 800d706:	2300      	movs	r3, #0
 800d708:	f04f 32ff 	mov.w	r2, #4294967295
 800d70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d710:	f10a 0a01 	add.w	sl, sl, #1
 800d714:	9304      	str	r3, [sp, #16]
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d71c:	931a      	str	r3, [sp, #104]	; 0x68
 800d71e:	4654      	mov	r4, sl
 800d720:	2205      	movs	r2, #5
 800d722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d726:	4858      	ldr	r0, [pc, #352]	; (800d888 <_vfiprintf_r+0x24c>)
 800d728:	f7f2 fd8a 	bl	8000240 <memchr>
 800d72c:	9a04      	ldr	r2, [sp, #16]
 800d72e:	b9d8      	cbnz	r0, 800d768 <_vfiprintf_r+0x12c>
 800d730:	06d1      	lsls	r1, r2, #27
 800d732:	bf44      	itt	mi
 800d734:	2320      	movmi	r3, #32
 800d736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d73a:	0713      	lsls	r3, r2, #28
 800d73c:	bf44      	itt	mi
 800d73e:	232b      	movmi	r3, #43	; 0x2b
 800d740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d744:	f89a 3000 	ldrb.w	r3, [sl]
 800d748:	2b2a      	cmp	r3, #42	; 0x2a
 800d74a:	d015      	beq.n	800d778 <_vfiprintf_r+0x13c>
 800d74c:	9a07      	ldr	r2, [sp, #28]
 800d74e:	4654      	mov	r4, sl
 800d750:	2000      	movs	r0, #0
 800d752:	f04f 0c0a 	mov.w	ip, #10
 800d756:	4621      	mov	r1, r4
 800d758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d75c:	3b30      	subs	r3, #48	; 0x30
 800d75e:	2b09      	cmp	r3, #9
 800d760:	d94e      	bls.n	800d800 <_vfiprintf_r+0x1c4>
 800d762:	b1b0      	cbz	r0, 800d792 <_vfiprintf_r+0x156>
 800d764:	9207      	str	r2, [sp, #28]
 800d766:	e014      	b.n	800d792 <_vfiprintf_r+0x156>
 800d768:	eba0 0308 	sub.w	r3, r0, r8
 800d76c:	fa09 f303 	lsl.w	r3, r9, r3
 800d770:	4313      	orrs	r3, r2
 800d772:	9304      	str	r3, [sp, #16]
 800d774:	46a2      	mov	sl, r4
 800d776:	e7d2      	b.n	800d71e <_vfiprintf_r+0xe2>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	1d19      	adds	r1, r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	9103      	str	r1, [sp, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bfbb      	ittet	lt
 800d784:	425b      	neglt	r3, r3
 800d786:	f042 0202 	orrlt.w	r2, r2, #2
 800d78a:	9307      	strge	r3, [sp, #28]
 800d78c:	9307      	strlt	r3, [sp, #28]
 800d78e:	bfb8      	it	lt
 800d790:	9204      	strlt	r2, [sp, #16]
 800d792:	7823      	ldrb	r3, [r4, #0]
 800d794:	2b2e      	cmp	r3, #46	; 0x2e
 800d796:	d10c      	bne.n	800d7b2 <_vfiprintf_r+0x176>
 800d798:	7863      	ldrb	r3, [r4, #1]
 800d79a:	2b2a      	cmp	r3, #42	; 0x2a
 800d79c:	d135      	bne.n	800d80a <_vfiprintf_r+0x1ce>
 800d79e:	9b03      	ldr	r3, [sp, #12]
 800d7a0:	1d1a      	adds	r2, r3, #4
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	9203      	str	r2, [sp, #12]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	bfb8      	it	lt
 800d7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7ae:	3402      	adds	r4, #2
 800d7b0:	9305      	str	r3, [sp, #20]
 800d7b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d898 <_vfiprintf_r+0x25c>
 800d7b6:	7821      	ldrb	r1, [r4, #0]
 800d7b8:	2203      	movs	r2, #3
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	f7f2 fd40 	bl	8000240 <memchr>
 800d7c0:	b140      	cbz	r0, 800d7d4 <_vfiprintf_r+0x198>
 800d7c2:	2340      	movs	r3, #64	; 0x40
 800d7c4:	eba0 000a 	sub.w	r0, r0, sl
 800d7c8:	fa03 f000 	lsl.w	r0, r3, r0
 800d7cc:	9b04      	ldr	r3, [sp, #16]
 800d7ce:	4303      	orrs	r3, r0
 800d7d0:	3401      	adds	r4, #1
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7d8:	482c      	ldr	r0, [pc, #176]	; (800d88c <_vfiprintf_r+0x250>)
 800d7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7de:	2206      	movs	r2, #6
 800d7e0:	f7f2 fd2e 	bl	8000240 <memchr>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d03f      	beq.n	800d868 <_vfiprintf_r+0x22c>
 800d7e8:	4b29      	ldr	r3, [pc, #164]	; (800d890 <_vfiprintf_r+0x254>)
 800d7ea:	bb1b      	cbnz	r3, 800d834 <_vfiprintf_r+0x1f8>
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	3307      	adds	r3, #7
 800d7f0:	f023 0307 	bic.w	r3, r3, #7
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	9303      	str	r3, [sp, #12]
 800d7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fa:	443b      	add	r3, r7
 800d7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d7fe:	e767      	b.n	800d6d0 <_vfiprintf_r+0x94>
 800d800:	fb0c 3202 	mla	r2, ip, r2, r3
 800d804:	460c      	mov	r4, r1
 800d806:	2001      	movs	r0, #1
 800d808:	e7a5      	b.n	800d756 <_vfiprintf_r+0x11a>
 800d80a:	2300      	movs	r3, #0
 800d80c:	3401      	adds	r4, #1
 800d80e:	9305      	str	r3, [sp, #20]
 800d810:	4619      	mov	r1, r3
 800d812:	f04f 0c0a 	mov.w	ip, #10
 800d816:	4620      	mov	r0, r4
 800d818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81c:	3a30      	subs	r2, #48	; 0x30
 800d81e:	2a09      	cmp	r2, #9
 800d820:	d903      	bls.n	800d82a <_vfiprintf_r+0x1ee>
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0c5      	beq.n	800d7b2 <_vfiprintf_r+0x176>
 800d826:	9105      	str	r1, [sp, #20]
 800d828:	e7c3      	b.n	800d7b2 <_vfiprintf_r+0x176>
 800d82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d82e:	4604      	mov	r4, r0
 800d830:	2301      	movs	r3, #1
 800d832:	e7f0      	b.n	800d816 <_vfiprintf_r+0x1da>
 800d834:	ab03      	add	r3, sp, #12
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	462a      	mov	r2, r5
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <_vfiprintf_r+0x258>)
 800d83c:	a904      	add	r1, sp, #16
 800d83e:	4630      	mov	r0, r6
 800d840:	f7fd feba 	bl	800b5b8 <_printf_float>
 800d844:	4607      	mov	r7, r0
 800d846:	1c78      	adds	r0, r7, #1
 800d848:	d1d6      	bne.n	800d7f8 <_vfiprintf_r+0x1bc>
 800d84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d84c:	07d9      	lsls	r1, r3, #31
 800d84e:	d405      	bmi.n	800d85c <_vfiprintf_r+0x220>
 800d850:	89ab      	ldrh	r3, [r5, #12]
 800d852:	059a      	lsls	r2, r3, #22
 800d854:	d402      	bmi.n	800d85c <_vfiprintf_r+0x220>
 800d856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d858:	f7ff fe92 	bl	800d580 <__retarget_lock_release_recursive>
 800d85c:	89ab      	ldrh	r3, [r5, #12]
 800d85e:	065b      	lsls	r3, r3, #25
 800d860:	f53f af12 	bmi.w	800d688 <_vfiprintf_r+0x4c>
 800d864:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d866:	e711      	b.n	800d68c <_vfiprintf_r+0x50>
 800d868:	ab03      	add	r3, sp, #12
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	462a      	mov	r2, r5
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <_vfiprintf_r+0x258>)
 800d870:	a904      	add	r1, sp, #16
 800d872:	4630      	mov	r0, r6
 800d874:	f7fe f944 	bl	800bb00 <_printf_i>
 800d878:	e7e4      	b.n	800d844 <_vfiprintf_r+0x208>
 800d87a:	bf00      	nop
 800d87c:	0800e5bc 	.word	0x0800e5bc
 800d880:	0800e5dc 	.word	0x0800e5dc
 800d884:	0800e59c 	.word	0x0800e59c
 800d888:	0800e444 	.word	0x0800e444
 800d88c:	0800e44e 	.word	0x0800e44e
 800d890:	0800b5b9 	.word	0x0800b5b9
 800d894:	0800d619 	.word	0x0800d619
 800d898:	0800e44a 	.word	0x0800e44a

0800d89c <__swbuf_r>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	460e      	mov	r6, r1
 800d8a0:	4614      	mov	r4, r2
 800d8a2:	4605      	mov	r5, r0
 800d8a4:	b118      	cbz	r0, 800d8ae <__swbuf_r+0x12>
 800d8a6:	6983      	ldr	r3, [r0, #24]
 800d8a8:	b90b      	cbnz	r3, 800d8ae <__swbuf_r+0x12>
 800d8aa:	f000 f9e7 	bl	800dc7c <__sinit>
 800d8ae:	4b21      	ldr	r3, [pc, #132]	; (800d934 <__swbuf_r+0x98>)
 800d8b0:	429c      	cmp	r4, r3
 800d8b2:	d12b      	bne.n	800d90c <__swbuf_r+0x70>
 800d8b4:	686c      	ldr	r4, [r5, #4]
 800d8b6:	69a3      	ldr	r3, [r4, #24]
 800d8b8:	60a3      	str	r3, [r4, #8]
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	071a      	lsls	r2, r3, #28
 800d8be:	d52f      	bpl.n	800d920 <__swbuf_r+0x84>
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	b36b      	cbz	r3, 800d920 <__swbuf_r+0x84>
 800d8c4:	6923      	ldr	r3, [r4, #16]
 800d8c6:	6820      	ldr	r0, [r4, #0]
 800d8c8:	1ac0      	subs	r0, r0, r3
 800d8ca:	6963      	ldr	r3, [r4, #20]
 800d8cc:	b2f6      	uxtb	r6, r6
 800d8ce:	4283      	cmp	r3, r0
 800d8d0:	4637      	mov	r7, r6
 800d8d2:	dc04      	bgt.n	800d8de <__swbuf_r+0x42>
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	f000 f93c 	bl	800db54 <_fflush_r>
 800d8dc:	bb30      	cbnz	r0, 800d92c <__swbuf_r+0x90>
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	60a3      	str	r3, [r4, #8]
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	6022      	str	r2, [r4, #0]
 800d8ea:	701e      	strb	r6, [r3, #0]
 800d8ec:	6963      	ldr	r3, [r4, #20]
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	4283      	cmp	r3, r0
 800d8f2:	d004      	beq.n	800d8fe <__swbuf_r+0x62>
 800d8f4:	89a3      	ldrh	r3, [r4, #12]
 800d8f6:	07db      	lsls	r3, r3, #31
 800d8f8:	d506      	bpl.n	800d908 <__swbuf_r+0x6c>
 800d8fa:	2e0a      	cmp	r6, #10
 800d8fc:	d104      	bne.n	800d908 <__swbuf_r+0x6c>
 800d8fe:	4621      	mov	r1, r4
 800d900:	4628      	mov	r0, r5
 800d902:	f000 f927 	bl	800db54 <_fflush_r>
 800d906:	b988      	cbnz	r0, 800d92c <__swbuf_r+0x90>
 800d908:	4638      	mov	r0, r7
 800d90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d90c:	4b0a      	ldr	r3, [pc, #40]	; (800d938 <__swbuf_r+0x9c>)
 800d90e:	429c      	cmp	r4, r3
 800d910:	d101      	bne.n	800d916 <__swbuf_r+0x7a>
 800d912:	68ac      	ldr	r4, [r5, #8]
 800d914:	e7cf      	b.n	800d8b6 <__swbuf_r+0x1a>
 800d916:	4b09      	ldr	r3, [pc, #36]	; (800d93c <__swbuf_r+0xa0>)
 800d918:	429c      	cmp	r4, r3
 800d91a:	bf08      	it	eq
 800d91c:	68ec      	ldreq	r4, [r5, #12]
 800d91e:	e7ca      	b.n	800d8b6 <__swbuf_r+0x1a>
 800d920:	4621      	mov	r1, r4
 800d922:	4628      	mov	r0, r5
 800d924:	f000 f81a 	bl	800d95c <__swsetup_r>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d0cb      	beq.n	800d8c4 <__swbuf_r+0x28>
 800d92c:	f04f 37ff 	mov.w	r7, #4294967295
 800d930:	e7ea      	b.n	800d908 <__swbuf_r+0x6c>
 800d932:	bf00      	nop
 800d934:	0800e5bc 	.word	0x0800e5bc
 800d938:	0800e5dc 	.word	0x0800e5dc
 800d93c:	0800e59c 	.word	0x0800e59c

0800d940 <__ascii_wctomb>:
 800d940:	b149      	cbz	r1, 800d956 <__ascii_wctomb+0x16>
 800d942:	2aff      	cmp	r2, #255	; 0xff
 800d944:	bf85      	ittet	hi
 800d946:	238a      	movhi	r3, #138	; 0x8a
 800d948:	6003      	strhi	r3, [r0, #0]
 800d94a:	700a      	strbls	r2, [r1, #0]
 800d94c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d950:	bf98      	it	ls
 800d952:	2001      	movls	r0, #1
 800d954:	4770      	bx	lr
 800d956:	4608      	mov	r0, r1
 800d958:	4770      	bx	lr
	...

0800d95c <__swsetup_r>:
 800d95c:	4b32      	ldr	r3, [pc, #200]	; (800da28 <__swsetup_r+0xcc>)
 800d95e:	b570      	push	{r4, r5, r6, lr}
 800d960:	681d      	ldr	r5, [r3, #0]
 800d962:	4606      	mov	r6, r0
 800d964:	460c      	mov	r4, r1
 800d966:	b125      	cbz	r5, 800d972 <__swsetup_r+0x16>
 800d968:	69ab      	ldr	r3, [r5, #24]
 800d96a:	b913      	cbnz	r3, 800d972 <__swsetup_r+0x16>
 800d96c:	4628      	mov	r0, r5
 800d96e:	f000 f985 	bl	800dc7c <__sinit>
 800d972:	4b2e      	ldr	r3, [pc, #184]	; (800da2c <__swsetup_r+0xd0>)
 800d974:	429c      	cmp	r4, r3
 800d976:	d10f      	bne.n	800d998 <__swsetup_r+0x3c>
 800d978:	686c      	ldr	r4, [r5, #4]
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d980:	0719      	lsls	r1, r3, #28
 800d982:	d42c      	bmi.n	800d9de <__swsetup_r+0x82>
 800d984:	06dd      	lsls	r5, r3, #27
 800d986:	d411      	bmi.n	800d9ac <__swsetup_r+0x50>
 800d988:	2309      	movs	r3, #9
 800d98a:	6033      	str	r3, [r6, #0]
 800d98c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d990:	81a3      	strh	r3, [r4, #12]
 800d992:	f04f 30ff 	mov.w	r0, #4294967295
 800d996:	e03e      	b.n	800da16 <__swsetup_r+0xba>
 800d998:	4b25      	ldr	r3, [pc, #148]	; (800da30 <__swsetup_r+0xd4>)
 800d99a:	429c      	cmp	r4, r3
 800d99c:	d101      	bne.n	800d9a2 <__swsetup_r+0x46>
 800d99e:	68ac      	ldr	r4, [r5, #8]
 800d9a0:	e7eb      	b.n	800d97a <__swsetup_r+0x1e>
 800d9a2:	4b24      	ldr	r3, [pc, #144]	; (800da34 <__swsetup_r+0xd8>)
 800d9a4:	429c      	cmp	r4, r3
 800d9a6:	bf08      	it	eq
 800d9a8:	68ec      	ldreq	r4, [r5, #12]
 800d9aa:	e7e6      	b.n	800d97a <__swsetup_r+0x1e>
 800d9ac:	0758      	lsls	r0, r3, #29
 800d9ae:	d512      	bpl.n	800d9d6 <__swsetup_r+0x7a>
 800d9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9b2:	b141      	cbz	r1, 800d9c6 <__swsetup_r+0x6a>
 800d9b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9b8:	4299      	cmp	r1, r3
 800d9ba:	d002      	beq.n	800d9c2 <__swsetup_r+0x66>
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7fd fc7b 	bl	800b2b8 <_free_r>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	6063      	str	r3, [r4, #4]
 800d9d2:	6923      	ldr	r3, [r4, #16]
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	f043 0308 	orr.w	r3, r3, #8
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	6923      	ldr	r3, [r4, #16]
 800d9e0:	b94b      	cbnz	r3, 800d9f6 <__swsetup_r+0x9a>
 800d9e2:	89a3      	ldrh	r3, [r4, #12]
 800d9e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9ec:	d003      	beq.n	800d9f6 <__swsetup_r+0x9a>
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f000 fa05 	bl	800de00 <__smakebuf_r>
 800d9f6:	89a0      	ldrh	r0, [r4, #12]
 800d9f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9fc:	f010 0301 	ands.w	r3, r0, #1
 800da00:	d00a      	beq.n	800da18 <__swsetup_r+0xbc>
 800da02:	2300      	movs	r3, #0
 800da04:	60a3      	str	r3, [r4, #8]
 800da06:	6963      	ldr	r3, [r4, #20]
 800da08:	425b      	negs	r3, r3
 800da0a:	61a3      	str	r3, [r4, #24]
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	b943      	cbnz	r3, 800da22 <__swsetup_r+0xc6>
 800da10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da14:	d1ba      	bne.n	800d98c <__swsetup_r+0x30>
 800da16:	bd70      	pop	{r4, r5, r6, pc}
 800da18:	0781      	lsls	r1, r0, #30
 800da1a:	bf58      	it	pl
 800da1c:	6963      	ldrpl	r3, [r4, #20]
 800da1e:	60a3      	str	r3, [r4, #8]
 800da20:	e7f4      	b.n	800da0c <__swsetup_r+0xb0>
 800da22:	2000      	movs	r0, #0
 800da24:	e7f7      	b.n	800da16 <__swsetup_r+0xba>
 800da26:	bf00      	nop
 800da28:	200002e0 	.word	0x200002e0
 800da2c:	0800e5bc 	.word	0x0800e5bc
 800da30:	0800e5dc 	.word	0x0800e5dc
 800da34:	0800e59c 	.word	0x0800e59c

0800da38 <abort>:
 800da38:	b508      	push	{r3, lr}
 800da3a:	2006      	movs	r0, #6
 800da3c:	f000 fa48 	bl	800ded0 <raise>
 800da40:	2001      	movs	r0, #1
 800da42:	f000 fb4d 	bl	800e0e0 <_exit>
	...

0800da48 <__sflush_r>:
 800da48:	898a      	ldrh	r2, [r1, #12]
 800da4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4e:	4605      	mov	r5, r0
 800da50:	0710      	lsls	r0, r2, #28
 800da52:	460c      	mov	r4, r1
 800da54:	d458      	bmi.n	800db08 <__sflush_r+0xc0>
 800da56:	684b      	ldr	r3, [r1, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	dc05      	bgt.n	800da68 <__sflush_r+0x20>
 800da5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	dc02      	bgt.n	800da68 <__sflush_r+0x20>
 800da62:	2000      	movs	r0, #0
 800da64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	d0f9      	beq.n	800da62 <__sflush_r+0x1a>
 800da6e:	2300      	movs	r3, #0
 800da70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da74:	682f      	ldr	r7, [r5, #0]
 800da76:	602b      	str	r3, [r5, #0]
 800da78:	d032      	beq.n	800dae0 <__sflush_r+0x98>
 800da7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	075a      	lsls	r2, r3, #29
 800da80:	d505      	bpl.n	800da8e <__sflush_r+0x46>
 800da82:	6863      	ldr	r3, [r4, #4]
 800da84:	1ac0      	subs	r0, r0, r3
 800da86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da88:	b10b      	cbz	r3, 800da8e <__sflush_r+0x46>
 800da8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da8c:	1ac0      	subs	r0, r0, r3
 800da8e:	2300      	movs	r3, #0
 800da90:	4602      	mov	r2, r0
 800da92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da94:	6a21      	ldr	r1, [r4, #32]
 800da96:	4628      	mov	r0, r5
 800da98:	47b0      	blx	r6
 800da9a:	1c43      	adds	r3, r0, #1
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	d106      	bne.n	800daae <__sflush_r+0x66>
 800daa0:	6829      	ldr	r1, [r5, #0]
 800daa2:	291d      	cmp	r1, #29
 800daa4:	d82c      	bhi.n	800db00 <__sflush_r+0xb8>
 800daa6:	4a2a      	ldr	r2, [pc, #168]	; (800db50 <__sflush_r+0x108>)
 800daa8:	40ca      	lsrs	r2, r1
 800daaa:	07d6      	lsls	r6, r2, #31
 800daac:	d528      	bpl.n	800db00 <__sflush_r+0xb8>
 800daae:	2200      	movs	r2, #0
 800dab0:	6062      	str	r2, [r4, #4]
 800dab2:	04d9      	lsls	r1, r3, #19
 800dab4:	6922      	ldr	r2, [r4, #16]
 800dab6:	6022      	str	r2, [r4, #0]
 800dab8:	d504      	bpl.n	800dac4 <__sflush_r+0x7c>
 800daba:	1c42      	adds	r2, r0, #1
 800dabc:	d101      	bne.n	800dac2 <__sflush_r+0x7a>
 800dabe:	682b      	ldr	r3, [r5, #0]
 800dac0:	b903      	cbnz	r3, 800dac4 <__sflush_r+0x7c>
 800dac2:	6560      	str	r0, [r4, #84]	; 0x54
 800dac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dac6:	602f      	str	r7, [r5, #0]
 800dac8:	2900      	cmp	r1, #0
 800daca:	d0ca      	beq.n	800da62 <__sflush_r+0x1a>
 800dacc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dad0:	4299      	cmp	r1, r3
 800dad2:	d002      	beq.n	800dada <__sflush_r+0x92>
 800dad4:	4628      	mov	r0, r5
 800dad6:	f7fd fbef 	bl	800b2b8 <_free_r>
 800dada:	2000      	movs	r0, #0
 800dadc:	6360      	str	r0, [r4, #52]	; 0x34
 800dade:	e7c1      	b.n	800da64 <__sflush_r+0x1c>
 800dae0:	6a21      	ldr	r1, [r4, #32]
 800dae2:	2301      	movs	r3, #1
 800dae4:	4628      	mov	r0, r5
 800dae6:	47b0      	blx	r6
 800dae8:	1c41      	adds	r1, r0, #1
 800daea:	d1c7      	bne.n	800da7c <__sflush_r+0x34>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0c4      	beq.n	800da7c <__sflush_r+0x34>
 800daf2:	2b1d      	cmp	r3, #29
 800daf4:	d001      	beq.n	800dafa <__sflush_r+0xb2>
 800daf6:	2b16      	cmp	r3, #22
 800daf8:	d101      	bne.n	800dafe <__sflush_r+0xb6>
 800dafa:	602f      	str	r7, [r5, #0]
 800dafc:	e7b1      	b.n	800da62 <__sflush_r+0x1a>
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db04:	81a3      	strh	r3, [r4, #12]
 800db06:	e7ad      	b.n	800da64 <__sflush_r+0x1c>
 800db08:	690f      	ldr	r7, [r1, #16]
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	d0a9      	beq.n	800da62 <__sflush_r+0x1a>
 800db0e:	0793      	lsls	r3, r2, #30
 800db10:	680e      	ldr	r6, [r1, #0]
 800db12:	bf08      	it	eq
 800db14:	694b      	ldreq	r3, [r1, #20]
 800db16:	600f      	str	r7, [r1, #0]
 800db18:	bf18      	it	ne
 800db1a:	2300      	movne	r3, #0
 800db1c:	eba6 0807 	sub.w	r8, r6, r7
 800db20:	608b      	str	r3, [r1, #8]
 800db22:	f1b8 0f00 	cmp.w	r8, #0
 800db26:	dd9c      	ble.n	800da62 <__sflush_r+0x1a>
 800db28:	6a21      	ldr	r1, [r4, #32]
 800db2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db2c:	4643      	mov	r3, r8
 800db2e:	463a      	mov	r2, r7
 800db30:	4628      	mov	r0, r5
 800db32:	47b0      	blx	r6
 800db34:	2800      	cmp	r0, #0
 800db36:	dc06      	bgt.n	800db46 <__sflush_r+0xfe>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db3e:	81a3      	strh	r3, [r4, #12]
 800db40:	f04f 30ff 	mov.w	r0, #4294967295
 800db44:	e78e      	b.n	800da64 <__sflush_r+0x1c>
 800db46:	4407      	add	r7, r0
 800db48:	eba8 0800 	sub.w	r8, r8, r0
 800db4c:	e7e9      	b.n	800db22 <__sflush_r+0xda>
 800db4e:	bf00      	nop
 800db50:	20400001 	.word	0x20400001

0800db54 <_fflush_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	690b      	ldr	r3, [r1, #16]
 800db58:	4605      	mov	r5, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	b913      	cbnz	r3, 800db64 <_fflush_r+0x10>
 800db5e:	2500      	movs	r5, #0
 800db60:	4628      	mov	r0, r5
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	b118      	cbz	r0, 800db6e <_fflush_r+0x1a>
 800db66:	6983      	ldr	r3, [r0, #24]
 800db68:	b90b      	cbnz	r3, 800db6e <_fflush_r+0x1a>
 800db6a:	f000 f887 	bl	800dc7c <__sinit>
 800db6e:	4b14      	ldr	r3, [pc, #80]	; (800dbc0 <_fflush_r+0x6c>)
 800db70:	429c      	cmp	r4, r3
 800db72:	d11b      	bne.n	800dbac <_fflush_r+0x58>
 800db74:	686c      	ldr	r4, [r5, #4]
 800db76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d0ef      	beq.n	800db5e <_fflush_r+0xa>
 800db7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db80:	07d0      	lsls	r0, r2, #31
 800db82:	d404      	bmi.n	800db8e <_fflush_r+0x3a>
 800db84:	0599      	lsls	r1, r3, #22
 800db86:	d402      	bmi.n	800db8e <_fflush_r+0x3a>
 800db88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db8a:	f7ff fcf8 	bl	800d57e <__retarget_lock_acquire_recursive>
 800db8e:	4628      	mov	r0, r5
 800db90:	4621      	mov	r1, r4
 800db92:	f7ff ff59 	bl	800da48 <__sflush_r>
 800db96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db98:	07da      	lsls	r2, r3, #31
 800db9a:	4605      	mov	r5, r0
 800db9c:	d4e0      	bmi.n	800db60 <_fflush_r+0xc>
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	059b      	lsls	r3, r3, #22
 800dba2:	d4dd      	bmi.n	800db60 <_fflush_r+0xc>
 800dba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba6:	f7ff fceb 	bl	800d580 <__retarget_lock_release_recursive>
 800dbaa:	e7d9      	b.n	800db60 <_fflush_r+0xc>
 800dbac:	4b05      	ldr	r3, [pc, #20]	; (800dbc4 <_fflush_r+0x70>)
 800dbae:	429c      	cmp	r4, r3
 800dbb0:	d101      	bne.n	800dbb6 <_fflush_r+0x62>
 800dbb2:	68ac      	ldr	r4, [r5, #8]
 800dbb4:	e7df      	b.n	800db76 <_fflush_r+0x22>
 800dbb6:	4b04      	ldr	r3, [pc, #16]	; (800dbc8 <_fflush_r+0x74>)
 800dbb8:	429c      	cmp	r4, r3
 800dbba:	bf08      	it	eq
 800dbbc:	68ec      	ldreq	r4, [r5, #12]
 800dbbe:	e7da      	b.n	800db76 <_fflush_r+0x22>
 800dbc0:	0800e5bc 	.word	0x0800e5bc
 800dbc4:	0800e5dc 	.word	0x0800e5dc
 800dbc8:	0800e59c 	.word	0x0800e59c

0800dbcc <std>:
 800dbcc:	2300      	movs	r3, #0
 800dbce:	b510      	push	{r4, lr}
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	e9c0 3300 	strd	r3, r3, [r0]
 800dbd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbda:	6083      	str	r3, [r0, #8]
 800dbdc:	8181      	strh	r1, [r0, #12]
 800dbde:	6643      	str	r3, [r0, #100]	; 0x64
 800dbe0:	81c2      	strh	r2, [r0, #14]
 800dbe2:	6183      	str	r3, [r0, #24]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	2208      	movs	r2, #8
 800dbe8:	305c      	adds	r0, #92	; 0x5c
 800dbea:	f7fd fb5d 	bl	800b2a8 <memset>
 800dbee:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <std+0x38>)
 800dbf0:	6263      	str	r3, [r4, #36]	; 0x24
 800dbf2:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <std+0x3c>)
 800dbf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <std+0x40>)
 800dbf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbfa:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <std+0x44>)
 800dbfc:	6224      	str	r4, [r4, #32]
 800dbfe:	6323      	str	r3, [r4, #48]	; 0x30
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	bf00      	nop
 800dc04:	0800df09 	.word	0x0800df09
 800dc08:	0800df2b 	.word	0x0800df2b
 800dc0c:	0800df63 	.word	0x0800df63
 800dc10:	0800df87 	.word	0x0800df87

0800dc14 <_cleanup_r>:
 800dc14:	4901      	ldr	r1, [pc, #4]	; (800dc1c <_cleanup_r+0x8>)
 800dc16:	f000 b8af 	b.w	800dd78 <_fwalk_reent>
 800dc1a:	bf00      	nop
 800dc1c:	0800db55 	.word	0x0800db55

0800dc20 <__sfmoreglue>:
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	2268      	movs	r2, #104	; 0x68
 800dc24:	1e4d      	subs	r5, r1, #1
 800dc26:	4355      	muls	r5, r2
 800dc28:	460e      	mov	r6, r1
 800dc2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc2e:	f7fd fbaf 	bl	800b390 <_malloc_r>
 800dc32:	4604      	mov	r4, r0
 800dc34:	b140      	cbz	r0, 800dc48 <__sfmoreglue+0x28>
 800dc36:	2100      	movs	r1, #0
 800dc38:	e9c0 1600 	strd	r1, r6, [r0]
 800dc3c:	300c      	adds	r0, #12
 800dc3e:	60a0      	str	r0, [r4, #8]
 800dc40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc44:	f7fd fb30 	bl	800b2a8 <memset>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}

0800dc4c <__sfp_lock_acquire>:
 800dc4c:	4801      	ldr	r0, [pc, #4]	; (800dc54 <__sfp_lock_acquire+0x8>)
 800dc4e:	f7ff bc96 	b.w	800d57e <__retarget_lock_acquire_recursive>
 800dc52:	bf00      	nop
 800dc54:	20001a7d 	.word	0x20001a7d

0800dc58 <__sfp_lock_release>:
 800dc58:	4801      	ldr	r0, [pc, #4]	; (800dc60 <__sfp_lock_release+0x8>)
 800dc5a:	f7ff bc91 	b.w	800d580 <__retarget_lock_release_recursive>
 800dc5e:	bf00      	nop
 800dc60:	20001a7d 	.word	0x20001a7d

0800dc64 <__sinit_lock_acquire>:
 800dc64:	4801      	ldr	r0, [pc, #4]	; (800dc6c <__sinit_lock_acquire+0x8>)
 800dc66:	f7ff bc8a 	b.w	800d57e <__retarget_lock_acquire_recursive>
 800dc6a:	bf00      	nop
 800dc6c:	20001a7e 	.word	0x20001a7e

0800dc70 <__sinit_lock_release>:
 800dc70:	4801      	ldr	r0, [pc, #4]	; (800dc78 <__sinit_lock_release+0x8>)
 800dc72:	f7ff bc85 	b.w	800d580 <__retarget_lock_release_recursive>
 800dc76:	bf00      	nop
 800dc78:	20001a7e 	.word	0x20001a7e

0800dc7c <__sinit>:
 800dc7c:	b510      	push	{r4, lr}
 800dc7e:	4604      	mov	r4, r0
 800dc80:	f7ff fff0 	bl	800dc64 <__sinit_lock_acquire>
 800dc84:	69a3      	ldr	r3, [r4, #24]
 800dc86:	b11b      	cbz	r3, 800dc90 <__sinit+0x14>
 800dc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc8c:	f7ff bff0 	b.w	800dc70 <__sinit_lock_release>
 800dc90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc94:	6523      	str	r3, [r4, #80]	; 0x50
 800dc96:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <__sinit+0x68>)
 800dc98:	4a13      	ldr	r2, [pc, #76]	; (800dce8 <__sinit+0x6c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc9e:	42a3      	cmp	r3, r4
 800dca0:	bf04      	itt	eq
 800dca2:	2301      	moveq	r3, #1
 800dca4:	61a3      	streq	r3, [r4, #24]
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 f820 	bl	800dcec <__sfp>
 800dcac:	6060      	str	r0, [r4, #4]
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 f81c 	bl	800dcec <__sfp>
 800dcb4:	60a0      	str	r0, [r4, #8]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f000 f818 	bl	800dcec <__sfp>
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	60e0      	str	r0, [r4, #12]
 800dcc0:	2104      	movs	r1, #4
 800dcc2:	6860      	ldr	r0, [r4, #4]
 800dcc4:	f7ff ff82 	bl	800dbcc <std>
 800dcc8:	68a0      	ldr	r0, [r4, #8]
 800dcca:	2201      	movs	r2, #1
 800dccc:	2109      	movs	r1, #9
 800dcce:	f7ff ff7d 	bl	800dbcc <std>
 800dcd2:	68e0      	ldr	r0, [r4, #12]
 800dcd4:	2202      	movs	r2, #2
 800dcd6:	2112      	movs	r1, #18
 800dcd8:	f7ff ff78 	bl	800dbcc <std>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	61a3      	str	r3, [r4, #24]
 800dce0:	e7d2      	b.n	800dc88 <__sinit+0xc>
 800dce2:	bf00      	nop
 800dce4:	0800e224 	.word	0x0800e224
 800dce8:	0800dc15 	.word	0x0800dc15

0800dcec <__sfp>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	4607      	mov	r7, r0
 800dcf0:	f7ff ffac 	bl	800dc4c <__sfp_lock_acquire>
 800dcf4:	4b1e      	ldr	r3, [pc, #120]	; (800dd70 <__sfp+0x84>)
 800dcf6:	681e      	ldr	r6, [r3, #0]
 800dcf8:	69b3      	ldr	r3, [r6, #24]
 800dcfa:	b913      	cbnz	r3, 800dd02 <__sfp+0x16>
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7ff ffbd 	bl	800dc7c <__sinit>
 800dd02:	3648      	adds	r6, #72	; 0x48
 800dd04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	d503      	bpl.n	800dd14 <__sfp+0x28>
 800dd0c:	6833      	ldr	r3, [r6, #0]
 800dd0e:	b30b      	cbz	r3, 800dd54 <__sfp+0x68>
 800dd10:	6836      	ldr	r6, [r6, #0]
 800dd12:	e7f7      	b.n	800dd04 <__sfp+0x18>
 800dd14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd18:	b9d5      	cbnz	r5, 800dd50 <__sfp+0x64>
 800dd1a:	4b16      	ldr	r3, [pc, #88]	; (800dd74 <__sfp+0x88>)
 800dd1c:	60e3      	str	r3, [r4, #12]
 800dd1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd22:	6665      	str	r5, [r4, #100]	; 0x64
 800dd24:	f7ff fc2a 	bl	800d57c <__retarget_lock_init_recursive>
 800dd28:	f7ff ff96 	bl	800dc58 <__sfp_lock_release>
 800dd2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd34:	6025      	str	r5, [r4, #0]
 800dd36:	61a5      	str	r5, [r4, #24]
 800dd38:	2208      	movs	r2, #8
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd40:	f7fd fab2 	bl	800b2a8 <memset>
 800dd44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd50:	3468      	adds	r4, #104	; 0x68
 800dd52:	e7d9      	b.n	800dd08 <__sfp+0x1c>
 800dd54:	2104      	movs	r1, #4
 800dd56:	4638      	mov	r0, r7
 800dd58:	f7ff ff62 	bl	800dc20 <__sfmoreglue>
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	6030      	str	r0, [r6, #0]
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d1d5      	bne.n	800dd10 <__sfp+0x24>
 800dd64:	f7ff ff78 	bl	800dc58 <__sfp_lock_release>
 800dd68:	230c      	movs	r3, #12
 800dd6a:	603b      	str	r3, [r7, #0]
 800dd6c:	e7ee      	b.n	800dd4c <__sfp+0x60>
 800dd6e:	bf00      	nop
 800dd70:	0800e224 	.word	0x0800e224
 800dd74:	ffff0001 	.word	0xffff0001

0800dd78 <_fwalk_reent>:
 800dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	4688      	mov	r8, r1
 800dd80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd84:	2700      	movs	r7, #0
 800dd86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd8a:	f1b9 0901 	subs.w	r9, r9, #1
 800dd8e:	d505      	bpl.n	800dd9c <_fwalk_reent+0x24>
 800dd90:	6824      	ldr	r4, [r4, #0]
 800dd92:	2c00      	cmp	r4, #0
 800dd94:	d1f7      	bne.n	800dd86 <_fwalk_reent+0xe>
 800dd96:	4638      	mov	r0, r7
 800dd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd9c:	89ab      	ldrh	r3, [r5, #12]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d907      	bls.n	800ddb2 <_fwalk_reent+0x3a>
 800dda2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dda6:	3301      	adds	r3, #1
 800dda8:	d003      	beq.n	800ddb2 <_fwalk_reent+0x3a>
 800ddaa:	4629      	mov	r1, r5
 800ddac:	4630      	mov	r0, r6
 800ddae:	47c0      	blx	r8
 800ddb0:	4307      	orrs	r7, r0
 800ddb2:	3568      	adds	r5, #104	; 0x68
 800ddb4:	e7e9      	b.n	800dd8a <_fwalk_reent+0x12>

0800ddb6 <__swhatbuf_r>:
 800ddb6:	b570      	push	{r4, r5, r6, lr}
 800ddb8:	460e      	mov	r6, r1
 800ddba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	b096      	sub	sp, #88	; 0x58
 800ddc2:	4614      	mov	r4, r2
 800ddc4:	461d      	mov	r5, r3
 800ddc6:	da08      	bge.n	800ddda <__swhatbuf_r+0x24>
 800ddc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	602a      	str	r2, [r5, #0]
 800ddd0:	061a      	lsls	r2, r3, #24
 800ddd2:	d410      	bmi.n	800ddf6 <__swhatbuf_r+0x40>
 800ddd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddd8:	e00e      	b.n	800ddf8 <__swhatbuf_r+0x42>
 800ddda:	466a      	mov	r2, sp
 800dddc:	f000 f8fa 	bl	800dfd4 <_fstat_r>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	dbf1      	blt.n	800ddc8 <__swhatbuf_r+0x12>
 800dde4:	9a01      	ldr	r2, [sp, #4]
 800dde6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddee:	425a      	negs	r2, r3
 800ddf0:	415a      	adcs	r2, r3
 800ddf2:	602a      	str	r2, [r5, #0]
 800ddf4:	e7ee      	b.n	800ddd4 <__swhatbuf_r+0x1e>
 800ddf6:	2340      	movs	r3, #64	; 0x40
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	b016      	add	sp, #88	; 0x58
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}

0800de00 <__smakebuf_r>:
 800de00:	898b      	ldrh	r3, [r1, #12]
 800de02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de04:	079d      	lsls	r5, r3, #30
 800de06:	4606      	mov	r6, r0
 800de08:	460c      	mov	r4, r1
 800de0a:	d507      	bpl.n	800de1c <__smakebuf_r+0x1c>
 800de0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	2301      	movs	r3, #1
 800de16:	6163      	str	r3, [r4, #20]
 800de18:	b002      	add	sp, #8
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	ab01      	add	r3, sp, #4
 800de1e:	466a      	mov	r2, sp
 800de20:	f7ff ffc9 	bl	800ddb6 <__swhatbuf_r>
 800de24:	9900      	ldr	r1, [sp, #0]
 800de26:	4605      	mov	r5, r0
 800de28:	4630      	mov	r0, r6
 800de2a:	f7fd fab1 	bl	800b390 <_malloc_r>
 800de2e:	b948      	cbnz	r0, 800de44 <__smakebuf_r+0x44>
 800de30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de34:	059a      	lsls	r2, r3, #22
 800de36:	d4ef      	bmi.n	800de18 <__smakebuf_r+0x18>
 800de38:	f023 0303 	bic.w	r3, r3, #3
 800de3c:	f043 0302 	orr.w	r3, r3, #2
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	e7e3      	b.n	800de0c <__smakebuf_r+0xc>
 800de44:	4b0d      	ldr	r3, [pc, #52]	; (800de7c <__smakebuf_r+0x7c>)
 800de46:	62b3      	str	r3, [r6, #40]	; 0x28
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	6020      	str	r0, [r4, #0]
 800de4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	9b00      	ldr	r3, [sp, #0]
 800de54:	6163      	str	r3, [r4, #20]
 800de56:	9b01      	ldr	r3, [sp, #4]
 800de58:	6120      	str	r0, [r4, #16]
 800de5a:	b15b      	cbz	r3, 800de74 <__smakebuf_r+0x74>
 800de5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de60:	4630      	mov	r0, r6
 800de62:	f000 f8c9 	bl	800dff8 <_isatty_r>
 800de66:	b128      	cbz	r0, 800de74 <__smakebuf_r+0x74>
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	f023 0303 	bic.w	r3, r3, #3
 800de6e:	f043 0301 	orr.w	r3, r3, #1
 800de72:	81a3      	strh	r3, [r4, #12]
 800de74:	89a0      	ldrh	r0, [r4, #12]
 800de76:	4305      	orrs	r5, r0
 800de78:	81a5      	strh	r5, [r4, #12]
 800de7a:	e7cd      	b.n	800de18 <__smakebuf_r+0x18>
 800de7c:	0800dc15 	.word	0x0800dc15

0800de80 <_raise_r>:
 800de80:	291f      	cmp	r1, #31
 800de82:	b538      	push	{r3, r4, r5, lr}
 800de84:	4604      	mov	r4, r0
 800de86:	460d      	mov	r5, r1
 800de88:	d904      	bls.n	800de94 <_raise_r+0x14>
 800de8a:	2316      	movs	r3, #22
 800de8c:	6003      	str	r3, [r0, #0]
 800de8e:	f04f 30ff 	mov.w	r0, #4294967295
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de96:	b112      	cbz	r2, 800de9e <_raise_r+0x1e>
 800de98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de9c:	b94b      	cbnz	r3, 800deb2 <_raise_r+0x32>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 f830 	bl	800df04 <_getpid_r>
 800dea4:	462a      	mov	r2, r5
 800dea6:	4601      	mov	r1, r0
 800dea8:	4620      	mov	r0, r4
 800deaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deae:	f000 b817 	b.w	800dee0 <_kill_r>
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d00a      	beq.n	800decc <_raise_r+0x4c>
 800deb6:	1c59      	adds	r1, r3, #1
 800deb8:	d103      	bne.n	800dec2 <_raise_r+0x42>
 800deba:	2316      	movs	r3, #22
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	2001      	movs	r0, #1
 800dec0:	e7e7      	b.n	800de92 <_raise_r+0x12>
 800dec2:	2400      	movs	r4, #0
 800dec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dec8:	4628      	mov	r0, r5
 800deca:	4798      	blx	r3
 800decc:	2000      	movs	r0, #0
 800dece:	e7e0      	b.n	800de92 <_raise_r+0x12>

0800ded0 <raise>:
 800ded0:	4b02      	ldr	r3, [pc, #8]	; (800dedc <raise+0xc>)
 800ded2:	4601      	mov	r1, r0
 800ded4:	6818      	ldr	r0, [r3, #0]
 800ded6:	f7ff bfd3 	b.w	800de80 <_raise_r>
 800deda:	bf00      	nop
 800dedc:	200002e0 	.word	0x200002e0

0800dee0 <_kill_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	; (800df00 <_kill_r+0x20>)
 800dee4:	2300      	movs	r3, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	f000 f8d7 	bl	800e0a0 <_kill>
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	d102      	bne.n	800defc <_kill_r+0x1c>
 800def6:	682b      	ldr	r3, [r5, #0]
 800def8:	b103      	cbz	r3, 800defc <_kill_r+0x1c>
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	bd38      	pop	{r3, r4, r5, pc}
 800defe:	bf00      	nop
 800df00:	20001a78 	.word	0x20001a78

0800df04 <_getpid_r>:
 800df04:	f000 b8bc 	b.w	800e080 <_getpid>

0800df08 <__sread>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	460c      	mov	r4, r1
 800df0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df10:	f000 f894 	bl	800e03c <_read_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	bfab      	itete	ge
 800df18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df1a:	89a3      	ldrhlt	r3, [r4, #12]
 800df1c:	181b      	addge	r3, r3, r0
 800df1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df22:	bfac      	ite	ge
 800df24:	6563      	strge	r3, [r4, #84]	; 0x54
 800df26:	81a3      	strhlt	r3, [r4, #12]
 800df28:	bd10      	pop	{r4, pc}

0800df2a <__swrite>:
 800df2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2e:	461f      	mov	r7, r3
 800df30:	898b      	ldrh	r3, [r1, #12]
 800df32:	05db      	lsls	r3, r3, #23
 800df34:	4605      	mov	r5, r0
 800df36:	460c      	mov	r4, r1
 800df38:	4616      	mov	r6, r2
 800df3a:	d505      	bpl.n	800df48 <__swrite+0x1e>
 800df3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df40:	2302      	movs	r3, #2
 800df42:	2200      	movs	r2, #0
 800df44:	f000 f868 	bl	800e018 <_lseek_r>
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df52:	81a3      	strh	r3, [r4, #12]
 800df54:	4632      	mov	r2, r6
 800df56:	463b      	mov	r3, r7
 800df58:	4628      	mov	r0, r5
 800df5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df5e:	f000 b817 	b.w	800df90 <_write_r>

0800df62 <__sseek>:
 800df62:	b510      	push	{r4, lr}
 800df64:	460c      	mov	r4, r1
 800df66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6a:	f000 f855 	bl	800e018 <_lseek_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	bf15      	itete	ne
 800df74:	6560      	strne	r0, [r4, #84]	; 0x54
 800df76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df7e:	81a3      	strheq	r3, [r4, #12]
 800df80:	bf18      	it	ne
 800df82:	81a3      	strhne	r3, [r4, #12]
 800df84:	bd10      	pop	{r4, pc}

0800df86 <__sclose>:
 800df86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df8a:	f000 b813 	b.w	800dfb4 <_close_r>
	...

0800df90 <_write_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4d07      	ldr	r5, [pc, #28]	; (800dfb0 <_write_r+0x20>)
 800df94:	4604      	mov	r4, r0
 800df96:	4608      	mov	r0, r1
 800df98:	4611      	mov	r1, r2
 800df9a:	2200      	movs	r2, #0
 800df9c:	602a      	str	r2, [r5, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f000 f896 	bl	800e0d0 <_write>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_write_r+0x1e>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_write_r+0x1e>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	20001a78 	.word	0x20001a78

0800dfb4 <_close_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d06      	ldr	r5, [pc, #24]	; (800dfd0 <_close_r+0x1c>)
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	f000 f84e 	bl	800e060 <_close>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_close_r+0x1a>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_close_r+0x1a>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	20001a78 	.word	0x20001a78

0800dfd4 <_fstat_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d07      	ldr	r5, [pc, #28]	; (800dff4 <_fstat_r+0x20>)
 800dfd8:	2300      	movs	r3, #0
 800dfda:	4604      	mov	r4, r0
 800dfdc:	4608      	mov	r0, r1
 800dfde:	4611      	mov	r1, r2
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	f000 f845 	bl	800e070 <_fstat>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	d102      	bne.n	800dff0 <_fstat_r+0x1c>
 800dfea:	682b      	ldr	r3, [r5, #0]
 800dfec:	b103      	cbz	r3, 800dff0 <_fstat_r+0x1c>
 800dfee:	6023      	str	r3, [r4, #0]
 800dff0:	bd38      	pop	{r3, r4, r5, pc}
 800dff2:	bf00      	nop
 800dff4:	20001a78 	.word	0x20001a78

0800dff8 <_isatty_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d06      	ldr	r5, [pc, #24]	; (800e014 <_isatty_r+0x1c>)
 800dffc:	2300      	movs	r3, #0
 800dffe:	4604      	mov	r4, r0
 800e000:	4608      	mov	r0, r1
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	f000 f844 	bl	800e090 <_isatty>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d102      	bne.n	800e012 <_isatty_r+0x1a>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	b103      	cbz	r3, 800e012 <_isatty_r+0x1a>
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	20001a78 	.word	0x20001a78

0800e018 <_lseek_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d07      	ldr	r5, [pc, #28]	; (800e038 <_lseek_r+0x20>)
 800e01c:	4604      	mov	r4, r0
 800e01e:	4608      	mov	r0, r1
 800e020:	4611      	mov	r1, r2
 800e022:	2200      	movs	r2, #0
 800e024:	602a      	str	r2, [r5, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	f000 f842 	bl	800e0b0 <_lseek>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d102      	bne.n	800e036 <_lseek_r+0x1e>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	b103      	cbz	r3, 800e036 <_lseek_r+0x1e>
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	20001a78 	.word	0x20001a78

0800e03c <_read_r>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	4d07      	ldr	r5, [pc, #28]	; (800e05c <_read_r+0x20>)
 800e040:	4604      	mov	r4, r0
 800e042:	4608      	mov	r0, r1
 800e044:	4611      	mov	r1, r2
 800e046:	2200      	movs	r2, #0
 800e048:	602a      	str	r2, [r5, #0]
 800e04a:	461a      	mov	r2, r3
 800e04c:	f000 f838 	bl	800e0c0 <_read>
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	d102      	bne.n	800e05a <_read_r+0x1e>
 800e054:	682b      	ldr	r3, [r5, #0]
 800e056:	b103      	cbz	r3, 800e05a <_read_r+0x1e>
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	bd38      	pop	{r3, r4, r5, pc}
 800e05c:	20001a78 	.word	0x20001a78

0800e060 <_close>:
 800e060:	4b02      	ldr	r3, [pc, #8]	; (800e06c <_close+0xc>)
 800e062:	2258      	movs	r2, #88	; 0x58
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	f04f 30ff 	mov.w	r0, #4294967295
 800e06a:	4770      	bx	lr
 800e06c:	20001a78 	.word	0x20001a78

0800e070 <_fstat>:
 800e070:	4b02      	ldr	r3, [pc, #8]	; (800e07c <_fstat+0xc>)
 800e072:	2258      	movs	r2, #88	; 0x58
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	f04f 30ff 	mov.w	r0, #4294967295
 800e07a:	4770      	bx	lr
 800e07c:	20001a78 	.word	0x20001a78

0800e080 <_getpid>:
 800e080:	4b02      	ldr	r3, [pc, #8]	; (800e08c <_getpid+0xc>)
 800e082:	2258      	movs	r2, #88	; 0x58
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	f04f 30ff 	mov.w	r0, #4294967295
 800e08a:	4770      	bx	lr
 800e08c:	20001a78 	.word	0x20001a78

0800e090 <_isatty>:
 800e090:	4b02      	ldr	r3, [pc, #8]	; (800e09c <_isatty+0xc>)
 800e092:	2258      	movs	r2, #88	; 0x58
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	2000      	movs	r0, #0
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	20001a78 	.word	0x20001a78

0800e0a0 <_kill>:
 800e0a0:	4b02      	ldr	r3, [pc, #8]	; (800e0ac <_kill+0xc>)
 800e0a2:	2258      	movs	r2, #88	; 0x58
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0aa:	4770      	bx	lr
 800e0ac:	20001a78 	.word	0x20001a78

0800e0b0 <_lseek>:
 800e0b0:	4b02      	ldr	r3, [pc, #8]	; (800e0bc <_lseek+0xc>)
 800e0b2:	2258      	movs	r2, #88	; 0x58
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ba:	4770      	bx	lr
 800e0bc:	20001a78 	.word	0x20001a78

0800e0c0 <_read>:
 800e0c0:	4b02      	ldr	r3, [pc, #8]	; (800e0cc <_read+0xc>)
 800e0c2:	2258      	movs	r2, #88	; 0x58
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ca:	4770      	bx	lr
 800e0cc:	20001a78 	.word	0x20001a78

0800e0d0 <_write>:
 800e0d0:	4b02      	ldr	r3, [pc, #8]	; (800e0dc <_write+0xc>)
 800e0d2:	2258      	movs	r2, #88	; 0x58
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0da:	4770      	bx	lr
 800e0dc:	20001a78 	.word	0x20001a78

0800e0e0 <_exit>:
 800e0e0:	e7fe      	b.n	800e0e0 <_exit>
	...

0800e0e4 <_init>:
 800e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e6:	bf00      	nop
 800e0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ea:	bc08      	pop	{r3}
 800e0ec:	469e      	mov	lr, r3
 800e0ee:	4770      	bx	lr

0800e0f0 <_fini>:
 800e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f2:	bf00      	nop
 800e0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0f6:	bc08      	pop	{r3}
 800e0f8:	469e      	mov	lr, r3
 800e0fa:	4770      	bx	lr
