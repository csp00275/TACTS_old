
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08006ff0  08006ff0  00016ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080074d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001dc  080076b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080076b0  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c82d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efc  00000000  00000000  0002ca39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026223  00000000  00000000  0002fa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c381  00000000  00000000  00055c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e776d  00000000  00000000  00061fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  0014977c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fd8 	.word	0x08006fd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006fd8 	.word	0x08006fd8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <ProcessCommand>:
 */

#include"uart.h"
#include<stdio.h>
void ProcessCommand(uint8_t *command)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {
 8000f14:	491a      	ldr	r1, [pc, #104]	; (8000f80 <ProcessCommand+0x74>)
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff f97a 	bl	8000210 <strcmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <ProcessCommand+0x2e>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 8000f22:	4918      	ldr	r1, [pc, #96]	; (8000f84 <ProcessCommand+0x78>)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <ProcessCommand+0x7c>)
 8000f26:	f003 fddf 	bl	8004ae8 <siprintf>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	4915      	ldr	r1, [pc, #84]	; (8000f88 <ProcessCommand+0x7c>)
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <ProcessCommand+0x80>)
 8000f34:	f002 f85a 	bl	8002fec <HAL_UART_Transmit>
    } else if (strcmp((char*)command, "2") == 0) {
    	SencondCommand();
    } else {
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 8000f38:	e01e      	b.n	8000f78 <ProcessCommand+0x6c>
    } else if (strcmp((char*)command, "1") == 0) {
 8000f3a:	4915      	ldr	r1, [pc, #84]	; (8000f90 <ProcessCommand+0x84>)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff f967 	bl	8000210 <strcmp>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <ProcessCommand+0x42>
    	FirstCommand();
 8000f48:	f000 f828 	bl	8000f9c <FirstCommand>
}
 8000f4c:	e014      	b.n	8000f78 <ProcessCommand+0x6c>
    } else if (strcmp((char*)command, "2") == 0) {
 8000f4e:	4911      	ldr	r1, [pc, #68]	; (8000f94 <ProcessCommand+0x88>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f95d 	bl	8000210 <strcmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <ProcessCommand+0x56>
    	SencondCommand();
 8000f5c:	f000 f834 	bl	8000fc8 <SencondCommand>
}
 8000f60:	e00a      	b.n	8000f78 <ProcessCommand+0x6c>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <ProcessCommand+0x8c>)
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <ProcessCommand+0x7c>)
 8000f66:	f003 fdbf 	bl	8004ae8 <siprintf>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	4905      	ldr	r1, [pc, #20]	; (8000f88 <ProcessCommand+0x7c>)
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <ProcessCommand+0x80>)
 8000f74:	f002 f83a 	bl	8002fec <HAL_UART_Transmit>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08006ff0 	.word	0x08006ff0
 8000f84:	08006ff8 	.word	0x08006ff8
 8000f88:	20000284 	.word	0x20000284
 8000f8c:	200001fc 	.word	0x200001fc
 8000f90:	08007000 	.word	0x08007000
 8000f94:	08007004 	.word	0x08007004
 8000f98:	08007008 	.word	0x08007008

08000f9c <FirstCommand>:


void FirstCommand()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "FirstCommand\n"), 100);
 8000fa0:	4906      	ldr	r1, [pc, #24]	; (8000fbc <FirstCommand+0x20>)
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <FirstCommand+0x24>)
 8000fa4:	f003 fda0 	bl	8004ae8 <siprintf>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <FirstCommand+0x24>)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <FirstCommand+0x28>)
 8000fb2:	f002 f81b 	bl	8002fec <HAL_UART_Transmit>

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	08007028 	.word	0x08007028
 8000fc0:	20000284 	.word	0x20000284
 8000fc4:	200001fc 	.word	0x200001fc

08000fc8 <SencondCommand>:

void SencondCommand()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "SencondCommand\n"), 100);
 8000fcc:	4906      	ldr	r1, [pc, #24]	; (8000fe8 <SencondCommand+0x20>)
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <SencondCommand+0x24>)
 8000fd0:	f003 fd8a 	bl	8004ae8 <siprintf>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <SencondCommand+0x24>)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <SencondCommand+0x28>)
 8000fde:	f002 f805 	bl	8002fec <HAL_UART_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08007038 	.word	0x08007038
 8000fec:	20000284 	.word	0x20000284
 8000ff0:	200001fc 	.word	0x200001fc

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f000 fb33 	bl	8001662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f83e 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f8b4 	bl	800116c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001004:	f000 fa9e 	bl	8001544 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001008:	f000 f8a4 	bl	8001154 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800100c:	4916      	ldr	r1, [pc, #88]	; (8001068 <main+0x74>)
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <main+0x78>)
 8001010:	f003 fd6a 	bl	8004ae8 <siprintf>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	4914      	ldr	r1, [pc, #80]	; (800106c <main+0x78>)
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <main+0x7c>)
 800101e:	f001 ffe5 	bl	8002fec <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 8001022:	4914      	ldr	r1, [pc, #80]	; (8001074 <main+0x80>)
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <main+0x78>)
 8001026:	f003 fd5f 	bl	8004ae8 <siprintf>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	2364      	movs	r3, #100	; 0x64
 8001030:	490e      	ldr	r1, [pc, #56]	; (800106c <main+0x78>)
 8001032:	480f      	ldr	r0, [pc, #60]	; (8001070 <main+0x7c>)
 8001034:	f001 ffda 	bl	8002fec <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8001038:	490b      	ldr	r1, [pc, #44]	; (8001068 <main+0x74>)
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <main+0x78>)
 800103c:	f003 fd54 	bl	8004ae8 <siprintf>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <main+0x78>)
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <main+0x7c>)
 800104a:	f001 ffcf 	bl	8002fec <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800104e:	2241      	movs	r2, #65	; 0x41
 8001050:	4909      	ldr	r1, [pc, #36]	; (8001078 <main+0x84>)
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <main+0x7c>)
 8001054:	f000 faa6 	bl	80015a4 <ReceiveUartMessage>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f7      	bne.n	800104e <main+0x5a>
	  {
	      ProcessCommand(rxMsg);
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <main+0x84>)
 8001060:	f7ff ff54 	bl	8000f0c <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001064:	e7f3      	b.n	800104e <main+0x5a>
 8001066:	bf00      	nop
 8001068:	08007048 	.word	0x08007048
 800106c:	20000284 	.word	0x20000284
 8001070:	200001fc 	.word	0x200001fc
 8001074:	08007088 	.word	0x08007088
 8001078:	200002c4 	.word	0x200002c4

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 f8ba 	bl	8004204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a29      	ldr	r2, [pc, #164]	; (800114c <SystemClock_Config+0xd0>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xd0>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a24      	ldr	r2, [pc, #144]	; (8001150 <SystemClock_Config+0xd4>)
 80010be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <SystemClock_Config+0xd4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	2310      	movs	r3, #16
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010e8:	23d8      	movs	r3, #216	; 0xd8
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 feaf 	bl	8001e5c <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001104:	f000 f856 	bl	80011b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001108:	f000 fe58 	bl	8001dbc <HAL_PWREx_EnableOverDrive>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001112:	f000 f84f 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001122:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2107      	movs	r1, #7
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f935 	bl	80023a4 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001140:	f000 f838 	bl	80011b4 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2025      	movs	r0, #37	; 0x25
 800115e:	f000 fbb8 	bl	80018d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001162:	2025      	movs	r0, #37	; 0x25
 8001164:	f000 fbd1 	bl	800190a <HAL_NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_GPIO_Init+0x44>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <MX_GPIO_Init+0x44>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_GPIO_Init+0x44>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_GPIO_Init+0x44>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <MX_GPIO_Init+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_GPIO_Init+0x44>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 80011bc:	4905      	ldr	r1, [pc, #20]	; (80011d4 <Error_Handler+0x20>)
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <Error_Handler+0x24>)
 80011c0:	f003 fc92 	bl	8004ae8 <siprintf>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	2364      	movs	r3, #100	; 0x64
 80011ca:	4903      	ldr	r1, [pc, #12]	; (80011d8 <Error_Handler+0x24>)
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <Error_Handler+0x28>)
 80011ce:	f001 ff0d 	bl	8002fec <HAL_UART_Transmit>
 80011d2:	e7f3      	b.n	80011bc <Error_Handler+0x8>
 80011d4:	080070c8 	.word	0x080070c8
 80011d8:	20000284 	.word	0x20000284
 80011dc:	200001fc 	.word	0x200001fc

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_MspInit+0x44>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_MspInit+0x44>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_MspInit+0x44>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x44>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x44>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x44>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0ac      	sub	sp, #176	; 0xb0
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	2284      	movs	r2, #132	; 0x84
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f002 ffdb 	bl	8004204 <memset>
  if(huart->Instance==USART1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <HAL_UART_MspInit+0xf4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d15c      	bne.n	8001312 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800125c:	2300      	movs	r3, #0
 800125e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f001 fa83 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001270:	f7ff ffa0 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_UART_MspInit+0xf8>)
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_UART_MspInit+0xf8>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6453      	str	r3, [r2, #68]	; 0x44
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_UART_MspInit+0xf8>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_UART_MspInit+0xf8>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a23      	ldr	r2, [pc, #140]	; (8001320 <HAL_UART_MspInit+0xf8>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_UART_MspInit+0xf8>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_UART_MspInit+0xf8>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_UART_MspInit+0xf8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_UART_MspInit+0xf8>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d4:	2307      	movs	r3, #7
 80012d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012de:	4619      	mov	r1, r3
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <HAL_UART_MspInit+0xfc>)
 80012e2:	f000 fbbf 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001300:	2307      	movs	r3, #7
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130a:	4619      	mov	r1, r3
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <HAL_UART_MspInit+0x100>)
 800130e:	f000 fba9 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	37b0      	adds	r7, #176	; 0xb0
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40011000 	.word	0x40011000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400
 8001328:	40020000 	.word	0x40020000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f9b0 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <USART1_IRQHandler+0x10>)
 8001386:	f001 ff79 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001fc 	.word	0x200001fc

08001394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_kill>:

int _kill(int pid, int sig)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ae:	f002 feff 	bl	80041b0 <__errno>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2216      	movs	r2, #22
 80013b6:	601a      	str	r2, [r3, #0]
  return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_exit>:

void _exit (int status)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffe7 	bl	80013a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013d6:	e7fe      	b.n	80013d6 <_exit+0x12>

080013d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e00a      	b.n	8001400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ea:	f3af 8000 	nop.w
 80013ee:	4601      	mov	r1, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf0      	blt.n	80013ea <_read+0x12>
  }

  return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e009      	b.n	8001438 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf1      	blt.n	8001424 <_write+0x12>
  }
  return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_close>:

int _close(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001472:	605a      	str	r2, [r3, #4]
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_isatty>:

int _isatty(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f002 fe64 	bl	80041b0 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20050000 	.word	0x20050000
 8001514:	00000400 	.word	0x00000400
 8001518:	200001f8 	.word	0x200001f8
 800151c:	20000320 	.word	0x20000320

08001520 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_USART1_UART_Init+0x58>)
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <MX_USART1_UART_Init+0x5c>)
 800154c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_USART1_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_USART1_UART_Init+0x58>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_USART1_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_USART1_UART_Init+0x58>)
 8001588:	f001 fce2 	bl	8002f50 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001592:	f7ff fe0f 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200001fc 	.word	0x200001fc
 80015a0:	40011000 	.word	0x40011000

080015a4 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80015b6:	f107 0115 	add.w	r1, r7, #21
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	2201      	movs	r2, #1
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f001 fd96 	bl	80030f2 <HAL_UART_Receive>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f4      	bne.n	80015b6 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 80015cc:	7d7b      	ldrb	r3, [r7, #21]
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d106      	bne.n	80015e0 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 80015d2:	8afb      	ldrh	r3, [r7, #22]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e012      	b.n	8001606 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 80015e0:	8afb      	ldrh	r3, [r7, #22]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4413      	add	r3, r2
 80015e6:	7d7a      	ldrb	r2, [r7, #21]
 80015e8:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80015ea:	8afb      	ldrh	r3, [r7, #22]
 80015ec:	3301      	adds	r3, #1
 80015ee:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80015f0:	8afa      	ldrh	r2, [r7, #22]
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3de      	bcc.n	80015b6 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001616:	490e      	ldr	r1, [pc, #56]	; (8001650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800162c:	4c0b      	ldr	r4, [pc, #44]	; (800165c <LoopFillZerobss+0x26>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163a:	f7ff ff71 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f002 fdbd 	bl	80041bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fcd7 	bl	8000ff4 <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001654:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 8001658:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800165c:	2000031c 	.word	0x2000031c

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>

08001662 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 f928 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166c:	200f      	movs	r0, #15
 800166e:	f000 f805 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fdb5 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f943 	bl	8001926 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f90b 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000308 	.word	0x20000308

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000308 	.word	0x20000308

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <__NVIC_SetPriorityGrouping+0x40>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	4313      	orrs	r3, r2
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x40>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	05fa0000 	.word	0x05fa0000

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff29 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff3e 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff31 	bl	8001780 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa2 	bl	8001878 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff feda 	bl	8001704 <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d008      	beq.n	8001970 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e052      	b.n	8001a16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0216 	bic.w	r2, r2, #22
 800197e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <HAL_DMA_Abort+0x62>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0208 	bic.w	r2, r2, #8
 80019ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c0:	e013      	b.n	80019ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c2:	f7ff fe9f 	bl	8001704 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d90c      	bls.n	80019ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e015      	b.n	8001a16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e4      	bne.n	80019c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	223f      	movs	r2, #63	; 0x3f
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d004      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00c      	b.n	8001a56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2205      	movs	r2, #5
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e175      	b.n	8001d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8164 	bne.w	8001d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x56>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80be 	beq.w	8001d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c06:	4a61      	ldr	r2, [pc, #388]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d037      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d031      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x338>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_GPIO_Init+0x340>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x344>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x348>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	e012      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	e010      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae86 	bls.w	8001a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40022400 	.word	0x40022400
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dea:	f7ff fc8b 	bl	8001704 <HAL_GetTick>
 8001dee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df0:	e009      	b.n	8001e06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001df2:	f7ff fc87 	bl	8001704 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e00:	d901      	bls.n	8001e06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e022      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e12:	d1ee      	bne.n	8001df2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e20:	f7ff fc70 	bl	8001704 <HAL_GetTick>
 8001e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e26:	e009      	b.n	8001e3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e28:	f7ff fc6c 	bl	8001704 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e36:	d901      	bls.n	8001e3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e007      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e48:	d1ee      	bne.n	8001e28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e291      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b96      	ldr	r3, [pc, #600]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8c:	4b93      	ldr	r3, [pc, #588]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d112      	bne.n	8001ebe <HAL_RCC_OscConfig+0x62>
 8001e98:	4b90      	ldr	r3, [pc, #576]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea6:	4b8d      	ldr	r3, [pc, #564]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x130>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d168      	bne.n	8001f8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e26b      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7a>
 8001ec8:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a83      	ldr	r2, [pc, #524]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e02e      	b.n	8001f34 <HAL_RCC_OscConfig+0xd8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x9c>
 8001ede:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b7c      	ldr	r3, [pc, #496]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7b      	ldr	r2, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xd8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0xc0>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b73      	ldr	r3, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a72      	ldr	r2, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd8>
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b6c      	ldr	r3, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6b      	ldr	r2, [pc, #428]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fbe2 	bl	8001704 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fbde 	bl	8001704 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e21f      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe8>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff fbce 	bl	8001704 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fbca 	bl	8001704 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e20b      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b57      	ldr	r3, [pc, #348]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x110>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d069      	beq.n	800206e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b4d      	ldr	r3, [pc, #308]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x190>
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1df      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	493d      	ldr	r1, [pc, #244]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e040      	b.n	800206e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a38      	ldr	r2, [pc, #224]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fb80 	bl	8001704 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff fb7c 	bl	8001704 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1bd      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4929      	ldr	r1, [pc, #164]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff fb5c 	bl	8001704 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7ff fb58 	bl	8001704 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e199      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d038      	beq.n	80020ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d019      	beq.n	80020b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fb39 	bl	8001704 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fb35 	bl	8001704 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e176      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 80020aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x23a>
 80020b4:	e01a      	b.n	80020ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_RCC_OscConfig+0x280>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7ff fb1f 	bl	8001704 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff fb1b 	bl	8001704 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d903      	bls.n	80020e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e15c      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
 80020dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	4b91      	ldr	r3, [pc, #580]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a4 	beq.w	8002242 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b8b      	ldr	r3, [pc, #556]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a87      	ldr	r2, [pc, #540]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b85      	ldr	r3, [pc, #532]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b82      	ldr	r3, [pc, #520]	; (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800212e:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7e      	ldr	r2, [pc, #504]	; (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff fae3 	bl	8001704 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff fadf 	bl	8001704 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e120      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b75      	ldr	r3, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x31a>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	e02d      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x33c>
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a66      	ldr	r2, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x35e>
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a60      	ldr	r2, [pc, #384]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a5d      	ldr	r2, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
 80021ba:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a5a      	ldr	r2, [pc, #360]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fa93 	bl	8001704 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fa8f 	bl	8001704 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0ce      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x386>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fa7d 	bl	8001704 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff fa79 	bl	8001704 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80a4 	beq.w	8002394 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d06b      	beq.n	8002330 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d149      	bne.n	80022f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff fa4a 	bl	8001704 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff fa46 	bl	8001704 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e087      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	3b01      	subs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	4313      	orrs	r3, r2
 80022b8:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fa1a 	bl	8001704 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fa16 	bl	8001704 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e057      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x478>
 80022f2:	e04f      	b.n	8002394 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fa00 	bl	8001704 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff f9fc 	bl	8001704 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e03d      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x4ac>
 8002326:	e035      	b.n	8002394 <HAL_RCC_OscConfig+0x538>
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x544>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d028      	beq.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d121      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d11a      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002366:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	3b01      	subs	r3, #1
 800237a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d0      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 020f 	bic.w	r2, r3, #15
 80023d2:	4965      	ldr	r1, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e073      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4936      	ldr	r1, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7ff f934 	bl	8001704 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff f930 	bl	8001704 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d210      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1cc>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d0>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1d4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f890 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	080070d0 	.word	0x080070d0
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b090      	sub	sp, #64	; 0x40
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
 8002588:	2300      	movs	r3, #0
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80a1 	bhi.w	80026e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e09b      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_GetSysClockFreq+0x184>)
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025b4:	e09b      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ba:	e098      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d028      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	627a      	str	r2, [r7, #36]	; 0x24
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025e4:	2100      	movs	r1, #0
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_GetSysClockFreq+0x188>)
 80025e8:	fb03 f201 	mul.w	r2, r3, r1
 80025ec:	2300      	movs	r3, #0
 80025ee:	fb00 f303 	mul.w	r3, r0, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	4a43      	ldr	r2, [pc, #268]	; (8002704 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f6:	fba0 1202 	umull	r1, r2, r0, r2
 80025fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025fc:	460a      	mov	r2, r1
 80025fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002602:	4413      	add	r3, r2
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	2200      	movs	r2, #0
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	61fa      	str	r2, [r7, #28]
 800260e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002612:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002616:	f7fe faf7 	bl	8000c08 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4613      	mov	r3, r2
 8002620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002622:	e053      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	2200      	movs	r2, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	617a      	str	r2, [r7, #20]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002636:	f04f 0b00 	mov.w	fp, #0
 800263a:	4652      	mov	r2, sl
 800263c:	465b      	mov	r3, fp
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	0159      	lsls	r1, r3, #5
 8002648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264c:	0150      	lsls	r0, r2, #5
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	ebb2 080a 	subs.w	r8, r2, sl
 8002656:	eb63 090b 	sbc.w	r9, r3, fp
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002666:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800266a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800266e:	ebb2 0408 	subs.w	r4, r2, r8
 8002672:	eb63 0509 	sbc.w	r5, r3, r9
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	00eb      	lsls	r3, r5, #3
 8002680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002684:	00e2      	lsls	r2, r4, #3
 8002686:	4614      	mov	r4, r2
 8002688:	461d      	mov	r5, r3
 800268a:	eb14 030a 	adds.w	r3, r4, sl
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	eb45 030b 	adc.w	r3, r5, fp
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a2:	4629      	mov	r1, r5
 80026a4:	028b      	lsls	r3, r1, #10
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ac:	4621      	mov	r1, r4
 80026ae:	028a      	lsls	r2, r1, #10
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	2200      	movs	r2, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	60fa      	str	r2, [r7, #12]
 80026bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c0:	f7fe faa2 	bl	8000c08 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80026dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026e6:	e002      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetSysClockFreq+0x184>)
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3740      	adds	r7, #64	; 0x40
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	00f42400 	.word	0x00f42400
 8002704:	017d7840 	.word	0x017d7840

08002708 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_GetHCLKFreq+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000000 	.word	0x20000000

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff fff0 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	080070e0 	.word	0x080070e0

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800274c:	f7ff ffdc 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0b5b      	lsrs	r3, r3, #13
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	080070e0 	.word	0x080070e0

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002798:	4b69      	ldr	r3, [pc, #420]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a68      	ldr	r2, [pc, #416]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027a2:	6093      	str	r3, [r2, #8]
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	4964      	ldr	r1, [pc, #400]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	4959      	ldr	r1, [pc, #356]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002806:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	494a      	ldr	r1, [pc, #296]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 808b 	beq.w	800296a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a39      	ldr	r2, [pc, #228]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a34      	ldr	r2, [pc, #208]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe ff44 	bl	8001704 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe ff40 	bl	8001704 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e357      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002892:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d035      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d02e      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d114      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe ff08 	bl	8001704 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe ff04 	bl	8001704 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e319      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002926:	d111      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002936:	400b      	ands	r3, r1
 8002938:	4901      	ldr	r1, [pc, #4]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
 800293e:	e00b      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000
 8002948:	0ffffcff 	.word	0x0ffffcff
 800294c:	4baa      	ldr	r3, [pc, #680]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4aa9      	ldr	r2, [pc, #676]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002952:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	4ba7      	ldr	r3, [pc, #668]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	49a4      	ldr	r1, [pc, #656]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002966:	4313      	orrs	r3, r2
 8002968:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002976:	4ba0      	ldr	r3, [pc, #640]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297c:	4a9e      	ldr	r2, [pc, #632]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002986:	4b9c      	ldr	r3, [pc, #624]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002988:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	4999      	ldr	r1, [pc, #612]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a4:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b2:	4991      	ldr	r1, [pc, #580]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c6:	4b8c      	ldr	r3, [pc, #560]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d4:	4988      	ldr	r1, [pc, #544]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029e8:	4b83      	ldr	r3, [pc, #524]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f6:	4980      	ldr	r1, [pc, #512]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4977      	ldr	r1, [pc, #476]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2c:	4b72      	ldr	r3, [pc, #456]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	496f      	ldr	r1, [pc, #444]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f023 020c 	bic.w	r2, r3, #12
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5c:	4966      	ldr	r1, [pc, #408]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a70:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	495e      	ldr	r1, [pc, #376]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	4955      	ldr	r1, [pc, #340]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	494d      	ldr	r1, [pc, #308]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	4944      	ldr	r1, [pc, #272]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	493c      	ldr	r1, [pc, #240]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b28:	4933      	ldr	r1, [pc, #204]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4a:	492b      	ldr	r1, [pc, #172]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6c:	4922      	ldr	r1, [pc, #136]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	4912      	ldr	r1, [pc, #72]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd0:	4909      	ldr	r1, [pc, #36]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d006      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80d9 	beq.w	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a01      	ldr	r2, [pc, #4]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fd81 	bl	8001704 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c06:	f7fe fd7d 	bl	8001704 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	; 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e194      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c18:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d021      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11d      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c38:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c46:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4c:	0e1b      	lsrs	r3, r3, #24
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	019a      	lsls	r2, r3, #6
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	071b      	lsls	r3, r3, #28
 8002c6c:	4957      	ldr	r1, [pc, #348]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9e:	d129      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	0f1b      	lsrs	r3, r3, #28
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	019a      	lsls	r2, r3, #6
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	071b      	lsls	r3, r3, #28
 8002cd4:	493d      	ldr	r1, [pc, #244]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce2:	f023 021f 	bic.w	r2, r3, #31
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	3b01      	subs	r3, #1
 8002cec:	4937      	ldr	r1, [pc, #220]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01d      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d14:	0f1b      	lsrs	r3, r3, #28
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	019a      	lsls	r2, r3, #6
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	071b      	lsls	r3, r3, #28
 8002d34:	4925      	ldr	r1, [pc, #148]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d011      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	019a      	lsls	r2, r3, #6
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	071b      	lsls	r3, r3, #28
 8002d64:	4919      	ldr	r1, [pc, #100]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe fcc4 	bl	8001704 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d80:	f7fe fcc0 	bl	8001704 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0d7      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 80cd 	bne.w	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fe fca7 	bl	8001704 <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dba:	f7fe fca3 	bl	8001704 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d903      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0ba      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002dcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ddc:	d0ed      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d12a      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	0f1b      	lsrs	r3, r3, #28
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	019a      	lsls	r2, r3, #6
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	4944      	ldr	r1, [pc, #272]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e42:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	493d      	ldr	r1, [pc, #244]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d022      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e70:	d11d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e80:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	4929      	ldr	r1, [pc, #164]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	0e1b      	lsrs	r3, r3, #24
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	019a      	lsls	r2, r3, #6
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4911      	ldr	r1, [pc, #68]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe fbf4 	bl	8001704 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f20:	f7fe fbf0 	bl	8001704 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e007      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3e:	d1ef      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e040      	b.n	8002fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe f958 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fc66 	bl	8003860 <UART_SetConfig>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e022      	b.n	8002fe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 febe 	bl	8003d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 ff45 	bl	8003e6c <UART_CheckIdleState>
 8002fe2:	4603      	mov	r3, r0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003000:	2b20      	cmp	r3, #32
 8003002:	d171      	bne.n	80030e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Transmit+0x24>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e06a      	b.n	80030ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2221      	movs	r2, #33	; 0x21
 8003020:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fe fb6f 	bl	8001704 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Transmit+0x68>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800305c:	e02c      	b.n	80030b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 ff36 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e038      	b.n	80030ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	3302      	adds	r3, #2
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e007      	b.n	80030a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3301      	adds	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1cc      	bne.n	800305e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 ff03 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e005      	b.n	80030ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08a      	sub	sp, #40	; 0x28
 80030f6:	af02      	add	r7, sp, #8
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003108:	2b20      	cmp	r3, #32
 800310a:	f040 80b1 	bne.w	8003270 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_UART_Receive+0x28>
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0a9      	b.n	8003272 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2222      	movs	r2, #34	; 0x22
 800312a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003134:	f7fe fae6 	bl	8001704 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d10e      	bne.n	8003172 <HAL_UART_Receive+0x80>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_UART_Receive+0x76>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003166:	e02d      	b.n	80031c4 <HAL_UART_Receive+0xd2>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	22ff      	movs	r2, #255	; 0xff
 800316c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003170:	e028      	b.n	80031c4 <HAL_UART_Receive+0xd2>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <HAL_UART_Receive+0xa4>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Receive+0x9a>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	22ff      	movs	r2, #255	; 0xff
 8003186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800318a:	e01b      	b.n	80031c4 <HAL_UART_Receive+0xd2>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	227f      	movs	r2, #127	; 0x7f
 8003190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003194:	e016      	b.n	80031c4 <HAL_UART_Receive+0xd2>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319e:	d10d      	bne.n	80031bc <HAL_UART_Receive+0xca>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <HAL_UART_Receive+0xc0>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	227f      	movs	r2, #127	; 0x7f
 80031ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b0:	e008      	b.n	80031c4 <HAL_UART_Receive+0xd2>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ba:	e003      	b.n	80031c4 <HAL_UART_Receive+0xd2>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d4:	d108      	bne.n	80031e8 <HAL_UART_Receive+0xf6>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	e003      	b.n	80031f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031f0:	e032      	b.n	8003258 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2120      	movs	r1, #32
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fe6c 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e032      	b.n	8003272 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	b29a      	uxth	r2, r3
 800321a:	8a7b      	ldrh	r3, [r7, #18]
 800321c:	4013      	ands	r3, r2
 800321e:	b29a      	uxth	r2, r3
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	3302      	adds	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e00c      	b.n	8003246 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	b2da      	uxtb	r2, r3
 8003234:	8a7b      	ldrh	r3, [r7, #18]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4013      	ands	r3, r2
 800323a:	b2da      	uxtb	r2, r3
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1c6      	bne.n	80031f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0ba      	sub	sp, #232	; 0xe8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80032aa:	4013      	ands	r3, r2
 80032ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d115      	bne.n	80032e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00f      	beq.n	80032e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8297 	beq.w	8003808 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
      }
      return;
 80032e2:	e291      	b.n	8003808 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8117 	beq.w	800351c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032fe:	4b85      	ldr	r3, [pc, #532]	; (8003514 <HAL_UART_IRQHandler+0x298>)
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 810a 	beq.w	800351c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d011      	beq.n	8003338 <HAL_UART_IRQHandler+0xbc>
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d011      	beq.n	8003368 <HAL_UART_IRQHandler+0xec>
 8003344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2202      	movs	r2, #2
 8003356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d011      	beq.n	8003398 <HAL_UART_IRQHandler+0x11c>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2204      	movs	r2, #4
 8003386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	f043 0202 	orr.w	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2208      	movs	r2, #8
 80033c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	f043 0208 	orr.w	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <HAL_UART_IRQHandler+0x18a>
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 81fd 	beq.w	800380c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800341e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003456:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04f      	beq.n	80034fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fe01 	bl	8004066 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d141      	bne.n	80034f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3308      	adds	r3, #8
 8003478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800348c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3308      	adds	r3, #8
 800349a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800349e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1d9      	bne.n	8003472 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_UART_IRQHandler+0x29c>)
 80034cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe faa3 	bl	8001a1e <HAL_DMA_Abort_IT>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d017      	beq.n	800350e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034e8:	4610      	mov	r0, r2
 80034ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e00f      	b.n	800350e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9a0 	bl	8003834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e00b      	b.n	800350e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f99c 	bl	8003834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	e007      	b.n	800350e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f998 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800350c:	e17e      	b.n	800380c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350e:	bf00      	nop
    return;
 8003510:	e17c      	b.n	800380c <HAL_UART_IRQHandler+0x590>
 8003512:	bf00      	nop
 8003514:	04000120 	.word	0x04000120
 8003518:	0800412f 	.word	0x0800412f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 814c 	bne.w	80037be <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8145 	beq.w	80037be <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 813e 	beq.w	80037be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	f040 80b6 	bne.w	80036c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003566:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8150 	beq.w	8003810 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800357a:	429a      	cmp	r2, r3
 800357c:	f080 8148 	bcs.w	8003810 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003594:	f000 8086 	beq.w	80036a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1da      	bne.n	8003598 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3308      	adds	r3, #8
 80035e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3308      	adds	r3, #8
 8003602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800360a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800360e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e1      	bne.n	80035e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3308      	adds	r3, #8
 8003624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3308      	adds	r3, #8
 800363e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e3      	bne.n	800361e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	f023 0310 	bic.w	r3, r3, #16
 8003678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003686:	65bb      	str	r3, [r7, #88]	; 0x58
 8003688:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800368c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e4      	bne.n	8003664 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f94d 	bl	800193e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8c2 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036c4:	e0a4      	b.n	8003810 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8096 	beq.w	8003814 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80036e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8091 	beq.w	8003814 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
 8003716:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800371a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e4      	bne.n	80036f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	623b      	str	r3, [r7, #32]
   return(result);
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800374c:	633a      	str	r2, [r7, #48]	; 0x30
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e3      	bne.n	8003728 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	60fb      	str	r3, [r7, #12]
   return(result);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0310 	bic.w	r3, r3, #16
 8003788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	69b9      	ldr	r1, [r7, #24]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	617b      	str	r3, [r7, #20]
   return(result);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e4      	bne.n	8003774 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f846 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037bc:	e02a      	b.n	8003814 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01c      	beq.n	8003818 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
    }
    return;
 80037e6:	e017      	b.n	8003818 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <HAL_UART_IRQHandler+0x59e>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fcaa 	bl	800415a <UART_EndTransmit_IT>
    return;
 8003806:	e008      	b.n	800381a <HAL_UART_IRQHandler+0x59e>
      return;
 8003808:	bf00      	nop
 800380a:	e006      	b.n	800381a <HAL_UART_IRQHandler+0x59e>
    return;
 800380c:	bf00      	nop
 800380e:	e004      	b.n	800381a <HAL_UART_IRQHandler+0x59e>
      return;
 8003810:	bf00      	nop
 8003812:	e002      	b.n	800381a <HAL_UART_IRQHandler+0x59e>
      return;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <HAL_UART_IRQHandler+0x59e>
    return;
 8003818:	bf00      	nop
  }

}
 800381a:	37e8      	adds	r7, #232	; 0xe8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4ba6      	ldr	r3, [pc, #664]	; (8003b24 <UART_SetConfig+0x2c4>)
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	6979      	ldr	r1, [r7, #20]
 8003894:	430b      	orrs	r3, r1
 8003896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a94      	ldr	r2, [pc, #592]	; (8003b28 <UART_SetConfig+0x2c8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d120      	bne.n	800391e <UART_SetConfig+0xbe>
 80038dc:	4b93      	ldr	r3, [pc, #588]	; (8003b2c <UART_SetConfig+0x2cc>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d816      	bhi.n	8003918 <UART_SetConfig+0xb8>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0x90>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003901 	.word	0x08003901
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003907 	.word	0x08003907
 80038fc:	08003913 	.word	0x08003913
 8003900:	2301      	movs	r3, #1
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e150      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003906:	2302      	movs	r3, #2
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e14d      	b.n	8003ba8 <UART_SetConfig+0x348>
 800390c:	2304      	movs	r3, #4
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e14a      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003912:	2308      	movs	r3, #8
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e147      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003918:	2310      	movs	r3, #16
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e144      	b.n	8003ba8 <UART_SetConfig+0x348>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a83      	ldr	r2, [pc, #524]	; (8003b30 <UART_SetConfig+0x2d0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d132      	bne.n	800398e <UART_SetConfig+0x12e>
 8003928:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <UART_SetConfig+0x2cc>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d828      	bhi.n	8003988 <UART_SetConfig+0x128>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0xdc>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003971 	.word	0x08003971
 8003940:	08003989 	.word	0x08003989
 8003944:	08003989 	.word	0x08003989
 8003948:	08003989 	.word	0x08003989
 800394c:	0800397d 	.word	0x0800397d
 8003950:	08003989 	.word	0x08003989
 8003954:	08003989 	.word	0x08003989
 8003958:	08003989 	.word	0x08003989
 800395c:	08003977 	.word	0x08003977
 8003960:	08003989 	.word	0x08003989
 8003964:	08003989 	.word	0x08003989
 8003968:	08003989 	.word	0x08003989
 800396c:	08003983 	.word	0x08003983
 8003970:	2300      	movs	r3, #0
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e118      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003976:	2302      	movs	r3, #2
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e115      	b.n	8003ba8 <UART_SetConfig+0x348>
 800397c:	2304      	movs	r3, #4
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e112      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003982:	2308      	movs	r3, #8
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e10f      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003988:	2310      	movs	r3, #16
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e10c      	b.n	8003ba8 <UART_SetConfig+0x348>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <UART_SetConfig+0x2d4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d120      	bne.n	80039da <UART_SetConfig+0x17a>
 8003998:	4b64      	ldr	r3, [pc, #400]	; (8003b2c <UART_SetConfig+0x2cc>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d013      	beq.n	80039ce <UART_SetConfig+0x16e>
 80039a6:	2b30      	cmp	r3, #48	; 0x30
 80039a8:	d814      	bhi.n	80039d4 <UART_SetConfig+0x174>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d009      	beq.n	80039c2 <UART_SetConfig+0x162>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d810      	bhi.n	80039d4 <UART_SetConfig+0x174>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <UART_SetConfig+0x15c>
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d006      	beq.n	80039c8 <UART_SetConfig+0x168>
 80039ba:	e00b      	b.n	80039d4 <UART_SetConfig+0x174>
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e0f2      	b.n	8003ba8 <UART_SetConfig+0x348>
 80039c2:	2302      	movs	r3, #2
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e0ef      	b.n	8003ba8 <UART_SetConfig+0x348>
 80039c8:	2304      	movs	r3, #4
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e0ec      	b.n	8003ba8 <UART_SetConfig+0x348>
 80039ce:	2308      	movs	r3, #8
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e0e9      	b.n	8003ba8 <UART_SetConfig+0x348>
 80039d4:	2310      	movs	r3, #16
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e0e6      	b.n	8003ba8 <UART_SetConfig+0x348>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <UART_SetConfig+0x2d8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d120      	bne.n	8003a26 <UART_SetConfig+0x1c6>
 80039e4:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <UART_SetConfig+0x2cc>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039ee:	2bc0      	cmp	r3, #192	; 0xc0
 80039f0:	d013      	beq.n	8003a1a <UART_SetConfig+0x1ba>
 80039f2:	2bc0      	cmp	r3, #192	; 0xc0
 80039f4:	d814      	bhi.n	8003a20 <UART_SetConfig+0x1c0>
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	d009      	beq.n	8003a0e <UART_SetConfig+0x1ae>
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d810      	bhi.n	8003a20 <UART_SetConfig+0x1c0>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <UART_SetConfig+0x1a8>
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d006      	beq.n	8003a14 <UART_SetConfig+0x1b4>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x1c0>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e0cc      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e0c9      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e0c6      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e0c3      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e0c0      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <UART_SetConfig+0x2dc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d125      	bne.n	8003a7c <UART_SetConfig+0x21c>
 8003a30:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <UART_SetConfig+0x2cc>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3e:	d017      	beq.n	8003a70 <UART_SetConfig+0x210>
 8003a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a44:	d817      	bhi.n	8003a76 <UART_SetConfig+0x216>
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d00b      	beq.n	8003a64 <UART_SetConfig+0x204>
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d811      	bhi.n	8003a76 <UART_SetConfig+0x216>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <UART_SetConfig+0x1fe>
 8003a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5a:	d006      	beq.n	8003a6a <UART_SetConfig+0x20a>
 8003a5c:	e00b      	b.n	8003a76 <UART_SetConfig+0x216>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e0a1      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a64:	2302      	movs	r3, #2
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e09e      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e09b      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a70:	2308      	movs	r3, #8
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e098      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a76:	2310      	movs	r3, #16
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e095      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <UART_SetConfig+0x2e0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d125      	bne.n	8003ad2 <UART_SetConfig+0x272>
 8003a86:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <UART_SetConfig+0x2cc>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a94:	d017      	beq.n	8003ac6 <UART_SetConfig+0x266>
 8003a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9a:	d817      	bhi.n	8003acc <UART_SetConfig+0x26c>
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa0:	d00b      	beq.n	8003aba <UART_SetConfig+0x25a>
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d811      	bhi.n	8003acc <UART_SetConfig+0x26c>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <UART_SetConfig+0x254>
 8003aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab0:	d006      	beq.n	8003ac0 <UART_SetConfig+0x260>
 8003ab2:	e00b      	b.n	8003acc <UART_SetConfig+0x26c>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e076      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003aba:	2302      	movs	r3, #2
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e073      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e070      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e06d      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003acc:	2310      	movs	r3, #16
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e06a      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <UART_SetConfig+0x2e4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d138      	bne.n	8003b4e <UART_SetConfig+0x2ee>
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <UART_SetConfig+0x2cc>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ae6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aea:	d017      	beq.n	8003b1c <UART_SetConfig+0x2bc>
 8003aec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af0:	d82a      	bhi.n	8003b48 <UART_SetConfig+0x2e8>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	d00b      	beq.n	8003b10 <UART_SetConfig+0x2b0>
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d824      	bhi.n	8003b48 <UART_SetConfig+0x2e8>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <UART_SetConfig+0x2aa>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	d006      	beq.n	8003b16 <UART_SetConfig+0x2b6>
 8003b08:	e01e      	b.n	8003b48 <UART_SetConfig+0x2e8>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e04b      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b10:	2302      	movs	r3, #2
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e048      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b16:	2304      	movs	r3, #4
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e045      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e042      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b22:	bf00      	nop
 8003b24:	efff69f3 	.word	0xefff69f3
 8003b28:	40011000 	.word	0x40011000
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40004400 	.word	0x40004400
 8003b34:	40004800 	.word	0x40004800
 8003b38:	40004c00 	.word	0x40004c00
 8003b3c:	40005000 	.word	0x40005000
 8003b40:	40011400 	.word	0x40011400
 8003b44:	40007800 	.word	0x40007800
 8003b48:	2310      	movs	r3, #16
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e02c      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a72      	ldr	r2, [pc, #456]	; (8003d1c <UART_SetConfig+0x4bc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d125      	bne.n	8003ba4 <UART_SetConfig+0x344>
 8003b58:	4b71      	ldr	r3, [pc, #452]	; (8003d20 <UART_SetConfig+0x4c0>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b66:	d017      	beq.n	8003b98 <UART_SetConfig+0x338>
 8003b68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b6c:	d817      	bhi.n	8003b9e <UART_SetConfig+0x33e>
 8003b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b72:	d00b      	beq.n	8003b8c <UART_SetConfig+0x32c>
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	d811      	bhi.n	8003b9e <UART_SetConfig+0x33e>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <UART_SetConfig+0x326>
 8003b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b82:	d006      	beq.n	8003b92 <UART_SetConfig+0x332>
 8003b84:	e00b      	b.n	8003b9e <UART_SetConfig+0x33e>
 8003b86:	2300      	movs	r3, #0
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e00d      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e00a      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b92:	2304      	movs	r3, #4
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e007      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b98:	2308      	movs	r3, #8
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e004      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e001      	b.n	8003ba8 <UART_SetConfig+0x348>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb0:	d15b      	bne.n	8003c6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d828      	bhi.n	8003c0a <UART_SetConfig+0x3aa>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <UART_SetConfig+0x360>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003bed 	.word	0x08003bed
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003bfb 	.word	0x08003bfb
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003c0b 	.word	0x08003c0b
 8003bdc:	08003c0b 	.word	0x08003c0b
 8003be0:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7fe fd9c 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003be8:	61b8      	str	r0, [r7, #24]
        break;
 8003bea:	e013      	b.n	8003c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7fe fdac 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	61b8      	str	r0, [r7, #24]
        break;
 8003bf2:	e00f      	b.n	8003c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <UART_SetConfig+0x4c4>)
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e00c      	b.n	8003c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe fcbf 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8003bfe:	61b8      	str	r0, [r7, #24]
        break;
 8003c00:	e008      	b.n	8003c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	61bb      	str	r3, [r7, #24]
        break;
 8003c08:	e004      	b.n	8003c14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77bb      	strb	r3, [r7, #30]
        break;
 8003c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d074      	beq.n	8003d04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	005a      	lsls	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b0f      	cmp	r3, #15
 8003c34:	d916      	bls.n	8003c64 <UART_SetConfig+0x404>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d212      	bcs.n	8003c64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f023 030f 	bic.w	r3, r3, #15
 8003c46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	89fa      	ldrh	r2, [r7, #14]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e04f      	b.n	8003d04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	77bb      	strb	r3, [r7, #30]
 8003c68:	e04c      	b.n	8003d04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d828      	bhi.n	8003cc2 <UART_SetConfig+0x462>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x418>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cc3 	.word	0x08003cc3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe fd40 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61b8      	str	r0, [r7, #24]
        break;
 8003ca2:	e013      	b.n	8003ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe fd50 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	61b8      	str	r0, [r7, #24]
        break;
 8003caa:	e00f      	b.n	8003ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <UART_SetConfig+0x4c4>)
 8003cae:	61bb      	str	r3, [r7, #24]
        break;
 8003cb0:	e00c      	b.n	8003ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe fc63 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8003cb6:	61b8      	str	r0, [r7, #24]
        break;
 8003cb8:	e008      	b.n	8003ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	61bb      	str	r3, [r7, #24]
        break;
 8003cc0:	e004      	b.n	8003ccc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8003cca:	bf00      	nop
    }

    if (pclk != 0U)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d018      	beq.n	8003d04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	085a      	lsrs	r2, r3, #1
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	441a      	add	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d909      	bls.n	8003d00 <UART_SetConfig+0x4a0>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf2:	d205      	bcs.n	8003d00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e001      	b.n	8003d04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40007c00 	.word	0x40007c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	00f42400 	.word	0x00f42400

08003d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d10a      	bne.n	8003e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e7c:	f7fd fc42 	bl	8001704 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10e      	bne.n	8003eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f81b 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e011      	b.n	8003ed2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b09c      	sub	sp, #112	; 0x70
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	e0a7      	b.n	800403c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	f000 80a3 	beq.w	800403c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fd fc05 	bl	8001704 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d13f      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f20:	667b      	str	r3, [r7, #100]	; 0x64
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e6      	bne.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e068      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d050      	beq.n	800403c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d148      	bne.n	800403c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e6      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004006:	623a      	str	r2, [r7, #32]
 8004008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	69f9      	ldr	r1, [r7, #28]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	61bb      	str	r3, [r7, #24]
   return(result);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e5      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e010      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	f43f af48 	beq.w	8003eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3770      	adds	r7, #112	; 0x70
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004066:	b480      	push	{r7}
 8004068:	b095      	sub	sp, #84	; 0x54
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408c:	643b      	str	r3, [r7, #64]	; 0x40
 800408e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d118      	bne.n	800410e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004122:	bf00      	nop
 8004124:	3754      	adds	r7, #84	; 0x54
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff fb71 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6979      	ldr	r1, [r7, #20]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	613b      	str	r3, [r7, #16]
   return(result);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fb3d 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a6:	bf00      	nop
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <__errno>:
 80041b0:	4b01      	ldr	r3, [pc, #4]	; (80041b8 <__errno+0x8>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c

080041bc <__libc_init_array>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	4d0d      	ldr	r5, [pc, #52]	; (80041f4 <__libc_init_array+0x38>)
 80041c0:	4c0d      	ldr	r4, [pc, #52]	; (80041f8 <__libc_init_array+0x3c>)
 80041c2:	1b64      	subs	r4, r4, r5
 80041c4:	10a4      	asrs	r4, r4, #2
 80041c6:	2600      	movs	r6, #0
 80041c8:	42a6      	cmp	r6, r4
 80041ca:	d109      	bne.n	80041e0 <__libc_init_array+0x24>
 80041cc:	4d0b      	ldr	r5, [pc, #44]	; (80041fc <__libc_init_array+0x40>)
 80041ce:	4c0c      	ldr	r4, [pc, #48]	; (8004200 <__libc_init_array+0x44>)
 80041d0:	f002 ff02 	bl	8006fd8 <_init>
 80041d4:	1b64      	subs	r4, r4, r5
 80041d6:	10a4      	asrs	r4, r4, #2
 80041d8:	2600      	movs	r6, #0
 80041da:	42a6      	cmp	r6, r4
 80041dc:	d105      	bne.n	80041ea <__libc_init_array+0x2e>
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e4:	4798      	blx	r3
 80041e6:	3601      	adds	r6, #1
 80041e8:	e7ee      	b.n	80041c8 <__libc_init_array+0xc>
 80041ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ee:	4798      	blx	r3
 80041f0:	3601      	adds	r6, #1
 80041f2:	e7f2      	b.n	80041da <__libc_init_array+0x1e>
 80041f4:	080074cc 	.word	0x080074cc
 80041f8:	080074cc 	.word	0x080074cc
 80041fc:	080074cc 	.word	0x080074cc
 8004200:	080074d0 	.word	0x080074d0

08004204 <memset>:
 8004204:	4402      	add	r2, r0
 8004206:	4603      	mov	r3, r0
 8004208:	4293      	cmp	r3, r2
 800420a:	d100      	bne.n	800420e <memset+0xa>
 800420c:	4770      	bx	lr
 800420e:	f803 1b01 	strb.w	r1, [r3], #1
 8004212:	e7f9      	b.n	8004208 <memset+0x4>

08004214 <__cvt>:
 8004214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	ec55 4b10 	vmov	r4, r5, d0
 800421c:	2d00      	cmp	r5, #0
 800421e:	460e      	mov	r6, r1
 8004220:	4619      	mov	r1, r3
 8004222:	462b      	mov	r3, r5
 8004224:	bfbb      	ittet	lt
 8004226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800422a:	461d      	movlt	r5, r3
 800422c:	2300      	movge	r3, #0
 800422e:	232d      	movlt	r3, #45	; 0x2d
 8004230:	700b      	strb	r3, [r1, #0]
 8004232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004234:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004238:	4691      	mov	r9, r2
 800423a:	f023 0820 	bic.w	r8, r3, #32
 800423e:	bfbc      	itt	lt
 8004240:	4622      	movlt	r2, r4
 8004242:	4614      	movlt	r4, r2
 8004244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004248:	d005      	beq.n	8004256 <__cvt+0x42>
 800424a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800424e:	d100      	bne.n	8004252 <__cvt+0x3e>
 8004250:	3601      	adds	r6, #1
 8004252:	2102      	movs	r1, #2
 8004254:	e000      	b.n	8004258 <__cvt+0x44>
 8004256:	2103      	movs	r1, #3
 8004258:	ab03      	add	r3, sp, #12
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	ab02      	add	r3, sp, #8
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	ec45 4b10 	vmov	d0, r4, r5
 8004264:	4653      	mov	r3, sl
 8004266:	4632      	mov	r2, r6
 8004268:	f000 fcea 	bl	8004c40 <_dtoa_r>
 800426c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004270:	4607      	mov	r7, r0
 8004272:	d102      	bne.n	800427a <__cvt+0x66>
 8004274:	f019 0f01 	tst.w	r9, #1
 8004278:	d022      	beq.n	80042c0 <__cvt+0xac>
 800427a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800427e:	eb07 0906 	add.w	r9, r7, r6
 8004282:	d110      	bne.n	80042a6 <__cvt+0x92>
 8004284:	783b      	ldrb	r3, [r7, #0]
 8004286:	2b30      	cmp	r3, #48	; 0x30
 8004288:	d10a      	bne.n	80042a0 <__cvt+0x8c>
 800428a:	2200      	movs	r2, #0
 800428c:	2300      	movs	r3, #0
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fc fc49 	bl	8000b28 <__aeabi_dcmpeq>
 8004296:	b918      	cbnz	r0, 80042a0 <__cvt+0x8c>
 8004298:	f1c6 0601 	rsb	r6, r6, #1
 800429c:	f8ca 6000 	str.w	r6, [sl]
 80042a0:	f8da 3000 	ldr.w	r3, [sl]
 80042a4:	4499      	add	r9, r3
 80042a6:	2200      	movs	r2, #0
 80042a8:	2300      	movs	r3, #0
 80042aa:	4620      	mov	r0, r4
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7fc fc3b 	bl	8000b28 <__aeabi_dcmpeq>
 80042b2:	b108      	cbz	r0, 80042b8 <__cvt+0xa4>
 80042b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042b8:	2230      	movs	r2, #48	; 0x30
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	454b      	cmp	r3, r9
 80042be:	d307      	bcc.n	80042d0 <__cvt+0xbc>
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042c4:	1bdb      	subs	r3, r3, r7
 80042c6:	4638      	mov	r0, r7
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	b004      	add	sp, #16
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	9103      	str	r1, [sp, #12]
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e7f0      	b.n	80042ba <__cvt+0xa6>

080042d8 <__exponent>:
 80042d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042da:	4603      	mov	r3, r0
 80042dc:	2900      	cmp	r1, #0
 80042de:	bfb8      	it	lt
 80042e0:	4249      	neglt	r1, r1
 80042e2:	f803 2b02 	strb.w	r2, [r3], #2
 80042e6:	bfb4      	ite	lt
 80042e8:	222d      	movlt	r2, #45	; 0x2d
 80042ea:	222b      	movge	r2, #43	; 0x2b
 80042ec:	2909      	cmp	r1, #9
 80042ee:	7042      	strb	r2, [r0, #1]
 80042f0:	dd2a      	ble.n	8004348 <__exponent+0x70>
 80042f2:	f10d 0407 	add.w	r4, sp, #7
 80042f6:	46a4      	mov	ip, r4
 80042f8:	270a      	movs	r7, #10
 80042fa:	46a6      	mov	lr, r4
 80042fc:	460a      	mov	r2, r1
 80042fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8004302:	fb07 1516 	mls	r5, r7, r6, r1
 8004306:	3530      	adds	r5, #48	; 0x30
 8004308:	2a63      	cmp	r2, #99	; 0x63
 800430a:	f104 34ff 	add.w	r4, r4, #4294967295
 800430e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004312:	4631      	mov	r1, r6
 8004314:	dcf1      	bgt.n	80042fa <__exponent+0x22>
 8004316:	3130      	adds	r1, #48	; 0x30
 8004318:	f1ae 0502 	sub.w	r5, lr, #2
 800431c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004320:	1c44      	adds	r4, r0, #1
 8004322:	4629      	mov	r1, r5
 8004324:	4561      	cmp	r1, ip
 8004326:	d30a      	bcc.n	800433e <__exponent+0x66>
 8004328:	f10d 0209 	add.w	r2, sp, #9
 800432c:	eba2 020e 	sub.w	r2, r2, lr
 8004330:	4565      	cmp	r5, ip
 8004332:	bf88      	it	hi
 8004334:	2200      	movhi	r2, #0
 8004336:	4413      	add	r3, r2
 8004338:	1a18      	subs	r0, r3, r0
 800433a:	b003      	add	sp, #12
 800433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800433e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004342:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004346:	e7ed      	b.n	8004324 <__exponent+0x4c>
 8004348:	2330      	movs	r3, #48	; 0x30
 800434a:	3130      	adds	r1, #48	; 0x30
 800434c:	7083      	strb	r3, [r0, #2]
 800434e:	70c1      	strb	r1, [r0, #3]
 8004350:	1d03      	adds	r3, r0, #4
 8004352:	e7f1      	b.n	8004338 <__exponent+0x60>

08004354 <_printf_float>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	ed2d 8b02 	vpush	{d8}
 800435c:	b08d      	sub	sp, #52	; 0x34
 800435e:	460c      	mov	r4, r1
 8004360:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004364:	4616      	mov	r6, r2
 8004366:	461f      	mov	r7, r3
 8004368:	4605      	mov	r5, r0
 800436a:	f001 fa57 	bl	800581c <_localeconv_r>
 800436e:	f8d0 a000 	ldr.w	sl, [r0]
 8004372:	4650      	mov	r0, sl
 8004374:	f7fb ff56 	bl	8000224 <strlen>
 8004378:	2300      	movs	r3, #0
 800437a:	930a      	str	r3, [sp, #40]	; 0x28
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	9305      	str	r3, [sp, #20]
 8004380:	f8d8 3000 	ldr.w	r3, [r8]
 8004384:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004388:	3307      	adds	r3, #7
 800438a:	f023 0307 	bic.w	r3, r3, #7
 800438e:	f103 0208 	add.w	r2, r3, #8
 8004392:	f8c8 2000 	str.w	r2, [r8]
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800439e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043ac:	ee08 0a10 	vmov	s16, r0
 80043b0:	4b9f      	ldr	r3, [pc, #636]	; (8004630 <_printf_float+0x2dc>)
 80043b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	f7fc fbe7 	bl	8000b8c <__aeabi_dcmpun>
 80043be:	bb88      	cbnz	r0, 8004424 <_printf_float+0xd0>
 80043c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c4:	4b9a      	ldr	r3, [pc, #616]	; (8004630 <_printf_float+0x2dc>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	f7fc fbc1 	bl	8000b50 <__aeabi_dcmple>
 80043ce:	bb48      	cbnz	r0, 8004424 <_printf_float+0xd0>
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4640      	mov	r0, r8
 80043d6:	4649      	mov	r1, r9
 80043d8:	f7fc fbb0 	bl	8000b3c <__aeabi_dcmplt>
 80043dc:	b110      	cbz	r0, 80043e4 <_printf_float+0x90>
 80043de:	232d      	movs	r3, #45	; 0x2d
 80043e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e4:	4b93      	ldr	r3, [pc, #588]	; (8004634 <_printf_float+0x2e0>)
 80043e6:	4894      	ldr	r0, [pc, #592]	; (8004638 <_printf_float+0x2e4>)
 80043e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043ec:	bf94      	ite	ls
 80043ee:	4698      	movls	r8, r3
 80043f0:	4680      	movhi	r8, r0
 80043f2:	2303      	movs	r3, #3
 80043f4:	6123      	str	r3, [r4, #16]
 80043f6:	9b05      	ldr	r3, [sp, #20]
 80043f8:	f023 0204 	bic.w	r2, r3, #4
 80043fc:	6022      	str	r2, [r4, #0]
 80043fe:	f04f 0900 	mov.w	r9, #0
 8004402:	9700      	str	r7, [sp, #0]
 8004404:	4633      	mov	r3, r6
 8004406:	aa0b      	add	r2, sp, #44	; 0x2c
 8004408:	4621      	mov	r1, r4
 800440a:	4628      	mov	r0, r5
 800440c:	f000 f9d8 	bl	80047c0 <_printf_common>
 8004410:	3001      	adds	r0, #1
 8004412:	f040 8090 	bne.w	8004536 <_printf_float+0x1e2>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	b00d      	add	sp, #52	; 0x34
 800441c:	ecbd 8b02 	vpop	{d8}
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fc fbae 	bl	8000b8c <__aeabi_dcmpun>
 8004430:	b140      	cbz	r0, 8004444 <_printf_float+0xf0>
 8004432:	464b      	mov	r3, r9
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfbc      	itt	lt
 8004438:	232d      	movlt	r3, #45	; 0x2d
 800443a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800443e:	487f      	ldr	r0, [pc, #508]	; (800463c <_printf_float+0x2e8>)
 8004440:	4b7f      	ldr	r3, [pc, #508]	; (8004640 <_printf_float+0x2ec>)
 8004442:	e7d1      	b.n	80043e8 <_printf_float+0x94>
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800444a:	9206      	str	r2, [sp, #24]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	d13f      	bne.n	80044d0 <_printf_float+0x17c>
 8004450:	2306      	movs	r3, #6
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	9b05      	ldr	r3, [sp, #20]
 8004456:	6861      	ldr	r1, [r4, #4]
 8004458:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800445c:	2300      	movs	r3, #0
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	ab0a      	add	r3, sp, #40	; 0x28
 8004462:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004466:	ab09      	add	r3, sp, #36	; 0x24
 8004468:	ec49 8b10 	vmov	d0, r8, r9
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004474:	4628      	mov	r0, r5
 8004476:	f7ff fecd 	bl	8004214 <__cvt>
 800447a:	9b06      	ldr	r3, [sp, #24]
 800447c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800447e:	2b47      	cmp	r3, #71	; 0x47
 8004480:	4680      	mov	r8, r0
 8004482:	d108      	bne.n	8004496 <_printf_float+0x142>
 8004484:	1cc8      	adds	r0, r1, #3
 8004486:	db02      	blt.n	800448e <_printf_float+0x13a>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	4299      	cmp	r1, r3
 800448c:	dd41      	ble.n	8004512 <_printf_float+0x1be>
 800448e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004492:	fa5f fb8b 	uxtb.w	fp, fp
 8004496:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800449a:	d820      	bhi.n	80044de <_printf_float+0x18a>
 800449c:	3901      	subs	r1, #1
 800449e:	465a      	mov	r2, fp
 80044a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044a4:	9109      	str	r1, [sp, #36]	; 0x24
 80044a6:	f7ff ff17 	bl	80042d8 <__exponent>
 80044aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ac:	1813      	adds	r3, r2, r0
 80044ae:	2a01      	cmp	r2, #1
 80044b0:	4681      	mov	r9, r0
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	dc02      	bgt.n	80044bc <_printf_float+0x168>
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	07d2      	lsls	r2, r2, #31
 80044ba:	d501      	bpl.n	80044c0 <_printf_float+0x16c>
 80044bc:	3301      	adds	r3, #1
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d09c      	beq.n	8004402 <_printf_float+0xae>
 80044c8:	232d      	movs	r3, #45	; 0x2d
 80044ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ce:	e798      	b.n	8004402 <_printf_float+0xae>
 80044d0:	9a06      	ldr	r2, [sp, #24]
 80044d2:	2a47      	cmp	r2, #71	; 0x47
 80044d4:	d1be      	bne.n	8004454 <_printf_float+0x100>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1bc      	bne.n	8004454 <_printf_float+0x100>
 80044da:	2301      	movs	r3, #1
 80044dc:	e7b9      	b.n	8004452 <_printf_float+0xfe>
 80044de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044e2:	d118      	bne.n	8004516 <_printf_float+0x1c2>
 80044e4:	2900      	cmp	r1, #0
 80044e6:	6863      	ldr	r3, [r4, #4]
 80044e8:	dd0b      	ble.n	8004502 <_printf_float+0x1ae>
 80044ea:	6121      	str	r1, [r4, #16]
 80044ec:	b913      	cbnz	r3, 80044f4 <_printf_float+0x1a0>
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	07d0      	lsls	r0, r2, #31
 80044f2:	d502      	bpl.n	80044fa <_printf_float+0x1a6>
 80044f4:	3301      	adds	r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	6123      	str	r3, [r4, #16]
 80044fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80044fc:	f04f 0900 	mov.w	r9, #0
 8004500:	e7de      	b.n	80044c0 <_printf_float+0x16c>
 8004502:	b913      	cbnz	r3, 800450a <_printf_float+0x1b6>
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	07d2      	lsls	r2, r2, #31
 8004508:	d501      	bpl.n	800450e <_printf_float+0x1ba>
 800450a:	3302      	adds	r3, #2
 800450c:	e7f4      	b.n	80044f8 <_printf_float+0x1a4>
 800450e:	2301      	movs	r3, #1
 8004510:	e7f2      	b.n	80044f8 <_printf_float+0x1a4>
 8004512:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004518:	4299      	cmp	r1, r3
 800451a:	db05      	blt.n	8004528 <_printf_float+0x1d4>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	6121      	str	r1, [r4, #16]
 8004520:	07d8      	lsls	r0, r3, #31
 8004522:	d5ea      	bpl.n	80044fa <_printf_float+0x1a6>
 8004524:	1c4b      	adds	r3, r1, #1
 8004526:	e7e7      	b.n	80044f8 <_printf_float+0x1a4>
 8004528:	2900      	cmp	r1, #0
 800452a:	bfd4      	ite	le
 800452c:	f1c1 0202 	rsble	r2, r1, #2
 8004530:	2201      	movgt	r2, #1
 8004532:	4413      	add	r3, r2
 8004534:	e7e0      	b.n	80044f8 <_printf_float+0x1a4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	055a      	lsls	r2, r3, #21
 800453a:	d407      	bmi.n	800454c <_printf_float+0x1f8>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	4642      	mov	r2, r8
 8004540:	4631      	mov	r1, r6
 8004542:	4628      	mov	r0, r5
 8004544:	47b8      	blx	r7
 8004546:	3001      	adds	r0, #1
 8004548:	d12c      	bne.n	80045a4 <_printf_float+0x250>
 800454a:	e764      	b.n	8004416 <_printf_float+0xc2>
 800454c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004550:	f240 80e0 	bls.w	8004714 <_printf_float+0x3c0>
 8004554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004558:	2200      	movs	r2, #0
 800455a:	2300      	movs	r3, #0
 800455c:	f7fc fae4 	bl	8000b28 <__aeabi_dcmpeq>
 8004560:	2800      	cmp	r0, #0
 8004562:	d034      	beq.n	80045ce <_printf_float+0x27a>
 8004564:	4a37      	ldr	r2, [pc, #220]	; (8004644 <_printf_float+0x2f0>)
 8004566:	2301      	movs	r3, #1
 8004568:	4631      	mov	r1, r6
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	f43f af51 	beq.w	8004416 <_printf_float+0xc2>
 8004574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004578:	429a      	cmp	r2, r3
 800457a:	db02      	blt.n	8004582 <_printf_float+0x22e>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	07d8      	lsls	r0, r3, #31
 8004580:	d510      	bpl.n	80045a4 <_printf_float+0x250>
 8004582:	ee18 3a10 	vmov	r3, s16
 8004586:	4652      	mov	r2, sl
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	f43f af41 	beq.w	8004416 <_printf_float+0xc2>
 8004594:	f04f 0800 	mov.w	r8, #0
 8004598:	f104 091a 	add.w	r9, r4, #26
 800459c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	4543      	cmp	r3, r8
 80045a2:	dc09      	bgt.n	80045b8 <_printf_float+0x264>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	079b      	lsls	r3, r3, #30
 80045a8:	f100 8105 	bmi.w	80047b6 <_printf_float+0x462>
 80045ac:	68e0      	ldr	r0, [r4, #12]
 80045ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b0:	4298      	cmp	r0, r3
 80045b2:	bfb8      	it	lt
 80045b4:	4618      	movlt	r0, r3
 80045b6:	e730      	b.n	800441a <_printf_float+0xc6>
 80045b8:	2301      	movs	r3, #1
 80045ba:	464a      	mov	r2, r9
 80045bc:	4631      	mov	r1, r6
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	f43f af27 	beq.w	8004416 <_printf_float+0xc2>
 80045c8:	f108 0801 	add.w	r8, r8, #1
 80045cc:	e7e6      	b.n	800459c <_printf_float+0x248>
 80045ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc39      	bgt.n	8004648 <_printf_float+0x2f4>
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <_printf_float+0x2f0>)
 80045d6:	2301      	movs	r3, #1
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	f43f af19 	beq.w	8004416 <_printf_float+0xc2>
 80045e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d102      	bne.n	80045f2 <_printf_float+0x29e>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	07d9      	lsls	r1, r3, #31
 80045f0:	d5d8      	bpl.n	80045a4 <_printf_float+0x250>
 80045f2:	ee18 3a10 	vmov	r3, s16
 80045f6:	4652      	mov	r2, sl
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af09 	beq.w	8004416 <_printf_float+0xc2>
 8004604:	f04f 0900 	mov.w	r9, #0
 8004608:	f104 0a1a 	add.w	sl, r4, #26
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460e:	425b      	negs	r3, r3
 8004610:	454b      	cmp	r3, r9
 8004612:	dc01      	bgt.n	8004618 <_printf_float+0x2c4>
 8004614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004616:	e792      	b.n	800453e <_printf_float+0x1ea>
 8004618:	2301      	movs	r3, #1
 800461a:	4652      	mov	r2, sl
 800461c:	4631      	mov	r1, r6
 800461e:	4628      	mov	r0, r5
 8004620:	47b8      	blx	r7
 8004622:	3001      	adds	r0, #1
 8004624:	f43f aef7 	beq.w	8004416 <_printf_float+0xc2>
 8004628:	f109 0901 	add.w	r9, r9, #1
 800462c:	e7ee      	b.n	800460c <_printf_float+0x2b8>
 800462e:	bf00      	nop
 8004630:	7fefffff 	.word	0x7fefffff
 8004634:	080070ec 	.word	0x080070ec
 8004638:	080070f0 	.word	0x080070f0
 800463c:	080070f8 	.word	0x080070f8
 8004640:	080070f4 	.word	0x080070f4
 8004644:	080070fc 	.word	0x080070fc
 8004648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800464a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464c:	429a      	cmp	r2, r3
 800464e:	bfa8      	it	ge
 8004650:	461a      	movge	r2, r3
 8004652:	2a00      	cmp	r2, #0
 8004654:	4691      	mov	r9, r2
 8004656:	dc37      	bgt.n	80046c8 <_printf_float+0x374>
 8004658:	f04f 0b00 	mov.w	fp, #0
 800465c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004660:	f104 021a 	add.w	r2, r4, #26
 8004664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	eba3 0309 	sub.w	r3, r3, r9
 800466c:	455b      	cmp	r3, fp
 800466e:	dc33      	bgt.n	80046d8 <_printf_float+0x384>
 8004670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004674:	429a      	cmp	r2, r3
 8004676:	db3b      	blt.n	80046f0 <_printf_float+0x39c>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	07da      	lsls	r2, r3, #31
 800467c:	d438      	bmi.n	80046f0 <_printf_float+0x39c>
 800467e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004680:	9a05      	ldr	r2, [sp, #20]
 8004682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004684:	1a9a      	subs	r2, r3, r2
 8004686:	eba3 0901 	sub.w	r9, r3, r1
 800468a:	4591      	cmp	r9, r2
 800468c:	bfa8      	it	ge
 800468e:	4691      	movge	r9, r2
 8004690:	f1b9 0f00 	cmp.w	r9, #0
 8004694:	dc35      	bgt.n	8004702 <_printf_float+0x3ae>
 8004696:	f04f 0800 	mov.w	r8, #0
 800469a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469e:	f104 0a1a 	add.w	sl, r4, #26
 80046a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	eba3 0309 	sub.w	r3, r3, r9
 80046ac:	4543      	cmp	r3, r8
 80046ae:	f77f af79 	ble.w	80045a4 <_printf_float+0x250>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4652      	mov	r2, sl
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f aeaa 	beq.w	8004416 <_printf_float+0xc2>
 80046c2:	f108 0801 	add.w	r8, r8, #1
 80046c6:	e7ec      	b.n	80046a2 <_printf_float+0x34e>
 80046c8:	4613      	mov	r3, r2
 80046ca:	4631      	mov	r1, r6
 80046cc:	4642      	mov	r2, r8
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	d1c0      	bne.n	8004658 <_printf_float+0x304>
 80046d6:	e69e      	b.n	8004416 <_printf_float+0xc2>
 80046d8:	2301      	movs	r3, #1
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	9205      	str	r2, [sp, #20]
 80046e0:	47b8      	blx	r7
 80046e2:	3001      	adds	r0, #1
 80046e4:	f43f ae97 	beq.w	8004416 <_printf_float+0xc2>
 80046e8:	9a05      	ldr	r2, [sp, #20]
 80046ea:	f10b 0b01 	add.w	fp, fp, #1
 80046ee:	e7b9      	b.n	8004664 <_printf_float+0x310>
 80046f0:	ee18 3a10 	vmov	r3, s16
 80046f4:	4652      	mov	r2, sl
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	d1be      	bne.n	800467e <_printf_float+0x32a>
 8004700:	e689      	b.n	8004416 <_printf_float+0xc2>
 8004702:	9a05      	ldr	r2, [sp, #20]
 8004704:	464b      	mov	r3, r9
 8004706:	4442      	add	r2, r8
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1c1      	bne.n	8004696 <_printf_float+0x342>
 8004712:	e680      	b.n	8004416 <_printf_float+0xc2>
 8004714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004716:	2a01      	cmp	r2, #1
 8004718:	dc01      	bgt.n	800471e <_printf_float+0x3ca>
 800471a:	07db      	lsls	r3, r3, #31
 800471c:	d538      	bpl.n	8004790 <_printf_float+0x43c>
 800471e:	2301      	movs	r3, #1
 8004720:	4642      	mov	r2, r8
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	47b8      	blx	r7
 8004728:	3001      	adds	r0, #1
 800472a:	f43f ae74 	beq.w	8004416 <_printf_float+0xc2>
 800472e:	ee18 3a10 	vmov	r3, s16
 8004732:	4652      	mov	r2, sl
 8004734:	4631      	mov	r1, r6
 8004736:	4628      	mov	r0, r5
 8004738:	47b8      	blx	r7
 800473a:	3001      	adds	r0, #1
 800473c:	f43f ae6b 	beq.w	8004416 <_printf_float+0xc2>
 8004740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	f7fc f9ee 	bl	8000b28 <__aeabi_dcmpeq>
 800474c:	b9d8      	cbnz	r0, 8004786 <_printf_float+0x432>
 800474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004750:	f108 0201 	add.w	r2, r8, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	d10e      	bne.n	800477e <_printf_float+0x42a>
 8004760:	e659      	b.n	8004416 <_printf_float+0xc2>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f ae52 	beq.w	8004416 <_printf_float+0xc2>
 8004772:	f108 0801 	add.w	r8, r8, #1
 8004776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004778:	3b01      	subs	r3, #1
 800477a:	4543      	cmp	r3, r8
 800477c:	dcf1      	bgt.n	8004762 <_printf_float+0x40e>
 800477e:	464b      	mov	r3, r9
 8004780:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004784:	e6dc      	b.n	8004540 <_printf_float+0x1ec>
 8004786:	f04f 0800 	mov.w	r8, #0
 800478a:	f104 0a1a 	add.w	sl, r4, #26
 800478e:	e7f2      	b.n	8004776 <_printf_float+0x422>
 8004790:	2301      	movs	r3, #1
 8004792:	4642      	mov	r2, r8
 8004794:	e7df      	b.n	8004756 <_printf_float+0x402>
 8004796:	2301      	movs	r3, #1
 8004798:	464a      	mov	r2, r9
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae38 	beq.w	8004416 <_printf_float+0xc2>
 80047a6:	f108 0801 	add.w	r8, r8, #1
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ae:	1a5b      	subs	r3, r3, r1
 80047b0:	4543      	cmp	r3, r8
 80047b2:	dcf0      	bgt.n	8004796 <_printf_float+0x442>
 80047b4:	e6fa      	b.n	80045ac <_printf_float+0x258>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0919 	add.w	r9, r4, #25
 80047be:	e7f4      	b.n	80047aa <_printf_float+0x456>

080047c0 <_printf_common>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	4616      	mov	r6, r2
 80047c6:	4699      	mov	r9, r3
 80047c8:	688a      	ldr	r2, [r1, #8]
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bfb8      	it	lt
 80047d4:	4613      	movlt	r3, r2
 80047d6:	6033      	str	r3, [r6, #0]
 80047d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047dc:	4607      	mov	r7, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	b10a      	cbz	r2, 80047e6 <_printf_common+0x26>
 80047e2:	3301      	adds	r3, #1
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	0699      	lsls	r1, r3, #26
 80047ea:	bf42      	ittt	mi
 80047ec:	6833      	ldrmi	r3, [r6, #0]
 80047ee:	3302      	addmi	r3, #2
 80047f0:	6033      	strmi	r3, [r6, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	f015 0506 	ands.w	r5, r5, #6
 80047f8:	d106      	bne.n	8004808 <_printf_common+0x48>
 80047fa:	f104 0a19 	add.w	sl, r4, #25
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	6832      	ldr	r2, [r6, #0]
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	42ab      	cmp	r3, r5
 8004806:	dc26      	bgt.n	8004856 <_printf_common+0x96>
 8004808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800480c:	1e13      	subs	r3, r2, #0
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	bf18      	it	ne
 8004812:	2301      	movne	r3, #1
 8004814:	0692      	lsls	r2, r2, #26
 8004816:	d42b      	bmi.n	8004870 <_printf_common+0xb0>
 8004818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800481c:	4649      	mov	r1, r9
 800481e:	4638      	mov	r0, r7
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d01e      	beq.n	8004864 <_printf_common+0xa4>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	68e5      	ldr	r5, [r4, #12]
 800482a:	6832      	ldr	r2, [r6, #0]
 800482c:	f003 0306 	and.w	r3, r3, #6
 8004830:	2b04      	cmp	r3, #4
 8004832:	bf08      	it	eq
 8004834:	1aad      	subeq	r5, r5, r2
 8004836:	68a3      	ldr	r3, [r4, #8]
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	bf0c      	ite	eq
 800483c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004840:	2500      	movne	r5, #0
 8004842:	4293      	cmp	r3, r2
 8004844:	bfc4      	itt	gt
 8004846:	1a9b      	subgt	r3, r3, r2
 8004848:	18ed      	addgt	r5, r5, r3
 800484a:	2600      	movs	r6, #0
 800484c:	341a      	adds	r4, #26
 800484e:	42b5      	cmp	r5, r6
 8004850:	d11a      	bne.n	8004888 <_printf_common+0xc8>
 8004852:	2000      	movs	r0, #0
 8004854:	e008      	b.n	8004868 <_printf_common+0xa8>
 8004856:	2301      	movs	r3, #1
 8004858:	4652      	mov	r2, sl
 800485a:	4649      	mov	r1, r9
 800485c:	4638      	mov	r0, r7
 800485e:	47c0      	blx	r8
 8004860:	3001      	adds	r0, #1
 8004862:	d103      	bne.n	800486c <_printf_common+0xac>
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	3501      	adds	r5, #1
 800486e:	e7c6      	b.n	80047fe <_printf_common+0x3e>
 8004870:	18e1      	adds	r1, r4, r3
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	2030      	movs	r0, #48	; 0x30
 8004876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800487a:	4422      	add	r2, r4
 800487c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004884:	3302      	adds	r3, #2
 8004886:	e7c7      	b.n	8004818 <_printf_common+0x58>
 8004888:	2301      	movs	r3, #1
 800488a:	4622      	mov	r2, r4
 800488c:	4649      	mov	r1, r9
 800488e:	4638      	mov	r0, r7
 8004890:	47c0      	blx	r8
 8004892:	3001      	adds	r0, #1
 8004894:	d0e6      	beq.n	8004864 <_printf_common+0xa4>
 8004896:	3601      	adds	r6, #1
 8004898:	e7d9      	b.n	800484e <_printf_common+0x8e>
	...

0800489c <_printf_i>:
 800489c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	7e0f      	ldrb	r7, [r1, #24]
 80048a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048a4:	2f78      	cmp	r7, #120	; 0x78
 80048a6:	4691      	mov	r9, r2
 80048a8:	4680      	mov	r8, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	469a      	mov	sl, r3
 80048ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048b2:	d807      	bhi.n	80048c4 <_printf_i+0x28>
 80048b4:	2f62      	cmp	r7, #98	; 0x62
 80048b6:	d80a      	bhi.n	80048ce <_printf_i+0x32>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f000 80d8 	beq.w	8004a6e <_printf_i+0x1d2>
 80048be:	2f58      	cmp	r7, #88	; 0x58
 80048c0:	f000 80a3 	beq.w	8004a0a <_printf_i+0x16e>
 80048c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048cc:	e03a      	b.n	8004944 <_printf_i+0xa8>
 80048ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048d2:	2b15      	cmp	r3, #21
 80048d4:	d8f6      	bhi.n	80048c4 <_printf_i+0x28>
 80048d6:	a101      	add	r1, pc, #4	; (adr r1, 80048dc <_printf_i+0x40>)
 80048d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004949 	.word	0x08004949
 80048e4:	080048c5 	.word	0x080048c5
 80048e8:	080048c5 	.word	0x080048c5
 80048ec:	080048c5 	.word	0x080048c5
 80048f0:	080048c5 	.word	0x080048c5
 80048f4:	08004949 	.word	0x08004949
 80048f8:	080048c5 	.word	0x080048c5
 80048fc:	080048c5 	.word	0x080048c5
 8004900:	080048c5 	.word	0x080048c5
 8004904:	080048c5 	.word	0x080048c5
 8004908:	08004a55 	.word	0x08004a55
 800490c:	08004979 	.word	0x08004979
 8004910:	08004a37 	.word	0x08004a37
 8004914:	080048c5 	.word	0x080048c5
 8004918:	080048c5 	.word	0x080048c5
 800491c:	08004a77 	.word	0x08004a77
 8004920:	080048c5 	.word	0x080048c5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048c5 	.word	0x080048c5
 800492c:	080048c5 	.word	0x080048c5
 8004930:	08004a3f 	.word	0x08004a3f
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	602a      	str	r2, [r5, #0]
 800493c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004944:	2301      	movs	r3, #1
 8004946:	e0a3      	b.n	8004a90 <_printf_i+0x1f4>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	6829      	ldr	r1, [r5, #0]
 800494c:	0606      	lsls	r6, r0, #24
 800494e:	f101 0304 	add.w	r3, r1, #4
 8004952:	d50a      	bpl.n	800496a <_printf_i+0xce>
 8004954:	680e      	ldr	r6, [r1, #0]
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	2e00      	cmp	r6, #0
 800495a:	da03      	bge.n	8004964 <_printf_i+0xc8>
 800495c:	232d      	movs	r3, #45	; 0x2d
 800495e:	4276      	negs	r6, r6
 8004960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004964:	485e      	ldr	r0, [pc, #376]	; (8004ae0 <_printf_i+0x244>)
 8004966:	230a      	movs	r3, #10
 8004968:	e019      	b.n	800499e <_printf_i+0x102>
 800496a:	680e      	ldr	r6, [r1, #0]
 800496c:	602b      	str	r3, [r5, #0]
 800496e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004972:	bf18      	it	ne
 8004974:	b236      	sxthne	r6, r6
 8004976:	e7ef      	b.n	8004958 <_printf_i+0xbc>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	1d19      	adds	r1, r3, #4
 800497e:	6029      	str	r1, [r5, #0]
 8004980:	0601      	lsls	r1, r0, #24
 8004982:	d501      	bpl.n	8004988 <_printf_i+0xec>
 8004984:	681e      	ldr	r6, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0xf2>
 8004988:	0646      	lsls	r6, r0, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0xe8>
 800498c:	881e      	ldrh	r6, [r3, #0]
 800498e:	4854      	ldr	r0, [pc, #336]	; (8004ae0 <_printf_i+0x244>)
 8004990:	2f6f      	cmp	r7, #111	; 0x6f
 8004992:	bf0c      	ite	eq
 8004994:	2308      	moveq	r3, #8
 8004996:	230a      	movne	r3, #10
 8004998:	2100      	movs	r1, #0
 800499a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800499e:	6865      	ldr	r5, [r4, #4]
 80049a0:	60a5      	str	r5, [r4, #8]
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	bfa2      	ittt	ge
 80049a6:	6821      	ldrge	r1, [r4, #0]
 80049a8:	f021 0104 	bicge.w	r1, r1, #4
 80049ac:	6021      	strge	r1, [r4, #0]
 80049ae:	b90e      	cbnz	r6, 80049b4 <_printf_i+0x118>
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	d04d      	beq.n	8004a50 <_printf_i+0x1b4>
 80049b4:	4615      	mov	r5, r2
 80049b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ba:	fb03 6711 	mls	r7, r3, r1, r6
 80049be:	5dc7      	ldrb	r7, [r0, r7]
 80049c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049c4:	4637      	mov	r7, r6
 80049c6:	42bb      	cmp	r3, r7
 80049c8:	460e      	mov	r6, r1
 80049ca:	d9f4      	bls.n	80049b6 <_printf_i+0x11a>
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d10b      	bne.n	80049e8 <_printf_i+0x14c>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07de      	lsls	r6, r3, #31
 80049d4:	d508      	bpl.n	80049e8 <_printf_i+0x14c>
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	4299      	cmp	r1, r3
 80049dc:	bfde      	ittt	le
 80049de:	2330      	movle	r3, #48	; 0x30
 80049e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049e8:	1b52      	subs	r2, r2, r5
 80049ea:	6122      	str	r2, [r4, #16]
 80049ec:	f8cd a000 	str.w	sl, [sp]
 80049f0:	464b      	mov	r3, r9
 80049f2:	aa03      	add	r2, sp, #12
 80049f4:	4621      	mov	r1, r4
 80049f6:	4640      	mov	r0, r8
 80049f8:	f7ff fee2 	bl	80047c0 <_printf_common>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d14c      	bne.n	8004a9a <_printf_i+0x1fe>
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	b004      	add	sp, #16
 8004a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0a:	4835      	ldr	r0, [pc, #212]	; (8004ae0 <_printf_i+0x244>)
 8004a0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a10:	6829      	ldr	r1, [r5, #0]
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a18:	6029      	str	r1, [r5, #0]
 8004a1a:	061d      	lsls	r5, r3, #24
 8004a1c:	d514      	bpl.n	8004a48 <_printf_i+0x1ac>
 8004a1e:	07df      	lsls	r7, r3, #31
 8004a20:	bf44      	itt	mi
 8004a22:	f043 0320 	orrmi.w	r3, r3, #32
 8004a26:	6023      	strmi	r3, [r4, #0]
 8004a28:	b91e      	cbnz	r6, 8004a32 <_printf_i+0x196>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f023 0320 	bic.w	r3, r3, #32
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	2310      	movs	r3, #16
 8004a34:	e7b0      	b.n	8004998 <_printf_i+0xfc>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	f043 0320 	orr.w	r3, r3, #32
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	2378      	movs	r3, #120	; 0x78
 8004a40:	4828      	ldr	r0, [pc, #160]	; (8004ae4 <_printf_i+0x248>)
 8004a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a46:	e7e3      	b.n	8004a10 <_printf_i+0x174>
 8004a48:	0659      	lsls	r1, r3, #25
 8004a4a:	bf48      	it	mi
 8004a4c:	b2b6      	uxthmi	r6, r6
 8004a4e:	e7e6      	b.n	8004a1e <_printf_i+0x182>
 8004a50:	4615      	mov	r5, r2
 8004a52:	e7bb      	b.n	80049cc <_printf_i+0x130>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	6826      	ldr	r6, [r4, #0]
 8004a58:	6961      	ldr	r1, [r4, #20]
 8004a5a:	1d18      	adds	r0, r3, #4
 8004a5c:	6028      	str	r0, [r5, #0]
 8004a5e:	0635      	lsls	r5, r6, #24
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	d501      	bpl.n	8004a68 <_printf_i+0x1cc>
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <_printf_i+0x1d2>
 8004a68:	0670      	lsls	r0, r6, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0x1c8>
 8004a6c:	8019      	strh	r1, [r3, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6123      	str	r3, [r4, #16]
 8004a72:	4615      	mov	r5, r2
 8004a74:	e7ba      	b.n	80049ec <_printf_i+0x150>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	1d1a      	adds	r2, r3, #4
 8004a7a:	602a      	str	r2, [r5, #0]
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	6862      	ldr	r2, [r4, #4]
 8004a80:	2100      	movs	r1, #0
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7fb fbdc 	bl	8000240 <memchr>
 8004a88:	b108      	cbz	r0, 8004a8e <_printf_i+0x1f2>
 8004a8a:	1b40      	subs	r0, r0, r5
 8004a8c:	6060      	str	r0, [r4, #4]
 8004a8e:	6863      	ldr	r3, [r4, #4]
 8004a90:	6123      	str	r3, [r4, #16]
 8004a92:	2300      	movs	r3, #0
 8004a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a98:	e7a8      	b.n	80049ec <_printf_i+0x150>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	47d0      	blx	sl
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d0ab      	beq.n	8004a00 <_printf_i+0x164>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	079b      	lsls	r3, r3, #30
 8004aac:	d413      	bmi.n	8004ad6 <_printf_i+0x23a>
 8004aae:	68e0      	ldr	r0, [r4, #12]
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	4298      	cmp	r0, r3
 8004ab4:	bfb8      	it	lt
 8004ab6:	4618      	movlt	r0, r3
 8004ab8:	e7a4      	b.n	8004a04 <_printf_i+0x168>
 8004aba:	2301      	movs	r3, #1
 8004abc:	4632      	mov	r2, r6
 8004abe:	4649      	mov	r1, r9
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	47d0      	blx	sl
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d09b      	beq.n	8004a00 <_printf_i+0x164>
 8004ac8:	3501      	adds	r5, #1
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	9903      	ldr	r1, [sp, #12]
 8004ace:	1a5b      	subs	r3, r3, r1
 8004ad0:	42ab      	cmp	r3, r5
 8004ad2:	dcf2      	bgt.n	8004aba <_printf_i+0x21e>
 8004ad4:	e7eb      	b.n	8004aae <_printf_i+0x212>
 8004ad6:	2500      	movs	r5, #0
 8004ad8:	f104 0619 	add.w	r6, r4, #25
 8004adc:	e7f5      	b.n	8004aca <_printf_i+0x22e>
 8004ade:	bf00      	nop
 8004ae0:	080070fe 	.word	0x080070fe
 8004ae4:	0800710f 	.word	0x0800710f

08004ae8 <siprintf>:
 8004ae8:	b40e      	push	{r1, r2, r3}
 8004aea:	b500      	push	{lr}
 8004aec:	b09c      	sub	sp, #112	; 0x70
 8004aee:	ab1d      	add	r3, sp, #116	; 0x74
 8004af0:	9002      	str	r0, [sp, #8]
 8004af2:	9006      	str	r0, [sp, #24]
 8004af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af8:	4809      	ldr	r0, [pc, #36]	; (8004b20 <siprintf+0x38>)
 8004afa:	9107      	str	r1, [sp, #28]
 8004afc:	9104      	str	r1, [sp, #16]
 8004afe:	4909      	ldr	r1, [pc, #36]	; (8004b24 <siprintf+0x3c>)
 8004b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b04:	9105      	str	r1, [sp, #20]
 8004b06:	6800      	ldr	r0, [r0, #0]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	a902      	add	r1, sp, #8
 8004b0c:	f001 fb76 	bl	80061fc <_svfiprintf_r>
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	b01c      	add	sp, #112	; 0x70
 8004b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b1c:	b003      	add	sp, #12
 8004b1e:	4770      	bx	lr
 8004b20:	2000000c 	.word	0x2000000c
 8004b24:	ffff0208 	.word	0xffff0208

08004b28 <quorem>:
 8004b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	6903      	ldr	r3, [r0, #16]
 8004b2e:	690c      	ldr	r4, [r1, #16]
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	4607      	mov	r7, r0
 8004b34:	f2c0 8081 	blt.w	8004c3a <quorem+0x112>
 8004b38:	3c01      	subs	r4, #1
 8004b3a:	f101 0814 	add.w	r8, r1, #20
 8004b3e:	f100 0514 	add.w	r5, r0, #20
 8004b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b50:	3301      	adds	r3, #1
 8004b52:	429a      	cmp	r2, r3
 8004b54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b60:	d331      	bcc.n	8004bc6 <quorem+0x9e>
 8004b62:	f04f 0e00 	mov.w	lr, #0
 8004b66:	4640      	mov	r0, r8
 8004b68:	46ac      	mov	ip, r5
 8004b6a:	46f2      	mov	sl, lr
 8004b6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b70:	b293      	uxth	r3, r2
 8004b72:	fb06 e303 	mla	r3, r6, r3, lr
 8004b76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	ebaa 0303 	sub.w	r3, sl, r3
 8004b80:	f8dc a000 	ldr.w	sl, [ip]
 8004b84:	0c12      	lsrs	r2, r2, #16
 8004b86:	fa13 f38a 	uxtah	r3, r3, sl
 8004b8a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	9b00      	ldr	r3, [sp, #0]
 8004b92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b96:	b292      	uxth	r2, r2
 8004b98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ba0:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ba4:	4581      	cmp	r9, r0
 8004ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004baa:	f84c 3b04 	str.w	r3, [ip], #4
 8004bae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bb2:	d2db      	bcs.n	8004b6c <quorem+0x44>
 8004bb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bb8:	b92b      	cbnz	r3, 8004bc6 <quorem+0x9e>
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	429d      	cmp	r5, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	d32e      	bcc.n	8004c22 <quorem+0xfa>
 8004bc4:	613c      	str	r4, [r7, #16]
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f001 f8c4 	bl	8005d54 <__mcmp>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	db24      	blt.n	8004c1a <quorem+0xf2>
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f04f 0c00 	mov.w	ip, #0
 8004bd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bdc:	f8d0 e000 	ldr.w	lr, [r0]
 8004be0:	b293      	uxth	r3, r2
 8004be2:	ebac 0303 	sub.w	r3, ip, r3
 8004be6:	0c12      	lsrs	r2, r2, #16
 8004be8:	fa13 f38e 	uxtah	r3, r3, lr
 8004bec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bfa:	45c1      	cmp	r9, r8
 8004bfc:	f840 3b04 	str.w	r3, [r0], #4
 8004c00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c04:	d2e8      	bcs.n	8004bd8 <quorem+0xb0>
 8004c06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c0e:	b922      	cbnz	r2, 8004c1a <quorem+0xf2>
 8004c10:	3b04      	subs	r3, #4
 8004c12:	429d      	cmp	r5, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	d30a      	bcc.n	8004c2e <quorem+0x106>
 8004c18:	613c      	str	r4, [r7, #16]
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	b003      	add	sp, #12
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	3b04      	subs	r3, #4
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	d1cc      	bne.n	8004bc4 <quorem+0x9c>
 8004c2a:	3c01      	subs	r4, #1
 8004c2c:	e7c7      	b.n	8004bbe <quorem+0x96>
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	3b04      	subs	r3, #4
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	d1f0      	bne.n	8004c18 <quorem+0xf0>
 8004c36:	3c01      	subs	r4, #1
 8004c38:	e7eb      	b.n	8004c12 <quorem+0xea>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e7ee      	b.n	8004c1c <quorem+0xf4>
	...

08004c40 <_dtoa_r>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	ed2d 8b04 	vpush	{d8-d9}
 8004c48:	ec57 6b10 	vmov	r6, r7, d0
 8004c4c:	b093      	sub	sp, #76	; 0x4c
 8004c4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c54:	9106      	str	r1, [sp, #24]
 8004c56:	ee10 aa10 	vmov	sl, s0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8004c60:	46bb      	mov	fp, r7
 8004c62:	b975      	cbnz	r5, 8004c82 <_dtoa_r+0x42>
 8004c64:	2010      	movs	r0, #16
 8004c66:	f000 fddd 	bl	8005824 <malloc>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c6e:	b920      	cbnz	r0, 8004c7a <_dtoa_r+0x3a>
 8004c70:	4ba7      	ldr	r3, [pc, #668]	; (8004f10 <_dtoa_r+0x2d0>)
 8004c72:	21ea      	movs	r1, #234	; 0xea
 8004c74:	48a7      	ldr	r0, [pc, #668]	; (8004f14 <_dtoa_r+0x2d4>)
 8004c76:	f001 fbd1 	bl	800641c <__assert_func>
 8004c7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c7e:	6005      	str	r5, [r0, #0]
 8004c80:	60c5      	str	r5, [r0, #12]
 8004c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	b151      	cbz	r1, 8004c9e <_dtoa_r+0x5e>
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	604a      	str	r2, [r1, #4]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4093      	lsls	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fe1c 	bl	80058d0 <_Bfree>
 8004c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	1e3b      	subs	r3, r7, #0
 8004ca0:	bfaa      	itet	ge
 8004ca2:	2300      	movge	r3, #0
 8004ca4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ca8:	f8c8 3000 	strge.w	r3, [r8]
 8004cac:	4b9a      	ldr	r3, [pc, #616]	; (8004f18 <_dtoa_r+0x2d8>)
 8004cae:	bfbc      	itt	lt
 8004cb0:	2201      	movlt	r2, #1
 8004cb2:	f8c8 2000 	strlt.w	r2, [r8]
 8004cb6:	ea33 030b 	bics.w	r3, r3, fp
 8004cba:	d11b      	bne.n	8004cf4 <_dtoa_r+0xb4>
 8004cbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cc8:	4333      	orrs	r3, r6
 8004cca:	f000 8592 	beq.w	80057f2 <_dtoa_r+0xbb2>
 8004cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cd0:	b963      	cbnz	r3, 8004cec <_dtoa_r+0xac>
 8004cd2:	4b92      	ldr	r3, [pc, #584]	; (8004f1c <_dtoa_r+0x2dc>)
 8004cd4:	e022      	b.n	8004d1c <_dtoa_r+0xdc>
 8004cd6:	4b92      	ldr	r3, [pc, #584]	; (8004f20 <_dtoa_r+0x2e0>)
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	9801      	ldr	r0, [sp, #4]
 8004ce2:	b013      	add	sp, #76	; 0x4c
 8004ce4:	ecbd 8b04 	vpop	{d8-d9}
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <_dtoa_r+0x2dc>)
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	e7f3      	b.n	8004cdc <_dtoa_r+0x9c>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	f7fb ff14 	bl	8000b28 <__aeabi_dcmpeq>
 8004d00:	ec4b ab19 	vmov	d9, sl, fp
 8004d04:	4680      	mov	r8, r0
 8004d06:	b158      	cbz	r0, 8004d20 <_dtoa_r+0xe0>
 8004d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 856b 	beq.w	80057ec <_dtoa_r+0xbac>
 8004d16:	4883      	ldr	r0, [pc, #524]	; (8004f24 <_dtoa_r+0x2e4>)
 8004d18:	6018      	str	r0, [r3, #0]
 8004d1a:	1e43      	subs	r3, r0, #1
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	e7df      	b.n	8004ce0 <_dtoa_r+0xa0>
 8004d20:	ec4b ab10 	vmov	d0, sl, fp
 8004d24:	aa10      	add	r2, sp, #64	; 0x40
 8004d26:	a911      	add	r1, sp, #68	; 0x44
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f001 f8b9 	bl	8005ea0 <__d2b>
 8004d2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004d32:	ee08 0a10 	vmov	s16, r0
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	f000 8084 	beq.w	8004e44 <_dtoa_r+0x204>
 8004d3c:	ee19 3a90 	vmov	r3, s19
 8004d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d48:	4656      	mov	r6, sl
 8004d4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004d56:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <_dtoa_r+0x2e8>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	f7fb fac3 	bl	80002e8 <__aeabi_dsub>
 8004d62:	a365      	add	r3, pc, #404	; (adr r3, 8004ef8 <_dtoa_r+0x2b8>)
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f7fb fc76 	bl	8000658 <__aeabi_dmul>
 8004d6c:	a364      	add	r3, pc, #400	; (adr r3, 8004f00 <_dtoa_r+0x2c0>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fabb 	bl	80002ec <__adddf3>
 8004d76:	4606      	mov	r6, r0
 8004d78:	4628      	mov	r0, r5
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	f7fb fc02 	bl	8000584 <__aeabi_i2d>
 8004d80:	a361      	add	r3, pc, #388	; (adr r3, 8004f08 <_dtoa_r+0x2c8>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fc67 	bl	8000658 <__aeabi_dmul>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4639      	mov	r1, r7
 8004d92:	f7fb faab 	bl	80002ec <__adddf3>
 8004d96:	4606      	mov	r6, r0
 8004d98:	460f      	mov	r7, r1
 8004d9a:	f7fb ff0d 	bl	8000bb8 <__aeabi_d2iz>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	9000      	str	r0, [sp, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	4630      	mov	r0, r6
 8004da6:	4639      	mov	r1, r7
 8004da8:	f7fb fec8 	bl	8000b3c <__aeabi_dcmplt>
 8004dac:	b150      	cbz	r0, 8004dc4 <_dtoa_r+0x184>
 8004dae:	9800      	ldr	r0, [sp, #0]
 8004db0:	f7fb fbe8 	bl	8000584 <__aeabi_i2d>
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	f7fb feb6 	bl	8000b28 <__aeabi_dcmpeq>
 8004dbc:	b910      	cbnz	r0, 8004dc4 <_dtoa_r+0x184>
 8004dbe:	9b00      	ldr	r3, [sp, #0]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	9b00      	ldr	r3, [sp, #0]
 8004dc6:	2b16      	cmp	r3, #22
 8004dc8:	d85a      	bhi.n	8004e80 <_dtoa_r+0x240>
 8004dca:	9a00      	ldr	r2, [sp, #0]
 8004dcc:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <_dtoa_r+0x2ec>)
 8004dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	ec51 0b19 	vmov	r0, r1, d9
 8004dda:	f7fb feaf 	bl	8000b3c <__aeabi_dcmplt>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d050      	beq.n	8004e84 <_dtoa_r+0x244>
 8004de2:	9b00      	ldr	r3, [sp, #0]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dee:	1b5d      	subs	r5, r3, r5
 8004df0:	1e6b      	subs	r3, r5, #1
 8004df2:	9305      	str	r3, [sp, #20]
 8004df4:	bf45      	ittet	mi
 8004df6:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dfa:	9304      	strmi	r3, [sp, #16]
 8004dfc:	2300      	movpl	r3, #0
 8004dfe:	2300      	movmi	r3, #0
 8004e00:	bf4c      	ite	mi
 8004e02:	9305      	strmi	r3, [sp, #20]
 8004e04:	9304      	strpl	r3, [sp, #16]
 8004e06:	9b00      	ldr	r3, [sp, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db3d      	blt.n	8004e88 <_dtoa_r+0x248>
 8004e0c:	9b05      	ldr	r3, [sp, #20]
 8004e0e:	9a00      	ldr	r2, [sp, #0]
 8004e10:	920a      	str	r2, [sp, #40]	; 0x28
 8004e12:	4413      	add	r3, r2
 8004e14:	9305      	str	r3, [sp, #20]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9307      	str	r3, [sp, #28]
 8004e1a:	9b06      	ldr	r3, [sp, #24]
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	f200 8089 	bhi.w	8004f34 <_dtoa_r+0x2f4>
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	bfc4      	itt	gt
 8004e26:	3b04      	subgt	r3, #4
 8004e28:	9306      	strgt	r3, [sp, #24]
 8004e2a:	9b06      	ldr	r3, [sp, #24]
 8004e2c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e30:	bfcc      	ite	gt
 8004e32:	2500      	movgt	r5, #0
 8004e34:	2501      	movle	r5, #1
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	f200 8087 	bhi.w	8004f4a <_dtoa_r+0x30a>
 8004e3c:	e8df f003 	tbb	[pc, r3]
 8004e40:	59383a2d 	.word	0x59383a2d
 8004e44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e48:	441d      	add	r5, r3
 8004e4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	bfc1      	itttt	gt
 8004e52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004e5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e62:	bfda      	itte	le
 8004e64:	f1c3 0320 	rsble	r3, r3, #32
 8004e68:	fa06 f003 	lslle.w	r0, r6, r3
 8004e6c:	4318      	orrgt	r0, r3
 8004e6e:	f7fb fb79 	bl	8000564 <__aeabi_ui2d>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4606      	mov	r6, r0
 8004e76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e7a:	3d01      	subs	r5, #1
 8004e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e7e:	e76a      	b.n	8004d56 <_dtoa_r+0x116>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7b2      	b.n	8004dea <_dtoa_r+0x1aa>
 8004e84:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e86:	e7b1      	b.n	8004dec <_dtoa_r+0x1ac>
 8004e88:	9b04      	ldr	r3, [sp, #16]
 8004e8a:	9a00      	ldr	r2, [sp, #0]
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	9304      	str	r3, [sp, #16]
 8004e90:	4253      	negs	r3, r2
 8004e92:	9307      	str	r3, [sp, #28]
 8004e94:	2300      	movs	r3, #0
 8004e96:	930a      	str	r3, [sp, #40]	; 0x28
 8004e98:	e7bf      	b.n	8004e1a <_dtoa_r+0x1da>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9308      	str	r3, [sp, #32]
 8004e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dc55      	bgt.n	8004f50 <_dtoa_r+0x310>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	9209      	str	r2, [sp, #36]	; 0x24
 8004eae:	e00c      	b.n	8004eca <_dtoa_r+0x28a>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e7f3      	b.n	8004e9c <_dtoa_r+0x25c>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb8:	9308      	str	r3, [sp, #32]
 8004eba:	9b00      	ldr	r3, [sp, #0]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	bfb8      	it	lt
 8004ec8:	2301      	movlt	r3, #1
 8004eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ecc:	2200      	movs	r2, #0
 8004ece:	6042      	str	r2, [r0, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	f102 0614 	add.w	r6, r2, #20
 8004ed6:	429e      	cmp	r6, r3
 8004ed8:	6841      	ldr	r1, [r0, #4]
 8004eda:	d93d      	bls.n	8004f58 <_dtoa_r+0x318>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 fcb7 	bl	8005850 <_Balloc>
 8004ee2:	9001      	str	r0, [sp, #4]
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d13b      	bne.n	8004f60 <_dtoa_r+0x320>
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <_dtoa_r+0x2f0>)
 8004eea:	4602      	mov	r2, r0
 8004eec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ef0:	e6c0      	b.n	8004c74 <_dtoa_r+0x34>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e7df      	b.n	8004eb6 <_dtoa_r+0x276>
 8004ef6:	bf00      	nop
 8004ef8:	636f4361 	.word	0x636f4361
 8004efc:	3fd287a7 	.word	0x3fd287a7
 8004f00:	8b60c8b3 	.word	0x8b60c8b3
 8004f04:	3fc68a28 	.word	0x3fc68a28
 8004f08:	509f79fb 	.word	0x509f79fb
 8004f0c:	3fd34413 	.word	0x3fd34413
 8004f10:	0800712d 	.word	0x0800712d
 8004f14:	08007144 	.word	0x08007144
 8004f18:	7ff00000 	.word	0x7ff00000
 8004f1c:	08007129 	.word	0x08007129
 8004f20:	08007120 	.word	0x08007120
 8004f24:	080070fd 	.word	0x080070fd
 8004f28:	3ff80000 	.word	0x3ff80000
 8004f2c:	08007238 	.word	0x08007238
 8004f30:	0800719f 	.word	0x0800719f
 8004f34:	2501      	movs	r5, #1
 8004f36:	2300      	movs	r3, #0
 8004f38:	9306      	str	r3, [sp, #24]
 8004f3a:	9508      	str	r5, [sp, #32]
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2312      	movs	r3, #18
 8004f48:	e7b0      	b.n	8004eac <_dtoa_r+0x26c>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	9308      	str	r3, [sp, #32]
 8004f4e:	e7f5      	b.n	8004f3c <_dtoa_r+0x2fc>
 8004f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f56:	e7b8      	b.n	8004eca <_dtoa_r+0x28a>
 8004f58:	3101      	adds	r1, #1
 8004f5a:	6041      	str	r1, [r0, #4]
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	e7b8      	b.n	8004ed2 <_dtoa_r+0x292>
 8004f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f62:	9a01      	ldr	r2, [sp, #4]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	2b0e      	cmp	r3, #14
 8004f6a:	f200 809d 	bhi.w	80050a8 <_dtoa_r+0x468>
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	f000 809a 	beq.w	80050a8 <_dtoa_r+0x468>
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd32      	ble.n	8004fe0 <_dtoa_r+0x3a0>
 8004f7a:	4ab7      	ldr	r2, [pc, #732]	; (8005258 <_dtoa_r+0x618>)
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f88:	9b00      	ldr	r3, [sp, #0]
 8004f8a:	05d8      	lsls	r0, r3, #23
 8004f8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004f90:	d516      	bpl.n	8004fc0 <_dtoa_r+0x380>
 8004f92:	4bb2      	ldr	r3, [pc, #712]	; (800525c <_dtoa_r+0x61c>)
 8004f94:	ec51 0b19 	vmov	r0, r1, d9
 8004f98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f9c:	f7fb fc86 	bl	80008ac <__aeabi_ddiv>
 8004fa0:	f007 070f 	and.w	r7, r7, #15
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	468b      	mov	fp, r1
 8004fa8:	2503      	movs	r5, #3
 8004faa:	4eac      	ldr	r6, [pc, #688]	; (800525c <_dtoa_r+0x61c>)
 8004fac:	b957      	cbnz	r7, 8004fc4 <_dtoa_r+0x384>
 8004fae:	4642      	mov	r2, r8
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	f7fb fc79 	bl	80008ac <__aeabi_ddiv>
 8004fba:	4682      	mov	sl, r0
 8004fbc:	468b      	mov	fp, r1
 8004fbe:	e028      	b.n	8005012 <_dtoa_r+0x3d2>
 8004fc0:	2502      	movs	r5, #2
 8004fc2:	e7f2      	b.n	8004faa <_dtoa_r+0x36a>
 8004fc4:	07f9      	lsls	r1, r7, #31
 8004fc6:	d508      	bpl.n	8004fda <_dtoa_r+0x39a>
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fd0:	f7fb fb42 	bl	8000658 <__aeabi_dmul>
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	4689      	mov	r9, r1
 8004fda:	107f      	asrs	r7, r7, #1
 8004fdc:	3608      	adds	r6, #8
 8004fde:	e7e5      	b.n	8004fac <_dtoa_r+0x36c>
 8004fe0:	f000 809b 	beq.w	800511a <_dtoa_r+0x4da>
 8004fe4:	9b00      	ldr	r3, [sp, #0]
 8004fe6:	4f9d      	ldr	r7, [pc, #628]	; (800525c <_dtoa_r+0x61c>)
 8004fe8:	425e      	negs	r6, r3
 8004fea:	4b9b      	ldr	r3, [pc, #620]	; (8005258 <_dtoa_r+0x618>)
 8004fec:	f006 020f 	and.w	r2, r6, #15
 8004ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	ec51 0b19 	vmov	r0, r1, d9
 8004ffc:	f7fb fb2c 	bl	8000658 <__aeabi_dmul>
 8005000:	1136      	asrs	r6, r6, #4
 8005002:	4682      	mov	sl, r0
 8005004:	468b      	mov	fp, r1
 8005006:	2300      	movs	r3, #0
 8005008:	2502      	movs	r5, #2
 800500a:	2e00      	cmp	r6, #0
 800500c:	d17a      	bne.n	8005104 <_dtoa_r+0x4c4>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d3      	bne.n	8004fba <_dtoa_r+0x37a>
 8005012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8082 	beq.w	800511e <_dtoa_r+0x4de>
 800501a:	4b91      	ldr	r3, [pc, #580]	; (8005260 <_dtoa_r+0x620>)
 800501c:	2200      	movs	r2, #0
 800501e:	4650      	mov	r0, sl
 8005020:	4659      	mov	r1, fp
 8005022:	f7fb fd8b 	bl	8000b3c <__aeabi_dcmplt>
 8005026:	2800      	cmp	r0, #0
 8005028:	d079      	beq.n	800511e <_dtoa_r+0x4de>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d076      	beq.n	800511e <_dtoa_r+0x4de>
 8005030:	9b02      	ldr	r3, [sp, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd36      	ble.n	80050a4 <_dtoa_r+0x464>
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	1e5f      	subs	r7, r3, #1
 800503e:	2200      	movs	r2, #0
 8005040:	4b88      	ldr	r3, [pc, #544]	; (8005264 <_dtoa_r+0x624>)
 8005042:	f7fb fb09 	bl	8000658 <__aeabi_dmul>
 8005046:	9e02      	ldr	r6, [sp, #8]
 8005048:	4682      	mov	sl, r0
 800504a:	468b      	mov	fp, r1
 800504c:	3501      	adds	r5, #1
 800504e:	4628      	mov	r0, r5
 8005050:	f7fb fa98 	bl	8000584 <__aeabi_i2d>
 8005054:	4652      	mov	r2, sl
 8005056:	465b      	mov	r3, fp
 8005058:	f7fb fafe 	bl	8000658 <__aeabi_dmul>
 800505c:	4b82      	ldr	r3, [pc, #520]	; (8005268 <_dtoa_r+0x628>)
 800505e:	2200      	movs	r2, #0
 8005060:	f7fb f944 	bl	80002ec <__adddf3>
 8005064:	46d0      	mov	r8, sl
 8005066:	46d9      	mov	r9, fp
 8005068:	4682      	mov	sl, r0
 800506a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800506e:	2e00      	cmp	r6, #0
 8005070:	d158      	bne.n	8005124 <_dtoa_r+0x4e4>
 8005072:	4b7e      	ldr	r3, [pc, #504]	; (800526c <_dtoa_r+0x62c>)
 8005074:	2200      	movs	r2, #0
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb f935 	bl	80002e8 <__aeabi_dsub>
 800507e:	4652      	mov	r2, sl
 8005080:	465b      	mov	r3, fp
 8005082:	4680      	mov	r8, r0
 8005084:	4689      	mov	r9, r1
 8005086:	f7fb fd77 	bl	8000b78 <__aeabi_dcmpgt>
 800508a:	2800      	cmp	r0, #0
 800508c:	f040 8295 	bne.w	80055ba <_dtoa_r+0x97a>
 8005090:	4652      	mov	r2, sl
 8005092:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	f7fb fd4f 	bl	8000b3c <__aeabi_dcmplt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f040 8289 	bne.w	80055b6 <_dtoa_r+0x976>
 80050a4:	ec5b ab19 	vmov	sl, fp, d9
 80050a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f2c0 8148 	blt.w	8005340 <_dtoa_r+0x700>
 80050b0:	9a00      	ldr	r2, [sp, #0]
 80050b2:	2a0e      	cmp	r2, #14
 80050b4:	f300 8144 	bgt.w	8005340 <_dtoa_r+0x700>
 80050b8:	4b67      	ldr	r3, [pc, #412]	; (8005258 <_dtoa_r+0x618>)
 80050ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f280 80d5 	bge.w	8005274 <_dtoa_r+0x634>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f300 80d1 	bgt.w	8005274 <_dtoa_r+0x634>
 80050d2:	f040 826f 	bne.w	80055b4 <_dtoa_r+0x974>
 80050d6:	4b65      	ldr	r3, [pc, #404]	; (800526c <_dtoa_r+0x62c>)
 80050d8:	2200      	movs	r2, #0
 80050da:	4640      	mov	r0, r8
 80050dc:	4649      	mov	r1, r9
 80050de:	f7fb fabb 	bl	8000658 <__aeabi_dmul>
 80050e2:	4652      	mov	r2, sl
 80050e4:	465b      	mov	r3, fp
 80050e6:	f7fb fd3d 	bl	8000b64 <__aeabi_dcmpge>
 80050ea:	9e03      	ldr	r6, [sp, #12]
 80050ec:	4637      	mov	r7, r6
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f040 8245 	bne.w	800557e <_dtoa_r+0x93e>
 80050f4:	9d01      	ldr	r5, [sp, #4]
 80050f6:	2331      	movs	r3, #49	; 0x31
 80050f8:	f805 3b01 	strb.w	r3, [r5], #1
 80050fc:	9b00      	ldr	r3, [sp, #0]
 80050fe:	3301      	adds	r3, #1
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	e240      	b.n	8005586 <_dtoa_r+0x946>
 8005104:	07f2      	lsls	r2, r6, #31
 8005106:	d505      	bpl.n	8005114 <_dtoa_r+0x4d4>
 8005108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510c:	f7fb faa4 	bl	8000658 <__aeabi_dmul>
 8005110:	3501      	adds	r5, #1
 8005112:	2301      	movs	r3, #1
 8005114:	1076      	asrs	r6, r6, #1
 8005116:	3708      	adds	r7, #8
 8005118:	e777      	b.n	800500a <_dtoa_r+0x3ca>
 800511a:	2502      	movs	r5, #2
 800511c:	e779      	b.n	8005012 <_dtoa_r+0x3d2>
 800511e:	9f00      	ldr	r7, [sp, #0]
 8005120:	9e03      	ldr	r6, [sp, #12]
 8005122:	e794      	b.n	800504e <_dtoa_r+0x40e>
 8005124:	9901      	ldr	r1, [sp, #4]
 8005126:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <_dtoa_r+0x618>)
 8005128:	4431      	add	r1, r6
 800512a:	910d      	str	r1, [sp, #52]	; 0x34
 800512c:	9908      	ldr	r1, [sp, #32]
 800512e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005136:	2900      	cmp	r1, #0
 8005138:	d043      	beq.n	80051c2 <_dtoa_r+0x582>
 800513a:	494d      	ldr	r1, [pc, #308]	; (8005270 <_dtoa_r+0x630>)
 800513c:	2000      	movs	r0, #0
 800513e:	f7fb fbb5 	bl	80008ac <__aeabi_ddiv>
 8005142:	4652      	mov	r2, sl
 8005144:	465b      	mov	r3, fp
 8005146:	f7fb f8cf 	bl	80002e8 <__aeabi_dsub>
 800514a:	9d01      	ldr	r5, [sp, #4]
 800514c:	4682      	mov	sl, r0
 800514e:	468b      	mov	fp, r1
 8005150:	4649      	mov	r1, r9
 8005152:	4640      	mov	r0, r8
 8005154:	f7fb fd30 	bl	8000bb8 <__aeabi_d2iz>
 8005158:	4606      	mov	r6, r0
 800515a:	f7fb fa13 	bl	8000584 <__aeabi_i2d>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4640      	mov	r0, r8
 8005164:	4649      	mov	r1, r9
 8005166:	f7fb f8bf 	bl	80002e8 <__aeabi_dsub>
 800516a:	3630      	adds	r6, #48	; 0x30
 800516c:	f805 6b01 	strb.w	r6, [r5], #1
 8005170:	4652      	mov	r2, sl
 8005172:	465b      	mov	r3, fp
 8005174:	4680      	mov	r8, r0
 8005176:	4689      	mov	r9, r1
 8005178:	f7fb fce0 	bl	8000b3c <__aeabi_dcmplt>
 800517c:	2800      	cmp	r0, #0
 800517e:	d163      	bne.n	8005248 <_dtoa_r+0x608>
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	4936      	ldr	r1, [pc, #216]	; (8005260 <_dtoa_r+0x620>)
 8005186:	2000      	movs	r0, #0
 8005188:	f7fb f8ae 	bl	80002e8 <__aeabi_dsub>
 800518c:	4652      	mov	r2, sl
 800518e:	465b      	mov	r3, fp
 8005190:	f7fb fcd4 	bl	8000b3c <__aeabi_dcmplt>
 8005194:	2800      	cmp	r0, #0
 8005196:	f040 80b5 	bne.w	8005304 <_dtoa_r+0x6c4>
 800519a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800519c:	429d      	cmp	r5, r3
 800519e:	d081      	beq.n	80050a4 <_dtoa_r+0x464>
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <_dtoa_r+0x624>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	4650      	mov	r0, sl
 80051a6:	4659      	mov	r1, fp
 80051a8:	f7fb fa56 	bl	8000658 <__aeabi_dmul>
 80051ac:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <_dtoa_r+0x624>)
 80051ae:	4682      	mov	sl, r0
 80051b0:	468b      	mov	fp, r1
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	2200      	movs	r2, #0
 80051b8:	f7fb fa4e 	bl	8000658 <__aeabi_dmul>
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	e7c6      	b.n	8005150 <_dtoa_r+0x510>
 80051c2:	4650      	mov	r0, sl
 80051c4:	4659      	mov	r1, fp
 80051c6:	f7fb fa47 	bl	8000658 <__aeabi_dmul>
 80051ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051cc:	9d01      	ldr	r5, [sp, #4]
 80051ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80051d0:	4682      	mov	sl, r0
 80051d2:	468b      	mov	fp, r1
 80051d4:	4649      	mov	r1, r9
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7fb fcee 	bl	8000bb8 <__aeabi_d2iz>
 80051dc:	4606      	mov	r6, r0
 80051de:	f7fb f9d1 	bl	8000584 <__aeabi_i2d>
 80051e2:	3630      	adds	r6, #48	; 0x30
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb f87c 	bl	80002e8 <__aeabi_dsub>
 80051f0:	f805 6b01 	strb.w	r6, [r5], #1
 80051f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f6:	429d      	cmp	r5, r3
 80051f8:	4680      	mov	r8, r0
 80051fa:	4689      	mov	r9, r1
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	d124      	bne.n	800524c <_dtoa_r+0x60c>
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <_dtoa_r+0x630>)
 8005204:	4650      	mov	r0, sl
 8005206:	4659      	mov	r1, fp
 8005208:	f7fb f870 	bl	80002ec <__adddf3>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb fcb0 	bl	8000b78 <__aeabi_dcmpgt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d173      	bne.n	8005304 <_dtoa_r+0x6c4>
 800521c:	4652      	mov	r2, sl
 800521e:	465b      	mov	r3, fp
 8005220:	4913      	ldr	r1, [pc, #76]	; (8005270 <_dtoa_r+0x630>)
 8005222:	2000      	movs	r0, #0
 8005224:	f7fb f860 	bl	80002e8 <__aeabi_dsub>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4640      	mov	r0, r8
 800522e:	4649      	mov	r1, r9
 8005230:	f7fb fc84 	bl	8000b3c <__aeabi_dcmplt>
 8005234:	2800      	cmp	r0, #0
 8005236:	f43f af35 	beq.w	80050a4 <_dtoa_r+0x464>
 800523a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800523c:	1e6b      	subs	r3, r5, #1
 800523e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005240:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d0f8      	beq.n	800523a <_dtoa_r+0x5fa>
 8005248:	9700      	str	r7, [sp, #0]
 800524a:	e049      	b.n	80052e0 <_dtoa_r+0x6a0>
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <_dtoa_r+0x624>)
 800524e:	f7fb fa03 	bl	8000658 <__aeabi_dmul>
 8005252:	4680      	mov	r8, r0
 8005254:	4689      	mov	r9, r1
 8005256:	e7bd      	b.n	80051d4 <_dtoa_r+0x594>
 8005258:	08007238 	.word	0x08007238
 800525c:	08007210 	.word	0x08007210
 8005260:	3ff00000 	.word	0x3ff00000
 8005264:	40240000 	.word	0x40240000
 8005268:	401c0000 	.word	0x401c0000
 800526c:	40140000 	.word	0x40140000
 8005270:	3fe00000 	.word	0x3fe00000
 8005274:	9d01      	ldr	r5, [sp, #4]
 8005276:	4656      	mov	r6, sl
 8005278:	465f      	mov	r7, fp
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	4630      	mov	r0, r6
 8005280:	4639      	mov	r1, r7
 8005282:	f7fb fb13 	bl	80008ac <__aeabi_ddiv>
 8005286:	f7fb fc97 	bl	8000bb8 <__aeabi_d2iz>
 800528a:	4682      	mov	sl, r0
 800528c:	f7fb f97a 	bl	8000584 <__aeabi_i2d>
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	f7fb f9e0 	bl	8000658 <__aeabi_dmul>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4630      	mov	r0, r6
 800529e:	4639      	mov	r1, r7
 80052a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80052a4:	f7fb f820 	bl	80002e8 <__aeabi_dsub>
 80052a8:	f805 6b01 	strb.w	r6, [r5], #1
 80052ac:	9e01      	ldr	r6, [sp, #4]
 80052ae:	9f03      	ldr	r7, [sp, #12]
 80052b0:	1bae      	subs	r6, r5, r6
 80052b2:	42b7      	cmp	r7, r6
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	d135      	bne.n	8005326 <_dtoa_r+0x6e6>
 80052ba:	f7fb f817 	bl	80002ec <__adddf3>
 80052be:	4642      	mov	r2, r8
 80052c0:	464b      	mov	r3, r9
 80052c2:	4606      	mov	r6, r0
 80052c4:	460f      	mov	r7, r1
 80052c6:	f7fb fc57 	bl	8000b78 <__aeabi_dcmpgt>
 80052ca:	b9d0      	cbnz	r0, 8005302 <_dtoa_r+0x6c2>
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fc28 	bl	8000b28 <__aeabi_dcmpeq>
 80052d8:	b110      	cbz	r0, 80052e0 <_dtoa_r+0x6a0>
 80052da:	f01a 0f01 	tst.w	sl, #1
 80052de:	d110      	bne.n	8005302 <_dtoa_r+0x6c2>
 80052e0:	4620      	mov	r0, r4
 80052e2:	ee18 1a10 	vmov	r1, s16
 80052e6:	f000 faf3 	bl	80058d0 <_Bfree>
 80052ea:	2300      	movs	r3, #0
 80052ec:	9800      	ldr	r0, [sp, #0]
 80052ee:	702b      	strb	r3, [r5, #0]
 80052f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f2:	3001      	adds	r0, #1
 80052f4:	6018      	str	r0, [r3, #0]
 80052f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f43f acf1 	beq.w	8004ce0 <_dtoa_r+0xa0>
 80052fe:	601d      	str	r5, [r3, #0]
 8005300:	e4ee      	b.n	8004ce0 <_dtoa_r+0xa0>
 8005302:	9f00      	ldr	r7, [sp, #0]
 8005304:	462b      	mov	r3, r5
 8005306:	461d      	mov	r5, r3
 8005308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800530c:	2a39      	cmp	r2, #57	; 0x39
 800530e:	d106      	bne.n	800531e <_dtoa_r+0x6de>
 8005310:	9a01      	ldr	r2, [sp, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d1f7      	bne.n	8005306 <_dtoa_r+0x6c6>
 8005316:	9901      	ldr	r1, [sp, #4]
 8005318:	2230      	movs	r2, #48	; 0x30
 800531a:	3701      	adds	r7, #1
 800531c:	700a      	strb	r2, [r1, #0]
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	3201      	adds	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e790      	b.n	8005248 <_dtoa_r+0x608>
 8005326:	4ba6      	ldr	r3, [pc, #664]	; (80055c0 <_dtoa_r+0x980>)
 8005328:	2200      	movs	r2, #0
 800532a:	f7fb f995 	bl	8000658 <__aeabi_dmul>
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	f7fb fbf7 	bl	8000b28 <__aeabi_dcmpeq>
 800533a:	2800      	cmp	r0, #0
 800533c:	d09d      	beq.n	800527a <_dtoa_r+0x63a>
 800533e:	e7cf      	b.n	80052e0 <_dtoa_r+0x6a0>
 8005340:	9a08      	ldr	r2, [sp, #32]
 8005342:	2a00      	cmp	r2, #0
 8005344:	f000 80d7 	beq.w	80054f6 <_dtoa_r+0x8b6>
 8005348:	9a06      	ldr	r2, [sp, #24]
 800534a:	2a01      	cmp	r2, #1
 800534c:	f300 80ba 	bgt.w	80054c4 <_dtoa_r+0x884>
 8005350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005352:	2a00      	cmp	r2, #0
 8005354:	f000 80b2 	beq.w	80054bc <_dtoa_r+0x87c>
 8005358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800535c:	9e07      	ldr	r6, [sp, #28]
 800535e:	9d04      	ldr	r5, [sp, #16]
 8005360:	9a04      	ldr	r2, [sp, #16]
 8005362:	441a      	add	r2, r3
 8005364:	9204      	str	r2, [sp, #16]
 8005366:	9a05      	ldr	r2, [sp, #20]
 8005368:	2101      	movs	r1, #1
 800536a:	441a      	add	r2, r3
 800536c:	4620      	mov	r0, r4
 800536e:	9205      	str	r2, [sp, #20]
 8005370:	f000 fb66 	bl	8005a40 <__i2b>
 8005374:	4607      	mov	r7, r0
 8005376:	2d00      	cmp	r5, #0
 8005378:	dd0c      	ble.n	8005394 <_dtoa_r+0x754>
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	dd09      	ble.n	8005394 <_dtoa_r+0x754>
 8005380:	42ab      	cmp	r3, r5
 8005382:	9a04      	ldr	r2, [sp, #16]
 8005384:	bfa8      	it	ge
 8005386:	462b      	movge	r3, r5
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	9204      	str	r2, [sp, #16]
 800538c:	9a05      	ldr	r2, [sp, #20]
 800538e:	1aed      	subs	r5, r5, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	9b07      	ldr	r3, [sp, #28]
 8005396:	b31b      	cbz	r3, 80053e0 <_dtoa_r+0x7a0>
 8005398:	9b08      	ldr	r3, [sp, #32]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80af 	beq.w	80054fe <_dtoa_r+0x8be>
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	dd13      	ble.n	80053cc <_dtoa_r+0x78c>
 80053a4:	4639      	mov	r1, r7
 80053a6:	4632      	mov	r2, r6
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fc09 	bl	8005bc0 <__pow5mult>
 80053ae:	ee18 2a10 	vmov	r2, s16
 80053b2:	4601      	mov	r1, r0
 80053b4:	4607      	mov	r7, r0
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fb58 	bl	8005a6c <__multiply>
 80053bc:	ee18 1a10 	vmov	r1, s16
 80053c0:	4680      	mov	r8, r0
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 fa84 	bl	80058d0 <_Bfree>
 80053c8:	ee08 8a10 	vmov	s16, r8
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	1b9a      	subs	r2, r3, r6
 80053d0:	d006      	beq.n	80053e0 <_dtoa_r+0x7a0>
 80053d2:	ee18 1a10 	vmov	r1, s16
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 fbf2 	bl	8005bc0 <__pow5mult>
 80053dc:	ee08 0a10 	vmov	s16, r0
 80053e0:	2101      	movs	r1, #1
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 fb2c 	bl	8005a40 <__i2b>
 80053e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	4606      	mov	r6, r0
 80053ee:	f340 8088 	ble.w	8005502 <_dtoa_r+0x8c2>
 80053f2:	461a      	mov	r2, r3
 80053f4:	4601      	mov	r1, r0
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 fbe2 	bl	8005bc0 <__pow5mult>
 80053fc:	9b06      	ldr	r3, [sp, #24]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	4606      	mov	r6, r0
 8005402:	f340 8081 	ble.w	8005508 <_dtoa_r+0x8c8>
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	6933      	ldr	r3, [r6, #16]
 800540c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005410:	6918      	ldr	r0, [r3, #16]
 8005412:	f000 fac5 	bl	80059a0 <__hi0bits>
 8005416:	f1c0 0020 	rsb	r0, r0, #32
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	4418      	add	r0, r3
 800541e:	f010 001f 	ands.w	r0, r0, #31
 8005422:	f000 8092 	beq.w	800554a <_dtoa_r+0x90a>
 8005426:	f1c0 0320 	rsb	r3, r0, #32
 800542a:	2b04      	cmp	r3, #4
 800542c:	f340 808a 	ble.w	8005544 <_dtoa_r+0x904>
 8005430:	f1c0 001c 	rsb	r0, r0, #28
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	4403      	add	r3, r0
 8005438:	9304      	str	r3, [sp, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	4403      	add	r3, r0
 800543e:	4405      	add	r5, r0
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dd07      	ble.n	8005458 <_dtoa_r+0x818>
 8005448:	ee18 1a10 	vmov	r1, s16
 800544c:	461a      	mov	r2, r3
 800544e:	4620      	mov	r0, r4
 8005450:	f000 fc10 	bl	8005c74 <__lshift>
 8005454:	ee08 0a10 	vmov	s16, r0
 8005458:	9b05      	ldr	r3, [sp, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	dd05      	ble.n	800546a <_dtoa_r+0x82a>
 800545e:	4631      	mov	r1, r6
 8005460:	461a      	mov	r2, r3
 8005462:	4620      	mov	r0, r4
 8005464:	f000 fc06 	bl	8005c74 <__lshift>
 8005468:	4606      	mov	r6, r0
 800546a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d06e      	beq.n	800554e <_dtoa_r+0x90e>
 8005470:	ee18 0a10 	vmov	r0, s16
 8005474:	4631      	mov	r1, r6
 8005476:	f000 fc6d 	bl	8005d54 <__mcmp>
 800547a:	2800      	cmp	r0, #0
 800547c:	da67      	bge.n	800554e <_dtoa_r+0x90e>
 800547e:	9b00      	ldr	r3, [sp, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	ee18 1a10 	vmov	r1, s16
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	220a      	movs	r2, #10
 800548a:	2300      	movs	r3, #0
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fa41 	bl	8005914 <__multadd>
 8005492:	9b08      	ldr	r3, [sp, #32]
 8005494:	ee08 0a10 	vmov	s16, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 81b1 	beq.w	8005800 <_dtoa_r+0xbc0>
 800549e:	2300      	movs	r3, #0
 80054a0:	4639      	mov	r1, r7
 80054a2:	220a      	movs	r2, #10
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fa35 	bl	8005914 <__multadd>
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	4607      	mov	r7, r0
 80054b0:	f300 808e 	bgt.w	80055d0 <_dtoa_r+0x990>
 80054b4:	9b06      	ldr	r3, [sp, #24]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	dc51      	bgt.n	800555e <_dtoa_r+0x91e>
 80054ba:	e089      	b.n	80055d0 <_dtoa_r+0x990>
 80054bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054c2:	e74b      	b.n	800535c <_dtoa_r+0x71c>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	1e5e      	subs	r6, r3, #1
 80054c8:	9b07      	ldr	r3, [sp, #28]
 80054ca:	42b3      	cmp	r3, r6
 80054cc:	bfbf      	itttt	lt
 80054ce:	9b07      	ldrlt	r3, [sp, #28]
 80054d0:	9607      	strlt	r6, [sp, #28]
 80054d2:	1af2      	sublt	r2, r6, r3
 80054d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054d6:	bfb6      	itet	lt
 80054d8:	189b      	addlt	r3, r3, r2
 80054da:	1b9e      	subge	r6, r3, r6
 80054dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	bfb8      	it	lt
 80054e2:	2600      	movlt	r6, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfb7      	itett	lt
 80054e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80054ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80054f0:	1a9d      	sublt	r5, r3, r2
 80054f2:	2300      	movlt	r3, #0
 80054f4:	e734      	b.n	8005360 <_dtoa_r+0x720>
 80054f6:	9e07      	ldr	r6, [sp, #28]
 80054f8:	9d04      	ldr	r5, [sp, #16]
 80054fa:	9f08      	ldr	r7, [sp, #32]
 80054fc:	e73b      	b.n	8005376 <_dtoa_r+0x736>
 80054fe:	9a07      	ldr	r2, [sp, #28]
 8005500:	e767      	b.n	80053d2 <_dtoa_r+0x792>
 8005502:	9b06      	ldr	r3, [sp, #24]
 8005504:	2b01      	cmp	r3, #1
 8005506:	dc18      	bgt.n	800553a <_dtoa_r+0x8fa>
 8005508:	f1ba 0f00 	cmp.w	sl, #0
 800550c:	d115      	bne.n	800553a <_dtoa_r+0x8fa>
 800550e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005512:	b993      	cbnz	r3, 800553a <_dtoa_r+0x8fa>
 8005514:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005518:	0d1b      	lsrs	r3, r3, #20
 800551a:	051b      	lsls	r3, r3, #20
 800551c:	b183      	cbz	r3, 8005540 <_dtoa_r+0x900>
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	9b05      	ldr	r3, [sp, #20]
 8005526:	3301      	adds	r3, #1
 8005528:	9305      	str	r3, [sp, #20]
 800552a:	f04f 0801 	mov.w	r8, #1
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af6a 	bne.w	800540a <_dtoa_r+0x7ca>
 8005536:	2001      	movs	r0, #1
 8005538:	e76f      	b.n	800541a <_dtoa_r+0x7da>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	e7f6      	b.n	800552e <_dtoa_r+0x8ee>
 8005540:	4698      	mov	r8, r3
 8005542:	e7f4      	b.n	800552e <_dtoa_r+0x8ee>
 8005544:	f43f af7d 	beq.w	8005442 <_dtoa_r+0x802>
 8005548:	4618      	mov	r0, r3
 800554a:	301c      	adds	r0, #28
 800554c:	e772      	b.n	8005434 <_dtoa_r+0x7f4>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc37      	bgt.n	80055c4 <_dtoa_r+0x984>
 8005554:	9b06      	ldr	r3, [sp, #24]
 8005556:	2b02      	cmp	r3, #2
 8005558:	dd34      	ble.n	80055c4 <_dtoa_r+0x984>
 800555a:	9b03      	ldr	r3, [sp, #12]
 800555c:	9302      	str	r3, [sp, #8]
 800555e:	9b02      	ldr	r3, [sp, #8]
 8005560:	b96b      	cbnz	r3, 800557e <_dtoa_r+0x93e>
 8005562:	4631      	mov	r1, r6
 8005564:	2205      	movs	r2, #5
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f9d4 	bl	8005914 <__multadd>
 800556c:	4601      	mov	r1, r0
 800556e:	4606      	mov	r6, r0
 8005570:	ee18 0a10 	vmov	r0, s16
 8005574:	f000 fbee 	bl	8005d54 <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	f73f adbb 	bgt.w	80050f4 <_dtoa_r+0x4b4>
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	9d01      	ldr	r5, [sp, #4]
 8005582:	43db      	mvns	r3, r3
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	f04f 0800 	mov.w	r8, #0
 800558a:	4631      	mov	r1, r6
 800558c:	4620      	mov	r0, r4
 800558e:	f000 f99f 	bl	80058d0 <_Bfree>
 8005592:	2f00      	cmp	r7, #0
 8005594:	f43f aea4 	beq.w	80052e0 <_dtoa_r+0x6a0>
 8005598:	f1b8 0f00 	cmp.w	r8, #0
 800559c:	d005      	beq.n	80055aa <_dtoa_r+0x96a>
 800559e:	45b8      	cmp	r8, r7
 80055a0:	d003      	beq.n	80055aa <_dtoa_r+0x96a>
 80055a2:	4641      	mov	r1, r8
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f993 	bl	80058d0 <_Bfree>
 80055aa:	4639      	mov	r1, r7
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f98f 	bl	80058d0 <_Bfree>
 80055b2:	e695      	b.n	80052e0 <_dtoa_r+0x6a0>
 80055b4:	2600      	movs	r6, #0
 80055b6:	4637      	mov	r7, r6
 80055b8:	e7e1      	b.n	800557e <_dtoa_r+0x93e>
 80055ba:	9700      	str	r7, [sp, #0]
 80055bc:	4637      	mov	r7, r6
 80055be:	e599      	b.n	80050f4 <_dtoa_r+0x4b4>
 80055c0:	40240000 	.word	0x40240000
 80055c4:	9b08      	ldr	r3, [sp, #32]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80ca 	beq.w	8005760 <_dtoa_r+0xb20>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	dd05      	ble.n	80055e0 <_dtoa_r+0x9a0>
 80055d4:	4639      	mov	r1, r7
 80055d6:	462a      	mov	r2, r5
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fb4b 	bl	8005c74 <__lshift>
 80055de:	4607      	mov	r7, r0
 80055e0:	f1b8 0f00 	cmp.w	r8, #0
 80055e4:	d05b      	beq.n	800569e <_dtoa_r+0xa5e>
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f931 	bl	8005850 <_Balloc>
 80055ee:	4605      	mov	r5, r0
 80055f0:	b928      	cbnz	r0, 80055fe <_dtoa_r+0x9be>
 80055f2:	4b87      	ldr	r3, [pc, #540]	; (8005810 <_dtoa_r+0xbd0>)
 80055f4:	4602      	mov	r2, r0
 80055f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055fa:	f7ff bb3b 	b.w	8004c74 <_dtoa_r+0x34>
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	3202      	adds	r2, #2
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	f107 010c 	add.w	r1, r7, #12
 8005608:	300c      	adds	r0, #12
 800560a:	f000 f913 	bl	8005834 <memcpy>
 800560e:	2201      	movs	r2, #1
 8005610:	4629      	mov	r1, r5
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fb2e 	bl	8005c74 <__lshift>
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	f103 0901 	add.w	r9, r3, #1
 800561e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005622:	4413      	add	r3, r2
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	f00a 0301 	and.w	r3, sl, #1
 800562a:	46b8      	mov	r8, r7
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	4607      	mov	r7, r0
 8005630:	4631      	mov	r1, r6
 8005632:	ee18 0a10 	vmov	r0, s16
 8005636:	f7ff fa77 	bl	8004b28 <quorem>
 800563a:	4641      	mov	r1, r8
 800563c:	9002      	str	r0, [sp, #8]
 800563e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005642:	ee18 0a10 	vmov	r0, s16
 8005646:	f000 fb85 	bl	8005d54 <__mcmp>
 800564a:	463a      	mov	r2, r7
 800564c:	9003      	str	r0, [sp, #12]
 800564e:	4631      	mov	r1, r6
 8005650:	4620      	mov	r0, r4
 8005652:	f000 fb9b 	bl	8005d8c <__mdiff>
 8005656:	68c2      	ldr	r2, [r0, #12]
 8005658:	f109 3bff 	add.w	fp, r9, #4294967295
 800565c:	4605      	mov	r5, r0
 800565e:	bb02      	cbnz	r2, 80056a2 <_dtoa_r+0xa62>
 8005660:	4601      	mov	r1, r0
 8005662:	ee18 0a10 	vmov	r0, s16
 8005666:	f000 fb75 	bl	8005d54 <__mcmp>
 800566a:	4602      	mov	r2, r0
 800566c:	4629      	mov	r1, r5
 800566e:	4620      	mov	r0, r4
 8005670:	9207      	str	r2, [sp, #28]
 8005672:	f000 f92d 	bl	80058d0 <_Bfree>
 8005676:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800567a:	ea43 0102 	orr.w	r1, r3, r2
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	430b      	orrs	r3, r1
 8005682:	464d      	mov	r5, r9
 8005684:	d10f      	bne.n	80056a6 <_dtoa_r+0xa66>
 8005686:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800568a:	d02a      	beq.n	80056e2 <_dtoa_r+0xaa2>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd02      	ble.n	8005698 <_dtoa_r+0xa58>
 8005692:	9b02      	ldr	r3, [sp, #8]
 8005694:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005698:	f88b a000 	strb.w	sl, [fp]
 800569c:	e775      	b.n	800558a <_dtoa_r+0x94a>
 800569e:	4638      	mov	r0, r7
 80056a0:	e7ba      	b.n	8005618 <_dtoa_r+0x9d8>
 80056a2:	2201      	movs	r2, #1
 80056a4:	e7e2      	b.n	800566c <_dtoa_r+0xa2c>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db04      	blt.n	80056b6 <_dtoa_r+0xa76>
 80056ac:	9906      	ldr	r1, [sp, #24]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	9904      	ldr	r1, [sp, #16]
 80056b2:	430b      	orrs	r3, r1
 80056b4:	d122      	bne.n	80056fc <_dtoa_r+0xabc>
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	ddee      	ble.n	8005698 <_dtoa_r+0xa58>
 80056ba:	ee18 1a10 	vmov	r1, s16
 80056be:	2201      	movs	r2, #1
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fad7 	bl	8005c74 <__lshift>
 80056c6:	4631      	mov	r1, r6
 80056c8:	ee08 0a10 	vmov	s16, r0
 80056cc:	f000 fb42 	bl	8005d54 <__mcmp>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	dc03      	bgt.n	80056dc <_dtoa_r+0xa9c>
 80056d4:	d1e0      	bne.n	8005698 <_dtoa_r+0xa58>
 80056d6:	f01a 0f01 	tst.w	sl, #1
 80056da:	d0dd      	beq.n	8005698 <_dtoa_r+0xa58>
 80056dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056e0:	d1d7      	bne.n	8005692 <_dtoa_r+0xa52>
 80056e2:	2339      	movs	r3, #57	; 0x39
 80056e4:	f88b 3000 	strb.w	r3, [fp]
 80056e8:	462b      	mov	r3, r5
 80056ea:	461d      	mov	r5, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056f2:	2a39      	cmp	r2, #57	; 0x39
 80056f4:	d071      	beq.n	80057da <_dtoa_r+0xb9a>
 80056f6:	3201      	adds	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e746      	b.n	800558a <_dtoa_r+0x94a>
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	dd07      	ble.n	8005710 <_dtoa_r+0xad0>
 8005700:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005704:	d0ed      	beq.n	80056e2 <_dtoa_r+0xaa2>
 8005706:	f10a 0301 	add.w	r3, sl, #1
 800570a:	f88b 3000 	strb.w	r3, [fp]
 800570e:	e73c      	b.n	800558a <_dtoa_r+0x94a>
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005716:	4599      	cmp	r9, r3
 8005718:	d047      	beq.n	80057aa <_dtoa_r+0xb6a>
 800571a:	ee18 1a10 	vmov	r1, s16
 800571e:	2300      	movs	r3, #0
 8005720:	220a      	movs	r2, #10
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f8f6 	bl	8005914 <__multadd>
 8005728:	45b8      	cmp	r8, r7
 800572a:	ee08 0a10 	vmov	s16, r0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	f04f 020a 	mov.w	r2, #10
 8005736:	4641      	mov	r1, r8
 8005738:	4620      	mov	r0, r4
 800573a:	d106      	bne.n	800574a <_dtoa_r+0xb0a>
 800573c:	f000 f8ea 	bl	8005914 <__multadd>
 8005740:	4680      	mov	r8, r0
 8005742:	4607      	mov	r7, r0
 8005744:	f109 0901 	add.w	r9, r9, #1
 8005748:	e772      	b.n	8005630 <_dtoa_r+0x9f0>
 800574a:	f000 f8e3 	bl	8005914 <__multadd>
 800574e:	4639      	mov	r1, r7
 8005750:	4680      	mov	r8, r0
 8005752:	2300      	movs	r3, #0
 8005754:	220a      	movs	r2, #10
 8005756:	4620      	mov	r0, r4
 8005758:	f000 f8dc 	bl	8005914 <__multadd>
 800575c:	4607      	mov	r7, r0
 800575e:	e7f1      	b.n	8005744 <_dtoa_r+0xb04>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	9302      	str	r3, [sp, #8]
 8005764:	9d01      	ldr	r5, [sp, #4]
 8005766:	ee18 0a10 	vmov	r0, s16
 800576a:	4631      	mov	r1, r6
 800576c:	f7ff f9dc 	bl	8004b28 <quorem>
 8005770:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005774:	9b01      	ldr	r3, [sp, #4]
 8005776:	f805 ab01 	strb.w	sl, [r5], #1
 800577a:	1aea      	subs	r2, r5, r3
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	4293      	cmp	r3, r2
 8005780:	dd09      	ble.n	8005796 <_dtoa_r+0xb56>
 8005782:	ee18 1a10 	vmov	r1, s16
 8005786:	2300      	movs	r3, #0
 8005788:	220a      	movs	r2, #10
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f8c2 	bl	8005914 <__multadd>
 8005790:	ee08 0a10 	vmov	s16, r0
 8005794:	e7e7      	b.n	8005766 <_dtoa_r+0xb26>
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	bfc8      	it	gt
 800579c:	461d      	movgt	r5, r3
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	bfd8      	it	le
 80057a2:	2501      	movle	r5, #1
 80057a4:	441d      	add	r5, r3
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	ee18 1a10 	vmov	r1, s16
 80057ae:	2201      	movs	r2, #1
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fa5f 	bl	8005c74 <__lshift>
 80057b6:	4631      	mov	r1, r6
 80057b8:	ee08 0a10 	vmov	s16, r0
 80057bc:	f000 faca 	bl	8005d54 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	dc91      	bgt.n	80056e8 <_dtoa_r+0xaa8>
 80057c4:	d102      	bne.n	80057cc <_dtoa_r+0xb8c>
 80057c6:	f01a 0f01 	tst.w	sl, #1
 80057ca:	d18d      	bne.n	80056e8 <_dtoa_r+0xaa8>
 80057cc:	462b      	mov	r3, r5
 80057ce:	461d      	mov	r5, r3
 80057d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057d4:	2a30      	cmp	r2, #48	; 0x30
 80057d6:	d0fa      	beq.n	80057ce <_dtoa_r+0xb8e>
 80057d8:	e6d7      	b.n	800558a <_dtoa_r+0x94a>
 80057da:	9a01      	ldr	r2, [sp, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d184      	bne.n	80056ea <_dtoa_r+0xaaa>
 80057e0:	9b00      	ldr	r3, [sp, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2331      	movs	r3, #49	; 0x31
 80057e8:	7013      	strb	r3, [r2, #0]
 80057ea:	e6ce      	b.n	800558a <_dtoa_r+0x94a>
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <_dtoa_r+0xbd4>)
 80057ee:	f7ff ba95 	b.w	8004d1c <_dtoa_r+0xdc>
 80057f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f aa6e 	bne.w	8004cd6 <_dtoa_r+0x96>
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <_dtoa_r+0xbd8>)
 80057fc:	f7ff ba8e 	b.w	8004d1c <_dtoa_r+0xdc>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	dcae      	bgt.n	8005764 <_dtoa_r+0xb24>
 8005806:	9b06      	ldr	r3, [sp, #24]
 8005808:	2b02      	cmp	r3, #2
 800580a:	f73f aea8 	bgt.w	800555e <_dtoa_r+0x91e>
 800580e:	e7a9      	b.n	8005764 <_dtoa_r+0xb24>
 8005810:	0800719f 	.word	0x0800719f
 8005814:	080070fc 	.word	0x080070fc
 8005818:	08007120 	.word	0x08007120

0800581c <_localeconv_r>:
 800581c:	4800      	ldr	r0, [pc, #0]	; (8005820 <_localeconv_r+0x4>)
 800581e:	4770      	bx	lr
 8005820:	20000160 	.word	0x20000160

08005824 <malloc>:
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <malloc+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f000 bc17 	b.w	800605c <_malloc_r>
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <memcpy>:
 8005834:	440a      	add	r2, r1
 8005836:	4291      	cmp	r1, r2
 8005838:	f100 33ff 	add.w	r3, r0, #4294967295
 800583c:	d100      	bne.n	8005840 <memcpy+0xc>
 800583e:	4770      	bx	lr
 8005840:	b510      	push	{r4, lr}
 8005842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800584a:	4291      	cmp	r1, r2
 800584c:	d1f9      	bne.n	8005842 <memcpy+0xe>
 800584e:	bd10      	pop	{r4, pc}

08005850 <_Balloc>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005854:	4604      	mov	r4, r0
 8005856:	460d      	mov	r5, r1
 8005858:	b976      	cbnz	r6, 8005878 <_Balloc+0x28>
 800585a:	2010      	movs	r0, #16
 800585c:	f7ff ffe2 	bl	8005824 <malloc>
 8005860:	4602      	mov	r2, r0
 8005862:	6260      	str	r0, [r4, #36]	; 0x24
 8005864:	b920      	cbnz	r0, 8005870 <_Balloc+0x20>
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <_Balloc+0x78>)
 8005868:	4818      	ldr	r0, [pc, #96]	; (80058cc <_Balloc+0x7c>)
 800586a:	2166      	movs	r1, #102	; 0x66
 800586c:	f000 fdd6 	bl	800641c <__assert_func>
 8005870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005874:	6006      	str	r6, [r0, #0]
 8005876:	60c6      	str	r6, [r0, #12]
 8005878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800587a:	68f3      	ldr	r3, [r6, #12]
 800587c:	b183      	cbz	r3, 80058a0 <_Balloc+0x50>
 800587e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005886:	b9b8      	cbnz	r0, 80058b8 <_Balloc+0x68>
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f605 	lsl.w	r6, r1, r5
 800588e:	1d72      	adds	r2, r6, #5
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fb60 	bl	8005f58 <_calloc_r>
 8005898:	b160      	cbz	r0, 80058b4 <_Balloc+0x64>
 800589a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800589e:	e00e      	b.n	80058be <_Balloc+0x6e>
 80058a0:	2221      	movs	r2, #33	; 0x21
 80058a2:	2104      	movs	r1, #4
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 fb57 	bl	8005f58 <_calloc_r>
 80058aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ac:	60f0      	str	r0, [r6, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e4      	bne.n	800587e <_Balloc+0x2e>
 80058b4:	2000      	movs	r0, #0
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	6802      	ldr	r2, [r0, #0]
 80058ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058be:	2300      	movs	r3, #0
 80058c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058c4:	e7f7      	b.n	80058b6 <_Balloc+0x66>
 80058c6:	bf00      	nop
 80058c8:	0800712d 	.word	0x0800712d
 80058cc:	080071b0 	.word	0x080071b0

080058d0 <_Bfree>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058d4:	4605      	mov	r5, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b976      	cbnz	r6, 80058f8 <_Bfree+0x28>
 80058da:	2010      	movs	r0, #16
 80058dc:	f7ff ffa2 	bl	8005824 <malloc>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6268      	str	r0, [r5, #36]	; 0x24
 80058e4:	b920      	cbnz	r0, 80058f0 <_Bfree+0x20>
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <_Bfree+0x3c>)
 80058e8:	4809      	ldr	r0, [pc, #36]	; (8005910 <_Bfree+0x40>)
 80058ea:	218a      	movs	r1, #138	; 0x8a
 80058ec:	f000 fd96 	bl	800641c <__assert_func>
 80058f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058f4:	6006      	str	r6, [r0, #0]
 80058f6:	60c6      	str	r6, [r0, #12]
 80058f8:	b13c      	cbz	r4, 800590a <_Bfree+0x3a>
 80058fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058fc:	6862      	ldr	r2, [r4, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005904:	6021      	str	r1, [r4, #0]
 8005906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	0800712d 	.word	0x0800712d
 8005910:	080071b0 	.word	0x080071b0

08005914 <__multadd>:
 8005914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005918:	690d      	ldr	r5, [r1, #16]
 800591a:	4607      	mov	r7, r0
 800591c:	460c      	mov	r4, r1
 800591e:	461e      	mov	r6, r3
 8005920:	f101 0c14 	add.w	ip, r1, #20
 8005924:	2000      	movs	r0, #0
 8005926:	f8dc 3000 	ldr.w	r3, [ip]
 800592a:	b299      	uxth	r1, r3
 800592c:	fb02 6101 	mla	r1, r2, r1, r6
 8005930:	0c1e      	lsrs	r6, r3, #16
 8005932:	0c0b      	lsrs	r3, r1, #16
 8005934:	fb02 3306 	mla	r3, r2, r6, r3
 8005938:	b289      	uxth	r1, r1
 800593a:	3001      	adds	r0, #1
 800593c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005940:	4285      	cmp	r5, r0
 8005942:	f84c 1b04 	str.w	r1, [ip], #4
 8005946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800594a:	dcec      	bgt.n	8005926 <__multadd+0x12>
 800594c:	b30e      	cbz	r6, 8005992 <__multadd+0x7e>
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	42ab      	cmp	r3, r5
 8005952:	dc19      	bgt.n	8005988 <__multadd+0x74>
 8005954:	6861      	ldr	r1, [r4, #4]
 8005956:	4638      	mov	r0, r7
 8005958:	3101      	adds	r1, #1
 800595a:	f7ff ff79 	bl	8005850 <_Balloc>
 800595e:	4680      	mov	r8, r0
 8005960:	b928      	cbnz	r0, 800596e <__multadd+0x5a>
 8005962:	4602      	mov	r2, r0
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <__multadd+0x84>)
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <__multadd+0x88>)
 8005968:	21b5      	movs	r1, #181	; 0xb5
 800596a:	f000 fd57 	bl	800641c <__assert_func>
 800596e:	6922      	ldr	r2, [r4, #16]
 8005970:	3202      	adds	r2, #2
 8005972:	f104 010c 	add.w	r1, r4, #12
 8005976:	0092      	lsls	r2, r2, #2
 8005978:	300c      	adds	r0, #12
 800597a:	f7ff ff5b 	bl	8005834 <memcpy>
 800597e:	4621      	mov	r1, r4
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff ffa5 	bl	80058d0 <_Bfree>
 8005986:	4644      	mov	r4, r8
 8005988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800598c:	3501      	adds	r5, #1
 800598e:	615e      	str	r6, [r3, #20]
 8005990:	6125      	str	r5, [r4, #16]
 8005992:	4620      	mov	r0, r4
 8005994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005998:	0800719f 	.word	0x0800719f
 800599c:	080071b0 	.word	0x080071b0

080059a0 <__hi0bits>:
 80059a0:	0c03      	lsrs	r3, r0, #16
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	b9d3      	cbnz	r3, 80059dc <__hi0bits+0x3c>
 80059a6:	0400      	lsls	r0, r0, #16
 80059a8:	2310      	movs	r3, #16
 80059aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059ae:	bf04      	itt	eq
 80059b0:	0200      	lsleq	r0, r0, #8
 80059b2:	3308      	addeq	r3, #8
 80059b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059b8:	bf04      	itt	eq
 80059ba:	0100      	lsleq	r0, r0, #4
 80059bc:	3304      	addeq	r3, #4
 80059be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059c2:	bf04      	itt	eq
 80059c4:	0080      	lsleq	r0, r0, #2
 80059c6:	3302      	addeq	r3, #2
 80059c8:	2800      	cmp	r0, #0
 80059ca:	db05      	blt.n	80059d8 <__hi0bits+0x38>
 80059cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059d0:	f103 0301 	add.w	r3, r3, #1
 80059d4:	bf08      	it	eq
 80059d6:	2320      	moveq	r3, #32
 80059d8:	4618      	mov	r0, r3
 80059da:	4770      	bx	lr
 80059dc:	2300      	movs	r3, #0
 80059de:	e7e4      	b.n	80059aa <__hi0bits+0xa>

080059e0 <__lo0bits>:
 80059e0:	6803      	ldr	r3, [r0, #0]
 80059e2:	f013 0207 	ands.w	r2, r3, #7
 80059e6:	4601      	mov	r1, r0
 80059e8:	d00b      	beq.n	8005a02 <__lo0bits+0x22>
 80059ea:	07da      	lsls	r2, r3, #31
 80059ec:	d423      	bmi.n	8005a36 <__lo0bits+0x56>
 80059ee:	0798      	lsls	r0, r3, #30
 80059f0:	bf49      	itett	mi
 80059f2:	085b      	lsrmi	r3, r3, #1
 80059f4:	089b      	lsrpl	r3, r3, #2
 80059f6:	2001      	movmi	r0, #1
 80059f8:	600b      	strmi	r3, [r1, #0]
 80059fa:	bf5c      	itt	pl
 80059fc:	600b      	strpl	r3, [r1, #0]
 80059fe:	2002      	movpl	r0, #2
 8005a00:	4770      	bx	lr
 8005a02:	b298      	uxth	r0, r3
 8005a04:	b9a8      	cbnz	r0, 8005a32 <__lo0bits+0x52>
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	2010      	movs	r0, #16
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	b90a      	cbnz	r2, 8005a12 <__lo0bits+0x32>
 8005a0e:	3008      	adds	r0, #8
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	071a      	lsls	r2, r3, #28
 8005a14:	bf04      	itt	eq
 8005a16:	091b      	lsreq	r3, r3, #4
 8005a18:	3004      	addeq	r0, #4
 8005a1a:	079a      	lsls	r2, r3, #30
 8005a1c:	bf04      	itt	eq
 8005a1e:	089b      	lsreq	r3, r3, #2
 8005a20:	3002      	addeq	r0, #2
 8005a22:	07da      	lsls	r2, r3, #31
 8005a24:	d403      	bmi.n	8005a2e <__lo0bits+0x4e>
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	f100 0001 	add.w	r0, r0, #1
 8005a2c:	d005      	beq.n	8005a3a <__lo0bits+0x5a>
 8005a2e:	600b      	str	r3, [r1, #0]
 8005a30:	4770      	bx	lr
 8005a32:	4610      	mov	r0, r2
 8005a34:	e7e9      	b.n	8005a0a <__lo0bits+0x2a>
 8005a36:	2000      	movs	r0, #0
 8005a38:	4770      	bx	lr
 8005a3a:	2020      	movs	r0, #32
 8005a3c:	4770      	bx	lr
	...

08005a40 <__i2b>:
 8005a40:	b510      	push	{r4, lr}
 8005a42:	460c      	mov	r4, r1
 8005a44:	2101      	movs	r1, #1
 8005a46:	f7ff ff03 	bl	8005850 <_Balloc>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	b928      	cbnz	r0, 8005a5a <__i2b+0x1a>
 8005a4e:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <__i2b+0x24>)
 8005a50:	4805      	ldr	r0, [pc, #20]	; (8005a68 <__i2b+0x28>)
 8005a52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a56:	f000 fce1 	bl	800641c <__assert_func>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	6144      	str	r4, [r0, #20]
 8005a5e:	6103      	str	r3, [r0, #16]
 8005a60:	bd10      	pop	{r4, pc}
 8005a62:	bf00      	nop
 8005a64:	0800719f 	.word	0x0800719f
 8005a68:	080071b0 	.word	0x080071b0

08005a6c <__multiply>:
 8005a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a70:	4691      	mov	r9, r2
 8005a72:	690a      	ldr	r2, [r1, #16]
 8005a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	bfb8      	it	lt
 8005a7c:	460b      	movlt	r3, r1
 8005a7e:	460c      	mov	r4, r1
 8005a80:	bfbc      	itt	lt
 8005a82:	464c      	movlt	r4, r9
 8005a84:	4699      	movlt	r9, r3
 8005a86:	6927      	ldr	r7, [r4, #16]
 8005a88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	6861      	ldr	r1, [r4, #4]
 8005a90:	eb07 060a 	add.w	r6, r7, sl
 8005a94:	42b3      	cmp	r3, r6
 8005a96:	b085      	sub	sp, #20
 8005a98:	bfb8      	it	lt
 8005a9a:	3101      	addlt	r1, #1
 8005a9c:	f7ff fed8 	bl	8005850 <_Balloc>
 8005aa0:	b930      	cbnz	r0, 8005ab0 <__multiply+0x44>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b44      	ldr	r3, [pc, #272]	; (8005bb8 <__multiply+0x14c>)
 8005aa6:	4845      	ldr	r0, [pc, #276]	; (8005bbc <__multiply+0x150>)
 8005aa8:	f240 115d 	movw	r1, #349	; 0x15d
 8005aac:	f000 fcb6 	bl	800641c <__assert_func>
 8005ab0:	f100 0514 	add.w	r5, r0, #20
 8005ab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ab8:	462b      	mov	r3, r5
 8005aba:	2200      	movs	r2, #0
 8005abc:	4543      	cmp	r3, r8
 8005abe:	d321      	bcc.n	8005b04 <__multiply+0x98>
 8005ac0:	f104 0314 	add.w	r3, r4, #20
 8005ac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ac8:	f109 0314 	add.w	r3, r9, #20
 8005acc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ad0:	9202      	str	r2, [sp, #8]
 8005ad2:	1b3a      	subs	r2, r7, r4
 8005ad4:	3a15      	subs	r2, #21
 8005ad6:	f022 0203 	bic.w	r2, r2, #3
 8005ada:	3204      	adds	r2, #4
 8005adc:	f104 0115 	add.w	r1, r4, #21
 8005ae0:	428f      	cmp	r7, r1
 8005ae2:	bf38      	it	cc
 8005ae4:	2204      	movcc	r2, #4
 8005ae6:	9201      	str	r2, [sp, #4]
 8005ae8:	9a02      	ldr	r2, [sp, #8]
 8005aea:	9303      	str	r3, [sp, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d80c      	bhi.n	8005b0a <__multiply+0x9e>
 8005af0:	2e00      	cmp	r6, #0
 8005af2:	dd03      	ble.n	8005afc <__multiply+0x90>
 8005af4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05a      	beq.n	8005bb2 <__multiply+0x146>
 8005afc:	6106      	str	r6, [r0, #16]
 8005afe:	b005      	add	sp, #20
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	f843 2b04 	str.w	r2, [r3], #4
 8005b08:	e7d8      	b.n	8005abc <__multiply+0x50>
 8005b0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b0e:	f1ba 0f00 	cmp.w	sl, #0
 8005b12:	d024      	beq.n	8005b5e <__multiply+0xf2>
 8005b14:	f104 0e14 	add.w	lr, r4, #20
 8005b18:	46a9      	mov	r9, r5
 8005b1a:	f04f 0c00 	mov.w	ip, #0
 8005b1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b22:	f8d9 1000 	ldr.w	r1, [r9]
 8005b26:	fa1f fb82 	uxth.w	fp, r2
 8005b2a:	b289      	uxth	r1, r1
 8005b2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b34:	f8d9 2000 	ldr.w	r2, [r9]
 8005b38:	4461      	add	r1, ip
 8005b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b46:	b289      	uxth	r1, r1
 8005b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b4c:	4577      	cmp	r7, lr
 8005b4e:	f849 1b04 	str.w	r1, [r9], #4
 8005b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b56:	d8e2      	bhi.n	8005b1e <__multiply+0xb2>
 8005b58:	9a01      	ldr	r2, [sp, #4]
 8005b5a:	f845 c002 	str.w	ip, [r5, r2]
 8005b5e:	9a03      	ldr	r2, [sp, #12]
 8005b60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b64:	3304      	adds	r3, #4
 8005b66:	f1b9 0f00 	cmp.w	r9, #0
 8005b6a:	d020      	beq.n	8005bae <__multiply+0x142>
 8005b6c:	6829      	ldr	r1, [r5, #0]
 8005b6e:	f104 0c14 	add.w	ip, r4, #20
 8005b72:	46ae      	mov	lr, r5
 8005b74:	f04f 0a00 	mov.w	sl, #0
 8005b78:	f8bc b000 	ldrh.w	fp, [ip]
 8005b7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b80:	fb09 220b 	mla	r2, r9, fp, r2
 8005b84:	4492      	add	sl, r2
 8005b86:	b289      	uxth	r1, r1
 8005b88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b8c:	f84e 1b04 	str.w	r1, [lr], #4
 8005b90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b94:	f8be 1000 	ldrh.w	r1, [lr]
 8005b98:	0c12      	lsrs	r2, r2, #16
 8005b9a:	fb09 1102 	mla	r1, r9, r2, r1
 8005b9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ba2:	4567      	cmp	r7, ip
 8005ba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ba8:	d8e6      	bhi.n	8005b78 <__multiply+0x10c>
 8005baa:	9a01      	ldr	r2, [sp, #4]
 8005bac:	50a9      	str	r1, [r5, r2]
 8005bae:	3504      	adds	r5, #4
 8005bb0:	e79a      	b.n	8005ae8 <__multiply+0x7c>
 8005bb2:	3e01      	subs	r6, #1
 8005bb4:	e79c      	b.n	8005af0 <__multiply+0x84>
 8005bb6:	bf00      	nop
 8005bb8:	0800719f 	.word	0x0800719f
 8005bbc:	080071b0 	.word	0x080071b0

08005bc0 <__pow5mult>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	4615      	mov	r5, r2
 8005bc6:	f012 0203 	ands.w	r2, r2, #3
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	d007      	beq.n	8005be0 <__pow5mult+0x20>
 8005bd0:	4c25      	ldr	r4, [pc, #148]	; (8005c68 <__pow5mult+0xa8>)
 8005bd2:	3a01      	subs	r2, #1
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bda:	f7ff fe9b 	bl	8005914 <__multadd>
 8005bde:	4607      	mov	r7, r0
 8005be0:	10ad      	asrs	r5, r5, #2
 8005be2:	d03d      	beq.n	8005c60 <__pow5mult+0xa0>
 8005be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005be6:	b97c      	cbnz	r4, 8005c08 <__pow5mult+0x48>
 8005be8:	2010      	movs	r0, #16
 8005bea:	f7ff fe1b 	bl	8005824 <malloc>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6270      	str	r0, [r6, #36]	; 0x24
 8005bf2:	b928      	cbnz	r0, 8005c00 <__pow5mult+0x40>
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <__pow5mult+0xac>)
 8005bf6:	481e      	ldr	r0, [pc, #120]	; (8005c70 <__pow5mult+0xb0>)
 8005bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005bfc:	f000 fc0e 	bl	800641c <__assert_func>
 8005c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c04:	6004      	str	r4, [r0, #0]
 8005c06:	60c4      	str	r4, [r0, #12]
 8005c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c10:	b94c      	cbnz	r4, 8005c26 <__pow5mult+0x66>
 8005c12:	f240 2171 	movw	r1, #625	; 0x271
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ff12 	bl	8005a40 <__i2b>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c22:	4604      	mov	r4, r0
 8005c24:	6003      	str	r3, [r0, #0]
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	07eb      	lsls	r3, r5, #31
 8005c2c:	d50a      	bpl.n	8005c44 <__pow5mult+0x84>
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4622      	mov	r2, r4
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff ff1a 	bl	8005a6c <__multiply>
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff fe47 	bl	80058d0 <_Bfree>
 8005c42:	4647      	mov	r7, r8
 8005c44:	106d      	asrs	r5, r5, #1
 8005c46:	d00b      	beq.n	8005c60 <__pow5mult+0xa0>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	b938      	cbnz	r0, 8005c5c <__pow5mult+0x9c>
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff ff0b 	bl	8005a6c <__multiply>
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	f8c0 9000 	str.w	r9, [r0]
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	e7e4      	b.n	8005c2a <__pow5mult+0x6a>
 8005c60:	4638      	mov	r0, r7
 8005c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c66:	bf00      	nop
 8005c68:	08007300 	.word	0x08007300
 8005c6c:	0800712d 	.word	0x0800712d
 8005c70:	080071b0 	.word	0x080071b0

08005c74 <__lshift>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	6849      	ldr	r1, [r1, #4]
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	4607      	mov	r7, r0
 8005c86:	4691      	mov	r9, r2
 8005c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c8c:	f108 0601 	add.w	r6, r8, #1
 8005c90:	42b3      	cmp	r3, r6
 8005c92:	db0b      	blt.n	8005cac <__lshift+0x38>
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7ff fddb 	bl	8005850 <_Balloc>
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b948      	cbnz	r0, 8005cb2 <__lshift+0x3e>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <__lshift+0xd8>)
 8005ca2:	482b      	ldr	r0, [pc, #172]	; (8005d50 <__lshift+0xdc>)
 8005ca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ca8:	f000 fbb8 	bl	800641c <__assert_func>
 8005cac:	3101      	adds	r1, #1
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	e7ee      	b.n	8005c90 <__lshift+0x1c>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f100 0114 	add.w	r1, r0, #20
 8005cb8:	f100 0210 	add.w	r2, r0, #16
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	4553      	cmp	r3, sl
 8005cc0:	db37      	blt.n	8005d32 <__lshift+0xbe>
 8005cc2:	6920      	ldr	r0, [r4, #16]
 8005cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cc8:	f104 0314 	add.w	r3, r4, #20
 8005ccc:	f019 091f 	ands.w	r9, r9, #31
 8005cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cd8:	d02f      	beq.n	8005d3a <__lshift+0xc6>
 8005cda:	f1c9 0e20 	rsb	lr, r9, #32
 8005cde:	468a      	mov	sl, r1
 8005ce0:	f04f 0c00 	mov.w	ip, #0
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	fa02 f209 	lsl.w	r2, r2, r9
 8005cea:	ea42 020c 	orr.w	r2, r2, ip
 8005cee:	f84a 2b04 	str.w	r2, [sl], #4
 8005cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf6:	4298      	cmp	r0, r3
 8005cf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005cfc:	d8f2      	bhi.n	8005ce4 <__lshift+0x70>
 8005cfe:	1b03      	subs	r3, r0, r4
 8005d00:	3b15      	subs	r3, #21
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	3304      	adds	r3, #4
 8005d08:	f104 0215 	add.w	r2, r4, #21
 8005d0c:	4290      	cmp	r0, r2
 8005d0e:	bf38      	it	cc
 8005d10:	2304      	movcc	r3, #4
 8005d12:	f841 c003 	str.w	ip, [r1, r3]
 8005d16:	f1bc 0f00 	cmp.w	ip, #0
 8005d1a:	d001      	beq.n	8005d20 <__lshift+0xac>
 8005d1c:	f108 0602 	add.w	r6, r8, #2
 8005d20:	3e01      	subs	r6, #1
 8005d22:	4638      	mov	r0, r7
 8005d24:	612e      	str	r6, [r5, #16]
 8005d26:	4621      	mov	r1, r4
 8005d28:	f7ff fdd2 	bl	80058d0 <_Bfree>
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d36:	3301      	adds	r3, #1
 8005d38:	e7c1      	b.n	8005cbe <__lshift+0x4a>
 8005d3a:	3904      	subs	r1, #4
 8005d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d44:	4298      	cmp	r0, r3
 8005d46:	d8f9      	bhi.n	8005d3c <__lshift+0xc8>
 8005d48:	e7ea      	b.n	8005d20 <__lshift+0xac>
 8005d4a:	bf00      	nop
 8005d4c:	0800719f 	.word	0x0800719f
 8005d50:	080071b0 	.word	0x080071b0

08005d54 <__mcmp>:
 8005d54:	b530      	push	{r4, r5, lr}
 8005d56:	6902      	ldr	r2, [r0, #16]
 8005d58:	690c      	ldr	r4, [r1, #16]
 8005d5a:	1b12      	subs	r2, r2, r4
 8005d5c:	d10e      	bne.n	8005d7c <__mcmp+0x28>
 8005d5e:	f100 0314 	add.w	r3, r0, #20
 8005d62:	3114      	adds	r1, #20
 8005d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d74:	42a5      	cmp	r5, r4
 8005d76:	d003      	beq.n	8005d80 <__mcmp+0x2c>
 8005d78:	d305      	bcc.n	8005d86 <__mcmp+0x32>
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	bd30      	pop	{r4, r5, pc}
 8005d80:	4283      	cmp	r3, r0
 8005d82:	d3f3      	bcc.n	8005d6c <__mcmp+0x18>
 8005d84:	e7fa      	b.n	8005d7c <__mcmp+0x28>
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	e7f7      	b.n	8005d7c <__mcmp+0x28>

08005d8c <__mdiff>:
 8005d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	460c      	mov	r4, r1
 8005d92:	4606      	mov	r6, r0
 8005d94:	4611      	mov	r1, r2
 8005d96:	4620      	mov	r0, r4
 8005d98:	4690      	mov	r8, r2
 8005d9a:	f7ff ffdb 	bl	8005d54 <__mcmp>
 8005d9e:	1e05      	subs	r5, r0, #0
 8005da0:	d110      	bne.n	8005dc4 <__mdiff+0x38>
 8005da2:	4629      	mov	r1, r5
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff fd53 	bl	8005850 <_Balloc>
 8005daa:	b930      	cbnz	r0, 8005dba <__mdiff+0x2e>
 8005dac:	4b3a      	ldr	r3, [pc, #232]	; (8005e98 <__mdiff+0x10c>)
 8005dae:	4602      	mov	r2, r0
 8005db0:	f240 2132 	movw	r1, #562	; 0x232
 8005db4:	4839      	ldr	r0, [pc, #228]	; (8005e9c <__mdiff+0x110>)
 8005db6:	f000 fb31 	bl	800641c <__assert_func>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	bfa4      	itt	ge
 8005dc6:	4643      	movge	r3, r8
 8005dc8:	46a0      	movge	r8, r4
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005dd0:	bfa6      	itte	ge
 8005dd2:	461c      	movge	r4, r3
 8005dd4:	2500      	movge	r5, #0
 8005dd6:	2501      	movlt	r5, #1
 8005dd8:	f7ff fd3a 	bl	8005850 <_Balloc>
 8005ddc:	b920      	cbnz	r0, 8005de8 <__mdiff+0x5c>
 8005dde:	4b2e      	ldr	r3, [pc, #184]	; (8005e98 <__mdiff+0x10c>)
 8005de0:	4602      	mov	r2, r0
 8005de2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005de6:	e7e5      	b.n	8005db4 <__mdiff+0x28>
 8005de8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005dec:	6926      	ldr	r6, [r4, #16]
 8005dee:	60c5      	str	r5, [r0, #12]
 8005df0:	f104 0914 	add.w	r9, r4, #20
 8005df4:	f108 0514 	add.w	r5, r8, #20
 8005df8:	f100 0e14 	add.w	lr, r0, #20
 8005dfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e04:	f108 0210 	add.w	r2, r8, #16
 8005e08:	46f2      	mov	sl, lr
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e14:	fa1f f883 	uxth.w	r8, r3
 8005e18:	fa11 f18b 	uxtah	r1, r1, fp
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	eba1 0808 	sub.w	r8, r1, r8
 8005e22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e2a:	fa1f f888 	uxth.w	r8, r8
 8005e2e:	1419      	asrs	r1, r3, #16
 8005e30:	454e      	cmp	r6, r9
 8005e32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e36:	f84a 3b04 	str.w	r3, [sl], #4
 8005e3a:	d8e7      	bhi.n	8005e0c <__mdiff+0x80>
 8005e3c:	1b33      	subs	r3, r6, r4
 8005e3e:	3b15      	subs	r3, #21
 8005e40:	f023 0303 	bic.w	r3, r3, #3
 8005e44:	3304      	adds	r3, #4
 8005e46:	3415      	adds	r4, #21
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	bf38      	it	cc
 8005e4c:	2304      	movcc	r3, #4
 8005e4e:	441d      	add	r5, r3
 8005e50:	4473      	add	r3, lr
 8005e52:	469e      	mov	lr, r3
 8005e54:	462e      	mov	r6, r5
 8005e56:	4566      	cmp	r6, ip
 8005e58:	d30e      	bcc.n	8005e78 <__mdiff+0xec>
 8005e5a:	f10c 0203 	add.w	r2, ip, #3
 8005e5e:	1b52      	subs	r2, r2, r5
 8005e60:	f022 0203 	bic.w	r2, r2, #3
 8005e64:	3d03      	subs	r5, #3
 8005e66:	45ac      	cmp	ip, r5
 8005e68:	bf38      	it	cc
 8005e6a:	2200      	movcc	r2, #0
 8005e6c:	441a      	add	r2, r3
 8005e6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e72:	b17b      	cbz	r3, 8005e94 <__mdiff+0x108>
 8005e74:	6107      	str	r7, [r0, #16]
 8005e76:	e7a3      	b.n	8005dc0 <__mdiff+0x34>
 8005e78:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e7c:	fa11 f288 	uxtah	r2, r1, r8
 8005e80:	1414      	asrs	r4, r2, #16
 8005e82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e86:	b292      	uxth	r2, r2
 8005e88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e8c:	f84e 2b04 	str.w	r2, [lr], #4
 8005e90:	1421      	asrs	r1, r4, #16
 8005e92:	e7e0      	b.n	8005e56 <__mdiff+0xca>
 8005e94:	3f01      	subs	r7, #1
 8005e96:	e7ea      	b.n	8005e6e <__mdiff+0xe2>
 8005e98:	0800719f 	.word	0x0800719f
 8005e9c:	080071b0 	.word	0x080071b0

08005ea0 <__d2b>:
 8005ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	ec57 6b10 	vmov	r6, r7, d0
 8005eac:	4690      	mov	r8, r2
 8005eae:	f7ff fccf 	bl	8005850 <_Balloc>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	b930      	cbnz	r0, 8005ec4 <__d2b+0x24>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <__d2b+0xb0>)
 8005eba:	4826      	ldr	r0, [pc, #152]	; (8005f54 <__d2b+0xb4>)
 8005ebc:	f240 310a 	movw	r1, #778	; 0x30a
 8005ec0:	f000 faac 	bl	800641c <__assert_func>
 8005ec4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ecc:	bb35      	cbnz	r5, 8005f1c <__d2b+0x7c>
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	d028      	beq.n	8005f26 <__d2b+0x86>
 8005ed4:	4668      	mov	r0, sp
 8005ed6:	9600      	str	r6, [sp, #0]
 8005ed8:	f7ff fd82 	bl	80059e0 <__lo0bits>
 8005edc:	9900      	ldr	r1, [sp, #0]
 8005ede:	b300      	cbz	r0, 8005f22 <__d2b+0x82>
 8005ee0:	9a01      	ldr	r2, [sp, #4]
 8005ee2:	f1c0 0320 	rsb	r3, r0, #32
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	430b      	orrs	r3, r1
 8005eec:	40c2      	lsrs	r2, r0
 8005eee:	6163      	str	r3, [r4, #20]
 8005ef0:	9201      	str	r2, [sp, #4]
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	61a3      	str	r3, [r4, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2202      	movne	r2, #2
 8005efc:	2201      	moveq	r2, #1
 8005efe:	6122      	str	r2, [r4, #16]
 8005f00:	b1d5      	cbz	r5, 8005f38 <__d2b+0x98>
 8005f02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f06:	4405      	add	r5, r0
 8005f08:	f8c9 5000 	str.w	r5, [r9]
 8005f0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f10:	f8c8 0000 	str.w	r0, [r8]
 8005f14:	4620      	mov	r0, r4
 8005f16:	b003      	add	sp, #12
 8005f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f20:	e7d5      	b.n	8005ece <__d2b+0x2e>
 8005f22:	6161      	str	r1, [r4, #20]
 8005f24:	e7e5      	b.n	8005ef2 <__d2b+0x52>
 8005f26:	a801      	add	r0, sp, #4
 8005f28:	f7ff fd5a 	bl	80059e0 <__lo0bits>
 8005f2c:	9b01      	ldr	r3, [sp, #4]
 8005f2e:	6163      	str	r3, [r4, #20]
 8005f30:	2201      	movs	r2, #1
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	3020      	adds	r0, #32
 8005f36:	e7e3      	b.n	8005f00 <__d2b+0x60>
 8005f38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f40:	f8c9 0000 	str.w	r0, [r9]
 8005f44:	6918      	ldr	r0, [r3, #16]
 8005f46:	f7ff fd2b 	bl	80059a0 <__hi0bits>
 8005f4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f4e:	e7df      	b.n	8005f10 <__d2b+0x70>
 8005f50:	0800719f 	.word	0x0800719f
 8005f54:	080071b0 	.word	0x080071b0

08005f58 <_calloc_r>:
 8005f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f5a:	fba1 2402 	umull	r2, r4, r1, r2
 8005f5e:	b94c      	cbnz	r4, 8005f74 <_calloc_r+0x1c>
 8005f60:	4611      	mov	r1, r2
 8005f62:	9201      	str	r2, [sp, #4]
 8005f64:	f000 f87a 	bl	800605c <_malloc_r>
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	b930      	cbnz	r0, 8005f7c <_calloc_r+0x24>
 8005f6e:	4628      	mov	r0, r5
 8005f70:	b003      	add	sp, #12
 8005f72:	bd30      	pop	{r4, r5, pc}
 8005f74:	220c      	movs	r2, #12
 8005f76:	6002      	str	r2, [r0, #0]
 8005f78:	2500      	movs	r5, #0
 8005f7a:	e7f8      	b.n	8005f6e <_calloc_r+0x16>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	f7fe f941 	bl	8004204 <memset>
 8005f82:	e7f4      	b.n	8005f6e <_calloc_r+0x16>

08005f84 <_free_r>:
 8005f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d044      	beq.n	8006014 <_free_r+0x90>
 8005f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8e:	9001      	str	r0, [sp, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f1a1 0404 	sub.w	r4, r1, #4
 8005f96:	bfb8      	it	lt
 8005f98:	18e4      	addlt	r4, r4, r3
 8005f9a:	f000 fa9b 	bl	80064d4 <__malloc_lock>
 8005f9e:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <_free_r+0x94>)
 8005fa0:	9801      	ldr	r0, [sp, #4]
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	b933      	cbnz	r3, 8005fb4 <_free_r+0x30>
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	6014      	str	r4, [r2, #0]
 8005faa:	b003      	add	sp, #12
 8005fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fb0:	f000 ba96 	b.w	80064e0 <__malloc_unlock>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d908      	bls.n	8005fca <_free_r+0x46>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf01      	itttt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	1949      	addeq	r1, r1, r5
 8005fc6:	6021      	streq	r1, [r4, #0]
 8005fc8:	e7ed      	b.n	8005fa6 <_free_r+0x22>
 8005fca:	461a      	mov	r2, r3
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b10b      	cbz	r3, 8005fd4 <_free_r+0x50>
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	d9fa      	bls.n	8005fca <_free_r+0x46>
 8005fd4:	6811      	ldr	r1, [r2, #0]
 8005fd6:	1855      	adds	r5, r2, r1
 8005fd8:	42a5      	cmp	r5, r4
 8005fda:	d10b      	bne.n	8005ff4 <_free_r+0x70>
 8005fdc:	6824      	ldr	r4, [r4, #0]
 8005fde:	4421      	add	r1, r4
 8005fe0:	1854      	adds	r4, r2, r1
 8005fe2:	42a3      	cmp	r3, r4
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	d1e0      	bne.n	8005faa <_free_r+0x26>
 8005fe8:	681c      	ldr	r4, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	6053      	str	r3, [r2, #4]
 8005fee:	4421      	add	r1, r4
 8005ff0:	6011      	str	r1, [r2, #0]
 8005ff2:	e7da      	b.n	8005faa <_free_r+0x26>
 8005ff4:	d902      	bls.n	8005ffc <_free_r+0x78>
 8005ff6:	230c      	movs	r3, #12
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	e7d6      	b.n	8005faa <_free_r+0x26>
 8005ffc:	6825      	ldr	r5, [r4, #0]
 8005ffe:	1961      	adds	r1, r4, r5
 8006000:	428b      	cmp	r3, r1
 8006002:	bf04      	itt	eq
 8006004:	6819      	ldreq	r1, [r3, #0]
 8006006:	685b      	ldreq	r3, [r3, #4]
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	bf04      	itt	eq
 800600c:	1949      	addeq	r1, r1, r5
 800600e:	6021      	streq	r1, [r4, #0]
 8006010:	6054      	str	r4, [r2, #4]
 8006012:	e7ca      	b.n	8005faa <_free_r+0x26>
 8006014:	b003      	add	sp, #12
 8006016:	bd30      	pop	{r4, r5, pc}
 8006018:	2000030c 	.word	0x2000030c

0800601c <sbrk_aligned>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4e0e      	ldr	r6, [pc, #56]	; (8006058 <sbrk_aligned+0x3c>)
 8006020:	460c      	mov	r4, r1
 8006022:	6831      	ldr	r1, [r6, #0]
 8006024:	4605      	mov	r5, r0
 8006026:	b911      	cbnz	r1, 800602e <sbrk_aligned+0x12>
 8006028:	f000 f9e8 	bl	80063fc <_sbrk_r>
 800602c:	6030      	str	r0, [r6, #0]
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	f000 f9e3 	bl	80063fc <_sbrk_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d00a      	beq.n	8006050 <sbrk_aligned+0x34>
 800603a:	1cc4      	adds	r4, r0, #3
 800603c:	f024 0403 	bic.w	r4, r4, #3
 8006040:	42a0      	cmp	r0, r4
 8006042:	d007      	beq.n	8006054 <sbrk_aligned+0x38>
 8006044:	1a21      	subs	r1, r4, r0
 8006046:	4628      	mov	r0, r5
 8006048:	f000 f9d8 	bl	80063fc <_sbrk_r>
 800604c:	3001      	adds	r0, #1
 800604e:	d101      	bne.n	8006054 <sbrk_aligned+0x38>
 8006050:	f04f 34ff 	mov.w	r4, #4294967295
 8006054:	4620      	mov	r0, r4
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	20000310 	.word	0x20000310

0800605c <_malloc_r>:
 800605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	1ccd      	adds	r5, r1, #3
 8006062:	f025 0503 	bic.w	r5, r5, #3
 8006066:	3508      	adds	r5, #8
 8006068:	2d0c      	cmp	r5, #12
 800606a:	bf38      	it	cc
 800606c:	250c      	movcc	r5, #12
 800606e:	2d00      	cmp	r5, #0
 8006070:	4607      	mov	r7, r0
 8006072:	db01      	blt.n	8006078 <_malloc_r+0x1c>
 8006074:	42a9      	cmp	r1, r5
 8006076:	d905      	bls.n	8006084 <_malloc_r+0x28>
 8006078:	230c      	movs	r3, #12
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	2600      	movs	r6, #0
 800607e:	4630      	mov	r0, r6
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	4e2e      	ldr	r6, [pc, #184]	; (8006140 <_malloc_r+0xe4>)
 8006086:	f000 fa25 	bl	80064d4 <__malloc_lock>
 800608a:	6833      	ldr	r3, [r6, #0]
 800608c:	461c      	mov	r4, r3
 800608e:	bb34      	cbnz	r4, 80060de <_malloc_r+0x82>
 8006090:	4629      	mov	r1, r5
 8006092:	4638      	mov	r0, r7
 8006094:	f7ff ffc2 	bl	800601c <sbrk_aligned>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	4604      	mov	r4, r0
 800609c:	d14d      	bne.n	800613a <_malloc_r+0xde>
 800609e:	6834      	ldr	r4, [r6, #0]
 80060a0:	4626      	mov	r6, r4
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d140      	bne.n	8006128 <_malloc_r+0xcc>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	4631      	mov	r1, r6
 80060aa:	4638      	mov	r0, r7
 80060ac:	eb04 0803 	add.w	r8, r4, r3
 80060b0:	f000 f9a4 	bl	80063fc <_sbrk_r>
 80060b4:	4580      	cmp	r8, r0
 80060b6:	d13a      	bne.n	800612e <_malloc_r+0xd2>
 80060b8:	6821      	ldr	r1, [r4, #0]
 80060ba:	3503      	adds	r5, #3
 80060bc:	1a6d      	subs	r5, r5, r1
 80060be:	f025 0503 	bic.w	r5, r5, #3
 80060c2:	3508      	adds	r5, #8
 80060c4:	2d0c      	cmp	r5, #12
 80060c6:	bf38      	it	cc
 80060c8:	250c      	movcc	r5, #12
 80060ca:	4629      	mov	r1, r5
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff ffa5 	bl	800601c <sbrk_aligned>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d02b      	beq.n	800612e <_malloc_r+0xd2>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	442b      	add	r3, r5
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	e00e      	b.n	80060fc <_malloc_r+0xa0>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	1b52      	subs	r2, r2, r5
 80060e2:	d41e      	bmi.n	8006122 <_malloc_r+0xc6>
 80060e4:	2a0b      	cmp	r2, #11
 80060e6:	d916      	bls.n	8006116 <_malloc_r+0xba>
 80060e8:	1961      	adds	r1, r4, r5
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	6025      	str	r5, [r4, #0]
 80060ee:	bf18      	it	ne
 80060f0:	6059      	strne	r1, [r3, #4]
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	bf08      	it	eq
 80060f6:	6031      	streq	r1, [r6, #0]
 80060f8:	5162      	str	r2, [r4, r5]
 80060fa:	604b      	str	r3, [r1, #4]
 80060fc:	4638      	mov	r0, r7
 80060fe:	f104 060b 	add.w	r6, r4, #11
 8006102:	f000 f9ed 	bl	80064e0 <__malloc_unlock>
 8006106:	f026 0607 	bic.w	r6, r6, #7
 800610a:	1d23      	adds	r3, r4, #4
 800610c:	1af2      	subs	r2, r6, r3
 800610e:	d0b6      	beq.n	800607e <_malloc_r+0x22>
 8006110:	1b9b      	subs	r3, r3, r6
 8006112:	50a3      	str	r3, [r4, r2]
 8006114:	e7b3      	b.n	800607e <_malloc_r+0x22>
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	42a3      	cmp	r3, r4
 800611a:	bf0c      	ite	eq
 800611c:	6032      	streq	r2, [r6, #0]
 800611e:	605a      	strne	r2, [r3, #4]
 8006120:	e7ec      	b.n	80060fc <_malloc_r+0xa0>
 8006122:	4623      	mov	r3, r4
 8006124:	6864      	ldr	r4, [r4, #4]
 8006126:	e7b2      	b.n	800608e <_malloc_r+0x32>
 8006128:	4634      	mov	r4, r6
 800612a:	6876      	ldr	r6, [r6, #4]
 800612c:	e7b9      	b.n	80060a2 <_malloc_r+0x46>
 800612e:	230c      	movs	r3, #12
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4638      	mov	r0, r7
 8006134:	f000 f9d4 	bl	80064e0 <__malloc_unlock>
 8006138:	e7a1      	b.n	800607e <_malloc_r+0x22>
 800613a:	6025      	str	r5, [r4, #0]
 800613c:	e7de      	b.n	80060fc <_malloc_r+0xa0>
 800613e:	bf00      	nop
 8006140:	2000030c 	.word	0x2000030c

08006144 <__ssputs_r>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	688e      	ldr	r6, [r1, #8]
 800614a:	429e      	cmp	r6, r3
 800614c:	4682      	mov	sl, r0
 800614e:	460c      	mov	r4, r1
 8006150:	4690      	mov	r8, r2
 8006152:	461f      	mov	r7, r3
 8006154:	d838      	bhi.n	80061c8 <__ssputs_r+0x84>
 8006156:	898a      	ldrh	r2, [r1, #12]
 8006158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800615c:	d032      	beq.n	80061c4 <__ssputs_r+0x80>
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	6909      	ldr	r1, [r1, #16]
 8006162:	eba5 0901 	sub.w	r9, r5, r1
 8006166:	6965      	ldr	r5, [r4, #20]
 8006168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800616c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006170:	3301      	adds	r3, #1
 8006172:	444b      	add	r3, r9
 8006174:	106d      	asrs	r5, r5, #1
 8006176:	429d      	cmp	r5, r3
 8006178:	bf38      	it	cc
 800617a:	461d      	movcc	r5, r3
 800617c:	0553      	lsls	r3, r2, #21
 800617e:	d531      	bpl.n	80061e4 <__ssputs_r+0xa0>
 8006180:	4629      	mov	r1, r5
 8006182:	f7ff ff6b 	bl	800605c <_malloc_r>
 8006186:	4606      	mov	r6, r0
 8006188:	b950      	cbnz	r0, 80061a0 <__ssputs_r+0x5c>
 800618a:	230c      	movs	r3, #12
 800618c:	f8ca 3000 	str.w	r3, [sl]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a0:	6921      	ldr	r1, [r4, #16]
 80061a2:	464a      	mov	r2, r9
 80061a4:	f7ff fb46 	bl	8005834 <memcpy>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	6126      	str	r6, [r4, #16]
 80061b6:	6165      	str	r5, [r4, #20]
 80061b8:	444e      	add	r6, r9
 80061ba:	eba5 0509 	sub.w	r5, r5, r9
 80061be:	6026      	str	r6, [r4, #0]
 80061c0:	60a5      	str	r5, [r4, #8]
 80061c2:	463e      	mov	r6, r7
 80061c4:	42be      	cmp	r6, r7
 80061c6:	d900      	bls.n	80061ca <__ssputs_r+0x86>
 80061c8:	463e      	mov	r6, r7
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	4632      	mov	r2, r6
 80061ce:	4641      	mov	r1, r8
 80061d0:	f000 f966 	bl	80064a0 <memmove>
 80061d4:	68a3      	ldr	r3, [r4, #8]
 80061d6:	1b9b      	subs	r3, r3, r6
 80061d8:	60a3      	str	r3, [r4, #8]
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	4433      	add	r3, r6
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	2000      	movs	r0, #0
 80061e2:	e7db      	b.n	800619c <__ssputs_r+0x58>
 80061e4:	462a      	mov	r2, r5
 80061e6:	f000 f981 	bl	80064ec <_realloc_r>
 80061ea:	4606      	mov	r6, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1e1      	bne.n	80061b4 <__ssputs_r+0x70>
 80061f0:	6921      	ldr	r1, [r4, #16]
 80061f2:	4650      	mov	r0, sl
 80061f4:	f7ff fec6 	bl	8005f84 <_free_r>
 80061f8:	e7c7      	b.n	800618a <__ssputs_r+0x46>
	...

080061fc <_svfiprintf_r>:
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	4698      	mov	r8, r3
 8006202:	898b      	ldrh	r3, [r1, #12]
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	b09d      	sub	sp, #116	; 0x74
 8006208:	4607      	mov	r7, r0
 800620a:	460d      	mov	r5, r1
 800620c:	4614      	mov	r4, r2
 800620e:	d50e      	bpl.n	800622e <_svfiprintf_r+0x32>
 8006210:	690b      	ldr	r3, [r1, #16]
 8006212:	b963      	cbnz	r3, 800622e <_svfiprintf_r+0x32>
 8006214:	2140      	movs	r1, #64	; 0x40
 8006216:	f7ff ff21 	bl	800605c <_malloc_r>
 800621a:	6028      	str	r0, [r5, #0]
 800621c:	6128      	str	r0, [r5, #16]
 800621e:	b920      	cbnz	r0, 800622a <_svfiprintf_r+0x2e>
 8006220:	230c      	movs	r3, #12
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	e0d1      	b.n	80063ce <_svfiprintf_r+0x1d2>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	616b      	str	r3, [r5, #20]
 800622e:	2300      	movs	r3, #0
 8006230:	9309      	str	r3, [sp, #36]	; 0x24
 8006232:	2320      	movs	r3, #32
 8006234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006238:	f8cd 800c 	str.w	r8, [sp, #12]
 800623c:	2330      	movs	r3, #48	; 0x30
 800623e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063e8 <_svfiprintf_r+0x1ec>
 8006242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006246:	f04f 0901 	mov.w	r9, #1
 800624a:	4623      	mov	r3, r4
 800624c:	469a      	mov	sl, r3
 800624e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006252:	b10a      	cbz	r2, 8006258 <_svfiprintf_r+0x5c>
 8006254:	2a25      	cmp	r2, #37	; 0x25
 8006256:	d1f9      	bne.n	800624c <_svfiprintf_r+0x50>
 8006258:	ebba 0b04 	subs.w	fp, sl, r4
 800625c:	d00b      	beq.n	8006276 <_svfiprintf_r+0x7a>
 800625e:	465b      	mov	r3, fp
 8006260:	4622      	mov	r2, r4
 8006262:	4629      	mov	r1, r5
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff ff6d 	bl	8006144 <__ssputs_r>
 800626a:	3001      	adds	r0, #1
 800626c:	f000 80aa 	beq.w	80063c4 <_svfiprintf_r+0x1c8>
 8006270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006272:	445a      	add	r2, fp
 8006274:	9209      	str	r2, [sp, #36]	; 0x24
 8006276:	f89a 3000 	ldrb.w	r3, [sl]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 80a2 	beq.w	80063c4 <_svfiprintf_r+0x1c8>
 8006280:	2300      	movs	r3, #0
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800628a:	f10a 0a01 	add.w	sl, sl, #1
 800628e:	9304      	str	r3, [sp, #16]
 8006290:	9307      	str	r3, [sp, #28]
 8006292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006296:	931a      	str	r3, [sp, #104]	; 0x68
 8006298:	4654      	mov	r4, sl
 800629a:	2205      	movs	r2, #5
 800629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a0:	4851      	ldr	r0, [pc, #324]	; (80063e8 <_svfiprintf_r+0x1ec>)
 80062a2:	f7f9 ffcd 	bl	8000240 <memchr>
 80062a6:	9a04      	ldr	r2, [sp, #16]
 80062a8:	b9d8      	cbnz	r0, 80062e2 <_svfiprintf_r+0xe6>
 80062aa:	06d0      	lsls	r0, r2, #27
 80062ac:	bf44      	itt	mi
 80062ae:	2320      	movmi	r3, #32
 80062b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b4:	0711      	lsls	r1, r2, #28
 80062b6:	bf44      	itt	mi
 80062b8:	232b      	movmi	r3, #43	; 0x2b
 80062ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062be:	f89a 3000 	ldrb.w	r3, [sl]
 80062c2:	2b2a      	cmp	r3, #42	; 0x2a
 80062c4:	d015      	beq.n	80062f2 <_svfiprintf_r+0xf6>
 80062c6:	9a07      	ldr	r2, [sp, #28]
 80062c8:	4654      	mov	r4, sl
 80062ca:	2000      	movs	r0, #0
 80062cc:	f04f 0c0a 	mov.w	ip, #10
 80062d0:	4621      	mov	r1, r4
 80062d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d6:	3b30      	subs	r3, #48	; 0x30
 80062d8:	2b09      	cmp	r3, #9
 80062da:	d94e      	bls.n	800637a <_svfiprintf_r+0x17e>
 80062dc:	b1b0      	cbz	r0, 800630c <_svfiprintf_r+0x110>
 80062de:	9207      	str	r2, [sp, #28]
 80062e0:	e014      	b.n	800630c <_svfiprintf_r+0x110>
 80062e2:	eba0 0308 	sub.w	r3, r0, r8
 80062e6:	fa09 f303 	lsl.w	r3, r9, r3
 80062ea:	4313      	orrs	r3, r2
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	46a2      	mov	sl, r4
 80062f0:	e7d2      	b.n	8006298 <_svfiprintf_r+0x9c>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	1d19      	adds	r1, r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9103      	str	r1, [sp, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bfbb      	ittet	lt
 80062fe:	425b      	neglt	r3, r3
 8006300:	f042 0202 	orrlt.w	r2, r2, #2
 8006304:	9307      	strge	r3, [sp, #28]
 8006306:	9307      	strlt	r3, [sp, #28]
 8006308:	bfb8      	it	lt
 800630a:	9204      	strlt	r2, [sp, #16]
 800630c:	7823      	ldrb	r3, [r4, #0]
 800630e:	2b2e      	cmp	r3, #46	; 0x2e
 8006310:	d10c      	bne.n	800632c <_svfiprintf_r+0x130>
 8006312:	7863      	ldrb	r3, [r4, #1]
 8006314:	2b2a      	cmp	r3, #42	; 0x2a
 8006316:	d135      	bne.n	8006384 <_svfiprintf_r+0x188>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	1d1a      	adds	r2, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	9203      	str	r2, [sp, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfb8      	it	lt
 8006324:	f04f 33ff 	movlt.w	r3, #4294967295
 8006328:	3402      	adds	r4, #2
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063f8 <_svfiprintf_r+0x1fc>
 8006330:	7821      	ldrb	r1, [r4, #0]
 8006332:	2203      	movs	r2, #3
 8006334:	4650      	mov	r0, sl
 8006336:	f7f9 ff83 	bl	8000240 <memchr>
 800633a:	b140      	cbz	r0, 800634e <_svfiprintf_r+0x152>
 800633c:	2340      	movs	r3, #64	; 0x40
 800633e:	eba0 000a 	sub.w	r0, r0, sl
 8006342:	fa03 f000 	lsl.w	r0, r3, r0
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	4303      	orrs	r3, r0
 800634a:	3401      	adds	r4, #1
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006352:	4826      	ldr	r0, [pc, #152]	; (80063ec <_svfiprintf_r+0x1f0>)
 8006354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006358:	2206      	movs	r2, #6
 800635a:	f7f9 ff71 	bl	8000240 <memchr>
 800635e:	2800      	cmp	r0, #0
 8006360:	d038      	beq.n	80063d4 <_svfiprintf_r+0x1d8>
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <_svfiprintf_r+0x1f4>)
 8006364:	bb1b      	cbnz	r3, 80063ae <_svfiprintf_r+0x1b2>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3307      	adds	r3, #7
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	3308      	adds	r3, #8
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	4433      	add	r3, r6
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	e767      	b.n	800624a <_svfiprintf_r+0x4e>
 800637a:	fb0c 3202 	mla	r2, ip, r2, r3
 800637e:	460c      	mov	r4, r1
 8006380:	2001      	movs	r0, #1
 8006382:	e7a5      	b.n	80062d0 <_svfiprintf_r+0xd4>
 8006384:	2300      	movs	r3, #0
 8006386:	3401      	adds	r4, #1
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	4619      	mov	r1, r3
 800638c:	f04f 0c0a 	mov.w	ip, #10
 8006390:	4620      	mov	r0, r4
 8006392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006396:	3a30      	subs	r2, #48	; 0x30
 8006398:	2a09      	cmp	r2, #9
 800639a:	d903      	bls.n	80063a4 <_svfiprintf_r+0x1a8>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0c5      	beq.n	800632c <_svfiprintf_r+0x130>
 80063a0:	9105      	str	r1, [sp, #20]
 80063a2:	e7c3      	b.n	800632c <_svfiprintf_r+0x130>
 80063a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80063a8:	4604      	mov	r4, r0
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7f0      	b.n	8006390 <_svfiprintf_r+0x194>
 80063ae:	ab03      	add	r3, sp, #12
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	462a      	mov	r2, r5
 80063b4:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <_svfiprintf_r+0x1f8>)
 80063b6:	a904      	add	r1, sp, #16
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7fd ffcb 	bl	8004354 <_printf_float>
 80063be:	1c42      	adds	r2, r0, #1
 80063c0:	4606      	mov	r6, r0
 80063c2:	d1d6      	bne.n	8006372 <_svfiprintf_r+0x176>
 80063c4:	89ab      	ldrh	r3, [r5, #12]
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	f53f af2c 	bmi.w	8006224 <_svfiprintf_r+0x28>
 80063cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ce:	b01d      	add	sp, #116	; 0x74
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	462a      	mov	r2, r5
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <_svfiprintf_r+0x1f8>)
 80063dc:	a904      	add	r1, sp, #16
 80063de:	4638      	mov	r0, r7
 80063e0:	f7fe fa5c 	bl	800489c <_printf_i>
 80063e4:	e7eb      	b.n	80063be <_svfiprintf_r+0x1c2>
 80063e6:	bf00      	nop
 80063e8:	0800730c 	.word	0x0800730c
 80063ec:	08007316 	.word	0x08007316
 80063f0:	08004355 	.word	0x08004355
 80063f4:	08006145 	.word	0x08006145
 80063f8:	08007312 	.word	0x08007312

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_sbrk_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fb f854 	bl	80014b4 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000314 	.word	0x20000314

0800641c <__assert_func>:
 800641c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800641e:	4614      	mov	r4, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <__assert_func+0x2c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4605      	mov	r5, r0
 8006428:	68d8      	ldr	r0, [r3, #12]
 800642a:	b14c      	cbz	r4, 8006440 <__assert_func+0x24>
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <__assert_func+0x30>)
 800642e:	9100      	str	r1, [sp, #0]
 8006430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006434:	4906      	ldr	r1, [pc, #24]	; (8006450 <__assert_func+0x34>)
 8006436:	462b      	mov	r3, r5
 8006438:	f000 f80e 	bl	8006458 <fiprintf>
 800643c:	f000 faac 	bl	8006998 <abort>
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <__assert_func+0x38>)
 8006442:	461c      	mov	r4, r3
 8006444:	e7f3      	b.n	800642e <__assert_func+0x12>
 8006446:	bf00      	nop
 8006448:	2000000c 	.word	0x2000000c
 800644c:	0800731d 	.word	0x0800731d
 8006450:	0800732a 	.word	0x0800732a
 8006454:	08007358 	.word	0x08007358

08006458 <fiprintf>:
 8006458:	b40e      	push	{r1, r2, r3}
 800645a:	b503      	push	{r0, r1, lr}
 800645c:	4601      	mov	r1, r0
 800645e:	ab03      	add	r3, sp, #12
 8006460:	4805      	ldr	r0, [pc, #20]	; (8006478 <fiprintf+0x20>)
 8006462:	f853 2b04 	ldr.w	r2, [r3], #4
 8006466:	6800      	ldr	r0, [r0, #0]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	f000 f897 	bl	800659c <_vfiprintf_r>
 800646e:	b002      	add	sp, #8
 8006470:	f85d eb04 	ldr.w	lr, [sp], #4
 8006474:	b003      	add	sp, #12
 8006476:	4770      	bx	lr
 8006478:	2000000c 	.word	0x2000000c

0800647c <__ascii_mbtowc>:
 800647c:	b082      	sub	sp, #8
 800647e:	b901      	cbnz	r1, 8006482 <__ascii_mbtowc+0x6>
 8006480:	a901      	add	r1, sp, #4
 8006482:	b142      	cbz	r2, 8006496 <__ascii_mbtowc+0x1a>
 8006484:	b14b      	cbz	r3, 800649a <__ascii_mbtowc+0x1e>
 8006486:	7813      	ldrb	r3, [r2, #0]
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	1e10      	subs	r0, r2, #0
 800648e:	bf18      	it	ne
 8006490:	2001      	movne	r0, #1
 8006492:	b002      	add	sp, #8
 8006494:	4770      	bx	lr
 8006496:	4610      	mov	r0, r2
 8006498:	e7fb      	b.n	8006492 <__ascii_mbtowc+0x16>
 800649a:	f06f 0001 	mvn.w	r0, #1
 800649e:	e7f8      	b.n	8006492 <__ascii_mbtowc+0x16>

080064a0 <memmove>:
 80064a0:	4288      	cmp	r0, r1
 80064a2:	b510      	push	{r4, lr}
 80064a4:	eb01 0402 	add.w	r4, r1, r2
 80064a8:	d902      	bls.n	80064b0 <memmove+0x10>
 80064aa:	4284      	cmp	r4, r0
 80064ac:	4623      	mov	r3, r4
 80064ae:	d807      	bhi.n	80064c0 <memmove+0x20>
 80064b0:	1e43      	subs	r3, r0, #1
 80064b2:	42a1      	cmp	r1, r4
 80064b4:	d008      	beq.n	80064c8 <memmove+0x28>
 80064b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064be:	e7f8      	b.n	80064b2 <memmove+0x12>
 80064c0:	4402      	add	r2, r0
 80064c2:	4601      	mov	r1, r0
 80064c4:	428a      	cmp	r2, r1
 80064c6:	d100      	bne.n	80064ca <memmove+0x2a>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064d2:	e7f7      	b.n	80064c4 <memmove+0x24>

080064d4 <__malloc_lock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__malloc_lock+0x8>)
 80064d6:	f000 bc1f 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	20000318 	.word	0x20000318

080064e0 <__malloc_unlock>:
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <__malloc_unlock+0x8>)
 80064e2:	f000 bc1a 	b.w	8006d1a <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	20000318 	.word	0x20000318

080064ec <_realloc_r>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4680      	mov	r8, r0
 80064f2:	4614      	mov	r4, r2
 80064f4:	460e      	mov	r6, r1
 80064f6:	b921      	cbnz	r1, 8006502 <_realloc_r+0x16>
 80064f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fc:	4611      	mov	r1, r2
 80064fe:	f7ff bdad 	b.w	800605c <_malloc_r>
 8006502:	b92a      	cbnz	r2, 8006510 <_realloc_r+0x24>
 8006504:	f7ff fd3e 	bl	8005f84 <_free_r>
 8006508:	4625      	mov	r5, r4
 800650a:	4628      	mov	r0, r5
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	f000 fc6a 	bl	8006de8 <_malloc_usable_size_r>
 8006514:	4284      	cmp	r4, r0
 8006516:	4607      	mov	r7, r0
 8006518:	d802      	bhi.n	8006520 <_realloc_r+0x34>
 800651a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800651e:	d812      	bhi.n	8006546 <_realloc_r+0x5a>
 8006520:	4621      	mov	r1, r4
 8006522:	4640      	mov	r0, r8
 8006524:	f7ff fd9a 	bl	800605c <_malloc_r>
 8006528:	4605      	mov	r5, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	d0ed      	beq.n	800650a <_realloc_r+0x1e>
 800652e:	42bc      	cmp	r4, r7
 8006530:	4622      	mov	r2, r4
 8006532:	4631      	mov	r1, r6
 8006534:	bf28      	it	cs
 8006536:	463a      	movcs	r2, r7
 8006538:	f7ff f97c 	bl	8005834 <memcpy>
 800653c:	4631      	mov	r1, r6
 800653e:	4640      	mov	r0, r8
 8006540:	f7ff fd20 	bl	8005f84 <_free_r>
 8006544:	e7e1      	b.n	800650a <_realloc_r+0x1e>
 8006546:	4635      	mov	r5, r6
 8006548:	e7df      	b.n	800650a <_realloc_r+0x1e>

0800654a <__sfputc_r>:
 800654a:	6893      	ldr	r3, [r2, #8]
 800654c:	3b01      	subs	r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	b410      	push	{r4}
 8006552:	6093      	str	r3, [r2, #8]
 8006554:	da08      	bge.n	8006568 <__sfputc_r+0x1e>
 8006556:	6994      	ldr	r4, [r2, #24]
 8006558:	42a3      	cmp	r3, r4
 800655a:	db01      	blt.n	8006560 <__sfputc_r+0x16>
 800655c:	290a      	cmp	r1, #10
 800655e:	d103      	bne.n	8006568 <__sfputc_r+0x1e>
 8006560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006564:	f000 b94a 	b.w	80067fc <__swbuf_r>
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	1c58      	adds	r0, r3, #1
 800656c:	6010      	str	r0, [r2, #0]
 800656e:	7019      	strb	r1, [r3, #0]
 8006570:	4608      	mov	r0, r1
 8006572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006576:	4770      	bx	lr

08006578 <__sfputs_r>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	4614      	mov	r4, r2
 8006580:	18d5      	adds	r5, r2, r3
 8006582:	42ac      	cmp	r4, r5
 8006584:	d101      	bne.n	800658a <__sfputs_r+0x12>
 8006586:	2000      	movs	r0, #0
 8006588:	e007      	b.n	800659a <__sfputs_r+0x22>
 800658a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658e:	463a      	mov	r2, r7
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff ffda 	bl	800654a <__sfputc_r>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d1f3      	bne.n	8006582 <__sfputs_r+0xa>
 800659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800659c <_vfiprintf_r>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	460d      	mov	r5, r1
 80065a2:	b09d      	sub	sp, #116	; 0x74
 80065a4:	4614      	mov	r4, r2
 80065a6:	4698      	mov	r8, r3
 80065a8:	4606      	mov	r6, r0
 80065aa:	b118      	cbz	r0, 80065b4 <_vfiprintf_r+0x18>
 80065ac:	6983      	ldr	r3, [r0, #24]
 80065ae:	b90b      	cbnz	r3, 80065b4 <_vfiprintf_r+0x18>
 80065b0:	f000 fb14 	bl	8006bdc <__sinit>
 80065b4:	4b89      	ldr	r3, [pc, #548]	; (80067dc <_vfiprintf_r+0x240>)
 80065b6:	429d      	cmp	r5, r3
 80065b8:	d11b      	bne.n	80065f2 <_vfiprintf_r+0x56>
 80065ba:	6875      	ldr	r5, [r6, #4]
 80065bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	d405      	bmi.n	80065ce <_vfiprintf_r+0x32>
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	059a      	lsls	r2, r3, #22
 80065c6:	d402      	bmi.n	80065ce <_vfiprintf_r+0x32>
 80065c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ca:	f000 fba5 	bl	8006d18 <__retarget_lock_acquire_recursive>
 80065ce:	89ab      	ldrh	r3, [r5, #12]
 80065d0:	071b      	lsls	r3, r3, #28
 80065d2:	d501      	bpl.n	80065d8 <_vfiprintf_r+0x3c>
 80065d4:	692b      	ldr	r3, [r5, #16]
 80065d6:	b9eb      	cbnz	r3, 8006614 <_vfiprintf_r+0x78>
 80065d8:	4629      	mov	r1, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	f000 f96e 	bl	80068bc <__swsetup_r>
 80065e0:	b1c0      	cbz	r0, 8006614 <_vfiprintf_r+0x78>
 80065e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e4:	07dc      	lsls	r4, r3, #31
 80065e6:	d50e      	bpl.n	8006606 <_vfiprintf_r+0x6a>
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	b01d      	add	sp, #116	; 0x74
 80065ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f2:	4b7b      	ldr	r3, [pc, #492]	; (80067e0 <_vfiprintf_r+0x244>)
 80065f4:	429d      	cmp	r5, r3
 80065f6:	d101      	bne.n	80065fc <_vfiprintf_r+0x60>
 80065f8:	68b5      	ldr	r5, [r6, #8]
 80065fa:	e7df      	b.n	80065bc <_vfiprintf_r+0x20>
 80065fc:	4b79      	ldr	r3, [pc, #484]	; (80067e4 <_vfiprintf_r+0x248>)
 80065fe:	429d      	cmp	r5, r3
 8006600:	bf08      	it	eq
 8006602:	68f5      	ldreq	r5, [r6, #12]
 8006604:	e7da      	b.n	80065bc <_vfiprintf_r+0x20>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	0598      	lsls	r0, r3, #22
 800660a:	d4ed      	bmi.n	80065e8 <_vfiprintf_r+0x4c>
 800660c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800660e:	f000 fb84 	bl	8006d1a <__retarget_lock_release_recursive>
 8006612:	e7e9      	b.n	80065e8 <_vfiprintf_r+0x4c>
 8006614:	2300      	movs	r3, #0
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	2320      	movs	r3, #32
 800661a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800661e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067e8 <_vfiprintf_r+0x24c>
 8006628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800662c:	f04f 0901 	mov.w	r9, #1
 8006630:	4623      	mov	r3, r4
 8006632:	469a      	mov	sl, r3
 8006634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006638:	b10a      	cbz	r2, 800663e <_vfiprintf_r+0xa2>
 800663a:	2a25      	cmp	r2, #37	; 0x25
 800663c:	d1f9      	bne.n	8006632 <_vfiprintf_r+0x96>
 800663e:	ebba 0b04 	subs.w	fp, sl, r4
 8006642:	d00b      	beq.n	800665c <_vfiprintf_r+0xc0>
 8006644:	465b      	mov	r3, fp
 8006646:	4622      	mov	r2, r4
 8006648:	4629      	mov	r1, r5
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff ff94 	bl	8006578 <__sfputs_r>
 8006650:	3001      	adds	r0, #1
 8006652:	f000 80aa 	beq.w	80067aa <_vfiprintf_r+0x20e>
 8006656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006658:	445a      	add	r2, fp
 800665a:	9209      	str	r2, [sp, #36]	; 0x24
 800665c:	f89a 3000 	ldrb.w	r3, [sl]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80a2 	beq.w	80067aa <_vfiprintf_r+0x20e>
 8006666:	2300      	movs	r3, #0
 8006668:	f04f 32ff 	mov.w	r2, #4294967295
 800666c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006670:	f10a 0a01 	add.w	sl, sl, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	9307      	str	r3, [sp, #28]
 8006678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800667c:	931a      	str	r3, [sp, #104]	; 0x68
 800667e:	4654      	mov	r4, sl
 8006680:	2205      	movs	r2, #5
 8006682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006686:	4858      	ldr	r0, [pc, #352]	; (80067e8 <_vfiprintf_r+0x24c>)
 8006688:	f7f9 fdda 	bl	8000240 <memchr>
 800668c:	9a04      	ldr	r2, [sp, #16]
 800668e:	b9d8      	cbnz	r0, 80066c8 <_vfiprintf_r+0x12c>
 8006690:	06d1      	lsls	r1, r2, #27
 8006692:	bf44      	itt	mi
 8006694:	2320      	movmi	r3, #32
 8006696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669a:	0713      	lsls	r3, r2, #28
 800669c:	bf44      	itt	mi
 800669e:	232b      	movmi	r3, #43	; 0x2b
 80066a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a4:	f89a 3000 	ldrb.w	r3, [sl]
 80066a8:	2b2a      	cmp	r3, #42	; 0x2a
 80066aa:	d015      	beq.n	80066d8 <_vfiprintf_r+0x13c>
 80066ac:	9a07      	ldr	r2, [sp, #28]
 80066ae:	4654      	mov	r4, sl
 80066b0:	2000      	movs	r0, #0
 80066b2:	f04f 0c0a 	mov.w	ip, #10
 80066b6:	4621      	mov	r1, r4
 80066b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066bc:	3b30      	subs	r3, #48	; 0x30
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d94e      	bls.n	8006760 <_vfiprintf_r+0x1c4>
 80066c2:	b1b0      	cbz	r0, 80066f2 <_vfiprintf_r+0x156>
 80066c4:	9207      	str	r2, [sp, #28]
 80066c6:	e014      	b.n	80066f2 <_vfiprintf_r+0x156>
 80066c8:	eba0 0308 	sub.w	r3, r0, r8
 80066cc:	fa09 f303 	lsl.w	r3, r9, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	46a2      	mov	sl, r4
 80066d6:	e7d2      	b.n	800667e <_vfiprintf_r+0xe2>
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	1d19      	adds	r1, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9103      	str	r1, [sp, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bfbb      	ittet	lt
 80066e4:	425b      	neglt	r3, r3
 80066e6:	f042 0202 	orrlt.w	r2, r2, #2
 80066ea:	9307      	strge	r3, [sp, #28]
 80066ec:	9307      	strlt	r3, [sp, #28]
 80066ee:	bfb8      	it	lt
 80066f0:	9204      	strlt	r2, [sp, #16]
 80066f2:	7823      	ldrb	r3, [r4, #0]
 80066f4:	2b2e      	cmp	r3, #46	; 0x2e
 80066f6:	d10c      	bne.n	8006712 <_vfiprintf_r+0x176>
 80066f8:	7863      	ldrb	r3, [r4, #1]
 80066fa:	2b2a      	cmp	r3, #42	; 0x2a
 80066fc:	d135      	bne.n	800676a <_vfiprintf_r+0x1ce>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9203      	str	r2, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfb8      	it	lt
 800670a:	f04f 33ff 	movlt.w	r3, #4294967295
 800670e:	3402      	adds	r4, #2
 8006710:	9305      	str	r3, [sp, #20]
 8006712:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067f8 <_vfiprintf_r+0x25c>
 8006716:	7821      	ldrb	r1, [r4, #0]
 8006718:	2203      	movs	r2, #3
 800671a:	4650      	mov	r0, sl
 800671c:	f7f9 fd90 	bl	8000240 <memchr>
 8006720:	b140      	cbz	r0, 8006734 <_vfiprintf_r+0x198>
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	eba0 000a 	sub.w	r0, r0, sl
 8006728:	fa03 f000 	lsl.w	r0, r3, r0
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	4303      	orrs	r3, r0
 8006730:	3401      	adds	r4, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006738:	482c      	ldr	r0, [pc, #176]	; (80067ec <_vfiprintf_r+0x250>)
 800673a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800673e:	2206      	movs	r2, #6
 8006740:	f7f9 fd7e 	bl	8000240 <memchr>
 8006744:	2800      	cmp	r0, #0
 8006746:	d03f      	beq.n	80067c8 <_vfiprintf_r+0x22c>
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <_vfiprintf_r+0x254>)
 800674a:	bb1b      	cbnz	r3, 8006794 <_vfiprintf_r+0x1f8>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	3307      	adds	r3, #7
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	3308      	adds	r3, #8
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	443b      	add	r3, r7
 800675c:	9309      	str	r3, [sp, #36]	; 0x24
 800675e:	e767      	b.n	8006630 <_vfiprintf_r+0x94>
 8006760:	fb0c 3202 	mla	r2, ip, r2, r3
 8006764:	460c      	mov	r4, r1
 8006766:	2001      	movs	r0, #1
 8006768:	e7a5      	b.n	80066b6 <_vfiprintf_r+0x11a>
 800676a:	2300      	movs	r3, #0
 800676c:	3401      	adds	r4, #1
 800676e:	9305      	str	r3, [sp, #20]
 8006770:	4619      	mov	r1, r3
 8006772:	f04f 0c0a 	mov.w	ip, #10
 8006776:	4620      	mov	r0, r4
 8006778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677c:	3a30      	subs	r2, #48	; 0x30
 800677e:	2a09      	cmp	r2, #9
 8006780:	d903      	bls.n	800678a <_vfiprintf_r+0x1ee>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0c5      	beq.n	8006712 <_vfiprintf_r+0x176>
 8006786:	9105      	str	r1, [sp, #20]
 8006788:	e7c3      	b.n	8006712 <_vfiprintf_r+0x176>
 800678a:	fb0c 2101 	mla	r1, ip, r1, r2
 800678e:	4604      	mov	r4, r0
 8006790:	2301      	movs	r3, #1
 8006792:	e7f0      	b.n	8006776 <_vfiprintf_r+0x1da>
 8006794:	ab03      	add	r3, sp, #12
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	462a      	mov	r2, r5
 800679a:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <_vfiprintf_r+0x258>)
 800679c:	a904      	add	r1, sp, #16
 800679e:	4630      	mov	r0, r6
 80067a0:	f7fd fdd8 	bl	8004354 <_printf_float>
 80067a4:	4607      	mov	r7, r0
 80067a6:	1c78      	adds	r0, r7, #1
 80067a8:	d1d6      	bne.n	8006758 <_vfiprintf_r+0x1bc>
 80067aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ac:	07d9      	lsls	r1, r3, #31
 80067ae:	d405      	bmi.n	80067bc <_vfiprintf_r+0x220>
 80067b0:	89ab      	ldrh	r3, [r5, #12]
 80067b2:	059a      	lsls	r2, r3, #22
 80067b4:	d402      	bmi.n	80067bc <_vfiprintf_r+0x220>
 80067b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b8:	f000 faaf 	bl	8006d1a <__retarget_lock_release_recursive>
 80067bc:	89ab      	ldrh	r3, [r5, #12]
 80067be:	065b      	lsls	r3, r3, #25
 80067c0:	f53f af12 	bmi.w	80065e8 <_vfiprintf_r+0x4c>
 80067c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c6:	e711      	b.n	80065ec <_vfiprintf_r+0x50>
 80067c8:	ab03      	add	r3, sp, #12
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	462a      	mov	r2, r5
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <_vfiprintf_r+0x258>)
 80067d0:	a904      	add	r1, sp, #16
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7fe f862 	bl	800489c <_printf_i>
 80067d8:	e7e4      	b.n	80067a4 <_vfiprintf_r+0x208>
 80067da:	bf00      	nop
 80067dc:	08007484 	.word	0x08007484
 80067e0:	080074a4 	.word	0x080074a4
 80067e4:	08007464 	.word	0x08007464
 80067e8:	0800730c 	.word	0x0800730c
 80067ec:	08007316 	.word	0x08007316
 80067f0:	08004355 	.word	0x08004355
 80067f4:	08006579 	.word	0x08006579
 80067f8:	08007312 	.word	0x08007312

080067fc <__swbuf_r>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	460e      	mov	r6, r1
 8006800:	4614      	mov	r4, r2
 8006802:	4605      	mov	r5, r0
 8006804:	b118      	cbz	r0, 800680e <__swbuf_r+0x12>
 8006806:	6983      	ldr	r3, [r0, #24]
 8006808:	b90b      	cbnz	r3, 800680e <__swbuf_r+0x12>
 800680a:	f000 f9e7 	bl	8006bdc <__sinit>
 800680e:	4b21      	ldr	r3, [pc, #132]	; (8006894 <__swbuf_r+0x98>)
 8006810:	429c      	cmp	r4, r3
 8006812:	d12b      	bne.n	800686c <__swbuf_r+0x70>
 8006814:	686c      	ldr	r4, [r5, #4]
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	071a      	lsls	r2, r3, #28
 800681e:	d52f      	bpl.n	8006880 <__swbuf_r+0x84>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b36b      	cbz	r3, 8006880 <__swbuf_r+0x84>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	1ac0      	subs	r0, r0, r3
 800682a:	6963      	ldr	r3, [r4, #20]
 800682c:	b2f6      	uxtb	r6, r6
 800682e:	4283      	cmp	r3, r0
 8006830:	4637      	mov	r7, r6
 8006832:	dc04      	bgt.n	800683e <__swbuf_r+0x42>
 8006834:	4621      	mov	r1, r4
 8006836:	4628      	mov	r0, r5
 8006838:	f000 f93c 	bl	8006ab4 <_fflush_r>
 800683c:	bb30      	cbnz	r0, 800688c <__swbuf_r+0x90>
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	3b01      	subs	r3, #1
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	701e      	strb	r6, [r3, #0]
 800684c:	6963      	ldr	r3, [r4, #20]
 800684e:	3001      	adds	r0, #1
 8006850:	4283      	cmp	r3, r0
 8006852:	d004      	beq.n	800685e <__swbuf_r+0x62>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d506      	bpl.n	8006868 <__swbuf_r+0x6c>
 800685a:	2e0a      	cmp	r6, #10
 800685c:	d104      	bne.n	8006868 <__swbuf_r+0x6c>
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f927 	bl	8006ab4 <_fflush_r>
 8006866:	b988      	cbnz	r0, 800688c <__swbuf_r+0x90>
 8006868:	4638      	mov	r0, r7
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <__swbuf_r+0x9c>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d101      	bne.n	8006876 <__swbuf_r+0x7a>
 8006872:	68ac      	ldr	r4, [r5, #8]
 8006874:	e7cf      	b.n	8006816 <__swbuf_r+0x1a>
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <__swbuf_r+0xa0>)
 8006878:	429c      	cmp	r4, r3
 800687a:	bf08      	it	eq
 800687c:	68ec      	ldreq	r4, [r5, #12]
 800687e:	e7ca      	b.n	8006816 <__swbuf_r+0x1a>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f81a 	bl	80068bc <__swsetup_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d0cb      	beq.n	8006824 <__swbuf_r+0x28>
 800688c:	f04f 37ff 	mov.w	r7, #4294967295
 8006890:	e7ea      	b.n	8006868 <__swbuf_r+0x6c>
 8006892:	bf00      	nop
 8006894:	08007484 	.word	0x08007484
 8006898:	080074a4 	.word	0x080074a4
 800689c:	08007464 	.word	0x08007464

080068a0 <__ascii_wctomb>:
 80068a0:	b149      	cbz	r1, 80068b6 <__ascii_wctomb+0x16>
 80068a2:	2aff      	cmp	r2, #255	; 0xff
 80068a4:	bf85      	ittet	hi
 80068a6:	238a      	movhi	r3, #138	; 0x8a
 80068a8:	6003      	strhi	r3, [r0, #0]
 80068aa:	700a      	strbls	r2, [r1, #0]
 80068ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80068b0:	bf98      	it	ls
 80068b2:	2001      	movls	r0, #1
 80068b4:	4770      	bx	lr
 80068b6:	4608      	mov	r0, r1
 80068b8:	4770      	bx	lr
	...

080068bc <__swsetup_r>:
 80068bc:	4b32      	ldr	r3, [pc, #200]	; (8006988 <__swsetup_r+0xcc>)
 80068be:	b570      	push	{r4, r5, r6, lr}
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	4606      	mov	r6, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	b125      	cbz	r5, 80068d2 <__swsetup_r+0x16>
 80068c8:	69ab      	ldr	r3, [r5, #24]
 80068ca:	b913      	cbnz	r3, 80068d2 <__swsetup_r+0x16>
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 f985 	bl	8006bdc <__sinit>
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <__swsetup_r+0xd0>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d10f      	bne.n	80068f8 <__swsetup_r+0x3c>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e0:	0719      	lsls	r1, r3, #28
 80068e2:	d42c      	bmi.n	800693e <__swsetup_r+0x82>
 80068e4:	06dd      	lsls	r5, r3, #27
 80068e6:	d411      	bmi.n	800690c <__swsetup_r+0x50>
 80068e8:	2309      	movs	r3, #9
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	e03e      	b.n	8006976 <__swsetup_r+0xba>
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <__swsetup_r+0xd4>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d101      	bne.n	8006902 <__swsetup_r+0x46>
 80068fe:	68ac      	ldr	r4, [r5, #8]
 8006900:	e7eb      	b.n	80068da <__swsetup_r+0x1e>
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <__swsetup_r+0xd8>)
 8006904:	429c      	cmp	r4, r3
 8006906:	bf08      	it	eq
 8006908:	68ec      	ldreq	r4, [r5, #12]
 800690a:	e7e6      	b.n	80068da <__swsetup_r+0x1e>
 800690c:	0758      	lsls	r0, r3, #29
 800690e:	d512      	bpl.n	8006936 <__swsetup_r+0x7a>
 8006910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006912:	b141      	cbz	r1, 8006926 <__swsetup_r+0x6a>
 8006914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006918:	4299      	cmp	r1, r3
 800691a:	d002      	beq.n	8006922 <__swsetup_r+0x66>
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff fb31 	bl	8005f84 <_free_r>
 8006922:	2300      	movs	r3, #0
 8006924:	6363      	str	r3, [r4, #52]	; 0x34
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	2300      	movs	r3, #0
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f043 0308 	orr.w	r3, r3, #8
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	b94b      	cbnz	r3, 8006956 <__swsetup_r+0x9a>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694c:	d003      	beq.n	8006956 <__swsetup_r+0x9a>
 800694e:	4621      	mov	r1, r4
 8006950:	4630      	mov	r0, r6
 8006952:	f000 fa09 	bl	8006d68 <__smakebuf_r>
 8006956:	89a0      	ldrh	r0, [r4, #12]
 8006958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800695c:	f010 0301 	ands.w	r3, r0, #1
 8006960:	d00a      	beq.n	8006978 <__swsetup_r+0xbc>
 8006962:	2300      	movs	r3, #0
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	425b      	negs	r3, r3
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	b943      	cbnz	r3, 8006982 <__swsetup_r+0xc6>
 8006970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006974:	d1ba      	bne.n	80068ec <__swsetup_r+0x30>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	0781      	lsls	r1, r0, #30
 800697a:	bf58      	it	pl
 800697c:	6963      	ldrpl	r3, [r4, #20]
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	e7f4      	b.n	800696c <__swsetup_r+0xb0>
 8006982:	2000      	movs	r0, #0
 8006984:	e7f7      	b.n	8006976 <__swsetup_r+0xba>
 8006986:	bf00      	nop
 8006988:	2000000c 	.word	0x2000000c
 800698c:	08007484 	.word	0x08007484
 8006990:	080074a4 	.word	0x080074a4
 8006994:	08007464 	.word	0x08007464

08006998 <abort>:
 8006998:	b508      	push	{r3, lr}
 800699a:	2006      	movs	r0, #6
 800699c:	f000 fa54 	bl	8006e48 <raise>
 80069a0:	2001      	movs	r0, #1
 80069a2:	f7fa fd0f 	bl	80013c4 <_exit>
	...

080069a8 <__sflush_r>:
 80069a8:	898a      	ldrh	r2, [r1, #12]
 80069aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ae:	4605      	mov	r5, r0
 80069b0:	0710      	lsls	r0, r2, #28
 80069b2:	460c      	mov	r4, r1
 80069b4:	d458      	bmi.n	8006a68 <__sflush_r+0xc0>
 80069b6:	684b      	ldr	r3, [r1, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dc05      	bgt.n	80069c8 <__sflush_r+0x20>
 80069bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dc02      	bgt.n	80069c8 <__sflush_r+0x20>
 80069c2:	2000      	movs	r0, #0
 80069c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d0f9      	beq.n	80069c2 <__sflush_r+0x1a>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d4:	682f      	ldr	r7, [r5, #0]
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	d032      	beq.n	8006a40 <__sflush_r+0x98>
 80069da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	075a      	lsls	r2, r3, #29
 80069e0:	d505      	bpl.n	80069ee <__sflush_r+0x46>
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	1ac0      	subs	r0, r0, r3
 80069e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069e8:	b10b      	cbz	r3, 80069ee <__sflush_r+0x46>
 80069ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ec:	1ac0      	subs	r0, r0, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	4602      	mov	r2, r0
 80069f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f4:	6a21      	ldr	r1, [r4, #32]
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b0      	blx	r6
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	d106      	bne.n	8006a0e <__sflush_r+0x66>
 8006a00:	6829      	ldr	r1, [r5, #0]
 8006a02:	291d      	cmp	r1, #29
 8006a04:	d82c      	bhi.n	8006a60 <__sflush_r+0xb8>
 8006a06:	4a2a      	ldr	r2, [pc, #168]	; (8006ab0 <__sflush_r+0x108>)
 8006a08:	40ca      	lsrs	r2, r1
 8006a0a:	07d6      	lsls	r6, r2, #31
 8006a0c:	d528      	bpl.n	8006a60 <__sflush_r+0xb8>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	6062      	str	r2, [r4, #4]
 8006a12:	04d9      	lsls	r1, r3, #19
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	6022      	str	r2, [r4, #0]
 8006a18:	d504      	bpl.n	8006a24 <__sflush_r+0x7c>
 8006a1a:	1c42      	adds	r2, r0, #1
 8006a1c:	d101      	bne.n	8006a22 <__sflush_r+0x7a>
 8006a1e:	682b      	ldr	r3, [r5, #0]
 8006a20:	b903      	cbnz	r3, 8006a24 <__sflush_r+0x7c>
 8006a22:	6560      	str	r0, [r4, #84]	; 0x54
 8006a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a26:	602f      	str	r7, [r5, #0]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d0ca      	beq.n	80069c2 <__sflush_r+0x1a>
 8006a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a30:	4299      	cmp	r1, r3
 8006a32:	d002      	beq.n	8006a3a <__sflush_r+0x92>
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff faa5 	bl	8005f84 <_free_r>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a3e:	e7c1      	b.n	80069c4 <__sflush_r+0x1c>
 8006a40:	6a21      	ldr	r1, [r4, #32]
 8006a42:	2301      	movs	r3, #1
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b0      	blx	r6
 8006a48:	1c41      	adds	r1, r0, #1
 8006a4a:	d1c7      	bne.n	80069dc <__sflush_r+0x34>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c4      	beq.n	80069dc <__sflush_r+0x34>
 8006a52:	2b1d      	cmp	r3, #29
 8006a54:	d001      	beq.n	8006a5a <__sflush_r+0xb2>
 8006a56:	2b16      	cmp	r3, #22
 8006a58:	d101      	bne.n	8006a5e <__sflush_r+0xb6>
 8006a5a:	602f      	str	r7, [r5, #0]
 8006a5c:	e7b1      	b.n	80069c2 <__sflush_r+0x1a>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	e7ad      	b.n	80069c4 <__sflush_r+0x1c>
 8006a68:	690f      	ldr	r7, [r1, #16]
 8006a6a:	2f00      	cmp	r7, #0
 8006a6c:	d0a9      	beq.n	80069c2 <__sflush_r+0x1a>
 8006a6e:	0793      	lsls	r3, r2, #30
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	bf08      	it	eq
 8006a74:	694b      	ldreq	r3, [r1, #20]
 8006a76:	600f      	str	r7, [r1, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	eba6 0807 	sub.w	r8, r6, r7
 8006a80:	608b      	str	r3, [r1, #8]
 8006a82:	f1b8 0f00 	cmp.w	r8, #0
 8006a86:	dd9c      	ble.n	80069c2 <__sflush_r+0x1a>
 8006a88:	6a21      	ldr	r1, [r4, #32]
 8006a8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a8c:	4643      	mov	r3, r8
 8006a8e:	463a      	mov	r2, r7
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b0      	blx	r6
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dc06      	bgt.n	8006aa6 <__sflush_r+0xfe>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	e78e      	b.n	80069c4 <__sflush_r+0x1c>
 8006aa6:	4407      	add	r7, r0
 8006aa8:	eba8 0800 	sub.w	r8, r8, r0
 8006aac:	e7e9      	b.n	8006a82 <__sflush_r+0xda>
 8006aae:	bf00      	nop
 8006ab0:	20400001 	.word	0x20400001

08006ab4 <_fflush_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	b913      	cbnz	r3, 8006ac4 <_fflush_r+0x10>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	b118      	cbz	r0, 8006ace <_fflush_r+0x1a>
 8006ac6:	6983      	ldr	r3, [r0, #24]
 8006ac8:	b90b      	cbnz	r3, 8006ace <_fflush_r+0x1a>
 8006aca:	f000 f887 	bl	8006bdc <__sinit>
 8006ace:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <_fflush_r+0x6c>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	d11b      	bne.n	8006b0c <_fflush_r+0x58>
 8006ad4:	686c      	ldr	r4, [r5, #4]
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0ef      	beq.n	8006abe <_fflush_r+0xa>
 8006ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae0:	07d0      	lsls	r0, r2, #31
 8006ae2:	d404      	bmi.n	8006aee <_fflush_r+0x3a>
 8006ae4:	0599      	lsls	r1, r3, #22
 8006ae6:	d402      	bmi.n	8006aee <_fflush_r+0x3a>
 8006ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aea:	f000 f915 	bl	8006d18 <__retarget_lock_acquire_recursive>
 8006aee:	4628      	mov	r0, r5
 8006af0:	4621      	mov	r1, r4
 8006af2:	f7ff ff59 	bl	80069a8 <__sflush_r>
 8006af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af8:	07da      	lsls	r2, r3, #31
 8006afa:	4605      	mov	r5, r0
 8006afc:	d4e0      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	059b      	lsls	r3, r3, #22
 8006b02:	d4dd      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b06:	f000 f908 	bl	8006d1a <__retarget_lock_release_recursive>
 8006b0a:	e7d9      	b.n	8006ac0 <_fflush_r+0xc>
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <_fflush_r+0x70>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d101      	bne.n	8006b16 <_fflush_r+0x62>
 8006b12:	68ac      	ldr	r4, [r5, #8]
 8006b14:	e7df      	b.n	8006ad6 <_fflush_r+0x22>
 8006b16:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <_fflush_r+0x74>)
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	bf08      	it	eq
 8006b1c:	68ec      	ldreq	r4, [r5, #12]
 8006b1e:	e7da      	b.n	8006ad6 <_fflush_r+0x22>
 8006b20:	08007484 	.word	0x08007484
 8006b24:	080074a4 	.word	0x080074a4
 8006b28:	08007464 	.word	0x08007464

08006b2c <std>:
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	e9c0 3300 	strd	r3, r3, [r0]
 8006b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3a:	6083      	str	r3, [r0, #8]
 8006b3c:	8181      	strh	r1, [r0, #12]
 8006b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b40:	81c2      	strh	r2, [r0, #14]
 8006b42:	6183      	str	r3, [r0, #24]
 8006b44:	4619      	mov	r1, r3
 8006b46:	2208      	movs	r2, #8
 8006b48:	305c      	adds	r0, #92	; 0x5c
 8006b4a:	f7fd fb5b 	bl	8004204 <memset>
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <std+0x38>)
 8006b50:	6263      	str	r3, [r4, #36]	; 0x24
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <std+0x3c>)
 8006b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <std+0x40>)
 8006b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <std+0x44>)
 8006b5c:	6224      	str	r4, [r4, #32]
 8006b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b60:	bd10      	pop	{r4, pc}
 8006b62:	bf00      	nop
 8006b64:	08006e81 	.word	0x08006e81
 8006b68:	08006ea3 	.word	0x08006ea3
 8006b6c:	08006edb 	.word	0x08006edb
 8006b70:	08006eff 	.word	0x08006eff

08006b74 <_cleanup_r>:
 8006b74:	4901      	ldr	r1, [pc, #4]	; (8006b7c <_cleanup_r+0x8>)
 8006b76:	f000 b8af 	b.w	8006cd8 <_fwalk_reent>
 8006b7a:	bf00      	nop
 8006b7c:	08006ab5 	.word	0x08006ab5

08006b80 <__sfmoreglue>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	2268      	movs	r2, #104	; 0x68
 8006b84:	1e4d      	subs	r5, r1, #1
 8006b86:	4355      	muls	r5, r2
 8006b88:	460e      	mov	r6, r1
 8006b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b8e:	f7ff fa65 	bl	800605c <_malloc_r>
 8006b92:	4604      	mov	r4, r0
 8006b94:	b140      	cbz	r0, 8006ba8 <__sfmoreglue+0x28>
 8006b96:	2100      	movs	r1, #0
 8006b98:	e9c0 1600 	strd	r1, r6, [r0]
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	60a0      	str	r0, [r4, #8]
 8006ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ba4:	f7fd fb2e 	bl	8004204 <memset>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	bd70      	pop	{r4, r5, r6, pc}

08006bac <__sfp_lock_acquire>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__sfp_lock_acquire+0x8>)
 8006bae:	f000 b8b3 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000319 	.word	0x20000319

08006bb8 <__sfp_lock_release>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__sfp_lock_release+0x8>)
 8006bba:	f000 b8ae 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20000319 	.word	0x20000319

08006bc4 <__sinit_lock_acquire>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__sinit_lock_acquire+0x8>)
 8006bc6:	f000 b8a7 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	2000031a 	.word	0x2000031a

08006bd0 <__sinit_lock_release>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sinit_lock_release+0x8>)
 8006bd2:	f000 b8a2 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	2000031a 	.word	0x2000031a

08006bdc <__sinit>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	f7ff fff0 	bl	8006bc4 <__sinit_lock_acquire>
 8006be4:	69a3      	ldr	r3, [r4, #24]
 8006be6:	b11b      	cbz	r3, 8006bf0 <__sinit+0x14>
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f7ff bff0 	b.w	8006bd0 <__sinit_lock_release>
 8006bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <__sinit+0x68>)
 8006bf8:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <__sinit+0x6c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	bf04      	itt	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	61a3      	streq	r3, [r4, #24]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f820 	bl	8006c4c <__sfp>
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 f81c 	bl	8006c4c <__sfp>
 8006c14:	60a0      	str	r0, [r4, #8]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f818 	bl	8006c4c <__sfp>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	60e0      	str	r0, [r4, #12]
 8006c20:	2104      	movs	r1, #4
 8006c22:	6860      	ldr	r0, [r4, #4]
 8006c24:	f7ff ff82 	bl	8006b2c <std>
 8006c28:	68a0      	ldr	r0, [r4, #8]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	2109      	movs	r1, #9
 8006c2e:	f7ff ff7d 	bl	8006b2c <std>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	2202      	movs	r2, #2
 8006c36:	2112      	movs	r1, #18
 8006c38:	f7ff ff78 	bl	8006b2c <std>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61a3      	str	r3, [r4, #24]
 8006c40:	e7d2      	b.n	8006be8 <__sinit+0xc>
 8006c42:	bf00      	nop
 8006c44:	080070e8 	.word	0x080070e8
 8006c48:	08006b75 	.word	0x08006b75

08006c4c <__sfp>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	4607      	mov	r7, r0
 8006c50:	f7ff ffac 	bl	8006bac <__sfp_lock_acquire>
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <__sfp+0x84>)
 8006c56:	681e      	ldr	r6, [r3, #0]
 8006c58:	69b3      	ldr	r3, [r6, #24]
 8006c5a:	b913      	cbnz	r3, 8006c62 <__sfp+0x16>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ffbd 	bl	8006bdc <__sinit>
 8006c62:	3648      	adds	r6, #72	; 0x48
 8006c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	d503      	bpl.n	8006c74 <__sfp+0x28>
 8006c6c:	6833      	ldr	r3, [r6, #0]
 8006c6e:	b30b      	cbz	r3, 8006cb4 <__sfp+0x68>
 8006c70:	6836      	ldr	r6, [r6, #0]
 8006c72:	e7f7      	b.n	8006c64 <__sfp+0x18>
 8006c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c78:	b9d5      	cbnz	r5, 8006cb0 <__sfp+0x64>
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <__sfp+0x88>)
 8006c7c:	60e3      	str	r3, [r4, #12]
 8006c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c82:	6665      	str	r5, [r4, #100]	; 0x64
 8006c84:	f000 f847 	bl	8006d16 <__retarget_lock_init_recursive>
 8006c88:	f7ff ff96 	bl	8006bb8 <__sfp_lock_release>
 8006c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c94:	6025      	str	r5, [r4, #0]
 8006c96:	61a5      	str	r5, [r4, #24]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ca0:	f7fd fab0 	bl	8004204 <memset>
 8006ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cac:	4620      	mov	r0, r4
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	3468      	adds	r4, #104	; 0x68
 8006cb2:	e7d9      	b.n	8006c68 <__sfp+0x1c>
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ff62 	bl	8006b80 <__sfmoreglue>
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	6030      	str	r0, [r6, #0]
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1d5      	bne.n	8006c70 <__sfp+0x24>
 8006cc4:	f7ff ff78 	bl	8006bb8 <__sfp_lock_release>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	e7ee      	b.n	8006cac <__sfp+0x60>
 8006cce:	bf00      	nop
 8006cd0:	080070e8 	.word	0x080070e8
 8006cd4:	ffff0001 	.word	0xffff0001

08006cd8 <_fwalk_reent>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4606      	mov	r6, r0
 8006cde:	4688      	mov	r8, r1
 8006ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cea:	f1b9 0901 	subs.w	r9, r9, #1
 8006cee:	d505      	bpl.n	8006cfc <_fwalk_reent+0x24>
 8006cf0:	6824      	ldr	r4, [r4, #0]
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d1f7      	bne.n	8006ce6 <_fwalk_reent+0xe>
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfc:	89ab      	ldrh	r3, [r5, #12]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d907      	bls.n	8006d12 <_fwalk_reent+0x3a>
 8006d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d06:	3301      	adds	r3, #1
 8006d08:	d003      	beq.n	8006d12 <_fwalk_reent+0x3a>
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	47c0      	blx	r8
 8006d10:	4307      	orrs	r7, r0
 8006d12:	3568      	adds	r5, #104	; 0x68
 8006d14:	e7e9      	b.n	8006cea <_fwalk_reent+0x12>

08006d16 <__retarget_lock_init_recursive>:
 8006d16:	4770      	bx	lr

08006d18 <__retarget_lock_acquire_recursive>:
 8006d18:	4770      	bx	lr

08006d1a <__retarget_lock_release_recursive>:
 8006d1a:	4770      	bx	lr

08006d1c <__swhatbuf_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	460e      	mov	r6, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	da08      	bge.n	8006d40 <__swhatbuf_r+0x24>
 8006d2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	602a      	str	r2, [r5, #0]
 8006d36:	061a      	lsls	r2, r3, #24
 8006d38:	d410      	bmi.n	8006d5c <__swhatbuf_r+0x40>
 8006d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3e:	e00e      	b.n	8006d5e <__swhatbuf_r+0x42>
 8006d40:	466a      	mov	r2, sp
 8006d42:	f000 f903 	bl	8006f4c <_fstat_r>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dbf1      	blt.n	8006d2e <__swhatbuf_r+0x12>
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d54:	425a      	negs	r2, r3
 8006d56:	415a      	adcs	r2, r3
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	e7ee      	b.n	8006d3a <__swhatbuf_r+0x1e>
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2000      	movs	r0, #0
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	b016      	add	sp, #88	; 0x58
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffc8 	bl	8006d1c <__swhatbuf_r>
 8006d8c:	9900      	ldr	r1, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff f963 	bl	800605c <_malloc_r>
 8006d96:	b948      	cbnz	r0, 8006dac <__smakebuf_r+0x44>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d4ef      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e7e3      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <__smakebuf_r+0x7c>)
 8006dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	6020      	str	r0, [r4, #0]
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	6120      	str	r0, [r4, #16]
 8006dc2:	b15b      	cbz	r3, 8006ddc <__smakebuf_r+0x74>
 8006dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f8d1 	bl	8006f70 <_isatty_r>
 8006dce:	b128      	cbz	r0, 8006ddc <__smakebuf_r+0x74>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	89a0      	ldrh	r0, [r4, #12]
 8006dde:	4305      	orrs	r5, r0
 8006de0:	81a5      	strh	r5, [r4, #12]
 8006de2:	e7cd      	b.n	8006d80 <__smakebuf_r+0x18>
 8006de4:	08006b75 	.word	0x08006b75

08006de8 <_malloc_usable_size_r>:
 8006de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dec:	1f18      	subs	r0, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbc      	itt	lt
 8006df2:	580b      	ldrlt	r3, [r1, r0]
 8006df4:	18c0      	addlt	r0, r0, r3
 8006df6:	4770      	bx	lr

08006df8 <_raise_r>:
 8006df8:	291f      	cmp	r1, #31
 8006dfa:	b538      	push	{r3, r4, r5, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	460d      	mov	r5, r1
 8006e00:	d904      	bls.n	8006e0c <_raise_r+0x14>
 8006e02:	2316      	movs	r3, #22
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e0e:	b112      	cbz	r2, 8006e16 <_raise_r+0x1e>
 8006e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e14:	b94b      	cbnz	r3, 8006e2a <_raise_r+0x32>
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 f830 	bl	8006e7c <_getpid_r>
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4620      	mov	r0, r4
 8006e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e26:	f000 b817 	b.w	8006e58 <_kill_r>
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d00a      	beq.n	8006e44 <_raise_r+0x4c>
 8006e2e:	1c59      	adds	r1, r3, #1
 8006e30:	d103      	bne.n	8006e3a <_raise_r+0x42>
 8006e32:	2316      	movs	r3, #22
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	2001      	movs	r0, #1
 8006e38:	e7e7      	b.n	8006e0a <_raise_r+0x12>
 8006e3a:	2400      	movs	r4, #0
 8006e3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e40:	4628      	mov	r0, r5
 8006e42:	4798      	blx	r3
 8006e44:	2000      	movs	r0, #0
 8006e46:	e7e0      	b.n	8006e0a <_raise_r+0x12>

08006e48 <raise>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <raise+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f7ff bfd3 	b.w	8006df8 <_raise_r>
 8006e52:	bf00      	nop
 8006e54:	2000000c 	.word	0x2000000c

08006e58 <_kill_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d07      	ldr	r5, [pc, #28]	; (8006e78 <_kill_r+0x20>)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	f7fa fa9d 	bl	80013a4 <_kill>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d102      	bne.n	8006e74 <_kill_r+0x1c>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b103      	cbz	r3, 8006e74 <_kill_r+0x1c>
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	bd38      	pop	{r3, r4, r5, pc}
 8006e76:	bf00      	nop
 8006e78:	20000314 	.word	0x20000314

08006e7c <_getpid_r>:
 8006e7c:	f7fa ba8a 	b.w	8001394 <_getpid>

08006e80 <__sread>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	f000 f894 	bl	8006fb4 <_read_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	bfab      	itete	ge
 8006e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e92:	89a3      	ldrhlt	r3, [r4, #12]
 8006e94:	181b      	addge	r3, r3, r0
 8006e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e9a:	bfac      	ite	ge
 8006e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e9e:	81a3      	strhlt	r3, [r4, #12]
 8006ea0:	bd10      	pop	{r4, pc}

08006ea2 <__swrite>:
 8006ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	461f      	mov	r7, r3
 8006ea8:	898b      	ldrh	r3, [r1, #12]
 8006eaa:	05db      	lsls	r3, r3, #23
 8006eac:	4605      	mov	r5, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	d505      	bpl.n	8006ec0 <__swrite+0x1e>
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	2302      	movs	r3, #2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f000 f868 	bl	8006f90 <_lseek_r>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	f000 b817 	b.w	8006f08 <_write_r>

08006eda <__sseek>:
 8006eda:	b510      	push	{r4, lr}
 8006edc:	460c      	mov	r4, r1
 8006ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee2:	f000 f855 	bl	8006f90 <_lseek_r>
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	bf15      	itete	ne
 8006eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ef6:	81a3      	strheq	r3, [r4, #12]
 8006ef8:	bf18      	it	ne
 8006efa:	81a3      	strhne	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__sclose>:
 8006efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f02:	f000 b813 	b.w	8006f2c <_close_r>
	...

08006f08 <_write_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_write_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fa fa7b 	bl	8001412 <_write>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_write_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_write_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000314 	.word	0x20000314

08006f2c <_close_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_close_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fa fa87 	bl	800144a <_close>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_close_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_close_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20000314 	.word	0x20000314

08006f4c <_fstat_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_fstat_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fa fa82 	bl	8001462 <_fstat>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_fstat_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_fstat_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000314 	.word	0x20000314

08006f70 <_isatty_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	; (8006f8c <_isatty_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa fa81 	bl	8001482 <_isatty>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_isatty_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_isatty_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000314 	.word	0x20000314

08006f90 <_lseek_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	; (8006fb0 <_lseek_r+0x20>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fa fa7a 	bl	8001498 <_lseek>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_lseek_r+0x1e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_lseek_r+0x1e>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	20000314 	.word	0x20000314

08006fb4 <_read_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	; (8006fd4 <_read_r+0x20>)
 8006fb8:	4604      	mov	r4, r0
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f7fa fa08 	bl	80013d8 <_read>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_read_r+0x1e>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_read_r+0x1e>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	20000314 	.word	0x20000314

08006fd8 <_init>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_fini>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr
