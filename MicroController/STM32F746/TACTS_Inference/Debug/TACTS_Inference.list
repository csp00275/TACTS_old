
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012200  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015724  080123e0  080123e0  000223e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027b04  08027b04  0004107c  2**0
                  CONTENTS
  4 .ARM          00000008  08027b04  08027b04  00037b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027b0c  08027b0c  0004107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027b0c  08027b0c  00037b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027b10  08027b10  00037b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000107c  20000000  08027b14  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b0  20001080  08028b90  00041080  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20005530  08028b90  00045530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed8a  00000000  00000000  000410ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1b  00000000  00000000  0005fe36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00063958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00064c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a302  00000000  00000000  00065d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019de2  00000000  00000000  0009001a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb75e  00000000  00000000  000a9dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a555a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ec  00000000  00000000  001a55ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ab698  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ab764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001080 	.word	0x20001080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080123b8 	.word	0x080123b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001084 	.word	0x20001084
 800020c:	080123b8 	.word	0x080123b8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a8 	b.w	8000f70 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83a 	bl	8000ca0 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_f2lz>:
 8000c38:	ee07 0a90 	vmov	s15, r0
 8000c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	d401      	bmi.n	8000c4a <__aeabi_f2lz+0x12>
 8000c46:	f000 b80b 	b.w	8000c60 <__aeabi_f2ulz>
 8000c4a:	eef1 7a67 	vneg.f32	s15, s15
 8000c4e:	b508      	push	{r3, lr}
 8000c50:	ee17 0a90 	vmov	r0, s15
 8000c54:	f000 f804 	bl	8000c60 <__aeabi_f2ulz>
 8000c58:	4240      	negs	r0, r0
 8000c5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5e:	bd08      	pop	{r3, pc}

08000c60 <__aeabi_f2ulz>:
 8000c60:	b5d0      	push	{r4, r6, r7, lr}
 8000c62:	f7ff fca1 	bl	80005a8 <__aeabi_f2d>
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__aeabi_f2ulz+0x38>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	f7ff fcf3 	bl	8000658 <__aeabi_dmul>
 8000c72:	f000 f97f 	bl	8000f74 <__aeabi_d2uiz>
 8000c76:	4604      	mov	r4, r0
 8000c78:	f7ff fc74 	bl	8000564 <__aeabi_ui2d>
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <__aeabi_f2ulz+0x3c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f7ff fcea 	bl	8000658 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4630      	mov	r0, r6
 8000c8a:	4639      	mov	r1, r7
 8000c8c:	f7ff fb2c 	bl	80002e8 <__aeabi_dsub>
 8000c90:	f000 f970 	bl	8000f74 <__aeabi_d2uiz>
 8000c94:	4621      	mov	r1, r4
 8000c96:	bdd0      	pop	{r4, r6, r7, pc}
 8000c98:	3df00000 	.word	0x3df00000
 8000c9c:	41f00000 	.word	0x41f00000

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9d08      	ldr	r5, [sp, #32]
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	468e      	mov	lr, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <__udivmoddi4+0xaa>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	d969      	bls.n	8000d88 <__udivmoddi4+0xe8>
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b152      	cbz	r2, 8000cd0 <__udivmoddi4+0x30>
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	f1c2 0120 	rsb	r1, r2, #32
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cca:	ea41 0e03 	orr.w	lr, r1, r3
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	0c21      	lsrs	r1, r4, #16
 8000cd6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cda:	fa1f f78c 	uxth.w	r7, ip
 8000cde:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce6:	fb06 f107 	mul.w	r1, r6, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d90a      	bls.n	8000d04 <__udivmoddi4+0x64>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 811f 	bcs.w	8000f38 <__udivmoddi4+0x298>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 811c 	bls.w	8000f38 <__udivmoddi4+0x298>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 f707 	mul.w	r7, r0, r7
 8000d18:	42a7      	cmp	r7, r4
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x92>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	f080 810a 	bcs.w	8000f3c <__udivmoddi4+0x29c>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f240 8107 	bls.w	8000f3c <__udivmoddi4+0x29c>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	1be4      	subs	r4, r4, r7
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa4>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0xc2>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	f000 80ef 	beq.w	8000f32 <__udivmoddi4+0x292>
 8000d54:	2600      	movs	r6, #0
 8000d56:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	fab3 f683 	clz	r6, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d14a      	bne.n	8000e00 <__udivmoddi4+0x160>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xd4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f200 80f9 	bhi.w	8000f66 <__udivmoddi4+0x2c6>
 8000d74:	1a84      	subs	r4, r0, r2
 8000d76:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d0e0      	beq.n	8000d44 <__udivmoddi4+0xa4>
 8000d82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d86:	e7dd      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xec>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	f040 8092 	bne.w	8000eba <__udivmoddi4+0x21a>
 8000d96:	eba1 010c 	sub.w	r1, r1, ip
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2601      	movs	r6, #1
 8000da4:	0c20      	lsrs	r0, r4, #16
 8000da6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000daa:	fb07 1113 	mls	r1, r7, r3, r1
 8000dae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db2:	fb0e f003 	mul.w	r0, lr, r3
 8000db6:	4288      	cmp	r0, r1
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x12c>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x12a>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2c0>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x156>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x154>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000df4:	4608      	mov	r0, r1
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfe:	e79c      	b.n	8000d3a <__udivmoddi4+0x9a>
 8000e00:	f1c6 0720 	rsb	r7, r6, #32
 8000e04:	40b3      	lsls	r3, r6
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e12:	fa01 f306 	lsl.w	r3, r1, r6
 8000e16:	431c      	orrs	r4, r3
 8000e18:	40f9      	lsrs	r1, r7
 8000e1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e26:	0c20      	lsrs	r0, r4, #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e34:	fb08 f00e 	mul.w	r0, r8, lr
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b8>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2bc>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2bc>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1a09      	subs	r1, r1, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e60:	fb09 1110 	mls	r1, r9, r0, r1
 8000e64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e6c:	458e      	cmp	lr, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1e2>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7a:	458e      	cmp	lr, r1
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e86:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8a:	eba1 010e 	sub.w	r1, r1, lr
 8000e8e:	42a1      	cmp	r1, r4
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46a6      	mov	lr, r4
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x2a4>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x2a0>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x212>
 8000e9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eaa:	40f1      	lsrs	r1, r6
 8000eac:	431f      	orrs	r7, r3
 8000eae:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	f1c2 0320 	rsb	r3, r2, #32
 8000ebe:	40d8      	lsrs	r0, r3
 8000ec0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed8:	fb07 3610 	mls	r6, r7, r0, r3
 8000edc:	0c0b      	lsrs	r3, r1, #16
 8000ede:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x260>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b8>
 8000ef8:	429e      	cmp	r6, r3
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b8>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	b289      	uxth	r1, r1
 8000f04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f08:	fb07 3316 	mls	r3, r7, r6, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb06 f30e 	mul.w	r3, r6, lr
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x28a>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000f26:	3e02      	subs	r6, #2
 8000f28:	4461      	add	r1, ip
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0x104>
 8000f32:	462e      	mov	r6, r5
 8000f34:	4628      	mov	r0, r5
 8000f36:	e705      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	e6e3      	b.n	8000d04 <__udivmoddi4+0x64>
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	e6f8      	b.n	8000d32 <__udivmoddi4+0x92>
 8000f40:	454b      	cmp	r3, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f8>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f8>
 8000f50:	4646      	mov	r6, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x28a>
 8000f54:	4620      	mov	r0, r4
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1e2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x260>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b8>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	4461      	add	r1, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x12c>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e709      	b.n	8000d7e <__udivmoddi4+0xde>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x156>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <aiInit>:

/* Array of pointer to manage the model's input/output tensors */
ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <aiInit+0x64>)
 8000fbc:	603b      	str	r3, [r7, #0]
  err = ai_twoline_create_and_init(&twoLine, acts, NULL);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <aiInit+0x68>)
 8000fc6:	f00a fe8b 	bl	800bce0 <ai_twoline_create_and_init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00a      	beq.n	8000fea <aiInit+0x36>
      HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8000fd4:	4912      	ldr	r1, [pc, #72]	; (8001020 <aiInit+0x6c>)
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <aiInit+0x70>)
 8000fd8:	f00e fc60 	bl	800f89c <siprintf>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	4910      	ldr	r1, [pc, #64]	; (8001024 <aiInit+0x70>)
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <aiInit+0x74>)
 8000fe6:	f004 fba9 	bl	800573c <HAL_UART_Transmit>
  };

  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_twoline_inputs_get(twoLine, NULL);
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <aiInit+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00a fee9 	bl	800bdc8 <ai_twoline_inputs_get>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <aiInit+0x78>)
 8000ffa:	6013      	str	r3, [r2, #0]
  ai_output = ai_twoline_outputs_get(twoLine, NULL);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <aiInit+0x68>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fefa 	bl	800bdfc <ai_twoline_outputs_get>
 8001008:	4603      	mov	r3, r0
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <aiInit+0x7c>)
 800100c:	6013      	str	r3, [r2, #0]

  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200010a0 	.word	0x200010a0
 800101c:	2000109c 	.word	0x2000109c
 8001020:	080123e0 	.word	0x080123e0
 8001024:	2000189c 	.word	0x2000189c
 8001028:	20001814 	.word	0x20001814
 800102c:	20001790 	.word	0x20001790
 8001030:	20001794 	.word	0x20001794

08001034 <aiRun>:

int aiRun(const ai_float *in_data, ai_float *out_data) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <aiRun+0x54>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <aiRun+0x58>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch = ai_twoline_run(twoLine, &ai_input[0], &ai_output[0]);
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <aiRun+0x5c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <aiRun+0x54>)
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	4a0d      	ldr	r2, [pc, #52]	; (800108c <aiRun+0x58>)
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f00a ff24 	bl	800bea8 <ai_twoline_run>
 8001060:	60f8      	str	r0, [r7, #12]
  if (n_batch != 1) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d00a      	beq.n	800107e <aiRun+0x4a>
      HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 8001068:	490a      	ldr	r1, [pc, #40]	; (8001094 <aiRun+0x60>)
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <aiRun+0x64>)
 800106c:	f00e fc16 	bl	800f89c <siprintf>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <aiRun+0x64>)
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <aiRun+0x68>)
 800107a:	f004 fb5f 	bl	800573c <HAL_UART_Transmit>
  };

  return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20001790 	.word	0x20001790
 800108c:	20001794 	.word	0x20001794
 8001090:	2000109c 	.word	0x2000109c
 8001094:	080123f0 	.word	0x080123f0
 8001098:	2000189c 	.word	0x2000189c
 800109c:	20001814 	.word	0x20001814

080010a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_I2C1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <MX_I2C1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_I2C1_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <MX_I2C1_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_I2C1_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_I2C1_Init+0x74>)
 80010dc:	f001 fee4 	bl	8002ea8 <HAL_I2C_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 fda7 	bl	8001c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <MX_I2C1_Init+0x74>)
 80010ee:	f003 f935 	bl	800435c <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f000 fd9e 	bl	8001c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_I2C1_Init+0x74>)
 8001100:	f003 f977 	bl	80043f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 fd95 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20001798 	.word	0x20001798
 8001118:	40005400 	.word	0x40005400
 800111c:	6000030d 	.word	0x6000030d

08001120 <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6178      	str	r0, [r7, #20]
 8001128:	ed87 0a04 	vstr	s0, [r7, #16]
 800112c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001130:	ed87 1a02 	vstr	s2, [r7, #8]
 8001134:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	601a      	str	r2, [r3, #0]
    kf->R = R;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	60da      	str	r2, [r3, #12]
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	ed93 7a02 	vldr	s14, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edd3 6a02 	vldr	s13, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	ed93 7a02 	vldr	s14, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edd3 6a04 	vldr	s13, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b0:	ed97 6a00 	vldr	s12, [r7]
 80011b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	ee07 3a90 	vmov	s15, r3
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
}
 8001204:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001206:	f3bf 8f6f 	isb	sy
}
 800120a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <SCB_EnableICache+0x48>)
 800120e:	2200      	movs	r2, #0
 8001210:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001214:	f3bf 8f4f 	dsb	sy
}
 8001218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800121a:	f3bf 8f6f 	isb	sy
}
 800121e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <SCB_EnableICache+0x48>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <SCB_EnableICache+0x48>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800122c:	f3bf 8f4f 	dsb	sy
}
 8001230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001232:	f3bf 8f6f 	isb	sy
}
 8001236:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <SCB_EnableDCache+0x84>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001256:	f3bf 8f4f 	dsb	sy
}
 800125a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <SCB_EnableDCache+0x84>)
 800125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001262:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0b5b      	lsrs	r3, r3, #13
 8001268:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800126c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001276:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001280:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001286:	4911      	ldr	r1, [pc, #68]	; (80012cc <SCB_EnableDCache+0x84>)
 8001288:	4313      	orrs	r3, r2
 800128a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ef      	bne.n	8001278 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	60fa      	str	r2, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e5      	bne.n	800126e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a2:	f3bf 8f4f 	dsb	sy
}
 80012a6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <SCB_EnableDCache+0x84>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <SCB_EnableDCache+0x84>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012b4:	f3bf 8f4f 	dsb	sy
}
 80012b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ba:	f3bf 8f6f 	isb	sy
}
 80012be:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <ProcessCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ProcessCommand(uint8_t *command)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)command, "echo") == 0) {
 80012d8:	4929      	ldr	r1, [pc, #164]	; (8001380 <ProcessCommand+0xb0>)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7fe ff98 	bl	8000210 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10b      	bne.n	80012fe <ProcessCommand+0x2e>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 80012e6:	4927      	ldr	r1, [pc, #156]	; (8001384 <ProcessCommand+0xb4>)
 80012e8:	4827      	ldr	r0, [pc, #156]	; (8001388 <ProcessCommand+0xb8>)
 80012ea:	f00e fad7 	bl	800f89c <siprintf>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	2364      	movs	r3, #100	; 0x64
 80012f4:	4924      	ldr	r1, [pc, #144]	; (8001388 <ProcessCommand+0xb8>)
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <ProcessCommand+0xbc>)
 80012f8:	f004 fa20 	bl	800573c <HAL_UART_Transmit>
    }else if (strcmp((char*)command, "5") == 0) {
		FifthCommand();
    }else {
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 80012fc:	e03c      	b.n	8001378 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "1") == 0) {
 80012fe:	4924      	ldr	r1, [pc, #144]	; (8001390 <ProcessCommand+0xc0>)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7fe ff85 	bl	8000210 <strcmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <ProcessCommand+0x42>
    	FirstCommand();
 800130c:	f000 f84c 	bl	80013a8 <FirstCommand>
}
 8001310:	e032      	b.n	8001378 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "2") == 0) {
 8001312:	4920      	ldr	r1, [pc, #128]	; (8001394 <ProcessCommand+0xc4>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7fe ff7b 	bl	8000210 <strcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <ProcessCommand+0x56>
    	SecondCommand();
 8001320:	f000 f8de 	bl	80014e0 <SecondCommand>
}
 8001324:	e028      	b.n	8001378 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "3") == 0) {
 8001326:	491c      	ldr	r1, [pc, #112]	; (8001398 <ProcessCommand+0xc8>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7fe ff71 	bl	8000210 <strcmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <ProcessCommand+0x6a>
		ThirdCommand();
 8001334:	f000 fa80 	bl	8001838 <ThirdCommand>
}
 8001338:	e01e      	b.n	8001378 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "4") == 0) {
 800133a:	4918      	ldr	r1, [pc, #96]	; (800139c <ProcessCommand+0xcc>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7fe ff67 	bl	8000210 <strcmp>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <ProcessCommand+0x7e>
		FourthCommand();
 8001348:	f000 fb6a 	bl	8001a20 <FourthCommand>
}
 800134c:	e014      	b.n	8001378 <ProcessCommand+0xa8>
    }else if (strcmp((char*)command, "5") == 0) {
 800134e:	4914      	ldr	r1, [pc, #80]	; (80013a0 <ProcessCommand+0xd0>)
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7fe ff5d 	bl	8000210 <strcmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <ProcessCommand+0x92>
		FifthCommand();
 800135c:	f000 fb67 	bl	8001a2e <FifthCommand>
}
 8001360:	e00a      	b.n	8001378 <ProcessCommand+0xa8>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 8001362:	4910      	ldr	r1, [pc, #64]	; (80013a4 <ProcessCommand+0xd4>)
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <ProcessCommand+0xb8>)
 8001366:	f00e fa99 	bl	800f89c <siprintf>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	2364      	movs	r3, #100	; 0x64
 8001370:	4905      	ldr	r1, [pc, #20]	; (8001388 <ProcessCommand+0xb8>)
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <ProcessCommand+0xbc>)
 8001374:	f004 f9e2 	bl	800573c <HAL_UART_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	08012400 	.word	0x08012400
 8001384:	08012408 	.word	0x08012408
 8001388:	2000189c 	.word	0x2000189c
 800138c:	20001814 	.word	0x20001814
 8001390:	08012410 	.word	0x08012410
 8001394:	08012414 	.word	0x08012414
 8001398:	08012418 	.word	0x08012418
 800139c:	0801241c 	.word	0x0801241c
 80013a0:	08012420 	.word	0x08012420
 80013a4:	08012424 	.word	0x08012424

080013a8 <FirstCommand>:

void FirstCommand()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80013ae:	4944      	ldr	r1, [pc, #272]	; (80014c0 <FirstCommand+0x118>)
 80013b0:	4844      	ldr	r0, [pc, #272]	; (80014c4 <FirstCommand+0x11c>)
 80013b2:	f00e fa73 	bl	800f89c <siprintf>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	2364      	movs	r3, #100	; 0x64
 80013bc:	4941      	ldr	r1, [pc, #260]	; (80014c4 <FirstCommand+0x11c>)
 80013be:	4842      	ldr	r0, [pc, #264]	; (80014c8 <FirstCommand+0x120>)
 80013c0:	f004 f9bc 	bl	800573c <HAL_UART_Transmit>

    uint32_t timeStart_s, timeEnd_s,timeDiff_s; // single
    uint32_t timeStart_a, timeEnd_a, timeDiff_a; // all

    timeStart_a = HAL_GetTick();
 80013c4:	f001 f8f8 	bl	80025b8 <HAL_GetTick>
 80013c8:	61b8      	str	r0, [r7, #24]
    do {
    	timeStart_s = HAL_GetTick();
 80013ca:	f001 f8f5 	bl	80025b8 <HAL_GetTick>
 80013ce:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	e042      	b.n	800145c <FirstCommand+0xb4>
    	    uint8_t q = i / 12;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <FirstCommand+0x124>)
 80013da:	fb82 1203 	smull	r1, r2, r2, r3
 80013de:	1052      	asrs	r2, r2, #1
 80013e0:	17db      	asrs	r3, r3, #31
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	70fb      	strb	r3, [r7, #3]
    	    uint8_t r = i % 12;
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <FirstCommand+0x124>)
 80013ea:	fb83 1302 	smull	r1, r3, r3, r2
 80013ee:	1059      	asrs	r1, r3, #1
 80013f0:	17d3      	asrs	r3, r2, #31
 80013f2:	1ac9      	subs	r1, r1, r3
 80013f4:	460b      	mov	r3, r1
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	1ad1      	subs	r1, r2, r3
 80013fe:	460b      	mov	r3, r1
 8001400:	70bb      	strb	r3, [r7, #2]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	78ba      	ldrb	r2, [r7, #2]
 800140a:	2a07      	cmp	r2, #7
 800140c:	bf8c      	ite	hi
 800140e:	2201      	movhi	r2, #1
 8001410:	2200      	movls	r2, #0
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	4413      	add	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001418:	78bb      	ldrb	r3, [r7, #2]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d903      	bls.n	8001426 <FirstCommand+0x7e>
 800141e:	78bb      	ldrb	r3, [r7, #2]
 8001420:	3b08      	subs	r3, #8
 8001422:	b2db      	uxtb	r3, r3
 8001424:	e000      	b.n	8001428 <FirstCommand+0x80>
 8001426:	78bb      	ldrb	r3, [r7, #2]
 8001428:	703b      	strb	r3, [r7, #0]
    	    resetTcaDevicesExcept(active_device, tca_addr);
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	4928      	ldr	r1, [pc, #160]	; (80014d0 <FirstCommand+0x128>)
 800142e:	4618      	mov	r0, r3
 8001430:	f000 feae 	bl	8002190 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 8001434:	7839      	ldrb	r1, [r7, #0]
 8001436:	787b      	ldrb	r3, [r7, #1]
 8001438:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <FirstCommand+0x128>)
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fed4 	bl	80021e8 <setActiveTcaChannel>
            excuteVl53l0x(&vl53l0x_s[i],i);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <FirstCommand+0x12c>)
 800144c:	4413      	add	r3, r2
 800144e:	69f9      	ldr	r1, [r7, #28]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 ffe9 	bl	8002428 <excuteVl53l0x>
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b23      	cmp	r3, #35	; 0x23
 8001460:	ddb9      	ble.n	80013d6 <FirstCommand+0x2e>
        }
		timeEnd_s = HAL_GetTick();
 8001462:	f001 f8a9 	bl	80025b8 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]
		timeDiff_s = timeEnd_s - timeStart_s;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", timeDiff_s), 100);
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4919      	ldr	r1, [pc, #100]	; (80014d8 <FirstCommand+0x130>)
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <FirstCommand+0x11c>)
 8001476:	f00e fa11 	bl	800f89c <siprintf>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	4910      	ldr	r1, [pc, #64]	; (80014c4 <FirstCommand+0x11c>)
 8001482:	4811      	ldr	r0, [pc, #68]	; (80014c8 <FirstCommand+0x120>)
 8001484:	f004 f95a 	bl	800573c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001488:	4914      	ldr	r1, [pc, #80]	; (80014dc <FirstCommand+0x134>)
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <FirstCommand+0x11c>)
 800148c:	f00e fa06 	bl	800f89c <siprintf>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	2364      	movs	r3, #100	; 0x64
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <FirstCommand+0x11c>)
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <FirstCommand+0x120>)
 800149a:	f004 f94f 	bl	800573c <HAL_UART_Transmit>
		timeEnd_a = HAL_GetTick();
 800149e:	f001 f88b 	bl	80025b8 <HAL_GetTick>
 80014a2:	60b8      	str	r0, [r7, #8]
		timeDiff_a = timeEnd_a - timeStart_a;
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	607b      	str	r3, [r7, #4]
    } while (timeDiff_a < 10000);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d989      	bls.n	80013ca <FirstCommand+0x22>
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08012444 	.word	0x08012444
 80014c4:	2000189c 	.word	0x2000189c
 80014c8:	20001814 	.word	0x20001814
 80014cc:	2aaaaaab 	.word	0x2aaaaaab
 80014d0:	20000018 	.word	0x20000018
 80014d4:	20001944 	.word	0x20001944
 80014d8:	08012454 	.word	0x08012454
 80014dc:	0801245c 	.word	0x0801245c

080014e0 <SecondCommand>:

void SecondCommand()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80014e6:	498d      	ldr	r1, [pc, #564]	; (800171c <SecondCommand+0x23c>)
 80014e8:	488d      	ldr	r0, [pc, #564]	; (8001720 <SecondCommand+0x240>)
 80014ea:	f00e f9d7 	bl	800f89c <siprintf>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	2364      	movs	r3, #100	; 0x64
 80014f4:	498a      	ldr	r1, [pc, #552]	; (8001720 <SecondCommand+0x240>)
 80014f6:	488b      	ldr	r0, [pc, #556]	; (8001724 <SecondCommand+0x244>)
 80014f8:	f004 f920 	bl	800573c <HAL_UART_Transmit>

    uint32_t timeStart_s, timeEnd_s,timeDiff_s; // single
    uint32_t timeStart_a, timeEnd_a, timeDiff_a; // all

    timeStart_a = HAL_GetTick();
 80014fc:	f001 f85c 	bl	80025b8 <HAL_GetTick>
 8001500:	6238      	str	r0, [r7, #32]
    do {
    	timeStart_s = HAL_GetTick();
 8001502:	f001 f859 	bl	80025b8 <HAL_GetTick>
 8001506:	61f8      	str	r0, [r7, #28]
    	uint8_t tofCount = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (int i = 0; i < NUM_SENSOR; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
 8001512:	e0a4      	b.n	800165e <SecondCommand+0x17e>
    	    uint8_t q = i / 12;
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	4a84      	ldr	r2, [pc, #528]	; (8001728 <SecondCommand+0x248>)
 8001518:	fb82 1203 	smull	r1, r2, r2, r3
 800151c:	1052      	asrs	r2, r2, #1
 800151e:	17db      	asrs	r3, r3, #31
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	71fb      	strb	r3, [r7, #7]
    	    uint8_t r = i % 12;
 8001524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001526:	4b80      	ldr	r3, [pc, #512]	; (8001728 <SecondCommand+0x248>)
 8001528:	fb83 1302 	smull	r1, r3, r3, r2
 800152c:	1059      	asrs	r1, r3, #1
 800152e:	17d3      	asrs	r3, r2, #31
 8001530:	1ac9      	subs	r1, r1, r3
 8001532:	460b      	mov	r3, r1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	440b      	add	r3, r1
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	1ad1      	subs	r1, r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	71bb      	strb	r3, [r7, #6]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	79ba      	ldrb	r2, [r7, #6]
 8001548:	2a07      	cmp	r2, #7
 800154a:	bf8c      	ite	hi
 800154c:	2201      	movhi	r2, #1
 800154e:	2200      	movls	r2, #0
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	4413      	add	r3, r2
 8001554:	717b      	strb	r3, [r7, #5]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d903      	bls.n	8001564 <SecondCommand+0x84>
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	3b08      	subs	r3, #8
 8001560:	b2db      	uxtb	r3, r3
 8001562:	e000      	b.n	8001566 <SecondCommand+0x86>
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	713b      	strb	r3, [r7, #4]
    	    resetTcaDevicesExcept(active_device, tca_addr);
 8001568:	797b      	ldrb	r3, [r7, #5]
 800156a:	4970      	ldr	r1, [pc, #448]	; (800172c <SecondCommand+0x24c>)
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fe0f 	bl	8002190 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 8001572:	7939      	ldrb	r1, [r7, #4]
 8001574:	797b      	ldrb	r3, [r7, #5]
 8001576:	4a6d      	ldr	r2, [pc, #436]	; (800172c <SecondCommand+0x24c>)
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fe35 	bl	80021e8 <setActiveTcaChannel>
            Dev = &vl53l0x_s[i];
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4a69      	ldr	r2, [pc, #420]	; (8001730 <SecondCommand+0x250>)
 800158a:	4413      	add	r3, r2
 800158c:	4a69      	ldr	r2, [pc, #420]	; (8001734 <SecondCommand+0x254>)
 800158e:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 us
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <SecondCommand+0x254>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4968      	ldr	r1, [pc, #416]	; (8001738 <SecondCommand+0x258>)
 8001596:	4618      	mov	r0, r3
 8001598:	f006 fe6d 	bl	8008276 <VL53L0X_PerformContinuousRangingMeasurement>

            if (RangingData.RangeStatus == 0) {
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <SecondCommand+0x258>)
 800159e:	7e1b      	ldrb	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d14d      	bne.n	8001640 <SecondCommand+0x160>
                float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 80015a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4a63      	ldr	r2, [pc, #396]	; (800173c <SecondCommand+0x25c>)
 80015b0:	4413      	add	r3, r2
 80015b2:	4a61      	ldr	r2, [pc, #388]	; (8001738 <SecondCommand+0x258>)
 80015b4:	8912      	ldrh	r2, [r2, #8]
 80015b6:	ee07 2a90 	vmov	s15, r2
 80015ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fdca 	bl	800115c <Kalman_Estimate>
 80015c8:	ed87 0a00 	vstr	s0, [r7]
                in_data[i]=filteredValue;
 80015cc:	4a5c      	ldr	r2, [pc, #368]	; (8001740 <SecondCommand+0x260>)
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", in_data[i]), 1000);
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <SecondCommand+0x260>)
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffe0 	bl	80005a8 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4955      	ldr	r1, [pc, #340]	; (8001744 <SecondCommand+0x264>)
 80015ee:	484c      	ldr	r0, [pc, #304]	; (8001720 <SecondCommand+0x240>)
 80015f0:	f00e f954 	bl	800f89c <siprintf>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	4948      	ldr	r1, [pc, #288]	; (8001720 <SecondCommand+0x240>)
 80015fe:	4849      	ldr	r0, [pc, #292]	; (8001724 <SecondCommand+0x244>)
 8001600:	f004 f89c 	bl	800573c <HAL_UART_Transmit>
                in_data[i]= (filteredValue-Xmean[i])/Xstd[i];
 8001604:	4a50      	ldr	r2, [pc, #320]	; (8001748 <SecondCommand+0x268>)
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ed97 7a00 	vldr	s14, [r7]
 8001614:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001618:	4a4c      	ldr	r2, [pc, #304]	; (800174c <SecondCommand+0x26c>)
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	ed93 7a00 	vldr	s14, [r3]
 8001624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001628:	4a45      	ldr	r2, [pc, #276]	; (8001740 <SecondCommand+0x260>)
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001638:	3301      	adds	r3, #1
 800163a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800163e:	e00b      	b.n	8001658 <SecondCommand+0x178>
            }else{
               HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "99 "), 1000);
 8001640:	4943      	ldr	r1, [pc, #268]	; (8001750 <SecondCommand+0x270>)
 8001642:	4837      	ldr	r0, [pc, #220]	; (8001720 <SecondCommand+0x240>)
 8001644:	f00e f92a 	bl	800f89c <siprintf>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001650:	4933      	ldr	r1, [pc, #204]	; (8001720 <SecondCommand+0x240>)
 8001652:	4834      	ldr	r0, [pc, #208]	; (8001724 <SecondCommand+0x244>)
 8001654:	f004 f872 	bl	800573c <HAL_UART_Transmit>
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	3301      	adds	r3, #1
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	2b23      	cmp	r3, #35	; 0x23
 8001662:	f77f af57 	ble.w	8001514 <SecondCommand+0x34>
            }
        }

		timeEnd_s = HAL_GetTick();
 8001666:	f000 ffa7 	bl	80025b8 <HAL_GetTick>
 800166a:	61b8      	str	r0, [r7, #24]
		timeDiff_s = timeEnd_s - timeStart_s;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", timeDiff_s), 1000);
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4937      	ldr	r1, [pc, #220]	; (8001754 <SecondCommand+0x274>)
 8001678:	4829      	ldr	r0, [pc, #164]	; (8001720 <SecondCommand+0x240>)
 800167a:	f00e f90f 	bl	800f89c <siprintf>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	4926      	ldr	r1, [pc, #152]	; (8001720 <SecondCommand+0x240>)
 8001688:	4826      	ldr	r0, [pc, #152]	; (8001724 <SecondCommand+0x244>)
 800168a:	f004 f857 	bl	800573c <HAL_UART_Transmit>

		if(tofCount == NUM_SENSOR){
 800168e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001692:	2b24      	cmp	r3, #36	; 0x24
 8001694:	f040 80a7 	bne.w	80017e6 <SecondCommand+0x306>
		aiRun(in_data,out_data);
 8001698:	492f      	ldr	r1, [pc, #188]	; (8001758 <SecondCommand+0x278>)
 800169a:	4829      	ldr	r0, [pc, #164]	; (8001740 <SecondCommand+0x260>)
 800169c:	f7ff fcca 	bl	8001034 <aiRun>
		out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <SecondCommand+0x278>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <SecondCommand+0x27c>)
 80016b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <SecondCommand+0x27c>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <SecondCommand+0x27c>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <SecondCommand+0x278>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]
		out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <SecondCommand+0x278>)
 80016dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <SecondCommand+0x280>)
 80016ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <SecondCommand+0x280>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001700:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <SecondCommand+0x280>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <SecondCommand+0x278>)
 8001710:	edc3 7a01 	vstr	s15, [r3, #4]
		for(int k=0; k<4;k++){
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
 8001718:	e03d      	b.n	8001796 <SecondCommand+0x2b6>
 800171a:	bf00      	nop
 800171c:	08012444 	.word	0x08012444
 8001720:	2000189c 	.word	0x2000189c
 8001724:	20001814 	.word	0x20001814
 8001728:	2aaaaaab 	.word	0x2aaaaaab
 800172c:	20000018 	.word	0x20000018
 8001730:	20001944 	.word	0x20001944
 8001734:	20005184 	.word	0x20005184
 8001738:	20001920 	.word	0x20001920
 800173c:	20005188 	.word	0x20005188
 8001740:	20001720 	.word	0x20001720
 8001744:	08012460 	.word	0x08012460
 8001748:	20000020 	.word	0x20000020
 800174c:	200000b0 	.word	0x200000b0
 8001750:	08012468 	.word	0x08012468
 8001754:	08012454 	.word	0x08012454
 8001758:	20001780 	.word	0x20001780
 800175c:	20000140 	.word	0x20000140
 8001760:	20000148 	.word	0x20000148
	        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8001764:	4a2e      	ldr	r2, [pc, #184]	; (8001820 <SecondCommand+0x340>)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ff1a 	bl	80005a8 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	492a      	ldr	r1, [pc, #168]	; (8001824 <SecondCommand+0x344>)
 800177a:	482b      	ldr	r0, [pc, #172]	; (8001828 <SecondCommand+0x348>)
 800177c:	f00e f88e 	bl	800f89c <siprintf>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001788:	4927      	ldr	r1, [pc, #156]	; (8001828 <SecondCommand+0x348>)
 800178a:	4828      	ldr	r0, [pc, #160]	; (800182c <SecondCommand+0x34c>)
 800178c:	f003 ffd6 	bl	800573c <HAL_UART_Transmit>
		for(int k=0; k<4;k++){
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	3301      	adds	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	2b03      	cmp	r3, #3
 800179a:	dde3      	ble.n	8001764 <SecondCommand+0x284>
		}
		float sqSum= out_data[3]*out_data[3] + out_data[4]*out_data[4];
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <SecondCommand+0x340>)
 800179e:	ed93 7a03 	vldr	s14, [r3, #12]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <SecondCommand+0x340>)
 80017a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <SecondCommand+0x340>)
 80017ae:	edd3 6a04 	vldr	s13, [r3, #16]
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <SecondCommand+0x340>)
 80017b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	edc7 7a04 	vstr	s15, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 80017c4:	6938      	ldr	r0, [r7, #16]
 80017c6:	f7fe feef 	bl	80005a8 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4915      	ldr	r1, [pc, #84]	; (8001824 <SecondCommand+0x344>)
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <SecondCommand+0x348>)
 80017d2:	f00e f863 	bl	800f89c <siprintf>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	4912      	ldr	r1, [pc, #72]	; (8001828 <SecondCommand+0x348>)
 80017e0:	4812      	ldr	r0, [pc, #72]	; (800182c <SecondCommand+0x34c>)
 80017e2:	f003 ffab 	bl	800573c <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 80017e6:	4912      	ldr	r1, [pc, #72]	; (8001830 <SecondCommand+0x350>)
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <SecondCommand+0x348>)
 80017ea:	f00e f857 	bl	800f89c <siprintf>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <SecondCommand+0x348>)
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <SecondCommand+0x34c>)
 80017f8:	f003 ffa0 	bl	800573c <HAL_UART_Transmit>
		timeEnd_a = HAL_GetTick();
 80017fc:	f000 fedc 	bl	80025b8 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]
		timeDiff_a = timeEnd_a - timeStart_a;
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	60bb      	str	r3, [r7, #8]

    } while (timeDiff_a < 1000000);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <SecondCommand+0x354>)
 800180e:	4293      	cmp	r3, r2
 8001810:	f67f ae77 	bls.w	8001502 <SecondCommand+0x22>

}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3730      	adds	r7, #48	; 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001780 	.word	0x20001780
 8001824:	08012460 	.word	0x08012460
 8001828:	2000189c 	.word	0x2000189c
 800182c:	20001814 	.word	0x20001814
 8001830:	0801245c 	.word	0x0801245c
 8001834:	000f423f 	.word	0x000f423f

08001838 <ThirdCommand>:

void ThirdCommand(){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 800183e:	496f      	ldr	r1, [pc, #444]	; (80019fc <ThirdCommand+0x1c4>)
 8001840:	486f      	ldr	r0, [pc, #444]	; (8001a00 <ThirdCommand+0x1c8>)
 8001842:	f00e f82b 	bl	800f89c <siprintf>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	496c      	ldr	r1, [pc, #432]	; (8001a00 <ThirdCommand+0x1c8>)
 8001850:	486c      	ldr	r0, [pc, #432]	; (8001a04 <ThirdCommand+0x1cc>)
 8001852:	f003 ff73 	bl	800573c <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	e02e      	b.n	80018ba <ThirdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 800185c:	4a6a      	ldr	r2, [pc, #424]	; (8001a08 <ThirdCommand+0x1d0>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe9e 	bl	80005a8 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4966      	ldr	r1, [pc, #408]	; (8001a0c <ThirdCommand+0x1d4>)
 8001872:	4863      	ldr	r0, [pc, #396]	; (8001a00 <ThirdCommand+0x1c8>)
 8001874:	f00e f812 	bl	800f89c <siprintf>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001880:	495f      	ldr	r1, [pc, #380]	; (8001a00 <ThirdCommand+0x1c8>)
 8001882:	4860      	ldr	r0, [pc, #384]	; (8001a04 <ThirdCommand+0x1cc>)
 8001884:	f003 ff5a 	bl	800573c <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	2b07      	cmp	r3, #7
 800189a:	d10b      	bne.n	80018b4 <ThirdCommand+0x7c>
 800189c:	495c      	ldr	r1, [pc, #368]	; (8001a10 <ThirdCommand+0x1d8>)
 800189e:	4858      	ldr	r0, [pc, #352]	; (8001a00 <ThirdCommand+0x1c8>)
 80018a0:	f00d fffc 	bl	800f89c <siprintf>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	4954      	ldr	r1, [pc, #336]	; (8001a00 <ThirdCommand+0x1c8>)
 80018ae:	4855      	ldr	r0, [pc, #340]	; (8001a04 <ThirdCommand+0x1cc>)
 80018b0:	f003 ff44 	bl	800573c <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3301      	adds	r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b23      	cmp	r3, #35	; 0x23
 80018be:	d9cd      	bls.n	800185c <ThirdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	e02e      	b.n	8001924 <ThirdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 80018c6:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <ThirdCommand+0x1dc>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe69 	bl	80005a8 <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	494c      	ldr	r1, [pc, #304]	; (8001a0c <ThirdCommand+0x1d4>)
 80018dc:	4848      	ldr	r0, [pc, #288]	; (8001a00 <ThirdCommand+0x1c8>)
 80018de:	f00d ffdd 	bl	800f89c <siprintf>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	4945      	ldr	r1, [pc, #276]	; (8001a00 <ThirdCommand+0x1c8>)
 80018ec:	4845      	ldr	r0, [pc, #276]	; (8001a04 <ThirdCommand+0x1cc>)
 80018ee:	f003 ff25 	bl	800573c <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	425a      	negs	r2, r3
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	f002 0207 	and.w	r2, r2, #7
 80018fe:	bf58      	it	pl
 8001900:	4253      	negpl	r3, r2
 8001902:	2b07      	cmp	r3, #7
 8001904:	d10b      	bne.n	800191e <ThirdCommand+0xe6>
 8001906:	4942      	ldr	r1, [pc, #264]	; (8001a10 <ThirdCommand+0x1d8>)
 8001908:	483d      	ldr	r0, [pc, #244]	; (8001a00 <ThirdCommand+0x1c8>)
 800190a:	f00d ffc7 	bl	800f89c <siprintf>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	493a      	ldr	r1, [pc, #232]	; (8001a00 <ThirdCommand+0x1c8>)
 8001918:	483a      	ldr	r0, [pc, #232]	; (8001a04 <ThirdCommand+0x1cc>)
 800191a:	f003 ff0f 	bl	800573c <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b23      	cmp	r3, #35	; 0x23
 8001928:	d9cd      	bls.n	80018c6 <ThirdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <ThirdCommand+0x1e0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe3a 	bl	80005a8 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4934      	ldr	r1, [pc, #208]	; (8001a0c <ThirdCommand+0x1d4>)
 800193a:	4831      	ldr	r0, [pc, #196]	; (8001a00 <ThirdCommand+0x1c8>)
 800193c:	f00d ffae 	bl	800f89c <siprintf>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001948:	492d      	ldr	r1, [pc, #180]	; (8001a00 <ThirdCommand+0x1c8>)
 800194a:	482e      	ldr	r0, [pc, #184]	; (8001a04 <ThirdCommand+0x1cc>)
 800194c:	f003 fef6 	bl	800573c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <ThirdCommand+0x1e0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe27 	bl	80005a8 <__aeabi_f2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	492b      	ldr	r1, [pc, #172]	; (8001a0c <ThirdCommand+0x1d4>)
 8001960:	4827      	ldr	r0, [pc, #156]	; (8001a00 <ThirdCommand+0x1c8>)
 8001962:	f00d ff9b 	bl	800f89c <siprintf>
 8001966:	4603      	mov	r3, r0
 8001968:	b29a      	uxth	r2, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	4924      	ldr	r1, [pc, #144]	; (8001a00 <ThirdCommand+0x1c8>)
 8001970:	4824      	ldr	r0, [pc, #144]	; (8001a04 <ThirdCommand+0x1cc>)
 8001972:	f003 fee3 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001976:	4926      	ldr	r1, [pc, #152]	; (8001a10 <ThirdCommand+0x1d8>)
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <ThirdCommand+0x1c8>)
 800197a:	f00d ff8f 	bl	800f89c <siprintf>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	491e      	ldr	r1, [pc, #120]	; (8001a00 <ThirdCommand+0x1c8>)
 8001988:	481e      	ldr	r0, [pc, #120]	; (8001a04 <ThirdCommand+0x1cc>)
 800198a:	f003 fed7 	bl	800573c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <ThirdCommand+0x1e4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fe08 	bl	80005a8 <__aeabi_f2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	491b      	ldr	r1, [pc, #108]	; (8001a0c <ThirdCommand+0x1d4>)
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <ThirdCommand+0x1c8>)
 80019a0:	f00d ff7c 	bl	800f89c <siprintf>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ac:	4914      	ldr	r1, [pc, #80]	; (8001a00 <ThirdCommand+0x1c8>)
 80019ae:	4815      	ldr	r0, [pc, #84]	; (8001a04 <ThirdCommand+0x1cc>)
 80019b0:	f003 fec4 	bl	800573c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <ThirdCommand+0x1e4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdf5 	bl	80005a8 <__aeabi_f2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4912      	ldr	r1, [pc, #72]	; (8001a0c <ThirdCommand+0x1d4>)
 80019c4:	480e      	ldr	r0, [pc, #56]	; (8001a00 <ThirdCommand+0x1c8>)
 80019c6:	f00d ff69 	bl	800f89c <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	490b      	ldr	r1, [pc, #44]	; (8001a00 <ThirdCommand+0x1c8>)
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <ThirdCommand+0x1cc>)
 80019d6:	f003 feb1 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 80019da:	490d      	ldr	r1, [pc, #52]	; (8001a10 <ThirdCommand+0x1d8>)
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <ThirdCommand+0x1c8>)
 80019de:	f00d ff5d 	bl	800f89c <siprintf>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	4905      	ldr	r1, [pc, #20]	; (8001a00 <ThirdCommand+0x1c8>)
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <ThirdCommand+0x1cc>)
 80019ee:	f003 fea5 	bl	800573c <HAL_UART_Transmit>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0801246c 	.word	0x0801246c
 8001a00:	2000189c 	.word	0x2000189c
 8001a04:	20001814 	.word	0x20001814
 8001a08:	20000020 	.word	0x20000020
 8001a0c:	08012460 	.word	0x08012460
 8001a10:	0801245c 	.word	0x0801245c
 8001a14:	200000b0 	.word	0x200000b0
 8001a18:	20000140 	.word	0x20000140
 8001a1c:	20000148 	.word	0x20000148

08001a20 <FourthCommand>:

void FourthCommand(){
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <FifthCommand>:
void FifthCommand(){
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001a40:	f7ff fbdc 	bl	80011fc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001a44:	f7ff fc00 	bl	8001248 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f000 fd65 	bl	8002516 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f82a 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f000 f8c2 	bl	8001bd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a54:	f000 facc 	bl	8001ff0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001a58:	f7ff fb22 	bl	80010a0 <MX_I2C1_Init>
  MX_CRC_Init();
 8001a5c:	f000 f89a 	bl	8001b94 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a60:	f000 f88c 	bl	8001b7c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  initializeAllSensors(tca_addr, vl53l0x_s, filters);
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <main+0x54>)
 8001a66:	490b      	ldr	r1, [pc, #44]	; (8001a94 <main+0x58>)
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <main+0x5c>)
 8001a6a:	f000 fc35 	bl	80022d8 <initializeAllSensors>
  aiInit();
 8001a6e:	f7ff faa1 	bl	8000fb4 <aiInit>
  startMsg();
 8001a72:	f000 fb23 	bl	80020bc <startMsg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001a76:	2241      	movs	r2, #65	; 0x41
 8001a78:	4908      	ldr	r1, [pc, #32]	; (8001a9c <main+0x60>)
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <main+0x64>)
 8001a7c:	f000 fae8 	bl	8002050 <ReceiveUartMessage>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f7      	bne.n	8001a76 <main+0x3a>
	  {
	      ProcessCommand(rxMsg);
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <main+0x60>)
 8001a88:	f7ff fc22 	bl	80012d0 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001a8c:	e7f3      	b.n	8001a76 <main+0x3a>
 8001a8e:	bf00      	nop
 8001a90:	20005188 	.word	0x20005188
 8001a94:	20001944 	.word	0x20001944
 8001a98:	20000018 	.word	0x20000018
 8001a9c:	200018dc 	.word	0x200018dc
 8001aa0:	20001814 	.word	0x20001814

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	; 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	2230      	movs	r2, #48	; 0x30
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00d f990 	bl	800edd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <SystemClock_Config+0xd0>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <SystemClock_Config+0xd0>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <SystemClock_Config+0xd0>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <SystemClock_Config+0xd4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <SystemClock_Config+0xd4>)
 8001ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <SystemClock_Config+0xd4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b00:	2310      	movs	r3, #16
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b04:	2302      	movs	r3, #2
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b10:	23d8      	movs	r3, #216	; 0xd8
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 0320 	add.w	r3, r7, #32
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 fd03 	bl	800452c <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b2c:	f000 f884 	bl	8001c38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b30:	f002 fcac 	bl	800448c <HAL_PWREx_EnableOverDrive>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b3a:	f000 f87d 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3e:	230f      	movs	r3, #15
 8001b40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b42:	2302      	movs	r3, #2
 8001b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2107      	movs	r1, #7
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 ff89 	bl	8004a74 <HAL_RCC_ClockConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b68:	f000 f866 	bl	8001c38 <Error_Handler>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3750      	adds	r7, #80	; 0x50
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000

08001b7c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2025      	movs	r0, #37	; 0x25
 8001b86:	f000 fe22 	bl	80027ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b8a:	2025      	movs	r0, #37	; 0x25
 8001b8c:	f000 fe3b 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <MX_CRC_Init+0x40>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_CRC_Init+0x3c>)
 8001bbe:	f000 fe3d 	bl	800283c <HAL_CRC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001bc8:	f000 f836 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200017ec 	.word	0x200017ec
 8001bd4:	40023000 	.word	0x40023000

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_GPIO_Init+0x5c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8001c40:	4905      	ldr	r1, [pc, #20]	; (8001c58 <Error_Handler+0x20>)
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <Error_Handler+0x24>)
 8001c44:	f00d fe2a 	bl	800f89c <siprintf>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2364      	movs	r3, #100	; 0x64
 8001c4e:	4903      	ldr	r1, [pc, #12]	; (8001c5c <Error_Handler+0x24>)
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <Error_Handler+0x28>)
 8001c52:	f003 fd73 	bl	800573c <HAL_UART_Transmit>
 8001c56:	e7f3      	b.n	8001c40 <Error_Handler+0x8>
 8001c58:	08012480 	.word	0x08012480
 8001c5c:	2000189c 	.word	0x2000189c
 8001c60:	20001814 	.word	0x20001814

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_CRC_MspInit+0x38>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_CRC_MspInit+0x3c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_CRC_MspInit+0x3c>)
 8001cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_CRC_MspInit+0x3c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023000 	.word	0x40023000
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0aa      	sub	sp, #168	; 0xa8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2284      	movs	r2, #132	; 0x84
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00d f863 	bl	800edd8 <memset>
  if(hi2c->Instance==I2C1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_I2C_MspInit+0xd4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d14c      	bne.n	8001db6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f8c8 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d36:	f7ff ff7f 	bl	8001c38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_I2C_MspInit+0xd8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_I2C_MspInit+0xd8>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_I2C_MspInit+0xd8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5a:	2312      	movs	r3, #18
 8001d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d76:	4619      	mov	r1, r3
 8001d78:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <HAL_I2C_MspInit+0xdc>)
 8001d7a:	f000 fee9 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_I2C_MspInit+0xd8>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_I2C_MspInit+0xd8>)
 8001d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_I2C_MspInit+0xd8>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	201f      	movs	r0, #31
 8001d9c:	f000 fd17 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001da0:	201f      	movs	r0, #31
 8001da2:	f000 fd30 	bl	8002806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2020      	movs	r0, #32
 8001dac:	f000 fd0f 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001db0:	2020      	movs	r0, #32
 8001db2:	f000 fd28 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	37a8      	adds	r7, #168	; 0xa8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0ac      	sub	sp, #176	; 0xb0
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	2284      	movs	r2, #132	; 0x84
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f00c fff3 	bl	800edd8 <memset>
  if(huart->Instance==USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <HAL_UART_MspInit+0xf4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d15c      	bne.n	8001eb6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e00:	2300      	movs	r3, #0
 8001e02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f859 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e14:	f7ff ff10 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	6453      	str	r3, [r2, #68]	; 0x44
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6313      	str	r3, [r2, #48]	; 0x30
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_UART_MspInit+0xf8>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <HAL_UART_MspInit+0xfc>)
 8001e86:	f000 fe63 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <HAL_UART_MspInit+0x100>)
 8001eb2:	f000 fe4d 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	37b0      	adds	r7, #176	; 0xb0
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 fb38 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <I2C1_EV_IRQHandler+0x10>)
 8001f2a:	f001 fa37 	bl	800339c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20001798 	.word	0x20001798

08001f38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <I2C1_ER_IRQHandler+0x10>)
 8001f3e:	f001 fa47 	bl	80033d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20001798 	.word	0x20001798

08001f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <USART1_IRQHandler+0x10>)
 8001f52:	f003 fd3b 	bl	80059cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001814 	.word	0x20001814

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f00c fee2 	bl	800ed58 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20050000 	.word	0x20050000
 8001fc0:	00000800 	.word	0x00000800
 8001fc4:	20001810 	.word	0x20001810
 8001fc8:	20005530 	.word	0x20005530

08001fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <SystemInit+0x20>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <SystemInit+0x20>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <MX_USART1_UART_Init+0x5c>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_USART1_UART_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART1_UART_Init+0x58>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_USART1_UART_Init+0x58>)
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002034:	f003 fb34 	bl	80056a0 <HAL_UART_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800203e:	f7ff fdfb 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20001814 	.word	0x20001814
 800204c:	40011000 	.word	0x40011000

08002050 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8002062:	f107 0115 	add.w	r1, r7, #21
 8002066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206a:	2201      	movs	r2, #1
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f003 fbe8 	bl	8005842 <HAL_UART_Receive>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f4      	bne.n	8002062 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8002078:	7d7b      	ldrb	r3, [r7, #21]
 800207a:	2b0a      	cmp	r3, #10
 800207c:	d106      	bne.n	800208c <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e012      	b.n	80020b2 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 800208c:	8afb      	ldrh	r3, [r7, #22]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	7d7a      	ldrb	r2, [r7, #21]
 8002094:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	3301      	adds	r3, #1
 800209a:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 800209c:	8afa      	ldrh	r2, [r7, #22]
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3de      	bcc.n	8002062 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80020a4:	8afb      	ldrh	r3, [r7, #22]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	4413      	add	r3, r2
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <startMsg>:

void startMsg(){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80020c0:	492c      	ldr	r1, [pc, #176]	; (8002174 <startMsg+0xb8>)
 80020c2:	482d      	ldr	r0, [pc, #180]	; (8002178 <startMsg+0xbc>)
 80020c4:	f00d fbea 	bl	800f89c <siprintf>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	492a      	ldr	r1, [pc, #168]	; (8002178 <startMsg+0xbc>)
 80020d0:	482a      	ldr	r0, [pc, #168]	; (800217c <startMsg+0xc0>)
 80020d2:	f003 fb33 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <startMsg+0xb8>)
 80020d8:	4827      	ldr	r0, [pc, #156]	; (8002178 <startMsg+0xbc>)
 80020da:	f00d fbdf 	bl	800f89c <siprintf>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	4924      	ldr	r1, [pc, #144]	; (8002178 <startMsg+0xbc>)
 80020e6:	4825      	ldr	r0, [pc, #148]	; (800217c <startMsg+0xc0>)
 80020e8:	f003 fb28 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 80020ec:	4924      	ldr	r1, [pc, #144]	; (8002180 <startMsg+0xc4>)
 80020ee:	4822      	ldr	r0, [pc, #136]	; (8002178 <startMsg+0xbc>)
 80020f0:	f00d fbd4 	bl	800f89c <siprintf>
 80020f4:	4603      	mov	r3, r0
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	2364      	movs	r3, #100	; 0x64
 80020fa:	491f      	ldr	r1, [pc, #124]	; (8002178 <startMsg+0xbc>)
 80020fc:	481f      	ldr	r0, [pc, #124]	; (800217c <startMsg+0xc0>)
 80020fe:	f003 fb1d 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 8002102:	4920      	ldr	r1, [pc, #128]	; (8002184 <startMsg+0xc8>)
 8002104:	481c      	ldr	r0, [pc, #112]	; (8002178 <startMsg+0xbc>)
 8002106:	f00d fbc9 	bl	800f89c <siprintf>
 800210a:	4603      	mov	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	2364      	movs	r3, #100	; 0x64
 8002110:	4919      	ldr	r1, [pc, #100]	; (8002178 <startMsg+0xbc>)
 8002112:	481a      	ldr	r0, [pc, #104]	; (800217c <startMsg+0xc0>)
 8002114:	f003 fb12 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 8002118:	491b      	ldr	r1, [pc, #108]	; (8002188 <startMsg+0xcc>)
 800211a:	4817      	ldr	r0, [pc, #92]	; (8002178 <startMsg+0xbc>)
 800211c:	f00d fbbe 	bl	800f89c <siprintf>
 8002120:	4603      	mov	r3, r0
 8002122:	b29a      	uxth	r2, r3
 8002124:	2364      	movs	r3, #100	; 0x64
 8002126:	4914      	ldr	r1, [pc, #80]	; (8002178 <startMsg+0xbc>)
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <startMsg+0xc0>)
 800212a:	f003 fb07 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 800212e:	4917      	ldr	r1, [pc, #92]	; (800218c <startMsg+0xd0>)
 8002130:	4811      	ldr	r0, [pc, #68]	; (8002178 <startMsg+0xbc>)
 8002132:	f00d fbb3 	bl	800f89c <siprintf>
 8002136:	4603      	mov	r3, r0
 8002138:	b29a      	uxth	r2, r3
 800213a:	2364      	movs	r3, #100	; 0x64
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <startMsg+0xbc>)
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <startMsg+0xc0>)
 8002140:	f003 fafc 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002144:	490b      	ldr	r1, [pc, #44]	; (8002174 <startMsg+0xb8>)
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <startMsg+0xbc>)
 8002148:	f00d fba8 	bl	800f89c <siprintf>
 800214c:	4603      	mov	r3, r0
 800214e:	b29a      	uxth	r2, r3
 8002150:	2364      	movs	r3, #100	; 0x64
 8002152:	4909      	ldr	r1, [pc, #36]	; (8002178 <startMsg+0xbc>)
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <startMsg+0xc0>)
 8002156:	f003 faf1 	bl	800573c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800215a:	4906      	ldr	r1, [pc, #24]	; (8002174 <startMsg+0xb8>)
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <startMsg+0xbc>)
 800215e:	f00d fb9d 	bl	800f89c <siprintf>
 8002162:	4603      	mov	r3, r0
 8002164:	b29a      	uxth	r2, r3
 8002166:	2364      	movs	r3, #100	; 0x64
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <startMsg+0xbc>)
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <startMsg+0xc0>)
 800216c:	f003 fae6 	bl	800573c <HAL_UART_Transmit>
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	08012488 	.word	0x08012488
 8002178:	2000189c 	.word	0x2000189c
 800217c:	20001814 	.word	0x20001814
 8002180:	080124c8 	.word	0x080124c8
 8002184:	08012508 	.word	0x08012508
 8002188:	08012548 	.word	0x08012548
 800218c:	08012588 	.word	0x08012588

08002190 <resetTcaDevicesExcept>:
	float Xstd[48] = {1.84552, 1.48231, 0.88235, 1.14766, 1.35136, 1.37877, 1.31405, 1.34979, 2.09637, 1.19606, 1.9971, 1.40785, 1.67254, 1.81214, 1.58725, 1.43326, 1.35542, 1.59694, 1.79312, 2.55519, 2.56928, 2.17124, 2.09336, 1.68093, 1.59378, 1.65623, 1.25722, 1.37048, 1.52434, 1.61955, 1.8085, 2.19229, 2.55473, 2.08254, 1.93683, 1.90604, 1.50199, 1.33379, 1.32529, 1.49702, 1.52882, 1.18115, 1.47583, 2.32719, 1.2934, 1.69155, 1.4315, 1.53544};
	float Fminmax[2]={ 15.92, 167.45 };
	float Zminmax[2]={ 0, 160 };
#endif

void resetTcaDevicesExcept(uint8_t active_device, const uint8_t *tca_addr) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e015      	b.n	80021ce <resetTcaDevicesExcept+0x3e>
        if (j != active_device) {
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d00e      	beq.n	80021c8 <resetTcaDevicesExcept+0x38>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	b299      	uxth	r1, r3
 80021b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2301      	movs	r3, #1
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <resetTcaDevicesExcept+0x50>)
 80021c2:	4808      	ldr	r0, [pc, #32]	; (80021e4 <resetTcaDevicesExcept+0x54>)
 80021c4:	f000 ff00 	bl	8002fc8 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d9e6      	bls.n	80021a2 <resetTcaDevicesExcept+0x12>
        }
    }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20005458 	.word	0x20005458
 80021e4:	20001798 	.word	0x20001798

080021e8 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel, const uint8_t *tca_addr) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	4603      	mov	r3, r0
 80021f0:	603a      	str	r2, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	460b      	mov	r3, r1
 80021f6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	b299      	uxth	r1, r3
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	4a06      	ldr	r2, [pc, #24]	; (8002224 <setActiveTcaChannel+0x3c>)
 800220a:	441a      	add	r2, r3
 800220c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <setActiveTcaChannel+0x40>)
 8002216:	f000 fed7 	bl	8002fc8 <HAL_I2C_Master_Transmit>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000010 	.word	0x20000010
 8002228:	20001798 	.word	0x20001798

0800222c <initializeVl53l0x>:

void initializeVl53l0x(VL53L0X_Dev_t *Dev) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	Dev->I2cHandle = &hi2c1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <initializeVl53l0x+0x98>)
 8002238:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2252      	movs	r2, #82	; 0x52
 8002240:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	VL53L0X_WaitDeviceBooted( Dev );
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f004 fe53 	bl	8006ef0 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f004 fb6a 	bl	8006924 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f004 fccb 	bl	8006bec <VL53L0X_StaticInit>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002256:	2101      	movs	r1, #1
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f004 fee7 	bl	800702c <VL53L0X_SetDeviceMode>
	VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800225e:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <initializeVl53l0x+0x9c>)
 8002260:	491a      	ldr	r1, [pc, #104]	; (80022cc <initializeVl53l0x+0xa0>)
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f005 fb64 	bl	8007930 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <initializeVl53l0x+0xa4>)
 800226a:	491a      	ldr	r1, [pc, #104]	; (80022d4 <initializeVl53l0x+0xa8>)
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f005 ffed 	bl	800824c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	2100      	movs	r1, #0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f005 f954 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800227c:	2201      	movs	r2, #1
 800227e:	2101      	movs	r1, #1
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f005 f94f 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002286:	f641 1299 	movw	r2, #6553	; 0x1999
 800228a:	2101      	movs	r1, #1
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f005 f9f9 	bl	8007684 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002292:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002296:	2100      	movs	r1, #0
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f005 f9f3 	bl	8007684 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 800229e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 ff20 	bl	80070e8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80022a8:	2212      	movs	r2, #18
 80022aa:	2100      	movs	r1, #0
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f004 ff41 	bl	8007134 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80022b2:	220e      	movs	r2, #14
 80022b4:	2101      	movs	r1, #1
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f004 ff3c 	bl	8007134 <VL53L0X_SetVcselPulsePeriod>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20001798 	.word	0x20001798
 80022c8:	20001942 	.word	0x20001942
 80022cc:	20001941 	.word	0x20001941
 80022d0:	20001940 	.word	0x20001940
 80022d4:	2000193c 	.word	0x2000193c

080022d8 <initializeAllSensors>:

void initializeAllSensors(uint8_t *tca_addr, VL53L0X_Dev_t *vl53l0x_s, KalmanFilter *filters) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	e011      	b.n	800230e <initializeAllSensors+0x36>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	b299      	uxth	r1, r3
 80022f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2301      	movs	r3, #1
 8002300:	4a3f      	ldr	r2, [pc, #252]	; (8002400 <initializeAllSensors+0x128>)
 8002302:	4840      	ldr	r0, [pc, #256]	; (8002404 <initializeAllSensors+0x12c>)
 8002304:	f000 fe60 	bl	8002fc8 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3301      	adds	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d9ea      	bls.n	80022ea <initializeAllSensors+0x12>
    }

    for (int i = 0; i < NUM_SENSOR; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e069      	b.n	80023ee <initializeAllSensors+0x116>
        uint8_t q = i / 12;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <initializeAllSensors+0x130>)
 800231e:	fb82 1203 	smull	r1, r2, r2, r3
 8002322:	1052      	asrs	r2, r2, #1
 8002324:	17db      	asrs	r3, r3, #31
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	75fb      	strb	r3, [r7, #23]
        uint8_t r = i % 12;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <initializeAllSensors+0x130>)
 800232e:	fb83 1302 	smull	r1, r3, r3, r2
 8002332:	1059      	asrs	r1, r3, #1
 8002334:	17d3      	asrs	r3, r2, #31
 8002336:	1ac9      	subs	r1, r1, r3
 8002338:	460b      	mov	r3, r1
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	440b      	add	r3, r1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	1ad1      	subs	r1, r2, r3
 8002342:	460b      	mov	r3, r1
 8002344:	75bb      	strb	r3, [r7, #22]
        uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	7dba      	ldrb	r2, [r7, #22]
 800234e:	2a07      	cmp	r2, #7
 8002350:	bf8c      	ite	hi
 8002352:	2201      	movhi	r2, #1
 8002354:	2200      	movls	r2, #0
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	4413      	add	r3, r2
 800235a:	757b      	strb	r3, [r7, #21]
        uint8_t channel = (r >= 8) ? r - 8 : r;
 800235c:	7dbb      	ldrb	r3, [r7, #22]
 800235e:	2b07      	cmp	r3, #7
 8002360:	d903      	bls.n	800236a <initializeAllSensors+0x92>
 8002362:	7dbb      	ldrb	r3, [r7, #22]
 8002364:	3b08      	subs	r3, #8
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e000      	b.n	800236c <initializeAllSensors+0x94>
 800236a:	7dbb      	ldrb	r3, [r7, #22]
 800236c:	753b      	strb	r3, [r7, #20]

        resetTcaDevicesExcept(active_device, tca_addr);
 800236e:	7d7b      	ldrb	r3, [r7, #21]
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff0c 	bl	8002190 <resetTcaDevicesExcept>
        setActiveTcaChannel(active_device, channel, tca_addr);
 8002378:	7d39      	ldrb	r1, [r7, #20]
 800237a:	7d7b      	ldrb	r3, [r7, #21]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff32 	bl	80021e8 <setActiveTcaChannel>

        initializeVl53l0x(&vl53l0x_s[i]);
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff4a 	bl	800222c <initializeVl53l0x>
        Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <initializeAllSensors+0x134>)
 80023aa:	edd2 7a00 	vldr	s15, [r2]
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <initializeAllSensors+0x138>)
 80023b0:	ed92 7a00 	vldr	s14, [r2]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <initializeAllSensors+0x13c>)
 80023b6:	edd2 6a00 	vldr	s13, [r2]
 80023ba:	eddf 1a17 	vldr	s3, [pc, #92]	; 8002418 <initializeAllSensors+0x140>
 80023be:	eeb0 1a66 	vmov.f32	s2, s13
 80023c2:	eef0 0a47 	vmov.f32	s1, s14
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fea8 	bl	8001120 <Kalman_Init>

        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r", i), 100);
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4912      	ldr	r1, [pc, #72]	; (800241c <initializeAllSensors+0x144>)
 80023d4:	4812      	ldr	r0, [pc, #72]	; (8002420 <initializeAllSensors+0x148>)
 80023d6:	f00d fa61 	bl	800f89c <siprintf>
 80023da:	4603      	mov	r3, r0
 80023dc:	b29a      	uxth	r2, r3
 80023de:	2364      	movs	r3, #100	; 0x64
 80023e0:	490f      	ldr	r1, [pc, #60]	; (8002420 <initializeAllSensors+0x148>)
 80023e2:	4810      	ldr	r0, [pc, #64]	; (8002424 <initializeAllSensors+0x14c>)
 80023e4:	f003 f9aa 	bl	800573c <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b23      	cmp	r3, #35	; 0x23
 80023f2:	dd92      	ble.n	800231a <initializeAllSensors+0x42>
    }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20005458 	.word	0x20005458
 8002404:	20001798 	.word	0x20001798
 8002408:	2aaaaaab 	.word	0x2aaaaaab
 800240c:	20000004 	.word	0x20000004
 8002410:	20000008 	.word	0x20000008
 8002414:	2000000c 	.word	0x2000000c
 8002418:	00000000 	.word	0x00000000
 800241c:	080125c8 	.word	0x080125c8
 8002420:	2000189c 	.word	0x2000189c
 8002424:	20001814 	.word	0x20001814

08002428 <excuteVl53l0x>:

void excuteVl53l0x(VL53L0X_Dev_t *Dev,int i) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8002432:	491e      	ldr	r1, [pc, #120]	; (80024ac <excuteVl53l0x+0x84>)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f005 ff1e 	bl	8008276 <VL53L0X_PerformContinuousRangingMeasurement>
    if (RangingData.RangeStatus == 0) {
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <excuteVl53l0x+0x84>)
 800243c:	7e1b      	ldrb	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d124      	bne.n	800248c <excuteVl53l0x+0x64>
        float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <excuteVl53l0x+0x88>)
 800244e:	4413      	add	r3, r2
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <excuteVl53l0x+0x84>)
 8002452:	8912      	ldrh	r2, [r2, #8]
 8002454:	ee07 2a90 	vmov	s15, r2
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fe7b 	bl	800115c <Kalman_Estimate>
 8002466:	ed87 0a03 	vstr	s0, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", filteredValue), 100);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7fe f89c 	bl	80005a8 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	490f      	ldr	r1, [pc, #60]	; (80024b4 <excuteVl53l0x+0x8c>)
 8002476:	4810      	ldr	r0, [pc, #64]	; (80024b8 <excuteVl53l0x+0x90>)
 8002478:	f00d fa10 	bl	800f89c <siprintf>
 800247c:	4603      	mov	r3, r0
 800247e:	b29a      	uxth	r2, r3
 8002480:	2364      	movs	r3, #100	; 0x64
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <excuteVl53l0x+0x90>)
 8002484:	480d      	ldr	r0, [pc, #52]	; (80024bc <excuteVl53l0x+0x94>)
 8002486:	f003 f959 	bl	800573c <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
    }
}
 800248a:	e00a      	b.n	80024a2 <excuteVl53l0x+0x7a>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <excuteVl53l0x+0x98>)
 800248e:	480a      	ldr	r0, [pc, #40]	; (80024b8 <excuteVl53l0x+0x90>)
 8002490:	f00d fa04 	bl	800f89c <siprintf>
 8002494:	4603      	mov	r3, r0
 8002496:	b29a      	uxth	r2, r3
 8002498:	2364      	movs	r3, #100	; 0x64
 800249a:	4907      	ldr	r1, [pc, #28]	; (80024b8 <excuteVl53l0x+0x90>)
 800249c:	4807      	ldr	r0, [pc, #28]	; (80024bc <excuteVl53l0x+0x94>)
 800249e:	f003 f94d 	bl	800573c <HAL_UART_Transmit>
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20001920 	.word	0x20001920
 80024b0:	20005188 	.word	0x20005188
 80024b4:	080125d8 	.word	0x080125d8
 80024b8:	2000189c 	.word	0x2000189c
 80024bc:	20001814 	.word	0x20001814
 80024c0:	080125e0 	.word	0x080125e0

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ca:	490e      	ldr	r1, [pc, #56]	; (8002504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e0:	4c0b      	ldr	r4, [pc, #44]	; (8002510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ee:	f7ff fd6d 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f00c fc37 	bl	800ed64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7ff faa1 	bl	8001a3c <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	2000107c 	.word	0x2000107c
  ldr r2, =_sidata
 8002508:	08027b14 	.word	0x08027b14
  ldr r2, =_sbss
 800250c:	20001080 	.word	0x20001080
  ldr r4, =_ebss
 8002510:	20005530 	.word	0x20005530

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>

08002516 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251a:	2003      	movs	r0, #3
 800251c:	f000 f94c 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002520:	200f      	movs	r0, #15
 8002522:	f000 f805 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002526:	f7ff fb9d 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f967 	bl	8002822 <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 f92f 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	20000154 	.word	0x20000154
 800258c:	20000150 	.word	0x20000150

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000154 	.word	0x20000154
 80025b4:	2000545c 	.word	0x2000545c

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	2000545c 	.word	0x2000545c

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000154 	.word	0x20000154

08002618 <__NVIC_SetPriorityGrouping>:
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <__NVIC_SetPriorityGrouping+0x40>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	4313      	orrs	r3, r2
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x40>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	05fa0000 	.word	0x05fa0000

08002660 <__NVIC_GetPriorityGrouping>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff3e 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff31 	bl	800267c <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa2 	bl	8002774 <SysTick_Config>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e054      	b.n	80028f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7f5b      	ldrb	r3, [r3, #29]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fa24 	bl	8001cac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	791b      	ldrb	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_CRC_Init+0xc4>)
 8002878:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0218 	bic.w	r2, r2, #24
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	e00c      	b.n	80028a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	461a      	mov	r2, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f834 	bl	8002904 <HAL_CRCEx_Polynomial_Set>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e028      	b.n	80028f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	795b      	ldrb	r3, [r3, #5]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f04f 32ff 	mov.w	r2, #4294967295
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	e004      	b.n	80028c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6912      	ldr	r2, [r2, #16]
 80028c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	04c11db7 	.word	0x04c11db7

08002904 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002914:	231f      	movs	r3, #31
 8002916:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002918:	bf00      	nop
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	613a      	str	r2, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HAL_CRCEx_Polynomial_Set+0x34>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b18      	cmp	r3, #24
 800293c:	d846      	bhi.n	80029cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	080029d3 	.word	0x080029d3
 8002948:	080029cd 	.word	0x080029cd
 800294c:	080029cd 	.word	0x080029cd
 8002950:	080029cd 	.word	0x080029cd
 8002954:	080029cd 	.word	0x080029cd
 8002958:	080029cd 	.word	0x080029cd
 800295c:	080029cd 	.word	0x080029cd
 8002960:	080029cd 	.word	0x080029cd
 8002964:	080029c1 	.word	0x080029c1
 8002968:	080029cd 	.word	0x080029cd
 800296c:	080029cd 	.word	0x080029cd
 8002970:	080029cd 	.word	0x080029cd
 8002974:	080029cd 	.word	0x080029cd
 8002978:	080029cd 	.word	0x080029cd
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029cd 	.word	0x080029cd
 8002984:	080029b5 	.word	0x080029b5
 8002988:	080029cd 	.word	0x080029cd
 800298c:	080029cd 	.word	0x080029cd
 8002990:	080029cd 	.word	0x080029cd
 8002994:	080029cd 	.word	0x080029cd
 8002998:	080029cd 	.word	0x080029cd
 800299c:	080029cd 	.word	0x080029cd
 80029a0:	080029cd 	.word	0x080029cd
 80029a4:	080029a9 	.word	0x080029a9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d913      	bls.n	80029d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029b2:	e010      	b.n	80029d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d90f      	bls.n	80029da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029be:	e00c      	b.n	80029da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	d90b      	bls.n	80029de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029ca:	e008      	b.n	80029de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	75fb      	strb	r3, [r7, #23]
      break;
 80029d0:	e006      	b.n	80029e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029d2:	bf00      	nop
 80029d4:	e004      	b.n	80029e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029de:	bf00      	nop
  }
  if (status == HAL_OK)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 0118 	bic.w	r1, r3, #24
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a1e:	f7ff fdcb 	bl	80025b8 <HAL_GetTick>
 8002a22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d008      	beq.n	8002a42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e052      	b.n	8002ae8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0216 	bic.w	r2, r2, #22
 8002a50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <HAL_DMA_Abort+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0208 	bic.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a92:	e013      	b.n	8002abc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a94:	f7ff fd90 	bl	80025b8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d90c      	bls.n	8002abc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e015      	b.n	8002ae8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e4      	bne.n	8002a94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	223f      	movs	r2, #63	; 0x3f
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00c      	b.n	8002b28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2205      	movs	r2, #5
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b42:	b2db      	uxtb	r3, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e175      	b.n	8002e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8164 	bne.w	8002e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_GPIO_Init+0x56>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d130      	bne.n	8002c08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0201 	and.w	r2, r3, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d017      	beq.n	8002c44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d123      	bne.n	8002c98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80be 	beq.w	8002e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cf2:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d037      	beq.n	8002d8e <HAL_GPIO_Init+0x23e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a57      	ldr	r2, [pc, #348]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_GPIO_Init+0x23a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a56      	ldr	r2, [pc, #344]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x236>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <HAL_GPIO_Init+0x338>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x232>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a54      	ldr	r2, [pc, #336]	; (8002e8c <HAL_GPIO_Init+0x33c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x22e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a53      	ldr	r2, [pc, #332]	; (8002e90 <HAL_GPIO_Init+0x340>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x22a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x344>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	; (8002e98 <HAL_GPIO_Init+0x348>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_GPIO_Init+0x34c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x350>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d66:	2309      	movs	r3, #9
 8002d68:	e012      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	e010      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00e      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d72:	2307      	movs	r3, #7
 8002d74:	e00c      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e00a      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f ae86 	bls.w	8002b70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021400 	.word	0x40021400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021c00 	.word	0x40021c00
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40022400 	.word	0x40022400
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe ff0c 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e006      	b.n	8002f30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d104      	bne.n	8002f42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_I2C_Init+0x11c>)
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	02008000 	.word	0x02008000

08002fc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	f040 80da 	bne.w	800319e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2C_Master_Transmit+0x30>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0d3      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1d8>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003000:	f7ff fada 	bl	80025b8 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2319      	movs	r3, #25
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fefb 	bl	8003e0e <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0be      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2221      	movs	r2, #33	; 0x21
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2210      	movs	r2, #16
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2bff      	cmp	r3, #255	; 0xff
 8003052:	d90e      	bls.n	8003072 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	b2da      	uxtb	r2, r3
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f001 f8e6 	bl	800423c <I2C_TransferConfig>
 8003070:	e06c      	b.n	800314c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f001 f8d5 	bl	800423c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003092:	e05b      	b.n	800314c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fef8 	bl	8003e8e <I2C_WaitOnTXISFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e07b      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d034      	beq.n	800314c <HAL_I2C_Master_Transmit+0x184>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d130      	bne.n	800314c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fe8a 	bl	8003e0e <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e04d      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d90e      	bls.n	800312c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	22ff      	movs	r2, #255	; 0xff
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	b2da      	uxtb	r2, r3
 800311a:	8979      	ldrh	r1, [r7, #10]
 800311c:	2300      	movs	r3, #0
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f001 f889 	bl	800423c <I2C_TransferConfig>
 800312a:	e00f      	b.n	800314c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	b2da      	uxtb	r2, r3
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	2300      	movs	r3, #0
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f001 f878 	bl	800423c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d19e      	bne.n	8003094 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fed7 	bl	8003f0e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e01a      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2220      	movs	r2, #32
 8003170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_I2C_Master_Transmit+0x1e4>)
 800317e:	400b      	ands	r3, r1
 8003180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
  }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	80002000 	.word	0x80002000
 80031ac:	fe00e800 	.word	0xfe00e800

080031b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	461a      	mov	r2, r3
 80031bc:	460b      	mov	r3, r1
 80031be:	817b      	strh	r3, [r7, #10]
 80031c0:	4613      	mov	r3, r2
 80031c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	f040 80db 	bne.w	8003388 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2C_Master_Receive+0x30>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0d4      	b.n	800338a <HAL_I2C_Master_Receive+0x1da>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e8:	f7ff f9e6 	bl	80025b8 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2319      	movs	r3, #25
 80031f4:	2201      	movs	r2, #1
 80031f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fe07 	bl	8003e0e <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0bf      	b.n	800338a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2222      	movs	r2, #34	; 0x22
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2210      	movs	r2, #16
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	893a      	ldrh	r2, [r7, #8]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	2bff      	cmp	r3, #255	; 0xff
 800323a:	d90e      	bls.n	800325a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	22ff      	movs	r2, #255	; 0xff
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	b2da      	uxtb	r2, r3
 8003248:	8979      	ldrh	r1, [r7, #10]
 800324a:	4b52      	ldr	r3, [pc, #328]	; (8003394 <HAL_I2C_Master_Receive+0x1e4>)
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fff2 	bl	800423c <I2C_TransferConfig>
 8003258:	e06d      	b.n	8003336 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	b2da      	uxtb	r2, r3
 800326a:	8979      	ldrh	r1, [r7, #10]
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_I2C_Master_Receive+0x1e4>)
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 ffe1 	bl	800423c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800327a:	e05c      	b.n	8003336 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6a39      	ldr	r1, [r7, #32]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fe81 	bl	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e07c      	b.n	800338a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d034      	beq.n	8003336 <HAL_I2C_Master_Receive+0x186>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d130      	bne.n	8003336 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	2200      	movs	r2, #0
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fd95 	bl	8003e0e <I2C_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e04d      	b.n	800338a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2bff      	cmp	r3, #255	; 0xff
 80032f6:	d90e      	bls.n	8003316 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	22ff      	movs	r2, #255	; 0xff
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	b2da      	uxtb	r2, r3
 8003304:	8979      	ldrh	r1, [r7, #10]
 8003306:	2300      	movs	r3, #0
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 ff94 	bl	800423c <I2C_TransferConfig>
 8003314:	e00f      	b.n	8003336 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	b2da      	uxtb	r2, r3
 8003326:	8979      	ldrh	r1, [r7, #10]
 8003328:	2300      	movs	r3, #0
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 ff83 	bl	800423c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d19d      	bne.n	800327c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	6a39      	ldr	r1, [r7, #32]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fde2 	bl	8003f0e <I2C_WaitOnSTOPFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01a      	b.n	800338a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_I2C_Master_Receive+0x1e8>)
 8003368:	400b      	ands	r3, r1
 800336a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	80002400 	.word	0x80002400
 8003398:	fe00e800 	.word	0xfe00e800

0800339c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
  }
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	09db      	lsrs	r3, r3, #7
 80033f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003414:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	0a9b      	lsrs	r3, r3, #10
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	09db      	lsrs	r3, r3, #7
 8003426:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f043 0208 	orr.w	r2, r3, #8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003442:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	0a5b      	lsrs	r3, r3, #9
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	09db      	lsrs	r3, r3, #7
 8003454:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f043 0202 	orr.w	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003470:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 030b 	and.w	r3, r3, #11
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb89 	bl	8003b9c <I2C_ITError>
  }
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
 80034c6:	4613      	mov	r3, r2
 80034c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <I2C_Slave_ISR_IT+0x24>
 8003532:	2302      	movs	r3, #2
 8003534:	e0ec      	b.n	8003710 <I2C_Slave_ISR_IT+0x1fe>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003556:	6939      	ldr	r1, [r7, #16]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f9bf 	bl	80038dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04d      	beq.n	8003606 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003572:	2b00      	cmp	r3, #0
 8003574:	d047      	beq.n	8003606 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d128      	bne.n	80035d2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b28      	cmp	r3, #40	; 0x28
 800358a:	d108      	bne.n	800359e <I2C_Slave_ISR_IT+0x8c>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003592:	d104      	bne.n	800359e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003594:	6939      	ldr	r1, [r7, #16]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 faaa 	bl	8003af0 <I2C_ITListenCplt>
 800359c:	e032      	b.n	8003604 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b29      	cmp	r3, #41	; 0x29
 80035a8:	d10e      	bne.n	80035c8 <I2C_Slave_ISR_IT+0xb6>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035b0:	d00a      	beq.n	80035c8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2210      	movs	r2, #16
 80035b8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fbe5 	bl	8003d8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f92d 	bl	8003820 <I2C_ITSlaveSeqCplt>
 80035c6:	e01d      	b.n	8003604 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2210      	movs	r2, #16
 80035ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80035d0:	e096      	b.n	8003700 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0204 	orr.w	r2, r3, #4
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <I2C_Slave_ISR_IT+0xe4>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f2:	f040 8085 	bne.w	8003700 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4619      	mov	r1, r3
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 facd 	bl	8003b9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003602:	e07d      	b.n	8003700 <I2C_Slave_ISR_IT+0x1ee>
 8003604:	e07c      	b.n	8003700 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d030      	beq.n	8003674 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800361a:	2b00      	cmp	r3, #0
 800361c:	d02a      	beq.n	8003674 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d018      	beq.n	800365a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d14f      	bne.n	8003704 <I2C_Slave_ISR_IT+0x1f2>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800366a:	d04b      	beq.n	8003704 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f8d7 	bl	8003820 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003672:	e047      	b.n	8003704 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	08db      	lsrs	r3, r3, #3
 8003684:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800368c:	6939      	ldr	r1, [r7, #16]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f842 	bl	8003718 <I2C_ITAddrCplt>
 8003694:	e037      	b.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d031      	beq.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d02b      	beq.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d018      	beq.n	80036ea <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80036e8:	e00d      	b.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f0:	d002      	beq.n	80036f8 <I2C_Slave_ISR_IT+0x1e6>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f891 	bl	8003820 <I2C_ITSlaveSeqCplt>
 80036fe:	e002      	b.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003704:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800372e:	2b28      	cmp	r3, #40	; 0x28
 8003730:	d16a      	bne.n	8003808 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b29b      	uxth	r3, r3
 800374c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003750:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800376c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d138      	bne.n	80037e8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	09db      	lsrs	r3, r3, #7
 800377a:	b29a      	uxth	r2, r3
 800377c:	89bb      	ldrh	r3, [r7, #12]
 800377e:	4053      	eors	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11c      	bne.n	80037c4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	2b02      	cmp	r3, #2
 800379e:	d13b      	bne.n	8003818 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2208      	movs	r2, #8
 80037ac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037b6:	89ba      	ldrh	r2, [r7, #12]
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fe7c 	bl	80034ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037c2:	e029      	b.n	8003818 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80037c4:	893b      	ldrh	r3, [r7, #8]
 80037c6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fd67 	bl	80042a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037da:	89ba      	ldrh	r2, [r7, #12]
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fe6a 	bl	80034ba <HAL_I2C_AddrCallback>
}
 80037e6:	e017      	b.n	8003818 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fd57 	bl	80042a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037fa:	89ba      	ldrh	r2, [r7, #12]
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fe5a 	bl	80034ba <HAL_I2C_AddrCallback>
}
 8003806:	e007      	b.n	8003818 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2208      	movs	r2, #8
 800380e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	0b9b      	lsrs	r3, r3, #14
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e00d      	b.n	8003872 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	0bdb      	lsrs	r3, r3, #15
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003870:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b29      	cmp	r3, #41	; 0x29
 800387c:	d112      	bne.n	80038a4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2228      	movs	r2, #40	; 0x28
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2221      	movs	r2, #33	; 0x21
 800388a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800388c:	2101      	movs	r1, #1
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fd06 	bl	80042a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fdf8 	bl	8003492 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038a2:	e017      	b.n	80038d4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b2a      	cmp	r3, #42	; 0x2a
 80038ae:	d111      	bne.n	80038d4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2228      	movs	r2, #40	; 0x28
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2222      	movs	r2, #34	; 0x22
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038be:	2102      	movs	r1, #2
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fced 	bl	80042a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fde9 	bl	80034a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b21      	cmp	r3, #33	; 0x21
 8003906:	d002      	beq.n	800390e <I2C_ITSlaveCplt+0x32>
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b29      	cmp	r3, #41	; 0x29
 800390c:	d108      	bne.n	8003920 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800390e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fcc4 	bl	80042a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2221      	movs	r2, #33	; 0x21
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
 800391e:	e00d      	b.n	800393c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b22      	cmp	r3, #34	; 0x22
 8003924:	d002      	beq.n	800392c <I2C_ITSlaveCplt+0x50>
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b2a      	cmp	r3, #42	; 0x2a
 800392a:	d107      	bne.n	800393c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800392c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fcb5 	bl	80042a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2222      	movs	r2, #34	; 0x22
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b64      	ldr	r3, [pc, #400]	; (8003ae8 <I2C_ITSlaveCplt+0x20c>)
 8003958:	400b      	ands	r3, r1
 800395a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fa14 	bl	8003d8a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	0b9b      	lsrs	r3, r3, #14
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d013      	beq.n	8003996 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800397c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003994:	e018      	b.n	80039c8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	0bdb      	lsrs	r3, r3, #15
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0304 	bic.w	r3, r3, #4
 80039da:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8a7 	bl	8003b9c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b28      	cmp	r3, #40	; 0x28
 8003a58:	d141      	bne.n	8003ade <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f847 	bl	8003af0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a62:	e03c      	b.n	8003ade <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6c:	d014      	beq.n	8003a98 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fed6 	bl	8003820 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <I2C_ITSlaveCplt+0x210>)
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fd20 	bl	80034d6 <HAL_I2C_ListenCpltCallback>
}
 8003a96:	e022      	b.n	8003ade <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b22      	cmp	r3, #34	; 0x22
 8003aa2:	d10e      	bne.n	8003ac2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fcf3 	bl	80034a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ac0:	e00d      	b.n	8003ade <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fcda 	bl	8003492 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	fe00e800 	.word	0xfe00e800
 8003aec:	ffff0000 	.word	0xffff0000

08003af0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <I2C_ITListenCplt+0xa8>)
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d022      	beq.n	8003b6e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f043 0204 	orr.w	r2, r3, #4
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b6e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fb94 	bl	80042a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fca4 	bl	80034d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	ffff0000 	.word	0xffff0000

08003b9c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a5d      	ldr	r2, [pc, #372]	; (8003d30 <I2C_ITError+0x194>)
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b28      	cmp	r3, #40	; 0x28
 8003bd2:	d005      	beq.n	8003be0 <I2C_ITError+0x44>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b29      	cmp	r3, #41	; 0x29
 8003bd8:	d002      	beq.n	8003be0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bde:	d10b      	bne.n	8003bf8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003be0:	2103      	movs	r1, #3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fb5c 	bl	80042a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2228      	movs	r2, #40	; 0x28
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <I2C_ITError+0x198>)
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bf6:	e011      	b.n	8003c1c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bf8:	f248 0103 	movw	r1, #32771	; 0x8003
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb4f 	bl	80042a0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b60      	cmp	r3, #96	; 0x60
 8003c0c:	d003      	beq.n	8003c16 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d039      	beq.n	8003c9e <I2C_ITError+0x102>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b11      	cmp	r3, #17
 8003c2e:	d002      	beq.n	8003c36 <I2C_ITError+0x9a>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b21      	cmp	r3, #33	; 0x21
 8003c34:	d133      	bne.n	8003c9e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c44:	d107      	bne.n	8003c56 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c54:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe ff6a 	bl	8002b34 <HAL_DMA_GetState>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d017      	beq.n	8003c96 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	4a33      	ldr	r2, [pc, #204]	; (8003d38 <I2C_ITError+0x19c>)
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe ff38 	bl	8002af0 <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d04d      	beq.n	8003d22 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c94:	e045      	b.n	8003d22 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f850 	bl	8003d3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c9c:	e041      	b.n	8003d22 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d039      	beq.n	8003d1a <I2C_ITError+0x17e>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b12      	cmp	r3, #18
 8003caa:	d002      	beq.n	8003cb2 <I2C_ITError+0x116>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b22      	cmp	r3, #34	; 0x22
 8003cb0:	d133      	bne.n	8003d1a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d107      	bne.n	8003cd2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ff2c 	bl	8002b34 <HAL_DMA_GetState>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d017      	beq.n	8003d12 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <I2C_ITError+0x19c>)
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fefa 	bl	8002af0 <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d10:	e009      	b.n	8003d26 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f812 	bl	8003d3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d18:	e005      	b.n	8003d26 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f80e 	bl	8003d3c <I2C_TreatErrorCallback>
  }
}
 8003d20:	e002      	b.n	8003d28 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d26:	bf00      	nop
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	ffff0000 	.word	0xffff0000
 8003d34:	08003513 	.word	0x08003513
 8003d38:	08003dd3 	.word	0x08003dd3

08003d3c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b60      	cmp	r3, #96	; 0x60
 8003d4e:	d10e      	bne.n	8003d6e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fbc9 	bl	80034fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d6c:	e009      	b.n	8003d82 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fbb4 	bl	80034ea <HAL_I2C_ErrorCallback>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d103      	bne.n	8003da8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d007      	beq.n	8003dc6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	619a      	str	r2, [r3, #24]
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	2200      	movs	r2, #0
 8003dee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff ff9b 	bl	8003d3c <I2C_TreatErrorCallback>
}
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1e:	e022      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d01e      	beq.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e28:	f7fe fbc6 	bl	80025b8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d0cd      	beq.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e9a:	e02c      	b.n	8003ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f8eb 	bl	800407c <I2C_IsErrorOccurred>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e02a      	b.n	8003f06 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d01e      	beq.n	8003ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb8:	f7fe fb7e 	bl	80025b8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d113      	bne.n	8003ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e007      	b.n	8003f06 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d1cb      	bne.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1a:	e028      	b.n	8003f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f8ab 	bl	800407c <I2C_IsErrorOccurred>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e026      	b.n	8003f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7fe fb42 	bl	80025b8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e007      	b.n	8003f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d1cf      	bne.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f94:	e064      	b.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f86e 	bl	800407c <I2C_IsErrorOccurred>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e062      	b.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d138      	bne.n	800402a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d105      	bne.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e04e      	b.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d107      	bne.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2204      	movs	r2, #4
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
 8003fee:	e002      	b.n	8003ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800400a:	400b      	ands	r3, r1
 800400c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e022      	b.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7fe fac5 	bl	80025b8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b04      	cmp	r3, #4
 800406c:	d193      	bne.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	fe00e800 	.word	0xfe00e800

0800407c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d068      	beq.n	800417a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2210      	movs	r2, #16
 80040ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040b0:	e049      	b.n	8004146 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d045      	beq.n	8004146 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fa7d 	bl	80025b8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_IsErrorOccurred+0x54>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13a      	bne.n	8004146 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d121      	bne.n	8004138 <I2C_IsErrorOccurred+0xbc>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d01d      	beq.n	8004138 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d01a      	beq.n	8004138 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004110:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004112:	f7fe fa51 	bl	80025b8 <HAL_GetTick>
 8004116:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004118:	e00e      	b.n	8004138 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800411a:	f7fe fa4d 	bl	80025b8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b19      	cmp	r3, #25
 8004126:	d907      	bls.n	8004138 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f043 0320 	orr.w	r3, r3, #32
 800412e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004136:	e006      	b.n	8004146 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d1e9      	bne.n	800411a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d003      	beq.n	800415c <I2C_IsErrorOccurred+0xe0>
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0aa      	beq.n	80040b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800415c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2220      	movs	r2, #32
 800416a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f043 0308 	orr.w	r3, r3, #8
 80041b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01c      	beq.n	800422a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff fdca 	bl	8003d8a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <I2C_IsErrorOccurred+0x1bc>)
 8004202:	400b      	ands	r3, r1
 8004204:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800422a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800422e:	4618      	mov	r0, r3
 8004230:	3728      	adds	r7, #40	; 0x28
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	fe00e800 	.word	0xfe00e800

0800423c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	817b      	strh	r3, [r7, #10]
 800424a:	4613      	mov	r3, r2
 800424c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004254:	7a7b      	ldrb	r3, [r7, #9]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	4313      	orrs	r3, r2
 8004266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800426a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	0d5b      	lsrs	r3, r3, #21
 8004276:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <I2C_TransferConfig+0x60>)
 800427c:	430b      	orrs	r3, r1
 800427e:	43db      	mvns	r3, r3
 8004280:	ea02 0103 	and.w	r1, r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	03ff63ff 	.word	0x03ff63ff

080042a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042b0:	887b      	ldrh	r3, [r7, #2]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00f      	beq.n	80042da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80042c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042ce:	2b28      	cmp	r3, #40	; 0x28
 80042d0:	d003      	beq.n	80042da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80042d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80042ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042f8:	2b28      	cmp	r3, #40	; 0x28
 80042fa:	d003      	beq.n	8004304 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004302:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004304:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da03      	bge.n	8004314 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004312:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	2b10      	cmp	r3, #16
 8004318:	d103      	bne.n	8004322 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	2b20      	cmp	r3, #32
 8004326:	d103      	bne.n	8004330 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f043 0320 	orr.w	r3, r3, #32
 800432e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d103      	bne.n	800433e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800433c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43da      	mvns	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	400a      	ands	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	d138      	bne.n	80043e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800437c:	2302      	movs	r3, #2
 800437e:	e032      	b.n	80043e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	d139      	bne.n	800447c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004412:	2302      	movs	r3, #2
 8004414:	e033      	b.n	800447e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2224      	movs	r2, #36	; 0x24
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_PWREx_EnableOverDrive+0x98>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a22      	ldr	r2, [pc, #136]	; (8004524 <HAL_PWREx_EnableOverDrive+0x98>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_PWREx_EnableOverDrive+0x98>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ba:	f7fe f87d 	bl	80025b8 <HAL_GetTick>
 80044be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044c0:	e009      	b.n	80044d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044c2:	f7fe f879 	bl	80025b8 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d0:	d901      	bls.n	80044d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e022      	b.n	800451c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e2:	d1ee      	bne.n	80044c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044e4:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f0:	f7fe f862 	bl	80025b8 <HAL_GetTick>
 80044f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044f6:	e009      	b.n	800450c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044f8:	f7fe f85e 	bl	80025b8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004506:	d901      	bls.n	800450c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e007      	b.n	800451c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004518:	d1ee      	bne.n	80044f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	40007000 	.word	0x40007000

0800452c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e291      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8087 	beq.w	800465e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004550:	4b96      	ldr	r3, [pc, #600]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b04      	cmp	r3, #4
 800455a:	d00c      	beq.n	8004576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455c:	4b93      	ldr	r3, [pc, #588]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d112      	bne.n	800458e <HAL_RCC_OscConfig+0x62>
 8004568:	4b90      	ldr	r3, [pc, #576]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004574:	d10b      	bne.n	800458e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004576:	4b8d      	ldr	r3, [pc, #564]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d06c      	beq.n	800465c <HAL_RCC_OscConfig+0x130>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d168      	bne.n	800465c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e26b      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x7a>
 8004598:	4b84      	ldr	r3, [pc, #528]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a83      	ldr	r2, [pc, #524]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e02e      	b.n	8004604 <HAL_RCC_OscConfig+0xd8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x9c>
 80045ae:	4b7f      	ldr	r3, [pc, #508]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7e      	ldr	r2, [pc, #504]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b7c      	ldr	r3, [pc, #496]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7b      	ldr	r2, [pc, #492]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xd8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0xc0>
 80045d2:	4b76      	ldr	r3, [pc, #472]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a75      	ldr	r2, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b73      	ldr	r3, [pc, #460]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a72      	ldr	r2, [pc, #456]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xd8>
 80045ec:	4b6f      	ldr	r3, [pc, #444]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6e      	ldr	r2, [pc, #440]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6b      	ldr	r2, [pc, #428]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd ffd4 	bl	80025b8 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd ffd0 	bl	80025b8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e21f      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b61      	ldr	r3, [pc, #388]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xe8>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd ffc0 	bl	80025b8 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd ffbc 	bl	80025b8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e20b      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b57      	ldr	r3, [pc, #348]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x110>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d069      	beq.n	800473e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800466a:	4b50      	ldr	r3, [pc, #320]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b08      	cmp	r3, #8
 8004680:	d11c      	bne.n	80046bc <HAL_RCC_OscConfig+0x190>
 8004682:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1df      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	493d      	ldr	r1, [pc, #244]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	e040      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d023      	beq.n	800470c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd ff72 	bl	80025b8 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fd ff6e 	bl	80025b8 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1bd      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	4b30      	ldr	r3, [pc, #192]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4929      	ldr	r1, [pc, #164]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]
 800470a:	e018      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd ff4e 	bl	80025b8 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004720:	f7fd ff4a 	bl	80025b8 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e199      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d038      	beq.n	80047bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d019      	beq.n	8004786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004756:	4a15      	ldr	r2, [pc, #84]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fd ff2b 	bl	80025b8 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004766:	f7fd ff27 	bl	80025b8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e176      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x23a>
 8004784:	e01a      	b.n	80047bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_RCC_OscConfig+0x280>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd ff11 	bl	80025b8 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479a:	f7fd ff0d 	bl	80025b8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d903      	bls.n	80047b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e15c      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
 80047ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b91      	ldr	r3, [pc, #580]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ee      	bne.n	800479a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a4 	beq.w	8004912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b8b      	ldr	r3, [pc, #556]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	4b88      	ldr	r3, [pc, #544]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	4a87      	ldr	r2, [pc, #540]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80047dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6413      	str	r3, [r2, #64]	; 0x40
 80047e2:	4b85      	ldr	r3, [pc, #532]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f2:	4b82      	ldr	r3, [pc, #520]	; (80049fc <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d118      	bne.n	8004830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80047fe:	4b7f      	ldr	r3, [pc, #508]	; (80049fc <HAL_RCC_OscConfig+0x4d0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a7e      	ldr	r2, [pc, #504]	; (80049fc <HAL_RCC_OscConfig+0x4d0>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480a:	f7fd fed5 	bl	80025b8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fd fed1 	bl	80025b8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	; 0x64
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e120      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004824:	4b75      	ldr	r3, [pc, #468]	; (80049fc <HAL_RCC_OscConfig+0x4d0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <HAL_RCC_OscConfig+0x31a>
 8004838:	4b6f      	ldr	r3, [pc, #444]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4a6e      	ldr	r2, [pc, #440]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	; 0x70
 8004844:	e02d      	b.n	80048a2 <HAL_RCC_OscConfig+0x376>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0x33c>
 800484e:	4b6a      	ldr	r3, [pc, #424]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4a69      	ldr	r2, [pc, #420]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	6713      	str	r3, [r2, #112]	; 0x70
 800485a:	4b67      	ldr	r3, [pc, #412]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a66      	ldr	r2, [pc, #408]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004860:	f023 0304 	bic.w	r3, r3, #4
 8004864:	6713      	str	r3, [r2, #112]	; 0x70
 8004866:	e01c      	b.n	80048a2 <HAL_RCC_OscConfig+0x376>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b05      	cmp	r3, #5
 800486e:	d10c      	bne.n	800488a <HAL_RCC_OscConfig+0x35e>
 8004870:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
 800487c:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a5d      	ldr	r2, [pc, #372]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
 8004888:	e00b      	b.n	80048a2 <HAL_RCC_OscConfig+0x376>
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	4a5a      	ldr	r2, [pc, #360]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	6713      	str	r3, [r2, #112]	; 0x70
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	4a57      	ldr	r2, [pc, #348]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d015      	beq.n	80048d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048aa:	f7fd fe85 	bl	80025b8 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fd fe81 	bl	80025b8 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0ce      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c8:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ee      	beq.n	80048b2 <HAL_RCC_OscConfig+0x386>
 80048d4:	e014      	b.n	8004900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fd fe6f 	bl	80025b8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd fe6b 	bl	80025b8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0b8      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f4:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ee      	bne.n	80048de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4a3b      	ldr	r2, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a4 	beq.w	8004a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800491c:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d06b      	beq.n	8004a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d149      	bne.n	80049c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004930:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a30      	ldr	r2, [pc, #192]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd fe3c 	bl	80025b8 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fd fe38 	bl	80025b8 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e087      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	4313      	orrs	r3, r2
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 800498a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800498e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 8004996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd fe0c 	bl	80025b8 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fd fe08 	bl	80025b8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e057      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x478>
 80049c2:	e04f      	b.n	8004a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd fdf2 	bl	80025b8 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fd fdee 	bl	80025b8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e03d      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_OscConfig+0x4cc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x4ac>
 80049f6:	e035      	b.n	8004a64 <HAL_RCC_OscConfig+0x538>
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x544>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d121      	bne.n	8004a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11a      	bne.n	8004a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d111      	bne.n	8004a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0d0      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d910      	bls.n	8004abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 020f 	bic.w	r2, r3, #15
 8004aa2:	4965      	ldr	r1, [pc, #404]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	494d      	ldr	r1, [pc, #308]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d040      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d115      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e073      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e06b      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 0203 	bic.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4936      	ldr	r1, [pc, #216]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fd fd26 	bl	80025b8 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fd fd22 	bl	80025b8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e053      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 020c 	and.w	r2, r3, #12
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1eb      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d210      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 020f 	bic.w	r2, r3, #15
 8004bae:	4922      	ldr	r1, [pc, #136]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e032      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c06:	f000 f821 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	490a      	ldr	r1, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x1cc>)
 8004c18:	5ccb      	ldrb	r3, [r1, r3]
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1d0>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1d4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fc82 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023c00 	.word	0x40023c00
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	08012618 	.word	0x08012618
 8004c44:	20000000 	.word	0x20000000
 8004c48:	20000150 	.word	0x20000150

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c50:	b094      	sub	sp, #80	; 0x50
 8004c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	647b      	str	r3, [r7, #68]	; 0x44
 8004c58:	2300      	movs	r3, #0
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c64:	4b79      	ldr	r3, [pc, #484]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d00d      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x40>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	f200 80e1 	bhi.w	8004e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x34>
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c7e:	e0db      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c80:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c84:	e0db      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c86:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c8a:	e0d8      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c8c:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c96:	4b6d      	ldr	r3, [pc, #436]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d063      	beq.n	8004d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	0159      	lsls	r1, r3, #5
 8004ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd0:	0150      	lsls	r0, r2, #5
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	1a51      	subs	r1, r2, r1
 8004cda:	6139      	str	r1, [r7, #16]
 8004cdc:	4629      	mov	r1, r5
 8004cde:	eb63 0301 	sbc.w	r3, r3, r1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	018b      	lsls	r3, r1, #6
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	018a      	lsls	r2, r1, #6
 8004cfe:	4651      	mov	r1, sl
 8004d00:	ebb2 0801 	subs.w	r8, r2, r1
 8004d04:	4659      	mov	r1, fp
 8004d06:	eb63 0901 	sbc.w	r9, r3, r1
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d1e:	4690      	mov	r8, r2
 8004d20:	4699      	mov	r9, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	eb18 0303 	adds.w	r3, r8, r3
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	eb49 0303 	adc.w	r3, r9, r3
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d3e:	4629      	mov	r1, r5
 8004d40:	024b      	lsls	r3, r1, #9
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d48:	4621      	mov	r1, r4
 8004d4a:	024a      	lsls	r2, r1, #9
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	2200      	movs	r2, #0
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5c:	f7fb ff54 	bl	8000c08 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4613      	mov	r3, r2
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	e058      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	2200      	movs	r2, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	4611      	mov	r1, r2
 8004d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	f04f 0000 	mov.w	r0, #0
 8004d8c:	f04f 0100 	mov.w	r1, #0
 8004d90:	0159      	lsls	r1, r3, #5
 8004d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d96:	0150      	lsls	r0, r2, #5
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004da2:	4649      	mov	r1, r9
 8004da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8004dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	00eb      	lsls	r3, r5, #3
 8004dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	4643      	mov	r3, r8
 8004dda:	18e3      	adds	r3, r4, r3
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	464b      	mov	r3, r9
 8004de0:	eb45 0303 	adc.w	r3, r5, r3
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df2:	4629      	mov	r1, r5
 8004df4:	028b      	lsls	r3, r1, #10
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	028a      	lsls	r2, r1, #10
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	2200      	movs	r2, #0
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	61fa      	str	r2, [r7, #28]
 8004e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e10:	f7fb fefa 	bl	8000c08 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	3301      	adds	r3, #1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3750      	adds	r7, #80	; 0x50
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	007a1200 	.word	0x007a1200

08004e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000000 	.word	0x20000000

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e74:	f7ff fff0 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0a9b      	lsrs	r3, r3, #10
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08012628 	.word	0x08012628

08004e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e9c:	f7ff ffdc 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0b5b      	lsrs	r3, r3, #13
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	08012628 	.word	0x08012628

08004ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee8:	4b69      	ldr	r3, [pc, #420]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4a68      	ldr	r2, [pc, #416]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	4b66      	ldr	r3, [pc, #408]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efc:	4964      	ldr	r1, [pc, #400]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	4959      	ldr	r1, [pc, #356]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f56:	4b4e      	ldr	r3, [pc, #312]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	494a      	ldr	r1, [pc, #296]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 808b 	beq.w	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb0:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fbc:	4b35      	ldr	r3, [pc, #212]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a34      	ldr	r2, [pc, #208]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc8:	f7fd faf6 	bl	80025b8 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd0:	f7fd faf2 	bl	80025b8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e357      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fe2:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fee:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d035      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	429a      	cmp	r2, r3
 800500a:	d02e      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800502e:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005034:	4b16      	ldr	r3, [pc, #88]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d114      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd faba 	bl	80025b8 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fd fab6 	bl	80025b8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e319      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ee      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005076:	d111      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005086:	400b      	ands	r3, r1
 8005088:	4901      	ldr	r1, [pc, #4]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
 800508e:	e00b      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005090:	40023800 	.word	0x40023800
 8005094:	40007000 	.word	0x40007000
 8005098:	0ffffcff 	.word	0x0ffffcff
 800509c:	4baa      	ldr	r3, [pc, #680]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4aa9      	ldr	r2, [pc, #676]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050a6:	6093      	str	r3, [r2, #8]
 80050a8:	4ba7      	ldr	r3, [pc, #668]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b4:	49a4      	ldr	r1, [pc, #656]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050c6:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050cc:	4a9e      	ldr	r2, [pc, #632]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050d6:	4b9c      	ldr	r3, [pc, #624]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	4999      	ldr	r1, [pc, #612]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f4:	4b94      	ldr	r3, [pc, #592]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	4991      	ldr	r1, [pc, #580]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005116:	4b8c      	ldr	r3, [pc, #560]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005124:	4988      	ldr	r1, [pc, #544]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005138:	4b83      	ldr	r3, [pc, #524]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005146:	4980      	ldr	r1, [pc, #512]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800515a:	4b7b      	ldr	r3, [pc, #492]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	4977      	ldr	r1, [pc, #476]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517c:	4b72      	ldr	r3, [pc, #456]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	496f      	ldr	r1, [pc, #444]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519e:	4b6a      	ldr	r3, [pc, #424]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f023 020c 	bic.w	r2, r3, #12
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	4966      	ldr	r1, [pc, #408]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051c0:	4b61      	ldr	r3, [pc, #388]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	495e      	ldr	r1, [pc, #376]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e2:	4b59      	ldr	r3, [pc, #356]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	4955      	ldr	r1, [pc, #340]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005204:	4b50      	ldr	r3, [pc, #320]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	494d      	ldr	r1, [pc, #308]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005226:	4b48      	ldr	r3, [pc, #288]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	4944      	ldr	r1, [pc, #272]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005248:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	493c      	ldr	r1, [pc, #240]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800526a:	4b37      	ldr	r3, [pc, #220]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005278:	4933      	ldr	r1, [pc, #204]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800528c:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529a:	492b      	ldr	r1, [pc, #172]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052bc:	4922      	ldr	r1, [pc, #136]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d101      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fc:	4912      	ldr	r1, [pc, #72]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005320:	4909      	ldr	r1, [pc, #36]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d006      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 80d9 	beq.w	80054ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a01      	ldr	r2, [pc, #4]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005346:	e001      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005348:	40023800 	.word	0x40023800
 800534c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534e:	f7fd f933 	bl	80025b8 <HAL_GetTick>
 8005352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005356:	f7fd f92f 	bl	80025b8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	; 0x64
 8005362:	d901      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e194      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005368:	4b6c      	ldr	r3, [pc, #432]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d021      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11d      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005388:	4b64      	ldr	r3, [pc, #400]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005396:	4b61      	ldr	r3, [pc, #388]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539c:	0e1b      	lsrs	r3, r3, #24
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	019a      	lsls	r2, r3, #6
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	071b      	lsls	r3, r3, #28
 80053bc:	4957      	ldr	r1, [pc, #348]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02e      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ee:	d129      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053f0:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	0f1b      	lsrs	r3, r3, #28
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	019a      	lsls	r2, r3, #6
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	431a      	orrs	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	071b      	lsls	r3, r3, #28
 8005424:	493d      	ldr	r1, [pc, #244]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800542c:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005432:	f023 021f 	bic.w	r2, r3, #31
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	3b01      	subs	r3, #1
 800543c:	4937      	ldr	r1, [pc, #220]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01d      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005450:	4b32      	ldr	r3, [pc, #200]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005456:	0e1b      	lsrs	r3, r3, #24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005464:	0f1b      	lsrs	r3, r3, #28
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	019a      	lsls	r2, r3, #6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	431a      	orrs	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	071b      	lsls	r3, r3, #28
 8005484:	4925      	ldr	r1, [pc, #148]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d011      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	019a      	lsls	r2, r3, #6
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	071b      	lsls	r3, r3, #28
 80054b4:	4919      	ldr	r1, [pc, #100]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c8:	f7fd f876 	bl	80025b8 <HAL_GetTick>
 80054cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d0:	f7fd f872 	bl	80025b8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	; 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e0d7      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	f040 80cd 	bne.w	8005690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a08      	ldr	r2, [pc, #32]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005502:	f7fd f859 	bl	80025b8 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005508:	e00a      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800550a:	f7fd f855 	bl	80025b8 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b64      	cmp	r3, #100	; 0x64
 8005516:	d903      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0ba      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800551c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005520:	4b5e      	ldr	r3, [pc, #376]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552c:	d0ed      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02e      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d12a      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005556:	4b51      	ldr	r3, [pc, #324]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	0f1b      	lsrs	r3, r3, #28
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	019a      	lsls	r2, r3, #6
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	071b      	lsls	r3, r3, #28
 800558a:	4944      	ldr	r1, [pc, #272]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005592:	4b42      	ldr	r3, [pc, #264]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	3b01      	subs	r3, #1
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	493d      	ldr	r1, [pc, #244]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c0:	d11d      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055c2:	4b36      	ldr	r3, [pc, #216]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	0e1b      	lsrs	r3, r3, #24
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055d0:	4b32      	ldr	r3, [pc, #200]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	0f1b      	lsrs	r3, r3, #28
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	019a      	lsls	r2, r3, #6
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	431a      	orrs	r2, r3
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	071b      	lsls	r3, r3, #28
 80055f6:	4929      	ldr	r1, [pc, #164]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d028      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	0e1b      	lsrs	r3, r3, #24
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005618:	4b20      	ldr	r3, [pc, #128]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	019a      	lsls	r2, r3, #6
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	431a      	orrs	r2, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	071b      	lsls	r3, r3, #28
 800563e:	4917      	ldr	r1, [pc, #92]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005646:	4b15      	ldr	r3, [pc, #84]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	4911      	ldr	r1, [pc, #68]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800565c:	4b0f      	ldr	r3, [pc, #60]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0e      	ldr	r2, [pc, #56]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005668:	f7fc ffa6 	bl	80025b8 <HAL_GetTick>
 800566c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005670:	f7fc ffa2 	bl	80025b8 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	; 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e007      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568e:	d1ef      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800

080056a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e040      	b.n	8005734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc fb82 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2224      	movs	r2, #36	; 0x24
 80056cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fc66 	bl	8005fb0 <UART_SetConfig>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e022      	b.n	8005734 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 febe 	bl	8006478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800570a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800571a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 ff45 	bl	80065bc <UART_CheckIdleState>
 8005732:	4603      	mov	r3, r0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005750:	2b20      	cmp	r3, #32
 8005752:	d171      	bne.n	8005838 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Transmit+0x24>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e06a      	b.n	800583a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2221      	movs	r2, #33	; 0x21
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005772:	f7fc ff21 	bl	80025b8 <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d108      	bne.n	80057a4 <HAL_UART_Transmit+0x68>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e003      	b.n	80057ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ac:	e02c      	b.n	8005808 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 ff36 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e038      	b.n	800583a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	3302      	adds	r3, #2
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e007      	b.n	80057f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1cc      	bne.n	80057ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2200      	movs	r2, #0
 800581c:	2140      	movs	r1, #64	; 0x40
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 ff03 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e005      	b.n	800583a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b08a      	sub	sp, #40	; 0x28
 8005846:	af02      	add	r7, sp, #8
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	603b      	str	r3, [r7, #0]
 800584e:	4613      	mov	r3, r2
 8005850:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005858:	2b20      	cmp	r3, #32
 800585a:	f040 80b1 	bne.w	80059c0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_UART_Receive+0x28>
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0a9      	b.n	80059c2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2222      	movs	r2, #34	; 0x22
 800587a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005884:	f7fc fe98 	bl	80025b8 <HAL_GetTick>
 8005888:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d10e      	bne.n	80058c2 <HAL_UART_Receive+0x80>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <HAL_UART_Receive+0x76>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058b6:	e02d      	b.n	8005914 <HAL_UART_Receive+0xd2>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	22ff      	movs	r2, #255	; 0xff
 80058bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058c0:	e028      	b.n	8005914 <HAL_UART_Receive+0xd2>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <HAL_UART_Receive+0xa4>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <HAL_UART_Receive+0x9a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058da:	e01b      	b.n	8005914 <HAL_UART_Receive+0xd2>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	227f      	movs	r2, #127	; 0x7f
 80058e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058e4:	e016      	b.n	8005914 <HAL_UART_Receive+0xd2>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ee:	d10d      	bne.n	800590c <HAL_UART_Receive+0xca>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <HAL_UART_Receive+0xc0>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	227f      	movs	r2, #127	; 0x7f
 80058fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005900:	e008      	b.n	8005914 <HAL_UART_Receive+0xd2>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	223f      	movs	r2, #63	; 0x3f
 8005906:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800590a:	e003      	b.n	8005914 <HAL_UART_Receive+0xd2>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800591a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005924:	d108      	bne.n	8005938 <HAL_UART_Receive+0xf6>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e003      	b.n	8005940 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005940:	e032      	b.n	80059a8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	2120      	movs	r1, #32
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fe6c 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e032      	b.n	80059c2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10c      	bne.n	800597c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b29a      	uxth	r2, r3
 800596a:	8a7b      	ldrh	r3, [r7, #18]
 800596c:	4013      	ands	r3, r2
 800596e:	b29a      	uxth	r2, r3
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	3302      	adds	r3, #2
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e00c      	b.n	8005996 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	b2da      	uxtb	r2, r3
 8005984:	8a7b      	ldrh	r3, [r7, #18]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4013      	ands	r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	3301      	adds	r3, #1
 8005994:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1c6      	bne.n	8005942 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e000      	b.n	80059c2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
  }
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b0ba      	sub	sp, #232	; 0xe8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059fa:	4013      	ands	r3, r2
 80059fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d115      	bne.n	8005a34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8297 	beq.w	8005f58 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
      }
      return;
 8005a32:	e291      	b.n	8005f58 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8117 	beq.w	8005c6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a4e:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <HAL_UART_IRQHandler+0x298>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 810a 	beq.w	8005c6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_UART_IRQHandler+0xbc>
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7e:	f043 0201 	orr.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xec>
 8005a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x11c>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d105      	bne.n	8005b0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	f043 0208 	orr.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <HAL_UART_IRQHandler+0x18a>
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 81fd 	beq.w	8005f5c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04f      	beq.n	8005c4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fe01 	bl	80067b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d141      	bne.n	8005c46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1d9      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d013      	beq.n	8005c3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1a:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <HAL_UART_IRQHandler+0x29c>)
 8005c1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fc ff64 	bl	8002af0 <HAL_DMA_Abort_IT>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d017      	beq.n	8005c5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	e00f      	b.n	8005c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f9a0 	bl	8005f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	e00b      	b.n	8005c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f99c 	bl	8005f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4c:	e007      	b.n	8005c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f998 	bl	8005f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c5c:	e17e      	b.n	8005f5c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5e:	bf00      	nop
    return;
 8005c60:	e17c      	b.n	8005f5c <HAL_UART_IRQHandler+0x590>
 8005c62:	bf00      	nop
 8005c64:	04000120 	.word	0x04000120
 8005c68:	0800687f 	.word	0x0800687f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	f040 814c 	bne.w	8005f0e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8145 	beq.w	8005f0e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 813e 	beq.w	8005f0e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2210      	movs	r2, #16
 8005c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	f040 80b6 	bne.w	8005e16 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8150 	beq.w	8005f60 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f080 8148 	bcs.w	8005f60 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce4:	f000 8086 	beq.w	8005df4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1da      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e1      	bne.n	8005d32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e3      	bne.n	8005d6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc4:	f023 0310 	bic.w	r3, r3, #16
 8005dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e4      	bne.n	8005db4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fc fe0e 	bl	8002a10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f8c2 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e14:	e0a4      	b.n	8005f60 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8096 	beq.w	8005f64 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8091 	beq.w	8005f64 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e64:	647b      	str	r3, [r7, #68]	; 0x44
 8005e66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e4      	bne.n	8005e42 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	623b      	str	r3, [r7, #32]
   return(result);
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e9c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e3      	bne.n	8005e78 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	69b9      	ldr	r1, [r7, #24]
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e4      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f846 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f0c:	e02a      	b.n	8005f64 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00e      	beq.n	8005f38 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01c      	beq.n	8005f68 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
    }
    return;
 8005f36:	e017      	b.n	8005f68 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d012      	beq.n	8005f6a <HAL_UART_IRQHandler+0x59e>
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fcaa 	bl	80068aa <UART_EndTransmit_IT>
    return;
 8005f56:	e008      	b.n	8005f6a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f58:	bf00      	nop
 8005f5a:	e006      	b.n	8005f6a <HAL_UART_IRQHandler+0x59e>
    return;
 8005f5c:	bf00      	nop
 8005f5e:	e004      	b.n	8005f6a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_UART_IRQHandler+0x59e>
    return;
 8005f68:	bf00      	nop
  }

}
 8005f6a:	37e8      	adds	r7, #232	; 0xe8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4ba6      	ldr	r3, [pc, #664]	; (8006274 <UART_SetConfig+0x2c4>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	6979      	ldr	r1, [r7, #20]
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a94      	ldr	r2, [pc, #592]	; (8006278 <UART_SetConfig+0x2c8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d120      	bne.n	800606e <UART_SetConfig+0xbe>
 800602c:	4b93      	ldr	r3, [pc, #588]	; (800627c <UART_SetConfig+0x2cc>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b03      	cmp	r3, #3
 8006038:	d816      	bhi.n	8006068 <UART_SetConfig+0xb8>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <UART_SetConfig+0x90>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006051 	.word	0x08006051
 8006044:	0800605d 	.word	0x0800605d
 8006048:	08006057 	.word	0x08006057
 800604c:	08006063 	.word	0x08006063
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e150      	b.n	80062f8 <UART_SetConfig+0x348>
 8006056:	2302      	movs	r3, #2
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e14d      	b.n	80062f8 <UART_SetConfig+0x348>
 800605c:	2304      	movs	r3, #4
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e14a      	b.n	80062f8 <UART_SetConfig+0x348>
 8006062:	2308      	movs	r3, #8
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e147      	b.n	80062f8 <UART_SetConfig+0x348>
 8006068:	2310      	movs	r3, #16
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e144      	b.n	80062f8 <UART_SetConfig+0x348>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a83      	ldr	r2, [pc, #524]	; (8006280 <UART_SetConfig+0x2d0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d132      	bne.n	80060de <UART_SetConfig+0x12e>
 8006078:	4b80      	ldr	r3, [pc, #512]	; (800627c <UART_SetConfig+0x2cc>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f003 030c 	and.w	r3, r3, #12
 8006082:	2b0c      	cmp	r3, #12
 8006084:	d828      	bhi.n	80060d8 <UART_SetConfig+0x128>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <UART_SetConfig+0xdc>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060d9 	.word	0x080060d9
 8006094:	080060d9 	.word	0x080060d9
 8006098:	080060d9 	.word	0x080060d9
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060c7 	.word	0x080060c7
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060d9 	.word	0x080060d9
 80060bc:	080060d3 	.word	0x080060d3
 80060c0:	2300      	movs	r3, #0
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e118      	b.n	80062f8 <UART_SetConfig+0x348>
 80060c6:	2302      	movs	r3, #2
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e115      	b.n	80062f8 <UART_SetConfig+0x348>
 80060cc:	2304      	movs	r3, #4
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e112      	b.n	80062f8 <UART_SetConfig+0x348>
 80060d2:	2308      	movs	r3, #8
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e10f      	b.n	80062f8 <UART_SetConfig+0x348>
 80060d8:	2310      	movs	r3, #16
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e10c      	b.n	80062f8 <UART_SetConfig+0x348>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a68      	ldr	r2, [pc, #416]	; (8006284 <UART_SetConfig+0x2d4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d120      	bne.n	800612a <UART_SetConfig+0x17a>
 80060e8:	4b64      	ldr	r3, [pc, #400]	; (800627c <UART_SetConfig+0x2cc>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d013      	beq.n	800611e <UART_SetConfig+0x16e>
 80060f6:	2b30      	cmp	r3, #48	; 0x30
 80060f8:	d814      	bhi.n	8006124 <UART_SetConfig+0x174>
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d009      	beq.n	8006112 <UART_SetConfig+0x162>
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d810      	bhi.n	8006124 <UART_SetConfig+0x174>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <UART_SetConfig+0x15c>
 8006106:	2b10      	cmp	r3, #16
 8006108:	d006      	beq.n	8006118 <UART_SetConfig+0x168>
 800610a:	e00b      	b.n	8006124 <UART_SetConfig+0x174>
 800610c:	2300      	movs	r3, #0
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e0f2      	b.n	80062f8 <UART_SetConfig+0x348>
 8006112:	2302      	movs	r3, #2
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e0ef      	b.n	80062f8 <UART_SetConfig+0x348>
 8006118:	2304      	movs	r3, #4
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e0ec      	b.n	80062f8 <UART_SetConfig+0x348>
 800611e:	2308      	movs	r3, #8
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e0e9      	b.n	80062f8 <UART_SetConfig+0x348>
 8006124:	2310      	movs	r3, #16
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e0e6      	b.n	80062f8 <UART_SetConfig+0x348>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a56      	ldr	r2, [pc, #344]	; (8006288 <UART_SetConfig+0x2d8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d120      	bne.n	8006176 <UART_SetConfig+0x1c6>
 8006134:	4b51      	ldr	r3, [pc, #324]	; (800627c <UART_SetConfig+0x2cc>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800613e:	2bc0      	cmp	r3, #192	; 0xc0
 8006140:	d013      	beq.n	800616a <UART_SetConfig+0x1ba>
 8006142:	2bc0      	cmp	r3, #192	; 0xc0
 8006144:	d814      	bhi.n	8006170 <UART_SetConfig+0x1c0>
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d009      	beq.n	800615e <UART_SetConfig+0x1ae>
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d810      	bhi.n	8006170 <UART_SetConfig+0x1c0>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <UART_SetConfig+0x1a8>
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d006      	beq.n	8006164 <UART_SetConfig+0x1b4>
 8006156:	e00b      	b.n	8006170 <UART_SetConfig+0x1c0>
 8006158:	2300      	movs	r3, #0
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e0cc      	b.n	80062f8 <UART_SetConfig+0x348>
 800615e:	2302      	movs	r3, #2
 8006160:	77fb      	strb	r3, [r7, #31]
 8006162:	e0c9      	b.n	80062f8 <UART_SetConfig+0x348>
 8006164:	2304      	movs	r3, #4
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e0c6      	b.n	80062f8 <UART_SetConfig+0x348>
 800616a:	2308      	movs	r3, #8
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e0c3      	b.n	80062f8 <UART_SetConfig+0x348>
 8006170:	2310      	movs	r3, #16
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e0c0      	b.n	80062f8 <UART_SetConfig+0x348>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a44      	ldr	r2, [pc, #272]	; (800628c <UART_SetConfig+0x2dc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d125      	bne.n	80061cc <UART_SetConfig+0x21c>
 8006180:	4b3e      	ldr	r3, [pc, #248]	; (800627c <UART_SetConfig+0x2cc>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618e:	d017      	beq.n	80061c0 <UART_SetConfig+0x210>
 8006190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006194:	d817      	bhi.n	80061c6 <UART_SetConfig+0x216>
 8006196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619a:	d00b      	beq.n	80061b4 <UART_SetConfig+0x204>
 800619c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a0:	d811      	bhi.n	80061c6 <UART_SetConfig+0x216>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <UART_SetConfig+0x1fe>
 80061a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061aa:	d006      	beq.n	80061ba <UART_SetConfig+0x20a>
 80061ac:	e00b      	b.n	80061c6 <UART_SetConfig+0x216>
 80061ae:	2300      	movs	r3, #0
 80061b0:	77fb      	strb	r3, [r7, #31]
 80061b2:	e0a1      	b.n	80062f8 <UART_SetConfig+0x348>
 80061b4:	2302      	movs	r3, #2
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e09e      	b.n	80062f8 <UART_SetConfig+0x348>
 80061ba:	2304      	movs	r3, #4
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e09b      	b.n	80062f8 <UART_SetConfig+0x348>
 80061c0:	2308      	movs	r3, #8
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e098      	b.n	80062f8 <UART_SetConfig+0x348>
 80061c6:	2310      	movs	r3, #16
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e095      	b.n	80062f8 <UART_SetConfig+0x348>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2f      	ldr	r2, [pc, #188]	; (8006290 <UART_SetConfig+0x2e0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d125      	bne.n	8006222 <UART_SetConfig+0x272>
 80061d6:	4b29      	ldr	r3, [pc, #164]	; (800627c <UART_SetConfig+0x2cc>)
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e4:	d017      	beq.n	8006216 <UART_SetConfig+0x266>
 80061e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ea:	d817      	bhi.n	800621c <UART_SetConfig+0x26c>
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f0:	d00b      	beq.n	800620a <UART_SetConfig+0x25a>
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f6:	d811      	bhi.n	800621c <UART_SetConfig+0x26c>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <UART_SetConfig+0x254>
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006200:	d006      	beq.n	8006210 <UART_SetConfig+0x260>
 8006202:	e00b      	b.n	800621c <UART_SetConfig+0x26c>
 8006204:	2301      	movs	r3, #1
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e076      	b.n	80062f8 <UART_SetConfig+0x348>
 800620a:	2302      	movs	r3, #2
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e073      	b.n	80062f8 <UART_SetConfig+0x348>
 8006210:	2304      	movs	r3, #4
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e070      	b.n	80062f8 <UART_SetConfig+0x348>
 8006216:	2308      	movs	r3, #8
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e06d      	b.n	80062f8 <UART_SetConfig+0x348>
 800621c:	2310      	movs	r3, #16
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e06a      	b.n	80062f8 <UART_SetConfig+0x348>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <UART_SetConfig+0x2e4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d138      	bne.n	800629e <UART_SetConfig+0x2ee>
 800622c:	4b13      	ldr	r3, [pc, #76]	; (800627c <UART_SetConfig+0x2cc>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800623a:	d017      	beq.n	800626c <UART_SetConfig+0x2bc>
 800623c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006240:	d82a      	bhi.n	8006298 <UART_SetConfig+0x2e8>
 8006242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006246:	d00b      	beq.n	8006260 <UART_SetConfig+0x2b0>
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624c:	d824      	bhi.n	8006298 <UART_SetConfig+0x2e8>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <UART_SetConfig+0x2aa>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d006      	beq.n	8006266 <UART_SetConfig+0x2b6>
 8006258:	e01e      	b.n	8006298 <UART_SetConfig+0x2e8>
 800625a:	2300      	movs	r3, #0
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e04b      	b.n	80062f8 <UART_SetConfig+0x348>
 8006260:	2302      	movs	r3, #2
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e048      	b.n	80062f8 <UART_SetConfig+0x348>
 8006266:	2304      	movs	r3, #4
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e045      	b.n	80062f8 <UART_SetConfig+0x348>
 800626c:	2308      	movs	r3, #8
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e042      	b.n	80062f8 <UART_SetConfig+0x348>
 8006272:	bf00      	nop
 8006274:	efff69f3 	.word	0xefff69f3
 8006278:	40011000 	.word	0x40011000
 800627c:	40023800 	.word	0x40023800
 8006280:	40004400 	.word	0x40004400
 8006284:	40004800 	.word	0x40004800
 8006288:	40004c00 	.word	0x40004c00
 800628c:	40005000 	.word	0x40005000
 8006290:	40011400 	.word	0x40011400
 8006294:	40007800 	.word	0x40007800
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e02c      	b.n	80062f8 <UART_SetConfig+0x348>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a72      	ldr	r2, [pc, #456]	; (800646c <UART_SetConfig+0x4bc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d125      	bne.n	80062f4 <UART_SetConfig+0x344>
 80062a8:	4b71      	ldr	r3, [pc, #452]	; (8006470 <UART_SetConfig+0x4c0>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062b6:	d017      	beq.n	80062e8 <UART_SetConfig+0x338>
 80062b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062bc:	d817      	bhi.n	80062ee <UART_SetConfig+0x33e>
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c2:	d00b      	beq.n	80062dc <UART_SetConfig+0x32c>
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c8:	d811      	bhi.n	80062ee <UART_SetConfig+0x33e>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <UART_SetConfig+0x326>
 80062ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062d2:	d006      	beq.n	80062e2 <UART_SetConfig+0x332>
 80062d4:	e00b      	b.n	80062ee <UART_SetConfig+0x33e>
 80062d6:	2300      	movs	r3, #0
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e00d      	b.n	80062f8 <UART_SetConfig+0x348>
 80062dc:	2302      	movs	r3, #2
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e00a      	b.n	80062f8 <UART_SetConfig+0x348>
 80062e2:	2304      	movs	r3, #4
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e007      	b.n	80062f8 <UART_SetConfig+0x348>
 80062e8:	2308      	movs	r3, #8
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e004      	b.n	80062f8 <UART_SetConfig+0x348>
 80062ee:	2310      	movs	r3, #16
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e001      	b.n	80062f8 <UART_SetConfig+0x348>
 80062f4:	2310      	movs	r3, #16
 80062f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	d15b      	bne.n	80063ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d828      	bhi.n	800635a <UART_SetConfig+0x3aa>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x360>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	0800635b 	.word	0x0800635b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800635b 	.word	0x0800635b
 8006328:	0800635b 	.word	0x0800635b
 800632c:	0800635b 	.word	0x0800635b
 8006330:	08006353 	.word	0x08006353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006334:	f7fe fd9c 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8006338:	61b8      	str	r0, [r7, #24]
        break;
 800633a:	e013      	b.n	8006364 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fe fdac 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 8006340:	61b8      	str	r0, [r7, #24]
        break;
 8006342:	e00f      	b.n	8006364 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006344:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <UART_SetConfig+0x4c4>)
 8006346:	61bb      	str	r3, [r7, #24]
        break;
 8006348:	e00c      	b.n	8006364 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634a:	f7fe fc7f 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 800634e:	61b8      	str	r0, [r7, #24]
        break;
 8006350:	e008      	b.n	8006364 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006356:	61bb      	str	r3, [r7, #24]
        break;
 8006358:	e004      	b.n	8006364 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	77bb      	strb	r3, [r7, #30]
        break;
 8006362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d074      	beq.n	8006454 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	005a      	lsls	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d916      	bls.n	80063b4 <UART_SetConfig+0x404>
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d212      	bcs.n	80063b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f023 030f 	bic.w	r3, r3, #15
 8006396:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	b29b      	uxth	r3, r3
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	89fb      	ldrh	r3, [r7, #14]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	89fa      	ldrh	r2, [r7, #14]
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	e04f      	b.n	8006454 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	77bb      	strb	r3, [r7, #30]
 80063b8:	e04c      	b.n	8006454 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d828      	bhi.n	8006412 <UART_SetConfig+0x462>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x418>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7fe fd40 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 80063f0:	61b8      	str	r0, [r7, #24]
        break;
 80063f2:	e013      	b.n	800641c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fe fd50 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 80063f8:	61b8      	str	r0, [r7, #24]
        break;
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <UART_SetConfig+0x4c4>)
 80063fe:	61bb      	str	r3, [r7, #24]
        break;
 8006400:	e00c      	b.n	800641c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fe fc23 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006406:	61b8      	str	r0, [r7, #24]
        break;
 8006408:	e008      	b.n	800641c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	61bb      	str	r3, [r7, #24]
        break;
 8006410:	e004      	b.n	800641c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	77bb      	strb	r3, [r7, #30]
        break;
 800641a:	bf00      	nop
    }

    if (pclk != 0U)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	085a      	lsrs	r2, r3, #1
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	441a      	add	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	fbb2 f3f3 	udiv	r3, r2, r3
 8006434:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d909      	bls.n	8006450 <UART_SetConfig+0x4a0>
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006442:	d205      	bcs.n	8006450 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	e001      	b.n	8006454 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006460:	7fbb      	ldrb	r3, [r7, #30]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40007c00 	.word	0x40007c00
 8006470:	40023800 	.word	0x40023800
 8006474:	00f42400 	.word	0x00f42400

08006478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01a      	beq.n	800658e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006576:	d10a      	bne.n	800658e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	605a      	str	r2, [r3, #4]
  }
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065cc:	f7fb fff4 	bl	80025b8 <HAL_GetTick>
 80065d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d10e      	bne.n	80065fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f81b 	bl	800662a <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e011      	b.n	8006622 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b09c      	sub	sp, #112	; 0x70
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	4613      	mov	r3, r2
 8006638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663a:	e0a7      	b.n	800678c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	f000 80a3 	beq.w	800678c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fb ffb7 	bl	80025b8 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <UART_WaitOnFlagUntilTimeout+0x32>
 8006656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006658:	2b00      	cmp	r3, #0
 800665a:	d13f      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006670:	667b      	str	r3, [r7, #100]	; 0x64
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e6      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	663b      	str	r3, [r7, #96]	; 0x60
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80066b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e5      	bne.n	800668e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e068      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d050      	beq.n	800678c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f8:	d148      	bne.n	800678c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006702:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
 8006724:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e6      	bne.n	8006704 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	613b      	str	r3, [r7, #16]
   return(result);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	66bb      	str	r3, [r7, #104]	; 0x68
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006756:	623a      	str	r2, [r7, #32]
 8006758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	69f9      	ldr	r1, [r7, #28]
 800675c:	6a3a      	ldr	r2, [r7, #32]
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	61bb      	str	r3, [r7, #24]
   return(result);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e5      	bne.n	8006736 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e010      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69da      	ldr	r2, [r3, #28]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	f43f af48 	beq.w	800663c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3770      	adds	r7, #112	; 0x70
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b095      	sub	sp, #84	; 0x54
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067dc:	643b      	str	r3, [r7, #64]	; 0x40
 80067de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e6      	bne.n	80067be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	64bb      	str	r3, [r7, #72]	; 0x48
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e5      	bne.n	80067f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006828:	2b01      	cmp	r3, #1
 800682a:	d118      	bne.n	800685e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	60bb      	str	r3, [r7, #8]
   return(result);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f023 0310 	bic.w	r3, r3, #16
 8006840:	647b      	str	r3, [r7, #68]	; 0x44
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6979      	ldr	r1, [r7, #20]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	613b      	str	r3, [r7, #16]
   return(result);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006872:	bf00      	nop
 8006874:	3754      	adds	r7, #84	; 0x54
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fb71 	bl	8005f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b088      	sub	sp, #32
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	613b      	str	r3, [r7, #16]
   return(result);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fb3d 	bl	8005f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f6:	bf00      	nop
 80068f8:	3720      	adds	r7, #32
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fce1 	bl	80082d6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006924:	b5b0      	push	{r4, r5, r7, lr}
 8006926:	b096      	sub	sp, #88	; 0x58
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006932:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800693a:	2200      	movs	r2, #0
 800693c:	2188      	movs	r1, #136	; 0x88
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f004 feda 	bl	800b6f8 <VL53L0X_WrByte>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006958:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006962:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a9e      	ldr	r2, [pc, #632]	; (8006be4 <VL53L0X_DataInit+0x2c0>)
 800696a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a9d      	ldr	r2, [pc, #628]	; (8006be8 <VL53L0X_DataInit+0x2c4>)
 8006972:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800697c:	f107 0310 	add.w	r3, r7, #16
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fac2 	bl	8006f0c <VL53L0X_GetDeviceParameters>
 8006988:	4603      	mov	r3, r0
 800698a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800698e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006992:	2b00      	cmp	r3, #0
 8006994:	d112      	bne.n	80069bc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006996:	2300      	movs	r3, #0
 8006998:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800699a:	2300      	movs	r3, #0
 800699c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f103 0410 	add.w	r4, r3, #16
 80069a4:	f107 0510 	add.w	r5, r7, #16
 80069a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80069b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2264      	movs	r2, #100	; 0x64
 80069c0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80069ca:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80069d4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80069de:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80069ea:	2201      	movs	r2, #1
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f004 fe82 	bl	800b6f8 <VL53L0X_WrByte>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a02:	2201      	movs	r2, #1
 8006a04:	21ff      	movs	r1, #255	; 0xff
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f004 fe76 	bl	800b6f8 <VL53L0X_WrByte>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f004 fe6a 	bl	800b6f8 <VL53L0X_WrByte>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006a32:	f107 030f 	add.w	r3, r7, #15
 8006a36:	461a      	mov	r2, r3
 8006a38:	2191      	movs	r1, #145	; 0x91
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f004 fede 	bl	800b7fc <VL53L0X_RdByte>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006a4e:	7bfa      	ldrb	r2, [r7, #15]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006a56:	2201      	movs	r2, #1
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f004 fe4c 	bl	800b6f8 <VL53L0X_WrByte>
 8006a60:	4603      	mov	r3, r0
 8006a62:	461a      	mov	r2, r3
 8006a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	21ff      	movs	r1, #255	; 0xff
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f004 fe40 	bl	800b6f8 <VL53L0X_WrByte>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2180      	movs	r1, #128	; 0x80
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f004 fe34 	bl	800b6f8 <VL53L0X_WrByte>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa2:	e014      	b.n	8006ace <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006aa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d114      	bne.n	8006ad6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fd35 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aca:	3301      	adds	r3, #1
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
 8006ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad0:	2b05      	cmp	r3, #5
 8006ad2:	dde7      	ble.n	8006aa4 <VL53L0X_DataInit+0x180>
 8006ad4:	e000      	b.n	8006ad8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006ad6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006ad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d107      	bne.n	8006af0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fd1d 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006af0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d107      	bne.n	8006b08 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006af8:	2200      	movs	r2, #0
 8006afa:	2103      	movs	r1, #3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fd11 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006b08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d107      	bne.n	8006b20 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006b10:	2200      	movs	r2, #0
 8006b12:	2104      	movs	r1, #4
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fd05 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006b20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2105      	movs	r1, #5
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fcf9 	bl	8007524 <VL53L0X_SetLimitCheckEnable>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d108      	bne.n	8006b52 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006b40:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006b44:	2100      	movs	r1, #0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fd9c 	bl	8007684 <VL53L0X_SetLimitCheckValue>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006b52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b5e:	2101      	movs	r1, #1
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fd8f 	bl	8007684 <VL53L0X_SetLimitCheckValue>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006b74:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006b78:	2102      	movs	r1, #2
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fd82 	bl	8007684 <VL53L0X_SetLimitCheckValue>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2103      	movs	r1, #3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fd76 	bl	8007684 <VL53L0X_SetLimitCheckValue>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	22ff      	movs	r2, #255	; 0xff
 8006baa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f004 fda0 	bl	800b6f8 <VL53L0X_WrByte>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006bc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d103      	bne.n	8006bd6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006bd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3758      	adds	r7, #88	; 0x58
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bdb0      	pop	{r4, r5, r7, pc}
 8006be2:	bf00      	nop
 8006be4:	00016b85 	.word	0x00016b85
 8006be8:	000970a4 	.word	0x000970a4

08006bec <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006bec:	b5b0      	push	{r4, r5, r7, lr}
 8006bee:	b09e      	sub	sp, #120	; 0x78
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006bfa:	f107 031c 	add.w	r3, r7, #28
 8006bfe:	2240      	movs	r2, #64	; 0x40
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f008 f8e8 	bl	800edd8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 faa9 	bl	8009182 <VL53L0X_get_info_from_device>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006c3c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006c44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d80d      	bhi.n	8006c6c <VL53L0X_StaticInit+0x80>
 8006c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d806      	bhi.n	8006c6c <VL53L0X_StaticInit+0x80>
 8006c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10e      	bne.n	8006c84 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c68:	2b0c      	cmp	r3, #12
 8006c6a:	d90b      	bls.n	8006c84 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006c6c:	f107 0218 	add.w	r2, r7, #24
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fd28 	bl	80086cc <VL53L0X_perform_ref_spad_management>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006c82:	e009      	b.n	8006c98 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006c84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 ff29 	bl	8008ae4 <VL53L0X_set_reference_spads>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006c98:	4b94      	ldr	r3, [pc, #592]	; (8006eec <VL53L0X_StaticInit+0x300>)
 8006c9a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006c9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10f      	bne.n	8006cc4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006caa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006cae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cbe:	e001      	b.n	8006cc4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006cc0:	4b8a      	ldr	r3, [pc, #552]	; (8006eec <VL53L0X_StaticInit+0x300>)
 8006cc2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006cc4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006ccc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f003 fdfc 	bl	800a8cc <VL53L0X_load_tuning_settings>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006cda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2100      	movs	r1, #0
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 f8f1 	bl	8007ed4 <VL53L0X_SetGpioConfig>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cf8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d121      	bne.n	8006d44 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d00:	2201      	movs	r2, #1
 8006d02:	21ff      	movs	r1, #255	; 0xff
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f004 fcf7 	bl	800b6f8 <VL53L0X_WrByte>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006d10:	f107 031a 	add.w	r3, r7, #26
 8006d14:	461a      	mov	r2, r3
 8006d16:	2184      	movs	r1, #132	; 0x84
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f004 fd99 	bl	800b850 <VL53L0X_RdWord>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	21ff      	movs	r1, #255	; 0xff
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f004 fce1 	bl	800b6f8 <VL53L0X_WrByte>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d44:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006d4c:	8b7b      	ldrh	r3, [r7, #26]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	461a      	mov	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006d58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d108      	bne.n	8006d72 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006d60:	f107 031c 	add.w	r3, r7, #28
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f8d0 	bl	8006f0c <VL53L0X_GetDeviceParameters>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006d72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d110      	bne.n	8006d9c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006d7a:	f107 0319 	add.w	r3, r7, #25
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f992 	bl	80070aa <VL53L0X_GetFractionEnable>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006d8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006d94:	7e7a      	ldrb	r2, [r7, #25]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006d9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10e      	bne.n	8006dc2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f103 0410 	add.w	r4, r3, #16
 8006daa:	f107 051c 	add.w	r5, r7, #28
 8006dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006dc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d111      	bne.n	8006dee <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006dca:	f107 0319 	add.w	r3, r7, #25
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f004 fd12 	bl	800b7fc <VL53L0X_RdByte>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006dde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d103      	bne.n	8006dee <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006de6:	7e7a      	ldrb	r2, [r7, #25]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006dee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d107      	bne.n	8006e06 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9ca 	bl	8007194 <VL53L0X_SetSequenceStepEnable>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006e06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d107      	bne.n	8006e1e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2102      	movs	r1, #2
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9be 	bl	8007194 <VL53L0X_SetSequenceStepEnable>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006e1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d103      	bne.n	8006e2e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006e2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006e36:	f107 0313 	add.w	r3, r7, #19
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f990 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006e52:	7cfa      	ldrb	r2, [r7, #19]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006e5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006e62:	f107 0313 	add.w	r3, r7, #19
 8006e66:	461a      	mov	r2, r3
 8006e68:	2101      	movs	r1, #1
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f97a 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006e7e:	7cfa      	ldrb	r2, [r7, #19]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006e86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006e8e:	f107 030c 	add.w	r3, r7, #12
 8006e92:	461a      	mov	r2, r3
 8006e94:	2103      	movs	r1, #3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 fef4 	bl	8009c84 <get_sequence_step_timeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ea2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006eb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006eba:	f107 030c 	add.w	r3, r7, #12
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f002 fede 	bl	8009c84 <get_sequence_step_timeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ece:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ede:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3770      	adds	r7, #112	; 0x70
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000158 	.word	0x20000158

08006ef0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006ef8:	239d      	movs	r3, #157	; 0x9d
 8006efa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f8b0 	bl	8007084 <VL53L0X_GetDeviceMode>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d107      	bne.n	8006f40 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa78 	bl	800742c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d107      	bne.n	8006f66 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	3310      	adds	r3, #16
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 faae 	bl	80074be <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d107      	bne.n	8006f7e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff fcc2 	bl	80068fe <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d134      	bne.n	8006ff0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
 8006f8a:	e02a      	b.n	8006fe2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d12a      	bne.n	8006fea <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	b299      	uxth	r1, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fbce 	bl	8007748 <VL53L0X_GetLimitCheckValue>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d117      	bne.n	8006fee <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	b299      	uxth	r1, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	3318      	adds	r3, #24
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4413      	add	r3, r2
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fb35 	bl	800763c <VL53L0X_GetLimitCheckEnable>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	ddd1      	ble.n	8006f8c <VL53L0X_GetDeviceParameters+0x80>
 8006fe8:	e002      	b.n	8006ff0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006fee:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d107      	bne.n	8007008 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	333c      	adds	r3, #60	; 0x3c
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fc30 	bl	8007864 <VL53L0X_GetWrapAroundCheckEnable>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f879 	bl	800710e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	2b15      	cmp	r3, #21
 8007040:	bf8c      	ite	hi
 8007042:	2201      	movhi	r2, #1
 8007044:	2200      	movls	r2, #0
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	2a00      	cmp	r2, #0
 800704a:	d10e      	bne.n	800706a <VL53L0X_SetDeviceMode+0x3e>
 800704c:	2201      	movs	r2, #1
 800704e:	409a      	lsls	r2, r3
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <VL53L0X_SetDeviceMode+0x54>)
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	bf14      	ite	ne
 8007058:	2301      	movne	r3, #1
 800705a:	2300      	moveq	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	741a      	strb	r2, [r3, #16]
		break;
 8007068:	e001      	b.n	800706e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800706a:	23f8      	movs	r3, #248	; 0xf8
 800706c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800706e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	0030000b 	.word	0x0030000b

08007084 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	7c1a      	ldrb	r2, [r3, #16]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800709a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	2109      	movs	r1, #9
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f004 fb9d 	bl	800b7fc <VL53L0X_RdByte>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80070c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80070dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f003 fa56 	bl	800a5aa <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f003 fb23 	bl	800a76a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
 8007140:	4613      	mov	r3, r2
 8007142:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007148:	78ba      	ldrb	r2, [r7, #2]
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f002 ff6b 	bl	800a02a <VL53L0X_set_vcsel_pulse_period>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	460b      	mov	r3, r1
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007176:	7afb      	ldrb	r3, [r7, #11]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f003 f9dd 	bl	800a53c <VL53L0X_get_vcsel_pulse_period>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
 80071a0:	4613      	mov	r3, r2
 80071a2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80071b0:	f107 030f 	add.w	r3, r7, #15
 80071b4:	461a      	mov	r2, r3
 80071b6:	2101      	movs	r1, #1
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f004 fb1f 	bl	800b7fc <VL53L0X_RdByte>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80071c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d15a      	bne.n	8007284 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80071ce:	78bb      	ldrb	r3, [r7, #2]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d12b      	bne.n	800722c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d825      	bhi.n	8007226 <VL53L0X_SetSequenceStepEnable+0x92>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	080071ff 	.word	0x080071ff
 80071e8:	08007209 	.word	0x08007209
 80071ec:	08007213 	.word	0x08007213
 80071f0:	0800721d 	.word	0x0800721d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80071f4:	7dbb      	ldrb	r3, [r7, #22]
 80071f6:	f043 0310 	orr.w	r3, r3, #16
 80071fa:	75bb      	strb	r3, [r7, #22]
				break;
 80071fc:	e043      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80071fe:	7dbb      	ldrb	r3, [r7, #22]
 8007200:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007204:	75bb      	strb	r3, [r7, #22]
				break;
 8007206:	e03e      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007208:	7dbb      	ldrb	r3, [r7, #22]
 800720a:	f043 0304 	orr.w	r3, r3, #4
 800720e:	75bb      	strb	r3, [r7, #22]
				break;
 8007210:	e039      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007212:	7dbb      	ldrb	r3, [r7, #22]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007218:	75bb      	strb	r3, [r7, #22]
				break;
 800721a:	e034      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800721c:	7dbb      	ldrb	r3, [r7, #22]
 800721e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007222:	75bb      	strb	r3, [r7, #22]
				break;
 8007224:	e02f      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007226:	23fc      	movs	r3, #252	; 0xfc
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	e02c      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	2b04      	cmp	r3, #4
 8007230:	d825      	bhi.n	800727e <VL53L0X_SetSequenceStepEnable+0xea>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	0800724d 	.word	0x0800724d
 800723c:	08007257 	.word	0x08007257
 8007240:	08007261 	.word	0x08007261
 8007244:	0800726b 	.word	0x0800726b
 8007248:	08007275 	.word	0x08007275
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800724c:	7dbb      	ldrb	r3, [r7, #22]
 800724e:	f023 0310 	bic.w	r3, r3, #16
 8007252:	75bb      	strb	r3, [r7, #22]
				break;
 8007254:	e017      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007256:	7dbb      	ldrb	r3, [r7, #22]
 8007258:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800725c:	75bb      	strb	r3, [r7, #22]
				break;
 800725e:	e012      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007260:	7dbb      	ldrb	r3, [r7, #22]
 8007262:	f023 0304 	bic.w	r3, r3, #4
 8007266:	75bb      	strb	r3, [r7, #22]
				break;
 8007268:	e00d      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800726a:	7dbb      	ldrb	r3, [r7, #22]
 800726c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007270:	75bb      	strb	r3, [r7, #22]
				break;
 8007272:	e008      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007274:	7dbb      	ldrb	r3, [r7, #22]
 8007276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727a:	75bb      	strb	r3, [r7, #22]
				break;
 800727c:	e003      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800727e:	23fc      	movs	r3, #252	; 0xfc
 8007280:	75fb      	strb	r3, [r7, #23]
 8007282:	e000      	b.n	8007286 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007284:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	7dba      	ldrb	r2, [r7, #22]
 800728a:	429a      	cmp	r2, r3
 800728c:	d01e      	beq.n	80072cc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800728e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007296:	7dbb      	ldrb	r3, [r7, #22]
 8007298:	461a      	mov	r2, r3
 800729a:	2101      	movs	r1, #1
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f004 fa2b 	bl	800b6f8 <VL53L0X_WrByte>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80072a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7dba      	ldrb	r2, [r7, #22]
 80072b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80072b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80072c4:	6939      	ldr	r1, [r7, #16]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff0e 	bl	80070e8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80072cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	72fb      	strb	r3, [r7, #11]
 80072e6:	4613      	mov	r3, r2
 80072e8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d836      	bhi.n	8007368 <sequence_step_enabled+0x90>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <sequence_step_enabled+0x28>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007315 	.word	0x08007315
 8007304:	08007327 	.word	0x08007327
 8007308:	08007339 	.word	0x08007339
 800730c:	0800734b 	.word	0x0800734b
 8007310:	0800735d 	.word	0x0800735d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007314:	7abb      	ldrb	r3, [r7, #10]
 8007316:	111b      	asrs	r3, r3, #4
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	701a      	strb	r2, [r3, #0]
		break;
 8007324:	e022      	b.n	800736c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007326:	7abb      	ldrb	r3, [r7, #10]
 8007328:	10db      	asrs	r3, r3, #3
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	701a      	strb	r2, [r3, #0]
		break;
 8007336:	e019      	b.n	800736c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007338:	7abb      	ldrb	r3, [r7, #10]
 800733a:	109b      	asrs	r3, r3, #2
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	701a      	strb	r2, [r3, #0]
		break;
 8007348:	e010      	b.n	800736c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800734a:	7abb      	ldrb	r3, [r7, #10]
 800734c:	119b      	asrs	r3, r3, #6
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	b2da      	uxtb	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	701a      	strb	r2, [r3, #0]
		break;
 800735a:	e007      	b.n	800736c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800735c:	7abb      	ldrb	r3, [r7, #10]
 800735e:	09db      	lsrs	r3, r3, #7
 8007360:	b2da      	uxtb	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	701a      	strb	r2, [r3, #0]
		break;
 8007366:	e001      	b.n	800736c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007368:	23fc      	movs	r3, #252	; 0xfc
 800736a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800736c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800738e:	f107 030e 	add.w	r3, r7, #14
 8007392:	461a      	mov	r2, r3
 8007394:	2101      	movs	r1, #1
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f004 fa30 	bl	800b7fc <VL53L0X_RdByte>
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80073a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d107      	bne.n	80073b8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80073a8:	7bba      	ldrb	r2, [r7, #14]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff ff92 	bl	80072d8 <sequence_step_enabled>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80073b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80073c0:	7bba      	ldrb	r2, [r7, #14]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	3302      	adds	r3, #2
 80073c6:	2101      	movs	r1, #1
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff85 	bl	80072d8 <sequence_step_enabled>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80073d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80073da:	7bba      	ldrb	r2, [r7, #14]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3301      	adds	r3, #1
 80073e0:	2102      	movs	r1, #2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff ff78 	bl	80072d8 <sequence_step_enabled>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80073ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d108      	bne.n	8007406 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80073f4:	7bba      	ldrb	r2, [r7, #14]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	3303      	adds	r3, #3
 80073fa:	2103      	movs	r1, #3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ff6b 	bl	80072d8 <sequence_step_enabled>
 8007402:	4603      	mov	r3, r0
 8007404:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800740e:	7bba      	ldrb	r2, [r7, #14]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	3304      	adds	r3, #4
 8007414:	2104      	movs	r1, #4
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff ff5e 	bl	80072d8 <sequence_step_enabled>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800743a:	f107 030c 	add.w	r3, r7, #12
 800743e:	461a      	mov	r2, r3
 8007440:	21f8      	movs	r1, #248	; 0xf8
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f004 fa04 	bl	800b850 <VL53L0X_RdWord>
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800744c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d108      	bne.n	8007466 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	461a      	mov	r2, r3
 800745a:	2104      	movs	r1, #4
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f004 fa2f 	bl	800b8c0 <VL53L0X_RdDWord>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800746e:	89bb      	ldrh	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	89ba      	ldrh	r2, [r7, #12]
 8007478:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	7f1b      	ldrb	r3, [r3, #28]
 80074a6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	7bba      	ldrb	r2, [r7, #14]
 80074ac:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80074ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80074cc:	f107 030e 	add.w	r3, r7, #14
 80074d0:	461a      	mov	r2, r3
 80074d2:	2120      	movs	r1, #32
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f004 f9bb 	bl	800b850 <VL53L0X_RdWord>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80074de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d118      	bne.n	8007518 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80074e6:	89fb      	ldrh	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	771a      	strb	r2, [r3, #28]
 80074fe:	e00b      	b.n	8007518 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007500:	89fb      	ldrh	r3, [r7, #14]
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007518:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
 8007530:	4613      	mov	r3, r2
 8007532:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007544:	887b      	ldrh	r3, [r7, #2]
 8007546:	2b05      	cmp	r3, #5
 8007548:	d902      	bls.n	8007550 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800754a:	23fc      	movs	r3, #252	; 0xfc
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e05b      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007550:	787b      	ldrb	r3, [r7, #1]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800755e:	2301      	movs	r3, #1
 8007560:	73bb      	strb	r3, [r7, #14]
 8007562:	e00a      	b.n	800757a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007564:	887b      	ldrh	r3, [r7, #2]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	330c      	adds	r3, #12
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800757a:	887b      	ldrh	r3, [r7, #2]
 800757c:	2b05      	cmp	r3, #5
 800757e:	d841      	bhi.n	8007604 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075ab 	.word	0x080075ab
 8007590:	080075c1 	.word	0x080075c1
 8007594:	080075cb 	.word	0x080075cb
 8007598:	080075d5 	.word	0x080075d5
 800759c:	080075ed 	.word	0x080075ed

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7bfa      	ldrb	r2, [r7, #15]
 80075a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80075a8:	e02e      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	2144      	movs	r1, #68	; 0x44
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f004 f8c3 	bl	800b740 <VL53L0X_WrWord>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]

			break;
 80075be:	e023      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	7bfa      	ldrb	r2, [r7, #15]
 80075c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80075c8:	e01e      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7bfa      	ldrb	r2, [r7, #15]
 80075ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80075d2:	e019      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80075da:	7b7b      	ldrb	r3, [r7, #13]
 80075dc:	22fe      	movs	r2, #254	; 0xfe
 80075de:	2160      	movs	r1, #96	; 0x60
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f004 f8d7 	bl	800b794 <VL53L0X_UpdateByte>
 80075e6:	4603      	mov	r3, r0
 80075e8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80075ea:	e00d      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80075f2:	7b7b      	ldrb	r3, [r7, #13]
 80075f4:	22ef      	movs	r2, #239	; 0xef
 80075f6:	2160      	movs	r1, #96	; 0x60
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f004 f8cb 	bl	800b794 <VL53L0X_UpdateByte>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007602:	e001      	b.n	8007608 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007604:	23fc      	movs	r3, #252	; 0xfc
 8007606:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007608:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10f      	bne.n	8007630 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007610:	787b      	ldrb	r3, [r7, #1]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007616:	887b      	ldrh	r3, [r7, #2]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007622:	e005      	b.n	8007630 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007624:	887b      	ldrh	r3, [r7, #2]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	460b      	mov	r3, r1
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800764e:	897b      	ldrh	r3, [r7, #10]
 8007650:	2b05      	cmp	r3, #5
 8007652:	d905      	bls.n	8007660 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007654:	23fc      	movs	r3, #252	; 0xfc
 8007656:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e008      	b.n	8007672 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007660:	897b      	ldrh	r3, [r7, #10]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800766a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7dba      	ldrb	r2, [r7, #22]
 8007670:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	460b      	mov	r3, r1
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007696:	897b      	ldrh	r3, [r7, #10]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076a0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80076a2:	7dbb      	ldrb	r3, [r7, #22]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d107      	bne.n	80076b8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80076a8:	897b      	ldrh	r3, [r7, #10]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	330c      	adds	r3, #12
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	e040      	b.n	800773a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80076b8:	897b      	ldrh	r3, [r7, #10]
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d830      	bhi.n	8007720 <VL53L0X_SetLimitCheckValue+0x9c>
 80076be:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <VL53L0X_SetLimitCheckValue+0x40>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076e5 	.word	0x080076e5
 80076cc:	080076fb 	.word	0x080076fb
 80076d0:	08007703 	.word	0x08007703
 80076d4:	0800770b 	.word	0x0800770b
 80076d8:	0800770b 	.word	0x0800770b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80076e2:	e01f      	b.n	8007724 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	2144      	movs	r1, #68	; 0x44
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f004 f826 	bl	800b740 <VL53L0X_WrWord>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80076f8:	e014      	b.n	8007724 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007700:	e010      	b.n	8007724 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007708:	e00c      	b.n	8007724 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	2164      	movs	r1, #100	; 0x64
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f004 f813 	bl	800b740 <VL53L0X_WrWord>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800771e:	e001      	b.n	8007724 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007720:	23fc      	movs	r3, #252	; 0xfc
 8007722:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800772c:	897b      	ldrh	r3, [r7, #10]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	330c      	adds	r3, #12
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800773a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop

08007748 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	460b      	mov	r3, r1
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800775e:	897b      	ldrh	r3, [r7, #10]
 8007760:	2b05      	cmp	r3, #5
 8007762:	d847      	bhi.n	80077f4 <VL53L0X_GetLimitCheckValue+0xac>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <VL53L0X_GetLimitCheckValue+0x24>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	08007785 	.word	0x08007785
 8007770:	08007791 	.word	0x08007791
 8007774:	080077b7 	.word	0x080077b7
 8007778:	080077c3 	.word	0x080077c3
 800777c:	080077cf 	.word	0x080077cf
 8007780:	080077cf 	.word	0x080077cf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007788:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	77bb      	strb	r3, [r7, #30]
		break;
 800778e:	e033      	b.n	80077f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007790:	f107 0316 	add.w	r3, r7, #22
 8007794:	461a      	mov	r2, r3
 8007796:	2144      	movs	r1, #68	; 0x44
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f004 f859 	bl	800b850 <VL53L0X_RdWord>
 800779e:	4603      	mov	r3, r0
 80077a0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80077a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80077aa:	8afb      	ldrh	r3, [r7, #22]
 80077ac:	025b      	lsls	r3, r3, #9
 80077ae:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80077b0:	2301      	movs	r3, #1
 80077b2:	77bb      	strb	r3, [r7, #30]
		break;
 80077b4:	e020      	b.n	80077f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ba:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	77bb      	strb	r3, [r7, #30]
		break;
 80077c0:	e01a      	b.n	80077f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	77bb      	strb	r3, [r7, #30]
		break;
 80077cc:	e014      	b.n	80077f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80077ce:	f107 0316 	add.w	r3, r7, #22
 80077d2:	461a      	mov	r2, r3
 80077d4:	2164      	movs	r1, #100	; 0x64
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f004 f83a 	bl	800b850 <VL53L0X_RdWord>
 80077dc:	4603      	mov	r3, r0
 80077de:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80077e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80077e8:	8afb      	ldrh	r3, [r7, #22]
 80077ea:	025b      	lsls	r3, r3, #9
 80077ec:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	77bb      	strb	r3, [r7, #30]
		break;
 80077f2:	e001      	b.n	80077f8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077f4:	23fc      	movs	r3, #252	; 0xfc
 80077f6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d12a      	bne.n	8007856 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007800:	7fbb      	ldrb	r3, [r7, #30]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d124      	bne.n	8007850 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d110      	bne.n	800782e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800780c:	897b      	ldrh	r3, [r7, #10]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	330c      	adds	r3, #12
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007820:	897b      	ldrh	r3, [r7, #10]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800782c:	e013      	b.n	8007856 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007834:	897b      	ldrh	r3, [r7, #10]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	330c      	adds	r3, #12
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007842:	897b      	ldrh	r3, [r7, #10]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800784e:	e002      	b.n	8007856 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007856:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800785a:	4618      	mov	r0, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007872:	f107 030e 	add.w	r3, r7, #14
 8007876:	461a      	mov	r2, r3
 8007878:	2101      	movs	r1, #1
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f003 ffbe 	bl	800b7fc <VL53L0X_RdByte>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10e      	bne.n	80078aa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800788c:	7bba      	ldrb	r2, [r7, #14]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	b25b      	sxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	da03      	bge.n	80078a4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2201      	movs	r2, #1
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	e002      	b.n	80078aa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80078aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80078d4:	f107 030e 	add.w	r3, r7, #14
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fbd2 	bl	8007084 <VL53L0X_GetDeviceMode>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80078e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d107      	bne.n	80078fc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d104      	bne.n	80078fc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f898 	bl	8007a28 <VL53L0X_StartMeasurement>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80078fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fb6f 	bl	8008fe8 <VL53L0X_measurement_poll_for_completion>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800790e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2203      	movs	r2, #3
 8007920:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007940:	2301      	movs	r3, #1
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f001 fb11 	bl	8008f6e <VL53L0X_perform_ref_calibration>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007972:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007974:	7dbb      	ldrb	r3, [r7, #22]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d005      	beq.n	8007986 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800797a:	7dbb      	ldrb	r3, [r7, #22]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d002      	beq.n	8007986 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007980:	7dbb      	ldrb	r3, [r7, #22]
 8007982:	2b03      	cmp	r3, #3
 8007984:	d147      	bne.n	8007a16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	f107 0210 	add.w	r2, r7, #16
 800798e:	2101      	movs	r1, #1
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fbc3 	bl	800811c <VL53L0X_GetInterruptThresholds>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80079a0:	d803      	bhi.n	80079aa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80079a2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80079a4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80079a8:	d935      	bls.n	8007a16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80079aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d131      	bne.n	8007a16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d006      	beq.n	80079c6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80079b8:	491a      	ldr	r1, [pc, #104]	; (8007a24 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f002 ff86 	bl	800a8cc <VL53L0X_load_tuning_settings>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
 80079c4:	e027      	b.n	8007a16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80079c6:	2204      	movs	r2, #4
 80079c8:	21ff      	movs	r1, #255	; 0xff
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f003 fe94 	bl	800b6f8 <VL53L0X_WrByte>
 80079d0:	4603      	mov	r3, r0
 80079d2:	461a      	mov	r2, r3
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80079da:	2200      	movs	r2, #0
 80079dc:	2170      	movs	r1, #112	; 0x70
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f003 fe8a 	bl	800b6f8 <VL53L0X_WrByte>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80079ee:	2200      	movs	r2, #0
 80079f0:	21ff      	movs	r1, #255	; 0xff
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f003 fe80 	bl	800b6f8 <VL53L0X_WrByte>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2180      	movs	r1, #128	; 0x80
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f003 fe76 	bl	800b6f8 <VL53L0X_WrByte>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	461a      	mov	r2, r3
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007a16:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000024c 	.word	0x2000024c

08007a28 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007a38:	f107 030e 	add.w	r3, r7, #14
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fb20 	bl	8007084 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007a44:	2201      	movs	r2, #1
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f003 fe55 	bl	800b6f8 <VL53L0X_WrByte>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a52:	2201      	movs	r2, #1
 8007a54:	21ff      	movs	r1, #255	; 0xff
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f003 fe4e 	bl	800b6f8 <VL53L0X_WrByte>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007a60:	2200      	movs	r2, #0
 8007a62:	2100      	movs	r1, #0
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f003 fe47 	bl	800b6f8 <VL53L0X_WrByte>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007a74:	461a      	mov	r2, r3
 8007a76:	2191      	movs	r1, #145	; 0x91
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f003 fe3d 	bl	800b6f8 <VL53L0X_WrByte>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007a82:	2201      	movs	r2, #1
 8007a84:	2100      	movs	r1, #0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f003 fe36 	bl	800b6f8 <VL53L0X_WrByte>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a90:	2200      	movs	r2, #0
 8007a92:	21ff      	movs	r1, #255	; 0xff
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f003 fe2f 	bl	800b6f8 <VL53L0X_WrByte>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2180      	movs	r1, #128	; 0x80
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f003 fe28 	bl	800b6f8 <VL53L0X_WrByte>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d054      	beq.n	8007b5c <VL53L0X_StartMeasurement+0x134>
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	dc6c      	bgt.n	8007b90 <VL53L0X_StartMeasurement+0x168>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <VL53L0X_StartMeasurement+0x98>
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d034      	beq.n	8007b28 <VL53L0X_StartMeasurement+0x100>
 8007abe:	e067      	b.n	8007b90 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f003 fe17 	bl	800b6f8 <VL53L0X_WrByte>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d15d      	bne.n	8007b96 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007ae4:	f107 030d 	add.w	r3, r7, #13
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2100      	movs	r1, #0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f003 fe85 	bl	800b7fc <VL53L0X_RdByte>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007afc:	7b7a      	ldrb	r2, [r7, #13]
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	4013      	ands	r3, r2
 8007b02:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007b04:	7bfa      	ldrb	r2, [r7, #15]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d107      	bne.n	8007b1a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007b18:	d3e1      	bcc.n	8007ade <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007b20:	d339      	bcc.n	8007b96 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007b22:	23f9      	movs	r3, #249	; 0xf9
 8007b24:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007b26:	e036      	b.n	8007b96 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007b30:	2101      	movs	r1, #1
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff ff12 	bl	800795c <VL53L0X_CheckAndLoadInterruptSettings>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f003 fdd9 	bl	800b6f8 <VL53L0X_WrByte>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d123      	bne.n	8007b9a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2204      	movs	r2, #4
 8007b56:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007b5a:	e01e      	b.n	8007b9a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007b64:	2101      	movs	r1, #1
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fef8 	bl	800795c <VL53L0X_CheckAndLoadInterruptSettings>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007b70:	2204      	movs	r2, #4
 8007b72:	2100      	movs	r1, #0
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f003 fdbf 	bl	800b6f8 <VL53L0X_WrByte>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10b      	bne.n	8007b9e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007b8e:	e006      	b.n	8007b9e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007b90:	23f8      	movs	r3, #248	; 0xf8
 8007b92:	75fb      	strb	r3, [r7, #23]
 8007b94:	e004      	b.n	8007ba0 <VL53L0X_StartMeasurement+0x178>
		break;
 8007b96:	bf00      	nop
 8007b98:	e002      	b.n	8007ba0 <VL53L0X_StartMeasurement+0x178>
		break;
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <VL53L0X_StartMeasurement+0x178>
		break;
 8007b9e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007bc0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d112      	bne.n	8007bee <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007bc8:	f107 0308 	add.w	r3, r7, #8
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb1a 	bl	8008208 <VL53L0X_GetInterruptMaskStatus>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d103      	bne.n	8007be6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2201      	movs	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e01c      	b.n	8007c20 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	e018      	b.n	8007c20 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007bee:	f107 030d 	add.w	r3, r7, #13
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	2114      	movs	r1, #20
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f003 fe00 	bl	800b7fc <VL53L0X_RdByte>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10b      	bne.n	8007c20 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007c08:	7b7b      	ldrb	r3, [r7, #13]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2201      	movs	r2, #1
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e002      	b.n	8007c20 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007c2c:	b5b0      	push	{r4, r5, r7, lr}
 8007c2e:	b096      	sub	sp, #88	; 0x58
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007c3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007c40:	230c      	movs	r3, #12
 8007c42:	2114      	movs	r1, #20
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f003 fd2b 	bl	800b6a0 <VL53L0X_ReadMulti>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007c50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 80d1 	bne.w	8007dfc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007c66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007c82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4413      	add	r3, r2
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	025b      	lsls	r3, r3, #9
 8007c98:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c9e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007ca0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007cba:	025b      	lsls	r3, r3, #9
 8007cbc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007cde:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007cee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007cfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d00:	d046      	beq.n	8007d90 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007d02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d04:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007d08:	fb02 f303 	mul.w	r3, r2, r3
 8007d0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d10:	4a57      	ldr	r2, [pc, #348]	; (8007e70 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007d12:	fb82 1203 	smull	r1, r2, r2, r3
 8007d16:	1192      	asrs	r2, r2, #6
 8007d18:	17db      	asrs	r3, r3, #31
 8007d1a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007d1c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	7f1b      	ldrb	r3, [r3, #28]
 8007d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d02c      	beq.n	8007d90 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007d36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d10d      	bne.n	8007d64 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007d48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007d50:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007d54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007d58:	e016      	b.n	8007d88 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007d5a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007d62:	e011      	b.n	8007d88 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007d64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d6a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007d6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d70:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007d74:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007d78:	121b      	asrs	r3, r3, #8
 8007d7a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d7e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007d80:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007d84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007d8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007d90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007d98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d9c:	089b      	lsrs	r3, r3, #2
 8007d9e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007da4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	019b      	lsls	r3, r3, #6
 8007dac:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	75da      	strb	r2, [r3, #23]
 8007db2:	e006      	b.n	8007dc2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007dba:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007dc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007dc6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007dca:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f003 fa15 	bl	800b208 <VL53L0X_get_pal_range_status>
 8007dde:	4603      	mov	r3, r0
 8007de0:	461a      	mov	r2, r3
 8007de2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007dec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007df4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007dfc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d12f      	bne.n	8007e64 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f107 040c 	add.w	r4, r7, #12
 8007e0a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007e1e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007e2c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007e32:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007e38:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007e3e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007e44:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007e4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007e54:	f107 050c 	add.w	r5, r7, #12
 8007e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e64:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3750      	adds	r7, #80	; 0x50
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e70:	10624dd3 	.word	0x10624dd3

08007e74 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007e82:	2100      	movs	r1, #0
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff f8d1 	bl	800702c <VL53L0X_SetDeviceMode>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fd16 	bl	80078c8 <VL53L0X_PerformSingleMeasurement>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff febe 	bl	8007c2c <VL53L0X_GetRangingMeasurementData>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f962 	bl	8008188 <VL53L0X_ClearInterruptMask>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	70fb      	strb	r3, [r7, #3]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70bb      	strb	r3, [r7, #2]
 8007eea:	4613      	mov	r3, r2
 8007eec:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007ef8:	23f6      	movs	r3, #246	; 0xf6
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	e107      	b.n	800810e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007efe:	78bb      	ldrb	r3, [r7, #2]
 8007f00:	2b14      	cmp	r3, #20
 8007f02:	d110      	bne.n	8007f26 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007f04:	7e3b      	ldrb	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007f0a:	2310      	movs	r3, #16
 8007f0c:	73bb      	strb	r3, [r7, #14]
 8007f0e:	e001      	b.n	8007f14 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	461a      	mov	r2, r3
 8007f18:	2184      	movs	r1, #132	; 0x84
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f003 fbec 	bl	800b6f8 <VL53L0X_WrByte>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
 8007f24:	e0f3      	b.n	800810e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007f26:	78bb      	ldrb	r3, [r7, #2]
 8007f28:	2b15      	cmp	r3, #21
 8007f2a:	f040 8097 	bne.w	800805c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007f2e:	2201      	movs	r2, #1
 8007f30:	21ff      	movs	r1, #255	; 0xff
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f003 fbe0 	bl	800b6f8 <VL53L0X_WrByte>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f003 fbd6 	bl	800b6f8 <VL53L0X_WrByte>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007f56:	2200      	movs	r2, #0
 8007f58:	21ff      	movs	r1, #255	; 0xff
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f003 fbcc 	bl	800b6f8 <VL53L0X_WrByte>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	2180      	movs	r1, #128	; 0x80
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f003 fbc2 	bl	800b6f8 <VL53L0X_WrByte>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007f7e:	2202      	movs	r2, #2
 8007f80:	2185      	movs	r1, #133	; 0x85
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f003 fbb8 	bl	800b6f8 <VL53L0X_WrByte>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007f92:	2204      	movs	r2, #4
 8007f94:	21ff      	movs	r1, #255	; 0xff
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f003 fbae 	bl	800b6f8 <VL53L0X_WrByte>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	21cd      	movs	r1, #205	; 0xcd
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f003 fba4 	bl	800b6f8 <VL53L0X_WrByte>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007fba:	2211      	movs	r2, #17
 8007fbc:	21cc      	movs	r1, #204	; 0xcc
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f003 fb9a 	bl	800b6f8 <VL53L0X_WrByte>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007fce:	2207      	movs	r2, #7
 8007fd0:	21ff      	movs	r1, #255	; 0xff
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f003 fb90 	bl	800b6f8 <VL53L0X_WrByte>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	21be      	movs	r1, #190	; 0xbe
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f003 fb86 	bl	800b6f8 <VL53L0X_WrByte>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007ff6:	2206      	movs	r2, #6
 8007ff8:	21ff      	movs	r1, #255	; 0xff
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f003 fb7c 	bl	800b6f8 <VL53L0X_WrByte>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	4313      	orrs	r3, r2
 8008008:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800800a:	2209      	movs	r2, #9
 800800c:	21cc      	movs	r1, #204	; 0xcc
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f003 fb72 	bl	800b6f8 <VL53L0X_WrByte>
 8008014:	4603      	mov	r3, r0
 8008016:	461a      	mov	r2, r3
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4313      	orrs	r3, r2
 800801c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800801e:	2200      	movs	r2, #0
 8008020:	21ff      	movs	r1, #255	; 0xff
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f003 fb68 	bl	800b6f8 <VL53L0X_WrByte>
 8008028:	4603      	mov	r3, r0
 800802a:	461a      	mov	r2, r3
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4313      	orrs	r3, r2
 8008030:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008032:	2201      	movs	r2, #1
 8008034:	21ff      	movs	r1, #255	; 0xff
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f003 fb5e 	bl	800b6f8 <VL53L0X_WrByte>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4313      	orrs	r3, r2
 8008044:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f003 fb54 	bl	800b6f8 <VL53L0X_WrByte>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	4313      	orrs	r3, r2
 8008058:	73fb      	strb	r3, [r7, #15]
 800805a:	e058      	b.n	800810e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800805c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d121      	bne.n	80080a8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008064:	787b      	ldrb	r3, [r7, #1]
 8008066:	2b04      	cmp	r3, #4
 8008068:	d81b      	bhi.n	80080a2 <VL53L0X_SetGpioConfig+0x1ce>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <VL53L0X_SetGpioConfig+0x19c>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	08008085 	.word	0x08008085
 8008074:	0800808b 	.word	0x0800808b
 8008078:	08008091 	.word	0x08008091
 800807c:	08008097 	.word	0x08008097
 8008080:	0800809d 	.word	0x0800809d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008084:	2300      	movs	r3, #0
 8008086:	73bb      	strb	r3, [r7, #14]
				break;
 8008088:	e00f      	b.n	80080aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800808a:	2301      	movs	r3, #1
 800808c:	73bb      	strb	r3, [r7, #14]
				break;
 800808e:	e00c      	b.n	80080aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008090:	2302      	movs	r3, #2
 8008092:	73bb      	strb	r3, [r7, #14]
				break;
 8008094:	e009      	b.n	80080aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008096:	2303      	movs	r3, #3
 8008098:	73bb      	strb	r3, [r7, #14]
				break;
 800809a:	e006      	b.n	80080aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800809c:	2304      	movs	r3, #4
 800809e:	73bb      	strb	r3, [r7, #14]
				break;
 80080a0:	e003      	b.n	80080aa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80080a2:	23f5      	movs	r3, #245	; 0xf5
 80080a4:	73fb      	strb	r3, [r7, #15]
 80080a6:	e000      	b.n	80080aa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80080a8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80080aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d107      	bne.n	80080c2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	461a      	mov	r2, r3
 80080b6:	210a      	movs	r1, #10
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f003 fb1d 	bl	800b6f8 <VL53L0X_WrByte>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80080c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10f      	bne.n	80080ea <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80080ca:	7e3b      	ldrb	r3, [r7, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73bb      	strb	r3, [r7, #14]
 80080d4:	e001      	b.n	80080da <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80080d6:	2310      	movs	r3, #16
 80080d8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	22ef      	movs	r2, #239	; 0xef
 80080de:	2184      	movs	r1, #132	; 0x84
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f003 fb57 	bl	800b794 <VL53L0X_UpdateByte>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80080ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	787a      	ldrb	r2, [r7, #1]
 80080f6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80080fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008102:	2100      	movs	r1, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f83f 	bl	8008188 <VL53L0X_ClearInterruptMask>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800810e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop

0800811c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	607a      	str	r2, [r7, #4]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	460b      	mov	r3, r1
 800812a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800812c:	2300      	movs	r3, #0
 800812e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008130:	f107 0314 	add.w	r3, r7, #20
 8008134:	461a      	mov	r2, r3
 8008136:	210e      	movs	r1, #14
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f003 fb89 	bl	800b850 <VL53L0X_RdWord>
 800813e:	4603      	mov	r3, r0
 8008140:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008142:	8abb      	ldrh	r3, [r7, #20]
 8008144:	045b      	lsls	r3, r3, #17
 8008146:	461a      	mov	r2, r3
 8008148:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <VL53L0X_GetInterruptThresholds+0x68>)
 800814a:	4013      	ands	r3, r2
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10f      	bne.n	8008178 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008158:	f107 0314 	add.w	r3, r7, #20
 800815c:	461a      	mov	r2, r3
 800815e:	210c      	movs	r1, #12
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f003 fb75 	bl	800b850 <VL53L0X_RdWord>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800816a:	8abb      	ldrh	r3, [r7, #20]
 800816c:	045b      	lsls	r3, r3, #17
 800816e:	461a      	mov	r2, r3
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <VL53L0X_GetInterruptThresholds+0x68>)
 8008172:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	1ffe0000 	.word	0x1ffe0000

08008188 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800819a:	2201      	movs	r2, #1
 800819c:	210b      	movs	r1, #11
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f003 faaa 	bl	800b6f8 <VL53L0X_WrByte>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80081a8:	2200      	movs	r2, #0
 80081aa:	210b      	movs	r1, #11
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f003 faa3 	bl	800b6f8 <VL53L0X_WrByte>
 80081b2:	4603      	mov	r3, r0
 80081b4:	461a      	mov	r2, r3
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80081bc:	f107 030d 	add.w	r3, r7, #13
 80081c0:	461a      	mov	r2, r3
 80081c2:	2113      	movs	r1, #19
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f003 fb19 	bl	800b7fc <VL53L0X_RdByte>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	3301      	adds	r3, #1
 80081d8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80081da:	7b7b      	ldrb	r3, [r7, #13]
 80081dc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d006      	beq.n	80081f2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d803      	bhi.n	80081f2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80081ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0d3      	beq.n	800819a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80081f8:	23f4      	movs	r3, #244	; 0xf4
 80081fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80081fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008216:	f107 030e 	add.w	r3, r7, #14
 800821a:	461a      	mov	r2, r3
 800821c:	2113      	movs	r1, #19
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f003 faec 	bl	800b7fc <VL53L0X_RdByte>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	f003 0207 	and.w	r2, r3, #7
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	f003 0318 	and.w	r3, r3, #24
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800823c:	23fa      	movs	r3, #250	; 0xfa
 800823e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008258:	2300      	movs	r3, #0
 800825a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fa33 	bl	80086cc <VL53L0X_perform_ref_spad_management>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800826a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8008280:	2101      	movs	r1, #1
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fe fed2 	bl	800702c <VL53L0X_SetDeviceMode>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800828c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 8008294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008298:	e019      	b.n	80082ce <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff fbc4 	bl	8007a28 <VL53L0X_StartMeasurement>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80082a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 80082ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b0:	e00d      	b.n	80082ce <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fcb9 	bl	8007c2c <VL53L0X_GetRangingMeasurementData>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80082be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 80082c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ca:	e000      	b.n	80082ce <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80082e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80082e8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80082ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082ee:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80082f0:	f107 0308 	add.w	r3, r7, #8
 80082f4:	461a      	mov	r2, r3
 80082f6:	2128      	movs	r1, #40	; 0x28
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f003 faa9 	bl	800b850 <VL53L0X_RdWord>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d11e      	bne.n	8008348 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800830a:	893b      	ldrh	r3, [r7, #8]
 800830c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008310:	b29b      	uxth	r3, r3
 8008312:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008314:	893b      	ldrh	r3, [r7, #8]
 8008316:	461a      	mov	r2, r3
 8008318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800831c:	429a      	cmp	r2, r3
 800831e:	dd0b      	ble.n	8008338 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008320:	893a      	ldrh	r2, [r7, #8]
 8008322:	897b      	ldrh	r3, [r7, #10]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	b29b      	uxth	r3, r3
 8008328:	b21b      	sxth	r3, r3
 800832a:	461a      	mov	r2, r3
					* 250;
 800832c:	23fa      	movs	r3, #250	; 0xfa
 800832e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e007      	b.n	8008348 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008338:	893b      	ldrh	r3, [r7, #8]
 800833a:	b21b      	sxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	23fa      	movs	r3, #250	; 0xfa
 8008340:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008354:	b480      	push	{r7}
 8008356:	b08b      	sub	sp, #44	; 0x2c
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008362:	2308      	movs	r3, #8
 8008364:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f04f 32ff 	mov.w	r2, #4294967295
 8008370:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	fbb3 f2f2 	udiv	r2, r3, r2
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	fb01 f202 	mul.w	r2, r1, r2
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
 8008392:	e030      	b.n	80083f6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	4413      	add	r3, r2
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80083a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d11e      	bne.n	80083e8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80083aa:	7ffa      	ldrb	r2, [r7, #31]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	fa42 f303 	asr.w	r3, r2, r3
 80083b2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80083b8:	e016      	b.n	80083e8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80083ba:	7ffb      	ldrb	r3, [r7, #31]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <get_next_good_spad+0x88>
				success = 1;
 80083c4:	2301      	movs	r3, #1
 80083c6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	fb03 f202 	mul.w	r2, r3, r2
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	4413      	add	r3, r2
 80083d4:	461a      	mov	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	601a      	str	r2, [r3, #0]
				break;
 80083da:	e009      	b.n	80083f0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80083dc:	7ffb      	ldrb	r3, [r7, #31]
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	3301      	adds	r3, #1
 80083e6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80083e8:	6a3a      	ldr	r2, [r7, #32]
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d3e4      	bcc.n	80083ba <get_next_good_spad+0x66>
				coarseIndex++) {
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	3301      	adds	r3, #1
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d202      	bcs.n	8008404 <get_next_good_spad+0xb0>
 80083fe:	7fbb      	ldrb	r3, [r7, #30]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0c7      	beq.n	8008394 <get_next_good_spad+0x40>
		}
	}
}
 8008404:	bf00      	nop
 8008406:	372c      	adds	r7, #44	; 0x2c
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	099b      	lsrs	r3, r3, #6
 8008420:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008422:	4a07      	ldr	r2, [pc, #28]	; (8008440 <is_aperture+0x30>)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <is_aperture+0x22>
		isAperture = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008432:	7bfb      	ldrb	r3, [r7, #15]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	20000404 	.word	0x20000404

08008444 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008444:	b480      	push	{r7}
 8008446:	b089      	sub	sp, #36	; 0x24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008450:	2300      	movs	r3, #0
 8008452:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008454:	2308      	movs	r3, #8
 8008456:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008460:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	fbb3 f2f2 	udiv	r2, r3, r2
 800846a:	69b9      	ldr	r1, [r7, #24]
 800846c:	fb01 f202 	mul.w	r2, r1, r2
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	429a      	cmp	r2, r3
 800847a:	d302      	bcc.n	8008482 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800847c:	23ce      	movs	r3, #206	; 0xce
 800847e:	77fb      	strb	r3, [r7, #31]
 8008480:	e010      	b.n	80084a4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	4413      	add	r3, r2
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b25a      	sxtb	r2, r3
 800848c:	2101      	movs	r1, #1
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	fa01 f303 	lsl.w	r3, r1, r3
 8008494:	b25b      	sxtb	r3, r3
 8008496:	4313      	orrs	r3, r2
 8008498:	b259      	sxtb	r1, r3
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	4413      	add	r3, r2
 80084a0:	b2ca      	uxtb	r2, r1
 80084a2:	701a      	strb	r2, [r3, #0]

	return status;
 80084a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3724      	adds	r7, #36	; 0x24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80084be:	2306      	movs	r3, #6
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	21b0      	movs	r1, #176	; 0xb0
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f003 f8bb 	bl	800b640 <VL53L0X_WriteMulti>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80084ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80084e4:	2306      	movs	r3, #6
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	21b0      	movs	r1, #176	; 0xb0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f003 f8d8 	bl	800b6a0 <VL53L0X_ReadMulti>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80084f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08c      	sub	sp, #48	; 0x30
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	460b      	mov	r3, r1
 800850e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008510:	2300      	movs	r3, #0
 8008512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008518:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800851a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800851e:	2300      	movs	r3, #0
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
 8008522:	e02b      	b.n	800857c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008524:	f107 031c 	add.w	r3, r7, #28
 8008528:	6a3a      	ldr	r2, [r7, #32]
 800852a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ff11 	bl	8008354 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800853a:	23ce      	movs	r3, #206	; 0xce
 800853c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008540:	e020      	b.n	8008584 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	461a      	mov	r2, r3
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	4413      	add	r3, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff ff60 	bl	8008410 <is_aperture>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	7afb      	ldrb	r3, [r7, #11]
 8008556:	4293      	cmp	r3, r2
 8008558:	d003      	beq.n	8008562 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800855a:	23ce      	movs	r3, #206	; 0xce
 800855c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008560:	e010      	b.n	8008584 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800856a:	6838      	ldr	r0, [r7, #0]
 800856c:	f7ff ff6a 	bl	8008444 <enable_spad_bit>
		currentSpad++;
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	3301      	adds	r3, #1
 8008574:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	3301      	adds	r3, #1
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
 800857c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008580:	429a      	cmp	r2, r3
 8008582:	d3cf      	bcc.n	8008524 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008586:	6a3a      	ldr	r2, [r7, #32]
 8008588:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800858a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff ff8d 	bl	80084b4 <set_ref_spad_map>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80085a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d121      	bne.n	80085ec <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80085a8:	f107 0314 	add.w	r3, r7, #20
 80085ac:	4619      	mov	r1, r3
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff ff93 	bl	80084da <get_ref_spad_map>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80085be:	e011      	b.n	80085e4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	4413      	add	r3, r2
 80085c6:	781a      	ldrb	r2, [r3, #0]
 80085c8:	f107 0114 	add.w	r1, r7, #20
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	440b      	add	r3, r1
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d003      	beq.n	80085de <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80085d6:	23ce      	movs	r3, #206	; 0xce
 80085d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80085dc:	e006      	b.n	80085ec <enable_ref_spads+0xec>
			}
			i++;
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	3301      	adds	r3, #1
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3e9      	bcc.n	80085c0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80085ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3730      	adds	r7, #48	; 0x30
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	; 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008602:	2300      	movs	r3, #0
 8008604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800861c:	2b00      	cmp	r3, #0
 800861e:	d107      	bne.n	8008630 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008620:	22c0      	movs	r2, #192	; 0xc0
 8008622:	2101      	movs	r1, #1
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f003 f867 	bl	800b6f8 <VL53L0X_WrByte>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008634:	2b00      	cmp	r3, #0
 8008636:	d108      	bne.n	800864a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fc18 	bl	8007e74 <VL53L0X_PerformSingleRangingMeasurement>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800864a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800864e:	2b00      	cmp	r3, #0
 8008650:	d107      	bne.n	8008662 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008652:	2201      	movs	r2, #1
 8008654:	21ff      	movs	r1, #255	; 0xff
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f003 f84e 	bl	800b6f8 <VL53L0X_WrByte>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008666:	2b00      	cmp	r3, #0
 8008668:	d107      	bne.n	800867a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	21b6      	movs	r1, #182	; 0xb6
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f003 f8ee 	bl	800b850 <VL53L0X_RdWord>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800867a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800867e:	2b00      	cmp	r3, #0
 8008680:	d107      	bne.n	8008692 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008682:	2200      	movs	r2, #0
 8008684:	21ff      	movs	r1, #255	; 0xff
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f003 f836 	bl	800b6f8 <VL53L0X_WrByte>
 800868c:	4603      	mov	r3, r0
 800868e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008696:	2b00      	cmp	r3, #0
 8008698:	d112      	bne.n	80086c0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800869a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800869e:	461a      	mov	r2, r3
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f003 f828 	bl	800b6f8 <VL53L0X_WrByte>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80086ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d104      	bne.n	80086c0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80086bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80086c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3728      	adds	r7, #40	; 0x28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b09d      	sub	sp, #116	; 0x74
 80086d0:	af06      	add	r7, sp, #24
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80086de:	23b4      	movs	r3, #180	; 0xb4
 80086e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80086e4:	2303      	movs	r3, #3
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80086e8:	232c      	movs	r3, #44	; 0x2c
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80086f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80086fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008706:	2306      	movs	r3, #6
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008730:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008732:	2300      	movs	r3, #0
 8008734:	64bb      	str	r3, [r7, #72]	; 0x48
 8008736:	e009      	b.n	800874c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800873c:	4413      	add	r3, r2
 800873e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008742:	2200      	movs	r2, #0
 8008744:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008748:	3301      	adds	r3, #1
 800874a:	64bb      	str	r3, [r7, #72]	; 0x48
 800874c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	429a      	cmp	r2, r3
 8008752:	d3f1      	bcc.n	8008738 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008754:	2201      	movs	r2, #1
 8008756:	21ff      	movs	r1, #255	; 0xff
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f002 ffcd 	bl	800b6f8 <VL53L0X_WrByte>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008764:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008768:	2b00      	cmp	r3, #0
 800876a:	d107      	bne.n	800877c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800876c:	2200      	movs	r2, #0
 800876e:	214f      	movs	r1, #79	; 0x4f
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f002 ffc1 	bl	800b6f8 <VL53L0X_WrByte>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800877c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008780:	2b00      	cmp	r3, #0
 8008782:	d107      	bne.n	8008794 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008784:	222c      	movs	r2, #44	; 0x2c
 8008786:	214e      	movs	r1, #78	; 0x4e
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f002 ffb5 	bl	800b6f8 <VL53L0X_WrByte>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008794:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008798:	2b00      	cmp	r3, #0
 800879a:	d107      	bne.n	80087ac <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800879c:	2200      	movs	r2, #0
 800879e:	21ff      	movs	r1, #255	; 0xff
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f002 ffa9 	bl	800b6f8 <VL53L0X_WrByte>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80087ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d109      	bne.n	80087c8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80087b4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80087b8:	461a      	mov	r2, r3
 80087ba:	21b6      	movs	r1, #182	; 0xb6
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f002 ff9b 	bl	800b6f8 <VL53L0X_WrByte>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80087c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80087d0:	2200      	movs	r2, #0
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f002 ff8f 	bl	800b6f8 <VL53L0X_WrByte>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80087e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80087e8:	f107 0210 	add.w	r2, r7, #16
 80087ec:	f107 0111 	add.w	r1, r7, #17
 80087f0:	2300      	movs	r3, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fbbb 	bl	8008f6e <VL53L0X_perform_ref_calibration>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80087fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008802:	2b00      	cmp	r3, #0
 8008804:	d121      	bne.n	800884a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800880a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800880c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008814:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008822:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008826:	f107 0218 	add.w	r2, r7, #24
 800882a:	9204      	str	r2, [sp, #16]
 800882c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882e:	9203      	str	r2, [sp, #12]
 8008830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008832:	9202      	str	r2, [sp, #8]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4623      	mov	r3, r4
 800883c:	4602      	mov	r2, r0
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff fe5e 	bl	8008500 <enable_ref_spads>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800884a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800884e:	2b00      	cmp	r3, #0
 8008850:	d174      	bne.n	800893c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008856:	f107 0312 	add.w	r3, r7, #18
 800885a:	4619      	mov	r1, r3
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fecb 	bl	80085f8 <perform_ref_signal_measurement>
 8008862:	4603      	mov	r3, r0
 8008864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008868:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800886c:	2b00      	cmp	r3, #0
 800886e:	d161      	bne.n	8008934 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008870:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008872:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008874:	429a      	cmp	r2, r3
 8008876:	d25d      	bcs.n	8008934 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008878:	2300      	movs	r3, #0
 800887a:	64bb      	str	r3, [r7, #72]	; 0x48
 800887c:	e009      	b.n	8008892 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008882:	4413      	add	r3, r2
 8008884:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008888:	2200      	movs	r2, #0
 800888a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800888c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888e:	3301      	adds	r3, #1
 8008890:	64bb      	str	r3, [r7, #72]	; 0x48
 8008892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	429a      	cmp	r2, r3
 8008898:	d3f1      	bcc.n	800887e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800889a:	e002      	b.n	80088a2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800889c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800889e:	3301      	adds	r3, #1
 80088a0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80088a2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80088a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a8:	4413      	add	r3, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7ff fdb0 	bl	8008410 <is_aperture>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d103      	bne.n	80088be <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80088b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d3ee      	bcc.n	800889c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80088be:	2301      	movs	r3, #1
 80088c0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80088c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80088d2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80088d6:	f107 0218 	add.w	r2, r7, #24
 80088da:	9204      	str	r2, [sp, #16]
 80088dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088de:	9203      	str	r2, [sp, #12]
 80088e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088e2:	9202      	str	r2, [sp, #8]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4623      	mov	r3, r4
 80088ec:	4602      	mov	r2, r0
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f7ff fe06 	bl	8008500 <enable_ref_spads>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80088fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d11b      	bne.n	800893a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008906:	f107 0312 	add.w	r3, r7, #18
 800890a:	4619      	mov	r1, r3
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff fe73 	bl	80085f8 <perform_ref_signal_measurement>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008918:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10c      	bne.n	800893a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008920:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008922:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008924:	429a      	cmp	r2, r3
 8008926:	d208      	bcs.n	800893a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008932:	e002      	b.n	800893a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008938:	e000      	b.n	800893c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800893a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800893c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 80af 	bne.w	8008aa4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008946:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008948:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800894a:	429a      	cmp	r2, r3
 800894c:	f240 80aa 	bls.w	8008aa4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008960:	f107 031c 	add.w	r3, r7, #28
 8008964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008966:	4618      	mov	r0, r3
 8008968:	f006 fa28 	bl	800edbc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800896c:	8a7b      	ldrh	r3, [r7, #18]
 800896e:	461a      	mov	r2, r3
 8008970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	bfb8      	it	lt
 8008978:	425b      	neglt	r3, r3
 800897a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008982:	e086      	b.n	8008a92 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008992:	f7ff fcdf 	bl	8008354 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899c:	d103      	bne.n	80089a6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800899e:	23ce      	movs	r3, #206	; 0xce
 80089a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80089a4:	e07e      	b.n	8008aa4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80089a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fd2e 	bl	8008410 <is_aperture>
 80089b4:	4603      	mov	r3, r0
 80089b6:	461a      	mov	r2, r3
 80089b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d003      	beq.n	80089c6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80089c4:	e06e      	b.n	8008aa4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80089c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c8:	3301      	adds	r3, #1
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80089d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fd32 	bl	8008444 <enable_spad_bit>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80089e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10c      	bne.n	8008a08 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80089ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f0:	3301      	adds	r3, #1
 80089f2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80089fa:	4619      	mov	r1, r3
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fd59 	bl	80084b4 <set_ref_spad_map>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008a08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d146      	bne.n	8008a9e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008a10:	f107 0312 	add.w	r3, r7, #18
 8008a14:	4619      	mov	r1, r3
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fdee 	bl	80085f8 <perform_ref_signal_measurement>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008a22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d13b      	bne.n	8008aa2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008a2a:	8a7b      	ldrh	r3, [r7, #18]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfb8      	it	lt
 8008a36:	425b      	neglt	r3, r3
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008a3a:	8a7b      	ldrh	r3, [r7, #18]
 8008a3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d21c      	bcs.n	8008a7c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d914      	bls.n	8008a74 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008a4a:	f107 031c 	add.w	r3, r7, #28
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff fd2f 	bl	80084b4 <set_ref_spad_map>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008a62:	f107 011c 	add.w	r1, r7, #28
 8008a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f006 f9a7 	bl	800edbc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a70:	3b01      	subs	r3, #1
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e00a      	b.n	8008a92 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008a86:	f107 031c 	add.w	r3, r7, #28
 8008a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f006 f995 	bl	800edbc <memcpy>
		while (!complete) {
 8008a92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f43f af74 	beq.w	8008984 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008a9c:	e002      	b.n	8008aa4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008aa2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008aa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d115      	bne.n	8008ad8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ab0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008ab8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	781a      	ldrb	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008ad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	375c      	adds	r7, #92	; 0x5c
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd90      	pop	{r4, r7, pc}

08008ae4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b093      	sub	sp, #76	; 0x4c
 8008ae8:	af06      	add	r7, sp, #24
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008afc:	23b4      	movs	r3, #180	; 0xb4
 8008afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008b02:	2306      	movs	r3, #6
 8008b04:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008b06:	232c      	movs	r3, #44	; 0x2c
 8008b08:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	21ff      	movs	r1, #255	; 0xff
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f002 fdf2 	bl	800b6f8 <VL53L0X_WrByte>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008b1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d107      	bne.n	8008b32 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008b22:	2200      	movs	r2, #0
 8008b24:	214f      	movs	r1, #79	; 0x4f
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f002 fde6 	bl	800b6f8 <VL53L0X_WrByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008b32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d107      	bne.n	8008b4a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008b3a:	222c      	movs	r2, #44	; 0x2c
 8008b3c:	214e      	movs	r1, #78	; 0x4e
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f002 fdda 	bl	800b6f8 <VL53L0X_WrByte>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008b4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d107      	bne.n	8008b62 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b52:	2200      	movs	r2, #0
 8008b54:	21ff      	movs	r1, #255	; 0xff
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f002 fdce 	bl	800b6f8 <VL53L0X_WrByte>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008b62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b6e:	461a      	mov	r2, r3
 8008b70:	21b6      	movs	r1, #182	; 0xb6
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f002 fdc0 	bl	800b6f8 <VL53L0X_WrByte>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
 8008b82:	e009      	b.n	8008b98 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	3301      	adds	r3, #1
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3f1      	bcc.n	8008b84 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d011      	beq.n	8008bca <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008ba6:	e002      	b.n	8008bae <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	3301      	adds	r3, #1
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008bae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff fc2a 	bl	8008410 <is_aperture>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <VL53L0X_set_reference_spads+0xe6>
 8008bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d3ee      	bcc.n	8008ba8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bda:	79f9      	ldrb	r1, [r7, #7]
 8008bdc:	f107 0214 	add.w	r2, r7, #20
 8008be0:	9204      	str	r2, [sp, #16]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	9203      	str	r2, [sp, #12]
 8008be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be8:	9202      	str	r2, [sp, #8]
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7ff fc83 	bl	8008500 <enable_ref_spads>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008c00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10c      	bne.n	8008c22 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	79fa      	ldrb	r2, [r7, #7]
 8008c1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008c22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3734      	adds	r7, #52	; 0x34
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd90      	pop	{r4, r7, pc}

08008c2e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10a      	bne.n	8008c5c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	2100      	movs	r1, #0
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f002 fd50 	bl	800b6f8 <VL53L0X_WrByte>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9bf 	bl	8008fe8 <VL53L0X_measurement_poll_for_completion>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d105      	bne.n	8008c82 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008c76:	2100      	movs	r1, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fa85 	bl	8008188 <VL53L0X_ClearInterruptMask>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f002 fd32 	bl	800b6f8 <VL53L0X_WrByte>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	4608      	mov	r0, r1
 8008cae:	4611      	mov	r1, r2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	70fb      	strb	r3, [r7, #3]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70bb      	strb	r3, [r7, #2]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	21ff      	movs	r1, #255	; 0xff
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fd14 	bl	800b6f8 <VL53L0X_WrByte>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2100      	movs	r1, #0
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f002 fd0a 	bl	800b6f8 <VL53L0X_WrByte>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	21ff      	movs	r1, #255	; 0xff
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f002 fd00 	bl	800b6f8 <VL53L0X_WrByte>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01e      	beq.n	8008d46 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	21cb      	movs	r1, #203	; 0xcb
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f002 fd71 	bl	800b7fc <VL53L0X_RdByte>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008d24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d02a      	beq.n	8008d82 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008d2c:	f107 030e 	add.w	r3, r7, #14
 8008d30:	461a      	mov	r2, r3
 8008d32:	21ee      	movs	r1, #238	; 0xee
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f002 fd61 	bl	800b7fc <VL53L0X_RdByte>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e01d      	b.n	8008d82 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008d4e:	78bb      	ldrb	r3, [r7, #2]
 8008d50:	461a      	mov	r2, r3
 8008d52:	21cb      	movs	r1, #203	; 0xcb
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f002 fccf 	bl	800b6f8 <VL53L0X_WrByte>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008d6c:	787b      	ldrb	r3, [r7, #1]
 8008d6e:	2280      	movs	r2, #128	; 0x80
 8008d70:	21ee      	movs	r1, #238	; 0xee
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f002 fd0e 	bl	800b794 <VL53L0X_UpdateByte>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d82:	2201      	movs	r2, #1
 8008d84:	21ff      	movs	r1, #255	; 0xff
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f002 fcb6 	bl	800b6f8 <VL53L0X_WrByte>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	461a      	mov	r2, r3
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008d96:	2201      	movs	r2, #1
 8008d98:	2100      	movs	r1, #0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f002 fcac 	bl	800b6f8 <VL53L0X_WrByte>
 8008da0:	4603      	mov	r3, r0
 8008da2:	461a      	mov	r2, r3
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008daa:	2200      	movs	r2, #0
 8008dac:	21ff      	movs	r1, #255	; 0xff
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f002 fca2 	bl	800b6f8 <VL53L0X_WrByte>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	f023 0310 	bic.w	r3, r3, #16
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	701a      	strb	r2, [r3, #0]

	return Status;
 8008dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b08a      	sub	sp, #40	; 0x28
 8008dda:	af04      	add	r7, sp, #16
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	4611      	mov	r1, r2
 8008de2:	461a      	mov	r2, r3
 8008de4:	460b      	mov	r3, r1
 8008de6:	71fb      	strb	r3, [r7, #7]
 8008de8:	4613      	mov	r3, r2
 8008dea:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008e00:	79bb      	ldrb	r3, [r7, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008e0c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008e0e:	2201      	movs	r2, #1
 8008e10:	2101      	movs	r1, #1
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f002 fc70 	bl	800b6f8 <VL53L0X_WrByte>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d105      	bne.n	8008e30 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008e24:	2140      	movs	r1, #64	; 0x40
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff ff01 	bl	8008c2e <VL53L0X_perform_single_ref_calibration>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d115      	bne.n	8008e64 <VL53L0X_perform_vhv_calibration+0x8e>
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d112      	bne.n	8008e64 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008e3e:	7d39      	ldrb	r1, [r7, #20]
 8008e40:	7d7a      	ldrb	r2, [r7, #21]
 8008e42:	2300      	movs	r3, #0
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	2301      	movs	r3, #1
 8008e48:	9302      	str	r3, [sp, #8]
 8008e4a:	f107 0313 	add.w	r3, r7, #19
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	460b      	mov	r3, r1
 8008e56:	2101      	movs	r1, #1
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff ff23 	bl	8008ca4 <VL53L0X_ref_calibration_io>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75fb      	strb	r3, [r7, #23]
 8008e62:	e002      	b.n	8008e6a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d112      	bne.n	8008e98 <VL53L0X_perform_vhv_calibration+0xc2>
 8008e72:	79bb      	ldrb	r3, [r7, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00f      	beq.n	8008e98 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008e78:	7dbb      	ldrb	r3, [r7, #22]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f002 fc3a 	bl	800b6f8 <VL53L0X_WrByte>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d103      	bne.n	8008e98 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	7dba      	ldrb	r2, [r7, #22]
 8008e94:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08a      	sub	sp, #40	; 0x28
 8008ea8:	af04      	add	r7, sp, #16
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	71fb      	strb	r3, [r7, #7]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008eca:	79bb      	ldrb	r3, [r7, #6]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008ed6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008ed8:	2202      	movs	r2, #2
 8008eda:	2101      	movs	r1, #1
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f002 fc0b 	bl	800b6f8 <VL53L0X_WrByte>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d105      	bne.n	8008efa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008eee:	2100      	movs	r1, #0
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f7ff fe9c 	bl	8008c2e <VL53L0X_perform_single_ref_calibration>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d115      	bne.n	8008f2e <VL53L0X_perform_phase_calibration+0x8a>
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d112      	bne.n	8008f2e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008f08:	7d39      	ldrb	r1, [r7, #20]
 8008f0a:	7d7a      	ldrb	r2, [r7, #21]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	2300      	movs	r3, #0
 8008f12:	9302      	str	r3, [sp, #8]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	f107 0313 	add.w	r3, r7, #19
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	2101      	movs	r1, #1
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff febe 	bl	8008ca4 <VL53L0X_ref_calibration_io>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]
 8008f2c:	e002      	b.n	8008f34 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d112      	bne.n	8008f62 <VL53L0X_perform_phase_calibration+0xbe>
 8008f3c:	79bb      	ldrb	r3, [r7, #6]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00f      	beq.n	8008f62 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008f42:	7dbb      	ldrb	r3, [r7, #22]
 8008f44:	461a      	mov	r2, r3
 8008f46:	2101      	movs	r1, #1
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f002 fbd5 	bl	800b6f8 <VL53L0X_WrByte>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d103      	bne.n	8008f62 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	7dba      	ldrb	r2, [r7, #22]
 8008f5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008f8a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	68b9      	ldr	r1, [r7, #8]
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff ff1f 	bl	8008dd6 <VL53L0X_perform_vhv_calibration>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d107      	bne.n	8008fb4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008fa4:	78fa      	ldrb	r2, [r7, #3]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff ff7a 	bl	8008ea4 <VL53L0X_perform_phase_calibration>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10f      	bne.n	8008fdc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008fbc:	7dbb      	ldrb	r3, [r7, #22]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f002 fb98 	bl	800b6f8 <VL53L0X_WrByte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	7dba      	ldrb	r2, [r7, #22]
 8008fd8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008ffc:	f107 030f 	add.w	r3, r7, #15
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7fe fdd2 	bl	8007bac <VL53L0X_GetMeasurementDataReady>
 8009008:	4603      	mov	r3, r0
 800900a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800900c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d110      	bne.n	8009036 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d00f      	beq.n	800903a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	3301      	adds	r3, #1
 800901e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009026:	d302      	bcc.n	800902e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009028:	23f9      	movs	r3, #249	; 0xf9
 800902a:	75fb      	strb	r3, [r7, #23]
			break;
 800902c:	e006      	b.n	800903c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f002 fc82 	bl	800b938 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009034:	e7e2      	b.n	8008ffc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009036:	bf00      	nop
 8009038:	e000      	b.n	800903c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800903a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800903c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	3301      	adds	r3, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	4603      	mov	r3, r0
 8009076:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	b2db      	uxtb	r3, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80090a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090a4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80090a6:	e002      	b.n	80090ae <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	089b      	lsrs	r3, r3, #2
 80090ac:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d8f8      	bhi.n	80090a8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80090b6:	e017      	b.n	80090e8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d30b      	bcc.n	80090dc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	4413      	add	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	4413      	add	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e002      	b.n	80090e2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	089b      	lsrs	r3, r3, #2
 80090e6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e4      	bne.n	80090b8 <VL53L0X_isqrt+0x24>
	}

	return res;
 80090ee:	68fb      	ldr	r3, [r7, #12]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009104:	2300      	movs	r3, #0
 8009106:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009108:	2200      	movs	r2, #0
 800910a:	2183      	movs	r1, #131	; 0x83
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f002 faf3 	bl	800b6f8 <VL53L0X_WrByte>
 8009112:	4603      	mov	r3, r0
 8009114:	461a      	mov	r2, r3
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	4313      	orrs	r3, r2
 800911a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800911c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11e      	bne.n	8009162 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009128:	f107 030f 	add.w	r3, r7, #15
 800912c:	461a      	mov	r2, r3
 800912e:	2183      	movs	r1, #131	; 0x83
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f002 fb63 	bl	800b7fc <VL53L0X_RdByte>
 8009136:	4603      	mov	r3, r0
 8009138:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <VL53L0X_device_read_strobe+0x5a>
 8009140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	3301      	adds	r3, #1
 800914c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009154:	d3e8      	bcc.n	8009128 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800915c:	d301      	bcc.n	8009162 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800915e:	23f9      	movs	r3, #249	; 0xf9
 8009160:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009162:	2201      	movs	r2, #1
 8009164:	2183      	movs	r1, #131	; 0x83
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f002 fac6 	bl	800b6f8 <VL53L0X_WrByte>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	4313      	orrs	r3, r2
 8009174:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009176:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b098      	sub	sp, #96	; 0x60
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800918e:	2300      	movs	r3, #0
 8009190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80091b2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80091b6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80091ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80091ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091d2:	2b07      	cmp	r3, #7
 80091d4:	f000 8408 	beq.w	80099e8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80091d8:	2201      	movs	r2, #1
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f002 fa8b 	bl	800b6f8 <VL53L0X_WrByte>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461a      	mov	r2, r3
 80091e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ea:	4313      	orrs	r3, r2
 80091ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80091f0:	2201      	movs	r2, #1
 80091f2:	21ff      	movs	r1, #255	; 0xff
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f002 fa7f 	bl	800b6f8 <VL53L0X_WrByte>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009202:	4313      	orrs	r3, r2
 8009204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f002 fa73 	bl	800b6f8 <VL53L0X_WrByte>
 8009212:	4603      	mov	r3, r0
 8009214:	461a      	mov	r2, r3
 8009216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800921a:	4313      	orrs	r3, r2
 800921c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009220:	2206      	movs	r2, #6
 8009222:	21ff      	movs	r1, #255	; 0xff
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f002 fa67 	bl	800b6f8 <VL53L0X_WrByte>
 800922a:	4603      	mov	r3, r0
 800922c:	461a      	mov	r2, r3
 800922e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009232:	4313      	orrs	r3, r2
 8009234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009238:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800923c:	461a      	mov	r2, r3
 800923e:	2183      	movs	r1, #131	; 0x83
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f002 fadb 	bl	800b7fc <VL53L0X_RdByte>
 8009246:	4603      	mov	r3, r0
 8009248:	461a      	mov	r2, r3
 800924a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800924e:	4313      	orrs	r3, r2
 8009250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009258:	f043 0304 	orr.w	r3, r3, #4
 800925c:	b2db      	uxtb	r3, r3
 800925e:	461a      	mov	r2, r3
 8009260:	2183      	movs	r1, #131	; 0x83
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f002 fa48 	bl	800b6f8 <VL53L0X_WrByte>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009270:	4313      	orrs	r3, r2
 8009272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009276:	2207      	movs	r2, #7
 8009278:	21ff      	movs	r1, #255	; 0xff
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f002 fa3c 	bl	800b6f8 <VL53L0X_WrByte>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009288:	4313      	orrs	r3, r2
 800928a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800928e:	2201      	movs	r2, #1
 8009290:	2181      	movs	r1, #129	; 0x81
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f002 fa30 	bl	800b6f8 <VL53L0X_WrByte>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092a0:	4313      	orrs	r3, r2
 80092a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f002 fb46 	bl	800b938 <VL53L0X_PollingDelay>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80092ba:	2201      	movs	r2, #1
 80092bc:	2180      	movs	r1, #128	; 0x80
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f002 fa1a 	bl	800b6f8 <VL53L0X_WrByte>
 80092c4:	4603      	mov	r3, r0
 80092c6:	461a      	mov	r2, r3
 80092c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8098 	beq.w	800940e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80092de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092e2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f040 8091 	bne.w	800940e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80092ec:	226b      	movs	r2, #107	; 0x6b
 80092ee:	2194      	movs	r1, #148	; 0x94
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f002 fa01 	bl	800b6f8 <VL53L0X_WrByte>
 80092f6:	4603      	mov	r3, r0
 80092f8:	461a      	mov	r2, r3
 80092fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092fe:	4313      	orrs	r3, r2
 8009300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff fef9 	bl	80090fc <VL53L0X_device_read_strobe>
 800930a:	4603      	mov	r3, r0
 800930c:	461a      	mov	r2, r3
 800930e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009312:	4313      	orrs	r3, r2
 8009314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800931c:	461a      	mov	r2, r3
 800931e:	2190      	movs	r1, #144	; 0x90
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f002 facd 	bl	800b8c0 <VL53L0X_RdDWord>
 8009326:	4603      	mov	r3, r0
 8009328:	461a      	mov	r2, r3
 800932a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800932e:	4313      	orrs	r3, r2
 8009330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	b2db      	uxtb	r3, r3
 800933a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	0bdb      	lsrs	r3, r3, #15
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009350:	2224      	movs	r2, #36	; 0x24
 8009352:	2194      	movs	r1, #148	; 0x94
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f002 f9cf 	bl	800b6f8 <VL53L0X_WrByte>
 800935a:	4603      	mov	r3, r0
 800935c:	461a      	mov	r2, r3
 800935e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009362:	4313      	orrs	r3, r2
 8009364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff fec7 	bl	80090fc <VL53L0X_device_read_strobe>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009376:	4313      	orrs	r3, r2
 8009378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800937c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009380:	461a      	mov	r2, r3
 8009382:	2190      	movs	r1, #144	; 0x90
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f002 fa9b 	bl	800b8c0 <VL53L0X_RdDWord>
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009392:	4313      	orrs	r3, r2
 8009394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	0e1b      	lsrs	r3, r3, #24
 800939c:	b2db      	uxtb	r3, r3
 800939e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80093a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a2:	0c1b      	lsrs	r3, r3, #16
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80093b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80093b6:	2225      	movs	r2, #37	; 0x25
 80093b8:	2194      	movs	r1, #148	; 0x94
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f002 f99c 	bl	800b6f8 <VL53L0X_WrByte>
 80093c0:	4603      	mov	r3, r0
 80093c2:	461a      	mov	r2, r3
 80093c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff fe94 	bl	80090fc <VL53L0X_device_read_strobe>
 80093d4:	4603      	mov	r3, r0
 80093d6:	461a      	mov	r2, r3
 80093d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093dc:	4313      	orrs	r3, r2
 80093de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80093e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093e6:	461a      	mov	r2, r3
 80093e8:	2190      	movs	r1, #144	; 0x90
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f002 fa68 	bl	800b8c0 <VL53L0X_RdDWord>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093f8:	4313      	orrs	r3, r2
 80093fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	0e1b      	lsrs	r3, r3, #24
 8009402:	b2db      	uxtb	r3, r3
 8009404:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	b2db      	uxtb	r3, r3
 800940c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8189 	beq.w	800972c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800941a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800941e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 8182 	bne.w	800972c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009428:	2202      	movs	r2, #2
 800942a:	2194      	movs	r1, #148	; 0x94
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f002 f963 	bl	800b6f8 <VL53L0X_WrByte>
 8009432:	4603      	mov	r3, r0
 8009434:	461a      	mov	r2, r3
 8009436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800943a:	4313      	orrs	r3, r2
 800943c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff fe5b 	bl	80090fc <VL53L0X_device_read_strobe>
 8009446:	4603      	mov	r3, r0
 8009448:	461a      	mov	r2, r3
 800944a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800944e:	4313      	orrs	r3, r2
 8009450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009454:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009458:	461a      	mov	r2, r3
 800945a:	2190      	movs	r1, #144	; 0x90
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f002 f9cd 	bl	800b7fc <VL53L0X_RdByte>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800946a:	4313      	orrs	r3, r2
 800946c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009470:	227b      	movs	r2, #123	; 0x7b
 8009472:	2194      	movs	r1, #148	; 0x94
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 f93f 	bl	800b6f8 <VL53L0X_WrByte>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009482:	4313      	orrs	r3, r2
 8009484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff fe37 	bl	80090fc <VL53L0X_device_read_strobe>
 800948e:	4603      	mov	r3, r0
 8009490:	461a      	mov	r2, r3
 8009492:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009496:	4313      	orrs	r3, r2
 8009498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800949c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80094a0:	461a      	mov	r2, r3
 80094a2:	2190      	movs	r1, #144	; 0x90
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f002 f9a9 	bl	800b7fc <VL53L0X_RdByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80094b8:	2277      	movs	r2, #119	; 0x77
 80094ba:	2194      	movs	r1, #148	; 0x94
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f002 f91b 	bl	800b6f8 <VL53L0X_WrByte>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7ff fe13 	bl	80090fc <VL53L0X_device_read_strobe>
 80094d6:	4603      	mov	r3, r0
 80094d8:	461a      	mov	r2, r3
 80094da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094de:	4313      	orrs	r3, r2
 80094e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094e8:	461a      	mov	r2, r3
 80094ea:	2190      	movs	r1, #144	; 0x90
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f002 f9e7 	bl	800b8c0 <VL53L0X_RdDWord>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	0e5b      	lsrs	r3, r3, #25
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950a:	b2db      	uxtb	r3, r3
 800950c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	0c9b      	lsrs	r3, r3, #18
 8009512:	b2db      	uxtb	r3, r3
 8009514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009518:	b2db      	uxtb	r3, r3
 800951a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800951c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951e:	0adb      	lsrs	r3, r3, #11
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009526:	b2db      	uxtb	r3, r3
 8009528:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	091b      	lsrs	r3, r3, #4
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009534:	b2db      	uxtb	r3, r3
 8009536:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	b2db      	uxtb	r3, r3
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800954a:	2278      	movs	r2, #120	; 0x78
 800954c:	2194      	movs	r1, #148	; 0x94
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f002 f8d2 	bl	800b6f8 <VL53L0X_WrByte>
 8009554:	4603      	mov	r3, r0
 8009556:	461a      	mov	r2, r3
 8009558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800955c:	4313      	orrs	r3, r2
 800955e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fdca 	bl	80090fc <VL53L0X_device_read_strobe>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009570:	4313      	orrs	r3, r2
 8009572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800957a:	461a      	mov	r2, r3
 800957c:	2190      	movs	r1, #144	; 0x90
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f002 f99e 	bl	800b8c0 <VL53L0X_RdDWord>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800958c:	4313      	orrs	r3, r2
 800958e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	0f5b      	lsrs	r3, r3, #29
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800959c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800959e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095a2:	4413      	add	r3, r2
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	0d9b      	lsrs	r3, r3, #22
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	0bdb      	lsrs	r3, r3, #15
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	085b      	lsrs	r3, r3, #1
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	019b      	lsls	r3, r3, #6
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80095f2:	2279      	movs	r2, #121	; 0x79
 80095f4:	2194      	movs	r1, #148	; 0x94
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f002 f87e 	bl	800b6f8 <VL53L0X_WrByte>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009604:	4313      	orrs	r3, r2
 8009606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fd76 	bl	80090fc <VL53L0X_device_read_strobe>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009618:	4313      	orrs	r3, r2
 800961a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800961e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009622:	461a      	mov	r2, r3
 8009624:	2190      	movs	r1, #144	; 0x90
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f002 f94a 	bl	800b8c0 <VL53L0X_RdDWord>
 800962c:	4603      	mov	r3, r0
 800962e:	461a      	mov	r2, r3
 8009630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009634:	4313      	orrs	r3, r2
 8009636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	0e9b      	lsrs	r3, r3, #26
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009644:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009646:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800964a:	4413      	add	r3, r2
 800964c:	b2db      	uxtb	r3, r3
 800964e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	0cdb      	lsrs	r3, r3, #19
 8009654:	b2db      	uxtb	r3, r3
 8009656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965a:	b2db      	uxtb	r3, r3
 800965c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	0b1b      	lsrs	r3, r3, #12
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009668:	b2db      	uxtb	r3, r3
 800966a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	095b      	lsrs	r3, r3, #5
 8009670:	b2db      	uxtb	r3, r3
 8009672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009676:	b2db      	uxtb	r3, r3
 8009678:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	b2db      	uxtb	r3, r3
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800968c:	227a      	movs	r2, #122	; 0x7a
 800968e:	2194      	movs	r1, #148	; 0x94
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f002 f831 	bl	800b6f8 <VL53L0X_WrByte>
 8009696:	4603      	mov	r3, r0
 8009698:	461a      	mov	r2, r3
 800969a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800969e:	4313      	orrs	r3, r2
 80096a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff fd29 	bl	80090fc <VL53L0X_device_read_strobe>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096b2:	4313      	orrs	r3, r2
 80096b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80096b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096bc:	461a      	mov	r2, r3
 80096be:	2190      	movs	r1, #144	; 0x90
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f002 f8fd 	bl	800b8c0 <VL53L0X_RdDWord>
 80096c6:	4603      	mov	r3, r0
 80096c8:	461a      	mov	r2, r3
 80096ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096ce:	4313      	orrs	r3, r2
 80096d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	0f9b      	lsrs	r3, r3, #30
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096de:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80096e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096e4:	4413      	add	r3, r2
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	0ddb      	lsrs	r3, r3, #23
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009702:	b2db      	uxtb	r3, r3
 8009704:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	0a5b      	lsrs	r3, r3, #9
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	089b      	lsrs	r3, r3, #2
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009726:	2300      	movs	r3, #0
 8009728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 80f1 	beq.w	800991a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800973c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009740:	2b00      	cmp	r3, #0
 8009742:	f040 80ea 	bne.w	800991a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009746:	227b      	movs	r2, #123	; 0x7b
 8009748:	2194      	movs	r1, #148	; 0x94
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 ffd4 	bl	800b6f8 <VL53L0X_WrByte>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009758:	4313      	orrs	r3, r2
 800975a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fccc 	bl	80090fc <VL53L0X_device_read_strobe>
 8009764:	4603      	mov	r3, r0
 8009766:	461a      	mov	r2, r3
 8009768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800976c:	4313      	orrs	r3, r2
 800976e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009776:	461a      	mov	r2, r3
 8009778:	2190      	movs	r1, #144	; 0x90
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f002 f8a0 	bl	800b8c0 <VL53L0X_RdDWord>
 8009780:	4603      	mov	r3, r0
 8009782:	461a      	mov	r2, r3
 8009784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009788:	4313      	orrs	r3, r2
 800978a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800978e:	227c      	movs	r2, #124	; 0x7c
 8009790:	2194      	movs	r1, #148	; 0x94
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 ffb0 	bl	800b6f8 <VL53L0X_WrByte>
 8009798:	4603      	mov	r3, r0
 800979a:	461a      	mov	r2, r3
 800979c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097a0:	4313      	orrs	r3, r2
 80097a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fca8 	bl	80090fc <VL53L0X_device_read_strobe>
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80097ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097be:	461a      	mov	r2, r3
 80097c0:	2190      	movs	r1, #144	; 0x90
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f002 f87c 	bl	800b8c0 <VL53L0X_RdDWord>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80097d6:	2273      	movs	r2, #115	; 0x73
 80097d8:	2194      	movs	r1, #148	; 0x94
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 ff8c 	bl	800b6f8 <VL53L0X_WrByte>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097e8:	4313      	orrs	r3, r2
 80097ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fc84 	bl	80090fc <VL53L0X_device_read_strobe>
 80097f4:	4603      	mov	r3, r0
 80097f6:	461a      	mov	r2, r3
 80097f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097fc:	4313      	orrs	r3, r2
 80097fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009806:	461a      	mov	r2, r3
 8009808:	2190      	movs	r1, #144	; 0x90
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f002 f858 	bl	800b8c0 <VL53L0X_RdDWord>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009818:	4313      	orrs	r3, r2
 800981a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009822:	b29b      	uxth	r3, r3
 8009824:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009826:	2274      	movs	r2, #116	; 0x74
 8009828:	2194      	movs	r1, #148	; 0x94
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 ff64 	bl	800b6f8 <VL53L0X_WrByte>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009838:	4313      	orrs	r3, r2
 800983a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff fc5c 	bl	80090fc <VL53L0X_device_read_strobe>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800984c:	4313      	orrs	r3, r2
 800984e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009856:	461a      	mov	r2, r3
 8009858:	2190      	movs	r1, #144	; 0x90
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f002 f830 	bl	800b8c0 <VL53L0X_RdDWord>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009868:	4313      	orrs	r3, r2
 800986a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009874:	4313      	orrs	r3, r2
 8009876:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009878:	2275      	movs	r2, #117	; 0x75
 800987a:	2194      	movs	r1, #148	; 0x94
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 ff3b 	bl	800b6f8 <VL53L0X_WrByte>
 8009882:	4603      	mov	r3, r0
 8009884:	461a      	mov	r2, r3
 8009886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800988a:	4313      	orrs	r3, r2
 800988c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fc33 	bl	80090fc <VL53L0X_device_read_strobe>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800989e:	4313      	orrs	r3, r2
 80098a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80098a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80098a8:	461a      	mov	r2, r3
 80098aa:	2190      	movs	r1, #144	; 0x90
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f002 f807 	bl	800b8c0 <VL53L0X_RdDWord>
 80098b2:	4603      	mov	r3, r0
 80098b4:	461a      	mov	r2, r3
 80098b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80098c8:	2276      	movs	r2, #118	; 0x76
 80098ca:	2194      	movs	r1, #148	; 0x94
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 ff13 	bl	800b6f8 <VL53L0X_WrByte>
 80098d2:	4603      	mov	r3, r0
 80098d4:	461a      	mov	r2, r3
 80098d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098da:	4313      	orrs	r3, r2
 80098dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fc0b 	bl	80090fc <VL53L0X_device_read_strobe>
 80098e6:	4603      	mov	r3, r0
 80098e8:	461a      	mov	r2, r3
 80098ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ee:	4313      	orrs	r3, r2
 80098f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80098f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80098f8:	461a      	mov	r2, r3
 80098fa:	2190      	movs	r1, #144	; 0x90
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 ffdf 	bl	800b8c0 <VL53L0X_RdDWord>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800990a:	4313      	orrs	r3, r2
 800990c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009912:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009916:	4313      	orrs	r3, r2
 8009918:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800991a:	2200      	movs	r2, #0
 800991c:	2181      	movs	r1, #129	; 0x81
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 feea 	bl	800b6f8 <VL53L0X_WrByte>
 8009924:	4603      	mov	r3, r0
 8009926:	461a      	mov	r2, r3
 8009928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800992c:	4313      	orrs	r3, r2
 800992e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009932:	2206      	movs	r2, #6
 8009934:	21ff      	movs	r1, #255	; 0xff
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 fede 	bl	800b6f8 <VL53L0X_WrByte>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009944:	4313      	orrs	r3, r2
 8009946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800994a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800994e:	461a      	mov	r2, r3
 8009950:	2183      	movs	r1, #131	; 0x83
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 ff52 	bl	800b7fc <VL53L0X_RdByte>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009960:	4313      	orrs	r3, r2
 8009962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800996a:	f023 0304 	bic.w	r3, r3, #4
 800996e:	b2db      	uxtb	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	2183      	movs	r1, #131	; 0x83
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 febf 	bl	800b6f8 <VL53L0X_WrByte>
 800997a:	4603      	mov	r3, r0
 800997c:	461a      	mov	r2, r3
 800997e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009982:	4313      	orrs	r3, r2
 8009984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009988:	2201      	movs	r2, #1
 800998a:	21ff      	movs	r1, #255	; 0xff
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 feb3 	bl	800b6f8 <VL53L0X_WrByte>
 8009992:	4603      	mov	r3, r0
 8009994:	461a      	mov	r2, r3
 8009996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800999a:	4313      	orrs	r3, r2
 800999c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80099a0:	2201      	movs	r2, #1
 80099a2:	2100      	movs	r1, #0
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 fea7 	bl	800b6f8 <VL53L0X_WrByte>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b2:	4313      	orrs	r3, r2
 80099b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80099b8:	2200      	movs	r2, #0
 80099ba:	21ff      	movs	r1, #255	; 0xff
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 fe9b 	bl	800b6f8 <VL53L0X_WrByte>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80099d0:	2200      	movs	r2, #0
 80099d2:	2180      	movs	r1, #128	; 0x80
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 fe8f 	bl	800b6f8 <VL53L0X_WrByte>
 80099da:	4603      	mov	r3, r0
 80099dc:	461a      	mov	r2, r3
 80099de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e2:	4313      	orrs	r3, r2
 80099e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80099e8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 808f 	bne.w	8009b10 <VL53L0X_get_info_from_device+0x98e>
 80099f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80099f6:	2b07      	cmp	r3, #7
 80099f8:	f000 808a 	beq.w	8009b10 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d024      	beq.n	8009a50 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a0a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d11e      	bne.n	8009a50 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009a18:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009a22:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009a26:	2300      	movs	r3, #0
 8009a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a2a:	e00e      	b.n	8009a4a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009a2c:	f107 0208 	add.w	r2, r7, #8
 8009a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a32:	4413      	add	r3, r2
 8009a34:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009a40:	460a      	mov	r2, r1
 8009a42:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a46:	3301      	adds	r3, #1
 8009a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	dded      	ble.n	8009a2c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d018      	beq.n	8009a8c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009a5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a5e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d112      	bne.n	8009a8c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a70:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	33f3      	adds	r3, #243	; 0xf3
 8009a7e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009a80:	f107 0310 	add.w	r3, r7, #16
 8009a84:	4619      	mov	r1, r3
 8009a86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a88:	f005 ff28 	bl	800f8dc <strcpy>

		}

		if (((option & 4) == 4) &&
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d030      	beq.n	8009af8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a9a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d12a      	bne.n	8009af8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab4:	025b      	lsls	r3, r3, #9
 8009ab6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009abc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d011      	beq.n	8009af0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009ae0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009ae4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009ae8:	425b      	negs	r3, r3
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009af0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009af8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009afc:	78fb      	ldrb	r3, [r7, #3]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009b06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b10:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3760      	adds	r7, #96	; 0x60
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009b28:	f240 6277 	movw	r2, #1655	; 0x677
 8009b2c:	f04f 0300 	mov.w	r3, #0
 8009b30:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009b34:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009b38:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	fb02 f303 	mul.w	r3, r2, r3
 8009b48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	371c      	adds	r7, #28
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d017      	beq.n	8009ba2 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009b78:	e005      	b.n	8009b86 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009b80:	89fb      	ldrh	r3, [r7, #14]
 8009b82:	3301      	adds	r3, #1
 8009b84:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f4      	bne.n	8009b7a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009b90:	89fb      	ldrh	r3, [r7, #14]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009b9e:	4413      	add	r3, r2
 8009ba0:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009ba2:	8afb      	ldrh	r3, [r7, #22]

}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	371c      	adds	r7, #28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009bc2:	88fa      	ldrh	r2, [r7, #6]
 8009bc4:	0a12      	lsrs	r2, r2, #8
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009bce:	68fb      	ldr	r3, [r7, #12]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	4613      	mov	r3, r2
 8009be8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff ff92 	bl	8009b1c <VL53L0X_calc_macro_period_ps>
 8009bf8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <VL53L0X_calc_timeout_mclks+0x50>)
 8009c02:	fba2 2303 	umull	r2, r3, r2, r3
 8009c06:	099b      	lsrs	r3, r3, #6
 8009c08:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c10:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	085b      	lsrs	r3, r3, #1
 8009c18:	441a      	add	r2, r3
	timeout_period_mclks =
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c20:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009c22:	69fb      	ldr	r3, [r7, #28]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3720      	adds	r7, #32
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	10624dd3 	.word	0x10624dd3

08009c30 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	807b      	strh	r3, [r7, #2]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009c44:	787b      	ldrb	r3, [r7, #1]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff ff67 	bl	8009b1c <VL53L0X_calc_macro_period_ps>
 8009c4e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c56:	4a0a      	ldr	r2, [pc, #40]	; (8009c80 <VL53L0X_calc_timeout_us+0x50>)
 8009c58:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5c:	099b      	lsrs	r3, r3, #6
 8009c5e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009c60:	887b      	ldrh	r3, [r7, #2]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	fb02 f303 	mul.w	r3, r2, r3
 8009c68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009c6c:	4a04      	ldr	r2, [pc, #16]	; (8009c80 <VL53L0X_calc_timeout_us+0x50>)
 8009c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c72:	099b      	lsrs	r3, r3, #6
 8009c74:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009c76:	697b      	ldr	r3, [r7, #20]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	10624dd3 	.word	0x10624dd3

08009c84 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08c      	sub	sp, #48	; 0x30
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <get_sequence_step_timeout+0x38>
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d002      	beq.n	8009cbc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d128      	bne.n	8009d0e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009cbc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7fd fa4d 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009cd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009cd8:	f107 0320 	add.w	r3, r7, #32
 8009cdc:	461a      	mov	r2, r3
 8009cde:	2146      	movs	r1, #70	; 0x46
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f001 fd8b 	bl	800b7fc <VL53L0X_RdByte>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff ff5c 	bl	8009bb0 <VL53L0X_decode_timeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009cfc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d02:	4619      	mov	r1, r3
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff ff93 	bl	8009c30 <VL53L0X_calc_timeout_us>
 8009d0a:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d0c:	e092      	b.n	8009e34 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009d0e:	7afb      	ldrb	r3, [r7, #11]
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d135      	bne.n	8009d80 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009d14:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009d18:	461a      	mov	r2, r3
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7fd fa21 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009d28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8081 	bne.w	8009e34 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009d32:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009d36:	461a      	mov	r2, r3
 8009d38:	2100      	movs	r1, #0
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7fd fa12 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009d46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009d4e:	f107 031e 	add.w	r3, r7, #30
 8009d52:	461a      	mov	r2, r3
 8009d54:	2151      	movs	r1, #81	; 0x51
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f001 fd7a 	bl	800b850 <VL53L0X_RdWord>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009d62:	8bfb      	ldrh	r3, [r7, #30]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff ff23 	bl	8009bb0 <VL53L0X_decode_timeout>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009d6e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009d72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d74:	4619      	mov	r1, r3
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff ff5a 	bl	8009c30 <VL53L0X_calc_timeout_us>
 8009d7c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d7e:	e059      	b.n	8009e34 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d156      	bne.n	8009e34 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009d86:	f107 0314 	add.w	r3, r7, #20
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7fd faf5 	bl	800737c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01d      	beq.n	8009dd8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009d9c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009da0:	461a      	mov	r2, r3
 8009da2:	2100      	movs	r1, #0
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7fd f9dd 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009db0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10f      	bne.n	8009dd8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009db8:	f107 031e 	add.w	r3, r7, #30
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2151      	movs	r1, #81	; 0x51
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f001 fd45 	bl	800b850 <VL53L0X_RdWord>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009dcc:	8bfb      	ldrh	r3, [r7, #30]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff feee 	bl	8009bb0 <VL53L0X_decode_timeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009dd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009de0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009de4:	461a      	mov	r2, r3
 8009de6:	2101      	movs	r1, #1
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7fd f9bb 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10f      	bne.n	8009e1c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009dfc:	f107 031c 	add.w	r3, r7, #28
 8009e00:	461a      	mov	r2, r3
 8009e02:	2171      	movs	r1, #113	; 0x71
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f001 fd23 	bl	800b850 <VL53L0X_RdWord>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009e10:	8bbb      	ldrh	r3, [r7, #28]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff fecc 	bl	8009bb0 <VL53L0X_decode_timeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009e1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009e24:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f7ff feff 	bl	8009c30 <VL53L0X_calc_timeout_us>
 8009e32:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e38:	601a      	str	r2, [r3, #0]

	return Status;
 8009e3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3730      	adds	r7, #48	; 0x30
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b08a      	sub	sp, #40	; 0x28
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	607a      	str	r2, [r7, #4]
 8009e52:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009e5a:	7afb      	ldrb	r3, [r7, #11]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <set_sequence_step_timeout+0x26>
 8009e60:	7afb      	ldrb	r3, [r7, #11]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d002      	beq.n	8009e6c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d138      	bne.n	8009ede <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009e6c:	f107 031b 	add.w	r3, r7, #27
 8009e70:	461a      	mov	r2, r3
 8009e72:	2100      	movs	r1, #0
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f7fd f975 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009e80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d11a      	bne.n	8009ebe <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009e88:	7efb      	ldrb	r3, [r7, #27]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6879      	ldr	r1, [r7, #4]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff fea4 	bl	8009bdc <VL53L0X_calc_timeout_mclks>
 8009e94:	4603      	mov	r3, r0
 8009e96:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009e98:	8bbb      	ldrh	r3, [r7, #28]
 8009e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9e:	d903      	bls.n	8009ea8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009ea0:	23ff      	movs	r3, #255	; 0xff
 8009ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ea6:	e004      	b.n	8009eb2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009ea8:	8bbb      	ldrh	r3, [r7, #28]
 8009eaa:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009eac:	3b01      	subs	r3, #1
 8009eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009ebe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f040 80ab 	bne.w	800a01e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ecc:	461a      	mov	r2, r3
 8009ece:	2146      	movs	r1, #70	; 0x46
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f001 fc11 	bl	800b6f8 <VL53L0X_WrByte>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009edc:	e09f      	b.n	800a01e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009ede:	7afb      	ldrb	r3, [r7, #11]
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d135      	bne.n	8009f50 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d11b      	bne.n	8009f24 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009eec:	f107 031b 	add.w	r3, r7, #27
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7fd f935 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009f00:	7efb      	ldrb	r3, [r7, #27]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f7ff fe68 	bl	8009bdc <VL53L0X_calc_timeout_mclks>
 8009f0c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fe20 	bl	8009b58 <VL53L0X_encode_timeout>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f1c:	8b3a      	ldrh	r2, [r7, #24]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009f24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d108      	bne.n	8009f3e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009f2c:	8b3b      	ldrh	r3, [r7, #24]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	2151      	movs	r1, #81	; 0x51
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f001 fc04 	bl	800b740 <VL53L0X_WrWord>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009f3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d16b      	bne.n	800a01e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009f4e:	e066      	b.n	800a01e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d160      	bne.n	800a018 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7fd fa0d 	bl	800737c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009f66:	7cfb      	ldrb	r3, [r7, #19]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01d      	beq.n	8009fa8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f6c:	f107 031b 	add.w	r3, r7, #27
 8009f70:	461a      	mov	r2, r3
 8009f72:	2100      	movs	r1, #0
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f7fd f8f5 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009f80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10f      	bne.n	8009fa8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009f88:	f107 0318 	add.w	r3, r7, #24
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	2151      	movs	r1, #81	; 0x51
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f001 fc5d 	bl	800b850 <VL53L0X_RdWord>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009f9c:	8b3b      	ldrh	r3, [r7, #24]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fe06 	bl	8009bb0 <VL53L0X_decode_timeout>
 8009fa4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009fa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d109      	bne.n	8009fc4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009fb0:	f107 031b 	add.w	r3, r7, #27
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7fd f8d3 	bl	8007164 <VL53L0X_GetVcselPulsePeriod>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d128      	bne.n	800a01e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009fcc:	7efb      	ldrb	r3, [r7, #27]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff fe02 	bl	8009bdc <VL53L0X_calc_timeout_mclks>
 8009fd8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fdc:	6a3a      	ldr	r2, [r7, #32]
 8009fde:	4413      	add	r3, r2
 8009fe0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009fe2:	6a38      	ldr	r0, [r7, #32]
 8009fe4:	f7ff fdb8 	bl	8009b58 <VL53L0X_encode_timeout>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d108      	bne.n	800a006 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009ff4:	8bfb      	ldrh	r3, [r7, #30]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	2171      	movs	r1, #113	; 0x71
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f001 fba0 	bl	800b740 <VL53L0X_WrWord>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a006:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d107      	bne.n	800a01e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a016:	e002      	b.n	800a01e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a018:	23fc      	movs	r3, #252	; 0xfc
 800a01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a01e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a022:	4618      	mov	r0, r3
 800a024:	3728      	adds	r7, #40	; 0x28
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b08a      	sub	sp, #40	; 0x28
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
 800a036:	4613      	mov	r3, r2
 800a038:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a040:	230c      	movs	r3, #12
 800a042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a046:	2312      	movs	r3, #18
 800a048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a04c:	2308      	movs	r3, #8
 800a04e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a052:	230e      	movs	r3, #14
 800a054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a05c:	78bb      	ldrb	r3, [r7, #2]
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a068:	23fc      	movs	r3, #252	; 0xfc
 800a06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a06e:	e020      	b.n	800a0b2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10d      	bne.n	800a092 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a076:	78ba      	ldrb	r2, [r7, #2]
 800a078:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d304      	bcc.n	800a08a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a080:	78ba      	ldrb	r2, [r7, #2]
 800a082:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a086:	429a      	cmp	r2, r3
 800a088:	d903      	bls.n	800a092 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a08a:	23fc      	movs	r3, #252	; 0xfc
 800a08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a090:	e00f      	b.n	800a0b2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d10c      	bne.n	800a0b2 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a098:	78ba      	ldrb	r2, [r7, #2]
 800a09a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d304      	bcc.n	800a0ac <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a0a2:	78ba      	ldrb	r2, [r7, #2]
 800a0a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d902      	bls.n	800a0b2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a0ac:	23fc      	movs	r3, #252	; 0xfc
 800a0ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a0b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a0ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0be:	e239      	b.n	800a534 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d150      	bne.n	800a168 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a0c6:	78bb      	ldrb	r3, [r7, #2]
 800a0c8:	2b0c      	cmp	r3, #12
 800a0ca:	d110      	bne.n	800a0ee <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a0cc:	2218      	movs	r2, #24
 800a0ce:	2157      	movs	r1, #87	; 0x57
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 fb11 	bl	800b6f8 <VL53L0X_WrByte>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a0dc:	2208      	movs	r2, #8
 800a0de:	2156      	movs	r1, #86	; 0x56
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 fb09 	bl	800b6f8 <VL53L0X_WrByte>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0ec:	e17f      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a0ee:	78bb      	ldrb	r3, [r7, #2]
 800a0f0:	2b0e      	cmp	r3, #14
 800a0f2:	d110      	bne.n	800a116 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a0f4:	2230      	movs	r2, #48	; 0x30
 800a0f6:	2157      	movs	r1, #87	; 0x57
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fafd 	bl	800b6f8 <VL53L0X_WrByte>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a104:	2208      	movs	r2, #8
 800a106:	2156      	movs	r1, #86	; 0x56
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 faf5 	bl	800b6f8 <VL53L0X_WrByte>
 800a10e:	4603      	mov	r3, r0
 800a110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a114:	e16b      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a116:	78bb      	ldrb	r3, [r7, #2]
 800a118:	2b10      	cmp	r3, #16
 800a11a:	d110      	bne.n	800a13e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a11c:	2240      	movs	r2, #64	; 0x40
 800a11e:	2157      	movs	r1, #87	; 0x57
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fae9 	bl	800b6f8 <VL53L0X_WrByte>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a12c:	2208      	movs	r2, #8
 800a12e:	2156      	movs	r1, #86	; 0x56
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fae1 	bl	800b6f8 <VL53L0X_WrByte>
 800a136:	4603      	mov	r3, r0
 800a138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a13c:	e157      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a13e:	78bb      	ldrb	r3, [r7, #2]
 800a140:	2b12      	cmp	r3, #18
 800a142:	f040 8154 	bne.w	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a146:	2250      	movs	r2, #80	; 0x50
 800a148:	2157      	movs	r1, #87	; 0x57
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fad4 	bl	800b6f8 <VL53L0X_WrByte>
 800a150:	4603      	mov	r3, r0
 800a152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a156:	2208      	movs	r2, #8
 800a158:	2156      	movs	r1, #86	; 0x56
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 facc 	bl	800b6f8 <VL53L0X_WrByte>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a166:	e142      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	f040 813f 	bne.w	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a170:	78bb      	ldrb	r3, [r7, #2]
 800a172:	2b08      	cmp	r3, #8
 800a174:	d14c      	bne.n	800a210 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a176:	2210      	movs	r2, #16
 800a178:	2148      	movs	r1, #72	; 0x48
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 fabc 	bl	800b6f8 <VL53L0X_WrByte>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a186:	2208      	movs	r2, #8
 800a188:	2147      	movs	r1, #71	; 0x47
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fab4 	bl	800b6f8 <VL53L0X_WrByte>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a196:	2202      	movs	r2, #2
 800a198:	2132      	movs	r1, #50	; 0x32
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 faac 	bl	800b6f8 <VL53L0X_WrByte>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a1ae:	220c      	movs	r2, #12
 800a1b0:	2130      	movs	r1, #48	; 0x30
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f001 faa0 	bl	800b6f8 <VL53L0X_WrByte>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	21ff      	movs	r1, #255	; 0xff
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 fa94 	bl	800b6f8 <VL53L0X_WrByte>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a1de:	2230      	movs	r2, #48	; 0x30
 800a1e0:	2130      	movs	r1, #48	; 0x30
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 fa88 	bl	800b6f8 <VL53L0X_WrByte>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	21ff      	movs	r1, #255	; 0xff
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f001 fa7c 	bl	800b6f8 <VL53L0X_WrByte>
 800a200:	4603      	mov	r3, r0
 800a202:	461a      	mov	r2, r3
 800a204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a208:	4313      	orrs	r3, r2
 800a20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a20e:	e0ee      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a210:	78bb      	ldrb	r3, [r7, #2]
 800a212:	2b0a      	cmp	r3, #10
 800a214:	d14c      	bne.n	800a2b0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a216:	2228      	movs	r2, #40	; 0x28
 800a218:	2148      	movs	r1, #72	; 0x48
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fa6c 	bl	800b6f8 <VL53L0X_WrByte>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a226:	2208      	movs	r2, #8
 800a228:	2147      	movs	r1, #71	; 0x47
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f001 fa64 	bl	800b6f8 <VL53L0X_WrByte>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a236:	2203      	movs	r2, #3
 800a238:	2132      	movs	r1, #50	; 0x32
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f001 fa5c 	bl	800b6f8 <VL53L0X_WrByte>
 800a240:	4603      	mov	r3, r0
 800a242:	461a      	mov	r2, r3
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a248:	4313      	orrs	r3, r2
 800a24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a24e:	2209      	movs	r2, #9
 800a250:	2130      	movs	r1, #48	; 0x30
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 fa50 	bl	800b6f8 <VL53L0X_WrByte>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a260:	4313      	orrs	r3, r2
 800a262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a266:	2201      	movs	r2, #1
 800a268:	21ff      	movs	r1, #255	; 0xff
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f001 fa44 	bl	800b6f8 <VL53L0X_WrByte>
 800a270:	4603      	mov	r3, r0
 800a272:	461a      	mov	r2, r3
 800a274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a278:	4313      	orrs	r3, r2
 800a27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a27e:	2220      	movs	r2, #32
 800a280:	2130      	movs	r1, #48	; 0x30
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 fa38 	bl	800b6f8 <VL53L0X_WrByte>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a290:	4313      	orrs	r3, r2
 800a292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a296:	2200      	movs	r2, #0
 800a298:	21ff      	movs	r1, #255	; 0xff
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 fa2c 	bl	800b6f8 <VL53L0X_WrByte>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2ae:	e09e      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a2b0:	78bb      	ldrb	r3, [r7, #2]
 800a2b2:	2b0c      	cmp	r3, #12
 800a2b4:	d14c      	bne.n	800a350 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a2b6:	2238      	movs	r2, #56	; 0x38
 800a2b8:	2148      	movs	r1, #72	; 0x48
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 fa1c 	bl	800b6f8 <VL53L0X_WrByte>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	2147      	movs	r1, #71	; 0x47
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fa14 	bl	800b6f8 <VL53L0X_WrByte>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	2132      	movs	r1, #50	; 0x32
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f001 fa0c 	bl	800b6f8 <VL53L0X_WrByte>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a2ee:	2208      	movs	r2, #8
 800a2f0:	2130      	movs	r1, #48	; 0x30
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 fa00 	bl	800b6f8 <VL53L0X_WrByte>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a300:	4313      	orrs	r3, r2
 800a302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a306:	2201      	movs	r2, #1
 800a308:	21ff      	movs	r1, #255	; 0xff
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f001 f9f4 	bl	800b6f8 <VL53L0X_WrByte>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a318:	4313      	orrs	r3, r2
 800a31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a31e:	2220      	movs	r2, #32
 800a320:	2130      	movs	r1, #48	; 0x30
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 f9e8 	bl	800b6f8 <VL53L0X_WrByte>
 800a328:	4603      	mov	r3, r0
 800a32a:	461a      	mov	r2, r3
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a330:	4313      	orrs	r3, r2
 800a332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a336:	2200      	movs	r2, #0
 800a338:	21ff      	movs	r1, #255	; 0xff
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 f9dc 	bl	800b6f8 <VL53L0X_WrByte>
 800a340:	4603      	mov	r3, r0
 800a342:	461a      	mov	r2, r3
 800a344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a348:	4313      	orrs	r3, r2
 800a34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a34e:	e04e      	b.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a350:	78bb      	ldrb	r3, [r7, #2]
 800a352:	2b0e      	cmp	r3, #14
 800a354:	d14b      	bne.n	800a3ee <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a356:	2248      	movs	r2, #72	; 0x48
 800a358:	2148      	movs	r1, #72	; 0x48
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f001 f9cc 	bl	800b6f8 <VL53L0X_WrByte>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a366:	2208      	movs	r2, #8
 800a368:	2147      	movs	r1, #71	; 0x47
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f9c4 	bl	800b6f8 <VL53L0X_WrByte>
 800a370:	4603      	mov	r3, r0
 800a372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a376:	2203      	movs	r2, #3
 800a378:	2132      	movs	r1, #50	; 0x32
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 f9bc 	bl	800b6f8 <VL53L0X_WrByte>
 800a380:	4603      	mov	r3, r0
 800a382:	461a      	mov	r2, r3
 800a384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a388:	4313      	orrs	r3, r2
 800a38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a38e:	2207      	movs	r2, #7
 800a390:	2130      	movs	r1, #48	; 0x30
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 f9b0 	bl	800b6f8 <VL53L0X_WrByte>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	21ff      	movs	r1, #255	; 0xff
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f9a4 	bl	800b6f8 <VL53L0X_WrByte>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a3be:	2220      	movs	r2, #32
 800a3c0:	2130      	movs	r1, #48	; 0x30
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f001 f998 	bl	800b6f8 <VL53L0X_WrByte>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	21ff      	movs	r1, #255	; 0xff
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 f98c 	bl	800b6f8 <VL53L0X_WrByte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a3ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d17f      	bne.n	800a4f6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a3f6:	78bb      	ldrb	r3, [r7, #2]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe fe38 	bl	800906e <VL53L0X_encode_vcsel_period>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d045      	beq.n	800a49a <VL53L0X_set_vcsel_pulse_period+0x470>
 800a40e:	e06e      	b.n	800a4ee <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a410:	f107 0314 	add.w	r3, r7, #20
 800a414:	461a      	mov	r2, r3
 800a416:	2103      	movs	r1, #3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff fc33 	bl	8009c84 <get_sequence_step_timeout>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d109      	bne.n	800a440 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a42c:	f107 0310 	add.w	r3, r7, #16
 800a430:	461a      	mov	r2, r3
 800a432:	2102      	movs	r1, #2
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff fc25 	bl	8009c84 <get_sequence_step_timeout>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a440:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a444:	2b00      	cmp	r3, #0
 800a446:	d109      	bne.n	800a45c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a448:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a44c:	461a      	mov	r2, r3
 800a44e:	2150      	movs	r1, #80	; 0x50
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f001 f951 	bl	800b6f8 <VL53L0X_WrByte>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a45c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a460:	2b00      	cmp	r3, #0
 800a462:	d108      	bne.n	800a476 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	461a      	mov	r2, r3
 800a468:	2103      	movs	r1, #3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fceb 	bl	8009e46 <set_sequence_step_timeout>
 800a470:	4603      	mov	r3, r0
 800a472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d108      	bne.n	800a490 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	461a      	mov	r2, r3
 800a482:	2102      	movs	r1, #2
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fcde 	bl	8009e46 <set_sequence_step_timeout>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	78ba      	ldrb	r2, [r7, #2]
 800a494:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a498:	e02e      	b.n	800a4f8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a49a:	f107 0318 	add.w	r3, r7, #24
 800a49e:	461a      	mov	r2, r3
 800a4a0:	2104      	movs	r1, #4
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fbee 	bl	8009c84 <get_sequence_step_timeout>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a4ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d109      	bne.n	800a4ca <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a4b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	2170      	movs	r1, #112	; 0x70
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 f91a 	bl	800b6f8 <VL53L0X_WrByte>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a4ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d108      	bne.n	800a4e4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	2104      	movs	r1, #4
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff fcb4 	bl	8009e46 <set_sequence_step_timeout>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	78ba      	ldrb	r2, [r7, #2]
 800a4e8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a4ec:	e004      	b.n	800a4f8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4ee:	23fc      	movs	r3, #252	; 0xfc
 800a4f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4f4:	e000      	b.n	800a4f8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a4f6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a4f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d109      	bne.n	800a514 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a506:	69f9      	ldr	r1, [r7, #28]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7fc fded 	bl	80070e8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a50e:	4603      	mov	r3, r0
 800a510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d109      	bne.n	800a530 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a51c:	f107 010f 	add.w	r1, r7, #15
 800a520:	2301      	movs	r3, #1
 800a522:	2200      	movs	r2, #0
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fe fcbd 	bl	8008ea4 <VL53L0X_perform_phase_calibration>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a530:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a534:	4618      	mov	r0, r3
 800a536:	3728      	adds	r7, #40	; 0x28
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	460b      	mov	r3, r1
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a54e:	7afb      	ldrb	r3, [r7, #11]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a554:	2b01      	cmp	r3, #1
 800a556:	d00a      	beq.n	800a56e <VL53L0X_get_vcsel_pulse_period+0x32>
 800a558:	e013      	b.n	800a582 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a55a:	f107 0316 	add.w	r3, r7, #22
 800a55e:	461a      	mov	r2, r3
 800a560:	2150      	movs	r1, #80	; 0x50
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f001 f94a 	bl	800b7fc <VL53L0X_RdByte>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a56c:	e00b      	b.n	800a586 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a56e:	f107 0316 	add.w	r3, r7, #22
 800a572:	461a      	mov	r2, r3
 800a574:	2170      	movs	r1, #112	; 0x70
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f001 f940 	bl	800b7fc <VL53L0X_RdByte>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a580:	e001      	b.n	800a586 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a582:	23fc      	movs	r3, #252	; 0xfc
 800a584:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d107      	bne.n	800a59e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a58e:	7dbb      	ldrb	r3, [r7, #22]
 800a590:	4618      	mov	r0, r3
 800a592:	f7fe fd59 	bl	8009048 <VL53L0X_decode_vcsel_period>
 800a596:	4603      	mov	r3, r0
 800a598:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	701a      	strb	r2, [r3, #0]

	return Status;
 800a59e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b092      	sub	sp, #72	; 0x48
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a5ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a5be:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a5c0:	f240 7376 	movw	r3, #1910	; 0x776
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a5c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a5ca:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a5cc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a5d2:	f240 234e 	movw	r3, #590	; 0x24e
 800a5d6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a5d8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a5de:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a5e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a5e4:	f240 2326 	movw	r3, #550	; 0x226
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a5ee:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a5f2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d205      	bcs.n	800a60c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a600:	23fc      	movs	r3, #252	; 0xfc
 800a602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a606:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a60a:	e0aa      	b.n	800a762 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a60c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a618:	f107 0314 	add.w	r3, r7, #20
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7fc feac 	bl	800737c <VL53L0X_GetSequenceStepEnables>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a62a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d15b      	bne.n	800a6ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a632:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a634:	2b00      	cmp	r3, #0
 800a636:	d105      	bne.n	800a644 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a638:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d102      	bne.n	800a644 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a63e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a640:	2b00      	cmp	r3, #0
 800a642:	d052      	beq.n	800a6ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a644:	f107 0310 	add.w	r3, r7, #16
 800a648:	461a      	mov	r2, r3
 800a64a:	2102      	movs	r1, #2
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff fb19 	bl	8009c84 <get_sequence_step_timeout>
 800a652:	4603      	mov	r3, r0
 800a654:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a658:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a660:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a664:	e07d      	b.n	800a762 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a666:	7d3b      	ldrb	r3, [r7, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a66c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a66e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a670:	4413      	add	r3, r2
 800a672:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a674:	69fa      	ldr	r2, [r7, #28]
 800a676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a678:	429a      	cmp	r2, r3
 800a67a:	d204      	bcs.n	800a686 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a67c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	643b      	str	r3, [r7, #64]	; 0x40
 800a684:	e002      	b.n	800a68c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a686:	23fc      	movs	r3, #252	; 0xfc
 800a688:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a68c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a694:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a698:	e063      	b.n	800a762 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a69a:	7dbb      	ldrb	r3, [r7, #22]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d011      	beq.n	800a6c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	4413      	add	r3, r2
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d204      	bcs.n	800a6bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a6b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a6ba:	e016      	b.n	800a6ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a6bc:	23fc      	movs	r3, #252	; 0xfc
 800a6be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a6c2:	e012      	b.n	800a6ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a6c4:	7d7b      	ldrb	r3, [r7, #21]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00f      	beq.n	800a6ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6ce:	4413      	add	r3, r2
 800a6d0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a6d2:	69fa      	ldr	r2, [r7, #28]
 800a6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d204      	bcs.n	800a6e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a6da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	643b      	str	r3, [r7, #64]	; 0x40
 800a6e2:	e002      	b.n	800a6ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a6e4:	23fc      	movs	r3, #252	; 0xfc
 800a6e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a6ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a6f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a6f6:	e034      	b.n	800a762 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d019      	beq.n	800a732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a6fe:	f107 030c 	add.w	r3, r7, #12
 800a702:	461a      	mov	r2, r3
 800a704:	2103      	movs	r1, #3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fabc 	bl	8009c84 <get_sequence_step_timeout>
 800a70c:	4603      	mov	r3, r0
 800a70e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a716:	4413      	add	r3, r2
 800a718:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a71a:	69fa      	ldr	r2, [r7, #28]
 800a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71e:	429a      	cmp	r2, r3
 800a720:	d204      	bcs.n	800a72c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	643b      	str	r3, [r7, #64]	; 0x40
 800a72a:	e002      	b.n	800a732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a72c:	23fc      	movs	r3, #252	; 0xfc
 800a72e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a732:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a736:	2b00      	cmp	r3, #0
 800a738:	d111      	bne.n	800a75e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a73a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00e      	beq.n	800a75e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a74a:	2104      	movs	r1, #4
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff fb7a 	bl	8009e46 <set_sequence_step_timeout>
 800a752:	4603      	mov	r3, r0
 800a754:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a75e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a762:	4618      	mov	r0, r3
 800a764:	3748      	adds	r7, #72	; 0x48
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b090      	sub	sp, #64	; 0x40
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a774:	2300      	movs	r3, #0
 800a776:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a77a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a77e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a780:	f240 7376 	movw	r3, #1910	; 0x776
 800a784:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a786:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a78a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a78c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a790:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a792:	f240 234e 	movw	r3, #590	; 0x24e
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a798:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a79c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a79e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a7a4:	f240 2326 	movw	r3, #550	; 0x226
 800a7a8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a7ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b2:	441a      	add	r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a7b8:	f107 0318 	add.w	r3, r7, #24
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7fc fddc 	bl	800737c <VL53L0X_GetSequenceStepEnables>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a7ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a7d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7d6:	e075      	b.n	800a8c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a7d8:	7e3b      	ldrb	r3, [r7, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d105      	bne.n	800a7ea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a7de:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a7e4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d030      	beq.n	800a84c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a7ea:	f107 0310 	add.w	r3, r7, #16
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	2102      	movs	r1, #2
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fa46 	bl	8009c84 <get_sequence_step_timeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a7fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a802:	2b00      	cmp	r3, #0
 800a804:	d122      	bne.n	800a84c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a806:	7e3b      	ldrb	r3, [r7, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a810:	6939      	ldr	r1, [r7, #16]
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a816:	441a      	add	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a81c:	7ebb      	ldrb	r3, [r7, #26]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d009      	beq.n	800a836 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a826:	6939      	ldr	r1, [r7, #16]
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	440b      	add	r3, r1
 800a82c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a82e:	441a      	add	r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	e00a      	b.n	800a84c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a836:	7e7b      	ldrb	r3, [r7, #25]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d007      	beq.n	800a84c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a840:	6939      	ldr	r1, [r7, #16]
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a846:	441a      	add	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a84c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a850:	2b00      	cmp	r3, #0
 800a852:	d114      	bne.n	800a87e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a854:	7efb      	ldrb	r3, [r7, #27]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d011      	beq.n	800a87e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	461a      	mov	r2, r3
 800a860:	2103      	movs	r1, #3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff fa0e 	bl	8009c84 <get_sequence_step_timeout>
 800a868:	4603      	mov	r3, r0
 800a86a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a872:	68f9      	ldr	r1, [r7, #12]
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a878:	441a      	add	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a87e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a882:	2b00      	cmp	r3, #0
 800a884:	d114      	bne.n	800a8b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a886:	7f3b      	ldrb	r3, [r7, #28]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d011      	beq.n	800a8b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a88c:	f107 0314 	add.w	r3, r7, #20
 800a890:	461a      	mov	r2, r3
 800a892:	2104      	movs	r1, #4
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff f9f5 	bl	8009c84 <get_sequence_step_timeout>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a8a4:	6979      	ldr	r1, [r7, #20]
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a8aa:	441a      	add	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a8b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d103      	bne.n	800a8c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a8c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3740      	adds	r7, #64	; 0x40
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a8de:	e0c6      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a8f0:	7cfb      	ldrb	r3, [r7, #19]
 800a8f2:	2bff      	cmp	r3, #255	; 0xff
 800a8f4:	f040 808d 	bne.w	800aa12 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	747b      	strb	r3, [r7, #17]
			Index++;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	3301      	adds	r3, #1
 800a906:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a908:	7c7b      	ldrb	r3, [r7, #17]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d87e      	bhi.n	800aa0c <VL53L0X_load_tuning_settings+0x140>
 800a90e:	a201      	add	r2, pc, #4	; (adr r2, 800a914 <VL53L0X_load_tuning_settings+0x48>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a925 	.word	0x0800a925
 800a918:	0800a95f 	.word	0x0800a95f
 800a91c:	0800a999 	.word	0x0800a999
 800a920:	0800a9d3 	.word	0x0800a9d3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	4413      	add	r3, r2
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	743b      	strb	r3, [r7, #16]
				Index++;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	3301      	adds	r3, #1
 800a932:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	4413      	add	r3, r2
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	3301      	adds	r3, #1
 800a942:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a944:	7c3b      	ldrb	r3, [r7, #16]
 800a946:	b29b      	uxth	r3, r3
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	b29b      	uxth	r3, r3
 800a950:	4413      	add	r3, r2
 800a952:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	89ba      	ldrh	r2, [r7, #12]
 800a958:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a95c:	e087      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	4413      	add	r3, r2
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	743b      	strb	r3, [r7, #16]
				Index++;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	3301      	adds	r3, #1
 800a96c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	4413      	add	r3, r2
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	3301      	adds	r3, #1
 800a97c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a97e:	7c3b      	ldrb	r3, [r7, #16]
 800a980:	b29b      	uxth	r3, r3
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	b29a      	uxth	r2, r3
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	4413      	add	r3, r2
 800a98c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	89ba      	ldrh	r2, [r7, #12]
 800a992:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a996:	e06a      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	4413      	add	r3, r2
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	743b      	strb	r3, [r7, #16]
				Index++;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a9b8:	7c3b      	ldrb	r3, [r7, #16]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	021b      	lsls	r3, r3, #8
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	89ba      	ldrh	r2, [r7, #12]
 800a9cc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a9d0:	e04d      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	743b      	strb	r3, [r7, #16]
				Index++;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a9f2:	7c3b      	ldrb	r3, [r7, #16]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	021b      	lsls	r3, r3, #8
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4413      	add	r3, r2
 800aa00:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	89ba      	ldrh	r2, [r7, #12]
 800aa06:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800aa0a:	e030      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa0c:	23fc      	movs	r3, #252	; 0xfc
 800aa0e:	77fb      	strb	r3, [r7, #31]
 800aa10:	e02d      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800aa12:	7cfb      	ldrb	r3, [r7, #19]
 800aa14:	2b04      	cmp	r3, #4
 800aa16:	d828      	bhi.n	800aa6a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	74bb      	strb	r3, [r7, #18]
			Index++;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	3301      	adds	r3, #1
 800aa26:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800aa28:	2300      	movs	r3, #0
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	e00f      	b.n	800aa4e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	683a      	ldr	r2, [r7, #0]
 800aa32:	4413      	add	r3, r2
 800aa34:	7819      	ldrb	r1, [r3, #0]
 800aa36:	f107 0208 	add.w	r2, r7, #8
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	460a      	mov	r2, r1
 800aa40:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	3301      	adds	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	7cfb      	ldrb	r3, [r7, #19]
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	dbeb      	blt.n	800aa2e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800aa56:	7cfb      	ldrb	r3, [r7, #19]
 800aa58:	f107 0208 	add.w	r2, r7, #8
 800aa5c:	7cb9      	ldrb	r1, [r7, #18]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fdee 	bl	800b640 <VL53L0X_WriteMulti>
 800aa64:	4603      	mov	r3, r0
 800aa66:	77fb      	strb	r3, [r7, #31]
 800aa68:	e001      	b.n	800aa6e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa6a:	23fc      	movs	r3, #252	; 0xfc
 800aa6c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	4413      	add	r3, r2
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <VL53L0X_load_tuning_settings+0x1b8>
 800aa7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f43f af2e 	beq.w	800a8e0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3720      	adds	r7, #32
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800aaa6:	f107 0313 	add.w	r3, r7, #19
 800aaaa:	4619      	mov	r1, r3
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fc fcf1 	bl	8007494 <VL53L0X_GetXTalkCompensationEnable>
 800aab2:	4603      	mov	r3, r0
 800aab4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800aab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d111      	bne.n	800aae2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800aabe:	7cfb      	ldrb	r3, [r7, #19]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00e      	beq.n	800aae2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	8a9b      	ldrh	r3, [r3, #20]
 800aace:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	3380      	adds	r3, #128	; 0x80
 800aadc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800aae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3720      	adds	r7, #32
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b086      	sub	sp, #24
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ab06:	f107 0310 	add.w	r3, r7, #16
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff ffbe 	bl	800aa90 <VL53L0X_get_total_xtalk_rate>
 800ab14:	4603      	mov	r3, r0
 800ab16:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ab18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d105      	bne.n	800ab2c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	441a      	add	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	601a      	str	r2, [r3, #0]

	return Status;
 800ab2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b09a      	sub	sp, #104	; 0x68
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ab46:	2312      	movs	r3, #18
 800ab48:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ab4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab4e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ab50:	2342      	movs	r3, #66	; 0x42
 800ab52:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ab54:	2306      	movs	r3, #6
 800ab56:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ab58:	2307      	movs	r3, #7
 800ab5a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800ab68:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ab70:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ab72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab76:	fb02 f303 	mul.w	r3, r2, r3
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7e:	3380      	adds	r3, #128	; 0x80
 800ab80:	0a1b      	lsrs	r3, r3, #8
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ab84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab88:	fb02 f303 	mul.w	r3, r2, r3
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01a      	beq.n	800abce <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	029b      	lsls	r3, r3, #10
 800ab9c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800aba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba4:	4413      	add	r3, r2
 800aba6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800aba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800abb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abb4:	4613      	mov	r3, r2
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	4413      	add	r3, r2
 800abba:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800abbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abbe:	fb03 f303 	mul.w	r3, r3, r3
 800abc2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800abc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abca:	0c1b      	lsrs	r3, r3, #16
 800abcc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800abd2:	fb02 f303 	mul.w	r3, r2, r3
 800abd6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abde:	0c1b      	lsrs	r3, r3, #16
 800abe0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	fb03 f303 	mul.w	r3, r3, r3
 800abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800abea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abf0:	0c1b      	lsrs	r3, r3, #16
 800abf2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800abf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abf6:	085a      	lsrs	r2, r3, #1
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	441a      	add	r2, r3
 800abfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac02:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac08:	fb02 f303 	mul.w	r3, r2, r3
 800ac0c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac14:	d302      	bcc.n	800ac1c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800ac16:	4b54      	ldr	r3, [pc, #336]	; (800ad68 <VL53L0X_calc_dmax+0x230>)
 800ac18:	663b      	str	r3, [r7, #96]	; 0x60
 800ac1a:	e015      	b.n	800ac48 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ac1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac1e:	085a      	lsrs	r2, r3, #1
 800ac20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac22:	441a      	add	r2, r3
 800ac24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ac2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac30:	fb02 f303 	mul.w	r3, r2, r3
 800ac34:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ac36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac3c:	0c1b      	lsrs	r3, r3, #16
 800ac3e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ac40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac42:	fb03 f303 	mul.w	r3, r3, r3
 800ac46:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ac48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac4a:	039b      	lsls	r3, r3, #14
 800ac4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac50:	4a46      	ldr	r2, [pc, #280]	; (800ad6c <VL53L0X_calc_dmax+0x234>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	099b      	lsrs	r3, r3, #6
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	fb03 f303 	mul.w	r3, r3, r3
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ac62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac64:	fb03 f303 	mul.w	r3, r3, r3
 800ac68:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	091b      	lsrs	r3, r3, #4
 800ac70:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ac72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ac7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	4413      	add	r3, r2
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ac8c:	0b9b      	lsrs	r3, r3, #14
 800ac8e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ac90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac94:	4413      	add	r3, r2
 800ac96:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ac98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac9a:	085b      	lsrs	r3, r3, #1
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	4413      	add	r3, r2
 800aca0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acaa:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	039b      	lsls	r3, r3, #14
 800acb0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	085b      	lsrs	r3, r3, #1
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	4413      	add	r3, r2
 800acba:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acca:	fb02 f303 	mul.w	r3, r2, r3
 800acce:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800acd6:	4a25      	ldr	r2, [pc, #148]	; (800ad6c <VL53L0X_calc_dmax+0x234>)
 800acd8:	fba2 2303 	umull	r2, r3, r2, r3
 800acdc:	099b      	lsrs	r3, r3, #6
 800acde:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800acec:	4a1f      	ldr	r2, [pc, #124]	; (800ad6c <VL53L0X_calc_dmax+0x234>)
 800acee:	fba2 2303 	umull	r2, r3, r2, r3
 800acf2:	099b      	lsrs	r3, r3, #6
 800acf4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800acf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf8:	3380      	adds	r3, #128	; 0x80
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	085a      	lsrs	r2, r3, #1
 800ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0a:	441a      	add	r2, r3
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad12:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad14:	e001      	b.n	800ad1a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ad1a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ad1c:	f7fe f9ba 	bl	8009094 <VL53L0X_isqrt>
 800ad20:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d008      	beq.n	800ad3a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	085a      	lsrs	r2, r3, #1
 800ad2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2e:	441a      	add	r2, r3
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad38:	e001      	b.n	800ad3e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ad3e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ad40:	f7fe f9a8 	bl	8009094 <VL53L0X_isqrt>
 800ad44:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800ad46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d902      	bls.n	800ad5a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800ad54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad58:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ad5a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3768      	adds	r7, #104	; 0x68
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	fff00000 	.word	0xfff00000
 800ad6c:	10624dd3 	.word	0x10624dd3

0800ad70 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b0b4      	sub	sp, #208	; 0xd0
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ad7e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ad82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ad86:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ad8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ad8e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800ad92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ad96:	f241 235c 	movw	r3, #4700	; 0x125c
 800ad9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ad9e:	4b9e      	ldr	r3, [pc, #632]	; (800b018 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800ada0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ada4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ada8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800adaa:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800adae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800adb8:	4b98      	ldr	r3, [pc, #608]	; (800b01c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800adba:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800adbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adc0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800adc2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800adc6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800adc8:	f240 6377 	movw	r3, #1655	; 0x677
 800adcc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adce:	2300      	movs	r3, #0
 800add0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800ade6:	0c1b      	lsrs	r3, r3, #16
 800ade8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800adf0:	f107 0310 	add.w	r3, r7, #16
 800adf4:	461a      	mov	r2, r3
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7ff fe78 	bl	800aaee <VL53L0X_get_total_signal_rate>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800ae04:	f107 0314 	add.w	r3, r7, #20
 800ae08:	461a      	mov	r2, r3
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7ff fe3f 	bl	800aa90 <VL53L0X_get_total_xtalk_rate>
 800ae12:	4603      	mov	r3, r0
 800ae14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae1e:	fb02 f303 	mul.w	r3, r2, r3
 800ae22:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ae24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae2a:	0c1b      	lsrs	r3, r3, #16
 800ae2c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae34:	fb02 f303 	mul.w	r3, r2, r3
 800ae38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800ae3c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ae40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d902      	bls.n	800ae4c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800ae46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800ae4c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d168      	bne.n	800af26 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ae5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800ae64:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ae68:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7fe feb2 	bl	8009bdc <VL53L0X_calc_timeout_mclks>
 800ae78:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800ae8a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ae8e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ae92:	461a      	mov	r2, r3
 800ae94:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7fe fe9f 	bl	8009bdc <VL53L0X_calc_timeout_mclks>
 800ae9e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800aea0:	2303      	movs	r3, #3
 800aea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800aea6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d102      	bne.n	800aeb4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800aeb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aeb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800aeba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800aebe:	fb02 f303 	mul.w	r3, r2, r3
 800aec2:	02db      	lsls	r3, r3, #11
 800aec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800aec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aecc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aed0:	4a53      	ldr	r2, [pc, #332]	; (800b020 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800aed2:	fba2 2303 	umull	r2, r3, r2, r3
 800aed6:	099b      	lsrs	r3, r3, #6
 800aed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800aedc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aee0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aee2:	fb02 f303 	mul.w	r3, r2, r3
 800aee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800aeea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aeee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aef2:	4a4b      	ldr	r2, [pc, #300]	; (800b020 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800aef4:	fba2 2303 	umull	r2, r3, r2, r3
 800aef8:	099b      	lsrs	r3, r3, #6
 800aefa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	3380      	adds	r3, #128	; 0x80
 800af02:	0a1b      	lsrs	r3, r3, #8
 800af04:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af0c:	fb02 f303 	mul.w	r3, r2, r3
 800af10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800af14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af18:	3380      	adds	r3, #128	; 0x80
 800af1a:	0a1b      	lsrs	r3, r3, #8
 800af1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	021b      	lsls	r3, r3, #8
 800af24:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800af26:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800af2e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800af32:	e15e      	b.n	800b1f2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800af34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10c      	bne.n	800af54 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af40:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af48:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e14c      	b.n	800b1ee <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800af54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800af62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af66:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800af68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af6a:	041a      	lsls	r2, r3, #16
 800af6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800af76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d902      	bls.n	800af86 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800af80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800af86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800af8e:	fb02 f303 	mul.w	r3, r2, r3
 800af92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800af96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800af9a:	4613      	mov	r3, r2
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe f876 	bl	8009094 <VL53L0X_isqrt>
 800afa8:	4603      	mov	r3, r0
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	891b      	ldrh	r3, [r3, #8]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afb6:	fb02 f303 	mul.w	r3, r2, r3
 800afba:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800afbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afbe:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800afc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afc4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800afc6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800afc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800afcc:	4a14      	ldr	r2, [pc, #80]	; (800b020 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800afce:	fba2 2303 	umull	r2, r3, r2, r3
 800afd2:	099b      	lsrs	r3, r3, #6
 800afd4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800afd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afd8:	041b      	lsls	r3, r3, #16
 800afda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800afde:	4a10      	ldr	r2, [pc, #64]	; (800b020 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800afe0:	fba2 2303 	umull	r2, r3, r2, r3
 800afe4:	099b      	lsrs	r3, r3, #6
 800afe6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800afe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800afee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfb8      	it	lt
 800affa:	425b      	neglt	r3, r3
 800affc:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800affe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	7e1b      	ldrb	r3, [r3, #24]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b00c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b014:	e033      	b.n	800b07e <VL53L0X_calc_sigma_estimate+0x30e>
 800b016:	bf00      	nop
 800b018:	028f87ae 	.word	0x028f87ae
 800b01c:	0006999a 	.word	0x0006999a
 800b020:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b03c:	fb02 f303 	mul.w	r3, r2, r3
 800b040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b044:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b04a:	4413      	add	r3, r2
 800b04c:	0c1b      	lsrs	r3, r3, #16
 800b04e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b056:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b05a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b05e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b062:	085b      	lsrs	r3, r3, #1
 800b064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b06c:	fb03 f303 	mul.w	r3, r3, r3
 800b070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b078:	0b9b      	lsrs	r3, r3, #14
 800b07a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b084:	fb02 f303 	mul.w	r3, r2, r3
 800b088:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b090:	0c1b      	lsrs	r3, r3, #16
 800b092:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	fb03 f303 	mul.w	r3, r3, r3
 800b09a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b09c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b0a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0a8:	0c1b      	lsrs	r3, r3, #16
 800b0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	fb03 f303 	mul.w	r3, r3, r3
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b8:	4413      	add	r3, r2
 800b0ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0be:	f7fd ffe9 	bl	8009094 <VL53L0X_isqrt>
 800b0c2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	041b      	lsls	r3, r3, #16
 800b0c8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	3332      	adds	r3, #50	; 0x32
 800b0ce:	4a4b      	ldr	r2, [pc, #300]	; (800b1fc <VL53L0X_calc_sigma_estimate+0x48c>)
 800b0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d4:	095a      	lsrs	r2, r3, #5
 800b0d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b0e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0e4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b0e8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b0f0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0f4:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b0fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b102:	4a3f      	ldr	r2, [pc, #252]	; (800b200 <VL53L0X_calc_sigma_estimate+0x490>)
 800b104:	fba2 2303 	umull	r2, r3, r2, r3
 800b108:	0b5b      	lsrs	r3, r3, #13
 800b10a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b10e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b114:	429a      	cmp	r2, r3
 800b116:	d902      	bls.n	800b11e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b11a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b11e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b126:	4413      	add	r3, r2
 800b128:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b12c:	4a35      	ldr	r2, [pc, #212]	; (800b204 <VL53L0X_calc_sigma_estimate+0x494>)
 800b12e:	fba2 2303 	umull	r2, r3, r2, r3
 800b132:	099b      	lsrs	r3, r3, #6
 800b134:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b13a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b13e:	441a      	add	r2, r3
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	fbb2 f3f3 	udiv	r3, r2, r3
 800b146:	4618      	mov	r0, r3
 800b148:	f7fd ffa4 	bl	8009094 <VL53L0X_isqrt>
 800b14c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	021b      	lsls	r3, r3, #8
 800b152:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b15a:	4a2a      	ldr	r2, [pc, #168]	; (800b204 <VL53L0X_calc_sigma_estimate+0x494>)
 800b15c:	fba2 2303 	umull	r2, r3, r2, r3
 800b160:	099b      	lsrs	r3, r3, #6
 800b162:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b168:	fb03 f303 	mul.w	r3, r3, r3
 800b16c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	fb03 f303 	mul.w	r3, r3, r3
 800b174:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	4413      	add	r3, r2
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fd ff89 	bl	8009094 <VL53L0X_isqrt>
 800b182:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b18a:	fb02 f303 	mul.w	r3, r2, r3
 800b18e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d009      	beq.n	800b1ac <VL53L0X_calc_sigma_estimate+0x43c>
 800b198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <VL53L0X_calc_sigma_estimate+0x43c>
 800b1a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b1a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d903      	bls.n	800b1b4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b1ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b1ba:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b1c6:	6939      	ldr	r1, [r7, #16]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b1d0:	9302      	str	r3, [sp, #8]
 800b1d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fca8 	bl	800ab38 <VL53L0X_calc_dmax>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1ee:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	37c0      	adds	r7, #192	; 0xc0
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	51eb851f 	.word	0x51eb851f
 800b200:	d1b71759 	.word	0xd1b71759
 800b204:	10624dd3 	.word	0x10624dd3

0800b208 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b090      	sub	sp, #64	; 0x40
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	461a      	mov	r2, r3
 800b214:	460b      	mov	r3, r1
 800b216:	72fb      	strb	r3, [r7, #11]
 800b218:	4613      	mov	r3, r2
 800b21a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b21c:	2300      	movs	r3, #0
 800b21e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	10db      	asrs	r3, r3, #3
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b268:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d017      	beq.n	800b2a0 <VL53L0X_get_pal_range_status+0x98>
 800b270:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b274:	2b05      	cmp	r3, #5
 800b276:	d013      	beq.n	800b2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b278:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b27c:	2b07      	cmp	r3, #7
 800b27e:	d00f      	beq.n	800b2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b280:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b284:	2b0c      	cmp	r3, #12
 800b286:	d00b      	beq.n	800b2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b288:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b28c:	2b0d      	cmp	r3, #13
 800b28e:	d007      	beq.n	800b2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b290:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b294:	2b0e      	cmp	r3, #14
 800b296:	d003      	beq.n	800b2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b298:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b29c:	2b0f      	cmp	r3, #15
 800b29e:	d103      	bne.n	800b2a8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b2a6:	e002      	b.n	800b2ae <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b2ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d109      	bne.n	800b2ca <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b2b6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	2100      	movs	r1, #0
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f7fc f9bc 	bl	800763c <VL53L0X_GetLimitCheckEnable>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b2ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d02e      	beq.n	800b330 <VL53L0X_get_pal_range_status+0x128>
 800b2d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d12a      	bne.n	800b330 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b2da:	f107 0310 	add.w	r3, r7, #16
 800b2de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b2e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f7ff fd43 	bl	800ad70 <VL53L0X_calc_sigma_estimate>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b2f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d103      	bne.n	800b300 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2fe:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b300:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b304:	2b00      	cmp	r3, #0
 800b306:	d113      	bne.n	800b330 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b308:	f107 0320 	add.w	r3, r7, #32
 800b30c:	461a      	mov	r2, r3
 800b30e:	2100      	movs	r1, #0
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7fc fa19 	bl	8007748 <VL53L0X_GetLimitCheckValue>
 800b316:	4603      	mov	r3, r0
 800b318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d006      	beq.n	800b330 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b324:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b326:	429a      	cmp	r2, r3
 800b328:	d902      	bls.n	800b330 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b32a:	2301      	movs	r3, #1
 800b32c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b330:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b338:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b33c:	461a      	mov	r2, r3
 800b33e:	2102      	movs	r1, #2
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7fc f97b 	bl	800763c <VL53L0X_GetLimitCheckEnable>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b34c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b350:	2b00      	cmp	r3, #0
 800b352:	d044      	beq.n	800b3de <VL53L0X_get_pal_range_status+0x1d6>
 800b354:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d140      	bne.n	800b3de <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b35c:	f107 031c 	add.w	r3, r7, #28
 800b360:	461a      	mov	r2, r3
 800b362:	2102      	movs	r1, #2
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7fc f9ef 	bl	8007748 <VL53L0X_GetLimitCheckValue>
 800b36a:	4603      	mov	r3, r0
 800b36c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b370:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b374:	2b00      	cmp	r3, #0
 800b376:	d107      	bne.n	800b388 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b378:	2201      	movs	r2, #1
 800b37a:	21ff      	movs	r1, #255	; 0xff
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f000 f9bb 	bl	800b6f8 <VL53L0X_WrByte>
 800b382:	4603      	mov	r3, r0
 800b384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b388:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d109      	bne.n	800b3a4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b390:	f107 0316 	add.w	r3, r7, #22
 800b394:	461a      	mov	r2, r3
 800b396:	21b6      	movs	r1, #182	; 0xb6
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 fa59 	bl	800b850 <VL53L0X_RdWord>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b3a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d107      	bne.n	800b3bc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	21ff      	movs	r1, #255	; 0xff
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f9a1 	bl	800b6f8 <VL53L0X_WrByte>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b3bc:	8afb      	ldrh	r3, [r7, #22]
 800b3be:	025b      	lsls	r3, r3, #9
 800b3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d006      	beq.n	800b3de <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b3d0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d902      	bls.n	800b3de <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b3de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b3e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	2103      	movs	r1, #3
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7fc f924 	bl	800763c <VL53L0X_GetLimitCheckEnable>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b3fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d023      	beq.n	800b44a <VL53L0X_get_pal_range_status+0x242>
 800b402:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b406:	2b00      	cmp	r3, #0
 800b408:	d11f      	bne.n	800b44a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b40a:	893b      	ldrh	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d102      	bne.n	800b416 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
 800b414:	e005      	b.n	800b422 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	021a      	lsls	r2, r3, #8
 800b41a:	893b      	ldrh	r3, [r7, #8]
 800b41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b420:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b422:	f107 0318 	add.w	r3, r7, #24
 800b426:	461a      	mov	r2, r3
 800b428:	2103      	movs	r1, #3
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7fc f98c 	bl	8007748 <VL53L0X_GetLimitCheckValue>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d006      	beq.n	800b44a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b43c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b43e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b440:	429a      	cmp	r2, r3
 800b442:	d202      	bcs.n	800b44a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b444:	2301      	movs	r3, #1
 800b446:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b44a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d14a      	bne.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b452:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b456:	2b01      	cmp	r3, #1
 800b458:	d103      	bne.n	800b462 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	22ff      	movs	r2, #255	; 0xff
 800b45e:	701a      	strb	r2, [r3, #0]
 800b460:	e042      	b.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b462:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b466:	2b01      	cmp	r3, #1
 800b468:	d007      	beq.n	800b47a <VL53L0X_get_pal_range_status+0x272>
 800b46a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d003      	beq.n	800b47a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b476:	2b03      	cmp	r3, #3
 800b478:	d103      	bne.n	800b482 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47c:	2205      	movs	r2, #5
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e032      	b.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b482:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b486:	2b06      	cmp	r3, #6
 800b488:	d003      	beq.n	800b492 <VL53L0X_get_pal_range_status+0x28a>
 800b48a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b48e:	2b09      	cmp	r3, #9
 800b490:	d103      	bne.n	800b49a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b494:	2204      	movs	r2, #4
 800b496:	701a      	strb	r2, [r3, #0]
 800b498:	e026      	b.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b49a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d007      	beq.n	800b4b2 <VL53L0X_get_pal_range_status+0x2aa>
 800b4a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4a6:	2b0a      	cmp	r3, #10
 800b4a8:	d003      	beq.n	800b4b2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b4aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d103      	bne.n	800b4ba <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b4:	2203      	movs	r2, #3
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	e016      	b.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b4ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d003      	beq.n	800b4ca <VL53L0X_get_pal_range_status+0x2c2>
 800b4c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d103      	bne.n	800b4d2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	701a      	strb	r2, [r3, #0]
 800b4d0:	e00a      	b.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b4d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d103      	bne.n	800b4e2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4dc:	2201      	movs	r2, #1
 800b4de:	701a      	strb	r2, [r3, #0]
 800b4e0:	e002      	b.n	800b4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b4f6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7fc f89c 	bl	800763c <VL53L0X_GetLimitCheckEnable>
 800b504:	4603      	mov	r3, r0
 800b506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b50a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d14f      	bne.n	800b5b2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <VL53L0X_get_pal_range_status+0x31a>
 800b51a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d103      	bne.n	800b52a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b522:	2301      	movs	r3, #1
 800b524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b528:	e002      	b.n	800b530 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b536:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b53a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d003      	beq.n	800b54a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b542:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b546:	2b00      	cmp	r3, #0
 800b548:	d103      	bne.n	800b552 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b54a:	2301      	movs	r3, #1
 800b54c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b550:	e002      	b.n	800b558 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b55e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b562:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <VL53L0X_get_pal_range_status+0x36a>
 800b56a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d103      	bne.n	800b57a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b572:	2301      	movs	r3, #1
 800b574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b578:	e002      	b.n	800b580 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b58a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <VL53L0X_get_pal_range_status+0x392>
 800b592:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b596:	2b01      	cmp	r3, #1
 800b598:	d103      	bne.n	800b5a2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b59a:	2301      	movs	r3, #1
 800b59c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a0:	e002      	b.n	800b5a8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b5ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3740      	adds	r7, #64	; 0x40
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b088      	sub	sp, #32
 800b5c2:	af02      	add	r7, sp, #8
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	330a      	adds	r3, #10
 800b5ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b5dc:	b299      	uxth	r1, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	f7f7 fced 	bl	8002fc8 <HAL_I2C_Master_Transmit>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b5f2:	693b      	ldr	r3, [r7, #16]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af02      	add	r7, sp, #8
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	330a      	adds	r3, #10
 800b60c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	b299      	uxth	r1, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	b29a      	uxth	r2, r3
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	4613      	mov	r3, r2
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	f7f7 fdbf 	bl	80031b0 <HAL_I2C_Master_Receive>
 800b632:	4603      	mov	r3, r0
 800b634:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b636:	693b      	ldr	r3, [r7, #16]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	460b      	mov	r3, r1
 800b64e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b650:	2300      	movs	r3, #0
 800b652:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b3f      	cmp	r3, #63	; 0x3f
 800b658:	d902      	bls.n	800b660 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b65a:	f06f 0303 	mvn.w	r3, #3
 800b65e:	e016      	b.n	800b68e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b660:	4a0d      	ldr	r2, [pc, #52]	; (800b698 <VL53L0X_WriteMulti+0x58>)
 800b662:	7afb      	ldrb	r3, [r7, #11]
 800b664:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	480c      	ldr	r0, [pc, #48]	; (800b69c <VL53L0X_WriteMulti+0x5c>)
 800b66c:	f003 fba6 	bl	800edbc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	461a      	mov	r2, r3
 800b676:	4908      	ldr	r1, [pc, #32]	; (800b698 <VL53L0X_WriteMulti+0x58>)
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff ffa0 	bl	800b5be <_I2CWrite>
 800b67e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b686:	23ec      	movs	r3, #236	; 0xec
 800b688:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20005460 	.word	0x20005460
 800b69c:	20005461 	.word	0x20005461

0800b6a0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	607a      	str	r2, [r7, #4]
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b6b4:	f107 030b 	add.w	r3, r7, #11
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff ff7e 	bl	800b5be <_I2CWrite>
 800b6c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b6ca:	23ec      	movs	r3, #236	; 0xec
 800b6cc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b6ce:	e00c      	b.n	800b6ea <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	6879      	ldr	r1, [r7, #4]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f7ff ff91 	bl	800b5fc <_I2CRead>
 800b6da:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b6e2:	23ec      	movs	r3, #236	; 0xec
 800b6e4:	75fb      	strb	r3, [r7, #23]
 800b6e6:	e000      	b.n	800b6ea <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b6e8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
 800b704:	4613      	mov	r3, r2
 800b706:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b70c:	4a0b      	ldr	r2, [pc, #44]	; (800b73c <VL53L0X_WrByte+0x44>)
 800b70e:	78fb      	ldrb	r3, [r7, #3]
 800b710:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b712:	4a0a      	ldr	r2, [pc, #40]	; (800b73c <VL53L0X_WrByte+0x44>)
 800b714:	78bb      	ldrb	r3, [r7, #2]
 800b716:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b718:	2202      	movs	r2, #2
 800b71a:	4908      	ldr	r1, [pc, #32]	; (800b73c <VL53L0X_WrByte+0x44>)
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff ff4e 	bl	800b5be <_I2CWrite>
 800b722:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b72a:	23ec      	movs	r3, #236	; 0xec
 800b72c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20005460 	.word	0x20005460

0800b740 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
 800b74c:	4613      	mov	r3, r2
 800b74e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b754:	4a0e      	ldr	r2, [pc, #56]	; (800b790 <VL53L0X_WrWord+0x50>)
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b75a:	883b      	ldrh	r3, [r7, #0]
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	b29b      	uxth	r3, r3
 800b760:	b2da      	uxtb	r2, r3
 800b762:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <VL53L0X_WrWord+0x50>)
 800b764:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b766:	883b      	ldrh	r3, [r7, #0]
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	4b09      	ldr	r3, [pc, #36]	; (800b790 <VL53L0X_WrWord+0x50>)
 800b76c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b76e:	2203      	movs	r2, #3
 800b770:	4907      	ldr	r1, [pc, #28]	; (800b790 <VL53L0X_WrWord+0x50>)
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff ff23 	bl	800b5be <_I2CWrite>
 800b778:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b780:	23ec      	movs	r3, #236	; 0xec
 800b782:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20005460 	.word	0x20005460

0800b794 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	4608      	mov	r0, r1
 800b79e:	4611      	mov	r1, r2
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	70fb      	strb	r3, [r7, #3]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	70bb      	strb	r3, [r7, #2]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b7b2:	f107 020e 	add.w	r2, r7, #14
 800b7b6:	78fb      	ldrb	r3, [r7, #3]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f81e 	bl	800b7fc <VL53L0X_RdByte>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b7c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d110      	bne.n	800b7ee <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b7cc:	7bba      	ldrb	r2, [r7, #14]
 800b7ce:	78bb      	ldrb	r3, [r7, #2]
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	787b      	ldrb	r3, [r7, #1]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b7dc:	7bba      	ldrb	r2, [r7, #14]
 800b7de:	78fb      	ldrb	r3, [r7, #3]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7ff ff88 	bl	800b6f8 <VL53L0X_WrByte>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]
 800b7ec:	e000      	b.n	800b7f0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b7ee:	bf00      	nop
done:
    return Status;
 800b7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	460b      	mov	r3, r1
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b80e:	f107 030b 	add.w	r3, r7, #11
 800b812:	2201      	movs	r2, #1
 800b814:	4619      	mov	r1, r3
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff fed1 	bl	800b5be <_I2CWrite>
 800b81c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b824:	23ec      	movs	r3, #236	; 0xec
 800b826:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b828:	e00c      	b.n	800b844 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b82a:	2201      	movs	r2, #1
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fee4 	bl	800b5fc <_I2CRead>
 800b834:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b83c:	23ec      	movs	r3, #236	; 0xec
 800b83e:	75fb      	strb	r3, [r7, #23]
 800b840:	e000      	b.n	800b844 <VL53L0X_RdByte+0x48>
    }
done:
 800b842:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	460b      	mov	r3, r1
 800b85a:	607a      	str	r2, [r7, #4]
 800b85c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b862:	f107 030b 	add.w	r3, r7, #11
 800b866:	2201      	movs	r2, #1
 800b868:	4619      	mov	r1, r3
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7ff fea7 	bl	800b5be <_I2CWrite>
 800b870:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b878:	23ec      	movs	r3, #236	; 0xec
 800b87a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b87c:	e017      	b.n	800b8ae <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b87e:	2202      	movs	r2, #2
 800b880:	490e      	ldr	r1, [pc, #56]	; (800b8bc <VL53L0X_RdWord+0x6c>)
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7ff feba 	bl	800b5fc <_I2CRead>
 800b888:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b890:	23ec      	movs	r3, #236	; 0xec
 800b892:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b894:	e00b      	b.n	800b8ae <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b896:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <VL53L0X_RdWord+0x6c>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <VL53L0X_RdWord+0x6c>)
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20005460 	.word	0x20005460

0800b8c0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b8d2:	f107 030b 	add.w	r3, r7, #11
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	4619      	mov	r1, r3
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7ff fe6f 	bl	800b5be <_I2CWrite>
 800b8e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b8e8:	23ec      	movs	r3, #236	; 0xec
 800b8ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b8ec:	e01b      	b.n	800b926 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b8ee:	2204      	movs	r2, #4
 800b8f0:	4910      	ldr	r1, [pc, #64]	; (800b934 <VL53L0X_RdDWord+0x74>)
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff fe82 	bl	800b5fc <_I2CRead>
 800b8f8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b900:	23ec      	movs	r3, #236	; 0xec
 800b902:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b904:	e00f      	b.n	800b926 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b906:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <VL53L0X_RdDWord+0x74>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	061a      	lsls	r2, r3, #24
 800b90c:	4b09      	ldr	r3, [pc, #36]	; (800b934 <VL53L0X_RdDWord+0x74>)
 800b90e:	785b      	ldrb	r3, [r3, #1]
 800b910:	041b      	lsls	r3, r3, #16
 800b912:	441a      	add	r2, r3
 800b914:	4b07      	ldr	r3, [pc, #28]	; (800b934 <VL53L0X_RdDWord+0x74>)
 800b916:	789b      	ldrb	r3, [r3, #2]
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	4413      	add	r3, r2
 800b91c:	4a05      	ldr	r2, [pc, #20]	; (800b934 <VL53L0X_RdDWord+0x74>)
 800b91e:	78d2      	ldrb	r2, [r2, #3]
 800b920:	441a      	add	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20005460 	.word	0x20005460

0800b938 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b944:	2002      	movs	r0, #2
 800b946:	f7f6 fe43 	bl	80025d0 <HAL_Delay>
    return status;
 800b94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <twoline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool twoline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_twoline_activations_map, 1, params)) {
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	2101      	movs	r1, #1
 800b966:	484b      	ldr	r0, [pc, #300]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b968:	f000 fb80 	bl	800c06c <ai_platform_get_activations_map>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 8086 	beq.w	800ba80 <twoline_configure_activations+0x128>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_35_input0_output_array.data = AI_PTR(g_twoline_activations_map[0] + 952);
 800b974:	4b47      	ldr	r3, [pc, #284]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800b97c:	4a46      	ldr	r2, [pc, #280]	; (800ba98 <twoline_configure_activations+0x140>)
 800b97e:	6093      	str	r3, [r2, #8]
    serving_default_dense_35_input0_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 952);
 800b980:	4b44      	ldr	r3, [pc, #272]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800b988:	4a43      	ldr	r2, [pc, #268]	; (800ba98 <twoline_configure_activations+0x140>)
 800b98a:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_twoline_activations_map[0] + 952);
 800b98c:	4b41      	ldr	r3, [pc, #260]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800b994:	4a41      	ldr	r2, [pc, #260]	; (800ba9c <twoline_configure_activations+0x144>)
 800b996:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 952);
 800b998:	4b3e      	ldr	r3, [pc, #248]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800b9a0:	4a3e      	ldr	r2, [pc, #248]	; (800ba9c <twoline_configure_activations+0x144>)
 800b9a2:	60d3      	str	r3, [r2, #12]
    
    gemm_1_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 976);
 800b9a4:	4b3b      	ldr	r3, [pc, #236]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800b9ac:	4a3c      	ldr	r2, [pc, #240]	; (800baa0 <twoline_configure_activations+0x148>)
 800b9ae:	6093      	str	r3, [r2, #8]
    gemm_1_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 976);
 800b9b0:	4b38      	ldr	r3, [pc, #224]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800b9b8:	4a39      	ldr	r2, [pc, #228]	; (800baa0 <twoline_configure_activations+0x148>)
 800b9ba:	60d3      	str	r3, [r2, #12]
    
    gemm_1_output_array.data = AI_PTR(g_twoline_activations_map[0] + 1024);
 800b9bc:	4b35      	ldr	r3, [pc, #212]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9c4:	4a37      	ldr	r2, [pc, #220]	; (800baa4 <twoline_configure_activations+0x14c>)
 800b9c6:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 1024);
 800b9c8:	4b32      	ldr	r3, [pc, #200]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9d0:	4a34      	ldr	r2, [pc, #208]	; (800baa4 <twoline_configure_activations+0x14c>)
 800b9d2:	60d3      	str	r3, [r2, #12]
    
    gemm_2_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800b9d4:	4b2f      	ldr	r3, [pc, #188]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a33      	ldr	r2, [pc, #204]	; (800baa8 <twoline_configure_activations+0x150>)
 800b9da:	6093      	str	r3, [r2, #8]
    gemm_2_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800b9dc:	4b2d      	ldr	r3, [pc, #180]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a31      	ldr	r2, [pc, #196]	; (800baa8 <twoline_configure_activations+0x150>)
 800b9e2:	60d3      	str	r3, [r2, #12]
    
    gemm_2_output_array.data = AI_PTR(g_twoline_activations_map[0] + 1536);
 800b9e4:	4b2b      	ldr	r3, [pc, #172]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b9ec:	4a2f      	ldr	r2, [pc, #188]	; (800baac <twoline_configure_activations+0x154>)
 800b9ee:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 1536);
 800b9f0:	4b28      	ldr	r3, [pc, #160]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b9f8:	4a2c      	ldr	r2, [pc, #176]	; (800baac <twoline_configure_activations+0x154>)
 800b9fa:	60d3      	str	r3, [r2, #12]
    
    gemm_3_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800b9fc:	4b25      	ldr	r3, [pc, #148]	; (800ba94 <twoline_configure_activations+0x13c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a2b      	ldr	r2, [pc, #172]	; (800bab0 <twoline_configure_activations+0x158>)
 800ba02:	6093      	str	r3, [r2, #8]
    gemm_3_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba04:	4b23      	ldr	r3, [pc, #140]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a29      	ldr	r2, [pc, #164]	; (800bab0 <twoline_configure_activations+0x158>)
 800ba0a:	60d3      	str	r3, [r2, #12]
    
    gemm_3_output_array.data = AI_PTR(g_twoline_activations_map[0] + 256);
 800ba0c:	4b21      	ldr	r3, [pc, #132]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ba14:	4a27      	ldr	r2, [pc, #156]	; (800bab4 <twoline_configure_activations+0x15c>)
 800ba16:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 256);
 800ba18:	4b1e      	ldr	r3, [pc, #120]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ba20:	4a24      	ldr	r2, [pc, #144]	; (800bab4 <twoline_configure_activations+0x15c>)
 800ba22:	60d3      	str	r3, [r2, #12]
    
    gemm_4_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba24:	4b1b      	ldr	r3, [pc, #108]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a23      	ldr	r2, [pc, #140]	; (800bab8 <twoline_configure_activations+0x160>)
 800ba2a:	6093      	str	r3, [r2, #8]
    gemm_4_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba2c:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a21      	ldr	r2, [pc, #132]	; (800bab8 <twoline_configure_activations+0x160>)
 800ba32:	60d3      	str	r3, [r2, #12]
    
    gemm_4_output_array.data = AI_PTR(g_twoline_activations_map[0] + 64);
 800ba34:	4b17      	ldr	r3, [pc, #92]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3340      	adds	r3, #64	; 0x40
 800ba3a:	4a20      	ldr	r2, [pc, #128]	; (800babc <twoline_configure_activations+0x164>)
 800ba3c:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 64);
 800ba3e:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3340      	adds	r3, #64	; 0x40
 800ba44:	4a1d      	ldr	r2, [pc, #116]	; (800babc <twoline_configure_activations+0x164>)
 800ba46:	60d3      	str	r3, [r2, #12]
    
    gemm_5_scratch0_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba48:	4b12      	ldr	r3, [pc, #72]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a1c      	ldr	r2, [pc, #112]	; (800bac0 <twoline_configure_activations+0x168>)
 800ba4e:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba50:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a1a      	ldr	r2, [pc, #104]	; (800bac0 <twoline_configure_activations+0x168>)
 800ba56:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_twoline_activations_map[0] + 96);
 800ba58:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3360      	adds	r3, #96	; 0x60
 800ba5e:	4a19      	ldr	r2, [pc, #100]	; (800bac4 <twoline_configure_activations+0x16c>)
 800ba60:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 96);
 800ba62:	4b0c      	ldr	r3, [pc, #48]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3360      	adds	r3, #96	; 0x60
 800ba68:	4a16      	ldr	r2, [pc, #88]	; (800bac4 <twoline_configure_activations+0x16c>)
 800ba6a:	60d3      	str	r3, [r2, #12]
    
    conversion_6_output_array.data = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba6c:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a15      	ldr	r2, [pc, #84]	; (800bac8 <twoline_configure_activations+0x170>)
 800ba72:	6093      	str	r3, [r2, #8]
    conversion_6_output_array.data_start = AI_PTR(g_twoline_activations_map[0] + 0);
 800ba74:	4b07      	ldr	r3, [pc, #28]	; (800ba94 <twoline_configure_activations+0x13c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a13      	ldr	r2, [pc, #76]	; (800bac8 <twoline_configure_activations+0x170>)
 800ba7a:	60d3      	str	r3, [r2, #12]
    
    return true;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e005      	b.n	800ba8c <twoline_configure_activations+0x134>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ba80:	2213      	movs	r2, #19
 800ba82:	2130      	movs	r1, #48	; 0x30
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fc6f 	bl	800c368 <ai_platform_network_set_error>
  return false;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	200054a0 	.word	0x200054a0
 800ba98:	20000524 	.word	0x20000524
 800ba9c:	20000534 	.word	0x20000534
 800baa0:	200004d4 	.word	0x200004d4
 800baa4:	20000544 	.word	0x20000544
 800baa8:	200004e4 	.word	0x200004e4
 800baac:	20000554 	.word	0x20000554
 800bab0:	200004f4 	.word	0x200004f4
 800bab4:	20000564 	.word	0x20000564
 800bab8:	20000504 	.word	0x20000504
 800babc:	20000574 	.word	0x20000574
 800bac0:	20000514 	.word	0x20000514
 800bac4:	20000414 	.word	0x20000414
 800bac8:	20000424 	.word	0x20000424

0800bacc <twoline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool twoline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_twoline_weights_map, 1, params)) {
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	2101      	movs	r1, #1
 800bada:	4861      	ldr	r0, [pc, #388]	; (800bc60 <twoline_configure_weights+0x194>)
 800badc:	f000 fa6e 	bl	800bfbc <ai_platform_get_weights_map>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 80b2 	beq.w	800bc4c <twoline_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800bae8:	4b5e      	ldr	r3, [pc, #376]	; (800bc64 <twoline_configure_weights+0x198>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baf0:	4a5c      	ldr	r2, [pc, #368]	; (800bc64 <twoline_configure_weights+0x198>)
 800baf2:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 0);
 800baf4:	4b5a      	ldr	r3, [pc, #360]	; (800bc60 <twoline_configure_weights+0x194>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a5a      	ldr	r2, [pc, #360]	; (800bc64 <twoline_configure_weights+0x198>)
 800bafa:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 0);
 800bafc:	4b58      	ldr	r3, [pc, #352]	; (800bc60 <twoline_configure_weights+0x194>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a58      	ldr	r2, [pc, #352]	; (800bc64 <twoline_configure_weights+0x198>)
 800bb02:	60d3      	str	r3, [r2, #12]
    
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800bb04:	4b58      	ldr	r3, [pc, #352]	; (800bc68 <twoline_configure_weights+0x19c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb0c:	4a56      	ldr	r2, [pc, #344]	; (800bc68 <twoline_configure_weights+0x19c>)
 800bb0e:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 12288);
 800bb10:	4b53      	ldr	r3, [pc, #332]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800bb18:	4a53      	ldr	r2, [pc, #332]	; (800bc68 <twoline_configure_weights+0x19c>)
 800bb1a:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 12288);
 800bb1c:	4b50      	ldr	r3, [pc, #320]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800bb24:	4a50      	ldr	r2, [pc, #320]	; (800bc68 <twoline_configure_weights+0x19c>)
 800bb26:	60d3      	str	r3, [r2, #12]
    
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800bb28:	4b50      	ldr	r3, [pc, #320]	; (800bc6c <twoline_configure_weights+0x1a0>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb30:	4a4e      	ldr	r2, [pc, #312]	; (800bc6c <twoline_configure_weights+0x1a0>)
 800bb32:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 14336);
 800bb34:	4b4a      	ldr	r3, [pc, #296]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 800bb3c:	4a4b      	ldr	r2, [pc, #300]	; (800bc6c <twoline_configure_weights+0x1a0>)
 800bb3e:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 14336);
 800bb40:	4b47      	ldr	r3, [pc, #284]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 800bb48:	4a48      	ldr	r2, [pc, #288]	; (800bc6c <twoline_configure_weights+0x1a0>)
 800bb4a:	60d3      	str	r3, [r2, #12]
    
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800bb4c:	4b48      	ldr	r3, [pc, #288]	; (800bc70 <twoline_configure_weights+0x1a4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb54:	4a46      	ldr	r2, [pc, #280]	; (800bc70 <twoline_configure_weights+0x1a4>)
 800bb56:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 79872);
 800bb58:	4b41      	ldr	r3, [pc, #260]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800bb60:	4a43      	ldr	r2, [pc, #268]	; (800bc70 <twoline_configure_weights+0x1a4>)
 800bb62:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 79872);
 800bb64:	4b3e      	ldr	r3, [pc, #248]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800bb6c:	4a40      	ldr	r2, [pc, #256]	; (800bc70 <twoline_configure_weights+0x1a4>)
 800bb6e:	60d3      	str	r3, [r2, #12]
    
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800bb70:	4b40      	ldr	r3, [pc, #256]	; (800bc74 <twoline_configure_weights+0x1a8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb78:	4a3e      	ldr	r2, [pc, #248]	; (800bc74 <twoline_configure_weights+0x1a8>)
 800bb7a:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 80384);
 800bb7c:	4b38      	ldr	r3, [pc, #224]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 800bb84:	4a3b      	ldr	r2, [pc, #236]	; (800bc74 <twoline_configure_weights+0x1a8>)
 800bb86:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 80384);
 800bb88:	4b35      	ldr	r3, [pc, #212]	; (800bc60 <twoline_configure_weights+0x194>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 800bb90:	4a38      	ldr	r2, [pc, #224]	; (800bc74 <twoline_configure_weights+0x1a8>)
 800bb92:	60d3      	str	r3, [r2, #12]
    
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800bb94:	4b38      	ldr	r3, [pc, #224]	; (800bc78 <twoline_configure_weights+0x1ac>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb9c:	4a36      	ldr	r2, [pc, #216]	; (800bc78 <twoline_configure_weights+0x1ac>)
 800bb9e:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 84480);
 800bba0:	4b2f      	ldr	r3, [pc, #188]	; (800bc60 <twoline_configure_weights+0x194>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f503 33a5 	add.w	r3, r3, #84480	; 0x14a00
 800bba8:	4a33      	ldr	r2, [pc, #204]	; (800bc78 <twoline_configure_weights+0x1ac>)
 800bbaa:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 84480);
 800bbac:	4b2c      	ldr	r3, [pc, #176]	; (800bc60 <twoline_configure_weights+0x194>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f503 33a5 	add.w	r3, r3, #84480	; 0x14a00
 800bbb4:	4a30      	ldr	r2, [pc, #192]	; (800bc78 <twoline_configure_weights+0x1ac>)
 800bbb6:	60d3      	str	r3, [r2, #12]
    
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800bbb8:	4b30      	ldr	r3, [pc, #192]	; (800bc7c <twoline_configure_weights+0x1b0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbc0:	4a2e      	ldr	r2, [pc, #184]	; (800bc7c <twoline_configure_weights+0x1b0>)
 800bbc2:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 84608);
 800bbc4:	4b26      	ldr	r3, [pc, #152]	; (800bc60 <twoline_configure_weights+0x194>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	4b2d      	ldr	r3, [pc, #180]	; (800bc80 <twoline_configure_weights+0x1b4>)
 800bbca:	4413      	add	r3, r2
 800bbcc:	4a2b      	ldr	r2, [pc, #172]	; (800bc7c <twoline_configure_weights+0x1b0>)
 800bbce:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 84608);
 800bbd0:	4b23      	ldr	r3, [pc, #140]	; (800bc60 <twoline_configure_weights+0x194>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	4b2a      	ldr	r3, [pc, #168]	; (800bc80 <twoline_configure_weights+0x1b4>)
 800bbd6:	4413      	add	r3, r2
 800bbd8:	4a28      	ldr	r2, [pc, #160]	; (800bc7c <twoline_configure_weights+0x1b0>)
 800bbda:	60d3      	str	r3, [r2, #12]
    
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <twoline_configure_weights+0x1b8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbe4:	4a27      	ldr	r2, [pc, #156]	; (800bc84 <twoline_configure_weights+0x1b8>)
 800bbe6:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 85632);
 800bbe8:	4b1d      	ldr	r3, [pc, #116]	; (800bc60 <twoline_configure_weights+0x194>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	4b26      	ldr	r3, [pc, #152]	; (800bc88 <twoline_configure_weights+0x1bc>)
 800bbee:	4413      	add	r3, r2
 800bbf0:	4a24      	ldr	r2, [pc, #144]	; (800bc84 <twoline_configure_weights+0x1b8>)
 800bbf2:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 85632);
 800bbf4:	4b1a      	ldr	r3, [pc, #104]	; (800bc60 <twoline_configure_weights+0x194>)
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	4b23      	ldr	r3, [pc, #140]	; (800bc88 <twoline_configure_weights+0x1bc>)
 800bbfa:	4413      	add	r3, r2
 800bbfc:	4a21      	ldr	r2, [pc, #132]	; (800bc84 <twoline_configure_weights+0x1b8>)
 800bbfe:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800bc00:	4b22      	ldr	r3, [pc, #136]	; (800bc8c <twoline_configure_weights+0x1c0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc08:	4a20      	ldr	r2, [pc, #128]	; (800bc8c <twoline_configure_weights+0x1c0>)
 800bc0a:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_twoline_weights_map[0] + 85760);
 800bc0c:	4b14      	ldr	r3, [pc, #80]	; (800bc60 <twoline_configure_weights+0x194>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	4b1f      	ldr	r3, [pc, #124]	; (800bc90 <twoline_configure_weights+0x1c4>)
 800bc12:	4413      	add	r3, r2
 800bc14:	4a1d      	ldr	r2, [pc, #116]	; (800bc8c <twoline_configure_weights+0x1c0>)
 800bc16:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_twoline_weights_map[0] + 85760);
 800bc18:	4b11      	ldr	r3, [pc, #68]	; (800bc60 <twoline_configure_weights+0x194>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	4b1c      	ldr	r3, [pc, #112]	; (800bc90 <twoline_configure_weights+0x1c4>)
 800bc1e:	4413      	add	r3, r2
 800bc20:	4a1a      	ldr	r2, [pc, #104]	; (800bc8c <twoline_configure_weights+0x1c0>)
 800bc22:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800bc24:	4b1b      	ldr	r3, [pc, #108]	; (800bc94 <twoline_configure_weights+0x1c8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc2c:	4a19      	ldr	r2, [pc, #100]	; (800bc94 <twoline_configure_weights+0x1c8>)
 800bc2e:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_twoline_weights_map[0] + 85888);
 800bc30:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <twoline_configure_weights+0x194>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	4b18      	ldr	r3, [pc, #96]	; (800bc98 <twoline_configure_weights+0x1cc>)
 800bc36:	4413      	add	r3, r2
 800bc38:	4a16      	ldr	r2, [pc, #88]	; (800bc94 <twoline_configure_weights+0x1c8>)
 800bc3a:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_twoline_weights_map[0] + 85888);
 800bc3c:	4b08      	ldr	r3, [pc, #32]	; (800bc60 <twoline_configure_weights+0x194>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b15      	ldr	r3, [pc, #84]	; (800bc98 <twoline_configure_weights+0x1cc>)
 800bc42:	4413      	add	r3, r2
 800bc44:	4a13      	ldr	r2, [pc, #76]	; (800bc94 <twoline_configure_weights+0x1c8>)
 800bc46:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e005      	b.n	800bc58 <twoline_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800bc4c:	2212      	movs	r2, #18
 800bc4e:	2130      	movs	r1, #48	; 0x30
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fb89 	bl	800c368 <ai_platform_network_set_error>
  return false;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	200054a4 	.word	0x200054a4
 800bc64:	20000434 	.word	0x20000434
 800bc68:	20000444 	.word	0x20000444
 800bc6c:	20000454 	.word	0x20000454
 800bc70:	20000464 	.word	0x20000464
 800bc74:	20000474 	.word	0x20000474
 800bc78:	20000484 	.word	0x20000484
 800bc7c:	20000494 	.word	0x20000494
 800bc80:	00014a80 	.word	0x00014a80
 800bc84:	200004a4 	.word	0x200004a4
 800bc88:	00014e80 	.word	0x00014e80
 800bc8c:	200004b4 	.word	0x200004b4
 800bc90:	00014f00 	.word	0x00014f00
 800bc94:	200004c4 	.word	0x200004c4
 800bc98:	00014f80 	.word	0x00014f80

0800bc9c <ai_twoline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_twoline_get_error(ai_handle network)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fa53 	bl	800c150 <ai_platform_network_get_error>
 800bcaa:	4603      	mov	r3, r0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <ai_twoline_create>:

AI_API_ENTRY
ai_error ai_twoline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	2305      	movs	r3, #5
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4a04      	ldr	r2, [pc, #16]	; (800bcdc <ai_twoline_create+0x28>)
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fe65 	bl	800c99c <ai_platform_network_create>
 800bcd2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	20000e08 	.word	0x20000e08

0800bce0 <ai_twoline_create_and_init>:

AI_API_ENTRY
ai_error ai_twoline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b096      	sub	sp, #88	; 0x58
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_twoline_create(network, AI_TWOLINE_DATA_CONFIG);
 800bcec:	2100      	movs	r1, #0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff ffe0 	bl	800bcb4 <ai_twoline_create>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800bcf8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <ai_twoline_create_and_init+0x24>
        return err;
 800bd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd02:	e05d      	b.n	800bdc0 <ai_twoline_create_and_init+0xe0>
    if (ai_twoline_data_params_get(&params) != true) {
 800bd04:	f107 0314 	add.w	r3, r7, #20
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 f8dd 	bl	800bec8 <ai_twoline_data_params_get>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f083 0301 	eor.w	r3, r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d008      	beq.n	800bd2c <ai_twoline_create_and_init+0x4c>
        err = ai_twoline_get_error(*network);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff ffbc 	bl	800bc9c <ai_twoline_get_error>
 800bd24:	4603      	mov	r3, r0
 800bd26:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800bd28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd2a:	e049      	b.n	800bdc0 <ai_twoline_create_and_init+0xe0>
    }
#if defined(AI_TWOLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d016      	beq.n	800bd60 <ai_twoline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800bd32:	2300      	movs	r3, #0
 800bd34:	657b      	str	r3, [r7, #84]	; 0x54
 800bd36:	e00e      	b.n	800bd56 <ai_twoline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800bd38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4413      	add	r3, r2
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	f107 0314 	add.w	r3, r7, #20
 800bd48:	330c      	adds	r3, #12
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f922 	bl	800bf94 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800bd50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd52:	3301      	adds	r3, #1
 800bd54:	657b      	str	r3, [r7, #84]	; 0x54
 800bd56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd58:	461a      	mov	r2, r3
 800bd5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	dbeb      	blt.n	800bd38 <ai_twoline_create_and_init+0x58>
    }
#endif
#if defined(AI_TWOLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d016      	beq.n	800bd94 <ai_twoline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800bd66:	2300      	movs	r3, #0
 800bd68:	653b      	str	r3, [r7, #80]	; 0x50
 800bd6a:	e00e      	b.n	800bd8a <ai_twoline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800bd6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	4413      	add	r3, r2
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	f107 0314 	add.w	r3, r7, #20
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 f908 	bl	800bf94 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800bd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd86:	3301      	adds	r3, #1
 800bd88:	653b      	str	r3, [r7, #80]	; 0x50
 800bd8a:	8b7b      	ldrh	r3, [r7, #26]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd90:	4293      	cmp	r3, r2
 800bd92:	dbeb      	blt.n	800bd6c <ai_twoline_create_and_init+0x8c>
    }
#endif
    if (ai_twoline_init(*network, &params) != true) {
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f107 0214 	add.w	r2, r7, #20
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f846 	bl	800be30 <ai_twoline_init>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f083 0301 	eor.w	r3, r3, #1
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d006      	beq.n	800bdbe <ai_twoline_create_and_init+0xde>
        err = ai_twoline_get_error(*network);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff ff71 	bl	800bc9c <ai_twoline_get_error>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800bdbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3758      	adds	r7, #88	; 0x58
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <ai_twoline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <ai_twoline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bdd8:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <ai_twoline_inputs_get+0x2c>)
 800bdda:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a06      	ldr	r2, [pc, #24]	; (800bdf8 <ai_twoline_inputs_get+0x30>)
 800bde0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fac5 	bl	800c374 <ai_platform_inputs_get>
 800bdea:	4603      	mov	r3, r0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20000e08 	.word	0x20000e08
 800bdf8:	a1c00100 	.word	0xa1c00100

0800bdfc <ai_twoline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_twoline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d104      	bne.n	800be16 <ai_twoline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800be0c:	4b06      	ldr	r3, [pc, #24]	; (800be28 <ai_twoline_outputs_get+0x2c>)
 800be0e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a06      	ldr	r2, [pc, #24]	; (800be2c <ai_twoline_outputs_get+0x30>)
 800be14:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fc37 	bl	800c68c <ai_platform_outputs_get>
 800be1e:	4603      	mov	r3, r0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20000e08 	.word	0x20000e08
 800be2c:	a1c00100 	.word	0xa1c00100

0800be30 <ai_twoline_init>:
}

AI_API_ENTRY
ai_bool ai_twoline_init(
  ai_handle network, const ai_network_params* params)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 ff87 	bl	800cd50 <ai_platform_network_init>
 800be42:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <ai_twoline_init+0x1e>
 800be4a:	2300      	movs	r3, #0
 800be4c:	e028      	b.n	800bea0 <ai_twoline_init+0x70>

  ai_bool ok = true;
 800be4e:	2301      	movs	r3, #1
 800be50:	72fb      	strb	r3, [r7, #11]
  ok &= twoline_configure_weights(net_ctx, params);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f7ff fe39 	bl	800bacc <twoline_configure_weights>
 800be5a:	4603      	mov	r3, r0
 800be5c:	461a      	mov	r2, r3
 800be5e:	7afb      	ldrb	r3, [r7, #11]
 800be60:	4013      	ands	r3, r2
 800be62:	2b00      	cmp	r3, #0
 800be64:	bf14      	ite	ne
 800be66:	2301      	movne	r3, #1
 800be68:	2300      	moveq	r3, #0
 800be6a:	72fb      	strb	r3, [r7, #11]
  ok &= twoline_configure_activations(net_ctx, params);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f7ff fd72 	bl	800b958 <twoline_configure_activations>
 800be74:	4603      	mov	r3, r0
 800be76:	461a      	mov	r2, r3
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	4013      	ands	r3, r2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	bf14      	ite	ne
 800be80:	2301      	movne	r3, #1
 800be82:	2300      	moveq	r3, #0
 800be84:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f001 f8fe 	bl	800d088 <ai_platform_network_post_init>
 800be8c:	4603      	mov	r3, r0
 800be8e:	461a      	mov	r2, r3
 800be90:	7afb      	ldrb	r3, [r7, #11]
 800be92:	4013      	ands	r3, r2
 800be94:	2b00      	cmp	r3, #0
 800be96:	bf14      	ite	ne
 800be98:	2301      	movne	r3, #1
 800be9a:	2300      	moveq	r3, #0
 800be9c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800be9e:	7afb      	ldrb	r3, [r7, #11]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <ai_twoline_run>:


AI_API_ENTRY
ai_i32 ai_twoline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f001 fa0f 	bl	800d2dc <ai_platform_network_process>
 800bebe:	4603      	mov	r3, r0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <ai_twoline_data_params_get>:
 * @ingroup twoline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_twoline_data_params_get(ai_network_params* params)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <ai_twoline_data_params_get+0x12>
 800bed6:	2300      	movs	r3, #0
 800bed8:	e016      	b.n	800bf08 <ai_twoline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800beda:	4a0d      	ldr	r2, [pc, #52]	; (800bf10 <ai_twoline_data_params_get+0x48>)
 800bedc:	f107 0310 	add.w	r3, r7, #16
 800bee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bee4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWOLINE_DATA_ACTIVATIONS_COUNT, g_twoline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800bee8:	4a0a      	ldr	r2, [pc, #40]	; (800bf14 <ai_twoline_data_params_get+0x4c>)
 800beea:	f107 0308 	add.w	r3, r7, #8
 800beee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bef2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWOLINE_DATA_WEIGHTS_COUNT, g_twoline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800bef6:	f107 0210 	add.w	r2, r7, #16
 800befa:	f107 0308 	add.w	r3, r7, #8
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f90b 	bl	800c11c <ai_platform_bind_network_params>
 800bf06:	4603      	mov	r3, r0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	08012608 	.word	0x08012608
 800bf14:	08012610 	.word	0x08012610

0800bf18 <ai_buffer_get_size>:
 800bf18:	b368      	cbz	r0, 800bf76 <ai_buffer_get_size+0x5e>
 800bf1a:	4b17      	ldr	r3, [pc, #92]	; (800bf78 <ai_buffer_get_size+0x60>)
 800bf1c:	4a17      	ldr	r2, [pc, #92]	; (800bf7c <ai_buffer_get_size+0x64>)
 800bf1e:	b410      	push	{r4}
 800bf20:	6804      	ldr	r4, [r0, #0]
 800bf22:	4023      	ands	r3, r4
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d123      	bne.n	800bf70 <ai_buffer_get_size+0x58>
 800bf28:	b311      	cbz	r1, 800bf70 <ai_buffer_get_size+0x58>
 800bf2a:	6984      	ldr	r4, [r0, #24]
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	321f      	adds	r2, #31
 800bf30:	f022 021f 	bic.w	r2, r2, #31
 800bf34:	7d03      	ldrb	r3, [r0, #20]
 800bf36:	6941      	ldr	r1, [r0, #20]
 800bf38:	f1a3 0301 	sub.w	r3, r3, #1
 800bf3c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800bf40:	fab3 f383 	clz	r3, r3
 800bf44:	095b      	lsrs	r3, r3, #5
 800bf46:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800bf4a:	da0c      	bge.n	800bf66 <ai_buffer_get_size+0x4e>
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d103      	bne.n	800bf58 <ai_buffer_get_size+0x40>
 800bf50:	2802      	cmp	r0, #2
 800bf52:	f04f 0302 	mov.w	r3, #2
 800bf56:	d006      	beq.n	800bf66 <ai_buffer_get_size+0x4e>
 800bf58:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	4298      	cmp	r0, r3
 800bf60:	fb01 f202 	mul.w	r2, r1, r2
 800bf64:	d1f2      	bne.n	800bf4c <ai_buffer_get_size+0x34>
 800bf66:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800bf6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	6984      	ldr	r4, [r0, #24]
 800bf72:	6862      	ldr	r2, [r4, #4]
 800bf74:	e7de      	b.n	800bf34 <ai_buffer_get_size+0x1c>
 800bf76:	4770      	bx	lr
 800bf78:	017fffff 	.word	0x017fffff
 800bf7c:	000400c0 	.word	0x000400c0

0800bf80 <ai_buffer_array_sane>:
 800bf80:	b138      	cbz	r0, 800bf92 <ai_buffer_array_sane+0x12>
 800bf82:	6843      	ldr	r3, [r0, #4]
 800bf84:	b123      	cbz	r3, 800bf90 <ai_buffer_array_sane+0x10>
 800bf86:	8840      	ldrh	r0, [r0, #2]
 800bf88:	3800      	subs	r0, #0
 800bf8a:	bf18      	it	ne
 800bf8c:	2001      	movne	r0, #1
 800bf8e:	4770      	bx	lr
 800bf90:	4618      	mov	r0, r3
 800bf92:	4770      	bx	lr

0800bf94 <ai_buffer_array_item_set_address>:
 800bf94:	b150      	cbz	r0, 800bfac <ai_buffer_array_item_set_address+0x18>
 800bf96:	6843      	ldr	r3, [r0, #4]
 800bf98:	b14b      	cbz	r3, 800bfae <ai_buffer_array_item_set_address+0x1a>
 800bf9a:	8840      	ldrh	r0, [r0, #2]
 800bf9c:	b900      	cbnz	r0, 800bfa0 <ai_buffer_array_item_set_address+0xc>
 800bf9e:	4770      	bx	lr
 800bfa0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800bfaa:	604a      	str	r2, [r1, #4]
 800bfac:	4770      	bx	lr
 800bfae:	4618      	mov	r0, r3
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop

0800bfb4 <_ai_platform_acquire_crc>:
 800bfb4:	2001      	movs	r0, #1
 800bfb6:	4770      	bx	lr

0800bfb8 <_ai_platform_release_crc>:
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop

0800bfbc <ai_platform_get_weights_map>:
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	bf18      	it	ne
 800bfc0:	2800      	cmpne	r0, #0
 800bfc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc4:	bf0c      	ite	eq
 800bfc6:	2401      	moveq	r4, #1
 800bfc8:	2400      	movne	r4, #0
 800bfca:	2a00      	cmp	r2, #0
 800bfcc:	bf08      	it	eq
 800bfce:	f044 0401 	orreq.w	r4, r4, #1
 800bfd2:	b114      	cbz	r4, 800bfda <ai_platform_get_weights_map+0x1e>
 800bfd4:	2400      	movs	r4, #0
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfda:	4616      	mov	r6, r2
 800bfdc:	4b22      	ldr	r3, [pc, #136]	; (800c068 <ai_platform_get_weights_map+0xac>)
 800bfde:	6812      	ldr	r2, [r2, #0]
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	460f      	mov	r7, r1
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d022      	beq.n	800c02e <ai_platform_get_weights_map+0x72>
 800bfe8:	6870      	ldr	r0, [r6, #4]
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d0f2      	beq.n	800bfd4 <ai_platform_get_weights_map+0x18>
 800bfee:	6806      	ldr	r6, [r0, #0]
 800bff0:	429e      	cmp	r6, r3
 800bff2:	d006      	beq.n	800c002 <ai_platform_get_weights_map+0x46>
 800bff4:	f1a1 0401 	sub.w	r4, r1, #1
 800bff8:	6028      	str	r0, [r5, #0]
 800bffa:	fab4 f484 	clz	r4, r4
 800bffe:	0964      	lsrs	r4, r4, #5
 800c000:	e7e9      	b.n	800bfd6 <ai_platform_get_weights_map+0x1a>
 800c002:	3d04      	subs	r5, #4
 800c004:	4602      	mov	r2, r0
 800c006:	4621      	mov	r1, r4
 800c008:	e000      	b.n	800c00c <ai_platform_get_weights_map+0x50>
 800c00a:	4619      	mov	r1, r3
 800c00c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c010:	42b3      	cmp	r3, r6
 800c012:	d025      	beq.n	800c060 <ai_platform_get_weights_map+0xa4>
 800c014:	f845 3f04 	str.w	r3, [r5, #4]!
 800c018:	1c4b      	adds	r3, r1, #1
 800c01a:	429f      	cmp	r7, r3
 800c01c:	d8f5      	bhi.n	800c00a <ai_platform_get_weights_map+0x4e>
 800c01e:	d1da      	bne.n	800bfd6 <ai_platform_get_weights_map+0x1a>
 800c020:	3102      	adds	r1, #2
 800c022:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c026:	42b3      	cmp	r3, r6
 800c028:	d1d5      	bne.n	800bfd6 <ai_platform_get_weights_map+0x1a>
 800c02a:	2401      	movs	r4, #1
 800c02c:	e7d3      	b.n	800bfd6 <ai_platform_get_weights_map+0x1a>
 800c02e:	1d30      	adds	r0, r6, #4
 800c030:	f7ff ffa6 	bl	800bf80 <ai_buffer_array_sane>
 800c034:	2800      	cmp	r0, #0
 800c036:	d0cd      	beq.n	800bfd4 <ai_platform_get_weights_map+0x18>
 800c038:	88f3      	ldrh	r3, [r6, #6]
 800c03a:	429f      	cmp	r7, r3
 800c03c:	d1ca      	bne.n	800bfd4 <ai_platform_get_weights_map+0x18>
 800c03e:	3d04      	subs	r5, #4
 800c040:	4622      	mov	r2, r4
 800c042:	68b3      	ldr	r3, [r6, #8]
 800c044:	4423      	add	r3, r4
 800c046:	341c      	adds	r4, #28
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	b123      	cbz	r3, 800c056 <ai_platform_get_weights_map+0x9a>
 800c04c:	3201      	adds	r2, #1
 800c04e:	f845 3f04 	str.w	r3, [r5, #4]!
 800c052:	4297      	cmp	r7, r2
 800c054:	d8f5      	bhi.n	800c042 <ai_platform_get_weights_map+0x86>
 800c056:	1abc      	subs	r4, r7, r2
 800c058:	fab4 f484 	clz	r4, r4
 800c05c:	0964      	lsrs	r4, r4, #5
 800c05e:	e7ba      	b.n	800bfd6 <ai_platform_get_weights_map+0x1a>
 800c060:	428f      	cmp	r7, r1
 800c062:	d1b8      	bne.n	800bfd6 <ai_platform_get_weights_map+0x1a>
 800c064:	e7e1      	b.n	800c02a <ai_platform_get_weights_map+0x6e>
 800c066:	bf00      	nop
 800c068:	a1facade 	.word	0xa1facade

0800c06c <ai_platform_get_activations_map>:
 800c06c:	2900      	cmp	r1, #0
 800c06e:	bf18      	it	ne
 800c070:	2800      	cmpne	r0, #0
 800c072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c074:	bf0c      	ite	eq
 800c076:	2401      	moveq	r4, #1
 800c078:	2400      	movne	r4, #0
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	bf08      	it	eq
 800c07e:	f044 0401 	orreq.w	r4, r4, #1
 800c082:	b114      	cbz	r4, 800c08a <ai_platform_get_activations_map+0x1e>
 800c084:	2400      	movs	r4, #0
 800c086:	4620      	mov	r0, r4
 800c088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c08a:	4616      	mov	r6, r2
 800c08c:	4b22      	ldr	r3, [pc, #136]	; (800c118 <ai_platform_get_activations_map+0xac>)
 800c08e:	6812      	ldr	r2, [r2, #0]
 800c090:	4605      	mov	r5, r0
 800c092:	460f      	mov	r7, r1
 800c094:	429a      	cmp	r2, r3
 800c096:	d022      	beq.n	800c0de <ai_platform_get_activations_map+0x72>
 800c098:	6a30      	ldr	r0, [r6, #32]
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d0f2      	beq.n	800c084 <ai_platform_get_activations_map+0x18>
 800c09e:	6806      	ldr	r6, [r0, #0]
 800c0a0:	429e      	cmp	r6, r3
 800c0a2:	d006      	beq.n	800c0b2 <ai_platform_get_activations_map+0x46>
 800c0a4:	f1a1 0401 	sub.w	r4, r1, #1
 800c0a8:	6028      	str	r0, [r5, #0]
 800c0aa:	fab4 f484 	clz	r4, r4
 800c0ae:	0964      	lsrs	r4, r4, #5
 800c0b0:	e7e9      	b.n	800c086 <ai_platform_get_activations_map+0x1a>
 800c0b2:	3d04      	subs	r5, #4
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	e000      	b.n	800c0bc <ai_platform_get_activations_map+0x50>
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	d026      	beq.n	800c112 <ai_platform_get_activations_map+0xa6>
 800c0c4:	f845 3f04 	str.w	r3, [r5, #4]!
 800c0c8:	1c4b      	adds	r3, r1, #1
 800c0ca:	429f      	cmp	r7, r3
 800c0cc:	d8f5      	bhi.n	800c0ba <ai_platform_get_activations_map+0x4e>
 800c0ce:	d1da      	bne.n	800c086 <ai_platform_get_activations_map+0x1a>
 800c0d0:	3102      	adds	r1, #2
 800c0d2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c0d6:	42b3      	cmp	r3, r6
 800c0d8:	d1d5      	bne.n	800c086 <ai_platform_get_activations_map+0x1a>
 800c0da:	2401      	movs	r4, #1
 800c0dc:	e7d3      	b.n	800c086 <ai_platform_get_activations_map+0x1a>
 800c0de:	f106 000c 	add.w	r0, r6, #12
 800c0e2:	f7ff ff4d 	bl	800bf80 <ai_buffer_array_sane>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d0cc      	beq.n	800c084 <ai_platform_get_activations_map+0x18>
 800c0ea:	89f3      	ldrh	r3, [r6, #14]
 800c0ec:	429f      	cmp	r7, r3
 800c0ee:	d1c9      	bne.n	800c084 <ai_platform_get_activations_map+0x18>
 800c0f0:	3d04      	subs	r5, #4
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	6933      	ldr	r3, [r6, #16]
 800c0f6:	4423      	add	r3, r4
 800c0f8:	341c      	adds	r4, #28
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	b123      	cbz	r3, 800c108 <ai_platform_get_activations_map+0x9c>
 800c0fe:	3201      	adds	r2, #1
 800c100:	f845 3f04 	str.w	r3, [r5, #4]!
 800c104:	4297      	cmp	r7, r2
 800c106:	d8f5      	bhi.n	800c0f4 <ai_platform_get_activations_map+0x88>
 800c108:	1abc      	subs	r4, r7, r2
 800c10a:	fab4 f484 	clz	r4, r4
 800c10e:	0964      	lsrs	r4, r4, #5
 800c110:	e7b9      	b.n	800c086 <ai_platform_get_activations_map+0x1a>
 800c112:	428f      	cmp	r7, r1
 800c114:	d1b7      	bne.n	800c086 <ai_platform_get_activations_map+0x1a>
 800c116:	e7e0      	b.n	800c0da <ai_platform_get_activations_map+0x6e>
 800c118:	a1facade 	.word	0xa1facade

0800c11c <ai_platform_bind_network_params>:
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	bf18      	it	ne
 800c120:	2900      	cmpne	r1, #0
 800c122:	d010      	beq.n	800c146 <ai_platform_bind_network_params+0x2a>
 800c124:	b178      	cbz	r0, 800c146 <ai_platform_bind_network_params+0x2a>
 800c126:	4603      	mov	r3, r0
 800c128:	4808      	ldr	r0, [pc, #32]	; (800c14c <ai_platform_bind_network_params+0x30>)
 800c12a:	f103 0c0c 	add.w	ip, r3, #12
 800c12e:	f843 0b04 	str.w	r0, [r3], #4
 800c132:	c903      	ldmia	r1, {r0, r1}
 800c134:	e883 0003 	stmia.w	r3, {r0, r1}
 800c138:	2301      	movs	r3, #1
 800c13a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c13e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c142:	4618      	mov	r0, r3
 800c144:	4770      	bx	lr
 800c146:	2300      	movs	r3, #0
 800c148:	4618      	mov	r0, r3
 800c14a:	4770      	bx	lr
 800c14c:	a1facade 	.word	0xa1facade

0800c150 <ai_platform_network_get_error>:
 800c150:	b510      	push	{r4, lr}
 800c152:	2800      	cmp	r0, #0
 800c154:	d03f      	beq.n	800c1d6 <ai_platform_network_get_error+0x86>
 800c156:	4b7d      	ldr	r3, [pc, #500]	; (800c34c <ai_platform_network_get_error+0x1fc>)
 800c158:	4604      	mov	r4, r0
 800c15a:	6802      	ldr	r2, [r0, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d13a      	bne.n	800c1d6 <ai_platform_network_get_error+0x86>
 800c160:	f7ff ff28 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c164:	4b7a      	ldr	r3, [pc, #488]	; (800c350 <ai_platform_network_get_error+0x200>)
 800c166:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c170:	189a      	adds	r2, r3, r2
 800c172:	2a01      	cmp	r2, #1
 800c174:	f240 8086 	bls.w	800c284 <ai_platform_network_get_error+0x134>
 800c178:	f240 4249 	movw	r2, #1097	; 0x449
 800c17c:	4293      	cmp	r3, r2
 800c17e:	f000 8081 	beq.w	800c284 <ai_platform_network_get_error+0x134>
 800c182:	4a74      	ldr	r2, [pc, #464]	; (800c354 <ai_platform_network_get_error+0x204>)
 800c184:	6813      	ldr	r3, [r2, #0]
 800c186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c18a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c18e:	f000 8087 	beq.w	800c2a0 <ai_platform_network_get_error+0x150>
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	f240 4183 	movw	r1, #1155	; 0x483
 800c198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c19c:	428b      	cmp	r3, r1
 800c19e:	f000 80a9 	beq.w	800c2f4 <ai_platform_network_get_error+0x1a4>
 800c1a2:	6813      	ldr	r3, [r2, #0]
 800c1a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1a8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c1ac:	f000 80c0 	beq.w	800c330 <ai_platform_network_get_error+0x1e0>
 800c1b0:	6813      	ldr	r3, [r2, #0]
 800c1b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f040 8082 	bne.w	800c2c0 <ai_platform_network_get_error+0x170>
 800c1bc:	4a66      	ldr	r2, [pc, #408]	; (800c358 <ai_platform_network_get_error+0x208>)
 800c1be:	2301      	movs	r3, #1
 800c1c0:	6093      	str	r3, [r2, #8]
 800c1c2:	6893      	ldr	r3, [r2, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1fc      	bne.n	800c1c2 <ai_platform_network_get_error+0x72>
 800c1c8:	4964      	ldr	r1, [pc, #400]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c1ca:	4b65      	ldr	r3, [pc, #404]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c1cc:	6011      	str	r1, [r2, #0]
 800c1ce:	6812      	ldr	r2, [r2, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d075      	beq.n	800c2c0 <ai_platform_network_get_error+0x170>
 800c1d4:	e7fe      	b.n	800c1d4 <ai_platform_network_get_error+0x84>
 800c1d6:	f7ff feed 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c1da:	4b5d      	ldr	r3, [pc, #372]	; (800c350 <ai_platform_network_get_error+0x200>)
 800c1dc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1e6:	185a      	adds	r2, r3, r1
 800c1e8:	2a01      	cmp	r2, #1
 800c1ea:	d929      	bls.n	800c240 <ai_platform_network_get_error+0xf0>
 800c1ec:	f240 4249 	movw	r2, #1097	; 0x449
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d025      	beq.n	800c240 <ai_platform_network_get_error+0xf0>
 800c1f4:	4a57      	ldr	r2, [pc, #348]	; (800c354 <ai_platform_network_get_error+0x204>)
 800c1f6:	6813      	ldr	r3, [r2, #0]
 800c1f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c200:	d02b      	beq.n	800c25a <ai_platform_network_get_error+0x10a>
 800c202:	6813      	ldr	r3, [r2, #0]
 800c204:	f240 4183 	movw	r1, #1155	; 0x483
 800c208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c20c:	428b      	cmp	r3, r1
 800c20e:	d060      	beq.n	800c2d2 <ai_platform_network_get_error+0x182>
 800c210:	6813      	ldr	r3, [r2, #0]
 800c212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c216:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c21a:	d07c      	beq.n	800c316 <ai_platform_network_get_error+0x1c6>
 800c21c:	6813      	ldr	r3, [r2, #0]
 800c21e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c222:	2b00      	cmp	r3, #0
 800c224:	d129      	bne.n	800c27a <ai_platform_network_get_error+0x12a>
 800c226:	4a4c      	ldr	r2, [pc, #304]	; (800c358 <ai_platform_network_get_error+0x208>)
 800c228:	2301      	movs	r3, #1
 800c22a:	6093      	str	r3, [r2, #8]
 800c22c:	6893      	ldr	r3, [r2, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1fc      	bne.n	800c22c <ai_platform_network_get_error+0xdc>
 800c232:	494a      	ldr	r1, [pc, #296]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c234:	4b4a      	ldr	r3, [pc, #296]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c236:	6011      	str	r1, [r2, #0]
 800c238:	6812      	ldr	r2, [r2, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d01d      	beq.n	800c27a <ai_platform_network_get_error+0x12a>
 800c23e:	e7fe      	b.n	800c23e <ai_platform_network_get_error+0xee>
 800c240:	4a45      	ldr	r2, [pc, #276]	; (800c358 <ai_platform_network_get_error+0x208>)
 800c242:	2301      	movs	r3, #1
 800c244:	6093      	str	r3, [r2, #8]
 800c246:	6893      	ldr	r3, [r2, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1fc      	bne.n	800c246 <ai_platform_network_get_error+0xf6>
 800c24c:	4943      	ldr	r1, [pc, #268]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c24e:	4b44      	ldr	r3, [pc, #272]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c250:	6011      	str	r1, [r2, #0]
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d010      	beq.n	800c27a <ai_platform_network_get_error+0x12a>
 800c258:	e7fe      	b.n	800c258 <ai_platform_network_get_error+0x108>
 800c25a:	4a42      	ldr	r2, [pc, #264]	; (800c364 <ai_platform_network_get_error+0x214>)
 800c25c:	2301      	movs	r3, #1
 800c25e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c262:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1fb      	bne.n	800c262 <ai_platform_network_get_error+0x112>
 800c26a:	493c      	ldr	r1, [pc, #240]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c26c:	4b3c      	ldr	r3, [pc, #240]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c26e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c272:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c276:	429a      	cmp	r2, r3
 800c278:	d111      	bne.n	800c29e <ai_platform_network_get_error+0x14e>
 800c27a:	f7ff fe9d 	bl	800bfb8 <_ai_platform_release_crc>
 800c27e:	f241 0010 	movw	r0, #4112	; 0x1010
 800c282:	bd10      	pop	{r4, pc}
 800c284:	4a34      	ldr	r2, [pc, #208]	; (800c358 <ai_platform_network_get_error+0x208>)
 800c286:	2301      	movs	r3, #1
 800c288:	6093      	str	r3, [r2, #8]
 800c28a:	6893      	ldr	r3, [r2, #8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1fc      	bne.n	800c28a <ai_platform_network_get_error+0x13a>
 800c290:	4932      	ldr	r1, [pc, #200]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c292:	4b33      	ldr	r3, [pc, #204]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c294:	6011      	str	r1, [r2, #0]
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d011      	beq.n	800c2c0 <ai_platform_network_get_error+0x170>
 800c29c:	e7fe      	b.n	800c29c <ai_platform_network_get_error+0x14c>
 800c29e:	e7fe      	b.n	800c29e <ai_platform_network_get_error+0x14e>
 800c2a0:	4a30      	ldr	r2, [pc, #192]	; (800c364 <ai_platform_network_get_error+0x214>)
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1fb      	bne.n	800c2a8 <ai_platform_network_get_error+0x158>
 800c2b0:	492a      	ldr	r1, [pc, #168]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c2b2:	4b2b      	ldr	r3, [pc, #172]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c2b4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c2b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d107      	bne.n	800c2d0 <ai_platform_network_get_error+0x180>
 800c2c0:	f7ff fe7a 	bl	800bfb8 <_ai_platform_release_crc>
 800c2c4:	f104 0010 	add.w	r0, r4, #16
 800c2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2cc:	f001 bae4 	b.w	800d898 <core_get_error>
 800c2d0:	e7fe      	b.n	800c2d0 <ai_platform_network_get_error+0x180>
 800c2d2:	4a24      	ldr	r2, [pc, #144]	; (800c364 <ai_platform_network_get_error+0x214>)
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1fb      	bne.n	800c2da <ai_platform_network_get_error+0x18a>
 800c2e2:	491e      	ldr	r1, [pc, #120]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c2e4:	4b1e      	ldr	r3, [pc, #120]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c2e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c2ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d0c3      	beq.n	800c27a <ai_platform_network_get_error+0x12a>
 800c2f2:	e7fe      	b.n	800c2f2 <ai_platform_network_get_error+0x1a2>
 800c2f4:	4a1b      	ldr	r2, [pc, #108]	; (800c364 <ai_platform_network_get_error+0x214>)
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1fb      	bne.n	800c2fc <ai_platform_network_get_error+0x1ac>
 800c304:	4915      	ldr	r1, [pc, #84]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c306:	4b16      	ldr	r3, [pc, #88]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c308:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c30c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c310:	429a      	cmp	r2, r3
 800c312:	d0d5      	beq.n	800c2c0 <ai_platform_network_get_error+0x170>
 800c314:	e7fe      	b.n	800c314 <ai_platform_network_get_error+0x1c4>
 800c316:	4a10      	ldr	r2, [pc, #64]	; (800c358 <ai_platform_network_get_error+0x208>)
 800c318:	2301      	movs	r3, #1
 800c31a:	6093      	str	r3, [r2, #8]
 800c31c:	6893      	ldr	r3, [r2, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1fc      	bne.n	800c31c <ai_platform_network_get_error+0x1cc>
 800c322:	490e      	ldr	r1, [pc, #56]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c324:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c326:	6011      	str	r1, [r2, #0]
 800c328:	6812      	ldr	r2, [r2, #0]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d0a5      	beq.n	800c27a <ai_platform_network_get_error+0x12a>
 800c32e:	e7fe      	b.n	800c32e <ai_platform_network_get_error+0x1de>
 800c330:	4a09      	ldr	r2, [pc, #36]	; (800c358 <ai_platform_network_get_error+0x208>)
 800c332:	2301      	movs	r3, #1
 800c334:	6093      	str	r3, [r2, #8]
 800c336:	6893      	ldr	r3, [r2, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1fc      	bne.n	800c336 <ai_platform_network_get_error+0x1e6>
 800c33c:	4907      	ldr	r1, [pc, #28]	; (800c35c <ai_platform_network_get_error+0x20c>)
 800c33e:	4b08      	ldr	r3, [pc, #32]	; (800c360 <ai_platform_network_get_error+0x210>)
 800c340:	6011      	str	r1, [r2, #0]
 800c342:	6812      	ldr	r2, [r2, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d0bb      	beq.n	800c2c0 <ai_platform_network_get_error+0x170>
 800c348:	e7fe      	b.n	800c348 <ai_platform_network_get_error+0x1f8>
 800c34a:	bf00      	nop
 800c34c:	a1c00100 	.word	0xa1c00100
 800c350:	e0042000 	.word	0xe0042000
 800c354:	5c001000 	.word	0x5c001000
 800c358:	40023000 	.word	0x40023000
 800c35c:	f407a5c2 	.word	0xf407a5c2
 800c360:	b5e8b5cd 	.word	0xb5e8b5cd
 800c364:	58024000 	.word	0x58024000

0800c368 <ai_platform_network_set_error>:
 800c368:	b110      	cbz	r0, 800c370 <ai_platform_network_set_error+0x8>
 800c36a:	3010      	adds	r0, #16
 800c36c:	f001 ba9a 	b.w	800d8a4 <core_set_error>
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop

0800c374 <ai_platform_inputs_get>:
 800c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	b085      	sub	sp, #20
 800c37a:	9102      	str	r1, [sp, #8]
 800c37c:	2800      	cmp	r0, #0
 800c37e:	f000 8093 	beq.w	800c4a8 <ai_platform_inputs_get+0x134>
 800c382:	4baa      	ldr	r3, [pc, #680]	; (800c62c <ai_platform_inputs_get+0x2b8>)
 800c384:	4681      	mov	r9, r0
 800c386:	6802      	ldr	r2, [r0, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	f040 808d 	bne.w	800c4a8 <ai_platform_inputs_get+0x134>
 800c38e:	f7ff fe11 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c392:	4ba7      	ldr	r3, [pc, #668]	; (800c630 <ai_platform_inputs_get+0x2bc>)
 800c394:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c39e:	189a      	adds	r2, r3, r2
 800c3a0:	2a01      	cmp	r2, #1
 800c3a2:	f240 80da 	bls.w	800c55a <ai_platform_inputs_get+0x1e6>
 800c3a6:	f240 4249 	movw	r2, #1097	; 0x449
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	f000 80d5 	beq.w	800c55a <ai_platform_inputs_get+0x1e6>
 800c3b0:	4aa0      	ldr	r2, [pc, #640]	; (800c634 <ai_platform_inputs_get+0x2c0>)
 800c3b2:	6813      	ldr	r3, [r2, #0]
 800c3b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c3bc:	f000 80dc 	beq.w	800c578 <ai_platform_inputs_get+0x204>
 800c3c0:	6813      	ldr	r3, [r2, #0]
 800c3c2:	f240 4183 	movw	r1, #1155	; 0x483
 800c3c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3ca:	428b      	cmp	r3, r1
 800c3cc:	f000 810e 	beq.w	800c5ec <ai_platform_inputs_get+0x278>
 800c3d0:	6813      	ldr	r3, [r2, #0]
 800c3d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3d6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c3da:	f000 8143 	beq.w	800c664 <ai_platform_inputs_get+0x2f0>
 800c3de:	6813      	ldr	r3, [r2, #0]
 800c3e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 8113 	beq.w	800c610 <ai_platform_inputs_get+0x29c>
 800c3ea:	f7ff fde5 	bl	800bfb8 <_ai_platform_release_crc>
 800c3ee:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 80d2 	beq.w	800c59c <ai_platform_inputs_get+0x228>
 800c3f8:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c3fc:	f1ba 0f00 	cmp.w	sl, #0
 800c400:	f000 80cc 	beq.w	800c59c <ai_platform_inputs_get+0x228>
 800c404:	2100      	movs	r1, #0
 800c406:	f8cd 900c 	str.w	r9, [sp, #12]
 800c40a:	460d      	mov	r5, r1
 800c40c:	4689      	mov	r9, r1
 800c40e:	e016      	b.n	800c43e <ai_platform_inputs_get+0xca>
 800c410:	9a01      	ldr	r2, [sp, #4]
 800c412:	2301      	movs	r3, #1
 800c414:	f848 3002 	str.w	r3, [r8, r2]
 800c418:	69b2      	ldr	r2, [r6, #24]
 800c41a:	f04f 0301 	mov.w	r3, #1
 800c41e:	6856      	ldr	r6, [r2, #4]
 800c420:	3501      	adds	r5, #1
 800c422:	f109 091c 	add.w	r9, r9, #28
 800c426:	7523      	strb	r3, [r4, #20]
 800c428:	2300      	movs	r3, #0
 800c42a:	6962      	ldr	r2, [r4, #20]
 800c42c:	60a7      	str	r7, [r4, #8]
 800c42e:	f36b 221f 	bfi	r2, fp, #8, #24
 800c432:	6126      	str	r6, [r4, #16]
 800c434:	61a1      	str	r1, [r4, #24]
 800c436:	60e3      	str	r3, [r4, #12]
 800c438:	6162      	str	r2, [r4, #20]
 800c43a:	e9c4 0c00 	strd	r0, ip, [r4]
 800c43e:	f8ba 3000 	ldrh.w	r3, [sl]
 800c442:	b2ac      	uxth	r4, r5
 800c444:	42ab      	cmp	r3, r5
 800c446:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c44a:	9301      	str	r3, [sp, #4]
 800c44c:	f240 80b5 	bls.w	800c5ba <ai_platform_inputs_get+0x246>
 800c450:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 80b0 	beq.w	800c5ba <ai_platform_inputs_get+0x246>
 800c45a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c45e:	2e00      	cmp	r6, #0
 800c460:	f000 80ab 	beq.w	800c5ba <ai_platform_inputs_get+0x246>
 800c464:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c468:	69b2      	ldr	r2, [r6, #24]
 800c46a:	68f1      	ldr	r1, [r6, #12]
 800c46c:	6810      	ldr	r0, [r2, #0]
 800c46e:	9100      	str	r1, [sp, #0]
 800c470:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800c474:	68b3      	ldr	r3, [r6, #8]
 800c476:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c47a:	444c      	add	r4, r9
 800c47c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c480:	f002 fbd2 	bl	800ec28 <ai_array_to_buffer_fmt>
 800c484:	69b2      	ldr	r2, [r6, #24]
 800c486:	9900      	ldr	r1, [sp, #0]
 800c488:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	d0c4      	beq.n	800c41a <ai_platform_inputs_get+0xa6>
 800c490:	2200      	movs	r2, #0
 800c492:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800c496:	6832      	ldr	r2, [r6, #0]
 800c498:	607a      	str	r2, [r7, #4]
 800c49a:	b112      	cbz	r2, 800c4a2 <ai_platform_inputs_get+0x12e>
 800c49c:	8852      	ldrh	r2, [r2, #2]
 800c49e:	2a00      	cmp	r2, #0
 800c4a0:	d1b6      	bne.n	800c410 <ai_platform_inputs_get+0x9c>
 800c4a2:	69b2      	ldr	r2, [r6, #24]
 800c4a4:	2700      	movs	r7, #0
 800c4a6:	e7b8      	b.n	800c41a <ai_platform_inputs_get+0xa6>
 800c4a8:	f7ff fd84 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c4ac:	4b60      	ldr	r3, [pc, #384]	; (800c630 <ai_platform_inputs_get+0x2bc>)
 800c4ae:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4b8:	185a      	adds	r2, r3, r1
 800c4ba:	2a01      	cmp	r2, #1
 800c4bc:	d92a      	bls.n	800c514 <ai_platform_inputs_get+0x1a0>
 800c4be:	f240 4249 	movw	r2, #1097	; 0x449
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d026      	beq.n	800c514 <ai_platform_inputs_get+0x1a0>
 800c4c6:	4a5b      	ldr	r2, [pc, #364]	; (800c634 <ai_platform_inputs_get+0x2c0>)
 800c4c8:	6813      	ldr	r3, [r2, #0]
 800c4ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4ce:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c4d2:	d02c      	beq.n	800c52e <ai_platform_inputs_get+0x1ba>
 800c4d4:	6813      	ldr	r3, [r2, #0]
 800c4d6:	f240 4183 	movw	r1, #1155	; 0x483
 800c4da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4de:	428b      	cmp	r3, r1
 800c4e0:	d073      	beq.n	800c5ca <ai_platform_inputs_get+0x256>
 800c4e2:	6813      	ldr	r3, [r2, #0]
 800c4e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4e8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c4ec:	f000 80ac 	beq.w	800c648 <ai_platform_inputs_get+0x2d4>
 800c4f0:	6813      	ldr	r3, [r2, #0]
 800c4f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d129      	bne.n	800c54e <ai_platform_inputs_get+0x1da>
 800c4fa:	4a4f      	ldr	r2, [pc, #316]	; (800c638 <ai_platform_inputs_get+0x2c4>)
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	6093      	str	r3, [r2, #8]
 800c500:	6893      	ldr	r3, [r2, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1fc      	bne.n	800c500 <ai_platform_inputs_get+0x18c>
 800c506:	494d      	ldr	r1, [pc, #308]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c508:	4b4d      	ldr	r3, [pc, #308]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c50a:	6011      	str	r1, [r2, #0]
 800c50c:	6812      	ldr	r2, [r2, #0]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d01d      	beq.n	800c54e <ai_platform_inputs_get+0x1da>
 800c512:	e7fe      	b.n	800c512 <ai_platform_inputs_get+0x19e>
 800c514:	4a48      	ldr	r2, [pc, #288]	; (800c638 <ai_platform_inputs_get+0x2c4>)
 800c516:	2301      	movs	r3, #1
 800c518:	6093      	str	r3, [r2, #8]
 800c51a:	6893      	ldr	r3, [r2, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1fc      	bne.n	800c51a <ai_platform_inputs_get+0x1a6>
 800c520:	4946      	ldr	r1, [pc, #280]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c522:	4b47      	ldr	r3, [pc, #284]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c524:	6011      	str	r1, [r2, #0]
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d010      	beq.n	800c54e <ai_platform_inputs_get+0x1da>
 800c52c:	e7fe      	b.n	800c52c <ai_platform_inputs_get+0x1b8>
 800c52e:	4a45      	ldr	r2, [pc, #276]	; (800c644 <ai_platform_inputs_get+0x2d0>)
 800c530:	2301      	movs	r3, #1
 800c532:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c536:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1fb      	bne.n	800c536 <ai_platform_inputs_get+0x1c2>
 800c53e:	493f      	ldr	r1, [pc, #252]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c540:	4b3f      	ldr	r3, [pc, #252]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c542:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c546:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d113      	bne.n	800c576 <ai_platform_inputs_get+0x202>
 800c54e:	f7ff fd33 	bl	800bfb8 <_ai_platform_release_crc>
 800c552:	2000      	movs	r0, #0
 800c554:	b005      	add	sp, #20
 800c556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55a:	4a37      	ldr	r2, [pc, #220]	; (800c638 <ai_platform_inputs_get+0x2c4>)
 800c55c:	2301      	movs	r3, #1
 800c55e:	6093      	str	r3, [r2, #8]
 800c560:	6893      	ldr	r3, [r2, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1fc      	bne.n	800c560 <ai_platform_inputs_get+0x1ec>
 800c566:	4b35      	ldr	r3, [pc, #212]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c568:	6013      	str	r3, [r2, #0]
 800c56a:	4b35      	ldr	r3, [pc, #212]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c56c:	6812      	ldr	r2, [r2, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	f43f af3b 	beq.w	800c3ea <ai_platform_inputs_get+0x76>
 800c574:	e7fe      	b.n	800c574 <ai_platform_inputs_get+0x200>
 800c576:	e7fe      	b.n	800c576 <ai_platform_inputs_get+0x202>
 800c578:	4a32      	ldr	r2, [pc, #200]	; (800c644 <ai_platform_inputs_get+0x2d0>)
 800c57a:	2301      	movs	r3, #1
 800c57c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c580:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1fb      	bne.n	800c580 <ai_platform_inputs_get+0x20c>
 800c588:	4b2c      	ldr	r3, [pc, #176]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c58a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c58e:	4b2c      	ldr	r3, [pc, #176]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c590:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c594:	429a      	cmp	r2, r3
 800c596:	f43f af28 	beq.w	800c3ea <ai_platform_inputs_get+0x76>
 800c59a:	e7fe      	b.n	800c59a <ai_platform_inputs_get+0x226>
 800c59c:	2400      	movs	r4, #0
 800c59e:	2218      	movs	r2, #24
 800c5a0:	2111      	movs	r1, #17
 800c5a2:	f109 0010 	add.w	r0, r9, #16
 800c5a6:	f001 f97d 	bl	800d8a4 <core_set_error>
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	9b02      	ldr	r3, [sp, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0d0      	beq.n	800c554 <ai_platform_inputs_get+0x1e0>
 800c5b2:	801c      	strh	r4, [r3, #0]
 800c5b4:	b005      	add	sp, #20
 800c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ba:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c5be:	2c00      	cmp	r4, #0
 800c5c0:	d0ec      	beq.n	800c59c <ai_platform_inputs_get+0x228>
 800c5c2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c5c6:	6858      	ldr	r0, [r3, #4]
 800c5c8:	e7f0      	b.n	800c5ac <ai_platform_inputs_get+0x238>
 800c5ca:	4a1e      	ldr	r2, [pc, #120]	; (800c644 <ai_platform_inputs_get+0x2d0>)
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c5d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1fb      	bne.n	800c5d2 <ai_platform_inputs_get+0x25e>
 800c5da:	4918      	ldr	r1, [pc, #96]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c5dc:	4b18      	ldr	r3, [pc, #96]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c5de:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c5e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d0b1      	beq.n	800c54e <ai_platform_inputs_get+0x1da>
 800c5ea:	e7fe      	b.n	800c5ea <ai_platform_inputs_get+0x276>
 800c5ec:	4a15      	ldr	r2, [pc, #84]	; (800c644 <ai_platform_inputs_get+0x2d0>)
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c5f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1fb      	bne.n	800c5f4 <ai_platform_inputs_get+0x280>
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c5fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c602:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c604:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c608:	429a      	cmp	r2, r3
 800c60a:	f43f aeee 	beq.w	800c3ea <ai_platform_inputs_get+0x76>
 800c60e:	e7fe      	b.n	800c60e <ai_platform_inputs_get+0x29a>
 800c610:	4a09      	ldr	r2, [pc, #36]	; (800c638 <ai_platform_inputs_get+0x2c4>)
 800c612:	2301      	movs	r3, #1
 800c614:	6093      	str	r3, [r2, #8]
 800c616:	6893      	ldr	r3, [r2, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1fc      	bne.n	800c616 <ai_platform_inputs_get+0x2a2>
 800c61c:	4b07      	ldr	r3, [pc, #28]	; (800c63c <ai_platform_inputs_get+0x2c8>)
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	4b07      	ldr	r3, [pc, #28]	; (800c640 <ai_platform_inputs_get+0x2cc>)
 800c622:	6812      	ldr	r2, [r2, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	f43f aee0 	beq.w	800c3ea <ai_platform_inputs_get+0x76>
 800c62a:	e7fe      	b.n	800c62a <ai_platform_inputs_get+0x2b6>
 800c62c:	a1c00100 	.word	0xa1c00100
 800c630:	e0042000 	.word	0xe0042000
 800c634:	5c001000 	.word	0x5c001000
 800c638:	40023000 	.word	0x40023000
 800c63c:	f407a5c2 	.word	0xf407a5c2
 800c640:	b5e8b5cd 	.word	0xb5e8b5cd
 800c644:	58024000 	.word	0x58024000
 800c648:	4a0d      	ldr	r2, [pc, #52]	; (800c680 <ai_platform_inputs_get+0x30c>)
 800c64a:	2301      	movs	r3, #1
 800c64c:	6093      	str	r3, [r2, #8]
 800c64e:	6893      	ldr	r3, [r2, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1fc      	bne.n	800c64e <ai_platform_inputs_get+0x2da>
 800c654:	490b      	ldr	r1, [pc, #44]	; (800c684 <ai_platform_inputs_get+0x310>)
 800c656:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <ai_platform_inputs_get+0x314>)
 800c658:	6011      	str	r1, [r2, #0]
 800c65a:	6812      	ldr	r2, [r2, #0]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	f43f af76 	beq.w	800c54e <ai_platform_inputs_get+0x1da>
 800c662:	e7fe      	b.n	800c662 <ai_platform_inputs_get+0x2ee>
 800c664:	4a06      	ldr	r2, [pc, #24]	; (800c680 <ai_platform_inputs_get+0x30c>)
 800c666:	2301      	movs	r3, #1
 800c668:	6093      	str	r3, [r2, #8]
 800c66a:	6893      	ldr	r3, [r2, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1fc      	bne.n	800c66a <ai_platform_inputs_get+0x2f6>
 800c670:	4b04      	ldr	r3, [pc, #16]	; (800c684 <ai_platform_inputs_get+0x310>)
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <ai_platform_inputs_get+0x314>)
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	429a      	cmp	r2, r3
 800c67a:	f43f aeb6 	beq.w	800c3ea <ai_platform_inputs_get+0x76>
 800c67e:	e7fe      	b.n	800c67e <ai_platform_inputs_get+0x30a>
 800c680:	40023000 	.word	0x40023000
 800c684:	f407a5c2 	.word	0xf407a5c2
 800c688:	b5e8b5cd 	.word	0xb5e8b5cd

0800c68c <ai_platform_outputs_get>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	b085      	sub	sp, #20
 800c692:	9102      	str	r1, [sp, #8]
 800c694:	2800      	cmp	r0, #0
 800c696:	f000 808f 	beq.w	800c7b8 <ai_platform_outputs_get+0x12c>
 800c69a:	4ba8      	ldr	r3, [pc, #672]	; (800c93c <ai_platform_outputs_get+0x2b0>)
 800c69c:	4681      	mov	r9, r0
 800c69e:	6802      	ldr	r2, [r0, #0]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	f040 8089 	bne.w	800c7b8 <ai_platform_outputs_get+0x12c>
 800c6a6:	f7ff fc85 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c6aa:	4ba5      	ldr	r3, [pc, #660]	; (800c940 <ai_platform_outputs_get+0x2b4>)
 800c6ac:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6b6:	189a      	adds	r2, r3, r2
 800c6b8:	2a01      	cmp	r2, #1
 800c6ba:	f240 80d6 	bls.w	800c86a <ai_platform_outputs_get+0x1de>
 800c6be:	f240 4249 	movw	r2, #1097	; 0x449
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	f000 80d1 	beq.w	800c86a <ai_platform_outputs_get+0x1de>
 800c6c8:	4a9e      	ldr	r2, [pc, #632]	; (800c944 <ai_platform_outputs_get+0x2b8>)
 800c6ca:	6813      	ldr	r3, [r2, #0]
 800c6cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6d0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c6d4:	f000 80d8 	beq.w	800c888 <ai_platform_outputs_get+0x1fc>
 800c6d8:	6813      	ldr	r3, [r2, #0]
 800c6da:	f240 4183 	movw	r1, #1155	; 0x483
 800c6de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6e2:	428b      	cmp	r3, r1
 800c6e4:	f000 8109 	beq.w	800c8fa <ai_platform_outputs_get+0x26e>
 800c6e8:	6813      	ldr	r3, [r2, #0]
 800c6ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c6f2:	f000 813f 	beq.w	800c974 <ai_platform_outputs_get+0x2e8>
 800c6f6:	6813      	ldr	r3, [r2, #0]
 800c6f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 810e 	beq.w	800c91e <ai_platform_outputs_get+0x292>
 800c702:	f7ff fc59 	bl	800bfb8 <_ai_platform_release_crc>
 800c706:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	f240 80db 	bls.w	800c8c6 <ai_platform_outputs_get+0x23a>
 800c710:	2100      	movs	r1, #0
 800c712:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c716:	f8cd 900c 	str.w	r9, [sp, #12]
 800c71a:	460d      	mov	r5, r1
 800c71c:	4689      	mov	r9, r1
 800c71e:	e016      	b.n	800c74e <ai_platform_outputs_get+0xc2>
 800c720:	9a01      	ldr	r2, [sp, #4]
 800c722:	2301      	movs	r3, #1
 800c724:	f848 3002 	str.w	r3, [r8, r2]
 800c728:	69b2      	ldr	r2, [r6, #24]
 800c72a:	f04f 0301 	mov.w	r3, #1
 800c72e:	6856      	ldr	r6, [r2, #4]
 800c730:	3501      	adds	r5, #1
 800c732:	f109 091c 	add.w	r9, r9, #28
 800c736:	7523      	strb	r3, [r4, #20]
 800c738:	2300      	movs	r3, #0
 800c73a:	6962      	ldr	r2, [r4, #20]
 800c73c:	60a7      	str	r7, [r4, #8]
 800c73e:	f36b 221f 	bfi	r2, fp, #8, #24
 800c742:	6126      	str	r6, [r4, #16]
 800c744:	61a1      	str	r1, [r4, #24]
 800c746:	60e3      	str	r3, [r4, #12]
 800c748:	6162      	str	r2, [r4, #20]
 800c74a:	e9c4 0c00 	strd	r0, ip, [r4]
 800c74e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c752:	b2ac      	uxth	r4, r5
 800c754:	42ab      	cmp	r3, r5
 800c756:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	f240 80a6 	bls.w	800c8ac <ai_platform_outputs_get+0x220>
 800c760:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 80a1 	beq.w	800c8ac <ai_platform_outputs_get+0x220>
 800c76a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c76e:	2e00      	cmp	r6, #0
 800c770:	f000 809c 	beq.w	800c8ac <ai_platform_outputs_get+0x220>
 800c774:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c778:	69b2      	ldr	r2, [r6, #24]
 800c77a:	68f1      	ldr	r1, [r6, #12]
 800c77c:	6810      	ldr	r0, [r2, #0]
 800c77e:	9100      	str	r1, [sp, #0]
 800c780:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800c784:	68b3      	ldr	r3, [r6, #8]
 800c786:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c78a:	444c      	add	r4, r9
 800c78c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c790:	f002 fa4a 	bl	800ec28 <ai_array_to_buffer_fmt>
 800c794:	69b2      	ldr	r2, [r6, #24]
 800c796:	9900      	ldr	r1, [sp, #0]
 800c798:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c79c:	2f00      	cmp	r7, #0
 800c79e:	d0c4      	beq.n	800c72a <ai_platform_outputs_get+0x9e>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800c7a6:	6832      	ldr	r2, [r6, #0]
 800c7a8:	607a      	str	r2, [r7, #4]
 800c7aa:	b112      	cbz	r2, 800c7b2 <ai_platform_outputs_get+0x126>
 800c7ac:	8852      	ldrh	r2, [r2, #2]
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	d1b6      	bne.n	800c720 <ai_platform_outputs_get+0x94>
 800c7b2:	69b2      	ldr	r2, [r6, #24]
 800c7b4:	2700      	movs	r7, #0
 800c7b6:	e7b8      	b.n	800c72a <ai_platform_outputs_get+0x9e>
 800c7b8:	f7ff fbfc 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c7bc:	4b60      	ldr	r3, [pc, #384]	; (800c940 <ai_platform_outputs_get+0x2b4>)
 800c7be:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7c8:	185a      	adds	r2, r3, r1
 800c7ca:	2a01      	cmp	r2, #1
 800c7cc:	d92a      	bls.n	800c824 <ai_platform_outputs_get+0x198>
 800c7ce:	f240 4249 	movw	r2, #1097	; 0x449
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d026      	beq.n	800c824 <ai_platform_outputs_get+0x198>
 800c7d6:	4a5b      	ldr	r2, [pc, #364]	; (800c944 <ai_platform_outputs_get+0x2b8>)
 800c7d8:	6813      	ldr	r3, [r2, #0]
 800c7da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c7e2:	d02c      	beq.n	800c83e <ai_platform_outputs_get+0x1b2>
 800c7e4:	6813      	ldr	r3, [r2, #0]
 800c7e6:	f240 4183 	movw	r1, #1155	; 0x483
 800c7ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7ee:	428b      	cmp	r3, r1
 800c7f0:	d072      	beq.n	800c8d8 <ai_platform_outputs_get+0x24c>
 800c7f2:	6813      	ldr	r3, [r2, #0]
 800c7f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c7fc:	f000 80ac 	beq.w	800c958 <ai_platform_outputs_get+0x2cc>
 800c800:	6813      	ldr	r3, [r2, #0]
 800c802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c806:	2b00      	cmp	r3, #0
 800c808:	d129      	bne.n	800c85e <ai_platform_outputs_get+0x1d2>
 800c80a:	4a4f      	ldr	r2, [pc, #316]	; (800c948 <ai_platform_outputs_get+0x2bc>)
 800c80c:	2301      	movs	r3, #1
 800c80e:	6093      	str	r3, [r2, #8]
 800c810:	6893      	ldr	r3, [r2, #8]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1fc      	bne.n	800c810 <ai_platform_outputs_get+0x184>
 800c816:	494d      	ldr	r1, [pc, #308]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c818:	4b4d      	ldr	r3, [pc, #308]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c81a:	6011      	str	r1, [r2, #0]
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d01d      	beq.n	800c85e <ai_platform_outputs_get+0x1d2>
 800c822:	e7fe      	b.n	800c822 <ai_platform_outputs_get+0x196>
 800c824:	4a48      	ldr	r2, [pc, #288]	; (800c948 <ai_platform_outputs_get+0x2bc>)
 800c826:	2301      	movs	r3, #1
 800c828:	6093      	str	r3, [r2, #8]
 800c82a:	6893      	ldr	r3, [r2, #8]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1fc      	bne.n	800c82a <ai_platform_outputs_get+0x19e>
 800c830:	4946      	ldr	r1, [pc, #280]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c832:	4b47      	ldr	r3, [pc, #284]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c834:	6011      	str	r1, [r2, #0]
 800c836:	6812      	ldr	r2, [r2, #0]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d010      	beq.n	800c85e <ai_platform_outputs_get+0x1d2>
 800c83c:	e7fe      	b.n	800c83c <ai_platform_outputs_get+0x1b0>
 800c83e:	4a45      	ldr	r2, [pc, #276]	; (800c954 <ai_platform_outputs_get+0x2c8>)
 800c840:	2301      	movs	r3, #1
 800c842:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c846:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1fb      	bne.n	800c846 <ai_platform_outputs_get+0x1ba>
 800c84e:	493f      	ldr	r1, [pc, #252]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c850:	4b3f      	ldr	r3, [pc, #252]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c852:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c856:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d113      	bne.n	800c886 <ai_platform_outputs_get+0x1fa>
 800c85e:	f7ff fbab 	bl	800bfb8 <_ai_platform_release_crc>
 800c862:	2000      	movs	r0, #0
 800c864:	b005      	add	sp, #20
 800c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86a:	4a37      	ldr	r2, [pc, #220]	; (800c948 <ai_platform_outputs_get+0x2bc>)
 800c86c:	2301      	movs	r3, #1
 800c86e:	6093      	str	r3, [r2, #8]
 800c870:	6893      	ldr	r3, [r2, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1fc      	bne.n	800c870 <ai_platform_outputs_get+0x1e4>
 800c876:	4b35      	ldr	r3, [pc, #212]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	4b35      	ldr	r3, [pc, #212]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c87c:	6812      	ldr	r2, [r2, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	f43f af3f 	beq.w	800c702 <ai_platform_outputs_get+0x76>
 800c884:	e7fe      	b.n	800c884 <ai_platform_outputs_get+0x1f8>
 800c886:	e7fe      	b.n	800c886 <ai_platform_outputs_get+0x1fa>
 800c888:	4a32      	ldr	r2, [pc, #200]	; (800c954 <ai_platform_outputs_get+0x2c8>)
 800c88a:	2301      	movs	r3, #1
 800c88c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c890:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1fb      	bne.n	800c890 <ai_platform_outputs_get+0x204>
 800c898:	4b2c      	ldr	r3, [pc, #176]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c89a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c89e:	4b2c      	ldr	r3, [pc, #176]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c8a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	f43f af2c 	beq.w	800c702 <ai_platform_outputs_get+0x76>
 800c8aa:	e7fe      	b.n	800c8aa <ai_platform_outputs_get+0x21e>
 800c8ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c8b0:	b14c      	cbz	r4, 800c8c6 <ai_platform_outputs_get+0x23a>
 800c8b2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c8b6:	6858      	ldr	r0, [r3, #4]
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0d2      	beq.n	800c864 <ai_platform_outputs_get+0x1d8>
 800c8be:	801c      	strh	r4, [r3, #0]
 800c8c0:	b005      	add	sp, #20
 800c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c6:	2400      	movs	r4, #0
 800c8c8:	2218      	movs	r2, #24
 800c8ca:	2111      	movs	r1, #17
 800c8cc:	f109 0010 	add.w	r0, r9, #16
 800c8d0:	f000 ffe8 	bl	800d8a4 <core_set_error>
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	e7ef      	b.n	800c8b8 <ai_platform_outputs_get+0x22c>
 800c8d8:	4a1e      	ldr	r2, [pc, #120]	; (800c954 <ai_platform_outputs_get+0x2c8>)
 800c8da:	2301      	movs	r3, #1
 800c8dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c8e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1fb      	bne.n	800c8e0 <ai_platform_outputs_get+0x254>
 800c8e8:	4918      	ldr	r1, [pc, #96]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c8ea:	4b19      	ldr	r3, [pc, #100]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c8ec:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c8f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d0b2      	beq.n	800c85e <ai_platform_outputs_get+0x1d2>
 800c8f8:	e7fe      	b.n	800c8f8 <ai_platform_outputs_get+0x26c>
 800c8fa:	4a16      	ldr	r2, [pc, #88]	; (800c954 <ai_platform_outputs_get+0x2c8>)
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c902:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1fb      	bne.n	800c902 <ai_platform_outputs_get+0x276>
 800c90a:	4b10      	ldr	r3, [pc, #64]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c90c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c910:	4b0f      	ldr	r3, [pc, #60]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c912:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c916:	429a      	cmp	r2, r3
 800c918:	f43f aef3 	beq.w	800c702 <ai_platform_outputs_get+0x76>
 800c91c:	e7fe      	b.n	800c91c <ai_platform_outputs_get+0x290>
 800c91e:	4a0a      	ldr	r2, [pc, #40]	; (800c948 <ai_platform_outputs_get+0x2bc>)
 800c920:	2301      	movs	r3, #1
 800c922:	6093      	str	r3, [r2, #8]
 800c924:	6893      	ldr	r3, [r2, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1fc      	bne.n	800c924 <ai_platform_outputs_get+0x298>
 800c92a:	4b08      	ldr	r3, [pc, #32]	; (800c94c <ai_platform_outputs_get+0x2c0>)
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	4b08      	ldr	r3, [pc, #32]	; (800c950 <ai_platform_outputs_get+0x2c4>)
 800c930:	6812      	ldr	r2, [r2, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	f43f aee5 	beq.w	800c702 <ai_platform_outputs_get+0x76>
 800c938:	e7fe      	b.n	800c938 <ai_platform_outputs_get+0x2ac>
 800c93a:	bf00      	nop
 800c93c:	a1c00100 	.word	0xa1c00100
 800c940:	e0042000 	.word	0xe0042000
 800c944:	5c001000 	.word	0x5c001000
 800c948:	40023000 	.word	0x40023000
 800c94c:	f407a5c2 	.word	0xf407a5c2
 800c950:	b5e8b5cd 	.word	0xb5e8b5cd
 800c954:	58024000 	.word	0x58024000
 800c958:	4a0d      	ldr	r2, [pc, #52]	; (800c990 <ai_platform_outputs_get+0x304>)
 800c95a:	2301      	movs	r3, #1
 800c95c:	6093      	str	r3, [r2, #8]
 800c95e:	6893      	ldr	r3, [r2, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1fc      	bne.n	800c95e <ai_platform_outputs_get+0x2d2>
 800c964:	490b      	ldr	r1, [pc, #44]	; (800c994 <ai_platform_outputs_get+0x308>)
 800c966:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <ai_platform_outputs_get+0x30c>)
 800c968:	6011      	str	r1, [r2, #0]
 800c96a:	6812      	ldr	r2, [r2, #0]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	f43f af76 	beq.w	800c85e <ai_platform_outputs_get+0x1d2>
 800c972:	e7fe      	b.n	800c972 <ai_platform_outputs_get+0x2e6>
 800c974:	4a06      	ldr	r2, [pc, #24]	; (800c990 <ai_platform_outputs_get+0x304>)
 800c976:	2301      	movs	r3, #1
 800c978:	6093      	str	r3, [r2, #8]
 800c97a:	6893      	ldr	r3, [r2, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1fc      	bne.n	800c97a <ai_platform_outputs_get+0x2ee>
 800c980:	4b04      	ldr	r3, [pc, #16]	; (800c994 <ai_platform_outputs_get+0x308>)
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	4b04      	ldr	r3, [pc, #16]	; (800c998 <ai_platform_outputs_get+0x30c>)
 800c986:	6812      	ldr	r2, [r2, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	f43f aeba 	beq.w	800c702 <ai_platform_outputs_get+0x76>
 800c98e:	e7fe      	b.n	800c98e <ai_platform_outputs_get+0x302>
 800c990:	40023000 	.word	0x40023000
 800c994:	f407a5c2 	.word	0xf407a5c2
 800c998:	b5e8b5cd 	.word	0xb5e8b5cd

0800c99c <ai_platform_network_create>:
 800c99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	4615      	mov	r5, r2
 800c9a6:	461e      	mov	r6, r3
 800c9a8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800c9ac:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c9b0:	f7ff fb00 	bl	800bfb4 <_ai_platform_acquire_crc>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	f000 80bd 	beq.w	800cb34 <ai_platform_network_create+0x198>
 800c9ba:	4ba5      	ldr	r3, [pc, #660]	; (800cc50 <ai_platform_network_create+0x2b4>)
 800c9bc:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800c9c0:	4601      	mov	r1, r0
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9c8:	eb03 020c 	add.w	r2, r3, ip
 800c9cc:	2a01      	cmp	r2, #1
 800c9ce:	f240 80a8 	bls.w	800cb22 <ai_platform_network_create+0x186>
 800c9d2:	f240 4249 	movw	r2, #1097	; 0x449
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	f000 80a3 	beq.w	800cb22 <ai_platform_network_create+0x186>
 800c9dc:	4a9d      	ldr	r2, [pc, #628]	; (800cc54 <ai_platform_network_create+0x2b8>)
 800c9de:	6813      	ldr	r3, [r2, #0]
 800c9e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9e4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c9e8:	f000 80b9 	beq.w	800cb5e <ai_platform_network_create+0x1c2>
 800c9ec:	6813      	ldr	r3, [r2, #0]
 800c9ee:	f240 4c83 	movw	ip, #1155	; 0x483
 800c9f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9f6:	4563      	cmp	r3, ip
 800c9f8:	f000 80a1 	beq.w	800cb3e <ai_platform_network_create+0x1a2>
 800c9fc:	6813      	ldr	r3, [r2, #0]
 800c9fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca02:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ca06:	f000 8153 	beq.w	800ccb0 <ai_platform_network_create+0x314>
 800ca0a:	6813      	ldr	r3, [r2, #0]
 800ca0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f040 808d 	bne.w	800cb30 <ai_platform_network_create+0x194>
 800ca16:	4a90      	ldr	r2, [pc, #576]	; (800cc58 <ai_platform_network_create+0x2bc>)
 800ca18:	2318      	movs	r3, #24
 800ca1a:	6093      	str	r3, [r2, #8]
 800ca1c:	6893      	ldr	r3, [r2, #8]
 800ca1e:	2b18      	cmp	r3, #24
 800ca20:	f040 8086 	bne.w	800cb30 <ai_platform_network_create+0x194>
 800ca24:	2301      	movs	r3, #1
 800ca26:	6093      	str	r3, [r2, #8]
 800ca28:	6893      	ldr	r3, [r2, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1fc      	bne.n	800ca28 <ai_platform_network_create+0x8c>
 800ca2e:	4608      	mov	r0, r1
 800ca30:	f7ff fac2 	bl	800bfb8 <_ai_platform_release_crc>
 800ca34:	f7ff fabe 	bl	800bfb4 <_ai_platform_acquire_crc>
 800ca38:	4b85      	ldr	r3, [pc, #532]	; (800cc50 <ai_platform_network_create+0x2b4>)
 800ca3a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca44:	189a      	adds	r2, r3, r2
 800ca46:	2a01      	cmp	r2, #1
 800ca48:	f240 809f 	bls.w	800cb8a <ai_platform_network_create+0x1ee>
 800ca4c:	f240 4249 	movw	r2, #1097	; 0x449
 800ca50:	4293      	cmp	r3, r2
 800ca52:	f000 809a 	beq.w	800cb8a <ai_platform_network_create+0x1ee>
 800ca56:	4a7f      	ldr	r2, [pc, #508]	; (800cc54 <ai_platform_network_create+0x2b8>)
 800ca58:	6813      	ldr	r3, [r2, #0]
 800ca5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca5e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ca62:	f000 80a0 	beq.w	800cba6 <ai_platform_network_create+0x20a>
 800ca66:	6813      	ldr	r3, [r2, #0]
 800ca68:	f240 4183 	movw	r1, #1155	; 0x483
 800ca6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca70:	428b      	cmp	r3, r1
 800ca72:	f000 80bf 	beq.w	800cbf4 <ai_platform_network_create+0x258>
 800ca76:	6813      	ldr	r3, [r2, #0]
 800ca78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ca80:	f000 8123 	beq.w	800ccca <ai_platform_network_create+0x32e>
 800ca84:	6813      	ldr	r3, [r2, #0]
 800ca86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 80c4 	beq.w	800cc18 <ai_platform_network_create+0x27c>
 800ca90:	f7ff fa92 	bl	800bfb8 <_ai_platform_release_crc>
 800ca94:	2c00      	cmp	r4, #0
 800ca96:	f000 80aa 	beq.w	800cbee <ai_platform_network_create+0x252>
 800ca9a:	4b70      	ldr	r3, [pc, #448]	; (800cc5c <ai_platform_network_create+0x2c0>)
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	6025      	str	r5, [r4, #0]
 800caa0:	f000 fef8 	bl	800d894 <core_init>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	f000 8090 	beq.w	800cbca <ai_platform_network_create+0x22e>
 800caaa:	f7ff fa83 	bl	800bfb4 <_ai_platform_acquire_crc>
 800caae:	4b68      	ldr	r3, [pc, #416]	; (800cc50 <ai_platform_network_create+0x2b4>)
 800cab0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800caba:	185a      	adds	r2, r3, r1
 800cabc:	2a01      	cmp	r2, #1
 800cabe:	f240 80b9 	bls.w	800cc34 <ai_platform_network_create+0x298>
 800cac2:	f240 4249 	movw	r2, #1097	; 0x449
 800cac6:	4293      	cmp	r3, r2
 800cac8:	f000 80b4 	beq.w	800cc34 <ai_platform_network_create+0x298>
 800cacc:	4a61      	ldr	r2, [pc, #388]	; (800cc54 <ai_platform_network_create+0x2b8>)
 800cace:	6813      	ldr	r3, [r2, #0]
 800cad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cad4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cad8:	f000 80c8 	beq.w	800cc6c <ai_platform_network_create+0x2d0>
 800cadc:	6813      	ldr	r3, [r2, #0]
 800cade:	f240 4183 	movw	r1, #1155	; 0x483
 800cae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cae6:	428b      	cmp	r3, r1
 800cae8:	f000 8107 	beq.w	800ccfa <ai_platform_network_create+0x35e>
 800caec:	6813      	ldr	r3, [r2, #0]
 800caee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800caf2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800caf6:	f000 8111 	beq.w	800cd1c <ai_platform_network_create+0x380>
 800cafa:	6813      	ldr	r3, [r2, #0]
 800cafc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f040 80c3 	bne.w	800cc8c <ai_platform_network_create+0x2f0>
 800cb06:	4b54      	ldr	r3, [pc, #336]	; (800cc58 <ai_platform_network_create+0x2bc>)
 800cb08:	2201      	movs	r2, #1
 800cb0a:	609a      	str	r2, [r3, #8]
 800cb0c:	689a      	ldr	r2, [r3, #8]
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d1fc      	bne.n	800cb0c <ai_platform_network_create+0x170>
 800cb12:	4a53      	ldr	r2, [pc, #332]	; (800cc60 <ai_platform_network_create+0x2c4>)
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	4b52      	ldr	r3, [pc, #328]	; (800cc64 <ai_platform_network_create+0x2c8>)
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	f000 80b6 	beq.w	800cc8c <ai_platform_network_create+0x2f0>
 800cb20:	e7fe      	b.n	800cb20 <ai_platform_network_create+0x184>
 800cb22:	4b4d      	ldr	r3, [pc, #308]	; (800cc58 <ai_platform_network_create+0x2bc>)
 800cb24:	2218      	movs	r2, #24
 800cb26:	609a      	str	r2, [r3, #8]
 800cb28:	689a      	ldr	r2, [r3, #8]
 800cb2a:	2a18      	cmp	r2, #24
 800cb2c:	d027      	beq.n	800cb7e <ai_platform_network_create+0x1e2>
 800cb2e:	4608      	mov	r0, r1
 800cb30:	f7ff fa42 	bl	800bfb8 <_ai_platform_release_crc>
 800cb34:	f244 1033 	movw	r0, #16691	; 0x4133
 800cb38:	b003      	add	sp, #12
 800cb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	4a4a      	ldr	r2, [pc, #296]	; (800cc68 <ai_platform_network_create+0x2cc>)
 800cb40:	2318      	movs	r3, #24
 800cb42:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb46:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb4a:	2b18      	cmp	r3, #24
 800cb4c:	d1f0      	bne.n	800cb30 <ai_platform_network_create+0x194>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1fb      	bne.n	800cb54 <ai_platform_network_create+0x1b8>
 800cb5c:	e767      	b.n	800ca2e <ai_platform_network_create+0x92>
 800cb5e:	4a42      	ldr	r2, [pc, #264]	; (800cc68 <ai_platform_network_create+0x2cc>)
 800cb60:	2318      	movs	r3, #24
 800cb62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb6a:	2b18      	cmp	r3, #24
 800cb6c:	d1e0      	bne.n	800cb30 <ai_platform_network_create+0x194>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1fb      	bne.n	800cb74 <ai_platform_network_create+0x1d8>
 800cb7c:	e757      	b.n	800ca2e <ai_platform_network_create+0x92>
 800cb7e:	2201      	movs	r2, #1
 800cb80:	609a      	str	r2, [r3, #8]
 800cb82:	689a      	ldr	r2, [r3, #8]
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	d1fc      	bne.n	800cb82 <ai_platform_network_create+0x1e6>
 800cb88:	e751      	b.n	800ca2e <ai_platform_network_create+0x92>
 800cb8a:	4a33      	ldr	r2, [pc, #204]	; (800cc58 <ai_platform_network_create+0x2bc>)
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	6093      	str	r3, [r2, #8]
 800cb90:	6891      	ldr	r1, [r2, #8]
 800cb92:	2900      	cmp	r1, #0
 800cb94:	d1fc      	bne.n	800cb90 <ai_platform_network_create+0x1f4>
 800cb96:	4b32      	ldr	r3, [pc, #200]	; (800cc60 <ai_platform_network_create+0x2c4>)
 800cb98:	6013      	str	r3, [r2, #0]
 800cb9a:	4b32      	ldr	r3, [pc, #200]	; (800cc64 <ai_platform_network_create+0x2c8>)
 800cb9c:	6812      	ldr	r2, [r2, #0]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	f43f af76 	beq.w	800ca90 <ai_platform_network_create+0xf4>
 800cba4:	e7fe      	b.n	800cba4 <ai_platform_network_create+0x208>
 800cba6:	4a30      	ldr	r2, [pc, #192]	; (800cc68 <ai_platform_network_create+0x2cc>)
 800cba8:	2301      	movs	r3, #1
 800cbaa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cbae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1fb      	bne.n	800cbae <ai_platform_network_create+0x212>
 800cbb6:	4b2a      	ldr	r3, [pc, #168]	; (800cc60 <ai_platform_network_create+0x2c4>)
 800cbb8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cbbc:	4b29      	ldr	r3, [pc, #164]	; (800cc64 <ai_platform_network_create+0x2c8>)
 800cbbe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	f43f af64 	beq.w	800ca90 <ai_platform_network_create+0xf4>
 800cbc8:	e7fe      	b.n	800cbc8 <ai_platform_network_create+0x22c>
 800cbca:	f04f 0930 	mov.w	r9, #48	; 0x30
 800cbce:	2300      	movs	r3, #0
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	2410      	movs	r4, #16
 800cbd4:	4642      	mov	r2, r8
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f002 f8a1 	bl	800ed20 <ai_version_get>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	64ab      	str	r3, [r5, #72]	; 0x48
 800cbe4:	f369 0007 	bfi	r0, r9, #0, #8
 800cbe8:	f364 201f 	bfi	r0, r4, #8, #24
 800cbec:	e7a4      	b.n	800cb38 <ai_platform_network_create+0x19c>
 800cbee:	f241 0010 	movw	r0, #4112	; 0x1010
 800cbf2:	e7a1      	b.n	800cb38 <ai_platform_network_create+0x19c>
 800cbf4:	4a1c      	ldr	r2, [pc, #112]	; (800cc68 <ai_platform_network_create+0x2cc>)
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cbfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1fb      	bne.n	800cbfc <ai_platform_network_create+0x260>
 800cc04:	4b16      	ldr	r3, [pc, #88]	; (800cc60 <ai_platform_network_create+0x2c4>)
 800cc06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <ai_platform_network_create+0x2c8>)
 800cc0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc10:	429a      	cmp	r2, r3
 800cc12:	f43f af3d 	beq.w	800ca90 <ai_platform_network_create+0xf4>
 800cc16:	e7fe      	b.n	800cc16 <ai_platform_network_create+0x27a>
 800cc18:	4a0f      	ldr	r2, [pc, #60]	; (800cc58 <ai_platform_network_create+0x2bc>)
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	6093      	str	r3, [r2, #8]
 800cc1e:	6893      	ldr	r3, [r2, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1fc      	bne.n	800cc1e <ai_platform_network_create+0x282>
 800cc24:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <ai_platform_network_create+0x2c4>)
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <ai_platform_network_create+0x2c8>)
 800cc2a:	6812      	ldr	r2, [r2, #0]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	f43f af2f 	beq.w	800ca90 <ai_platform_network_create+0xf4>
 800cc32:	e7fe      	b.n	800cc32 <ai_platform_network_create+0x296>
 800cc34:	4a08      	ldr	r2, [pc, #32]	; (800cc58 <ai_platform_network_create+0x2bc>)
 800cc36:	2301      	movs	r3, #1
 800cc38:	6093      	str	r3, [r2, #8]
 800cc3a:	6893      	ldr	r3, [r2, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1fc      	bne.n	800cc3a <ai_platform_network_create+0x29e>
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <ai_platform_network_create+0x2c4>)
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	4b07      	ldr	r3, [pc, #28]	; (800cc64 <ai_platform_network_create+0x2c8>)
 800cc46:	6812      	ldr	r2, [r2, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d01f      	beq.n	800cc8c <ai_platform_network_create+0x2f0>
 800cc4c:	e7fe      	b.n	800cc4c <ai_platform_network_create+0x2b0>
 800cc4e:	bf00      	nop
 800cc50:	e0042000 	.word	0xe0042000
 800cc54:	5c001000 	.word	0x5c001000
 800cc58:	40023000 	.word	0x40023000
 800cc5c:	a1c00100 	.word	0xa1c00100
 800cc60:	f407a5c2 	.word	0xf407a5c2
 800cc64:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc68:	58024000 	.word	0x58024000
 800cc6c:	4a33      	ldr	r2, [pc, #204]	; (800cd3c <ai_platform_network_create+0x3a0>)
 800cc6e:	2301      	movs	r3, #1
 800cc70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1fb      	bne.n	800cc74 <ai_platform_network_create+0x2d8>
 800cc7c:	4b30      	ldr	r3, [pc, #192]	; (800cd40 <ai_platform_network_create+0x3a4>)
 800cc7e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cc82:	4b30      	ldr	r3, [pc, #192]	; (800cd44 <ai_platform_network_create+0x3a8>)
 800cc84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d12c      	bne.n	800cce6 <ai_platform_network_create+0x34a>
 800cc8c:	f7ff f994 	bl	800bfb8 <_ai_platform_release_crc>
 800cc90:	2200      	movs	r2, #0
 800cc92:	4639      	mov	r1, r7
 800cc94:	4630      	mov	r0, r6
 800cc96:	f002 f843 	bl	800ed20 <ai_version_get>
 800cc9a:	4681      	mov	r9, r0
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2105      	movs	r1, #5
 800cca0:	2001      	movs	r0, #1
 800cca2:	f002 f83d 	bl	800ed20 <ai_version_get>
 800cca6:	4581      	cmp	r9, r0
 800cca8:	d01e      	beq.n	800cce8 <ai_platform_network_create+0x34c>
 800ccaa:	f04f 0901 	mov.w	r9, #1
 800ccae:	e78e      	b.n	800cbce <ai_platform_network_create+0x232>
 800ccb0:	4b25      	ldr	r3, [pc, #148]	; (800cd48 <ai_platform_network_create+0x3ac>)
 800ccb2:	2218      	movs	r2, #24
 800ccb4:	609a      	str	r2, [r3, #8]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	2a18      	cmp	r2, #24
 800ccba:	f47f af39 	bne.w	800cb30 <ai_platform_network_create+0x194>
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	609a      	str	r2, [r3, #8]
 800ccc2:	689a      	ldr	r2, [r3, #8]
 800ccc4:	2a00      	cmp	r2, #0
 800ccc6:	d1fc      	bne.n	800ccc2 <ai_platform_network_create+0x326>
 800ccc8:	e6b1      	b.n	800ca2e <ai_platform_network_create+0x92>
 800ccca:	4a1f      	ldr	r2, [pc, #124]	; (800cd48 <ai_platform_network_create+0x3ac>)
 800cccc:	2301      	movs	r3, #1
 800ccce:	6093      	str	r3, [r2, #8]
 800ccd0:	6893      	ldr	r3, [r2, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1fc      	bne.n	800ccd0 <ai_platform_network_create+0x334>
 800ccd6:	4b1a      	ldr	r3, [pc, #104]	; (800cd40 <ai_platform_network_create+0x3a4>)
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <ai_platform_network_create+0x3a8>)
 800ccdc:	6812      	ldr	r2, [r2, #0]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	f43f aed6 	beq.w	800ca90 <ai_platform_network_create+0xf4>
 800cce4:	e7fe      	b.n	800cce4 <ai_platform_network_create+0x348>
 800cce6:	e7fe      	b.n	800cce6 <ai_platform_network_create+0x34a>
 800cce8:	4b18      	ldr	r3, [pc, #96]	; (800cd4c <ai_platform_network_create+0x3b0>)
 800ccea:	a801      	add	r0, sp, #4
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f000 ff35 	bl	800db5c <ai_check_custom_types>
 800ccf2:	b300      	cbz	r0, 800cd36 <ai_platform_network_create+0x39a>
 800ccf4:	2400      	movs	r4, #0
 800ccf6:	46a1      	mov	r9, r4
 800ccf8:	e76c      	b.n	800cbd4 <ai_platform_network_create+0x238>
 800ccfa:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <ai_platform_network_create+0x3a0>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cd02:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cd06:	2a00      	cmp	r2, #0
 800cd08:	d1fb      	bne.n	800cd02 <ai_platform_network_create+0x366>
 800cd0a:	4a0d      	ldr	r2, [pc, #52]	; (800cd40 <ai_platform_network_create+0x3a4>)
 800cd0c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cd10:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cd14:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <ai_platform_network_create+0x3a8>)
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d0b8      	beq.n	800cc8c <ai_platform_network_create+0x2f0>
 800cd1a:	e7fe      	b.n	800cd1a <ai_platform_network_create+0x37e>
 800cd1c:	4b0a      	ldr	r3, [pc, #40]	; (800cd48 <ai_platform_network_create+0x3ac>)
 800cd1e:	2201      	movs	r2, #1
 800cd20:	609a      	str	r2, [r3, #8]
 800cd22:	689a      	ldr	r2, [r3, #8]
 800cd24:	2a00      	cmp	r2, #0
 800cd26:	d1fc      	bne.n	800cd22 <ai_platform_network_create+0x386>
 800cd28:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <ai_platform_network_create+0x3a4>)
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <ai_platform_network_create+0x3a8>)
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d0ab      	beq.n	800cc8c <ai_platform_network_create+0x2f0>
 800cd34:	e7fe      	b.n	800cd34 <ai_platform_network_create+0x398>
 800cd36:	f04f 0902 	mov.w	r9, #2
 800cd3a:	e748      	b.n	800cbce <ai_platform_network_create+0x232>
 800cd3c:	58024000 	.word	0x58024000
 800cd40:	f407a5c2 	.word	0xf407a5c2
 800cd44:	b5e8b5cd 	.word	0xb5e8b5cd
 800cd48:	40023000 	.word	0x40023000
 800cd4c:	84048403 	.word	0x84048403

0800cd50 <ai_platform_network_init>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d052      	beq.n	800cdfe <ai_platform_network_init+0xae>
 800cd58:	4bab      	ldr	r3, [pc, #684]	; (800d008 <ai_platform_network_init+0x2b8>)
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	6802      	ldr	r2, [r0, #0]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d14d      	bne.n	800cdfe <ai_platform_network_init+0xae>
 800cd62:	460d      	mov	r5, r1
 800cd64:	f7ff f926 	bl	800bfb4 <_ai_platform_acquire_crc>
 800cd68:	4ba8      	ldr	r3, [pc, #672]	; (800d00c <ai_platform_network_init+0x2bc>)
 800cd6a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd74:	189a      	adds	r2, r3, r2
 800cd76:	2a01      	cmp	r2, #1
 800cd78:	f240 809b 	bls.w	800ceb2 <ai_platform_network_init+0x162>
 800cd7c:	f240 4249 	movw	r2, #1097	; 0x449
 800cd80:	4293      	cmp	r3, r2
 800cd82:	f000 8096 	beq.w	800ceb2 <ai_platform_network_init+0x162>
 800cd86:	4aa2      	ldr	r2, [pc, #648]	; (800d010 <ai_platform_network_init+0x2c0>)
 800cd88:	6813      	ldr	r3, [r2, #0]
 800cd8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd8e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cd92:	f000 809d 	beq.w	800ced0 <ai_platform_network_init+0x180>
 800cd96:	6813      	ldr	r3, [r2, #0]
 800cd98:	f240 4183 	movw	r1, #1155	; 0x483
 800cd9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cda0:	428b      	cmp	r3, r1
 800cda2:	f000 80e4 	beq.w	800cf6e <ai_platform_network_init+0x21e>
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdac:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cdb0:	f000 811b 	beq.w	800cfea <ai_platform_network_init+0x29a>
 800cdb4:	6813      	ldr	r3, [r2, #0]
 800cdb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f000 80f9 	beq.w	800cfb2 <ai_platform_network_init+0x262>
 800cdc0:	f7ff f8fa 	bl	800bfb8 <_ai_platform_release_crc>
 800cdc4:	2d00      	cmp	r5, #0
 800cdc6:	f000 8147 	beq.w	800d058 <ai_platform_network_init+0x308>
 800cdca:	4b92      	ldr	r3, [pc, #584]	; (800d014 <ai_platform_network_init+0x2c4>)
 800cdcc:	682a      	ldr	r2, [r5, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	f040 8090 	bne.w	800cef4 <ai_platform_network_init+0x1a4>
 800cdd4:	692b      	ldr	r3, [r5, #16]
 800cdd6:	89ae      	ldrh	r6, [r5, #12]
 800cdd8:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800cddc:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800cde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cde2:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800cde6:	2303      	movs	r3, #3
 800cde8:	84a6      	strh	r6, [r4, #36]	; 0x24
 800cdea:	4626      	mov	r6, r4
 800cdec:	4620      	mov	r0, r4
 800cdee:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800cdf2:	60e3      	str	r3, [r4, #12]
 800cdf4:	f000 feda 	bl	800dbac <ai_layers_init_all>
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdfe:	f7ff f8d9 	bl	800bfb4 <_ai_platform_acquire_crc>
 800ce02:	4b82      	ldr	r3, [pc, #520]	; (800d00c <ai_platform_network_init+0x2bc>)
 800ce04:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce0e:	185a      	adds	r2, r3, r1
 800ce10:	2a01      	cmp	r2, #1
 800ce12:	d92b      	bls.n	800ce6c <ai_platform_network_init+0x11c>
 800ce14:	f240 4249 	movw	r2, #1097	; 0x449
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d027      	beq.n	800ce6c <ai_platform_network_init+0x11c>
 800ce1c:	4a7c      	ldr	r2, [pc, #496]	; (800d010 <ai_platform_network_init+0x2c0>)
 800ce1e:	6813      	ldr	r3, [r2, #0]
 800ce20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce24:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ce28:	d02d      	beq.n	800ce86 <ai_platform_network_init+0x136>
 800ce2a:	6813      	ldr	r3, [r2, #0]
 800ce2c:	f240 4183 	movw	r1, #1155	; 0x483
 800ce30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce34:	428b      	cmp	r3, r1
 800ce36:	f000 8089 	beq.w	800cf4c <ai_platform_network_init+0x1fc>
 800ce3a:	6813      	ldr	r3, [r2, #0]
 800ce3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce40:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ce44:	f000 80c3 	beq.w	800cfce <ai_platform_network_init+0x27e>
 800ce48:	6813      	ldr	r3, [r2, #0]
 800ce4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d129      	bne.n	800cea6 <ai_platform_network_init+0x156>
 800ce52:	4a71      	ldr	r2, [pc, #452]	; (800d018 <ai_platform_network_init+0x2c8>)
 800ce54:	2301      	movs	r3, #1
 800ce56:	6093      	str	r3, [r2, #8]
 800ce58:	6893      	ldr	r3, [r2, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1fc      	bne.n	800ce58 <ai_platform_network_init+0x108>
 800ce5e:	496f      	ldr	r1, [pc, #444]	; (800d01c <ai_platform_network_init+0x2cc>)
 800ce60:	4b6f      	ldr	r3, [pc, #444]	; (800d020 <ai_platform_network_init+0x2d0>)
 800ce62:	6011      	str	r1, [r2, #0]
 800ce64:	6812      	ldr	r2, [r2, #0]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d01d      	beq.n	800cea6 <ai_platform_network_init+0x156>
 800ce6a:	e7fe      	b.n	800ce6a <ai_platform_network_init+0x11a>
 800ce6c:	4a6a      	ldr	r2, [pc, #424]	; (800d018 <ai_platform_network_init+0x2c8>)
 800ce6e:	2301      	movs	r3, #1
 800ce70:	6093      	str	r3, [r2, #8]
 800ce72:	6893      	ldr	r3, [r2, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1fc      	bne.n	800ce72 <ai_platform_network_init+0x122>
 800ce78:	4968      	ldr	r1, [pc, #416]	; (800d01c <ai_platform_network_init+0x2cc>)
 800ce7a:	4b69      	ldr	r3, [pc, #420]	; (800d020 <ai_platform_network_init+0x2d0>)
 800ce7c:	6011      	str	r1, [r2, #0]
 800ce7e:	6812      	ldr	r2, [r2, #0]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d010      	beq.n	800cea6 <ai_platform_network_init+0x156>
 800ce84:	e7fe      	b.n	800ce84 <ai_platform_network_init+0x134>
 800ce86:	4a67      	ldr	r2, [pc, #412]	; (800d024 <ai_platform_network_init+0x2d4>)
 800ce88:	2301      	movs	r3, #1
 800ce8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ce8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1fb      	bne.n	800ce8e <ai_platform_network_init+0x13e>
 800ce96:	4961      	ldr	r1, [pc, #388]	; (800d01c <ai_platform_network_init+0x2cc>)
 800ce98:	4b61      	ldr	r3, [pc, #388]	; (800d020 <ai_platform_network_init+0x2d0>)
 800ce9a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ce9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d113      	bne.n	800cece <ai_platform_network_init+0x17e>
 800cea6:	2600      	movs	r6, #0
 800cea8:	f7ff f886 	bl	800bfb8 <_ai_platform_release_crc>
 800ceac:	4630      	mov	r0, r6
 800ceae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceb2:	4a59      	ldr	r2, [pc, #356]	; (800d018 <ai_platform_network_init+0x2c8>)
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	6093      	str	r3, [r2, #8]
 800ceb8:	6893      	ldr	r3, [r2, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1fc      	bne.n	800ceb8 <ai_platform_network_init+0x168>
 800cebe:	4b57      	ldr	r3, [pc, #348]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cec0:	6013      	str	r3, [r2, #0]
 800cec2:	4b57      	ldr	r3, [pc, #348]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cec4:	6812      	ldr	r2, [r2, #0]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	f43f af7a 	beq.w	800cdc0 <ai_platform_network_init+0x70>
 800cecc:	e7fe      	b.n	800cecc <ai_platform_network_init+0x17c>
 800cece:	e7fe      	b.n	800cece <ai_platform_network_init+0x17e>
 800ced0:	4a54      	ldr	r2, [pc, #336]	; (800d024 <ai_platform_network_init+0x2d4>)
 800ced2:	2301      	movs	r3, #1
 800ced4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ced8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1fb      	bne.n	800ced8 <ai_platform_network_init+0x188>
 800cee0:	4b4e      	ldr	r3, [pc, #312]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cee2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cee6:	4b4e      	ldr	r3, [pc, #312]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cee8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ceec:	429a      	cmp	r2, r3
 800ceee:	f43f af67 	beq.w	800cdc0 <ai_platform_network_init+0x70>
 800cef2:	e7fe      	b.n	800cef2 <ai_platform_network_init+0x1a2>
 800cef4:	2101      	movs	r1, #1
 800cef6:	4628      	mov	r0, r5
 800cef8:	f105 081c 	add.w	r8, r5, #28
 800cefc:	686e      	ldr	r6, [r5, #4]
 800cefe:	f7ff f80b 	bl	800bf18 <ai_buffer_get_size>
 800cf02:	4607      	mov	r7, r0
 800cf04:	2101      	movs	r1, #1
 800cf06:	4640      	mov	r0, r8
 800cf08:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800cf0c:	f7ff f804 	bl	800bf18 <ai_buffer_get_size>
 800cf10:	2f00      	cmp	r7, #0
 800cf12:	d13e      	bne.n	800cf92 <ai_platform_network_init+0x242>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	f000 808e 	beq.w	800d036 <ai_platform_network_init+0x2e6>
 800cf1a:	f1b9 0f00 	cmp.w	r9, #0
 800cf1e:	f000 8094 	beq.w	800d04a <ai_platform_network_init+0x2fa>
 800cf22:	f04f 0c01 	mov.w	ip, #1
 800cf26:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800cf28:	2600      	movs	r6, #0
 800cf2a:	83e7      	strh	r7, [r4, #30]
 800cf2c:	4563      	cmp	r3, ip
 800cf2e:	83a6      	strh	r6, [r4, #28]
 800cf30:	d37a      	bcc.n	800d028 <ai_platform_network_init+0x2d8>
 800cf32:	f1bc 0f00 	cmp.w	ip, #0
 800cf36:	f000 809c 	beq.w	800d072 <ai_platform_network_init+0x322>
 800cf3a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800cf3c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800cf40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf42:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800cf46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cf4a:	e74c      	b.n	800cde6 <ai_platform_network_init+0x96>
 800cf4c:	4a35      	ldr	r2, [pc, #212]	; (800d024 <ai_platform_network_init+0x2d4>)
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1fb      	bne.n	800cf54 <ai_platform_network_init+0x204>
 800cf5c:	492f      	ldr	r1, [pc, #188]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cf5e:	4b30      	ldr	r3, [pc, #192]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cf60:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cf64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d09c      	beq.n	800cea6 <ai_platform_network_init+0x156>
 800cf6c:	e7fe      	b.n	800cf6c <ai_platform_network_init+0x21c>
 800cf6e:	4a2d      	ldr	r2, [pc, #180]	; (800d024 <ai_platform_network_init+0x2d4>)
 800cf70:	2301      	movs	r3, #1
 800cf72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1fb      	bne.n	800cf76 <ai_platform_network_init+0x226>
 800cf7e:	4b27      	ldr	r3, [pc, #156]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cf80:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cf84:	4b26      	ldr	r3, [pc, #152]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cf86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	f43f af18 	beq.w	800cdc0 <ai_platform_network_init+0x70>
 800cf90:	e7fe      	b.n	800cf90 <ai_platform_network_init+0x240>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d153      	bne.n	800d03e <ai_platform_network_init+0x2ee>
 800cf96:	4680      	mov	r8, r0
 800cf98:	4684      	mov	ip, r0
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	d063      	beq.n	800d066 <ai_platform_network_init+0x316>
 800cf9e:	8be6      	ldrh	r6, [r4, #30]
 800cfa0:	2e00      	cmp	r6, #0
 800cfa2:	d168      	bne.n	800d076 <ai_platform_network_init+0x326>
 800cfa4:	2212      	movs	r2, #18
 800cfa6:	2116      	movs	r1, #22
 800cfa8:	f104 0010 	add.w	r0, r4, #16
 800cfac:	f000 fc7a 	bl	800d8a4 <core_set_error>
 800cfb0:	e77c      	b.n	800ceac <ai_platform_network_init+0x15c>
 800cfb2:	4a19      	ldr	r2, [pc, #100]	; (800d018 <ai_platform_network_init+0x2c8>)
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	6093      	str	r3, [r2, #8]
 800cfb8:	6893      	ldr	r3, [r2, #8]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1fc      	bne.n	800cfb8 <ai_platform_network_init+0x268>
 800cfbe:	4b17      	ldr	r3, [pc, #92]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	4b17      	ldr	r3, [pc, #92]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cfc4:	6812      	ldr	r2, [r2, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	f43f aefa 	beq.w	800cdc0 <ai_platform_network_init+0x70>
 800cfcc:	e7fe      	b.n	800cfcc <ai_platform_network_init+0x27c>
 800cfce:	4a12      	ldr	r2, [pc, #72]	; (800d018 <ai_platform_network_init+0x2c8>)
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	6093      	str	r3, [r2, #8]
 800cfd4:	6893      	ldr	r3, [r2, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1fc      	bne.n	800cfd4 <ai_platform_network_init+0x284>
 800cfda:	4910      	ldr	r1, [pc, #64]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cfdc:	4b10      	ldr	r3, [pc, #64]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cfde:	6011      	str	r1, [r2, #0]
 800cfe0:	6812      	ldr	r2, [r2, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	f43f af5f 	beq.w	800cea6 <ai_platform_network_init+0x156>
 800cfe8:	e7fe      	b.n	800cfe8 <ai_platform_network_init+0x298>
 800cfea:	4a0b      	ldr	r2, [pc, #44]	; (800d018 <ai_platform_network_init+0x2c8>)
 800cfec:	2301      	movs	r3, #1
 800cfee:	6093      	str	r3, [r2, #8]
 800cff0:	6893      	ldr	r3, [r2, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1fc      	bne.n	800cff0 <ai_platform_network_init+0x2a0>
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <ai_platform_network_init+0x2cc>)
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <ai_platform_network_init+0x2d0>)
 800cffc:	6812      	ldr	r2, [r2, #0]
 800cffe:	429a      	cmp	r2, r3
 800d000:	f43f aede 	beq.w	800cdc0 <ai_platform_network_init+0x70>
 800d004:	e7fe      	b.n	800d004 <ai_platform_network_init+0x2b4>
 800d006:	bf00      	nop
 800d008:	a1c00100 	.word	0xa1c00100
 800d00c:	e0042000 	.word	0xe0042000
 800d010:	5c001000 	.word	0x5c001000
 800d014:	a1facade 	.word	0xa1facade
 800d018:	40023000 	.word	0x40023000
 800d01c:	f407a5c2 	.word	0xf407a5c2
 800d020:	b5e8b5cd 	.word	0xb5e8b5cd
 800d024:	58024000 	.word	0x58024000
 800d028:	2213      	movs	r2, #19
 800d02a:	2116      	movs	r1, #22
 800d02c:	f104 0010 	add.w	r0, r4, #16
 800d030:	f000 fc38 	bl	800d8a4 <core_set_error>
 800d034:	e73a      	b.n	800ceac <ai_platform_network_init+0x15c>
 800d036:	4607      	mov	r7, r0
 800d038:	4680      	mov	r8, r0
 800d03a:	4684      	mov	ip, r0
 800d03c:	e773      	b.n	800cf26 <ai_platform_network_init+0x1d6>
 800d03e:	f1b9 0f00 	cmp.w	r9, #0
 800d042:	d002      	beq.n	800d04a <ai_platform_network_init+0x2fa>
 800d044:	f04f 0c01 	mov.w	ip, #1
 800d048:	e7a7      	b.n	800cf9a <ai_platform_network_init+0x24a>
 800d04a:	2110      	movs	r1, #16
 800d04c:	2213      	movs	r2, #19
 800d04e:	2600      	movs	r6, #0
 800d050:	1860      	adds	r0, r4, r1
 800d052:	f000 fc27 	bl	800d8a4 <core_set_error>
 800d056:	e729      	b.n	800ceac <ai_platform_network_init+0x15c>
 800d058:	2110      	movs	r1, #16
 800d05a:	2211      	movs	r2, #17
 800d05c:	462e      	mov	r6, r5
 800d05e:	1860      	adds	r0, r4, r1
 800d060:	f000 fc20 	bl	800d8a4 <core_set_error>
 800d064:	e722      	b.n	800ceac <ai_platform_network_init+0x15c>
 800d066:	2110      	movs	r1, #16
 800d068:	2212      	movs	r2, #18
 800d06a:	1860      	adds	r0, r4, r1
 800d06c:	f000 fc1a 	bl	800d8a4 <core_set_error>
 800d070:	e71c      	b.n	800ceac <ai_platform_network_init+0x15c>
 800d072:	4666      	mov	r6, ip
 800d074:	e6b7      	b.n	800cde6 <ai_platform_network_init+0x96>
 800d076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d078:	6a26      	ldr	r6, [r4, #32]
 800d07a:	2701      	movs	r7, #1
 800d07c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d07e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d082:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d086:	e74e      	b.n	800cf26 <ai_platform_network_init+0x1d6>

0800d088 <ai_platform_network_post_init>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d04e      	beq.n	800d12c <ai_platform_network_post_init+0xa4>
 800d08e:	4b8c      	ldr	r3, [pc, #560]	; (800d2c0 <ai_platform_network_post_init+0x238>)
 800d090:	4604      	mov	r4, r0
 800d092:	6802      	ldr	r2, [r0, #0]
 800d094:	429a      	cmp	r2, r3
 800d096:	d149      	bne.n	800d12c <ai_platform_network_post_init+0xa4>
 800d098:	f7fe ff8c 	bl	800bfb4 <_ai_platform_acquire_crc>
 800d09c:	4b89      	ldr	r3, [pc, #548]	; (800d2c4 <ai_platform_network_post_init+0x23c>)
 800d09e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0a8:	189a      	adds	r2, r3, r2
 800d0aa:	2a01      	cmp	r2, #1
 800d0ac:	f240 8095 	bls.w	800d1da <ai_platform_network_post_init+0x152>
 800d0b0:	f240 4249 	movw	r2, #1097	; 0x449
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	f000 8090 	beq.w	800d1da <ai_platform_network_post_init+0x152>
 800d0ba:	4a83      	ldr	r2, [pc, #524]	; (800d2c8 <ai_platform_network_post_init+0x240>)
 800d0bc:	6813      	ldr	r3, [r2, #0]
 800d0be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0c2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d0c6:	f000 8096 	beq.w	800d1f6 <ai_platform_network_post_init+0x16e>
 800d0ca:	6813      	ldr	r3, [r2, #0]
 800d0cc:	f240 4183 	movw	r1, #1155	; 0x483
 800d0d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0d4:	428b      	cmp	r3, r1
 800d0d6:	f000 80b8 	beq.w	800d24a <ai_platform_network_post_init+0x1c2>
 800d0da:	6813      	ldr	r3, [r2, #0]
 800d0dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0e0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d0e4:	f000 80de 	beq.w	800d2a4 <ai_platform_network_post_init+0x21c>
 800d0e8:	6813      	ldr	r3, [r2, #0]
 800d0ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 80bd 	beq.w	800d26e <ai_platform_network_post_init+0x1e6>
 800d0f4:	f7fe ff60 	bl	800bfb8 <_ai_platform_release_crc>
 800d0f8:	68e3      	ldr	r3, [r4, #12]
 800d0fa:	f013 0502 	ands.w	r5, r3, #2
 800d0fe:	f000 808c 	beq.w	800d21a <ai_platform_network_post_init+0x192>
 800d102:	4620      	mov	r0, r4
 800d104:	f000 fd60 	bl	800dbc8 <ai_layers_post_init_all>
 800d108:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d10a:	b16b      	cbz	r3, 800d128 <ai_platform_network_post_init+0xa0>
 800d10c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d10e:	e007      	b.n	800d120 <ai_platform_network_post_init+0x98>
 800d110:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800d114:	4798      	blx	r3
 800d116:	692b      	ldr	r3, [r5, #16]
 800d118:	b133      	cbz	r3, 800d128 <ai_platform_network_post_init+0xa0>
 800d11a:	42ab      	cmp	r3, r5
 800d11c:	461d      	mov	r5, r3
 800d11e:	d003      	beq.n	800d128 <ai_platform_network_post_init+0xa0>
 800d120:	4629      	mov	r1, r5
 800d122:	2000      	movs	r0, #0
 800d124:	2d00      	cmp	r5, #0
 800d126:	d1f3      	bne.n	800d110 <ai_platform_network_post_init+0x88>
 800d128:	2001      	movs	r0, #1
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	f7fe ff42 	bl	800bfb4 <_ai_platform_acquire_crc>
 800d130:	4b64      	ldr	r3, [pc, #400]	; (800d2c4 <ai_platform_network_post_init+0x23c>)
 800d132:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d13c:	185a      	adds	r2, r3, r1
 800d13e:	2a01      	cmp	r2, #1
 800d140:	d92a      	bls.n	800d198 <ai_platform_network_post_init+0x110>
 800d142:	f240 4249 	movw	r2, #1097	; 0x449
 800d146:	4293      	cmp	r3, r2
 800d148:	d026      	beq.n	800d198 <ai_platform_network_post_init+0x110>
 800d14a:	4a5f      	ldr	r2, [pc, #380]	; (800d2c8 <ai_platform_network_post_init+0x240>)
 800d14c:	6813      	ldr	r3, [r2, #0]
 800d14e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d152:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d156:	d02c      	beq.n	800d1b2 <ai_platform_network_post_init+0x12a>
 800d158:	6813      	ldr	r3, [r2, #0]
 800d15a:	f240 4183 	movw	r1, #1155	; 0x483
 800d15e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d162:	428b      	cmp	r3, r1
 800d164:	d060      	beq.n	800d228 <ai_platform_network_post_init+0x1a0>
 800d166:	6813      	ldr	r3, [r2, #0]
 800d168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d16c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d170:	f000 808b 	beq.w	800d28a <ai_platform_network_post_init+0x202>
 800d174:	6813      	ldr	r3, [r2, #0]
 800d176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d129      	bne.n	800d1d2 <ai_platform_network_post_init+0x14a>
 800d17e:	4a53      	ldr	r2, [pc, #332]	; (800d2cc <ai_platform_network_post_init+0x244>)
 800d180:	2301      	movs	r3, #1
 800d182:	6093      	str	r3, [r2, #8]
 800d184:	6893      	ldr	r3, [r2, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1fc      	bne.n	800d184 <ai_platform_network_post_init+0xfc>
 800d18a:	4951      	ldr	r1, [pc, #324]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d18c:	4b51      	ldr	r3, [pc, #324]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d18e:	6011      	str	r1, [r2, #0]
 800d190:	6812      	ldr	r2, [r2, #0]
 800d192:	429a      	cmp	r2, r3
 800d194:	d01d      	beq.n	800d1d2 <ai_platform_network_post_init+0x14a>
 800d196:	e7fe      	b.n	800d196 <ai_platform_network_post_init+0x10e>
 800d198:	4a4c      	ldr	r2, [pc, #304]	; (800d2cc <ai_platform_network_post_init+0x244>)
 800d19a:	2301      	movs	r3, #1
 800d19c:	6093      	str	r3, [r2, #8]
 800d19e:	6893      	ldr	r3, [r2, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1fc      	bne.n	800d19e <ai_platform_network_post_init+0x116>
 800d1a4:	494a      	ldr	r1, [pc, #296]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d1a6:	4b4b      	ldr	r3, [pc, #300]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d1a8:	6011      	str	r1, [r2, #0]
 800d1aa:	6812      	ldr	r2, [r2, #0]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d010      	beq.n	800d1d2 <ai_platform_network_post_init+0x14a>
 800d1b0:	e7fe      	b.n	800d1b0 <ai_platform_network_post_init+0x128>
 800d1b2:	4a49      	ldr	r2, [pc, #292]	; (800d2d8 <ai_platform_network_post_init+0x250>)
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d1ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1fb      	bne.n	800d1ba <ai_platform_network_post_init+0x132>
 800d1c2:	4943      	ldr	r1, [pc, #268]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d1c4:	4b43      	ldr	r3, [pc, #268]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d1c6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d1ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d110      	bne.n	800d1f4 <ai_platform_network_post_init+0x16c>
 800d1d2:	f7fe fef1 	bl	800bfb8 <_ai_platform_release_crc>
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	bd38      	pop	{r3, r4, r5, pc}
 800d1da:	4a3c      	ldr	r2, [pc, #240]	; (800d2cc <ai_platform_network_post_init+0x244>)
 800d1dc:	2301      	movs	r3, #1
 800d1de:	6093      	str	r3, [r2, #8]
 800d1e0:	6893      	ldr	r3, [r2, #8]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1fc      	bne.n	800d1e0 <ai_platform_network_post_init+0x158>
 800d1e6:	493a      	ldr	r1, [pc, #232]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d1e8:	4b3a      	ldr	r3, [pc, #232]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d1ea:	6011      	str	r1, [r2, #0]
 800d1ec:	6812      	ldr	r2, [r2, #0]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d080      	beq.n	800d0f4 <ai_platform_network_post_init+0x6c>
 800d1f2:	e7fe      	b.n	800d1f2 <ai_platform_network_post_init+0x16a>
 800d1f4:	e7fe      	b.n	800d1f4 <ai_platform_network_post_init+0x16c>
 800d1f6:	4a38      	ldr	r2, [pc, #224]	; (800d2d8 <ai_platform_network_post_init+0x250>)
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d1fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1fb      	bne.n	800d1fe <ai_platform_network_post_init+0x176>
 800d206:	4932      	ldr	r1, [pc, #200]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d208:	4b32      	ldr	r3, [pc, #200]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d20a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d20e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d212:	429a      	cmp	r2, r3
 800d214:	f43f af6e 	beq.w	800d0f4 <ai_platform_network_post_init+0x6c>
 800d218:	e7fe      	b.n	800d218 <ai_platform_network_post_init+0x190>
 800d21a:	2210      	movs	r2, #16
 800d21c:	2111      	movs	r1, #17
 800d21e:	18a0      	adds	r0, r4, r2
 800d220:	f000 fb40 	bl	800d8a4 <core_set_error>
 800d224:	4628      	mov	r0, r5
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	4a2b      	ldr	r2, [pc, #172]	; (800d2d8 <ai_platform_network_post_init+0x250>)
 800d22a:	2301      	movs	r3, #1
 800d22c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d230:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1fb      	bne.n	800d230 <ai_platform_network_post_init+0x1a8>
 800d238:	4925      	ldr	r1, [pc, #148]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d23a:	4b26      	ldr	r3, [pc, #152]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d23c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d240:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d244:	429a      	cmp	r2, r3
 800d246:	d0c4      	beq.n	800d1d2 <ai_platform_network_post_init+0x14a>
 800d248:	e7fe      	b.n	800d248 <ai_platform_network_post_init+0x1c0>
 800d24a:	4a23      	ldr	r2, [pc, #140]	; (800d2d8 <ai_platform_network_post_init+0x250>)
 800d24c:	2301      	movs	r3, #1
 800d24e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d252:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1fb      	bne.n	800d252 <ai_platform_network_post_init+0x1ca>
 800d25a:	491d      	ldr	r1, [pc, #116]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d25c:	4b1d      	ldr	r3, [pc, #116]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d25e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d262:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d266:	429a      	cmp	r2, r3
 800d268:	f43f af44 	beq.w	800d0f4 <ai_platform_network_post_init+0x6c>
 800d26c:	e7fe      	b.n	800d26c <ai_platform_network_post_init+0x1e4>
 800d26e:	4a17      	ldr	r2, [pc, #92]	; (800d2cc <ai_platform_network_post_init+0x244>)
 800d270:	2301      	movs	r3, #1
 800d272:	6093      	str	r3, [r2, #8]
 800d274:	6893      	ldr	r3, [r2, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1fc      	bne.n	800d274 <ai_platform_network_post_init+0x1ec>
 800d27a:	4915      	ldr	r1, [pc, #84]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d27c:	4b15      	ldr	r3, [pc, #84]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d27e:	6011      	str	r1, [r2, #0]
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	f43f af36 	beq.w	800d0f4 <ai_platform_network_post_init+0x6c>
 800d288:	e7fe      	b.n	800d288 <ai_platform_network_post_init+0x200>
 800d28a:	4a10      	ldr	r2, [pc, #64]	; (800d2cc <ai_platform_network_post_init+0x244>)
 800d28c:	2301      	movs	r3, #1
 800d28e:	6093      	str	r3, [r2, #8]
 800d290:	6893      	ldr	r3, [r2, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1fc      	bne.n	800d290 <ai_platform_network_post_init+0x208>
 800d296:	490e      	ldr	r1, [pc, #56]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d298:	4b0e      	ldr	r3, [pc, #56]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d29a:	6011      	str	r1, [r2, #0]
 800d29c:	6812      	ldr	r2, [r2, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d097      	beq.n	800d1d2 <ai_platform_network_post_init+0x14a>
 800d2a2:	e7fe      	b.n	800d2a2 <ai_platform_network_post_init+0x21a>
 800d2a4:	4a09      	ldr	r2, [pc, #36]	; (800d2cc <ai_platform_network_post_init+0x244>)
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	6093      	str	r3, [r2, #8]
 800d2aa:	6893      	ldr	r3, [r2, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1fc      	bne.n	800d2aa <ai_platform_network_post_init+0x222>
 800d2b0:	4907      	ldr	r1, [pc, #28]	; (800d2d0 <ai_platform_network_post_init+0x248>)
 800d2b2:	4b08      	ldr	r3, [pc, #32]	; (800d2d4 <ai_platform_network_post_init+0x24c>)
 800d2b4:	6011      	str	r1, [r2, #0]
 800d2b6:	6812      	ldr	r2, [r2, #0]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	f43f af1b 	beq.w	800d0f4 <ai_platform_network_post_init+0x6c>
 800d2be:	e7fe      	b.n	800d2be <ai_platform_network_post_init+0x236>
 800d2c0:	a1c00100 	.word	0xa1c00100
 800d2c4:	e0042000 	.word	0xe0042000
 800d2c8:	5c001000 	.word	0x5c001000
 800d2cc:	40023000 	.word	0x40023000
 800d2d0:	f407a5c2 	.word	0xf407a5c2
 800d2d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d2d8:	58024000 	.word	0x58024000

0800d2dc <ai_platform_network_process>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	b085      	sub	sp, #20
 800d2e2:	460e      	mov	r6, r1
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	9201      	str	r2, [sp, #4]
 800d2e8:	b120      	cbz	r0, 800d2f4 <ai_platform_network_process+0x18>
 800d2ea:	4b24      	ldr	r3, [pc, #144]	; (800d37c <ai_platform_network_process+0xa0>)
 800d2ec:	6802      	ldr	r2, [r0, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	bf18      	it	ne
 800d2f2:	2500      	movne	r5, #0
 800d2f4:	f7fe fe5e 	bl	800bfb4 <_ai_platform_acquire_crc>
 800d2f8:	4b21      	ldr	r3, [pc, #132]	; (800d380 <ai_platform_network_process+0xa4>)
 800d2fa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d304:	185a      	adds	r2, r3, r1
 800d306:	2a01      	cmp	r2, #1
 800d308:	d92b      	bls.n	800d362 <ai_platform_network_process+0x86>
 800d30a:	f240 4249 	movw	r2, #1097	; 0x449
 800d30e:	4293      	cmp	r3, r2
 800d310:	d027      	beq.n	800d362 <ai_platform_network_process+0x86>
 800d312:	4a1c      	ldr	r2, [pc, #112]	; (800d384 <ai_platform_network_process+0xa8>)
 800d314:	6813      	ldr	r3, [r2, #0]
 800d316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d31a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d31e:	d039      	beq.n	800d394 <ai_platform_network_process+0xb8>
 800d320:	6813      	ldr	r3, [r2, #0]
 800d322:	f240 4183 	movw	r1, #1155	; 0x483
 800d326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d32a:	428b      	cmp	r3, r1
 800d32c:	f000 819c 	beq.w	800d668 <ai_platform_network_process+0x38c>
 800d330:	6813      	ldr	r3, [r2, #0]
 800d332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d336:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d33a:	f000 8179 	beq.w	800d630 <ai_platform_network_process+0x354>
 800d33e:	6813      	ldr	r3, [r2, #0]
 800d340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d344:	2b00      	cmp	r3, #0
 800d346:	d136      	bne.n	800d3b6 <ai_platform_network_process+0xda>
 800d348:	4a0f      	ldr	r2, [pc, #60]	; (800d388 <ai_platform_network_process+0xac>)
 800d34a:	2301      	movs	r3, #1
 800d34c:	6093      	str	r3, [r2, #8]
 800d34e:	6893      	ldr	r3, [r2, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1fc      	bne.n	800d34e <ai_platform_network_process+0x72>
 800d354:	4b0d      	ldr	r3, [pc, #52]	; (800d38c <ai_platform_network_process+0xb0>)
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <ai_platform_network_process+0xb4>)
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d02a      	beq.n	800d3b6 <ai_platform_network_process+0xda>
 800d360:	e7fe      	b.n	800d360 <ai_platform_network_process+0x84>
 800d362:	4a09      	ldr	r2, [pc, #36]	; (800d388 <ai_platform_network_process+0xac>)
 800d364:	2301      	movs	r3, #1
 800d366:	6093      	str	r3, [r2, #8]
 800d368:	6893      	ldr	r3, [r2, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1fc      	bne.n	800d368 <ai_platform_network_process+0x8c>
 800d36e:	4b07      	ldr	r3, [pc, #28]	; (800d38c <ai_platform_network_process+0xb0>)
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	4b07      	ldr	r3, [pc, #28]	; (800d390 <ai_platform_network_process+0xb4>)
 800d374:	6812      	ldr	r2, [r2, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	d01d      	beq.n	800d3b6 <ai_platform_network_process+0xda>
 800d37a:	e7fe      	b.n	800d37a <ai_platform_network_process+0x9e>
 800d37c:	a1c00100 	.word	0xa1c00100
 800d380:	e0042000 	.word	0xe0042000
 800d384:	5c001000 	.word	0x5c001000
 800d388:	40023000 	.word	0x40023000
 800d38c:	f407a5c2 	.word	0xf407a5c2
 800d390:	b5e8b5cd 	.word	0xb5e8b5cd
 800d394:	4ab0      	ldr	r2, [pc, #704]	; (800d658 <ai_platform_network_process+0x37c>)
 800d396:	2301      	movs	r3, #1
 800d398:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d39c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1fb      	bne.n	800d39c <ai_platform_network_process+0xc0>
 800d3a4:	4bad      	ldr	r3, [pc, #692]	; (800d65c <ai_platform_network_process+0x380>)
 800d3a6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d3aa:	4bad      	ldr	r3, [pc, #692]	; (800d660 <ai_platform_network_process+0x384>)
 800d3ac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	f040 812b 	bne.w	800d60c <ai_platform_network_process+0x330>
 800d3b6:	f7fe fdff 	bl	800bfb8 <_ai_platform_release_crc>
 800d3ba:	2d00      	cmp	r5, #0
 800d3bc:	f000 8172 	beq.w	800d6a4 <ai_platform_network_process+0x3c8>
 800d3c0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 8123 	beq.w	800d60e <ai_platform_network_process+0x332>
 800d3c8:	68eb      	ldr	r3, [r5, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800d3d0:	f003 0303 	and.w	r3, r3, #3
 800d3d4:	616a      	str	r2, [r5, #20]
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	f040 811f 	bne.w	800d61a <ai_platform_network_process+0x33e>
 800d3dc:	2e00      	cmp	r6, #0
 800d3de:	f000 8156 	beq.w	800d68e <ai_platform_network_process+0x3b2>
 800d3e2:	fab8 f788 	clz	r7, r8
 800d3e6:	097f      	lsrs	r7, r7, #5
 800d3e8:	f1b8 0f00 	cmp.w	r8, #0
 800d3ec:	f000 814f 	beq.w	800d68e <ai_platform_network_process+0x3b2>
 800d3f0:	f8b8 3000 	ldrh.w	r3, [r8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 814a 	beq.w	800d68e <ai_platform_network_process+0x3b2>
 800d3fa:	69b3      	ldr	r3, [r6, #24]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800d402:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d072      	beq.n	800d4f0 <ai_platform_network_process+0x214>
 800d40a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d40e:	2c00      	cmp	r4, #0
 800d410:	d06e      	beq.n	800d4f0 <ai_platform_network_process+0x214>
 800d412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d416:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d41a:	f8d3 a000 	ldr.w	sl, [r3]
 800d41e:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800d422:	f000 8133 	beq.w	800d68c <ai_platform_network_process+0x3b0>
 800d426:	69a3      	ldr	r3, [r4, #24]
 800d428:	2101      	movs	r1, #1
 800d42a:	4630      	mov	r0, r6
 800d42c:	685d      	ldr	r5, [r3, #4]
 800d42e:	f7fe fd73 	bl	800bf18 <ai_buffer_get_size>
 800d432:	4285      	cmp	r5, r0
 800d434:	f0c0 8138 	bcc.w	800d6a8 <ai_platform_network_process+0x3cc>
 800d438:	68e0      	ldr	r0, [r4, #12]
 800d43a:	69b1      	ldr	r1, [r6, #24]
 800d43c:	68c2      	ldr	r2, [r0, #12]
 800d43e:	68cb      	ldr	r3, [r1, #12]
 800d440:	429a      	cmp	r2, r3
 800d442:	f040 8131 	bne.w	800d6a8 <ai_platform_network_process+0x3cc>
 800d446:	6882      	ldr	r2, [r0, #8]
 800d448:	688b      	ldr	r3, [r1, #8]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	f040 812c 	bne.w	800d6a8 <ai_platform_network_process+0x3cc>
 800d450:	6842      	ldr	r2, [r0, #4]
 800d452:	684b      	ldr	r3, [r1, #4]
 800d454:	429a      	cmp	r2, r3
 800d456:	f040 8127 	bne.w	800d6a8 <ai_platform_network_process+0x3cc>
 800d45a:	69a3      	ldr	r3, [r4, #24]
 800d45c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d460:	f001 fc4e 	bl	800ed00 <ai_array_get_data_byte_size>
 800d464:	4605      	mov	r5, r0
 800d466:	4620      	mov	r0, r4
 800d468:	f001 fc60 	bl	800ed2c <get_tensor_byte_size>
 800d46c:	4285      	cmp	r5, r0
 800d46e:	f0c0 811b 	bcc.w	800d6a8 <ai_platform_network_process+0x3cc>
 800d472:	69a3      	ldr	r3, [r4, #24]
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f001 fbd7 	bl	800ec28 <ai_array_to_buffer_fmt>
 800d47a:	6833      	ldr	r3, [r6, #0]
 800d47c:	4058      	eors	r0, r3
 800d47e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d482:	f040 81c8 	bne.w	800d816 <ai_platform_network_process+0x53a>
 800d486:	6873      	ldr	r3, [r6, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 81bb 	beq.w	800d804 <ai_platform_network_process+0x528>
 800d48e:	69b3      	ldr	r3, [r6, #24]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 81c8 	beq.w	800d828 <ai_platform_network_process+0x54c>
 800d498:	9a02      	ldr	r2, [sp, #8]
 800d49a:	4620      	mov	r0, r4
 800d49c:	3701      	adds	r7, #1
 800d49e:	361c      	adds	r6, #28
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	bf38      	it	cc
 800d4a4:	461a      	movcc	r2, r3
 800d4a6:	9202      	str	r2, [sp, #8]
 800d4a8:	f001 fc40 	bl	800ed2c <get_tensor_byte_size>
 800d4ac:	f8c9 0008 	str.w	r0, [r9, #8]
 800d4b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	fb00 f303 	mul.w	r3, r0, r3
 800d4ba:	f8c9 300c 	str.w	r3, [r9, #12]
 800d4be:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d4c2:	440b      	add	r3, r1
 800d4c4:	f8c9 1004 	str.w	r1, [r9, #4]
 800d4c8:	f84a 300b 	str.w	r3, [sl, fp]
 800d4cc:	69a0      	ldr	r0, [r4, #24]
 800d4ce:	6803      	ldr	r3, [r0, #0]
 800d4d0:	009a      	lsls	r2, r3, #2
 800d4d2:	f100 80bb 	bmi.w	800d64c <ai_platform_network_process+0x370>
 800d4d6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d4da:	1a9b      	subs	r3, r3, r2
 800d4dc:	4419      	add	r1, r3
 800d4de:	6081      	str	r1, [r0, #8]
 800d4e0:	69a3      	ldr	r3, [r4, #24]
 800d4e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d4e6:	60da      	str	r2, [r3, #12]
 800d4e8:	f8b8 3000 	ldrh.w	r3, [r8]
 800d4ec:	42bb      	cmp	r3, r7
 800d4ee:	d888      	bhi.n	800d402 <ai_platform_network_process+0x126>
 800d4f0:	9d03      	ldr	r5, [sp, #12]
 800d4f2:	9b01      	ldr	r3, [sp, #4]
 800d4f4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 819f 	beq.w	800d83a <ai_platform_network_process+0x55e>
 800d4fc:	2a01      	cmp	r2, #1
 800d4fe:	f240 8179 	bls.w	800d7f4 <ai_platform_network_process+0x518>
 800d502:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800d506:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f000 8172 	beq.w	800d7f4 <ai_platform_network_process+0x518>
 800d510:	9e01      	ldr	r6, [sp, #4]
 800d512:	2700      	movs	r7, #0
 800d514:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 80d3 	beq.w	800d6c4 <ai_platform_network_process+0x3e8>
 800d51e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d522:	2c00      	cmp	r4, #0
 800d524:	f000 80ce 	beq.w	800d6c4 <ai_platform_network_process+0x3e8>
 800d528:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d52c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d530:	f8d3 8000 	ldr.w	r8, [r3]
 800d534:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800d538:	f000 819d 	beq.w	800d876 <ai_platform_network_process+0x59a>
 800d53c:	69a3      	ldr	r3, [r4, #24]
 800d53e:	2101      	movs	r1, #1
 800d540:	4630      	mov	r0, r6
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	f7fe fce7 	bl	800bf18 <ai_buffer_get_size>
 800d54a:	9b01      	ldr	r3, [sp, #4]
 800d54c:	4283      	cmp	r3, r0
 800d54e:	f0c0 8151 	bcc.w	800d7f4 <ai_platform_network_process+0x518>
 800d552:	68e0      	ldr	r0, [r4, #12]
 800d554:	69b1      	ldr	r1, [r6, #24]
 800d556:	68c2      	ldr	r2, [r0, #12]
 800d558:	68cb      	ldr	r3, [r1, #12]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	f040 814a 	bne.w	800d7f4 <ai_platform_network_process+0x518>
 800d560:	6882      	ldr	r2, [r0, #8]
 800d562:	688b      	ldr	r3, [r1, #8]
 800d564:	429a      	cmp	r2, r3
 800d566:	f040 8145 	bne.w	800d7f4 <ai_platform_network_process+0x518>
 800d56a:	6842      	ldr	r2, [r0, #4]
 800d56c:	684b      	ldr	r3, [r1, #4]
 800d56e:	429a      	cmp	r2, r3
 800d570:	f040 8140 	bne.w	800d7f4 <ai_platform_network_process+0x518>
 800d574:	69a3      	ldr	r3, [r4, #24]
 800d576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d57a:	f001 fbc1 	bl	800ed00 <ai_array_get_data_byte_size>
 800d57e:	9001      	str	r0, [sp, #4]
 800d580:	4620      	mov	r0, r4
 800d582:	f001 fbd3 	bl	800ed2c <get_tensor_byte_size>
 800d586:	9b01      	ldr	r3, [sp, #4]
 800d588:	4283      	cmp	r3, r0
 800d58a:	f0c0 8133 	bcc.w	800d7f4 <ai_platform_network_process+0x518>
 800d58e:	69a3      	ldr	r3, [r4, #24]
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	f001 fb49 	bl	800ec28 <ai_array_to_buffer_fmt>
 800d596:	6833      	ldr	r3, [r6, #0]
 800d598:	4058      	eors	r0, r3
 800d59a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800d59e:	f040 815a 	bne.w	800d856 <ai_platform_network_process+0x57a>
 800d5a2:	6873      	ldr	r3, [r6, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 814e 	beq.w	800d846 <ai_platform_network_process+0x56a>
 800d5aa:	69b3      	ldr	r3, [r6, #24]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 8159 	beq.w	800d866 <ai_platform_network_process+0x58a>
 800d5b4:	9a02      	ldr	r2, [sp, #8]
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	3701      	adds	r7, #1
 800d5ba:	361c      	adds	r6, #28
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	bf38      	it	cc
 800d5c0:	461a      	movcc	r2, r3
 800d5c2:	9202      	str	r2, [sp, #8]
 800d5c4:	f001 fbb2 	bl	800ed2c <get_tensor_byte_size>
 800d5c8:	f8ca 0008 	str.w	r0, [sl, #8]
 800d5cc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	fb00 f303 	mul.w	r3, r0, r3
 800d5d6:	f8ca 300c 	str.w	r3, [sl, #12]
 800d5da:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800d5de:	440b      	add	r3, r1
 800d5e0:	f8ca 1004 	str.w	r1, [sl, #4]
 800d5e4:	f848 300b 	str.w	r3, [r8, fp]
 800d5e8:	69a0      	ldr	r0, [r4, #24]
 800d5ea:	6803      	ldr	r3, [r0, #0]
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	d464      	bmi.n	800d6ba <ai_platform_network_process+0x3de>
 800d5f0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	4419      	add	r1, r3
 800d5f8:	6081      	str	r1, [r0, #8]
 800d5fa:	69a3      	ldr	r3, [r4, #24]
 800d5fc:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d600:	60da      	str	r2, [r3, #12]
 800d602:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d606:	429f      	cmp	r7, r3
 800d608:	d384      	bcc.n	800d514 <ai_platform_network_process+0x238>
 800d60a:	e05b      	b.n	800d6c4 <ai_platform_network_process+0x3e8>
 800d60c:	e7fe      	b.n	800d60c <ai_platform_network_process+0x330>
 800d60e:	68ea      	ldr	r2, [r5, #12]
 800d610:	616b      	str	r3, [r5, #20]
 800d612:	f002 0203 	and.w	r2, r2, #3
 800d616:	2a03      	cmp	r2, #3
 800d618:	d039      	beq.n	800d68e <ai_platform_network_process+0x3b2>
 800d61a:	2230      	movs	r2, #48	; 0x30
 800d61c:	2111      	movs	r1, #17
 800d61e:	f105 0010 	add.w	r0, r5, #16
 800d622:	2400      	movs	r4, #0
 800d624:	f000 f93e 	bl	800d8a4 <core_set_error>
 800d628:	4620      	mov	r0, r4
 800d62a:	b005      	add	sp, #20
 800d62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d630:	4a0c      	ldr	r2, [pc, #48]	; (800d664 <ai_platform_network_process+0x388>)
 800d632:	2301      	movs	r3, #1
 800d634:	6093      	str	r3, [r2, #8]
 800d636:	6893      	ldr	r3, [r2, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1fc      	bne.n	800d636 <ai_platform_network_process+0x35a>
 800d63c:	4b07      	ldr	r3, [pc, #28]	; (800d65c <ai_platform_network_process+0x380>)
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	4b07      	ldr	r3, [pc, #28]	; (800d660 <ai_platform_network_process+0x384>)
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	429a      	cmp	r2, r3
 800d646:	f43f aeb6 	beq.w	800d3b6 <ai_platform_network_process+0xda>
 800d64a:	e7fe      	b.n	800d64a <ai_platform_network_process+0x36e>
 800d64c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d650:	429f      	cmp	r7, r3
 800d652:	f4ff aed6 	bcc.w	800d402 <ai_platform_network_process+0x126>
 800d656:	e74b      	b.n	800d4f0 <ai_platform_network_process+0x214>
 800d658:	58024000 	.word	0x58024000
 800d65c:	f407a5c2 	.word	0xf407a5c2
 800d660:	b5e8b5cd 	.word	0xb5e8b5cd
 800d664:	40023000 	.word	0x40023000
 800d668:	4a87      	ldr	r2, [pc, #540]	; (800d888 <ai_platform_network_process+0x5ac>)
 800d66a:	2301      	movs	r3, #1
 800d66c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d670:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1fb      	bne.n	800d670 <ai_platform_network_process+0x394>
 800d678:	4b84      	ldr	r3, [pc, #528]	; (800d88c <ai_platform_network_process+0x5b0>)
 800d67a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d67e:	4b84      	ldr	r3, [pc, #528]	; (800d890 <ai_platform_network_process+0x5b4>)
 800d680:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d684:	429a      	cmp	r2, r3
 800d686:	f43f ae96 	beq.w	800d3b6 <ai_platform_network_process+0xda>
 800d68a:	e7fe      	b.n	800d68a <ai_platform_network_process+0x3ae>
 800d68c:	9d03      	ldr	r5, [sp, #12]
 800d68e:	2400      	movs	r4, #0
 800d690:	2217      	movs	r2, #23
 800d692:	2112      	movs	r1, #18
 800d694:	f105 0010 	add.w	r0, r5, #16
 800d698:	f000 f904 	bl	800d8a4 <core_set_error>
 800d69c:	4620      	mov	r0, r4
 800d69e:	b005      	add	sp, #20
 800d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	462c      	mov	r4, r5
 800d6a6:	e7bf      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d6a8:	9d03      	ldr	r5, [sp, #12]
 800d6aa:	2218      	movs	r2, #24
 800d6ac:	2112      	movs	r1, #18
 800d6ae:	2400      	movs	r4, #0
 800d6b0:	f105 0010 	add.w	r0, r5, #16
 800d6b4:	f000 f8f6 	bl	800d8a4 <core_set_error>
 800d6b8:	e7b6      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d6ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d6be:	429f      	cmp	r7, r3
 800d6c0:	f4ff af28 	bcc.w	800d514 <ai_platform_network_process+0x238>
 800d6c4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d6c8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d6ca:	82ab      	strh	r3, [r5, #20]
 800d6cc:	2a00      	cmp	r2, #0
 800d6ce:	f040 808b 	bne.w	800d7e8 <ai_platform_network_process+0x50c>
 800d6d2:	4616      	mov	r6, r2
 800d6d4:	4617      	mov	r7, r2
 800d6d6:	8aec      	ldrh	r4, [r5, #22]
 800d6d8:	429c      	cmp	r4, r3
 800d6da:	d2a5      	bcs.n	800d628 <ai_platform_network_process+0x34c>
 800d6dc:	46ab      	mov	fp, r5
 800d6de:	2e00      	cmp	r6, #0
 800d6e0:	d030      	beq.n	800d744 <ai_platform_network_process+0x468>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	e014      	b.n	800d712 <ai_platform_network_process+0x436>
 800d6e8:	6882      	ldr	r2, [r0, #8]
 800d6ea:	68c5      	ldr	r5, [r0, #12]
 800d6ec:	6863      	ldr	r3, [r4, #4]
 800d6ee:	1b52      	subs	r2, r2, r5
 800d6f0:	4413      	add	r3, r2
 800d6f2:	6083      	str	r3, [r0, #8]
 800d6f4:	698b      	ldr	r3, [r1, #24]
 800d6f6:	6862      	ldr	r2, [r4, #4]
 800d6f8:	60da      	str	r2, [r3, #12]
 800d6fa:	f859 200a 	ldr.w	r2, [r9, sl]
 800d6fe:	f108 0801 	add.w	r8, r8, #1
 800d702:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d706:	440b      	add	r3, r1
 800d708:	4293      	cmp	r3, r2
 800d70a:	d301      	bcc.n	800d710 <ai_platform_network_process+0x434>
 800d70c:	68e3      	ldr	r3, [r4, #12]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	6063      	str	r3, [r4, #4]
 800d712:	8833      	ldrh	r3, [r6, #0]
 800d714:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800d718:	4543      	cmp	r3, r8
 800d71a:	d913      	bls.n	800d744 <ai_platform_network_process+0x468>
 800d71c:	6873      	ldr	r3, [r6, #4]
 800d71e:	b18b      	cbz	r3, 800d744 <ai_platform_network_process+0x468>
 800d720:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d724:	b171      	cbz	r1, 800d744 <ai_platform_network_process+0x468>
 800d726:	6988      	ldr	r0, [r1, #24]
 800d728:	68b2      	ldr	r2, [r6, #8]
 800d72a:	6803      	ldr	r3, [r0, #0]
 800d72c:	f8d2 9000 	ldr.w	r9, [r2]
 800d730:	009d      	lsls	r5, r3, #2
 800d732:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800d736:	d5d7      	bpl.n	800d6e8 <ai_platform_network_process+0x40c>
 800d738:	6881      	ldr	r1, [r0, #8]
 800d73a:	68a2      	ldr	r2, [r4, #8]
 800d73c:	6860      	ldr	r0, [r4, #4]
 800d73e:	f000 ff67 	bl	800e610 <st_int8_copy>
 800d742:	e7da      	b.n	800d6fa <ai_platform_network_process+0x41e>
 800d744:	4658      	mov	r0, fp
 800d746:	f000 fa53 	bl	800dbf0 <ai_layers_forward_all>
 800d74a:	2f00      	cmp	r7, #0
 800d74c:	d03d      	beq.n	800d7ca <ai_platform_network_process+0x4ee>
 800d74e:	2400      	movs	r4, #0
 800d750:	e016      	b.n	800d780 <ai_platform_network_process+0x4a4>
 800d752:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800d756:	f859 100a 	ldr.w	r1, [r9, sl]
 800d75a:	4413      	add	r3, r2
 800d75c:	428b      	cmp	r3, r1
 800d75e:	d302      	bcc.n	800d766 <ai_platform_network_process+0x48a>
 800d760:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d764:	1acb      	subs	r3, r1, r3
 800d766:	f8c8 3004 	str.w	r3, [r8, #4]
 800d76a:	6981      	ldr	r1, [r0, #24]
 800d76c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800d770:	1b52      	subs	r2, r2, r5
 800d772:	4413      	add	r3, r2
 800d774:	608b      	str	r3, [r1, #8]
 800d776:	6983      	ldr	r3, [r0, #24]
 800d778:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d77c:	60da      	str	r2, [r3, #12]
 800d77e:	3401      	adds	r4, #1
 800d780:	883b      	ldrh	r3, [r7, #0]
 800d782:	42a3      	cmp	r3, r4
 800d784:	d921      	bls.n	800d7ca <ai_platform_network_process+0x4ee>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	b1fb      	cbz	r3, 800d7ca <ai_platform_network_process+0x4ee>
 800d78a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d78e:	b1e0      	cbz	r0, 800d7ca <ai_platform_network_process+0x4ee>
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800d796:	6983      	ldr	r3, [r0, #24]
 800d798:	f8d2 9000 	ldr.w	r9, [r2]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800d7a2:	0092      	lsls	r2, r2, #2
 800d7a4:	d5d5      	bpl.n	800d752 <ai_platform_network_process+0x476>
 800d7a6:	6898      	ldr	r0, [r3, #8]
 800d7a8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800d7ac:	f000 ff30 	bl	800e610 <st_int8_copy>
 800d7b0:	f859 200a 	ldr.w	r2, [r9, sl]
 800d7b4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800d7b8:	440b      	add	r3, r1
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d302      	bcc.n	800d7c4 <ai_platform_network_process+0x4e8>
 800d7be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	f8c8 3004 	str.w	r3, [r8, #4]
 800d7c8:	e7d9      	b.n	800d77e <ai_platform_network_process+0x4a2>
 800d7ca:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800d7ce:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800d7d2:	3401      	adds	r4, #1
 800d7d4:	b2a4      	uxth	r4, r4
 800d7d6:	42a3      	cmp	r3, r4
 800d7d8:	f8ab 4016 	strh.w	r4, [fp, #22]
 800d7dc:	f63f af7f 	bhi.w	800d6de <ai_platform_network_process+0x402>
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	b005      	add	sp, #20
 800d7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e8:	2a01      	cmp	r2, #1
 800d7ea:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800d7ec:	d029      	beq.n	800d842 <ai_platform_network_process+0x566>
 800d7ee:	f106 070c 	add.w	r7, r6, #12
 800d7f2:	e770      	b.n	800d6d6 <ai_platform_network_process+0x3fa>
 800d7f4:	2218      	movs	r2, #24
 800d7f6:	2113      	movs	r1, #19
 800d7f8:	f105 0010 	add.w	r0, r5, #16
 800d7fc:	2400      	movs	r4, #0
 800d7fe:	f000 f851 	bl	800d8a4 <core_set_error>
 800d802:	e711      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d804:	9d03      	ldr	r5, [sp, #12]
 800d806:	4604      	mov	r4, r0
 800d808:	2217      	movs	r2, #23
 800d80a:	2112      	movs	r1, #18
 800d80c:	f105 0010 	add.w	r0, r5, #16
 800d810:	f000 f848 	bl	800d8a4 <core_set_error>
 800d814:	e708      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d816:	9d03      	ldr	r5, [sp, #12]
 800d818:	2219      	movs	r2, #25
 800d81a:	2112      	movs	r1, #18
 800d81c:	2400      	movs	r4, #0
 800d81e:	f105 0010 	add.w	r0, r5, #16
 800d822:	f000 f83f 	bl	800d8a4 <core_set_error>
 800d826:	e6ff      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d828:	9d03      	ldr	r5, [sp, #12]
 800d82a:	4604      	mov	r4, r0
 800d82c:	2221      	movs	r2, #33	; 0x21
 800d82e:	2112      	movs	r1, #18
 800d830:	f105 0010 	add.w	r0, r5, #16
 800d834:	f000 f836 	bl	800d8a4 <core_set_error>
 800d838:	e6f6      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d83a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d83e:	82ab      	strh	r3, [r5, #20]
 800d840:	e744      	b.n	800d6cc <ai_platform_network_process+0x3f0>
 800d842:	2700      	movs	r7, #0
 800d844:	e747      	b.n	800d6d6 <ai_platform_network_process+0x3fa>
 800d846:	4604      	mov	r4, r0
 800d848:	2217      	movs	r2, #23
 800d84a:	2113      	movs	r1, #19
 800d84c:	f105 0010 	add.w	r0, r5, #16
 800d850:	f000 f828 	bl	800d8a4 <core_set_error>
 800d854:	e6e8      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d856:	2219      	movs	r2, #25
 800d858:	2113      	movs	r1, #19
 800d85a:	f105 0010 	add.w	r0, r5, #16
 800d85e:	2400      	movs	r4, #0
 800d860:	f000 f820 	bl	800d8a4 <core_set_error>
 800d864:	e6e0      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d866:	4604      	mov	r4, r0
 800d868:	2221      	movs	r2, #33	; 0x21
 800d86a:	2113      	movs	r1, #19
 800d86c:	f105 0010 	add.w	r0, r5, #16
 800d870:	f000 f818 	bl	800d8a4 <core_set_error>
 800d874:	e6d8      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d876:	2217      	movs	r2, #23
 800d878:	2113      	movs	r1, #19
 800d87a:	f105 0010 	add.w	r0, r5, #16
 800d87e:	4654      	mov	r4, sl
 800d880:	f000 f810 	bl	800d8a4 <core_set_error>
 800d884:	e6d0      	b.n	800d628 <ai_platform_network_process+0x34c>
 800d886:	bf00      	nop
 800d888:	58024000 	.word	0x58024000
 800d88c:	f407a5c2 	.word	0xf407a5c2
 800d890:	b5e8b5cd 	.word	0xb5e8b5cd

0800d894 <core_init>:
 800d894:	2001      	movs	r0, #1
 800d896:	4770      	bx	lr

0800d898 <core_get_error>:
 800d898:	4603      	mov	r3, r0
 800d89a:	2200      	movs	r2, #0
 800d89c:	6800      	ldr	r0, [r0, #0]
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop

0800d8a4 <core_set_error>:
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	7800      	ldrb	r0, [r0, #0]
 800d8a8:	b108      	cbz	r0, 800d8ae <core_set_error+0xa>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	4770      	bx	lr
 800d8ae:	7019      	strb	r1, [r3, #0]
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	6819      	ldr	r1, [r3, #0]
 800d8b4:	f362 211f 	bfi	r1, r2, #8, #24
 800d8b8:	6019      	str	r1, [r3, #0]
 800d8ba:	4770      	bx	lr

0800d8bc <node_convert>:
 800d8bc:	6982      	ldr	r2, [r0, #24]
 800d8be:	8813      	ldrh	r3, [r2, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d04a      	beq.n	800d95a <node_convert+0x9e>
 800d8c4:	6852      	ldr	r2, [r2, #4]
 800d8c6:	6850      	ldr	r0, [r2, #4]
 800d8c8:	b100      	cbz	r0, 800d8cc <node_convert+0x10>
 800d8ca:	6800      	ldr	r0, [r0, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	f000 813d 	beq.w	800db4c <node_convert+0x290>
 800d8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d6:	6915      	ldr	r5, [r2, #16]
 800d8d8:	b105      	cbz	r5, 800d8dc <node_convert+0x20>
 800d8da:	682d      	ldr	r5, [r5, #0]
 800d8dc:	6883      	ldr	r3, [r0, #8]
 800d8de:	0a1b      	lsrs	r3, r3, #8
 800d8e0:	f000 80ee 	beq.w	800dac0 <node_convert+0x204>
 800d8e4:	68c1      	ldr	r1, [r0, #12]
 800d8e6:	2401      	movs	r4, #1
 800d8e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d8ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8f0:	4299      	cmp	r1, r3
 800d8f2:	fb02 f404 	mul.w	r4, r2, r4
 800d8f6:	d1f9      	bne.n	800d8ec <node_convert+0x30>
 800d8f8:	6982      	ldr	r2, [r0, #24]
 800d8fa:	69af      	ldr	r7, [r5, #24]
 800d8fc:	6813      	ldr	r3, [r2, #0]
 800d8fe:	f3c3 4143 	ubfx	r1, r3, #17, #4
 800d902:	2901      	cmp	r1, #1
 800d904:	d02b      	beq.n	800d95e <node_convert+0xa2>
 800d906:	6801      	ldr	r1, [r0, #0]
 800d908:	68bd      	ldr	r5, [r7, #8]
 800d90a:	2900      	cmp	r1, #0
 800d90c:	d069      	beq.n	800d9e2 <node_convert+0x126>
 800d90e:	684e      	ldr	r6, [r1, #4]
 800d910:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 800d914:	6892      	ldr	r2, [r2, #8]
 800d916:	2e00      	cmp	r6, #0
 800d918:	f000 80b8 	beq.w	800da8c <node_convert+0x1d0>
 800d91c:	884b      	ldrh	r3, [r1, #2]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 8089 	beq.w	800da36 <node_convert+0x17a>
 800d924:	6833      	ldr	r3, [r6, #0]
 800d926:	ed93 7a00 	vldr	s14, [r3]
 800d92a:	6873      	ldr	r3, [r6, #4]
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f000 80c5 	beq.w	800dabc <node_convert+0x200>
 800d932:	f993 0000 	ldrsb.w	r0, [r3]
 800d936:	b174      	cbz	r4, 800d956 <node_convert+0x9a>
 800d938:	4629      	mov	r1, r5
 800d93a:	4414      	add	r4, r2
 800d93c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800d940:	1a1b      	subs	r3, r3, r0
 800d942:	42a2      	cmp	r2, r4
 800d944:	ee07 3a90 	vmov	s15, r3
 800d948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d94c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d950:	ece1 7a01 	vstmia	r1!, {s15}
 800d954:	d1f2      	bne.n	800d93c <node_convert+0x80>
 800d956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	deff      	udf	#255	; 0xff
 800d95e:	682e      	ldr	r6, [r5, #0]
 800d960:	6895      	ldr	r5, [r2, #8]
 800d962:	2e00      	cmp	r6, #0
 800d964:	f000 80ae 	beq.w	800dac4 <node_convert+0x208>
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	6871      	ldr	r1, [r6, #4]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800d972:	2900      	cmp	r1, #0
 800d974:	d064      	beq.n	800da40 <node_convert+0x184>
 800d976:	8870      	ldrh	r0, [r6, #2]
 800d978:	2800      	cmp	r0, #0
 800d97a:	d067      	beq.n	800da4c <node_convert+0x190>
 800d97c:	6808      	ldr	r0, [r1, #0]
 800d97e:	edd0 7a00 	vldr	s15, [r0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	f000 80d7 	beq.w	800db36 <node_convert+0x27a>
 800d988:	684b      	ldr	r3, [r1, #4]
 800d98a:	f993 3000 	ldrsb.w	r3, [r3]
 800d98e:	ee06 3a90 	vmov	s13, r3
 800d992:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d996:	2c00      	cmp	r4, #0
 800d998:	d0dd      	beq.n	800d956 <node_convert+0x9a>
 800d99a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d99e:	4414      	add	r4, r2
 800d9a0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d9a4:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 800db54 <node_convert+0x298>
 800d9a8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d9ac:	ecb5 7a01 	vldmia	r5!, {s14}
 800d9b0:	eef0 7a66 	vmov.f32	s15, s13
 800d9b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d9b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c0:	bfac      	ite	ge
 800d9c2:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 800d9c6:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 800d9ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9ce:	ee17 3a90 	vmov	r3, s15
 800d9d2:	f303 0307 	ssat	r3, #8, r3
 800d9d6:	f802 3b01 	strb.w	r3, [r2], #1
 800d9da:	42a2      	cmp	r2, r4
 800d9dc:	d1e6      	bne.n	800d9ac <node_convert+0xf0>
 800d9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e2:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800d9e6:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800d9ea:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800d9ee:	6890      	ldr	r0, [r2, #8]
 800d9f0:	1b8e      	subs	r6, r1, r6
 800d9f2:	2908      	cmp	r1, #8
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f106 0640 	add.w	r6, r6, #64	; 0x40
 800d9fc:	eba6 0603 	sub.w	r6, r6, r3
 800da00:	f000 808b 	beq.w	800db1a <node_convert+0x25e>
 800da04:	f001 f846 	bl	800ea94 <arm_q15_to_float>
 800da08:	2e00      	cmp	r6, #0
 800da0a:	d0a4      	beq.n	800d956 <node_convert+0x9a>
 800da0c:	ee07 6a90 	vmov	s15, r6
 800da10:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800da14:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800da18:	f004 f8ba 	bl	8011b90 <powf>
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	d09a      	beq.n	800d956 <node_convert+0x9a>
 800da20:	2300      	movs	r3, #0
 800da22:	ecf5 7a01 	vldmia	r5!, {s15}
 800da26:	3301      	adds	r3, #1
 800da28:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da2c:	429c      	cmp	r4, r3
 800da2e:	ed45 7a01 	vstr	s15, [r5, #-4]
 800da32:	d1f6      	bne.n	800da22 <node_convert+0x166>
 800da34:	e78f      	b.n	800d956 <node_convert+0x9a>
 800da36:	b358      	cbz	r0, 800da90 <node_convert+0x1d4>
 800da38:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800db58 <node_convert+0x29c>
 800da3c:	4618      	mov	r0, r3
 800da3e:	e77a      	b.n	800d936 <node_convert+0x7a>
 800da40:	b133      	cbz	r3, 800da50 <node_convert+0x194>
 800da42:	eddf 6a45 	vldr	s13, [pc, #276]	; 800db58 <node_convert+0x29c>
 800da46:	eef0 7a66 	vmov.f32	s15, s13
 800da4a:	e7a4      	b.n	800d996 <node_convert+0xda>
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1f8      	bne.n	800da42 <node_convert+0x186>
 800da50:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800da54:	eddf 7a40 	vldr	s15, [pc, #256]	; 800db58 <node_convert+0x29c>
 800da58:	2c00      	cmp	r4, #0
 800da5a:	f43f af7c 	beq.w	800d956 <node_convert+0x9a>
 800da5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da62:	4414      	add	r4, r2
 800da64:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800da68:	ecb5 7a01 	vldmia	r5!, {s14}
 800da6c:	eef0 7a66 	vmov.f32	s15, s13
 800da70:	eee7 7a06 	vfma.f32	s15, s14, s12
 800da74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da78:	ee17 3a90 	vmov	r3, s15
 800da7c:	f383 0308 	usat	r3, #8, r3
 800da80:	f802 3b01 	strb.w	r3, [r2], #1
 800da84:	42a2      	cmp	r2, r4
 800da86:	d1ef      	bne.n	800da68 <node_convert+0x1ac>
 800da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d147      	bne.n	800db20 <node_convert+0x264>
 800da90:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800db58 <node_convert+0x29c>
 800da94:	2c00      	cmp	r4, #0
 800da96:	f43f af5e 	beq.w	800d956 <node_convert+0x9a>
 800da9a:	4629      	mov	r1, r5
 800da9c:	4414      	add	r4, r2
 800da9e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800daa2:	1a1b      	subs	r3, r3, r0
 800daa4:	42a2      	cmp	r2, r4
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dab2:	ece1 7a01 	vstmia	r1!, {s15}
 800dab6:	d1f2      	bne.n	800da9e <node_convert+0x1e2>
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	7818      	ldrb	r0, [r3, #0]
 800dabe:	e7e9      	b.n	800da94 <node_convert+0x1d8>
 800dac0:	2401      	movs	r4, #1
 800dac2:	e719      	b.n	800d8f8 <node_convert+0x3c>
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 800daca:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800dace:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800dad2:	eba8 0303 	sub.w	r3, r8, r3
 800dad6:	3340      	adds	r3, #64	; 0x40
 800dad8:	1a9b      	subs	r3, r3, r2
 800dada:	d014      	beq.n	800db06 <node_convert+0x24a>
 800dadc:	425b      	negs	r3, r3
 800dade:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800dae2:	ee00 3a90 	vmov	s1, r3
 800dae6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800daea:	f004 f851 	bl	8011b90 <powf>
 800daee:	b154      	cbz	r4, 800db06 <node_convert+0x24a>
 800daf0:	4633      	mov	r3, r6
 800daf2:	462a      	mov	r2, r5
 800daf4:	ecf2 7a01 	vldmia	r2!, {s15}
 800daf8:	3301      	adds	r3, #1
 800dafa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dafe:	42a3      	cmp	r3, r4
 800db00:	ed42 7a01 	vstr	s15, [r2, #-4]
 800db04:	d1f6      	bne.n	800daf4 <node_convert+0x238>
 800db06:	f1b8 0f08 	cmp.w	r8, #8
 800db0a:	d00d      	beq.n	800db28 <node_convert+0x26c>
 800db0c:	4622      	mov	r2, r4
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	4628      	mov	r0, r5
 800db12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db16:	f000 be3b 	b.w	800e790 <arm_float_to_q15>
 800db1a:	f001 f821 	bl	800eb60 <arm_q7_to_float>
 800db1e:	e773      	b.n	800da08 <node_convert+0x14c>
 800db20:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800db58 <node_convert+0x29c>
 800db24:	4630      	mov	r0, r6
 800db26:	e706      	b.n	800d936 <node_convert+0x7a>
 800db28:	4622      	mov	r2, r4
 800db2a:	68b9      	ldr	r1, [r7, #8]
 800db2c:	4628      	mov	r0, r5
 800db2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db32:	f000 bee3 	b.w	800e8fc <arm_float_to_q7>
 800db36:	684b      	ldr	r3, [r1, #4]
 800db38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	ee06 3a90 	vmov	s13, r3
 800db42:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800db46:	ee76 6a87 	vadd.f32	s13, s13, s14
 800db4a:	e785      	b.n	800da58 <node_convert+0x19c>
 800db4c:	2300      	movs	r3, #0
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	deff      	udf	#255	; 0xff
 800db52:	bf00      	nop
 800db54:	3efffffc 	.word	0x3efffffc
 800db58:	00000000 	.word	0x00000000

0800db5c <ai_check_custom_types>:
 800db5c:	b082      	sub	sp, #8
 800db5e:	4b12      	ldr	r3, [pc, #72]	; (800dba8 <ai_check_custom_types+0x4c>)
 800db60:	9301      	str	r3, [sp, #4]
 800db62:	b118      	cbz	r0, 800db6c <ai_check_custom_types+0x10>
 800db64:	7803      	ldrb	r3, [r0, #0]
 800db66:	2b03      	cmp	r3, #3
 800db68:	d002      	beq.n	800db70 <ai_check_custom_types+0x14>
 800db6a:	2000      	movs	r0, #0
 800db6c:	b002      	add	sp, #8
 800db6e:	4770      	bx	lr
 800db70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db74:	4293      	cmp	r3, r2
 800db76:	d004      	beq.n	800db82 <ai_check_custom_types+0x26>
 800db78:	2001      	movs	r0, #1
 800db7a:	f080 0001 	eor.w	r0, r0, #1
 800db7e:	b002      	add	sp, #8
 800db80:	4770      	bx	lr
 800db82:	7842      	ldrb	r2, [r0, #1]
 800db84:	3001      	adds	r0, #1
 800db86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d1f4      	bne.n	800db78 <ai_check_custom_types+0x1c>
 800db8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800db92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800db96:	429a      	cmp	r2, r3
 800db98:	d1ee      	bne.n	800db78 <ai_check_custom_types+0x1c>
 800db9a:	7842      	ldrb	r2, [r0, #1]
 800db9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d1e9      	bne.n	800db78 <ai_check_custom_types+0x1c>
 800dba4:	2000      	movs	r0, #0
 800dba6:	e7e8      	b.n	800db7a <ai_check_custom_types+0x1e>
 800dba8:	84048403 	.word	0x84048403

0800dbac <ai_layers_init_all>:
 800dbac:	2100      	movs	r1, #0
 800dbae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbb0:	b13b      	cbz	r3, 800dbc2 <ai_layers_init_all+0x16>
 800dbb2:	691a      	ldr	r2, [r3, #16]
 800dbb4:	3101      	adds	r1, #1
 800dbb6:	60d8      	str	r0, [r3, #12]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	4613      	mov	r3, r2
 800dbbc:	d001      	beq.n	800dbc2 <ai_layers_init_all+0x16>
 800dbbe:	2a00      	cmp	r2, #0
 800dbc0:	d1f6      	bne.n	800dbb0 <ai_layers_init_all+0x4>
 800dbc2:	4608      	mov	r0, r1
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop

0800dbc8 <ai_layers_post_init_all>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	2500      	movs	r5, #0
 800dbcc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800dbce:	b16c      	cbz	r4, 800dbec <ai_layers_post_init_all+0x24>
 800dbd0:	6863      	ldr	r3, [r4, #4]
 800dbd2:	07db      	lsls	r3, r3, #31
 800dbd4:	d504      	bpl.n	800dbe0 <ai_layers_post_init_all+0x18>
 800dbd6:	6a23      	ldr	r3, [r4, #32]
 800dbd8:	4620      	mov	r0, r4
 800dbda:	b10b      	cbz	r3, 800dbe0 <ai_layers_post_init_all+0x18>
 800dbdc:	3501      	adds	r5, #1
 800dbde:	4798      	blx	r3
 800dbe0:	6923      	ldr	r3, [r4, #16]
 800dbe2:	42a3      	cmp	r3, r4
 800dbe4:	461c      	mov	r4, r3
 800dbe6:	d001      	beq.n	800dbec <ai_layers_post_init_all+0x24>
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f0      	bne.n	800dbce <ai_layers_post_init_all+0x6>
 800dbec:	4628      	mov	r0, r5
 800dbee:	bd38      	pop	{r3, r4, r5, pc}

0800dbf0 <ai_layers_forward_all>:
 800dbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	f1b8 0f00 	cmp.w	r8, #0
 800dbfe:	d02a      	beq.n	800dc56 <ai_layers_forward_all+0x66>
 800dc00:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800dc02:	6381      	str	r1, [r0, #56]	; 0x38
 800dc04:	b319      	cbz	r1, 800dc4e <ai_layers_forward_all+0x5e>
 800dc06:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dc08:	2001      	movs	r0, #1
 800dc0a:	47c0      	blx	r8
 800dc0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dc0e:	b1f6      	cbz	r6, 800dc4e <ai_layers_forward_all+0x5e>
 800dc10:	2700      	movs	r7, #0
 800dc12:	4631      	mov	r1, r6
 800dc14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dc16:	2002      	movs	r0, #2
 800dc18:	47c0      	blx	r8
 800dc1a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	696b      	ldr	r3, [r5, #20]
 800dc20:	4798      	blx	r3
 800dc22:	692e      	ldr	r6, [r5, #16]
 800dc24:	2003      	movs	r0, #3
 800dc26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dc28:	42b5      	cmp	r5, r6
 800dc2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc2c:	d007      	beq.n	800dc3e <ai_layers_forward_all+0x4e>
 800dc2e:	47c0      	blx	r8
 800dc30:	3701      	adds	r7, #1
 800dc32:	63a6      	str	r6, [r4, #56]	; 0x38
 800dc34:	2e00      	cmp	r6, #0
 800dc36:	d1ec      	bne.n	800dc12 <ai_layers_forward_all+0x22>
 800dc38:	4638      	mov	r0, r7
 800dc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc3e:	2003      	movs	r0, #3
 800dc40:	3701      	adds	r7, #1
 800dc42:	47c0      	blx	r8
 800dc44:	2300      	movs	r3, #0
 800dc46:	4638      	mov	r0, r7
 800dc48:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc4e:	2700      	movs	r7, #0
 800dc50:	4638      	mov	r0, r7
 800dc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc56:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800dc58:	6385      	str	r5, [r0, #56]	; 0x38
 800dc5a:	2d00      	cmp	r5, #0
 800dc5c:	d0f7      	beq.n	800dc4e <ai_layers_forward_all+0x5e>
 800dc5e:	4647      	mov	r7, r8
 800dc60:	696b      	ldr	r3, [r5, #20]
 800dc62:	4628      	mov	r0, r5
 800dc64:	4798      	blx	r3
 800dc66:	462b      	mov	r3, r5
 800dc68:	692d      	ldr	r5, [r5, #16]
 800dc6a:	429d      	cmp	r5, r3
 800dc6c:	d004      	beq.n	800dc78 <ai_layers_forward_all+0x88>
 800dc6e:	3701      	adds	r7, #1
 800dc70:	63a5      	str	r5, [r4, #56]	; 0x38
 800dc72:	2d00      	cmp	r5, #0
 800dc74:	d1f4      	bne.n	800dc60 <ai_layers_forward_all+0x70>
 800dc76:	e7df      	b.n	800dc38 <ai_layers_forward_all+0x48>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	3701      	adds	r7, #1
 800dc7c:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc7e:	e7db      	b.n	800dc38 <ai_layers_forward_all+0x48>

0800dc80 <forward_dense_integer_SSSA>:
 800dc80:	6982      	ldr	r2, [r0, #24]
 800dc82:	8813      	ldrh	r3, [r2, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 80c8 	beq.w	800de1a <forward_dense_integer_SSSA+0x19a>
 800dc8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8e:	6852      	ldr	r2, [r2, #4]
 800dc90:	b093      	sub	sp, #76	; 0x4c
 800dc92:	6854      	ldr	r4, [r2, #4]
 800dc94:	b104      	cbz	r4, 800dc98 <forward_dense_integer_SSSA+0x18>
 800dc96:	6824      	ldr	r4, [r4, #0]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	f000 8161 	beq.w	800df60 <forward_dense_integer_SSSA+0x2e0>
 800dc9e:	6911      	ldr	r1, [r2, #16]
 800dca0:	b101      	cbz	r1, 800dca4 <forward_dense_integer_SSSA+0x24>
 800dca2:	6809      	ldr	r1, [r1, #0]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	f000 815e 	beq.w	800df66 <forward_dense_integer_SSSA+0x2e6>
 800dcaa:	69d5      	ldr	r5, [r2, #28]
 800dcac:	2d00      	cmp	r5, #0
 800dcae:	f000 8108 	beq.w	800dec2 <forward_dense_integer_SSSA+0x242>
 800dcb2:	8b16      	ldrh	r6, [r2, #24]
 800dcb4:	6828      	ldr	r0, [r5, #0]
 800dcb6:	2e01      	cmp	r6, #1
 800dcb8:	f240 812d 	bls.w	800df16 <forward_dense_integer_SSSA+0x296>
 800dcbc:	686d      	ldr	r5, [r5, #4]
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	f000 8154 	beq.w	800df6c <forward_dense_integer_SSSA+0x2ec>
 800dcc4:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800dcc8:	69ab      	ldr	r3, [r5, #24]
 800dcca:	f1b9 0f00 	cmp.w	r9, #0
 800dcce:	f000 810f 	beq.w	800def0 <forward_dense_integer_SSSA+0x270>
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	68e2      	ldr	r2, [r4, #12]
 800dcd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd8:	68cb      	ldr	r3, [r1, #12]
 800dcda:	6856      	ldr	r6, [r2, #4]
 800dcdc:	f8d9 9000 	ldr.w	r9, [r9]
 800dce0:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800dce4:	698d      	ldr	r5, [r1, #24]
 800dce6:	960f      	str	r6, [sp, #60]	; 0x3c
 800dce8:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	fb03 f302 	mul.w	r3, r3, r2
 800dcf2:	b2b2      	uxth	r2, r6
 800dcf4:	930c      	str	r3, [sp, #48]	; 0x30
 800dcf6:	fa1f f38a 	uxth.w	r3, sl
 800dcfa:	f1b9 0f00 	cmp.w	r9, #0
 800dcfe:	d003      	beq.n	800dd08 <forward_dense_integer_SSSA+0x88>
 800dd00:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800dd04:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800dd08:	6827      	ldr	r7, [r4, #0]
 800dd0a:	f8d0 b000 	ldr.w	fp, [r0]
 800dd0e:	680c      	ldr	r4, [r1, #0]
 800dd10:	6981      	ldr	r1, [r0, #24]
 800dd12:	2f00      	cmp	r7, #0
 800dd14:	f000 8083 	beq.w	800de1e <forward_dense_integer_SSSA+0x19e>
 800dd18:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800dd1c:	f1bc 0f00 	cmp.w	ip, #0
 800dd20:	f000 80b1 	beq.w	800de86 <forward_dense_integer_SSSA+0x206>
 800dd24:	8878      	ldrh	r0, [r7, #2]
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f000 809c 	beq.w	800de64 <forward_dense_integer_SSSA+0x1e4>
 800dd2c:	f8dc 6000 	ldr.w	r6, [ip]
 800dd30:	edd6 7a00 	vldr	s15, [r6]
 800dd34:	2c00      	cmp	r4, #0
 800dd36:	f000 809a 	beq.w	800de6e <forward_dense_integer_SSSA+0x1ee>
 800dd3a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dd3e:	f1b8 0f00 	cmp.w	r8, #0
 800dd42:	f000 80a9 	beq.w	800de98 <forward_dense_integer_SSSA+0x218>
 800dd46:	8860      	ldrh	r0, [r4, #2]
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d074      	beq.n	800de36 <forward_dense_integer_SSSA+0x1b6>
 800dd4c:	68ae      	ldr	r6, [r5, #8]
 800dd4e:	f8de 5008 	ldr.w	r5, [lr, #8]
 800dd52:	6889      	ldr	r1, [r1, #8]
 800dd54:	950d      	str	r5, [sp, #52]	; 0x34
 800dd56:	f8d8 5000 	ldr.w	r5, [r8]
 800dd5a:	ed95 0a00 	vldr	s0, [r5]
 800dd5e:	f1bc 0f00 	cmp.w	ip, #0
 800dd62:	d076      	beq.n	800de52 <forward_dense_integer_SSSA+0x1d2>
 800dd64:	8878      	ldrh	r0, [r7, #2]
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f000 80a3 	beq.w	800deb2 <forward_dense_integer_SSSA+0x232>
 800dd6c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800dd70:	f990 7000 	ldrsb.w	r7, [r0]
 800dd74:	2c00      	cmp	r4, #0
 800dd76:	f000 80eb 	beq.w	800df50 <forward_dense_integer_SSSA+0x2d0>
 800dd7a:	f1b8 0f00 	cmp.w	r8, #0
 800dd7e:	f000 809d 	beq.w	800debc <forward_dense_integer_SSSA+0x23c>
 800dd82:	8860      	ldrh	r0, [r4, #2]
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d167      	bne.n	800de58 <forward_dense_integer_SSSA+0x1d8>
 800dd88:	900a      	str	r0, [sp, #40]	; 0x28
 800dd8a:	910e      	str	r1, [sp, #56]	; 0x38
 800dd8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd90:	f1bb 0f00 	cmp.w	fp, #0
 800dd94:	f000 80de 	beq.w	800df54 <forward_dense_integer_SSSA+0x2d4>
 800dd98:	f8db 0004 	ldr.w	r0, [fp, #4]
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	f000 80d9 	beq.w	800df54 <forward_dense_integer_SSSA+0x2d4>
 800dda2:	6800      	ldr	r0, [r0, #0]
 800dda4:	2400      	movs	r4, #0
 800dda6:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800ddaa:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800ddae:	9411      	str	r4, [sp, #68]	; 0x44
 800ddb0:	ed90 7a00 	vldr	s14, [r0]
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddba:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ddbe:	f000 f8db 	bl	800df78 <align_factor>
 800ddc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddc4:	9011      	str	r0, [sp, #68]	; 0x44
 800ddc6:	b32b      	cbz	r3, 800de14 <forward_dense_integer_SSSA+0x194>
 800ddc8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ddcc:	4699      	mov	r9, r3
 800ddce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd0:	fa1f fa8a 	uxth.w	sl, sl
 800ddd4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ddd6:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800ddda:	970d      	str	r7, [sp, #52]	; 0x34
 800dddc:	461f      	mov	r7, r3
 800ddde:	9a08      	ldr	r2, [sp, #32]
 800dde0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dde4:	3401      	adds	r4, #1
 800dde6:	4628      	mov	r0, r5
 800dde8:	9605      	str	r6, [sp, #20]
 800ddea:	9306      	str	r3, [sp, #24]
 800ddec:	4456      	add	r6, sl
 800ddee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddf0:	445d      	add	r5, fp
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddf6:	9303      	str	r3, [sp, #12]
 800ddf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddfa:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800ddfe:	ab11      	add	r3, sp, #68	; 0x44
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	463b      	mov	r3, r7
 800de04:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800de08:	f000 f908 	bl	800e01c <st_sssa8_fully_connected>
 800de0c:	454c      	cmp	r4, r9
 800de0e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800de12:	d1e6      	bne.n	800dde2 <forward_dense_integer_SSSA+0x162>
 800de14:	b013      	add	sp, #76	; 0x4c
 800de16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	deff      	udf	#255	; 0xff
 800de1e:	2c00      	cmp	r4, #0
 800de20:	d056      	beq.n	800ded0 <forward_dense_integer_SSSA+0x250>
 800de22:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800de26:	f1b8 0f00 	cmp.w	r8, #0
 800de2a:	d05d      	beq.n	800dee8 <forward_dense_integer_SSSA+0x268>
 800de2c:	8860      	ldrh	r0, [r4, #2]
 800de2e:	2800      	cmp	r0, #0
 800de30:	d173      	bne.n	800df1a <forward_dense_integer_SSSA+0x29a>
 800de32:	eddf 7a50 	vldr	s15, [pc, #320]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800de36:	68ae      	ldr	r6, [r5, #8]
 800de38:	f8de 5008 	ldr.w	r5, [lr, #8]
 800de3c:	6889      	ldr	r1, [r1, #8]
 800de3e:	950d      	str	r5, [sp, #52]	; 0x34
 800de40:	2f00      	cmp	r7, #0
 800de42:	d041      	beq.n	800dec8 <forward_dense_integer_SSSA+0x248>
 800de44:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800de48:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800de4c:	f1bc 0f00 	cmp.w	ip, #0
 800de50:	d188      	bne.n	800dd64 <forward_dense_integer_SSSA+0xe4>
 800de52:	4667      	mov	r7, ip
 800de54:	2800      	cmp	r0, #0
 800de56:	d097      	beq.n	800dd88 <forward_dense_integer_SSSA+0x108>
 800de58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800de5c:	f990 0000 	ldrsb.w	r0, [r0]
 800de60:	900a      	str	r0, [sp, #40]	; 0x28
 800de62:	e792      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800de64:	eddf 7a43 	vldr	s15, [pc, #268]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800de68:	2c00      	cmp	r4, #0
 800de6a:	f47f af66 	bne.w	800dd3a <forward_dense_integer_SSSA+0xba>
 800de6e:	68ae      	ldr	r6, [r5, #8]
 800de70:	f8de 5008 	ldr.w	r5, [lr, #8]
 800de74:	6889      	ldr	r1, [r1, #8]
 800de76:	950d      	str	r5, [sp, #52]	; 0x34
 800de78:	2800      	cmp	r0, #0
 800de7a:	d15a      	bne.n	800df32 <forward_dense_integer_SSSA+0x2b2>
 800de7c:	4607      	mov	r7, r0
 800de7e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800de82:	900a      	str	r0, [sp, #40]	; 0x28
 800de84:	e781      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800de86:	b31c      	cbz	r4, 800ded0 <forward_dense_integer_SSSA+0x250>
 800de88:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800de8c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800de90:	f1b8 0f00 	cmp.w	r8, #0
 800de94:	f47f af57 	bne.w	800dd46 <forward_dense_integer_SSSA+0xc6>
 800de98:	f8de 0008 	ldr.w	r0, [lr, #8]
 800de9c:	68ae      	ldr	r6, [r5, #8]
 800de9e:	6889      	ldr	r1, [r1, #8]
 800dea0:	900d      	str	r0, [sp, #52]	; 0x34
 800dea2:	f1bc 0f00 	cmp.w	ip, #0
 800dea6:	d00e      	beq.n	800dec6 <forward_dense_integer_SSSA+0x246>
 800dea8:	8878      	ldrh	r0, [r7, #2]
 800deaa:	2800      	cmp	r0, #0
 800deac:	d149      	bne.n	800df42 <forward_dense_integer_SSSA+0x2c2>
 800deae:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800deb2:	2700      	movs	r7, #0
 800deb4:	f1b8 0f00 	cmp.w	r8, #0
 800deb8:	f47f af63 	bne.w	800dd82 <forward_dense_integer_SSSA+0x102>
 800debc:	2000      	movs	r0, #0
 800debe:	900a      	str	r0, [sp, #40]	; 0x28
 800dec0:	e763      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800dec2:	4628      	mov	r0, r5
 800dec4:	e6fb      	b.n	800dcbe <forward_dense_integer_SSSA+0x3e>
 800dec6:	4667      	mov	r7, ip
 800dec8:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800decc:	970a      	str	r7, [sp, #40]	; 0x28
 800dece:	e75c      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800ded0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800ded4:	4627      	mov	r7, r4
 800ded6:	f8de 0008 	ldr.w	r0, [lr, #8]
 800deda:	eeb0 0a67 	vmov.f32	s0, s15
 800dede:	68ae      	ldr	r6, [r5, #8]
 800dee0:	6889      	ldr	r1, [r1, #8]
 800dee2:	900d      	str	r0, [sp, #52]	; 0x34
 800dee4:	970a      	str	r7, [sp, #40]	; 0x28
 800dee6:	e750      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800dee8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800deec:	4647      	mov	r7, r8
 800deee:	e7f2      	b.n	800ded6 <forward_dense_integer_SSSA+0x256>
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	68e2      	ldr	r2, [r4, #12]
 800def4:	930b      	str	r3, [sp, #44]	; 0x2c
 800def6:	68cb      	ldr	r3, [r1, #12]
 800def8:	6856      	ldr	r6, [r2, #4]
 800defa:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800defe:	698d      	ldr	r5, [r1, #24]
 800df00:	960f      	str	r6, [sp, #60]	; 0x3c
 800df02:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	fb03 f302 	mul.w	r3, r3, r2
 800df0c:	b2b2      	uxth	r2, r6
 800df0e:	930c      	str	r3, [sp, #48]	; 0x30
 800df10:	fa1f f38a 	uxth.w	r3, sl
 800df14:	e6f8      	b.n	800dd08 <forward_dense_integer_SSSA+0x88>
 800df16:	2500      	movs	r5, #0
 800df18:	e6d1      	b.n	800dcbe <forward_dense_integer_SSSA+0x3e>
 800df1a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800df1e:	68ae      	ldr	r6, [r5, #8]
 800df20:	900d      	str	r0, [sp, #52]	; 0x34
 800df22:	f8d8 0000 	ldr.w	r0, [r8]
 800df26:	6889      	ldr	r1, [r1, #8]
 800df28:	eddf 7a12 	vldr	s15, [pc, #72]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800df2c:	ed90 0a00 	vldr	s0, [r0]
 800df30:	e792      	b.n	800de58 <forward_dense_integer_SSSA+0x1d8>
 800df32:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800df36:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800df3a:	f990 7000 	ldrsb.w	r7, [r0]
 800df3e:	940a      	str	r4, [sp, #40]	; 0x28
 800df40:	e723      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800df42:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800df46:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800df74 <forward_dense_integer_SSSA+0x2f4>
 800df4a:	f990 7000 	ldrsb.w	r7, [r0]
 800df4e:	e7b5      	b.n	800debc <forward_dense_integer_SSSA+0x23c>
 800df50:	940a      	str	r4, [sp, #40]	; 0x28
 800df52:	e71a      	b.n	800dd8a <forward_dense_integer_SSSA+0x10a>
 800df54:	2300      	movs	r3, #0
 800df56:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800df5a:	9311      	str	r3, [sp, #68]	; 0x44
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	deff      	udf	#255	; 0xff
 800df60:	2300      	movs	r3, #0
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	deff      	udf	#255	; 0xff
 800df66:	2300      	movs	r3, #0
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	deff      	udf	#255	; 0xff
 800df6c:	2300      	movs	r3, #0
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	deff      	udf	#255	; 0xff
 800df72:	bf00      	nop
 800df74:	00000000 	.word	0x00000000

0800df78 <align_factor>:
 800df78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df7c:	4602      	mov	r2, r0
 800df7e:	b508      	push	{r3, lr}
 800df80:	eeb4 0a67 	vcmp.f32	s0, s15
 800df84:	2300      	movs	r3, #0
 800df86:	8003      	strh	r3, [r0, #0]
 800df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df8c:	d524      	bpl.n	800dfd8 <align_factor+0x60>
 800df8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df96:	dd1f      	ble.n	800dfd8 <align_factor+0x60>
 800df98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df9c:	2301      	movs	r3, #1
 800df9e:	e005      	b.n	800dfac <align_factor+0x34>
 800dfa0:	8013      	strh	r3, [r2, #0]
 800dfa2:	b28b      	uxth	r3, r1
 800dfa4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dfa8:	2b21      	cmp	r3, #33	; 0x21
 800dfaa:	d02b      	beq.n	800e004 <align_factor+0x8c>
 800dfac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dfb0:	1c59      	adds	r1, r3, #1
 800dfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb6:	d4f3      	bmi.n	800dfa0 <align_factor+0x28>
 800dfb8:	eddf 7a17 	vldr	s15, [pc, #92]	; 800e018 <align_factor+0xa0>
 800dfbc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dfc0:	ee17 0a90 	vmov	r0, s15
 800dfc4:	f7f2 fe38 	bl	8000c38 <__aeabi_f2lz>
 800dfc8:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800dfcc:	d003      	beq.n	800dfd6 <align_factor+0x5e>
 800dfce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800dfd2:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800dfd6:	bd08      	pop	{r3, pc}
 800dfd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dfdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfe0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dfe4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800dfe8:	e005      	b.n	800dff6 <align_factor+0x7e>
 800dfea:	8013      	strh	r3, [r2, #0]
 800dfec:	b28b      	uxth	r3, r1
 800dfee:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dff2:	4283      	cmp	r3, r0
 800dff4:	d00a      	beq.n	800e00c <align_factor+0x94>
 800dff6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dffa:	1e59      	subs	r1, r3, #1
 800dffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e000:	dcf3      	bgt.n	800dfea <align_factor+0x72>
 800e002:	e7d9      	b.n	800dfb8 <align_factor+0x40>
 800e004:	2300      	movs	r3, #0
 800e006:	4618      	mov	r0, r3
 800e008:	8013      	strh	r3, [r2, #0]
 800e00a:	bd08      	pop	{r3, pc}
 800e00c:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800e010:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e014:	8013      	strh	r3, [r2, #0]
 800e016:	e7cf      	b.n	800dfb8 <align_factor+0x40>
 800e018:	4f000000 	.word	0x4f000000

0800e01c <st_sssa8_fully_connected>:
 800e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e020:	b097      	sub	sp, #92	; 0x5c
 800e022:	460d      	mov	r5, r1
 800e024:	4683      	mov	fp, r0
 800e026:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e028:	9313      	str	r3, [sp, #76]	; 0x4c
 800e02a:	6823      	ldr	r3, [r4, #0]
 800e02c:	9203      	str	r2, [sp, #12]
 800e02e:	9307      	str	r3, [sp, #28]
 800e030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e032:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800e036:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e03a:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800e03e:	1e4a      	subs	r2, r1, #1
 800e040:	9104      	str	r1, [sp, #16]
 800e042:	920d      	str	r2, [sp, #52]	; 0x34
 800e044:	b292      	uxth	r2, r2
 800e046:	2a14      	cmp	r2, #20
 800e048:	f200 81b3 	bhi.w	800e3b2 <st_sssa8_fully_connected+0x396>
 800e04c:	2201      	movs	r2, #1
 800e04e:	408b      	lsls	r3, r1
 800e050:	408a      	lsls	r2, r1
 800e052:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e056:	9308      	str	r3, [sp, #32]
 800e058:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f000 81ae 	beq.w	800e3bc <st_sssa8_fully_connected+0x3a0>
 800e060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e062:	b2b3      	uxth	r3, r6
 800e064:	9600      	str	r6, [sp, #0]
 800e066:	4658      	mov	r0, fp
 800e068:	0851      	lsrs	r1, r2, #1
 800e06a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e06e:	9e03      	ldr	r6, [sp, #12]
 800e070:	460c      	mov	r4, r1
 800e072:	9115      	str	r1, [sp, #84]	; 0x54
 800e074:	4632      	mov	r2, r6
 800e076:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e078:	f000 fb52 	bl	800e720 <st_int8_reordered_no_shift_zero>
 800e07c:	4621      	mov	r1, r4
 800e07e:	2c00      	cmp	r4, #0
 800e080:	f000 8145 	beq.w	800e30e <st_sssa8_fully_connected+0x2f2>
 800e084:	4634      	mov	r4, r6
 800e086:	f1a6 0310 	sub.w	r3, r6, #16
 800e08a:	9e04      	ldr	r6, [sp, #16]
 800e08c:	1e4a      	subs	r2, r1, #1
 800e08e:	2001      	movs	r0, #1
 800e090:	091b      	lsrs	r3, r3, #4
 800e092:	1eb1      	subs	r1, r6, #2
 800e094:	b292      	uxth	r2, r2
 800e096:	3301      	adds	r3, #1
 800e098:	fa00 f101 	lsl.w	r1, r0, r1
 800e09c:	9112      	str	r1, [sp, #72]	; 0x48
 800e09e:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e0a0:	3110      	adds	r1, #16
 800e0a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e0a6:	920e      	str	r2, [sp, #56]	; 0x38
 800e0a8:	1ee2      	subs	r2, r4, #3
 800e0aa:	920f      	str	r2, [sp, #60]	; 0x3c
 800e0ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e0ae:	3208      	adds	r2, #8
 800e0b0:	9205      	str	r2, [sp, #20]
 800e0b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e0b4:	3202      	adds	r2, #2
 800e0b6:	9206      	str	r2, [sp, #24]
 800e0b8:	011a      	lsls	r2, r3, #4
 800e0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e0bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e0be:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800e0c2:	9310      	str	r3, [sp, #64]	; 0x40
 800e0c4:	1f23      	subs	r3, r4, #4
 800e0c6:	9311      	str	r3, [sp, #68]	; 0x44
 800e0c8:	1b83      	subs	r3, r0, r6
 800e0ca:	9314      	str	r3, [sp, #80]	; 0x50
 800e0cc:	9a03      	ldr	r2, [sp, #12]
 800e0ce:	9b05      	ldr	r3, [sp, #20]
 800e0d0:	2a0f      	cmp	r2, #15
 800e0d2:	eb05 0b02 	add.w	fp, r5, r2
 800e0d6:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800e0da:	f340 8260 	ble.w	800e59e <st_sssa8_fully_connected+0x582>
 800e0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0e0:	465c      	mov	r4, fp
 800e0e2:	18ae      	adds	r6, r5, r2
 800e0e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e0e6:	682f      	ldr	r7, [r5, #0]
 800e0e8:	f8d4 a000 	ldr.w	sl, [r4]
 800e0ec:	ea4f 2037 	mov.w	r0, r7, ror #8
 800e0f0:	f8d2 9000 	ldr.w	r9, [r2]
 800e0f4:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800e0f8:	fa2f f080 	sxtb16	r0, r0
 800e0fc:	fa2f fc8e 	sxtb16	ip, lr
 800e100:	fa2f f787 	sxtb16	r7, r7
 800e104:	fa2f fe8a 	sxtb16	lr, sl
 800e108:	fb29 1107 	smlad	r1, r9, r7, r1
 800e10c:	fb29 390e 	smlad	r9, r9, lr, r3
 800e110:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800e114:	fb28 1100 	smlad	r1, r8, r0, r1
 800e118:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800e11c:	6868      	ldr	r0, [r5, #4]
 800e11e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e122:	ea4f 2330 	mov.w	r3, r0, ror #8
 800e126:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800e12a:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800e12e:	fa2f f383 	sxtb16	r3, r3
 800e132:	fa2f f78a 	sxtb16	r7, sl
 800e136:	fa2f f080 	sxtb16	r0, r0
 800e13a:	fa2f fa89 	sxtb16	sl, r9
 800e13e:	fb28 1000 	smlad	r0, r8, r0, r1
 800e142:	fb28 e80a 	smlad	r8, r8, sl, lr
 800e146:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800e14a:	fb2c 0003 	smlad	r0, ip, r3, r0
 800e14e:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800e152:	68ab      	ldr	r3, [r5, #8]
 800e154:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e158:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e15c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e160:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800e164:	fa2f f181 	sxtb16	r1, r1
 800e168:	fa2f f98e 	sxtb16	r9, lr
 800e16c:	fa2f f383 	sxtb16	r3, r3
 800e170:	fa2f fe88 	sxtb16	lr, r8
 800e174:	fb2c 0303 	smlad	r3, ip, r3, r0
 800e178:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800e17c:	6957      	ldr	r7, [r2, #20]
 800e17e:	fb27 3301 	smlad	r3, r7, r1, r3
 800e182:	fb27 ce09 	smlad	lr, r7, r9, ip
 800e186:	68e8      	ldr	r0, [r5, #12]
 800e188:	3410      	adds	r4, #16
 800e18a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800e18e:	3510      	adds	r5, #16
 800e190:	ea4f 2130 	mov.w	r1, r0, ror #8
 800e194:	6997      	ldr	r7, [r2, #24]
 800e196:	fa2f f881 	sxtb16	r8, r1
 800e19a:	fa2f f180 	sxtb16	r1, r0
 800e19e:	ea4f 203c 	mov.w	r0, ip, ror #8
 800e1a2:	fa2f fc8c 	sxtb16	ip, ip
 800e1a6:	fa2f f080 	sxtb16	r0, r0
 800e1aa:	fb27 3101 	smlad	r1, r7, r1, r3
 800e1ae:	fb27 e70c 	smlad	r7, r7, ip, lr
 800e1b2:	69d3      	ldr	r3, [r2, #28]
 800e1b4:	3220      	adds	r2, #32
 800e1b6:	fb23 1108 	smlad	r1, r3, r8, r1
 800e1ba:	fb23 7300 	smlad	r3, r3, r0, r7
 800e1be:	42b5      	cmp	r5, r6
 800e1c0:	d191      	bne.n	800e0e6 <st_sssa8_fully_connected+0xca>
 800e1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1c4:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e1c8:	4493      	add	fp, r2
 800e1ca:	4691      	mov	r9, r2
 800e1cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1ce:	4591      	cmp	r9, r2
 800e1d0:	f280 81e3 	bge.w	800e59a <st_sssa8_fully_connected+0x57e>
 800e1d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e1d6:	4657      	mov	r7, sl
 800e1d8:	46d8      	mov	r8, fp
 800e1da:	eba2 0209 	sub.w	r2, r2, r9
 800e1de:	0892      	lsrs	r2, r2, #2
 800e1e0:	920c      	str	r2, [sp, #48]	; 0x30
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	0090      	lsls	r0, r2, #2
 800e1e6:	920b      	str	r2, [sp, #44]	; 0x2c
 800e1e8:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800e1ec:	900a      	str	r0, [sp, #40]	; 0x28
 800e1ee:	f856 eb04 	ldr.w	lr, [r6], #4
 800e1f2:	f858 0b04 	ldr.w	r0, [r8], #4
 800e1f6:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	ea4f 2530 	mov.w	r5, r0, ror #8
 800e200:	fa2f fc8c 	sxtb16	ip, ip
 800e204:	fa2f fe8e 	sxtb16	lr, lr
 800e208:	fa2f f585 	sxtb16	r5, r5
 800e20c:	fa2f f080 	sxtb16	r0, r0
 800e210:	fb22 110e 	smlad	r1, r2, lr, r1
 800e214:	fb22 3300 	smlad	r3, r2, r0, r3
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	3708      	adds	r7, #8
 800e21c:	fb22 110c 	smlad	r1, r2, ip, r1
 800e220:	fb22 3305 	smlad	r3, r2, r5, r3
 800e224:	42a6      	cmp	r6, r4
 800e226:	d1e2      	bne.n	800e1ee <st_sssa8_fully_connected+0x1d2>
 800e228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e22a:	f109 0904 	add.w	r9, r9, #4
 800e22e:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800e232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e234:	4493      	add	fp, r2
 800e236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e238:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800e23c:	9d03      	ldr	r5, [sp, #12]
 800e23e:	454d      	cmp	r5, r9
 800e240:	dd37      	ble.n	800e2b2 <st_sssa8_fully_connected+0x296>
 800e242:	f9ba 2000 	ldrsh.w	r2, [sl]
 800e246:	f994 0000 	ldrsb.w	r0, [r4]
 800e24a:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e24e:	f99b 0000 	ldrsb.w	r0, [fp]
 800e252:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e256:	f109 0201 	add.w	r2, r9, #1
 800e25a:	42aa      	cmp	r2, r5
 800e25c:	da25      	bge.n	800e2aa <st_sssa8_fully_connected+0x28e>
 800e25e:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800e262:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e266:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e26a:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800e26e:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e272:	f109 0202 	add.w	r2, r9, #2
 800e276:	42aa      	cmp	r2, r5
 800e278:	da17      	bge.n	800e2aa <st_sssa8_fully_connected+0x28e>
 800e27a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800e27e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e282:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e286:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800e28a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e28e:	f109 0203 	add.w	r2, r9, #3
 800e292:	4295      	cmp	r5, r2
 800e294:	dd09      	ble.n	800e2aa <st_sssa8_fully_connected+0x28e>
 800e296:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800e29a:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800e29e:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e2a2:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800e2a6:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e2aa:	9a03      	ldr	r2, [sp, #12]
 800e2ac:	eba2 0909 	sub.w	r9, r2, r9
 800e2b0:	444c      	add	r4, r9
 800e2b2:	9a04      	ldr	r2, [sp, #16]
 800e2b4:	2a15      	cmp	r2, #21
 800e2b6:	f340 8140 	ble.w	800e53a <st_sssa8_fully_connected+0x51e>
 800e2ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e2bc:	9a07      	ldr	r2, [sp, #28]
 800e2be:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e2c0:	fb51 0102 	smmla	r1, r1, r2, r0
 800e2c4:	fb53 0302 	smmla	r3, r3, r2, r0
 800e2c8:	4129      	asrs	r1, r5
 800e2ca:	9a08      	ldr	r2, [sp, #32]
 800e2cc:	4411      	add	r1, r2
 800e2ce:	f301 0107 	ssat	r1, #8, r1
 800e2d2:	9806      	ldr	r0, [sp, #24]
 800e2d4:	412b      	asrs	r3, r5
 800e2d6:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f303 0307 	ssat	r3, #8, r3
 800e2e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e2e4:	9a03      	ldr	r2, [sp, #12]
 800e2e6:	9b05      	ldr	r3, [sp, #20]
 800e2e8:	18a5      	adds	r5, r4, r2
 800e2ea:	9a06      	ldr	r2, [sp, #24]
 800e2ec:	3308      	adds	r3, #8
 800e2ee:	3202      	adds	r2, #2
 800e2f0:	9305      	str	r3, [sp, #20]
 800e2f2:	9206      	str	r2, [sp, #24]
 800e2f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	f47f aee8 	bne.w	800e0cc <st_sssa8_fully_connected+0xb0>
 800e2fc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e300:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e304:	9225      	str	r2, [sp, #148]	; 0x94
 800e306:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e308:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e30c:	9324      	str	r3, [sp, #144]	; 0x90
 800e30e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e310:	07db      	lsls	r3, r3, #31
 800e312:	d54a      	bpl.n	800e3aa <st_sssa8_fully_connected+0x38e>
 800e314:	9a03      	ldr	r2, [sp, #12]
 800e316:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e318:	0897      	lsrs	r7, r2, #2
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f000 8175 	beq.w	800e60a <st_sssa8_fully_connected+0x5ee>
 800e320:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800e324:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e326:	f855 2b04 	ldr.w	r2, [r5], #4
 800e32a:	6801      	ldr	r1, [r0, #0]
 800e32c:	fa2f f482 	sxtb16	r4, r2
 800e330:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e334:	fa2f f282 	sxtb16	r2, r2
 800e338:	fb21 3304 	smlad	r3, r1, r4, r3
 800e33c:	6841      	ldr	r1, [r0, #4]
 800e33e:	3008      	adds	r0, #8
 800e340:	fb21 3302 	smlad	r3, r1, r2, r3
 800e344:	42b5      	cmp	r5, r6
 800e346:	d1ee      	bne.n	800e326 <st_sssa8_fully_connected+0x30a>
 800e348:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e34a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800e34e:	9226      	str	r2, [sp, #152]	; 0x98
 800e350:	9a03      	ldr	r2, [sp, #12]
 800e352:	f012 0203 	ands.w	r2, r2, #3
 800e356:	d016      	beq.n	800e386 <st_sssa8_fully_connected+0x36a>
 800e358:	3a01      	subs	r2, #1
 800e35a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e35c:	f996 1000 	ldrsb.w	r1, [r6]
 800e360:	8800      	ldrh	r0, [r0, #0]
 800e362:	b292      	uxth	r2, r2
 800e364:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e368:	b16a      	cbz	r2, 800e386 <st_sssa8_fully_connected+0x36a>
 800e36a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e36c:	2a01      	cmp	r2, #1
 800e36e:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800e372:	8840      	ldrh	r0, [r0, #2]
 800e374:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e378:	d005      	beq.n	800e386 <st_sssa8_fully_connected+0x36a>
 800e37a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e37c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800e380:	8889      	ldrh	r1, [r1, #4]
 800e382:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e386:	9a04      	ldr	r2, [sp, #16]
 800e388:	2a15      	cmp	r2, #21
 800e38a:	f340 811c 	ble.w	800e5c6 <st_sssa8_fully_connected+0x5aa>
 800e38e:	1e91      	subs	r1, r2, #2
 800e390:	2201      	movs	r2, #1
 800e392:	408a      	lsls	r2, r1
 800e394:	9907      	ldr	r1, [sp, #28]
 800e396:	fb53 2301 	smmla	r3, r3, r1, r2
 800e39a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e39c:	4113      	asrs	r3, r2
 800e39e:	9a08      	ldr	r2, [sp, #32]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	f303 0307 	ssat	r3, #8, r3
 800e3a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e3a8:	7013      	strb	r3, [r2, #0]
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	b017      	add	sp, #92	; 0x5c
 800e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b2:	9308      	str	r3, [sp, #32]
 800e3b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f47f ae52 	bne.w	800e060 <st_sssa8_fully_connected+0x44>
 800e3bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e3be:	4270      	negs	r0, r6
 800e3c0:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d0f0      	beq.n	800e3aa <st_sssa8_fully_connected+0x38e>
 800e3c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	9903      	ldr	r1, [sp, #12]
 800e3ce:	b236      	sxth	r6, r6
 800e3d0:	18d3      	adds	r3, r2, r3
 800e3d2:	9c04      	ldr	r4, [sp, #16]
 800e3d4:	f1a1 0810 	sub.w	r8, r1, #16
 800e3d8:	f102 0e01 	add.w	lr, r2, #1
 800e3dc:	9305      	str	r3, [sp, #20]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f028 080f 	bic.w	r8, r8, #15
 800e3e4:	1ea3      	subs	r3, r4, #2
 800e3e6:	468c      	mov	ip, r1
 800e3e8:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800e3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f0:	f108 0810 	add.w	r8, r8, #16
 800e3f4:	f1bc 0f0f 	cmp.w	ip, #15
 800e3f8:	f8cd b00c 	str.w	fp, [sp, #12]
 800e3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e3fe:	eb0b 0308 	add.w	r3, fp, r8
 800e402:	9306      	str	r3, [sp, #24]
 800e404:	eba2 0304 	sub.w	r3, r2, r4
 800e408:	930a      	str	r3, [sp, #40]	; 0x28
 800e40a:	f859 3b04 	ldr.w	r3, [r9], #4
 800e40e:	dd7e      	ble.n	800e50e <st_sssa8_fully_connected+0x4f2>
 800e410:	eb05 0708 	add.w	r7, r5, r8
 800e414:	462a      	mov	r2, r5
 800e416:	9d03      	ldr	r5, [sp, #12]
 800e418:	6811      	ldr	r1, [r2, #0]
 800e41a:	682c      	ldr	r4, [r5, #0]
 800e41c:	fa2f fb81 	sxtb16	fp, r1
 800e420:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800e424:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e428:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e42c:	fa2f f181 	sxtb16	r1, r1
 800e430:	fa20 f484 	sxtab16	r4, r0, r4
 800e434:	fb24 340b 	smlad	r4, r4, fp, r3
 800e438:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800e43c:	6851      	ldr	r1, [r2, #4]
 800e43e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800e442:	fa2f f481 	sxtb16	r4, r1
 800e446:	ea4f 233a 	mov.w	r3, sl, ror #8
 800e44a:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e44e:	fa20 f383 	sxtab16	r3, r0, r3
 800e452:	fa2f f181 	sxtb16	r1, r1
 800e456:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e45a:	fb2a ba04 	smlad	sl, sl, r4, fp
 800e45e:	fb23 a401 	smlad	r4, r3, r1, sl
 800e462:	6891      	ldr	r1, [r2, #8]
 800e464:	68ab      	ldr	r3, [r5, #8]
 800e466:	fa2f fb81 	sxtb16	fp, r1
 800e46a:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800e46e:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e472:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e476:	fa2f f181 	sxtb16	r1, r1
 800e47a:	fa20 f383 	sxtab16	r3, r0, r3
 800e47e:	fb23 430b 	smlad	r3, r3, fp, r4
 800e482:	fb2a 3301 	smlad	r3, sl, r1, r3
 800e486:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800e48a:	3510      	adds	r5, #16
 800e48c:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800e490:	3210      	adds	r2, #16
 800e492:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800e496:	ea4f 2431 	mov.w	r4, r1, ror #8
 800e49a:	fa2f fa8a 	sxtb16	sl, sl
 800e49e:	fa2f fb8b 	sxtb16	fp, fp
 800e4a2:	fa20 f181 	sxtab16	r1, r0, r1
 800e4a6:	fa20 f484 	sxtab16	r4, r0, r4
 800e4aa:	fb21 330a 	smlad	r3, r1, sl, r3
 800e4ae:	fb24 330b 	smlad	r3, r4, fp, r3
 800e4b2:	4297      	cmp	r7, r2
 800e4b4:	d1b0      	bne.n	800e418 <st_sssa8_fully_connected+0x3fc>
 800e4b6:	4645      	mov	r5, r8
 800e4b8:	9f06      	ldr	r7, [sp, #24]
 800e4ba:	45ac      	cmp	ip, r5
 800e4bc:	dd2c      	ble.n	800e518 <st_sssa8_fully_connected+0x4fc>
 800e4be:	ebac 0505 	sub.w	r5, ip, r5
 800e4c2:	4415      	add	r5, r2
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800e4ca:	3201      	adds	r2, #1
 800e4cc:	7809      	ldrb	r1, [r1, #0]
 800e4ce:	1ba4      	subs	r4, r4, r6
 800e4d0:	42aa      	cmp	r2, r5
 800e4d2:	b249      	sxtb	r1, r1
 800e4d4:	fb14 3301 	smlabb	r3, r4, r1, r3
 800e4d8:	d1f4      	bne.n	800e4c4 <st_sssa8_fully_connected+0x4a8>
 800e4da:	9a04      	ldr	r2, [sp, #16]
 800e4dc:	2a15      	cmp	r2, #21
 800e4de:	dd1f      	ble.n	800e520 <st_sssa8_fully_connected+0x504>
 800e4e0:	9a07      	ldr	r2, [sp, #28]
 800e4e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4e4:	fb53 1302 	smmla	r3, r3, r2, r1
 800e4e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4ea:	4113      	asrs	r3, r2
 800e4ec:	9a08      	ldr	r2, [sp, #32]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f303 0307 	ssat	r3, #8, r3
 800e4f4:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e4f8:	f10e 0e01 	add.w	lr, lr, #1
 800e4fc:	9b05      	ldr	r3, [sp, #20]
 800e4fe:	459e      	cmp	lr, r3
 800e500:	f43f af53 	beq.w	800e3aa <st_sssa8_fully_connected+0x38e>
 800e504:	f1bc 0f0f 	cmp.w	ip, #15
 800e508:	f859 3b04 	ldr.w	r3, [r9], #4
 800e50c:	dc80      	bgt.n	800e410 <st_sssa8_fully_connected+0x3f4>
 800e50e:	462a      	mov	r2, r5
 800e510:	2500      	movs	r5, #0
 800e512:	9f03      	ldr	r7, [sp, #12]
 800e514:	45ac      	cmp	ip, r5
 800e516:	dcd2      	bgt.n	800e4be <st_sssa8_fully_connected+0x4a2>
 800e518:	4615      	mov	r5, r2
 800e51a:	9a04      	ldr	r2, [sp, #16]
 800e51c:	2a15      	cmp	r2, #21
 800e51e:	dcdf      	bgt.n	800e4e0 <st_sssa8_fully_connected+0x4c4>
 800e520:	2a00      	cmp	r2, #0
 800e522:	dd42      	ble.n	800e5aa <st_sssa8_fully_connected+0x58e>
 800e524:	005b      	lsls	r3, r3, #1
 800e526:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800e52a:	fb53 4301 	smmla	r3, r3, r1, r4
 800e52e:	4113      	asrs	r3, r2
 800e530:	f303 0307 	ssat	r3, #8, r3
 800e534:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e538:	e7de      	b.n	800e4f8 <st_sssa8_fully_connected+0x4dc>
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	dd13      	ble.n	800e566 <st_sssa8_fully_connected+0x54a>
 800e53e:	0049      	lsls	r1, r1, #1
 800e540:	005b      	lsls	r3, r3, #1
 800e542:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800e546:	fb51 5100 	smmla	r1, r1, r0, r5
 800e54a:	fb53 5300 	smmla	r3, r3, r0, r5
 800e54e:	4111      	asrs	r1, r2
 800e550:	f301 0107 	ssat	r1, #8, r1
 800e554:	9806      	ldr	r0, [sp, #24]
 800e556:	4113      	asrs	r3, r2
 800e558:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e55c:	f303 0307 	ssat	r3, #8, r3
 800e560:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e564:	e6be      	b.n	800e2e4 <st_sssa8_fully_connected+0x2c8>
 800e566:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e568:	fa01 f200 	lsl.w	r2, r1, r0
 800e56c:	f302 021f 	ssat	r2, #32, r2
 800e570:	9907      	ldr	r1, [sp, #28]
 800e572:	fb52 f211 	smmulr	r2, r2, r1
 800e576:	4083      	lsls	r3, r0
 800e578:	f303 031f 	ssat	r3, #32, r3
 800e57c:	fb53 f311 	smmulr	r3, r3, r1
 800e580:	9908      	ldr	r1, [sp, #32]
 800e582:	440a      	add	r2, r1
 800e584:	f302 0207 	ssat	r2, #8, r2
 800e588:	9806      	ldr	r0, [sp, #24]
 800e58a:	440b      	add	r3, r1
 800e58c:	f800 2c02 	strb.w	r2, [r0, #-2]
 800e590:	f303 0307 	ssat	r3, #8, r3
 800e594:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e598:	e6a4      	b.n	800e2e4 <st_sssa8_fully_connected+0x2c8>
 800e59a:	4634      	mov	r4, r6
 800e59c:	e64e      	b.n	800e23c <st_sssa8_fully_connected+0x220>
 800e59e:	462e      	mov	r6, r5
 800e5a0:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800e5a4:	f04f 0900 	mov.w	r9, #0
 800e5a8:	e610      	b.n	800e1cc <st_sssa8_fully_connected+0x1b0>
 800e5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5ac:	4093      	lsls	r3, r2
 800e5ae:	f303 031f 	ssat	r3, #32, r3
 800e5b2:	9a07      	ldr	r2, [sp, #28]
 800e5b4:	fb53 f312 	smmulr	r3, r3, r2
 800e5b8:	9a08      	ldr	r2, [sp, #32]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	f303 0307 	ssat	r3, #8, r3
 800e5c0:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e5c4:	e798      	b.n	800e4f8 <st_sssa8_fully_connected+0x4dc>
 800e5c6:	2a00      	cmp	r2, #0
 800e5c8:	dd0d      	ble.n	800e5e6 <st_sssa8_fully_connected+0x5ca>
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800e5d0:	fb53 0301 	smmla	r3, r3, r1, r0
 800e5d4:	4113      	asrs	r3, r2
 800e5d6:	f303 0307 	ssat	r3, #8, r3
 800e5da:	2000      	movs	r0, #0
 800e5dc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e5de:	7013      	strb	r3, [r2, #0]
 800e5e0:	b017      	add	sp, #92	; 0x5c
 800e5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e6:	f1c2 0201 	rsb	r2, r2, #1
 800e5ea:	4093      	lsls	r3, r2
 800e5ec:	f303 031f 	ssat	r3, #32, r3
 800e5f0:	9a07      	ldr	r2, [sp, #28]
 800e5f2:	fb53 f312 	smmulr	r3, r3, r2
 800e5f6:	9a08      	ldr	r2, [sp, #32]
 800e5f8:	441a      	add	r2, r3
 800e5fa:	f302 0307 	ssat	r3, #8, r2
 800e5fe:	2000      	movs	r0, #0
 800e600:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e602:	7013      	strb	r3, [r2, #0]
 800e604:	b017      	add	sp, #92	; 0x5c
 800e606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60a:	462e      	mov	r6, r5
 800e60c:	e6a0      	b.n	800e350 <st_sssa8_fully_connected+0x334>
 800e60e:	bf00      	nop

0800e610 <st_int8_copy>:
 800e610:	4288      	cmp	r0, r1
 800e612:	d010      	beq.n	800e636 <st_int8_copy+0x26>
 800e614:	b17a      	cbz	r2, 800e636 <st_int8_copy+0x26>
 800e616:	4288      	cmp	r0, r1
 800e618:	eb00 0302 	add.w	r3, r0, r2
 800e61c:	d20c      	bcs.n	800e638 <st_int8_copy+0x28>
 800e61e:	428b      	cmp	r3, r1
 800e620:	d90a      	bls.n	800e638 <st_int8_copy+0x28>
 800e622:	4283      	cmp	r3, r0
 800e624:	440a      	add	r2, r1
 800e626:	d906      	bls.n	800e636 <st_int8_copy+0x26>
 800e628:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800e62c:	4283      	cmp	r3, r0
 800e62e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800e632:	d1f9      	bne.n	800e628 <st_int8_copy+0x18>
 800e634:	4770      	bx	lr
 800e636:	4770      	bx	lr
 800e638:	078b      	lsls	r3, r1, #30
 800e63a:	d102      	bne.n	800e642 <st_int8_copy+0x32>
 800e63c:	e008      	b.n	800e650 <st_int8_copy+0x40>
 800e63e:	2a00      	cmp	r2, #0
 800e640:	d04d      	beq.n	800e6de <st_int8_copy+0xce>
 800e642:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800e646:	3a01      	subs	r2, #1
 800e648:	f801 3b01 	strb.w	r3, [r1], #1
 800e64c:	078b      	lsls	r3, r1, #30
 800e64e:	d1f6      	bne.n	800e63e <st_int8_copy+0x2e>
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800e658:	d05e      	beq.n	800e718 <st_int8_copy+0x108>
 800e65a:	ea40 0301 	orr.w	r3, r0, r1
 800e65e:	075b      	lsls	r3, r3, #29
 800e660:	d13e      	bne.n	800e6e0 <st_int8_copy+0xd0>
 800e662:	f10e 33ff 	add.w	r3, lr, #4294967295
 800e666:	2b01      	cmp	r3, #1
 800e668:	d93a      	bls.n	800e6e0 <st_int8_copy+0xd0>
 800e66a:	f100 0310 	add.w	r3, r0, #16
 800e66e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800e672:	f101 0c10 	add.w	ip, r1, #16
 800e676:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800e67a:	3310      	adds	r3, #16
 800e67c:	f10c 0c10 	add.w	ip, ip, #16
 800e680:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800e684:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800e688:	4573      	cmp	r3, lr
 800e68a:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800e68e:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800e692:	d1f2      	bne.n	800e67a <st_int8_copy+0x6a>
 800e694:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800e698:	4421      	add	r1, r4
 800e69a:	4420      	add	r0, r4
 800e69c:	f002 0203 	and.w	r2, r2, #3
 800e6a0:	b16b      	cbz	r3, 800e6be <st_int8_copy+0xae>
 800e6a2:	6804      	ldr	r4, [r0, #0]
 800e6a4:	600c      	str	r4, [r1, #0]
 800e6a6:	1e5c      	subs	r4, r3, #1
 800e6a8:	d005      	beq.n	800e6b6 <st_int8_copy+0xa6>
 800e6aa:	6845      	ldr	r5, [r0, #4]
 800e6ac:	2c01      	cmp	r4, #1
 800e6ae:	604d      	str	r5, [r1, #4]
 800e6b0:	d001      	beq.n	800e6b6 <st_int8_copy+0xa6>
 800e6b2:	6884      	ldr	r4, [r0, #8]
 800e6b4:	608c      	str	r4, [r1, #8]
 800e6b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e6ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e6be:	b162      	cbz	r2, 800e6da <st_int8_copy+0xca>
 800e6c0:	f990 3000 	ldrsb.w	r3, [r0]
 800e6c4:	3a01      	subs	r2, #1
 800e6c6:	700b      	strb	r3, [r1, #0]
 800e6c8:	d007      	beq.n	800e6da <st_int8_copy+0xca>
 800e6ca:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e6ce:	2a01      	cmp	r2, #1
 800e6d0:	704b      	strb	r3, [r1, #1]
 800e6d2:	d002      	beq.n	800e6da <st_int8_copy+0xca>
 800e6d4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800e6d8:	708b      	strb	r3, [r1, #2]
 800e6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6de:	4770      	bx	lr
 800e6e0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800e6ea:	4684      	mov	ip, r0
 800e6ec:	f8dc 8000 	ldr.w	r8, [ip]
 800e6f0:	3310      	adds	r3, #16
 800e6f2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800e6f6:	f10c 0c10 	add.w	ip, ip, #16
 800e6fa:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800e6fe:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800e702:	f843 8c10 	str.w	r8, [r3, #-16]
 800e706:	f843 7c0c 	str.w	r7, [r3, #-12]
 800e70a:	f843 6c08 	str.w	r6, [r3, #-8]
 800e70e:	f843 5c04 	str.w	r5, [r3, #-4]
 800e712:	459e      	cmp	lr, r3
 800e714:	d1ea      	bne.n	800e6ec <st_int8_copy+0xdc>
 800e716:	e7bd      	b.n	800e694 <st_int8_copy+0x84>
 800e718:	0893      	lsrs	r3, r2, #2
 800e71a:	f002 0203 	and.w	r2, r2, #3
 800e71e:	e7bf      	b.n	800e6a0 <st_int8_copy+0x90>

0800e720 <st_int8_reordered_no_shift_zero>:
 800e720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e722:	0897      	lsrs	r7, r2, #2
 800e724:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800e728:	d02f      	beq.n	800e78a <st_int8_reordered_no_shift_zero+0x6a>
 800e72a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800e72e:	460c      	mov	r4, r1
 800e730:	f850 cb04 	ldr.w	ip, [r0], #4
 800e734:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800e738:	fa2f fe8e 	sxtb16	lr, lr
 800e73c:	fade fe03 	ssub16	lr, lr, r3
 800e740:	fa2f fc8c 	sxtb16	ip, ip
 800e744:	fadc fc03 	ssub16	ip, ip, r3
 800e748:	42a8      	cmp	r0, r5
 800e74a:	f8c4 c000 	str.w	ip, [r4]
 800e74e:	f8c4 e004 	str.w	lr, [r4, #4]
 800e752:	f104 0408 	add.w	r4, r4, #8
 800e756:	d1eb      	bne.n	800e730 <st_int8_reordered_no_shift_zero+0x10>
 800e758:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800e75c:	f012 0203 	ands.w	r2, r2, #3
 800e760:	d012      	beq.n	800e788 <st_int8_reordered_no_shift_zero+0x68>
 800e762:	f995 0000 	ldrsb.w	r0, [r5]
 800e766:	b273      	sxtb	r3, r6
 800e768:	3a01      	subs	r2, #1
 800e76a:	eba0 0003 	sub.w	r0, r0, r3
 800e76e:	8008      	strh	r0, [r1, #0]
 800e770:	d00a      	beq.n	800e788 <st_int8_reordered_no_shift_zero+0x68>
 800e772:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e776:	2a01      	cmp	r2, #1
 800e778:	eba0 0003 	sub.w	r0, r0, r3
 800e77c:	8048      	strh	r0, [r1, #2]
 800e77e:	d003      	beq.n	800e788 <st_int8_reordered_no_shift_zero+0x68>
 800e780:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	808b      	strh	r3, [r1, #4]
 800e788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78a:	4605      	mov	r5, r0
 800e78c:	e7e6      	b.n	800e75c <st_int8_reordered_no_shift_zero+0x3c>
 800e78e:	bf00      	nop

0800e790 <arm_float_to_q15>:
 800e790:	b530      	push	{r4, r5, lr}
 800e792:	0895      	lsrs	r5, r2, #2
 800e794:	d069      	beq.n	800e86a <arm_float_to_q15+0xda>
 800e796:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e79a:	f100 0c10 	add.w	ip, r0, #16
 800e79e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800e7a2:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800e8f8 <arm_float_to_q15+0x168>
 800e7a6:	f101 0e08 	add.w	lr, r1, #8
 800e7aa:	462c      	mov	r4, r5
 800e7ac:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800e7b0:	ee67 6a86 	vmul.f32	s13, s15, s12
 800e7b4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7bc:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800e7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7c8:	ee17 3a90 	vmov	r3, s15
 800e7cc:	f303 030f 	ssat	r3, #16, r3
 800e7d0:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800e7d4:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800e7d8:	ee67 6a86 	vmul.f32	s13, s15, s12
 800e7dc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800e7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7f0:	ee17 3a90 	vmov	r3, s15
 800e7f4:	f303 030f 	ssat	r3, #16, r3
 800e7f8:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800e7fc:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800e800:	ee67 6a86 	vmul.f32	s13, s15, s12
 800e804:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800e810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e818:	ee17 3a90 	vmov	r3, s15
 800e81c:	f303 030f 	ssat	r3, #16, r3
 800e820:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800e824:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800e828:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e82c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e830:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800e840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e844:	bfcc      	ite	gt
 800e846:	ee16 3a90 	vmovgt	r3, s13
 800e84a:	ee17 3a90 	vmovle	r3, s15
 800e84e:	f303 030f 	ssat	r3, #16, r3
 800e852:	3c01      	subs	r4, #1
 800e854:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800e858:	f10c 0c10 	add.w	ip, ip, #16
 800e85c:	f10e 0e08 	add.w	lr, lr, #8
 800e860:	d1a4      	bne.n	800e7ac <arm_float_to_q15+0x1c>
 800e862:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e866:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800e86a:	f012 0203 	ands.w	r2, r2, #3
 800e86e:	d042      	beq.n	800e8f6 <arm_float_to_q15+0x166>
 800e870:	edd0 7a00 	vldr	s15, [r0]
 800e874:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e878:	eddf 5a1f 	vldr	s11, [pc, #124]	; 800e8f8 <arm_float_to_q15+0x168>
 800e87c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800e880:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800e884:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800e890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e898:	ee17 3a90 	vmov	r3, s15
 800e89c:	f303 030f 	ssat	r3, #16, r3
 800e8a0:	3a01      	subs	r2, #1
 800e8a2:	800b      	strh	r3, [r1, #0]
 800e8a4:	d027      	beq.n	800e8f6 <arm_float_to_q15+0x166>
 800e8a6:	edd0 7a01 	vldr	s15, [r0, #4]
 800e8aa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e8ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800e8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e8c2:	ee17 3a90 	vmov	r3, s15
 800e8c6:	f303 030f 	ssat	r3, #16, r3
 800e8ca:	2a01      	cmp	r2, #1
 800e8cc:	804b      	strh	r3, [r1, #2]
 800e8ce:	d012      	beq.n	800e8f6 <arm_float_to_q15+0x166>
 800e8d0:	edd0 7a02 	vldr	s15, [r0, #8]
 800e8d4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800e8d8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800e8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800e8e4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e8e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e8ec:	ee17 3a10 	vmov	r3, s14
 800e8f0:	f303 030f 	ssat	r3, #16, r3
 800e8f4:	808b      	strh	r3, [r1, #4]
 800e8f6:	bd30      	pop	{r4, r5, pc}
 800e8f8:	47000000 	.word	0x47000000

0800e8fc <arm_float_to_q7>:
 800e8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8fe:	0895      	lsrs	r5, r2, #2
 800e900:	d06f      	beq.n	800e9e2 <arm_float_to_q7+0xe6>
 800e902:	f101 0c04 	add.w	ip, r1, #4
 800e906:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e90a:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800e90e:	f100 0e10 	add.w	lr, r0, #16
 800e912:	eddf 5a5f 	vldr	s11, [pc, #380]	; 800ea90 <arm_float_to_q7+0x194>
 800e916:	00ae      	lsls	r6, r5, #2
 800e918:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800e91c:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800e920:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800e924:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92c:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800e930:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e938:	ee17 3a90 	vmov	r3, s15
 800e93c:	b21b      	sxth	r3, r3
 800e93e:	f303 0307 	ssat	r3, #8, r3
 800e942:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800e946:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800e94a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800e94e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e956:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800e95a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e95e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e962:	ee17 3a90 	vmov	r3, s15
 800e966:	b21b      	sxth	r3, r3
 800e968:	f303 0307 	ssat	r3, #8, r3
 800e96c:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800e970:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800e974:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800e978:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e980:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800e984:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e98c:	ee17 3a90 	vmov	r3, s15
 800e990:	b21b      	sxth	r3, r3
 800e992:	f303 0307 	ssat	r3, #8, r3
 800e996:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800e99a:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800e99e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e9a2:	ee76 7a86 	vadd.f32	s15, s13, s12
 800e9a6:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800e9aa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e9ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ba:	ee17 3a90 	vmov	r3, s15
 800e9be:	ee17 7a10 	vmov	r7, s14
 800e9c2:	b21b      	sxth	r3, r3
 800e9c4:	b23f      	sxth	r7, r7
 800e9c6:	dd56      	ble.n	800ea76 <arm_float_to_q7+0x17a>
 800e9c8:	f303 0307 	ssat	r3, #8, r3
 800e9cc:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800e9d0:	f10c 0c04 	add.w	ip, ip, #4
 800e9d4:	f10e 0e10 	add.w	lr, lr, #16
 800e9d8:	4564      	cmp	r4, ip
 800e9da:	d19f      	bne.n	800e91c <arm_float_to_q7+0x20>
 800e9dc:	4431      	add	r1, r6
 800e9de:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800e9e2:	f012 0203 	ands.w	r2, r2, #3
 800e9e6:	d045      	beq.n	800ea74 <arm_float_to_q7+0x178>
 800e9e8:	edd0 7a00 	vldr	s15, [r0]
 800e9ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e9f0:	ed9f 5a27 	vldr	s10, [pc, #156]	; 800ea90 <arm_float_to_q7+0x194>
 800e9f4:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800e9f8:	ee67 6a85 	vmul.f32	s13, s15, s10
 800e9fc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ea08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea10:	ee17 3a90 	vmov	r3, s15
 800ea14:	b21b      	sxth	r3, r3
 800ea16:	f303 0307 	ssat	r3, #8, r3
 800ea1a:	3a01      	subs	r2, #1
 800ea1c:	700b      	strb	r3, [r1, #0]
 800ea1e:	d029      	beq.n	800ea74 <arm_float_to_q7+0x178>
 800ea20:	edd0 6a01 	vldr	s13, [r0, #4]
 800ea24:	ee26 6a85 	vmul.f32	s12, s13, s10
 800ea28:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800ea2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea30:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800ea34:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ea38:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800ea3c:	ee16 3a90 	vmov	r3, s13
 800ea40:	b21b      	sxth	r3, r3
 800ea42:	f303 0307 	ssat	r3, #8, r3
 800ea46:	2a01      	cmp	r2, #1
 800ea48:	704b      	strb	r3, [r1, #1]
 800ea4a:	d013      	beq.n	800ea74 <arm_float_to_q7+0x178>
 800ea4c:	edd0 7a02 	vldr	s15, [r0, #8]
 800ea50:	ee27 5a85 	vmul.f32	s10, s15, s10
 800ea54:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800ea58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800ea60:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ea64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea68:	ee17 3a90 	vmov	r3, s15
 800ea6c:	b21b      	sxth	r3, r3
 800ea6e:	f303 0307 	ssat	r3, #8, r3
 800ea72:	708b      	strb	r3, [r1, #2]
 800ea74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea76:	f307 0707 	ssat	r7, #8, r7
 800ea7a:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800ea7e:	f10c 0c04 	add.w	ip, ip, #4
 800ea82:	f10e 0e10 	add.w	lr, lr, #16
 800ea86:	45a4      	cmp	ip, r4
 800ea88:	f47f af48 	bne.w	800e91c <arm_float_to_q7+0x20>
 800ea8c:	e7a6      	b.n	800e9dc <arm_float_to_q7+0xe0>
 800ea8e:	bf00      	nop
 800ea90:	43000000 	.word	0x43000000

0800ea94 <arm_q15_to_float>:
 800ea94:	b530      	push	{r4, r5, lr}
 800ea96:	0894      	lsrs	r4, r2, #2
 800ea98:	d038      	beq.n	800eb0c <arm_q15_to_float+0x78>
 800ea9a:	f100 0c08 	add.w	ip, r0, #8
 800ea9e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800eb5c <arm_q15_to_float+0xc8>
 800eaa2:	f101 0310 	add.w	r3, r1, #16
 800eaa6:	46a6      	mov	lr, r4
 800eaa8:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800eaac:	3310      	adds	r3, #16
 800eaae:	f10c 0c08 	add.w	ip, ip, #8
 800eab2:	f1be 0e01 	subs.w	lr, lr, #1
 800eab6:	ee07 5a90 	vmov	s15, r5
 800eaba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eabe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eac2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800eac6:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800eaca:	ee07 5a90 	vmov	s15, r5
 800eace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ead2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ead6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800eada:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800eade:	ee07 5a90 	vmov	s15, r5
 800eae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eaea:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800eaee:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800eaf2:	ee07 5a90 	vmov	s15, r5
 800eaf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eafa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eafe:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800eb02:	d1d1      	bne.n	800eaa8 <arm_q15_to_float+0x14>
 800eb04:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800eb08:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800eb0c:	f012 0203 	ands.w	r2, r2, #3
 800eb10:	d023      	beq.n	800eb5a <arm_q15_to_float+0xc6>
 800eb12:	f9b0 3000 	ldrsh.w	r3, [r0]
 800eb16:	3a01      	subs	r2, #1
 800eb18:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800eb5c <arm_q15_to_float+0xc8>
 800eb1c:	ee07 3a90 	vmov	s15, r3
 800eb20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb28:	edc1 7a00 	vstr	s15, [r1]
 800eb2c:	d015      	beq.n	800eb5a <arm_q15_to_float+0xc6>
 800eb2e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800eb32:	2a01      	cmp	r2, #1
 800eb34:	ee07 3a90 	vmov	s15, r3
 800eb38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb40:	edc1 7a01 	vstr	s15, [r1, #4]
 800eb44:	d009      	beq.n	800eb5a <arm_q15_to_float+0xc6>
 800eb46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800eb4a:	ee07 3a90 	vmov	s15, r3
 800eb4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb56:	edc1 7a02 	vstr	s15, [r1, #8]
 800eb5a:	bd30      	pop	{r4, r5, pc}
 800eb5c:	38000000 	.word	0x38000000

0800eb60 <arm_q7_to_float>:
 800eb60:	b530      	push	{r4, r5, lr}
 800eb62:	0894      	lsrs	r4, r2, #2
 800eb64:	d036      	beq.n	800ebd4 <arm_q7_to_float+0x74>
 800eb66:	1d03      	adds	r3, r0, #4
 800eb68:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800eb6c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800ec24 <arm_q7_to_float+0xc4>
 800eb70:	f101 0010 	add.w	r0, r1, #16
 800eb74:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800eb78:	3010      	adds	r0, #16
 800eb7a:	ee07 ea90 	vmov	s15, lr
 800eb7e:	469e      	mov	lr, r3
 800eb80:	3304      	adds	r3, #4
 800eb82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb86:	45e6      	cmp	lr, ip
 800eb88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb8c:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 800eb90:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800eb94:	ee07 5a90 	vmov	s15, r5
 800eb98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eba0:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800eba4:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800eba8:	ee07 5a90 	vmov	s15, r5
 800ebac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebb4:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800ebb8:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800ebbc:	ee07 5a90 	vmov	s15, r5
 800ebc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebc8:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800ebcc:	d1d2      	bne.n	800eb74 <arm_q7_to_float+0x14>
 800ebce:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ebd2:	4660      	mov	r0, ip
 800ebd4:	f012 0203 	ands.w	r2, r2, #3
 800ebd8:	d023      	beq.n	800ec22 <arm_q7_to_float+0xc2>
 800ebda:	f990 3000 	ldrsb.w	r3, [r0]
 800ebde:	3a01      	subs	r2, #1
 800ebe0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ec24 <arm_q7_to_float+0xc4>
 800ebe4:	ee07 3a90 	vmov	s15, r3
 800ebe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebf0:	edc1 7a00 	vstr	s15, [r1]
 800ebf4:	d015      	beq.n	800ec22 <arm_q7_to_float+0xc2>
 800ebf6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ebfa:	2a01      	cmp	r2, #1
 800ebfc:	ee07 3a90 	vmov	s15, r3
 800ec00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec08:	edc1 7a01 	vstr	s15, [r1, #4]
 800ec0c:	d009      	beq.n	800ec22 <arm_q7_to_float+0xc2>
 800ec0e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ec12:	ee07 3a90 	vmov	s15, r3
 800ec16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec1e:	edc1 7a02 	vstr	s15, [r1, #8]
 800ec22:	bd30      	pop	{r4, r5, pc}
 800ec24:	3c000000 	.word	0x3c000000

0800ec28 <ai_array_to_buffer_fmt>:
 800ec28:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d050      	beq.n	800ecd2 <ai_array_to_buffer_fmt+0xaa>
 800ec30:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ec34:	4b29      	ldr	r3, [pc, #164]	; (800ecdc <ai_array_to_buffer_fmt+0xb4>)
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d00b      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec3a:	dc1c      	bgt.n	800ec76 <ai_array_to_buffer_fmt+0x4e>
 800ec3c:	4b28      	ldr	r3, [pc, #160]	; (800ece0 <ai_array_to_buffer_fmt+0xb8>)
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d007      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec42:	dd0b      	ble.n	800ec5c <ai_array_to_buffer_fmt+0x34>
 800ec44:	4b27      	ldr	r3, [pc, #156]	; (800ece4 <ai_array_to_buffer_fmt+0xbc>)
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d003      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec4a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d131      	bne.n	800ecb6 <ai_array_to_buffer_fmt+0x8e>
 800ec52:	4613      	mov	r3, r2
 800ec54:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ec58:	4318      	orrs	r0, r3
 800ec5a:	4770      	bx	lr
 800ec5c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d0f6      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec64:	dd2c      	ble.n	800ecc0 <ai_array_to_buffer_fmt+0x98>
 800ec66:	4b20      	ldr	r3, [pc, #128]	; (800ece8 <ai_array_to_buffer_fmt+0xc0>)
 800ec68:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	bf18      	it	ne
 800ec70:	2340      	movne	r3, #64	; 0x40
 800ec72:	4318      	orrs	r0, r3
 800ec74:	4770      	bx	lr
 800ec76:	4b1d      	ldr	r3, [pc, #116]	; (800ecec <ai_array_to_buffer_fmt+0xc4>)
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d0ea      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec7c:	dd0e      	ble.n	800ec9c <ai_array_to_buffer_fmt+0x74>
 800ec7e:	4b1c      	ldr	r3, [pc, #112]	; (800ecf0 <ai_array_to_buffer_fmt+0xc8>)
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d0e6      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec84:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d0e2      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ec8c:	4b19      	ldr	r3, [pc, #100]	; (800ecf4 <ai_array_to_buffer_fmt+0xcc>)
 800ec8e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ec92:	429a      	cmp	r2, r3
 800ec94:	bf18      	it	ne
 800ec96:	2340      	movne	r3, #64	; 0x40
 800ec98:	4318      	orrs	r0, r3
 800ec9a:	4770      	bx	lr
 800ec9c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d0d6      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800eca4:	3307      	adds	r3, #7
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d0d3      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ecaa:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	bf18      	it	ne
 800ecb2:	2340      	movne	r3, #64	; 0x40
 800ecb4:	e7ce      	b.n	800ec54 <ai_array_to_buffer_fmt+0x2c>
 800ecb6:	4b10      	ldr	r3, [pc, #64]	; (800ecf8 <ai_array_to_buffer_fmt+0xd0>)
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	bf18      	it	ne
 800ecbc:	2340      	movne	r3, #64	; 0x40
 800ecbe:	e7c9      	b.n	800ec54 <ai_array_to_buffer_fmt+0x2c>
 800ecc0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d0c4      	beq.n	800ec52 <ai_array_to_buffer_fmt+0x2a>
 800ecc8:	3380      	adds	r3, #128	; 0x80
 800ecca:	429a      	cmp	r2, r3
 800eccc:	bf18      	it	ne
 800ecce:	2340      	movne	r3, #64	; 0x40
 800ecd0:	e7c0      	b.n	800ec54 <ai_array_to_buffer_fmt+0x2c>
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <ai_array_to_buffer_fmt+0xd4>)
 800ecd4:	4003      	ands	r3, r0
 800ecd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ecda:	e7bb      	b.n	800ec54 <ai_array_to_buffer_fmt+0x2c>
 800ecdc:	00840040 	.word	0x00840040
 800ece0:	00040840 	.word	0x00040840
 800ece4:	00041040 	.word	0x00041040
 800ece8:	00040447 	.word	0x00040447
 800ecec:	00840840 	.word	0x00840840
 800ecf0:	00841040 	.word	0x00841040
 800ecf4:	0084084f 	.word	0x0084084f
 800ecf8:	0004084f 	.word	0x0004084f
 800ecfc:	00803fff 	.word	0x00803fff

0800ed00 <ai_array_get_data_byte_size>:
 800ed00:	b161      	cbz	r1, 800ed1c <ai_array_get_data_byte_size+0x1c>
 800ed02:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ed06:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ed0a:	fb03 f101 	mul.w	r1, r3, r1
 800ed0e:	1dc8      	adds	r0, r1, #7
 800ed10:	f020 0007 	bic.w	r0, r0, #7
 800ed14:	40d0      	lsrs	r0, r2
 800ed16:	3007      	adds	r0, #7
 800ed18:	08c0      	lsrs	r0, r0, #3
 800ed1a:	4770      	bx	lr
 800ed1c:	4608      	mov	r0, r1
 800ed1e:	4770      	bx	lr

0800ed20 <ai_version_get>:
 800ed20:	0212      	lsls	r2, r2, #8
 800ed22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ed26:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ed2a:	4770      	bx	lr

0800ed2c <get_tensor_byte_size>:
 800ed2c:	b430      	push	{r4, r5}
 800ed2e:	6985      	ldr	r5, [r0, #24]
 800ed30:	68c4      	ldr	r4, [r0, #12]
 800ed32:	6941      	ldr	r1, [r0, #20]
 800ed34:	4b06      	ldr	r3, [pc, #24]	; (800ed50 <get_tensor_byte_size+0x24>)
 800ed36:	6828      	ldr	r0, [r5, #0]
 800ed38:	4a06      	ldr	r2, [pc, #24]	; (800ed54 <get_tensor_byte_size+0x28>)
 800ed3a:	4003      	ands	r3, r0
 800ed3c:	68c9      	ldr	r1, [r1, #12]
 800ed3e:	68e0      	ldr	r0, [r4, #12]
 800ed40:	4293      	cmp	r3, r2
 800ed42:	fb01 f000 	mul.w	r0, r1, r0
 800ed46:	d101      	bne.n	800ed4c <get_tensor_byte_size+0x20>
 800ed48:	3007      	adds	r0, #7
 800ed4a:	08c0      	lsrs	r0, r0, #3
 800ed4c:	bc30      	pop	{r4, r5}
 800ed4e:	4770      	bx	lr
 800ed50:	017fffff 	.word	0x017fffff
 800ed54:	000400c0 	.word	0x000400c0

0800ed58 <__errno>:
 800ed58:	4b01      	ldr	r3, [pc, #4]	; (800ed60 <__errno+0x8>)
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	20000eac 	.word	0x20000eac

0800ed64 <__libc_init_array>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	4d0d      	ldr	r5, [pc, #52]	; (800ed9c <__libc_init_array+0x38>)
 800ed68:	4c0d      	ldr	r4, [pc, #52]	; (800eda0 <__libc_init_array+0x3c>)
 800ed6a:	1b64      	subs	r4, r4, r5
 800ed6c:	10a4      	asrs	r4, r4, #2
 800ed6e:	2600      	movs	r6, #0
 800ed70:	42a6      	cmp	r6, r4
 800ed72:	d109      	bne.n	800ed88 <__libc_init_array+0x24>
 800ed74:	4d0b      	ldr	r5, [pc, #44]	; (800eda4 <__libc_init_array+0x40>)
 800ed76:	4c0c      	ldr	r4, [pc, #48]	; (800eda8 <__libc_init_array+0x44>)
 800ed78:	f003 fb1e 	bl	80123b8 <_init>
 800ed7c:	1b64      	subs	r4, r4, r5
 800ed7e:	10a4      	asrs	r4, r4, #2
 800ed80:	2600      	movs	r6, #0
 800ed82:	42a6      	cmp	r6, r4
 800ed84:	d105      	bne.n	800ed92 <__libc_init_array+0x2e>
 800ed86:	bd70      	pop	{r4, r5, r6, pc}
 800ed88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed8c:	4798      	blx	r3
 800ed8e:	3601      	adds	r6, #1
 800ed90:	e7ee      	b.n	800ed70 <__libc_init_array+0xc>
 800ed92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed96:	4798      	blx	r3
 800ed98:	3601      	adds	r6, #1
 800ed9a:	e7f2      	b.n	800ed82 <__libc_init_array+0x1e>
 800ed9c:	08027b0c 	.word	0x08027b0c
 800eda0:	08027b0c 	.word	0x08027b0c
 800eda4:	08027b0c 	.word	0x08027b0c
 800eda8:	08027b10 	.word	0x08027b10

0800edac <malloc>:
 800edac:	4b02      	ldr	r3, [pc, #8]	; (800edb8 <malloc+0xc>)
 800edae:	4601      	mov	r1, r0
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	f000 b885 	b.w	800eec0 <_malloc_r>
 800edb6:	bf00      	nop
 800edb8:	20000eac 	.word	0x20000eac

0800edbc <memcpy>:
 800edbc:	440a      	add	r2, r1
 800edbe:	4291      	cmp	r1, r2
 800edc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800edc4:	d100      	bne.n	800edc8 <memcpy+0xc>
 800edc6:	4770      	bx	lr
 800edc8:	b510      	push	{r4, lr}
 800edca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edd2:	4291      	cmp	r1, r2
 800edd4:	d1f9      	bne.n	800edca <memcpy+0xe>
 800edd6:	bd10      	pop	{r4, pc}

0800edd8 <memset>:
 800edd8:	4402      	add	r2, r0
 800edda:	4603      	mov	r3, r0
 800eddc:	4293      	cmp	r3, r2
 800edde:	d100      	bne.n	800ede2 <memset+0xa>
 800ede0:	4770      	bx	lr
 800ede2:	f803 1b01 	strb.w	r1, [r3], #1
 800ede6:	e7f9      	b.n	800eddc <memset+0x4>

0800ede8 <_free_r>:
 800ede8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edea:	2900      	cmp	r1, #0
 800edec:	d044      	beq.n	800ee78 <_free_r+0x90>
 800edee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edf2:	9001      	str	r0, [sp, #4]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f1a1 0404 	sub.w	r4, r1, #4
 800edfa:	bfb8      	it	lt
 800edfc:	18e4      	addlt	r4, r4, r3
 800edfe:	f001 fbf5 	bl	80105ec <__malloc_lock>
 800ee02:	4a1e      	ldr	r2, [pc, #120]	; (800ee7c <_free_r+0x94>)
 800ee04:	9801      	ldr	r0, [sp, #4]
 800ee06:	6813      	ldr	r3, [r2, #0]
 800ee08:	b933      	cbnz	r3, 800ee18 <_free_r+0x30>
 800ee0a:	6063      	str	r3, [r4, #4]
 800ee0c:	6014      	str	r4, [r2, #0]
 800ee0e:	b003      	add	sp, #12
 800ee10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee14:	f001 bbf0 	b.w	80105f8 <__malloc_unlock>
 800ee18:	42a3      	cmp	r3, r4
 800ee1a:	d908      	bls.n	800ee2e <_free_r+0x46>
 800ee1c:	6825      	ldr	r5, [r4, #0]
 800ee1e:	1961      	adds	r1, r4, r5
 800ee20:	428b      	cmp	r3, r1
 800ee22:	bf01      	itttt	eq
 800ee24:	6819      	ldreq	r1, [r3, #0]
 800ee26:	685b      	ldreq	r3, [r3, #4]
 800ee28:	1949      	addeq	r1, r1, r5
 800ee2a:	6021      	streq	r1, [r4, #0]
 800ee2c:	e7ed      	b.n	800ee0a <_free_r+0x22>
 800ee2e:	461a      	mov	r2, r3
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	b10b      	cbz	r3, 800ee38 <_free_r+0x50>
 800ee34:	42a3      	cmp	r3, r4
 800ee36:	d9fa      	bls.n	800ee2e <_free_r+0x46>
 800ee38:	6811      	ldr	r1, [r2, #0]
 800ee3a:	1855      	adds	r5, r2, r1
 800ee3c:	42a5      	cmp	r5, r4
 800ee3e:	d10b      	bne.n	800ee58 <_free_r+0x70>
 800ee40:	6824      	ldr	r4, [r4, #0]
 800ee42:	4421      	add	r1, r4
 800ee44:	1854      	adds	r4, r2, r1
 800ee46:	42a3      	cmp	r3, r4
 800ee48:	6011      	str	r1, [r2, #0]
 800ee4a:	d1e0      	bne.n	800ee0e <_free_r+0x26>
 800ee4c:	681c      	ldr	r4, [r3, #0]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	6053      	str	r3, [r2, #4]
 800ee52:	4421      	add	r1, r4
 800ee54:	6011      	str	r1, [r2, #0]
 800ee56:	e7da      	b.n	800ee0e <_free_r+0x26>
 800ee58:	d902      	bls.n	800ee60 <_free_r+0x78>
 800ee5a:	230c      	movs	r3, #12
 800ee5c:	6003      	str	r3, [r0, #0]
 800ee5e:	e7d6      	b.n	800ee0e <_free_r+0x26>
 800ee60:	6825      	ldr	r5, [r4, #0]
 800ee62:	1961      	adds	r1, r4, r5
 800ee64:	428b      	cmp	r3, r1
 800ee66:	bf04      	itt	eq
 800ee68:	6819      	ldreq	r1, [r3, #0]
 800ee6a:	685b      	ldreq	r3, [r3, #4]
 800ee6c:	6063      	str	r3, [r4, #4]
 800ee6e:	bf04      	itt	eq
 800ee70:	1949      	addeq	r1, r1, r5
 800ee72:	6021      	streq	r1, [r4, #0]
 800ee74:	6054      	str	r4, [r2, #4]
 800ee76:	e7ca      	b.n	800ee0e <_free_r+0x26>
 800ee78:	b003      	add	sp, #12
 800ee7a:	bd30      	pop	{r4, r5, pc}
 800ee7c:	20005520 	.word	0x20005520

0800ee80 <sbrk_aligned>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	4e0e      	ldr	r6, [pc, #56]	; (800eebc <sbrk_aligned+0x3c>)
 800ee84:	460c      	mov	r4, r1
 800ee86:	6831      	ldr	r1, [r6, #0]
 800ee88:	4605      	mov	r5, r0
 800ee8a:	b911      	cbnz	r1, 800ee92 <sbrk_aligned+0x12>
 800ee8c:	f000 fcf6 	bl	800f87c <_sbrk_r>
 800ee90:	6030      	str	r0, [r6, #0]
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 fcf1 	bl	800f87c <_sbrk_r>
 800ee9a:	1c43      	adds	r3, r0, #1
 800ee9c:	d00a      	beq.n	800eeb4 <sbrk_aligned+0x34>
 800ee9e:	1cc4      	adds	r4, r0, #3
 800eea0:	f024 0403 	bic.w	r4, r4, #3
 800eea4:	42a0      	cmp	r0, r4
 800eea6:	d007      	beq.n	800eeb8 <sbrk_aligned+0x38>
 800eea8:	1a21      	subs	r1, r4, r0
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f000 fce6 	bl	800f87c <_sbrk_r>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d101      	bne.n	800eeb8 <sbrk_aligned+0x38>
 800eeb4:	f04f 34ff 	mov.w	r4, #4294967295
 800eeb8:	4620      	mov	r0, r4
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	20005524 	.word	0x20005524

0800eec0 <_malloc_r>:
 800eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec4:	1ccd      	adds	r5, r1, #3
 800eec6:	f025 0503 	bic.w	r5, r5, #3
 800eeca:	3508      	adds	r5, #8
 800eecc:	2d0c      	cmp	r5, #12
 800eece:	bf38      	it	cc
 800eed0:	250c      	movcc	r5, #12
 800eed2:	2d00      	cmp	r5, #0
 800eed4:	4607      	mov	r7, r0
 800eed6:	db01      	blt.n	800eedc <_malloc_r+0x1c>
 800eed8:	42a9      	cmp	r1, r5
 800eeda:	d905      	bls.n	800eee8 <_malloc_r+0x28>
 800eedc:	230c      	movs	r3, #12
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	2600      	movs	r6, #0
 800eee2:	4630      	mov	r0, r6
 800eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee8:	4e2e      	ldr	r6, [pc, #184]	; (800efa4 <_malloc_r+0xe4>)
 800eeea:	f001 fb7f 	bl	80105ec <__malloc_lock>
 800eeee:	6833      	ldr	r3, [r6, #0]
 800eef0:	461c      	mov	r4, r3
 800eef2:	bb34      	cbnz	r4, 800ef42 <_malloc_r+0x82>
 800eef4:	4629      	mov	r1, r5
 800eef6:	4638      	mov	r0, r7
 800eef8:	f7ff ffc2 	bl	800ee80 <sbrk_aligned>
 800eefc:	1c43      	adds	r3, r0, #1
 800eefe:	4604      	mov	r4, r0
 800ef00:	d14d      	bne.n	800ef9e <_malloc_r+0xde>
 800ef02:	6834      	ldr	r4, [r6, #0]
 800ef04:	4626      	mov	r6, r4
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d140      	bne.n	800ef8c <_malloc_r+0xcc>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4638      	mov	r0, r7
 800ef10:	eb04 0803 	add.w	r8, r4, r3
 800ef14:	f000 fcb2 	bl	800f87c <_sbrk_r>
 800ef18:	4580      	cmp	r8, r0
 800ef1a:	d13a      	bne.n	800ef92 <_malloc_r+0xd2>
 800ef1c:	6821      	ldr	r1, [r4, #0]
 800ef1e:	3503      	adds	r5, #3
 800ef20:	1a6d      	subs	r5, r5, r1
 800ef22:	f025 0503 	bic.w	r5, r5, #3
 800ef26:	3508      	adds	r5, #8
 800ef28:	2d0c      	cmp	r5, #12
 800ef2a:	bf38      	it	cc
 800ef2c:	250c      	movcc	r5, #12
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4638      	mov	r0, r7
 800ef32:	f7ff ffa5 	bl	800ee80 <sbrk_aligned>
 800ef36:	3001      	adds	r0, #1
 800ef38:	d02b      	beq.n	800ef92 <_malloc_r+0xd2>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	442b      	add	r3, r5
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	e00e      	b.n	800ef60 <_malloc_r+0xa0>
 800ef42:	6822      	ldr	r2, [r4, #0]
 800ef44:	1b52      	subs	r2, r2, r5
 800ef46:	d41e      	bmi.n	800ef86 <_malloc_r+0xc6>
 800ef48:	2a0b      	cmp	r2, #11
 800ef4a:	d916      	bls.n	800ef7a <_malloc_r+0xba>
 800ef4c:	1961      	adds	r1, r4, r5
 800ef4e:	42a3      	cmp	r3, r4
 800ef50:	6025      	str	r5, [r4, #0]
 800ef52:	bf18      	it	ne
 800ef54:	6059      	strne	r1, [r3, #4]
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	bf08      	it	eq
 800ef5a:	6031      	streq	r1, [r6, #0]
 800ef5c:	5162      	str	r2, [r4, r5]
 800ef5e:	604b      	str	r3, [r1, #4]
 800ef60:	4638      	mov	r0, r7
 800ef62:	f104 060b 	add.w	r6, r4, #11
 800ef66:	f001 fb47 	bl	80105f8 <__malloc_unlock>
 800ef6a:	f026 0607 	bic.w	r6, r6, #7
 800ef6e:	1d23      	adds	r3, r4, #4
 800ef70:	1af2      	subs	r2, r6, r3
 800ef72:	d0b6      	beq.n	800eee2 <_malloc_r+0x22>
 800ef74:	1b9b      	subs	r3, r3, r6
 800ef76:	50a3      	str	r3, [r4, r2]
 800ef78:	e7b3      	b.n	800eee2 <_malloc_r+0x22>
 800ef7a:	6862      	ldr	r2, [r4, #4]
 800ef7c:	42a3      	cmp	r3, r4
 800ef7e:	bf0c      	ite	eq
 800ef80:	6032      	streq	r2, [r6, #0]
 800ef82:	605a      	strne	r2, [r3, #4]
 800ef84:	e7ec      	b.n	800ef60 <_malloc_r+0xa0>
 800ef86:	4623      	mov	r3, r4
 800ef88:	6864      	ldr	r4, [r4, #4]
 800ef8a:	e7b2      	b.n	800eef2 <_malloc_r+0x32>
 800ef8c:	4634      	mov	r4, r6
 800ef8e:	6876      	ldr	r6, [r6, #4]
 800ef90:	e7b9      	b.n	800ef06 <_malloc_r+0x46>
 800ef92:	230c      	movs	r3, #12
 800ef94:	603b      	str	r3, [r7, #0]
 800ef96:	4638      	mov	r0, r7
 800ef98:	f001 fb2e 	bl	80105f8 <__malloc_unlock>
 800ef9c:	e7a1      	b.n	800eee2 <_malloc_r+0x22>
 800ef9e:	6025      	str	r5, [r4, #0]
 800efa0:	e7de      	b.n	800ef60 <_malloc_r+0xa0>
 800efa2:	bf00      	nop
 800efa4:	20005520 	.word	0x20005520

0800efa8 <__cvt>:
 800efa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efac:	ec55 4b10 	vmov	r4, r5, d0
 800efb0:	2d00      	cmp	r5, #0
 800efb2:	460e      	mov	r6, r1
 800efb4:	4619      	mov	r1, r3
 800efb6:	462b      	mov	r3, r5
 800efb8:	bfbb      	ittet	lt
 800efba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efbe:	461d      	movlt	r5, r3
 800efc0:	2300      	movge	r3, #0
 800efc2:	232d      	movlt	r3, #45	; 0x2d
 800efc4:	700b      	strb	r3, [r1, #0]
 800efc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800efcc:	4691      	mov	r9, r2
 800efce:	f023 0820 	bic.w	r8, r3, #32
 800efd2:	bfbc      	itt	lt
 800efd4:	4622      	movlt	r2, r4
 800efd6:	4614      	movlt	r4, r2
 800efd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efdc:	d005      	beq.n	800efea <__cvt+0x42>
 800efde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800efe2:	d100      	bne.n	800efe6 <__cvt+0x3e>
 800efe4:	3601      	adds	r6, #1
 800efe6:	2102      	movs	r1, #2
 800efe8:	e000      	b.n	800efec <__cvt+0x44>
 800efea:	2103      	movs	r1, #3
 800efec:	ab03      	add	r3, sp, #12
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	ab02      	add	r3, sp, #8
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	ec45 4b10 	vmov	d0, r4, r5
 800eff8:	4653      	mov	r3, sl
 800effa:	4632      	mov	r2, r6
 800effc:	f000 fd04 	bl	800fa08 <_dtoa_r>
 800f000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f004:	4607      	mov	r7, r0
 800f006:	d102      	bne.n	800f00e <__cvt+0x66>
 800f008:	f019 0f01 	tst.w	r9, #1
 800f00c:	d022      	beq.n	800f054 <__cvt+0xac>
 800f00e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f012:	eb07 0906 	add.w	r9, r7, r6
 800f016:	d110      	bne.n	800f03a <__cvt+0x92>
 800f018:	783b      	ldrb	r3, [r7, #0]
 800f01a:	2b30      	cmp	r3, #48	; 0x30
 800f01c:	d10a      	bne.n	800f034 <__cvt+0x8c>
 800f01e:	2200      	movs	r2, #0
 800f020:	2300      	movs	r3, #0
 800f022:	4620      	mov	r0, r4
 800f024:	4629      	mov	r1, r5
 800f026:	f7f1 fd7f 	bl	8000b28 <__aeabi_dcmpeq>
 800f02a:	b918      	cbnz	r0, 800f034 <__cvt+0x8c>
 800f02c:	f1c6 0601 	rsb	r6, r6, #1
 800f030:	f8ca 6000 	str.w	r6, [sl]
 800f034:	f8da 3000 	ldr.w	r3, [sl]
 800f038:	4499      	add	r9, r3
 800f03a:	2200      	movs	r2, #0
 800f03c:	2300      	movs	r3, #0
 800f03e:	4620      	mov	r0, r4
 800f040:	4629      	mov	r1, r5
 800f042:	f7f1 fd71 	bl	8000b28 <__aeabi_dcmpeq>
 800f046:	b108      	cbz	r0, 800f04c <__cvt+0xa4>
 800f048:	f8cd 900c 	str.w	r9, [sp, #12]
 800f04c:	2230      	movs	r2, #48	; 0x30
 800f04e:	9b03      	ldr	r3, [sp, #12]
 800f050:	454b      	cmp	r3, r9
 800f052:	d307      	bcc.n	800f064 <__cvt+0xbc>
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f058:	1bdb      	subs	r3, r3, r7
 800f05a:	4638      	mov	r0, r7
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	b004      	add	sp, #16
 800f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f064:	1c59      	adds	r1, r3, #1
 800f066:	9103      	str	r1, [sp, #12]
 800f068:	701a      	strb	r2, [r3, #0]
 800f06a:	e7f0      	b.n	800f04e <__cvt+0xa6>

0800f06c <__exponent>:
 800f06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f06e:	4603      	mov	r3, r0
 800f070:	2900      	cmp	r1, #0
 800f072:	bfb8      	it	lt
 800f074:	4249      	neglt	r1, r1
 800f076:	f803 2b02 	strb.w	r2, [r3], #2
 800f07a:	bfb4      	ite	lt
 800f07c:	222d      	movlt	r2, #45	; 0x2d
 800f07e:	222b      	movge	r2, #43	; 0x2b
 800f080:	2909      	cmp	r1, #9
 800f082:	7042      	strb	r2, [r0, #1]
 800f084:	dd2a      	ble.n	800f0dc <__exponent+0x70>
 800f086:	f10d 0407 	add.w	r4, sp, #7
 800f08a:	46a4      	mov	ip, r4
 800f08c:	270a      	movs	r7, #10
 800f08e:	46a6      	mov	lr, r4
 800f090:	460a      	mov	r2, r1
 800f092:	fb91 f6f7 	sdiv	r6, r1, r7
 800f096:	fb07 1516 	mls	r5, r7, r6, r1
 800f09a:	3530      	adds	r5, #48	; 0x30
 800f09c:	2a63      	cmp	r2, #99	; 0x63
 800f09e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f0a6:	4631      	mov	r1, r6
 800f0a8:	dcf1      	bgt.n	800f08e <__exponent+0x22>
 800f0aa:	3130      	adds	r1, #48	; 0x30
 800f0ac:	f1ae 0502 	sub.w	r5, lr, #2
 800f0b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f0b4:	1c44      	adds	r4, r0, #1
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4561      	cmp	r1, ip
 800f0ba:	d30a      	bcc.n	800f0d2 <__exponent+0x66>
 800f0bc:	f10d 0209 	add.w	r2, sp, #9
 800f0c0:	eba2 020e 	sub.w	r2, r2, lr
 800f0c4:	4565      	cmp	r5, ip
 800f0c6:	bf88      	it	hi
 800f0c8:	2200      	movhi	r2, #0
 800f0ca:	4413      	add	r3, r2
 800f0cc:	1a18      	subs	r0, r3, r0
 800f0ce:	b003      	add	sp, #12
 800f0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f0da:	e7ed      	b.n	800f0b8 <__exponent+0x4c>
 800f0dc:	2330      	movs	r3, #48	; 0x30
 800f0de:	3130      	adds	r1, #48	; 0x30
 800f0e0:	7083      	strb	r3, [r0, #2]
 800f0e2:	70c1      	strb	r1, [r0, #3]
 800f0e4:	1d03      	adds	r3, r0, #4
 800f0e6:	e7f1      	b.n	800f0cc <__exponent+0x60>

0800f0e8 <_printf_float>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	ed2d 8b02 	vpush	{d8}
 800f0f0:	b08d      	sub	sp, #52	; 0x34
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f0f8:	4616      	mov	r6, r2
 800f0fa:	461f      	mov	r7, r3
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	f001 fa71 	bl	80105e4 <_localeconv_r>
 800f102:	f8d0 a000 	ldr.w	sl, [r0]
 800f106:	4650      	mov	r0, sl
 800f108:	f7f1 f88c 	bl	8000224 <strlen>
 800f10c:	2300      	movs	r3, #0
 800f10e:	930a      	str	r3, [sp, #40]	; 0x28
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	9305      	str	r3, [sp, #20]
 800f114:	f8d8 3000 	ldr.w	r3, [r8]
 800f118:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f11c:	3307      	adds	r3, #7
 800f11e:	f023 0307 	bic.w	r3, r3, #7
 800f122:	f103 0208 	add.w	r2, r3, #8
 800f126:	f8c8 2000 	str.w	r2, [r8]
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f132:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f13a:	9307      	str	r3, [sp, #28]
 800f13c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f140:	ee08 0a10 	vmov	s16, r0
 800f144:	4b9f      	ldr	r3, [pc, #636]	; (800f3c4 <_printf_float+0x2dc>)
 800f146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f14a:	f04f 32ff 	mov.w	r2, #4294967295
 800f14e:	f7f1 fd1d 	bl	8000b8c <__aeabi_dcmpun>
 800f152:	bb88      	cbnz	r0, 800f1b8 <_printf_float+0xd0>
 800f154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f158:	4b9a      	ldr	r3, [pc, #616]	; (800f3c4 <_printf_float+0x2dc>)
 800f15a:	f04f 32ff 	mov.w	r2, #4294967295
 800f15e:	f7f1 fcf7 	bl	8000b50 <__aeabi_dcmple>
 800f162:	bb48      	cbnz	r0, 800f1b8 <_printf_float+0xd0>
 800f164:	2200      	movs	r2, #0
 800f166:	2300      	movs	r3, #0
 800f168:	4640      	mov	r0, r8
 800f16a:	4649      	mov	r1, r9
 800f16c:	f7f1 fce6 	bl	8000b3c <__aeabi_dcmplt>
 800f170:	b110      	cbz	r0, 800f178 <_printf_float+0x90>
 800f172:	232d      	movs	r3, #45	; 0x2d
 800f174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f178:	4b93      	ldr	r3, [pc, #588]	; (800f3c8 <_printf_float+0x2e0>)
 800f17a:	4894      	ldr	r0, [pc, #592]	; (800f3cc <_printf_float+0x2e4>)
 800f17c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f180:	bf94      	ite	ls
 800f182:	4698      	movls	r8, r3
 800f184:	4680      	movhi	r8, r0
 800f186:	2303      	movs	r3, #3
 800f188:	6123      	str	r3, [r4, #16]
 800f18a:	9b05      	ldr	r3, [sp, #20]
 800f18c:	f023 0204 	bic.w	r2, r3, #4
 800f190:	6022      	str	r2, [r4, #0]
 800f192:	f04f 0900 	mov.w	r9, #0
 800f196:	9700      	str	r7, [sp, #0]
 800f198:	4633      	mov	r3, r6
 800f19a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f19c:	4621      	mov	r1, r4
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 f9d8 	bl	800f554 <_printf_common>
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f040 8090 	bne.w	800f2ca <_printf_float+0x1e2>
 800f1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ae:	b00d      	add	sp, #52	; 0x34
 800f1b0:	ecbd 8b02 	vpop	{d8}
 800f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b8:	4642      	mov	r2, r8
 800f1ba:	464b      	mov	r3, r9
 800f1bc:	4640      	mov	r0, r8
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f7f1 fce4 	bl	8000b8c <__aeabi_dcmpun>
 800f1c4:	b140      	cbz	r0, 800f1d8 <_printf_float+0xf0>
 800f1c6:	464b      	mov	r3, r9
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	bfbc      	itt	lt
 800f1cc:	232d      	movlt	r3, #45	; 0x2d
 800f1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f1d2:	487f      	ldr	r0, [pc, #508]	; (800f3d0 <_printf_float+0x2e8>)
 800f1d4:	4b7f      	ldr	r3, [pc, #508]	; (800f3d4 <_printf_float+0x2ec>)
 800f1d6:	e7d1      	b.n	800f17c <_printf_float+0x94>
 800f1d8:	6863      	ldr	r3, [r4, #4]
 800f1da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f1de:	9206      	str	r2, [sp, #24]
 800f1e0:	1c5a      	adds	r2, r3, #1
 800f1e2:	d13f      	bne.n	800f264 <_printf_float+0x17c>
 800f1e4:	2306      	movs	r3, #6
 800f1e6:	6063      	str	r3, [r4, #4]
 800f1e8:	9b05      	ldr	r3, [sp, #20]
 800f1ea:	6861      	ldr	r1, [r4, #4]
 800f1ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	9303      	str	r3, [sp, #12]
 800f1f4:	ab0a      	add	r3, sp, #40	; 0x28
 800f1f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f1fa:	ab09      	add	r3, sp, #36	; 0x24
 800f1fc:	ec49 8b10 	vmov	d0, r8, r9
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	6022      	str	r2, [r4, #0]
 800f204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f208:	4628      	mov	r0, r5
 800f20a:	f7ff fecd 	bl	800efa8 <__cvt>
 800f20e:	9b06      	ldr	r3, [sp, #24]
 800f210:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f212:	2b47      	cmp	r3, #71	; 0x47
 800f214:	4680      	mov	r8, r0
 800f216:	d108      	bne.n	800f22a <_printf_float+0x142>
 800f218:	1cc8      	adds	r0, r1, #3
 800f21a:	db02      	blt.n	800f222 <_printf_float+0x13a>
 800f21c:	6863      	ldr	r3, [r4, #4]
 800f21e:	4299      	cmp	r1, r3
 800f220:	dd41      	ble.n	800f2a6 <_printf_float+0x1be>
 800f222:	f1ab 0b02 	sub.w	fp, fp, #2
 800f226:	fa5f fb8b 	uxtb.w	fp, fp
 800f22a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f22e:	d820      	bhi.n	800f272 <_printf_float+0x18a>
 800f230:	3901      	subs	r1, #1
 800f232:	465a      	mov	r2, fp
 800f234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f238:	9109      	str	r1, [sp, #36]	; 0x24
 800f23a:	f7ff ff17 	bl	800f06c <__exponent>
 800f23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f240:	1813      	adds	r3, r2, r0
 800f242:	2a01      	cmp	r2, #1
 800f244:	4681      	mov	r9, r0
 800f246:	6123      	str	r3, [r4, #16]
 800f248:	dc02      	bgt.n	800f250 <_printf_float+0x168>
 800f24a:	6822      	ldr	r2, [r4, #0]
 800f24c:	07d2      	lsls	r2, r2, #31
 800f24e:	d501      	bpl.n	800f254 <_printf_float+0x16c>
 800f250:	3301      	adds	r3, #1
 800f252:	6123      	str	r3, [r4, #16]
 800f254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d09c      	beq.n	800f196 <_printf_float+0xae>
 800f25c:	232d      	movs	r3, #45	; 0x2d
 800f25e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f262:	e798      	b.n	800f196 <_printf_float+0xae>
 800f264:	9a06      	ldr	r2, [sp, #24]
 800f266:	2a47      	cmp	r2, #71	; 0x47
 800f268:	d1be      	bne.n	800f1e8 <_printf_float+0x100>
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1bc      	bne.n	800f1e8 <_printf_float+0x100>
 800f26e:	2301      	movs	r3, #1
 800f270:	e7b9      	b.n	800f1e6 <_printf_float+0xfe>
 800f272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f276:	d118      	bne.n	800f2aa <_printf_float+0x1c2>
 800f278:	2900      	cmp	r1, #0
 800f27a:	6863      	ldr	r3, [r4, #4]
 800f27c:	dd0b      	ble.n	800f296 <_printf_float+0x1ae>
 800f27e:	6121      	str	r1, [r4, #16]
 800f280:	b913      	cbnz	r3, 800f288 <_printf_float+0x1a0>
 800f282:	6822      	ldr	r2, [r4, #0]
 800f284:	07d0      	lsls	r0, r2, #31
 800f286:	d502      	bpl.n	800f28e <_printf_float+0x1a6>
 800f288:	3301      	adds	r3, #1
 800f28a:	440b      	add	r3, r1
 800f28c:	6123      	str	r3, [r4, #16]
 800f28e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f290:	f04f 0900 	mov.w	r9, #0
 800f294:	e7de      	b.n	800f254 <_printf_float+0x16c>
 800f296:	b913      	cbnz	r3, 800f29e <_printf_float+0x1b6>
 800f298:	6822      	ldr	r2, [r4, #0]
 800f29a:	07d2      	lsls	r2, r2, #31
 800f29c:	d501      	bpl.n	800f2a2 <_printf_float+0x1ba>
 800f29e:	3302      	adds	r3, #2
 800f2a0:	e7f4      	b.n	800f28c <_printf_float+0x1a4>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e7f2      	b.n	800f28c <_printf_float+0x1a4>
 800f2a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ac:	4299      	cmp	r1, r3
 800f2ae:	db05      	blt.n	800f2bc <_printf_float+0x1d4>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	6121      	str	r1, [r4, #16]
 800f2b4:	07d8      	lsls	r0, r3, #31
 800f2b6:	d5ea      	bpl.n	800f28e <_printf_float+0x1a6>
 800f2b8:	1c4b      	adds	r3, r1, #1
 800f2ba:	e7e7      	b.n	800f28c <_printf_float+0x1a4>
 800f2bc:	2900      	cmp	r1, #0
 800f2be:	bfd4      	ite	le
 800f2c0:	f1c1 0202 	rsble	r2, r1, #2
 800f2c4:	2201      	movgt	r2, #1
 800f2c6:	4413      	add	r3, r2
 800f2c8:	e7e0      	b.n	800f28c <_printf_float+0x1a4>
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	055a      	lsls	r2, r3, #21
 800f2ce:	d407      	bmi.n	800f2e0 <_printf_float+0x1f8>
 800f2d0:	6923      	ldr	r3, [r4, #16]
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	47b8      	blx	r7
 800f2da:	3001      	adds	r0, #1
 800f2dc:	d12c      	bne.n	800f338 <_printf_float+0x250>
 800f2de:	e764      	b.n	800f1aa <_printf_float+0xc2>
 800f2e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2e4:	f240 80e0 	bls.w	800f4a8 <_printf_float+0x3c0>
 800f2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f7f1 fc1a 	bl	8000b28 <__aeabi_dcmpeq>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d034      	beq.n	800f362 <_printf_float+0x27a>
 800f2f8:	4a37      	ldr	r2, [pc, #220]	; (800f3d8 <_printf_float+0x2f0>)
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	4628      	mov	r0, r5
 800f300:	47b8      	blx	r7
 800f302:	3001      	adds	r0, #1
 800f304:	f43f af51 	beq.w	800f1aa <_printf_float+0xc2>
 800f308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f30c:	429a      	cmp	r2, r3
 800f30e:	db02      	blt.n	800f316 <_printf_float+0x22e>
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	07d8      	lsls	r0, r3, #31
 800f314:	d510      	bpl.n	800f338 <_printf_float+0x250>
 800f316:	ee18 3a10 	vmov	r3, s16
 800f31a:	4652      	mov	r2, sl
 800f31c:	4631      	mov	r1, r6
 800f31e:	4628      	mov	r0, r5
 800f320:	47b8      	blx	r7
 800f322:	3001      	adds	r0, #1
 800f324:	f43f af41 	beq.w	800f1aa <_printf_float+0xc2>
 800f328:	f04f 0800 	mov.w	r8, #0
 800f32c:	f104 091a 	add.w	r9, r4, #26
 800f330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f332:	3b01      	subs	r3, #1
 800f334:	4543      	cmp	r3, r8
 800f336:	dc09      	bgt.n	800f34c <_printf_float+0x264>
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	079b      	lsls	r3, r3, #30
 800f33c:	f100 8105 	bmi.w	800f54a <_printf_float+0x462>
 800f340:	68e0      	ldr	r0, [r4, #12]
 800f342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f344:	4298      	cmp	r0, r3
 800f346:	bfb8      	it	lt
 800f348:	4618      	movlt	r0, r3
 800f34a:	e730      	b.n	800f1ae <_printf_float+0xc6>
 800f34c:	2301      	movs	r3, #1
 800f34e:	464a      	mov	r2, r9
 800f350:	4631      	mov	r1, r6
 800f352:	4628      	mov	r0, r5
 800f354:	47b8      	blx	r7
 800f356:	3001      	adds	r0, #1
 800f358:	f43f af27 	beq.w	800f1aa <_printf_float+0xc2>
 800f35c:	f108 0801 	add.w	r8, r8, #1
 800f360:	e7e6      	b.n	800f330 <_printf_float+0x248>
 800f362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f364:	2b00      	cmp	r3, #0
 800f366:	dc39      	bgt.n	800f3dc <_printf_float+0x2f4>
 800f368:	4a1b      	ldr	r2, [pc, #108]	; (800f3d8 <_printf_float+0x2f0>)
 800f36a:	2301      	movs	r3, #1
 800f36c:	4631      	mov	r1, r6
 800f36e:	4628      	mov	r0, r5
 800f370:	47b8      	blx	r7
 800f372:	3001      	adds	r0, #1
 800f374:	f43f af19 	beq.w	800f1aa <_printf_float+0xc2>
 800f378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f37c:	4313      	orrs	r3, r2
 800f37e:	d102      	bne.n	800f386 <_printf_float+0x29e>
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	07d9      	lsls	r1, r3, #31
 800f384:	d5d8      	bpl.n	800f338 <_printf_float+0x250>
 800f386:	ee18 3a10 	vmov	r3, s16
 800f38a:	4652      	mov	r2, sl
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	f43f af09 	beq.w	800f1aa <_printf_float+0xc2>
 800f398:	f04f 0900 	mov.w	r9, #0
 800f39c:	f104 0a1a 	add.w	sl, r4, #26
 800f3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a2:	425b      	negs	r3, r3
 800f3a4:	454b      	cmp	r3, r9
 800f3a6:	dc01      	bgt.n	800f3ac <_printf_float+0x2c4>
 800f3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3aa:	e792      	b.n	800f2d2 <_printf_float+0x1ea>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	4652      	mov	r2, sl
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	47b8      	blx	r7
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f43f aef7 	beq.w	800f1aa <_printf_float+0xc2>
 800f3bc:	f109 0901 	add.w	r9, r9, #1
 800f3c0:	e7ee      	b.n	800f3a0 <_printf_float+0x2b8>
 800f3c2:	bf00      	nop
 800f3c4:	7fefffff 	.word	0x7fefffff
 800f3c8:	08027714 	.word	0x08027714
 800f3cc:	08027718 	.word	0x08027718
 800f3d0:	08027720 	.word	0x08027720
 800f3d4:	0802771c 	.word	0x0802771c
 800f3d8:	08027724 	.word	0x08027724
 800f3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	bfa8      	it	ge
 800f3e4:	461a      	movge	r2, r3
 800f3e6:	2a00      	cmp	r2, #0
 800f3e8:	4691      	mov	r9, r2
 800f3ea:	dc37      	bgt.n	800f45c <_printf_float+0x374>
 800f3ec:	f04f 0b00 	mov.w	fp, #0
 800f3f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3f4:	f104 021a 	add.w	r2, r4, #26
 800f3f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3fa:	9305      	str	r3, [sp, #20]
 800f3fc:	eba3 0309 	sub.w	r3, r3, r9
 800f400:	455b      	cmp	r3, fp
 800f402:	dc33      	bgt.n	800f46c <_printf_float+0x384>
 800f404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f408:	429a      	cmp	r2, r3
 800f40a:	db3b      	blt.n	800f484 <_printf_float+0x39c>
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	07da      	lsls	r2, r3, #31
 800f410:	d438      	bmi.n	800f484 <_printf_float+0x39c>
 800f412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f414:	9a05      	ldr	r2, [sp, #20]
 800f416:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f418:	1a9a      	subs	r2, r3, r2
 800f41a:	eba3 0901 	sub.w	r9, r3, r1
 800f41e:	4591      	cmp	r9, r2
 800f420:	bfa8      	it	ge
 800f422:	4691      	movge	r9, r2
 800f424:	f1b9 0f00 	cmp.w	r9, #0
 800f428:	dc35      	bgt.n	800f496 <_printf_float+0x3ae>
 800f42a:	f04f 0800 	mov.w	r8, #0
 800f42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f432:	f104 0a1a 	add.w	sl, r4, #26
 800f436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f43a:	1a9b      	subs	r3, r3, r2
 800f43c:	eba3 0309 	sub.w	r3, r3, r9
 800f440:	4543      	cmp	r3, r8
 800f442:	f77f af79 	ble.w	800f338 <_printf_float+0x250>
 800f446:	2301      	movs	r3, #1
 800f448:	4652      	mov	r2, sl
 800f44a:	4631      	mov	r1, r6
 800f44c:	4628      	mov	r0, r5
 800f44e:	47b8      	blx	r7
 800f450:	3001      	adds	r0, #1
 800f452:	f43f aeaa 	beq.w	800f1aa <_printf_float+0xc2>
 800f456:	f108 0801 	add.w	r8, r8, #1
 800f45a:	e7ec      	b.n	800f436 <_printf_float+0x34e>
 800f45c:	4613      	mov	r3, r2
 800f45e:	4631      	mov	r1, r6
 800f460:	4642      	mov	r2, r8
 800f462:	4628      	mov	r0, r5
 800f464:	47b8      	blx	r7
 800f466:	3001      	adds	r0, #1
 800f468:	d1c0      	bne.n	800f3ec <_printf_float+0x304>
 800f46a:	e69e      	b.n	800f1aa <_printf_float+0xc2>
 800f46c:	2301      	movs	r3, #1
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	9205      	str	r2, [sp, #20]
 800f474:	47b8      	blx	r7
 800f476:	3001      	adds	r0, #1
 800f478:	f43f ae97 	beq.w	800f1aa <_printf_float+0xc2>
 800f47c:	9a05      	ldr	r2, [sp, #20]
 800f47e:	f10b 0b01 	add.w	fp, fp, #1
 800f482:	e7b9      	b.n	800f3f8 <_printf_float+0x310>
 800f484:	ee18 3a10 	vmov	r3, s16
 800f488:	4652      	mov	r2, sl
 800f48a:	4631      	mov	r1, r6
 800f48c:	4628      	mov	r0, r5
 800f48e:	47b8      	blx	r7
 800f490:	3001      	adds	r0, #1
 800f492:	d1be      	bne.n	800f412 <_printf_float+0x32a>
 800f494:	e689      	b.n	800f1aa <_printf_float+0xc2>
 800f496:	9a05      	ldr	r2, [sp, #20]
 800f498:	464b      	mov	r3, r9
 800f49a:	4442      	add	r2, r8
 800f49c:	4631      	mov	r1, r6
 800f49e:	4628      	mov	r0, r5
 800f4a0:	47b8      	blx	r7
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	d1c1      	bne.n	800f42a <_printf_float+0x342>
 800f4a6:	e680      	b.n	800f1aa <_printf_float+0xc2>
 800f4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4aa:	2a01      	cmp	r2, #1
 800f4ac:	dc01      	bgt.n	800f4b2 <_printf_float+0x3ca>
 800f4ae:	07db      	lsls	r3, r3, #31
 800f4b0:	d538      	bpl.n	800f524 <_printf_float+0x43c>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	4642      	mov	r2, r8
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	47b8      	blx	r7
 800f4bc:	3001      	adds	r0, #1
 800f4be:	f43f ae74 	beq.w	800f1aa <_printf_float+0xc2>
 800f4c2:	ee18 3a10 	vmov	r3, s16
 800f4c6:	4652      	mov	r2, sl
 800f4c8:	4631      	mov	r1, r6
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	47b8      	blx	r7
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	f43f ae6b 	beq.w	800f1aa <_printf_float+0xc2>
 800f4d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4d8:	2200      	movs	r2, #0
 800f4da:	2300      	movs	r3, #0
 800f4dc:	f7f1 fb24 	bl	8000b28 <__aeabi_dcmpeq>
 800f4e0:	b9d8      	cbnz	r0, 800f51a <_printf_float+0x432>
 800f4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e4:	f108 0201 	add.w	r2, r8, #1
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	4631      	mov	r1, r6
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	47b8      	blx	r7
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d10e      	bne.n	800f512 <_printf_float+0x42a>
 800f4f4:	e659      	b.n	800f1aa <_printf_float+0xc2>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	4652      	mov	r2, sl
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	f43f ae52 	beq.w	800f1aa <_printf_float+0xc2>
 800f506:	f108 0801 	add.w	r8, r8, #1
 800f50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f50c:	3b01      	subs	r3, #1
 800f50e:	4543      	cmp	r3, r8
 800f510:	dcf1      	bgt.n	800f4f6 <_printf_float+0x40e>
 800f512:	464b      	mov	r3, r9
 800f514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f518:	e6dc      	b.n	800f2d4 <_printf_float+0x1ec>
 800f51a:	f04f 0800 	mov.w	r8, #0
 800f51e:	f104 0a1a 	add.w	sl, r4, #26
 800f522:	e7f2      	b.n	800f50a <_printf_float+0x422>
 800f524:	2301      	movs	r3, #1
 800f526:	4642      	mov	r2, r8
 800f528:	e7df      	b.n	800f4ea <_printf_float+0x402>
 800f52a:	2301      	movs	r3, #1
 800f52c:	464a      	mov	r2, r9
 800f52e:	4631      	mov	r1, r6
 800f530:	4628      	mov	r0, r5
 800f532:	47b8      	blx	r7
 800f534:	3001      	adds	r0, #1
 800f536:	f43f ae38 	beq.w	800f1aa <_printf_float+0xc2>
 800f53a:	f108 0801 	add.w	r8, r8, #1
 800f53e:	68e3      	ldr	r3, [r4, #12]
 800f540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f542:	1a5b      	subs	r3, r3, r1
 800f544:	4543      	cmp	r3, r8
 800f546:	dcf0      	bgt.n	800f52a <_printf_float+0x442>
 800f548:	e6fa      	b.n	800f340 <_printf_float+0x258>
 800f54a:	f04f 0800 	mov.w	r8, #0
 800f54e:	f104 0919 	add.w	r9, r4, #25
 800f552:	e7f4      	b.n	800f53e <_printf_float+0x456>

0800f554 <_printf_common>:
 800f554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f558:	4616      	mov	r6, r2
 800f55a:	4699      	mov	r9, r3
 800f55c:	688a      	ldr	r2, [r1, #8]
 800f55e:	690b      	ldr	r3, [r1, #16]
 800f560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f564:	4293      	cmp	r3, r2
 800f566:	bfb8      	it	lt
 800f568:	4613      	movlt	r3, r2
 800f56a:	6033      	str	r3, [r6, #0]
 800f56c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f570:	4607      	mov	r7, r0
 800f572:	460c      	mov	r4, r1
 800f574:	b10a      	cbz	r2, 800f57a <_printf_common+0x26>
 800f576:	3301      	adds	r3, #1
 800f578:	6033      	str	r3, [r6, #0]
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	0699      	lsls	r1, r3, #26
 800f57e:	bf42      	ittt	mi
 800f580:	6833      	ldrmi	r3, [r6, #0]
 800f582:	3302      	addmi	r3, #2
 800f584:	6033      	strmi	r3, [r6, #0]
 800f586:	6825      	ldr	r5, [r4, #0]
 800f588:	f015 0506 	ands.w	r5, r5, #6
 800f58c:	d106      	bne.n	800f59c <_printf_common+0x48>
 800f58e:	f104 0a19 	add.w	sl, r4, #25
 800f592:	68e3      	ldr	r3, [r4, #12]
 800f594:	6832      	ldr	r2, [r6, #0]
 800f596:	1a9b      	subs	r3, r3, r2
 800f598:	42ab      	cmp	r3, r5
 800f59a:	dc26      	bgt.n	800f5ea <_printf_common+0x96>
 800f59c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5a0:	1e13      	subs	r3, r2, #0
 800f5a2:	6822      	ldr	r2, [r4, #0]
 800f5a4:	bf18      	it	ne
 800f5a6:	2301      	movne	r3, #1
 800f5a8:	0692      	lsls	r2, r2, #26
 800f5aa:	d42b      	bmi.n	800f604 <_printf_common+0xb0>
 800f5ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5b0:	4649      	mov	r1, r9
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	47c0      	blx	r8
 800f5b6:	3001      	adds	r0, #1
 800f5b8:	d01e      	beq.n	800f5f8 <_printf_common+0xa4>
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	68e5      	ldr	r5, [r4, #12]
 800f5be:	6832      	ldr	r2, [r6, #0]
 800f5c0:	f003 0306 	and.w	r3, r3, #6
 800f5c4:	2b04      	cmp	r3, #4
 800f5c6:	bf08      	it	eq
 800f5c8:	1aad      	subeq	r5, r5, r2
 800f5ca:	68a3      	ldr	r3, [r4, #8]
 800f5cc:	6922      	ldr	r2, [r4, #16]
 800f5ce:	bf0c      	ite	eq
 800f5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5d4:	2500      	movne	r5, #0
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	bfc4      	itt	gt
 800f5da:	1a9b      	subgt	r3, r3, r2
 800f5dc:	18ed      	addgt	r5, r5, r3
 800f5de:	2600      	movs	r6, #0
 800f5e0:	341a      	adds	r4, #26
 800f5e2:	42b5      	cmp	r5, r6
 800f5e4:	d11a      	bne.n	800f61c <_printf_common+0xc8>
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	e008      	b.n	800f5fc <_printf_common+0xa8>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	4652      	mov	r2, sl
 800f5ee:	4649      	mov	r1, r9
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	47c0      	blx	r8
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	d103      	bne.n	800f600 <_printf_common+0xac>
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f600:	3501      	adds	r5, #1
 800f602:	e7c6      	b.n	800f592 <_printf_common+0x3e>
 800f604:	18e1      	adds	r1, r4, r3
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	2030      	movs	r0, #48	; 0x30
 800f60a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f60e:	4422      	add	r2, r4
 800f610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f618:	3302      	adds	r3, #2
 800f61a:	e7c7      	b.n	800f5ac <_printf_common+0x58>
 800f61c:	2301      	movs	r3, #1
 800f61e:	4622      	mov	r2, r4
 800f620:	4649      	mov	r1, r9
 800f622:	4638      	mov	r0, r7
 800f624:	47c0      	blx	r8
 800f626:	3001      	adds	r0, #1
 800f628:	d0e6      	beq.n	800f5f8 <_printf_common+0xa4>
 800f62a:	3601      	adds	r6, #1
 800f62c:	e7d9      	b.n	800f5e2 <_printf_common+0x8e>
	...

0800f630 <_printf_i>:
 800f630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f634:	7e0f      	ldrb	r7, [r1, #24]
 800f636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f638:	2f78      	cmp	r7, #120	; 0x78
 800f63a:	4691      	mov	r9, r2
 800f63c:	4680      	mov	r8, r0
 800f63e:	460c      	mov	r4, r1
 800f640:	469a      	mov	sl, r3
 800f642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f646:	d807      	bhi.n	800f658 <_printf_i+0x28>
 800f648:	2f62      	cmp	r7, #98	; 0x62
 800f64a:	d80a      	bhi.n	800f662 <_printf_i+0x32>
 800f64c:	2f00      	cmp	r7, #0
 800f64e:	f000 80d8 	beq.w	800f802 <_printf_i+0x1d2>
 800f652:	2f58      	cmp	r7, #88	; 0x58
 800f654:	f000 80a3 	beq.w	800f79e <_printf_i+0x16e>
 800f658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f65c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f660:	e03a      	b.n	800f6d8 <_printf_i+0xa8>
 800f662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f666:	2b15      	cmp	r3, #21
 800f668:	d8f6      	bhi.n	800f658 <_printf_i+0x28>
 800f66a:	a101      	add	r1, pc, #4	; (adr r1, 800f670 <_printf_i+0x40>)
 800f66c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f670:	0800f6c9 	.word	0x0800f6c9
 800f674:	0800f6dd 	.word	0x0800f6dd
 800f678:	0800f659 	.word	0x0800f659
 800f67c:	0800f659 	.word	0x0800f659
 800f680:	0800f659 	.word	0x0800f659
 800f684:	0800f659 	.word	0x0800f659
 800f688:	0800f6dd 	.word	0x0800f6dd
 800f68c:	0800f659 	.word	0x0800f659
 800f690:	0800f659 	.word	0x0800f659
 800f694:	0800f659 	.word	0x0800f659
 800f698:	0800f659 	.word	0x0800f659
 800f69c:	0800f7e9 	.word	0x0800f7e9
 800f6a0:	0800f70d 	.word	0x0800f70d
 800f6a4:	0800f7cb 	.word	0x0800f7cb
 800f6a8:	0800f659 	.word	0x0800f659
 800f6ac:	0800f659 	.word	0x0800f659
 800f6b0:	0800f80b 	.word	0x0800f80b
 800f6b4:	0800f659 	.word	0x0800f659
 800f6b8:	0800f70d 	.word	0x0800f70d
 800f6bc:	0800f659 	.word	0x0800f659
 800f6c0:	0800f659 	.word	0x0800f659
 800f6c4:	0800f7d3 	.word	0x0800f7d3
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	1d1a      	adds	r2, r3, #4
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	602a      	str	r2, [r5, #0]
 800f6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e0a3      	b.n	800f824 <_printf_i+0x1f4>
 800f6dc:	6820      	ldr	r0, [r4, #0]
 800f6de:	6829      	ldr	r1, [r5, #0]
 800f6e0:	0606      	lsls	r6, r0, #24
 800f6e2:	f101 0304 	add.w	r3, r1, #4
 800f6e6:	d50a      	bpl.n	800f6fe <_printf_i+0xce>
 800f6e8:	680e      	ldr	r6, [r1, #0]
 800f6ea:	602b      	str	r3, [r5, #0]
 800f6ec:	2e00      	cmp	r6, #0
 800f6ee:	da03      	bge.n	800f6f8 <_printf_i+0xc8>
 800f6f0:	232d      	movs	r3, #45	; 0x2d
 800f6f2:	4276      	negs	r6, r6
 800f6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6f8:	485e      	ldr	r0, [pc, #376]	; (800f874 <_printf_i+0x244>)
 800f6fa:	230a      	movs	r3, #10
 800f6fc:	e019      	b.n	800f732 <_printf_i+0x102>
 800f6fe:	680e      	ldr	r6, [r1, #0]
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f706:	bf18      	it	ne
 800f708:	b236      	sxthne	r6, r6
 800f70a:	e7ef      	b.n	800f6ec <_printf_i+0xbc>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	6820      	ldr	r0, [r4, #0]
 800f710:	1d19      	adds	r1, r3, #4
 800f712:	6029      	str	r1, [r5, #0]
 800f714:	0601      	lsls	r1, r0, #24
 800f716:	d501      	bpl.n	800f71c <_printf_i+0xec>
 800f718:	681e      	ldr	r6, [r3, #0]
 800f71a:	e002      	b.n	800f722 <_printf_i+0xf2>
 800f71c:	0646      	lsls	r6, r0, #25
 800f71e:	d5fb      	bpl.n	800f718 <_printf_i+0xe8>
 800f720:	881e      	ldrh	r6, [r3, #0]
 800f722:	4854      	ldr	r0, [pc, #336]	; (800f874 <_printf_i+0x244>)
 800f724:	2f6f      	cmp	r7, #111	; 0x6f
 800f726:	bf0c      	ite	eq
 800f728:	2308      	moveq	r3, #8
 800f72a:	230a      	movne	r3, #10
 800f72c:	2100      	movs	r1, #0
 800f72e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f732:	6865      	ldr	r5, [r4, #4]
 800f734:	60a5      	str	r5, [r4, #8]
 800f736:	2d00      	cmp	r5, #0
 800f738:	bfa2      	ittt	ge
 800f73a:	6821      	ldrge	r1, [r4, #0]
 800f73c:	f021 0104 	bicge.w	r1, r1, #4
 800f740:	6021      	strge	r1, [r4, #0]
 800f742:	b90e      	cbnz	r6, 800f748 <_printf_i+0x118>
 800f744:	2d00      	cmp	r5, #0
 800f746:	d04d      	beq.n	800f7e4 <_printf_i+0x1b4>
 800f748:	4615      	mov	r5, r2
 800f74a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f74e:	fb03 6711 	mls	r7, r3, r1, r6
 800f752:	5dc7      	ldrb	r7, [r0, r7]
 800f754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f758:	4637      	mov	r7, r6
 800f75a:	42bb      	cmp	r3, r7
 800f75c:	460e      	mov	r6, r1
 800f75e:	d9f4      	bls.n	800f74a <_printf_i+0x11a>
 800f760:	2b08      	cmp	r3, #8
 800f762:	d10b      	bne.n	800f77c <_printf_i+0x14c>
 800f764:	6823      	ldr	r3, [r4, #0]
 800f766:	07de      	lsls	r6, r3, #31
 800f768:	d508      	bpl.n	800f77c <_printf_i+0x14c>
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	6861      	ldr	r1, [r4, #4]
 800f76e:	4299      	cmp	r1, r3
 800f770:	bfde      	ittt	le
 800f772:	2330      	movle	r3, #48	; 0x30
 800f774:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f77c:	1b52      	subs	r2, r2, r5
 800f77e:	6122      	str	r2, [r4, #16]
 800f780:	f8cd a000 	str.w	sl, [sp]
 800f784:	464b      	mov	r3, r9
 800f786:	aa03      	add	r2, sp, #12
 800f788:	4621      	mov	r1, r4
 800f78a:	4640      	mov	r0, r8
 800f78c:	f7ff fee2 	bl	800f554 <_printf_common>
 800f790:	3001      	adds	r0, #1
 800f792:	d14c      	bne.n	800f82e <_printf_i+0x1fe>
 800f794:	f04f 30ff 	mov.w	r0, #4294967295
 800f798:	b004      	add	sp, #16
 800f79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79e:	4835      	ldr	r0, [pc, #212]	; (800f874 <_printf_i+0x244>)
 800f7a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7a4:	6829      	ldr	r1, [r5, #0]
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7ac:	6029      	str	r1, [r5, #0]
 800f7ae:	061d      	lsls	r5, r3, #24
 800f7b0:	d514      	bpl.n	800f7dc <_printf_i+0x1ac>
 800f7b2:	07df      	lsls	r7, r3, #31
 800f7b4:	bf44      	itt	mi
 800f7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800f7ba:	6023      	strmi	r3, [r4, #0]
 800f7bc:	b91e      	cbnz	r6, 800f7c6 <_printf_i+0x196>
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	f023 0320 	bic.w	r3, r3, #32
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	2310      	movs	r3, #16
 800f7c8:	e7b0      	b.n	800f72c <_printf_i+0xfc>
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	f043 0320 	orr.w	r3, r3, #32
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	2378      	movs	r3, #120	; 0x78
 800f7d4:	4828      	ldr	r0, [pc, #160]	; (800f878 <_printf_i+0x248>)
 800f7d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7da:	e7e3      	b.n	800f7a4 <_printf_i+0x174>
 800f7dc:	0659      	lsls	r1, r3, #25
 800f7de:	bf48      	it	mi
 800f7e0:	b2b6      	uxthmi	r6, r6
 800f7e2:	e7e6      	b.n	800f7b2 <_printf_i+0x182>
 800f7e4:	4615      	mov	r5, r2
 800f7e6:	e7bb      	b.n	800f760 <_printf_i+0x130>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	6826      	ldr	r6, [r4, #0]
 800f7ec:	6961      	ldr	r1, [r4, #20]
 800f7ee:	1d18      	adds	r0, r3, #4
 800f7f0:	6028      	str	r0, [r5, #0]
 800f7f2:	0635      	lsls	r5, r6, #24
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	d501      	bpl.n	800f7fc <_printf_i+0x1cc>
 800f7f8:	6019      	str	r1, [r3, #0]
 800f7fa:	e002      	b.n	800f802 <_printf_i+0x1d2>
 800f7fc:	0670      	lsls	r0, r6, #25
 800f7fe:	d5fb      	bpl.n	800f7f8 <_printf_i+0x1c8>
 800f800:	8019      	strh	r1, [r3, #0]
 800f802:	2300      	movs	r3, #0
 800f804:	6123      	str	r3, [r4, #16]
 800f806:	4615      	mov	r5, r2
 800f808:	e7ba      	b.n	800f780 <_printf_i+0x150>
 800f80a:	682b      	ldr	r3, [r5, #0]
 800f80c:	1d1a      	adds	r2, r3, #4
 800f80e:	602a      	str	r2, [r5, #0]
 800f810:	681d      	ldr	r5, [r3, #0]
 800f812:	6862      	ldr	r2, [r4, #4]
 800f814:	2100      	movs	r1, #0
 800f816:	4628      	mov	r0, r5
 800f818:	f7f0 fd12 	bl	8000240 <memchr>
 800f81c:	b108      	cbz	r0, 800f822 <_printf_i+0x1f2>
 800f81e:	1b40      	subs	r0, r0, r5
 800f820:	6060      	str	r0, [r4, #4]
 800f822:	6863      	ldr	r3, [r4, #4]
 800f824:	6123      	str	r3, [r4, #16]
 800f826:	2300      	movs	r3, #0
 800f828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f82c:	e7a8      	b.n	800f780 <_printf_i+0x150>
 800f82e:	6923      	ldr	r3, [r4, #16]
 800f830:	462a      	mov	r2, r5
 800f832:	4649      	mov	r1, r9
 800f834:	4640      	mov	r0, r8
 800f836:	47d0      	blx	sl
 800f838:	3001      	adds	r0, #1
 800f83a:	d0ab      	beq.n	800f794 <_printf_i+0x164>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	079b      	lsls	r3, r3, #30
 800f840:	d413      	bmi.n	800f86a <_printf_i+0x23a>
 800f842:	68e0      	ldr	r0, [r4, #12]
 800f844:	9b03      	ldr	r3, [sp, #12]
 800f846:	4298      	cmp	r0, r3
 800f848:	bfb8      	it	lt
 800f84a:	4618      	movlt	r0, r3
 800f84c:	e7a4      	b.n	800f798 <_printf_i+0x168>
 800f84e:	2301      	movs	r3, #1
 800f850:	4632      	mov	r2, r6
 800f852:	4649      	mov	r1, r9
 800f854:	4640      	mov	r0, r8
 800f856:	47d0      	blx	sl
 800f858:	3001      	adds	r0, #1
 800f85a:	d09b      	beq.n	800f794 <_printf_i+0x164>
 800f85c:	3501      	adds	r5, #1
 800f85e:	68e3      	ldr	r3, [r4, #12]
 800f860:	9903      	ldr	r1, [sp, #12]
 800f862:	1a5b      	subs	r3, r3, r1
 800f864:	42ab      	cmp	r3, r5
 800f866:	dcf2      	bgt.n	800f84e <_printf_i+0x21e>
 800f868:	e7eb      	b.n	800f842 <_printf_i+0x212>
 800f86a:	2500      	movs	r5, #0
 800f86c:	f104 0619 	add.w	r6, r4, #25
 800f870:	e7f5      	b.n	800f85e <_printf_i+0x22e>
 800f872:	bf00      	nop
 800f874:	08027726 	.word	0x08027726
 800f878:	08027737 	.word	0x08027737

0800f87c <_sbrk_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4d06      	ldr	r5, [pc, #24]	; (800f898 <_sbrk_r+0x1c>)
 800f880:	2300      	movs	r3, #0
 800f882:	4604      	mov	r4, r0
 800f884:	4608      	mov	r0, r1
 800f886:	602b      	str	r3, [r5, #0]
 800f888:	f7f2 fb6a 	bl	8001f60 <_sbrk>
 800f88c:	1c43      	adds	r3, r0, #1
 800f88e:	d102      	bne.n	800f896 <_sbrk_r+0x1a>
 800f890:	682b      	ldr	r3, [r5, #0]
 800f892:	b103      	cbz	r3, 800f896 <_sbrk_r+0x1a>
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	bd38      	pop	{r3, r4, r5, pc}
 800f898:	20005528 	.word	0x20005528

0800f89c <siprintf>:
 800f89c:	b40e      	push	{r1, r2, r3}
 800f89e:	b500      	push	{lr}
 800f8a0:	b09c      	sub	sp, #112	; 0x70
 800f8a2:	ab1d      	add	r3, sp, #116	; 0x74
 800f8a4:	9002      	str	r0, [sp, #8]
 800f8a6:	9006      	str	r0, [sp, #24]
 800f8a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f8ac:	4809      	ldr	r0, [pc, #36]	; (800f8d4 <siprintf+0x38>)
 800f8ae:	9107      	str	r1, [sp, #28]
 800f8b0:	9104      	str	r1, [sp, #16]
 800f8b2:	4909      	ldr	r1, [pc, #36]	; (800f8d8 <siprintf+0x3c>)
 800f8b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b8:	9105      	str	r1, [sp, #20]
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	a902      	add	r1, sp, #8
 800f8c0:	f001 fac4 	bl	8010e4c <_svfiprintf_r>
 800f8c4:	9b02      	ldr	r3, [sp, #8]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	701a      	strb	r2, [r3, #0]
 800f8ca:	b01c      	add	sp, #112	; 0x70
 800f8cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8d0:	b003      	add	sp, #12
 800f8d2:	4770      	bx	lr
 800f8d4:	20000eac 	.word	0x20000eac
 800f8d8:	ffff0208 	.word	0xffff0208

0800f8dc <strcpy>:
 800f8dc:	4603      	mov	r3, r0
 800f8de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8e2:	f803 2b01 	strb.w	r2, [r3], #1
 800f8e6:	2a00      	cmp	r2, #0
 800f8e8:	d1f9      	bne.n	800f8de <strcpy+0x2>
 800f8ea:	4770      	bx	lr

0800f8ec <quorem>:
 800f8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	6903      	ldr	r3, [r0, #16]
 800f8f2:	690c      	ldr	r4, [r1, #16]
 800f8f4:	42a3      	cmp	r3, r4
 800f8f6:	4607      	mov	r7, r0
 800f8f8:	f2c0 8081 	blt.w	800f9fe <quorem+0x112>
 800f8fc:	3c01      	subs	r4, #1
 800f8fe:	f101 0814 	add.w	r8, r1, #20
 800f902:	f100 0514 	add.w	r5, r0, #20
 800f906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f90a:	9301      	str	r3, [sp, #4]
 800f90c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f914:	3301      	adds	r3, #1
 800f916:	429a      	cmp	r2, r3
 800f918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f91c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f920:	fbb2 f6f3 	udiv	r6, r2, r3
 800f924:	d331      	bcc.n	800f98a <quorem+0x9e>
 800f926:	f04f 0e00 	mov.w	lr, #0
 800f92a:	4640      	mov	r0, r8
 800f92c:	46ac      	mov	ip, r5
 800f92e:	46f2      	mov	sl, lr
 800f930:	f850 2b04 	ldr.w	r2, [r0], #4
 800f934:	b293      	uxth	r3, r2
 800f936:	fb06 e303 	mla	r3, r6, r3, lr
 800f93a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f93e:	b29b      	uxth	r3, r3
 800f940:	ebaa 0303 	sub.w	r3, sl, r3
 800f944:	f8dc a000 	ldr.w	sl, [ip]
 800f948:	0c12      	lsrs	r2, r2, #16
 800f94a:	fa13 f38a 	uxtah	r3, r3, sl
 800f94e:	fb06 e202 	mla	r2, r6, r2, lr
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f95a:	b292      	uxth	r2, r2
 800f95c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f964:	f8bd 3000 	ldrh.w	r3, [sp]
 800f968:	4581      	cmp	r9, r0
 800f96a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f96e:	f84c 3b04 	str.w	r3, [ip], #4
 800f972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f976:	d2db      	bcs.n	800f930 <quorem+0x44>
 800f978:	f855 300b 	ldr.w	r3, [r5, fp]
 800f97c:	b92b      	cbnz	r3, 800f98a <quorem+0x9e>
 800f97e:	9b01      	ldr	r3, [sp, #4]
 800f980:	3b04      	subs	r3, #4
 800f982:	429d      	cmp	r5, r3
 800f984:	461a      	mov	r2, r3
 800f986:	d32e      	bcc.n	800f9e6 <quorem+0xfa>
 800f988:	613c      	str	r4, [r7, #16]
 800f98a:	4638      	mov	r0, r7
 800f98c:	f001 f8bc 	bl	8010b08 <__mcmp>
 800f990:	2800      	cmp	r0, #0
 800f992:	db24      	blt.n	800f9de <quorem+0xf2>
 800f994:	3601      	adds	r6, #1
 800f996:	4628      	mov	r0, r5
 800f998:	f04f 0c00 	mov.w	ip, #0
 800f99c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9a0:	f8d0 e000 	ldr.w	lr, [r0]
 800f9a4:	b293      	uxth	r3, r2
 800f9a6:	ebac 0303 	sub.w	r3, ip, r3
 800f9aa:	0c12      	lsrs	r2, r2, #16
 800f9ac:	fa13 f38e 	uxtah	r3, r3, lr
 800f9b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9be:	45c1      	cmp	r9, r8
 800f9c0:	f840 3b04 	str.w	r3, [r0], #4
 800f9c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f9c8:	d2e8      	bcs.n	800f99c <quorem+0xb0>
 800f9ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9d2:	b922      	cbnz	r2, 800f9de <quorem+0xf2>
 800f9d4:	3b04      	subs	r3, #4
 800f9d6:	429d      	cmp	r5, r3
 800f9d8:	461a      	mov	r2, r3
 800f9da:	d30a      	bcc.n	800f9f2 <quorem+0x106>
 800f9dc:	613c      	str	r4, [r7, #16]
 800f9de:	4630      	mov	r0, r6
 800f9e0:	b003      	add	sp, #12
 800f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e6:	6812      	ldr	r2, [r2, #0]
 800f9e8:	3b04      	subs	r3, #4
 800f9ea:	2a00      	cmp	r2, #0
 800f9ec:	d1cc      	bne.n	800f988 <quorem+0x9c>
 800f9ee:	3c01      	subs	r4, #1
 800f9f0:	e7c7      	b.n	800f982 <quorem+0x96>
 800f9f2:	6812      	ldr	r2, [r2, #0]
 800f9f4:	3b04      	subs	r3, #4
 800f9f6:	2a00      	cmp	r2, #0
 800f9f8:	d1f0      	bne.n	800f9dc <quorem+0xf0>
 800f9fa:	3c01      	subs	r4, #1
 800f9fc:	e7eb      	b.n	800f9d6 <quorem+0xea>
 800f9fe:	2000      	movs	r0, #0
 800fa00:	e7ee      	b.n	800f9e0 <quorem+0xf4>
 800fa02:	0000      	movs	r0, r0
 800fa04:	0000      	movs	r0, r0
	...

0800fa08 <_dtoa_r>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	ed2d 8b04 	vpush	{d8-d9}
 800fa10:	ec57 6b10 	vmov	r6, r7, d0
 800fa14:	b093      	sub	sp, #76	; 0x4c
 800fa16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa1c:	9106      	str	r1, [sp, #24]
 800fa1e:	ee10 aa10 	vmov	sl, s0
 800fa22:	4604      	mov	r4, r0
 800fa24:	9209      	str	r2, [sp, #36]	; 0x24
 800fa26:	930c      	str	r3, [sp, #48]	; 0x30
 800fa28:	46bb      	mov	fp, r7
 800fa2a:	b975      	cbnz	r5, 800fa4a <_dtoa_r+0x42>
 800fa2c:	2010      	movs	r0, #16
 800fa2e:	f7ff f9bd 	bl	800edac <malloc>
 800fa32:	4602      	mov	r2, r0
 800fa34:	6260      	str	r0, [r4, #36]	; 0x24
 800fa36:	b920      	cbnz	r0, 800fa42 <_dtoa_r+0x3a>
 800fa38:	4ba7      	ldr	r3, [pc, #668]	; (800fcd8 <_dtoa_r+0x2d0>)
 800fa3a:	21ea      	movs	r1, #234	; 0xea
 800fa3c:	48a7      	ldr	r0, [pc, #668]	; (800fcdc <_dtoa_r+0x2d4>)
 800fa3e:	f001 fb05 	bl	801104c <__assert_func>
 800fa42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa46:	6005      	str	r5, [r0, #0]
 800fa48:	60c5      	str	r5, [r0, #12]
 800fa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa4c:	6819      	ldr	r1, [r3, #0]
 800fa4e:	b151      	cbz	r1, 800fa66 <_dtoa_r+0x5e>
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	604a      	str	r2, [r1, #4]
 800fa54:	2301      	movs	r3, #1
 800fa56:	4093      	lsls	r3, r2
 800fa58:	608b      	str	r3, [r1, #8]
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f000 fe12 	bl	8010684 <_Bfree>
 800fa60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	1e3b      	subs	r3, r7, #0
 800fa68:	bfaa      	itet	ge
 800fa6a:	2300      	movge	r3, #0
 800fa6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fa70:	f8c8 3000 	strge.w	r3, [r8]
 800fa74:	4b9a      	ldr	r3, [pc, #616]	; (800fce0 <_dtoa_r+0x2d8>)
 800fa76:	bfbc      	itt	lt
 800fa78:	2201      	movlt	r2, #1
 800fa7a:	f8c8 2000 	strlt.w	r2, [r8]
 800fa7e:	ea33 030b 	bics.w	r3, r3, fp
 800fa82:	d11b      	bne.n	800fabc <_dtoa_r+0xb4>
 800fa84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa86:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa8a:	6013      	str	r3, [r2, #0]
 800fa8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa90:	4333      	orrs	r3, r6
 800fa92:	f000 8592 	beq.w	80105ba <_dtoa_r+0xbb2>
 800fa96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa98:	b963      	cbnz	r3, 800fab4 <_dtoa_r+0xac>
 800fa9a:	4b92      	ldr	r3, [pc, #584]	; (800fce4 <_dtoa_r+0x2dc>)
 800fa9c:	e022      	b.n	800fae4 <_dtoa_r+0xdc>
 800fa9e:	4b92      	ldr	r3, [pc, #584]	; (800fce8 <_dtoa_r+0x2e0>)
 800faa0:	9301      	str	r3, [sp, #4]
 800faa2:	3308      	adds	r3, #8
 800faa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	9801      	ldr	r0, [sp, #4]
 800faaa:	b013      	add	sp, #76	; 0x4c
 800faac:	ecbd 8b04 	vpop	{d8-d9}
 800fab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab4:	4b8b      	ldr	r3, [pc, #556]	; (800fce4 <_dtoa_r+0x2dc>)
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	3303      	adds	r3, #3
 800faba:	e7f3      	b.n	800faa4 <_dtoa_r+0x9c>
 800fabc:	2200      	movs	r2, #0
 800fabe:	2300      	movs	r3, #0
 800fac0:	4650      	mov	r0, sl
 800fac2:	4659      	mov	r1, fp
 800fac4:	f7f1 f830 	bl	8000b28 <__aeabi_dcmpeq>
 800fac8:	ec4b ab19 	vmov	d9, sl, fp
 800facc:	4680      	mov	r8, r0
 800face:	b158      	cbz	r0, 800fae8 <_dtoa_r+0xe0>
 800fad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fad2:	2301      	movs	r3, #1
 800fad4:	6013      	str	r3, [r2, #0]
 800fad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 856b 	beq.w	80105b4 <_dtoa_r+0xbac>
 800fade:	4883      	ldr	r0, [pc, #524]	; (800fcec <_dtoa_r+0x2e4>)
 800fae0:	6018      	str	r0, [r3, #0]
 800fae2:	1e43      	subs	r3, r0, #1
 800fae4:	9301      	str	r3, [sp, #4]
 800fae6:	e7df      	b.n	800faa8 <_dtoa_r+0xa0>
 800fae8:	ec4b ab10 	vmov	d0, sl, fp
 800faec:	aa10      	add	r2, sp, #64	; 0x40
 800faee:	a911      	add	r1, sp, #68	; 0x44
 800faf0:	4620      	mov	r0, r4
 800faf2:	f001 f8af 	bl	8010c54 <__d2b>
 800faf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fafa:	ee08 0a10 	vmov	s16, r0
 800fafe:	2d00      	cmp	r5, #0
 800fb00:	f000 8084 	beq.w	800fc0c <_dtoa_r+0x204>
 800fb04:	ee19 3a90 	vmov	r3, s19
 800fb08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fb10:	4656      	mov	r6, sl
 800fb12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fb16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fb1e:	4b74      	ldr	r3, [pc, #464]	; (800fcf0 <_dtoa_r+0x2e8>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	4630      	mov	r0, r6
 800fb24:	4639      	mov	r1, r7
 800fb26:	f7f0 fbdf 	bl	80002e8 <__aeabi_dsub>
 800fb2a:	a365      	add	r3, pc, #404	; (adr r3, 800fcc0 <_dtoa_r+0x2b8>)
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	f7f0 fd92 	bl	8000658 <__aeabi_dmul>
 800fb34:	a364      	add	r3, pc, #400	; (adr r3, 800fcc8 <_dtoa_r+0x2c0>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	f7f0 fbd7 	bl	80002ec <__adddf3>
 800fb3e:	4606      	mov	r6, r0
 800fb40:	4628      	mov	r0, r5
 800fb42:	460f      	mov	r7, r1
 800fb44:	f7f0 fd1e 	bl	8000584 <__aeabi_i2d>
 800fb48:	a361      	add	r3, pc, #388	; (adr r3, 800fcd0 <_dtoa_r+0x2c8>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	f7f0 fd83 	bl	8000658 <__aeabi_dmul>
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	4630      	mov	r0, r6
 800fb58:	4639      	mov	r1, r7
 800fb5a:	f7f0 fbc7 	bl	80002ec <__adddf3>
 800fb5e:	4606      	mov	r6, r0
 800fb60:	460f      	mov	r7, r1
 800fb62:	f7f1 f829 	bl	8000bb8 <__aeabi_d2iz>
 800fb66:	2200      	movs	r2, #0
 800fb68:	9000      	str	r0, [sp, #0]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	4639      	mov	r1, r7
 800fb70:	f7f0 ffe4 	bl	8000b3c <__aeabi_dcmplt>
 800fb74:	b150      	cbz	r0, 800fb8c <_dtoa_r+0x184>
 800fb76:	9800      	ldr	r0, [sp, #0]
 800fb78:	f7f0 fd04 	bl	8000584 <__aeabi_i2d>
 800fb7c:	4632      	mov	r2, r6
 800fb7e:	463b      	mov	r3, r7
 800fb80:	f7f0 ffd2 	bl	8000b28 <__aeabi_dcmpeq>
 800fb84:	b910      	cbnz	r0, 800fb8c <_dtoa_r+0x184>
 800fb86:	9b00      	ldr	r3, [sp, #0]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	9b00      	ldr	r3, [sp, #0]
 800fb8e:	2b16      	cmp	r3, #22
 800fb90:	d85a      	bhi.n	800fc48 <_dtoa_r+0x240>
 800fb92:	9a00      	ldr	r2, [sp, #0]
 800fb94:	4b57      	ldr	r3, [pc, #348]	; (800fcf4 <_dtoa_r+0x2ec>)
 800fb96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	ec51 0b19 	vmov	r0, r1, d9
 800fba2:	f7f0 ffcb 	bl	8000b3c <__aeabi_dcmplt>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d050      	beq.n	800fc4c <_dtoa_r+0x244>
 800fbaa:	9b00      	ldr	r3, [sp, #0]
 800fbac:	3b01      	subs	r3, #1
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbb6:	1b5d      	subs	r5, r3, r5
 800fbb8:	1e6b      	subs	r3, r5, #1
 800fbba:	9305      	str	r3, [sp, #20]
 800fbbc:	bf45      	ittet	mi
 800fbbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800fbc2:	9304      	strmi	r3, [sp, #16]
 800fbc4:	2300      	movpl	r3, #0
 800fbc6:	2300      	movmi	r3, #0
 800fbc8:	bf4c      	ite	mi
 800fbca:	9305      	strmi	r3, [sp, #20]
 800fbcc:	9304      	strpl	r3, [sp, #16]
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	db3d      	blt.n	800fc50 <_dtoa_r+0x248>
 800fbd4:	9b05      	ldr	r3, [sp, #20]
 800fbd6:	9a00      	ldr	r2, [sp, #0]
 800fbd8:	920a      	str	r2, [sp, #40]	; 0x28
 800fbda:	4413      	add	r3, r2
 800fbdc:	9305      	str	r3, [sp, #20]
 800fbde:	2300      	movs	r3, #0
 800fbe0:	9307      	str	r3, [sp, #28]
 800fbe2:	9b06      	ldr	r3, [sp, #24]
 800fbe4:	2b09      	cmp	r3, #9
 800fbe6:	f200 8089 	bhi.w	800fcfc <_dtoa_r+0x2f4>
 800fbea:	2b05      	cmp	r3, #5
 800fbec:	bfc4      	itt	gt
 800fbee:	3b04      	subgt	r3, #4
 800fbf0:	9306      	strgt	r3, [sp, #24]
 800fbf2:	9b06      	ldr	r3, [sp, #24]
 800fbf4:	f1a3 0302 	sub.w	r3, r3, #2
 800fbf8:	bfcc      	ite	gt
 800fbfa:	2500      	movgt	r5, #0
 800fbfc:	2501      	movle	r5, #1
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	f200 8087 	bhi.w	800fd12 <_dtoa_r+0x30a>
 800fc04:	e8df f003 	tbb	[pc, r3]
 800fc08:	59383a2d 	.word	0x59383a2d
 800fc0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fc10:	441d      	add	r5, r3
 800fc12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fc16:	2b20      	cmp	r3, #32
 800fc18:	bfc1      	itttt	gt
 800fc1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fc1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fc22:	fa0b f303 	lslgt.w	r3, fp, r3
 800fc26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fc2a:	bfda      	itte	le
 800fc2c:	f1c3 0320 	rsble	r3, r3, #32
 800fc30:	fa06 f003 	lslle.w	r0, r6, r3
 800fc34:	4318      	orrgt	r0, r3
 800fc36:	f7f0 fc95 	bl	8000564 <__aeabi_ui2d>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4606      	mov	r6, r0
 800fc3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fc42:	3d01      	subs	r5, #1
 800fc44:	930e      	str	r3, [sp, #56]	; 0x38
 800fc46:	e76a      	b.n	800fb1e <_dtoa_r+0x116>
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e7b2      	b.n	800fbb2 <_dtoa_r+0x1aa>
 800fc4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc4e:	e7b1      	b.n	800fbb4 <_dtoa_r+0x1ac>
 800fc50:	9b04      	ldr	r3, [sp, #16]
 800fc52:	9a00      	ldr	r2, [sp, #0]
 800fc54:	1a9b      	subs	r3, r3, r2
 800fc56:	9304      	str	r3, [sp, #16]
 800fc58:	4253      	negs	r3, r2
 800fc5a:	9307      	str	r3, [sp, #28]
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc60:	e7bf      	b.n	800fbe2 <_dtoa_r+0x1da>
 800fc62:	2300      	movs	r3, #0
 800fc64:	9308      	str	r3, [sp, #32]
 800fc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	dc55      	bgt.n	800fd18 <_dtoa_r+0x310>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc72:	461a      	mov	r2, r3
 800fc74:	9209      	str	r2, [sp, #36]	; 0x24
 800fc76:	e00c      	b.n	800fc92 <_dtoa_r+0x28a>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e7f3      	b.n	800fc64 <_dtoa_r+0x25c>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc80:	9308      	str	r3, [sp, #32]
 800fc82:	9b00      	ldr	r3, [sp, #0]
 800fc84:	4413      	add	r3, r2
 800fc86:	9302      	str	r3, [sp, #8]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	9303      	str	r3, [sp, #12]
 800fc8e:	bfb8      	it	lt
 800fc90:	2301      	movlt	r3, #1
 800fc92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc94:	2200      	movs	r2, #0
 800fc96:	6042      	str	r2, [r0, #4]
 800fc98:	2204      	movs	r2, #4
 800fc9a:	f102 0614 	add.w	r6, r2, #20
 800fc9e:	429e      	cmp	r6, r3
 800fca0:	6841      	ldr	r1, [r0, #4]
 800fca2:	d93d      	bls.n	800fd20 <_dtoa_r+0x318>
 800fca4:	4620      	mov	r0, r4
 800fca6:	f000 fcad 	bl	8010604 <_Balloc>
 800fcaa:	9001      	str	r0, [sp, #4]
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d13b      	bne.n	800fd28 <_dtoa_r+0x320>
 800fcb0:	4b11      	ldr	r3, [pc, #68]	; (800fcf8 <_dtoa_r+0x2f0>)
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcb8:	e6c0      	b.n	800fa3c <_dtoa_r+0x34>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e7df      	b.n	800fc7e <_dtoa_r+0x276>
 800fcbe:	bf00      	nop
 800fcc0:	636f4361 	.word	0x636f4361
 800fcc4:	3fd287a7 	.word	0x3fd287a7
 800fcc8:	8b60c8b3 	.word	0x8b60c8b3
 800fccc:	3fc68a28 	.word	0x3fc68a28
 800fcd0:	509f79fb 	.word	0x509f79fb
 800fcd4:	3fd34413 	.word	0x3fd34413
 800fcd8:	08027755 	.word	0x08027755
 800fcdc:	0802776c 	.word	0x0802776c
 800fce0:	7ff00000 	.word	0x7ff00000
 800fce4:	08027751 	.word	0x08027751
 800fce8:	08027748 	.word	0x08027748
 800fcec:	08027725 	.word	0x08027725
 800fcf0:	3ff80000 	.word	0x3ff80000
 800fcf4:	08027860 	.word	0x08027860
 800fcf8:	080277c7 	.word	0x080277c7
 800fcfc:	2501      	movs	r5, #1
 800fcfe:	2300      	movs	r3, #0
 800fd00:	9306      	str	r3, [sp, #24]
 800fd02:	9508      	str	r5, [sp, #32]
 800fd04:	f04f 33ff 	mov.w	r3, #4294967295
 800fd08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	2312      	movs	r3, #18
 800fd10:	e7b0      	b.n	800fc74 <_dtoa_r+0x26c>
 800fd12:	2301      	movs	r3, #1
 800fd14:	9308      	str	r3, [sp, #32]
 800fd16:	e7f5      	b.n	800fd04 <_dtoa_r+0x2fc>
 800fd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd1e:	e7b8      	b.n	800fc92 <_dtoa_r+0x28a>
 800fd20:	3101      	adds	r1, #1
 800fd22:	6041      	str	r1, [r0, #4]
 800fd24:	0052      	lsls	r2, r2, #1
 800fd26:	e7b8      	b.n	800fc9a <_dtoa_r+0x292>
 800fd28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd2a:	9a01      	ldr	r2, [sp, #4]
 800fd2c:	601a      	str	r2, [r3, #0]
 800fd2e:	9b03      	ldr	r3, [sp, #12]
 800fd30:	2b0e      	cmp	r3, #14
 800fd32:	f200 809d 	bhi.w	800fe70 <_dtoa_r+0x468>
 800fd36:	2d00      	cmp	r5, #0
 800fd38:	f000 809a 	beq.w	800fe70 <_dtoa_r+0x468>
 800fd3c:	9b00      	ldr	r3, [sp, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	dd32      	ble.n	800fda8 <_dtoa_r+0x3a0>
 800fd42:	4ab7      	ldr	r2, [pc, #732]	; (8010020 <_dtoa_r+0x618>)
 800fd44:	f003 030f 	and.w	r3, r3, #15
 800fd48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd50:	9b00      	ldr	r3, [sp, #0]
 800fd52:	05d8      	lsls	r0, r3, #23
 800fd54:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fd58:	d516      	bpl.n	800fd88 <_dtoa_r+0x380>
 800fd5a:	4bb2      	ldr	r3, [pc, #712]	; (8010024 <_dtoa_r+0x61c>)
 800fd5c:	ec51 0b19 	vmov	r0, r1, d9
 800fd60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd64:	f7f0 fda2 	bl	80008ac <__aeabi_ddiv>
 800fd68:	f007 070f 	and.w	r7, r7, #15
 800fd6c:	4682      	mov	sl, r0
 800fd6e:	468b      	mov	fp, r1
 800fd70:	2503      	movs	r5, #3
 800fd72:	4eac      	ldr	r6, [pc, #688]	; (8010024 <_dtoa_r+0x61c>)
 800fd74:	b957      	cbnz	r7, 800fd8c <_dtoa_r+0x384>
 800fd76:	4642      	mov	r2, r8
 800fd78:	464b      	mov	r3, r9
 800fd7a:	4650      	mov	r0, sl
 800fd7c:	4659      	mov	r1, fp
 800fd7e:	f7f0 fd95 	bl	80008ac <__aeabi_ddiv>
 800fd82:	4682      	mov	sl, r0
 800fd84:	468b      	mov	fp, r1
 800fd86:	e028      	b.n	800fdda <_dtoa_r+0x3d2>
 800fd88:	2502      	movs	r5, #2
 800fd8a:	e7f2      	b.n	800fd72 <_dtoa_r+0x36a>
 800fd8c:	07f9      	lsls	r1, r7, #31
 800fd8e:	d508      	bpl.n	800fda2 <_dtoa_r+0x39a>
 800fd90:	4640      	mov	r0, r8
 800fd92:	4649      	mov	r1, r9
 800fd94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd98:	f7f0 fc5e 	bl	8000658 <__aeabi_dmul>
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	4680      	mov	r8, r0
 800fda0:	4689      	mov	r9, r1
 800fda2:	107f      	asrs	r7, r7, #1
 800fda4:	3608      	adds	r6, #8
 800fda6:	e7e5      	b.n	800fd74 <_dtoa_r+0x36c>
 800fda8:	f000 809b 	beq.w	800fee2 <_dtoa_r+0x4da>
 800fdac:	9b00      	ldr	r3, [sp, #0]
 800fdae:	4f9d      	ldr	r7, [pc, #628]	; (8010024 <_dtoa_r+0x61c>)
 800fdb0:	425e      	negs	r6, r3
 800fdb2:	4b9b      	ldr	r3, [pc, #620]	; (8010020 <_dtoa_r+0x618>)
 800fdb4:	f006 020f 	and.w	r2, r6, #15
 800fdb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	ec51 0b19 	vmov	r0, r1, d9
 800fdc4:	f7f0 fc48 	bl	8000658 <__aeabi_dmul>
 800fdc8:	1136      	asrs	r6, r6, #4
 800fdca:	4682      	mov	sl, r0
 800fdcc:	468b      	mov	fp, r1
 800fdce:	2300      	movs	r3, #0
 800fdd0:	2502      	movs	r5, #2
 800fdd2:	2e00      	cmp	r6, #0
 800fdd4:	d17a      	bne.n	800fecc <_dtoa_r+0x4c4>
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1d3      	bne.n	800fd82 <_dtoa_r+0x37a>
 800fdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 8082 	beq.w	800fee6 <_dtoa_r+0x4de>
 800fde2:	4b91      	ldr	r3, [pc, #580]	; (8010028 <_dtoa_r+0x620>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	4650      	mov	r0, sl
 800fde8:	4659      	mov	r1, fp
 800fdea:	f7f0 fea7 	bl	8000b3c <__aeabi_dcmplt>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d079      	beq.n	800fee6 <_dtoa_r+0x4de>
 800fdf2:	9b03      	ldr	r3, [sp, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d076      	beq.n	800fee6 <_dtoa_r+0x4de>
 800fdf8:	9b02      	ldr	r3, [sp, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	dd36      	ble.n	800fe6c <_dtoa_r+0x464>
 800fdfe:	9b00      	ldr	r3, [sp, #0]
 800fe00:	4650      	mov	r0, sl
 800fe02:	4659      	mov	r1, fp
 800fe04:	1e5f      	subs	r7, r3, #1
 800fe06:	2200      	movs	r2, #0
 800fe08:	4b88      	ldr	r3, [pc, #544]	; (801002c <_dtoa_r+0x624>)
 800fe0a:	f7f0 fc25 	bl	8000658 <__aeabi_dmul>
 800fe0e:	9e02      	ldr	r6, [sp, #8]
 800fe10:	4682      	mov	sl, r0
 800fe12:	468b      	mov	fp, r1
 800fe14:	3501      	adds	r5, #1
 800fe16:	4628      	mov	r0, r5
 800fe18:	f7f0 fbb4 	bl	8000584 <__aeabi_i2d>
 800fe1c:	4652      	mov	r2, sl
 800fe1e:	465b      	mov	r3, fp
 800fe20:	f7f0 fc1a 	bl	8000658 <__aeabi_dmul>
 800fe24:	4b82      	ldr	r3, [pc, #520]	; (8010030 <_dtoa_r+0x628>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	f7f0 fa60 	bl	80002ec <__adddf3>
 800fe2c:	46d0      	mov	r8, sl
 800fe2e:	46d9      	mov	r9, fp
 800fe30:	4682      	mov	sl, r0
 800fe32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fe36:	2e00      	cmp	r6, #0
 800fe38:	d158      	bne.n	800feec <_dtoa_r+0x4e4>
 800fe3a:	4b7e      	ldr	r3, [pc, #504]	; (8010034 <_dtoa_r+0x62c>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4640      	mov	r0, r8
 800fe40:	4649      	mov	r1, r9
 800fe42:	f7f0 fa51 	bl	80002e8 <__aeabi_dsub>
 800fe46:	4652      	mov	r2, sl
 800fe48:	465b      	mov	r3, fp
 800fe4a:	4680      	mov	r8, r0
 800fe4c:	4689      	mov	r9, r1
 800fe4e:	f7f0 fe93 	bl	8000b78 <__aeabi_dcmpgt>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	f040 8295 	bne.w	8010382 <_dtoa_r+0x97a>
 800fe58:	4652      	mov	r2, sl
 800fe5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe5e:	4640      	mov	r0, r8
 800fe60:	4649      	mov	r1, r9
 800fe62:	f7f0 fe6b 	bl	8000b3c <__aeabi_dcmplt>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	f040 8289 	bne.w	801037e <_dtoa_r+0x976>
 800fe6c:	ec5b ab19 	vmov	sl, fp, d9
 800fe70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	f2c0 8148 	blt.w	8010108 <_dtoa_r+0x700>
 800fe78:	9a00      	ldr	r2, [sp, #0]
 800fe7a:	2a0e      	cmp	r2, #14
 800fe7c:	f300 8144 	bgt.w	8010108 <_dtoa_r+0x700>
 800fe80:	4b67      	ldr	r3, [pc, #412]	; (8010020 <_dtoa_r+0x618>)
 800fe82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f280 80d5 	bge.w	801003c <_dtoa_r+0x634>
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f300 80d1 	bgt.w	801003c <_dtoa_r+0x634>
 800fe9a:	f040 826f 	bne.w	801037c <_dtoa_r+0x974>
 800fe9e:	4b65      	ldr	r3, [pc, #404]	; (8010034 <_dtoa_r+0x62c>)
 800fea0:	2200      	movs	r2, #0
 800fea2:	4640      	mov	r0, r8
 800fea4:	4649      	mov	r1, r9
 800fea6:	f7f0 fbd7 	bl	8000658 <__aeabi_dmul>
 800feaa:	4652      	mov	r2, sl
 800feac:	465b      	mov	r3, fp
 800feae:	f7f0 fe59 	bl	8000b64 <__aeabi_dcmpge>
 800feb2:	9e03      	ldr	r6, [sp, #12]
 800feb4:	4637      	mov	r7, r6
 800feb6:	2800      	cmp	r0, #0
 800feb8:	f040 8245 	bne.w	8010346 <_dtoa_r+0x93e>
 800febc:	9d01      	ldr	r5, [sp, #4]
 800febe:	2331      	movs	r3, #49	; 0x31
 800fec0:	f805 3b01 	strb.w	r3, [r5], #1
 800fec4:	9b00      	ldr	r3, [sp, #0]
 800fec6:	3301      	adds	r3, #1
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	e240      	b.n	801034e <_dtoa_r+0x946>
 800fecc:	07f2      	lsls	r2, r6, #31
 800fece:	d505      	bpl.n	800fedc <_dtoa_r+0x4d4>
 800fed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fed4:	f7f0 fbc0 	bl	8000658 <__aeabi_dmul>
 800fed8:	3501      	adds	r5, #1
 800feda:	2301      	movs	r3, #1
 800fedc:	1076      	asrs	r6, r6, #1
 800fede:	3708      	adds	r7, #8
 800fee0:	e777      	b.n	800fdd2 <_dtoa_r+0x3ca>
 800fee2:	2502      	movs	r5, #2
 800fee4:	e779      	b.n	800fdda <_dtoa_r+0x3d2>
 800fee6:	9f00      	ldr	r7, [sp, #0]
 800fee8:	9e03      	ldr	r6, [sp, #12]
 800feea:	e794      	b.n	800fe16 <_dtoa_r+0x40e>
 800feec:	9901      	ldr	r1, [sp, #4]
 800feee:	4b4c      	ldr	r3, [pc, #304]	; (8010020 <_dtoa_r+0x618>)
 800fef0:	4431      	add	r1, r6
 800fef2:	910d      	str	r1, [sp, #52]	; 0x34
 800fef4:	9908      	ldr	r1, [sp, #32]
 800fef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fefa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fefe:	2900      	cmp	r1, #0
 800ff00:	d043      	beq.n	800ff8a <_dtoa_r+0x582>
 800ff02:	494d      	ldr	r1, [pc, #308]	; (8010038 <_dtoa_r+0x630>)
 800ff04:	2000      	movs	r0, #0
 800ff06:	f7f0 fcd1 	bl	80008ac <__aeabi_ddiv>
 800ff0a:	4652      	mov	r2, sl
 800ff0c:	465b      	mov	r3, fp
 800ff0e:	f7f0 f9eb 	bl	80002e8 <__aeabi_dsub>
 800ff12:	9d01      	ldr	r5, [sp, #4]
 800ff14:	4682      	mov	sl, r0
 800ff16:	468b      	mov	fp, r1
 800ff18:	4649      	mov	r1, r9
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	f7f0 fe4c 	bl	8000bb8 <__aeabi_d2iz>
 800ff20:	4606      	mov	r6, r0
 800ff22:	f7f0 fb2f 	bl	8000584 <__aeabi_i2d>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	4649      	mov	r1, r9
 800ff2e:	f7f0 f9db 	bl	80002e8 <__aeabi_dsub>
 800ff32:	3630      	adds	r6, #48	; 0x30
 800ff34:	f805 6b01 	strb.w	r6, [r5], #1
 800ff38:	4652      	mov	r2, sl
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	4680      	mov	r8, r0
 800ff3e:	4689      	mov	r9, r1
 800ff40:	f7f0 fdfc 	bl	8000b3c <__aeabi_dcmplt>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d163      	bne.n	8010010 <_dtoa_r+0x608>
 800ff48:	4642      	mov	r2, r8
 800ff4a:	464b      	mov	r3, r9
 800ff4c:	4936      	ldr	r1, [pc, #216]	; (8010028 <_dtoa_r+0x620>)
 800ff4e:	2000      	movs	r0, #0
 800ff50:	f7f0 f9ca 	bl	80002e8 <__aeabi_dsub>
 800ff54:	4652      	mov	r2, sl
 800ff56:	465b      	mov	r3, fp
 800ff58:	f7f0 fdf0 	bl	8000b3c <__aeabi_dcmplt>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	f040 80b5 	bne.w	80100cc <_dtoa_r+0x6c4>
 800ff62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff64:	429d      	cmp	r5, r3
 800ff66:	d081      	beq.n	800fe6c <_dtoa_r+0x464>
 800ff68:	4b30      	ldr	r3, [pc, #192]	; (801002c <_dtoa_r+0x624>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	4650      	mov	r0, sl
 800ff6e:	4659      	mov	r1, fp
 800ff70:	f7f0 fb72 	bl	8000658 <__aeabi_dmul>
 800ff74:	4b2d      	ldr	r3, [pc, #180]	; (801002c <_dtoa_r+0x624>)
 800ff76:	4682      	mov	sl, r0
 800ff78:	468b      	mov	fp, r1
 800ff7a:	4640      	mov	r0, r8
 800ff7c:	4649      	mov	r1, r9
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f7f0 fb6a 	bl	8000658 <__aeabi_dmul>
 800ff84:	4680      	mov	r8, r0
 800ff86:	4689      	mov	r9, r1
 800ff88:	e7c6      	b.n	800ff18 <_dtoa_r+0x510>
 800ff8a:	4650      	mov	r0, sl
 800ff8c:	4659      	mov	r1, fp
 800ff8e:	f7f0 fb63 	bl	8000658 <__aeabi_dmul>
 800ff92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff94:	9d01      	ldr	r5, [sp, #4]
 800ff96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff98:	4682      	mov	sl, r0
 800ff9a:	468b      	mov	fp, r1
 800ff9c:	4649      	mov	r1, r9
 800ff9e:	4640      	mov	r0, r8
 800ffa0:	f7f0 fe0a 	bl	8000bb8 <__aeabi_d2iz>
 800ffa4:	4606      	mov	r6, r0
 800ffa6:	f7f0 faed 	bl	8000584 <__aeabi_i2d>
 800ffaa:	3630      	adds	r6, #48	; 0x30
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	f7f0 f998 	bl	80002e8 <__aeabi_dsub>
 800ffb8:	f805 6b01 	strb.w	r6, [r5], #1
 800ffbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffbe:	429d      	cmp	r5, r3
 800ffc0:	4680      	mov	r8, r0
 800ffc2:	4689      	mov	r9, r1
 800ffc4:	f04f 0200 	mov.w	r2, #0
 800ffc8:	d124      	bne.n	8010014 <_dtoa_r+0x60c>
 800ffca:	4b1b      	ldr	r3, [pc, #108]	; (8010038 <_dtoa_r+0x630>)
 800ffcc:	4650      	mov	r0, sl
 800ffce:	4659      	mov	r1, fp
 800ffd0:	f7f0 f98c 	bl	80002ec <__adddf3>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	4640      	mov	r0, r8
 800ffda:	4649      	mov	r1, r9
 800ffdc:	f7f0 fdcc 	bl	8000b78 <__aeabi_dcmpgt>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d173      	bne.n	80100cc <_dtoa_r+0x6c4>
 800ffe4:	4652      	mov	r2, sl
 800ffe6:	465b      	mov	r3, fp
 800ffe8:	4913      	ldr	r1, [pc, #76]	; (8010038 <_dtoa_r+0x630>)
 800ffea:	2000      	movs	r0, #0
 800ffec:	f7f0 f97c 	bl	80002e8 <__aeabi_dsub>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	4640      	mov	r0, r8
 800fff6:	4649      	mov	r1, r9
 800fff8:	f7f0 fda0 	bl	8000b3c <__aeabi_dcmplt>
 800fffc:	2800      	cmp	r0, #0
 800fffe:	f43f af35 	beq.w	800fe6c <_dtoa_r+0x464>
 8010002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010004:	1e6b      	subs	r3, r5, #1
 8010006:	930f      	str	r3, [sp, #60]	; 0x3c
 8010008:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801000c:	2b30      	cmp	r3, #48	; 0x30
 801000e:	d0f8      	beq.n	8010002 <_dtoa_r+0x5fa>
 8010010:	9700      	str	r7, [sp, #0]
 8010012:	e049      	b.n	80100a8 <_dtoa_r+0x6a0>
 8010014:	4b05      	ldr	r3, [pc, #20]	; (801002c <_dtoa_r+0x624>)
 8010016:	f7f0 fb1f 	bl	8000658 <__aeabi_dmul>
 801001a:	4680      	mov	r8, r0
 801001c:	4689      	mov	r9, r1
 801001e:	e7bd      	b.n	800ff9c <_dtoa_r+0x594>
 8010020:	08027860 	.word	0x08027860
 8010024:	08027838 	.word	0x08027838
 8010028:	3ff00000 	.word	0x3ff00000
 801002c:	40240000 	.word	0x40240000
 8010030:	401c0000 	.word	0x401c0000
 8010034:	40140000 	.word	0x40140000
 8010038:	3fe00000 	.word	0x3fe00000
 801003c:	9d01      	ldr	r5, [sp, #4]
 801003e:	4656      	mov	r6, sl
 8010040:	465f      	mov	r7, fp
 8010042:	4642      	mov	r2, r8
 8010044:	464b      	mov	r3, r9
 8010046:	4630      	mov	r0, r6
 8010048:	4639      	mov	r1, r7
 801004a:	f7f0 fc2f 	bl	80008ac <__aeabi_ddiv>
 801004e:	f7f0 fdb3 	bl	8000bb8 <__aeabi_d2iz>
 8010052:	4682      	mov	sl, r0
 8010054:	f7f0 fa96 	bl	8000584 <__aeabi_i2d>
 8010058:	4642      	mov	r2, r8
 801005a:	464b      	mov	r3, r9
 801005c:	f7f0 fafc 	bl	8000658 <__aeabi_dmul>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4630      	mov	r0, r6
 8010066:	4639      	mov	r1, r7
 8010068:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801006c:	f7f0 f93c 	bl	80002e8 <__aeabi_dsub>
 8010070:	f805 6b01 	strb.w	r6, [r5], #1
 8010074:	9e01      	ldr	r6, [sp, #4]
 8010076:	9f03      	ldr	r7, [sp, #12]
 8010078:	1bae      	subs	r6, r5, r6
 801007a:	42b7      	cmp	r7, r6
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	d135      	bne.n	80100ee <_dtoa_r+0x6e6>
 8010082:	f7f0 f933 	bl	80002ec <__adddf3>
 8010086:	4642      	mov	r2, r8
 8010088:	464b      	mov	r3, r9
 801008a:	4606      	mov	r6, r0
 801008c:	460f      	mov	r7, r1
 801008e:	f7f0 fd73 	bl	8000b78 <__aeabi_dcmpgt>
 8010092:	b9d0      	cbnz	r0, 80100ca <_dtoa_r+0x6c2>
 8010094:	4642      	mov	r2, r8
 8010096:	464b      	mov	r3, r9
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 fd44 	bl	8000b28 <__aeabi_dcmpeq>
 80100a0:	b110      	cbz	r0, 80100a8 <_dtoa_r+0x6a0>
 80100a2:	f01a 0f01 	tst.w	sl, #1
 80100a6:	d110      	bne.n	80100ca <_dtoa_r+0x6c2>
 80100a8:	4620      	mov	r0, r4
 80100aa:	ee18 1a10 	vmov	r1, s16
 80100ae:	f000 fae9 	bl	8010684 <_Bfree>
 80100b2:	2300      	movs	r3, #0
 80100b4:	9800      	ldr	r0, [sp, #0]
 80100b6:	702b      	strb	r3, [r5, #0]
 80100b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100ba:	3001      	adds	r0, #1
 80100bc:	6018      	str	r0, [r3, #0]
 80100be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f43f acf1 	beq.w	800faa8 <_dtoa_r+0xa0>
 80100c6:	601d      	str	r5, [r3, #0]
 80100c8:	e4ee      	b.n	800faa8 <_dtoa_r+0xa0>
 80100ca:	9f00      	ldr	r7, [sp, #0]
 80100cc:	462b      	mov	r3, r5
 80100ce:	461d      	mov	r5, r3
 80100d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100d4:	2a39      	cmp	r2, #57	; 0x39
 80100d6:	d106      	bne.n	80100e6 <_dtoa_r+0x6de>
 80100d8:	9a01      	ldr	r2, [sp, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d1f7      	bne.n	80100ce <_dtoa_r+0x6c6>
 80100de:	9901      	ldr	r1, [sp, #4]
 80100e0:	2230      	movs	r2, #48	; 0x30
 80100e2:	3701      	adds	r7, #1
 80100e4:	700a      	strb	r2, [r1, #0]
 80100e6:	781a      	ldrb	r2, [r3, #0]
 80100e8:	3201      	adds	r2, #1
 80100ea:	701a      	strb	r2, [r3, #0]
 80100ec:	e790      	b.n	8010010 <_dtoa_r+0x608>
 80100ee:	4ba6      	ldr	r3, [pc, #664]	; (8010388 <_dtoa_r+0x980>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	f7f0 fab1 	bl	8000658 <__aeabi_dmul>
 80100f6:	2200      	movs	r2, #0
 80100f8:	2300      	movs	r3, #0
 80100fa:	4606      	mov	r6, r0
 80100fc:	460f      	mov	r7, r1
 80100fe:	f7f0 fd13 	bl	8000b28 <__aeabi_dcmpeq>
 8010102:	2800      	cmp	r0, #0
 8010104:	d09d      	beq.n	8010042 <_dtoa_r+0x63a>
 8010106:	e7cf      	b.n	80100a8 <_dtoa_r+0x6a0>
 8010108:	9a08      	ldr	r2, [sp, #32]
 801010a:	2a00      	cmp	r2, #0
 801010c:	f000 80d7 	beq.w	80102be <_dtoa_r+0x8b6>
 8010110:	9a06      	ldr	r2, [sp, #24]
 8010112:	2a01      	cmp	r2, #1
 8010114:	f300 80ba 	bgt.w	801028c <_dtoa_r+0x884>
 8010118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801011a:	2a00      	cmp	r2, #0
 801011c:	f000 80b2 	beq.w	8010284 <_dtoa_r+0x87c>
 8010120:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010124:	9e07      	ldr	r6, [sp, #28]
 8010126:	9d04      	ldr	r5, [sp, #16]
 8010128:	9a04      	ldr	r2, [sp, #16]
 801012a:	441a      	add	r2, r3
 801012c:	9204      	str	r2, [sp, #16]
 801012e:	9a05      	ldr	r2, [sp, #20]
 8010130:	2101      	movs	r1, #1
 8010132:	441a      	add	r2, r3
 8010134:	4620      	mov	r0, r4
 8010136:	9205      	str	r2, [sp, #20]
 8010138:	f000 fb5c 	bl	80107f4 <__i2b>
 801013c:	4607      	mov	r7, r0
 801013e:	2d00      	cmp	r5, #0
 8010140:	dd0c      	ble.n	801015c <_dtoa_r+0x754>
 8010142:	9b05      	ldr	r3, [sp, #20]
 8010144:	2b00      	cmp	r3, #0
 8010146:	dd09      	ble.n	801015c <_dtoa_r+0x754>
 8010148:	42ab      	cmp	r3, r5
 801014a:	9a04      	ldr	r2, [sp, #16]
 801014c:	bfa8      	it	ge
 801014e:	462b      	movge	r3, r5
 8010150:	1ad2      	subs	r2, r2, r3
 8010152:	9204      	str	r2, [sp, #16]
 8010154:	9a05      	ldr	r2, [sp, #20]
 8010156:	1aed      	subs	r5, r5, r3
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	9305      	str	r3, [sp, #20]
 801015c:	9b07      	ldr	r3, [sp, #28]
 801015e:	b31b      	cbz	r3, 80101a8 <_dtoa_r+0x7a0>
 8010160:	9b08      	ldr	r3, [sp, #32]
 8010162:	2b00      	cmp	r3, #0
 8010164:	f000 80af 	beq.w	80102c6 <_dtoa_r+0x8be>
 8010168:	2e00      	cmp	r6, #0
 801016a:	dd13      	ble.n	8010194 <_dtoa_r+0x78c>
 801016c:	4639      	mov	r1, r7
 801016e:	4632      	mov	r2, r6
 8010170:	4620      	mov	r0, r4
 8010172:	f000 fbff 	bl	8010974 <__pow5mult>
 8010176:	ee18 2a10 	vmov	r2, s16
 801017a:	4601      	mov	r1, r0
 801017c:	4607      	mov	r7, r0
 801017e:	4620      	mov	r0, r4
 8010180:	f000 fb4e 	bl	8010820 <__multiply>
 8010184:	ee18 1a10 	vmov	r1, s16
 8010188:	4680      	mov	r8, r0
 801018a:	4620      	mov	r0, r4
 801018c:	f000 fa7a 	bl	8010684 <_Bfree>
 8010190:	ee08 8a10 	vmov	s16, r8
 8010194:	9b07      	ldr	r3, [sp, #28]
 8010196:	1b9a      	subs	r2, r3, r6
 8010198:	d006      	beq.n	80101a8 <_dtoa_r+0x7a0>
 801019a:	ee18 1a10 	vmov	r1, s16
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fbe8 	bl	8010974 <__pow5mult>
 80101a4:	ee08 0a10 	vmov	s16, r0
 80101a8:	2101      	movs	r1, #1
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 fb22 	bl	80107f4 <__i2b>
 80101b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	4606      	mov	r6, r0
 80101b6:	f340 8088 	ble.w	80102ca <_dtoa_r+0x8c2>
 80101ba:	461a      	mov	r2, r3
 80101bc:	4601      	mov	r1, r0
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 fbd8 	bl	8010974 <__pow5mult>
 80101c4:	9b06      	ldr	r3, [sp, #24]
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	4606      	mov	r6, r0
 80101ca:	f340 8081 	ble.w	80102d0 <_dtoa_r+0x8c8>
 80101ce:	f04f 0800 	mov.w	r8, #0
 80101d2:	6933      	ldr	r3, [r6, #16]
 80101d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80101d8:	6918      	ldr	r0, [r3, #16]
 80101da:	f000 fabb 	bl	8010754 <__hi0bits>
 80101de:	f1c0 0020 	rsb	r0, r0, #32
 80101e2:	9b05      	ldr	r3, [sp, #20]
 80101e4:	4418      	add	r0, r3
 80101e6:	f010 001f 	ands.w	r0, r0, #31
 80101ea:	f000 8092 	beq.w	8010312 <_dtoa_r+0x90a>
 80101ee:	f1c0 0320 	rsb	r3, r0, #32
 80101f2:	2b04      	cmp	r3, #4
 80101f4:	f340 808a 	ble.w	801030c <_dtoa_r+0x904>
 80101f8:	f1c0 001c 	rsb	r0, r0, #28
 80101fc:	9b04      	ldr	r3, [sp, #16]
 80101fe:	4403      	add	r3, r0
 8010200:	9304      	str	r3, [sp, #16]
 8010202:	9b05      	ldr	r3, [sp, #20]
 8010204:	4403      	add	r3, r0
 8010206:	4405      	add	r5, r0
 8010208:	9305      	str	r3, [sp, #20]
 801020a:	9b04      	ldr	r3, [sp, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	dd07      	ble.n	8010220 <_dtoa_r+0x818>
 8010210:	ee18 1a10 	vmov	r1, s16
 8010214:	461a      	mov	r2, r3
 8010216:	4620      	mov	r0, r4
 8010218:	f000 fc06 	bl	8010a28 <__lshift>
 801021c:	ee08 0a10 	vmov	s16, r0
 8010220:	9b05      	ldr	r3, [sp, #20]
 8010222:	2b00      	cmp	r3, #0
 8010224:	dd05      	ble.n	8010232 <_dtoa_r+0x82a>
 8010226:	4631      	mov	r1, r6
 8010228:	461a      	mov	r2, r3
 801022a:	4620      	mov	r0, r4
 801022c:	f000 fbfc 	bl	8010a28 <__lshift>
 8010230:	4606      	mov	r6, r0
 8010232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010234:	2b00      	cmp	r3, #0
 8010236:	d06e      	beq.n	8010316 <_dtoa_r+0x90e>
 8010238:	ee18 0a10 	vmov	r0, s16
 801023c:	4631      	mov	r1, r6
 801023e:	f000 fc63 	bl	8010b08 <__mcmp>
 8010242:	2800      	cmp	r0, #0
 8010244:	da67      	bge.n	8010316 <_dtoa_r+0x90e>
 8010246:	9b00      	ldr	r3, [sp, #0]
 8010248:	3b01      	subs	r3, #1
 801024a:	ee18 1a10 	vmov	r1, s16
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	220a      	movs	r2, #10
 8010252:	2300      	movs	r3, #0
 8010254:	4620      	mov	r0, r4
 8010256:	f000 fa37 	bl	80106c8 <__multadd>
 801025a:	9b08      	ldr	r3, [sp, #32]
 801025c:	ee08 0a10 	vmov	s16, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 81b1 	beq.w	80105c8 <_dtoa_r+0xbc0>
 8010266:	2300      	movs	r3, #0
 8010268:	4639      	mov	r1, r7
 801026a:	220a      	movs	r2, #10
 801026c:	4620      	mov	r0, r4
 801026e:	f000 fa2b 	bl	80106c8 <__multadd>
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	4607      	mov	r7, r0
 8010278:	f300 808e 	bgt.w	8010398 <_dtoa_r+0x990>
 801027c:	9b06      	ldr	r3, [sp, #24]
 801027e:	2b02      	cmp	r3, #2
 8010280:	dc51      	bgt.n	8010326 <_dtoa_r+0x91e>
 8010282:	e089      	b.n	8010398 <_dtoa_r+0x990>
 8010284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801028a:	e74b      	b.n	8010124 <_dtoa_r+0x71c>
 801028c:	9b03      	ldr	r3, [sp, #12]
 801028e:	1e5e      	subs	r6, r3, #1
 8010290:	9b07      	ldr	r3, [sp, #28]
 8010292:	42b3      	cmp	r3, r6
 8010294:	bfbf      	itttt	lt
 8010296:	9b07      	ldrlt	r3, [sp, #28]
 8010298:	9607      	strlt	r6, [sp, #28]
 801029a:	1af2      	sublt	r2, r6, r3
 801029c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801029e:	bfb6      	itet	lt
 80102a0:	189b      	addlt	r3, r3, r2
 80102a2:	1b9e      	subge	r6, r3, r6
 80102a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80102a6:	9b03      	ldr	r3, [sp, #12]
 80102a8:	bfb8      	it	lt
 80102aa:	2600      	movlt	r6, #0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	bfb7      	itett	lt
 80102b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80102b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80102b8:	1a9d      	sublt	r5, r3, r2
 80102ba:	2300      	movlt	r3, #0
 80102bc:	e734      	b.n	8010128 <_dtoa_r+0x720>
 80102be:	9e07      	ldr	r6, [sp, #28]
 80102c0:	9d04      	ldr	r5, [sp, #16]
 80102c2:	9f08      	ldr	r7, [sp, #32]
 80102c4:	e73b      	b.n	801013e <_dtoa_r+0x736>
 80102c6:	9a07      	ldr	r2, [sp, #28]
 80102c8:	e767      	b.n	801019a <_dtoa_r+0x792>
 80102ca:	9b06      	ldr	r3, [sp, #24]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	dc18      	bgt.n	8010302 <_dtoa_r+0x8fa>
 80102d0:	f1ba 0f00 	cmp.w	sl, #0
 80102d4:	d115      	bne.n	8010302 <_dtoa_r+0x8fa>
 80102d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102da:	b993      	cbnz	r3, 8010302 <_dtoa_r+0x8fa>
 80102dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102e0:	0d1b      	lsrs	r3, r3, #20
 80102e2:	051b      	lsls	r3, r3, #20
 80102e4:	b183      	cbz	r3, 8010308 <_dtoa_r+0x900>
 80102e6:	9b04      	ldr	r3, [sp, #16]
 80102e8:	3301      	adds	r3, #1
 80102ea:	9304      	str	r3, [sp, #16]
 80102ec:	9b05      	ldr	r3, [sp, #20]
 80102ee:	3301      	adds	r3, #1
 80102f0:	9305      	str	r3, [sp, #20]
 80102f2:	f04f 0801 	mov.w	r8, #1
 80102f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f47f af6a 	bne.w	80101d2 <_dtoa_r+0x7ca>
 80102fe:	2001      	movs	r0, #1
 8010300:	e76f      	b.n	80101e2 <_dtoa_r+0x7da>
 8010302:	f04f 0800 	mov.w	r8, #0
 8010306:	e7f6      	b.n	80102f6 <_dtoa_r+0x8ee>
 8010308:	4698      	mov	r8, r3
 801030a:	e7f4      	b.n	80102f6 <_dtoa_r+0x8ee>
 801030c:	f43f af7d 	beq.w	801020a <_dtoa_r+0x802>
 8010310:	4618      	mov	r0, r3
 8010312:	301c      	adds	r0, #28
 8010314:	e772      	b.n	80101fc <_dtoa_r+0x7f4>
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	dc37      	bgt.n	801038c <_dtoa_r+0x984>
 801031c:	9b06      	ldr	r3, [sp, #24]
 801031e:	2b02      	cmp	r3, #2
 8010320:	dd34      	ble.n	801038c <_dtoa_r+0x984>
 8010322:	9b03      	ldr	r3, [sp, #12]
 8010324:	9302      	str	r3, [sp, #8]
 8010326:	9b02      	ldr	r3, [sp, #8]
 8010328:	b96b      	cbnz	r3, 8010346 <_dtoa_r+0x93e>
 801032a:	4631      	mov	r1, r6
 801032c:	2205      	movs	r2, #5
 801032e:	4620      	mov	r0, r4
 8010330:	f000 f9ca 	bl	80106c8 <__multadd>
 8010334:	4601      	mov	r1, r0
 8010336:	4606      	mov	r6, r0
 8010338:	ee18 0a10 	vmov	r0, s16
 801033c:	f000 fbe4 	bl	8010b08 <__mcmp>
 8010340:	2800      	cmp	r0, #0
 8010342:	f73f adbb 	bgt.w	800febc <_dtoa_r+0x4b4>
 8010346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010348:	9d01      	ldr	r5, [sp, #4]
 801034a:	43db      	mvns	r3, r3
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	f04f 0800 	mov.w	r8, #0
 8010352:	4631      	mov	r1, r6
 8010354:	4620      	mov	r0, r4
 8010356:	f000 f995 	bl	8010684 <_Bfree>
 801035a:	2f00      	cmp	r7, #0
 801035c:	f43f aea4 	beq.w	80100a8 <_dtoa_r+0x6a0>
 8010360:	f1b8 0f00 	cmp.w	r8, #0
 8010364:	d005      	beq.n	8010372 <_dtoa_r+0x96a>
 8010366:	45b8      	cmp	r8, r7
 8010368:	d003      	beq.n	8010372 <_dtoa_r+0x96a>
 801036a:	4641      	mov	r1, r8
 801036c:	4620      	mov	r0, r4
 801036e:	f000 f989 	bl	8010684 <_Bfree>
 8010372:	4639      	mov	r1, r7
 8010374:	4620      	mov	r0, r4
 8010376:	f000 f985 	bl	8010684 <_Bfree>
 801037a:	e695      	b.n	80100a8 <_dtoa_r+0x6a0>
 801037c:	2600      	movs	r6, #0
 801037e:	4637      	mov	r7, r6
 8010380:	e7e1      	b.n	8010346 <_dtoa_r+0x93e>
 8010382:	9700      	str	r7, [sp, #0]
 8010384:	4637      	mov	r7, r6
 8010386:	e599      	b.n	800febc <_dtoa_r+0x4b4>
 8010388:	40240000 	.word	0x40240000
 801038c:	9b08      	ldr	r3, [sp, #32]
 801038e:	2b00      	cmp	r3, #0
 8010390:	f000 80ca 	beq.w	8010528 <_dtoa_r+0xb20>
 8010394:	9b03      	ldr	r3, [sp, #12]
 8010396:	9302      	str	r3, [sp, #8]
 8010398:	2d00      	cmp	r5, #0
 801039a:	dd05      	ble.n	80103a8 <_dtoa_r+0x9a0>
 801039c:	4639      	mov	r1, r7
 801039e:	462a      	mov	r2, r5
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 fb41 	bl	8010a28 <__lshift>
 80103a6:	4607      	mov	r7, r0
 80103a8:	f1b8 0f00 	cmp.w	r8, #0
 80103ac:	d05b      	beq.n	8010466 <_dtoa_r+0xa5e>
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 f927 	bl	8010604 <_Balloc>
 80103b6:	4605      	mov	r5, r0
 80103b8:	b928      	cbnz	r0, 80103c6 <_dtoa_r+0x9be>
 80103ba:	4b87      	ldr	r3, [pc, #540]	; (80105d8 <_dtoa_r+0xbd0>)
 80103bc:	4602      	mov	r2, r0
 80103be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80103c2:	f7ff bb3b 	b.w	800fa3c <_dtoa_r+0x34>
 80103c6:	693a      	ldr	r2, [r7, #16]
 80103c8:	3202      	adds	r2, #2
 80103ca:	0092      	lsls	r2, r2, #2
 80103cc:	f107 010c 	add.w	r1, r7, #12
 80103d0:	300c      	adds	r0, #12
 80103d2:	f7fe fcf3 	bl	800edbc <memcpy>
 80103d6:	2201      	movs	r2, #1
 80103d8:	4629      	mov	r1, r5
 80103da:	4620      	mov	r0, r4
 80103dc:	f000 fb24 	bl	8010a28 <__lshift>
 80103e0:	9b01      	ldr	r3, [sp, #4]
 80103e2:	f103 0901 	add.w	r9, r3, #1
 80103e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80103ea:	4413      	add	r3, r2
 80103ec:	9305      	str	r3, [sp, #20]
 80103ee:	f00a 0301 	and.w	r3, sl, #1
 80103f2:	46b8      	mov	r8, r7
 80103f4:	9304      	str	r3, [sp, #16]
 80103f6:	4607      	mov	r7, r0
 80103f8:	4631      	mov	r1, r6
 80103fa:	ee18 0a10 	vmov	r0, s16
 80103fe:	f7ff fa75 	bl	800f8ec <quorem>
 8010402:	4641      	mov	r1, r8
 8010404:	9002      	str	r0, [sp, #8]
 8010406:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801040a:	ee18 0a10 	vmov	r0, s16
 801040e:	f000 fb7b 	bl	8010b08 <__mcmp>
 8010412:	463a      	mov	r2, r7
 8010414:	9003      	str	r0, [sp, #12]
 8010416:	4631      	mov	r1, r6
 8010418:	4620      	mov	r0, r4
 801041a:	f000 fb91 	bl	8010b40 <__mdiff>
 801041e:	68c2      	ldr	r2, [r0, #12]
 8010420:	f109 3bff 	add.w	fp, r9, #4294967295
 8010424:	4605      	mov	r5, r0
 8010426:	bb02      	cbnz	r2, 801046a <_dtoa_r+0xa62>
 8010428:	4601      	mov	r1, r0
 801042a:	ee18 0a10 	vmov	r0, s16
 801042e:	f000 fb6b 	bl	8010b08 <__mcmp>
 8010432:	4602      	mov	r2, r0
 8010434:	4629      	mov	r1, r5
 8010436:	4620      	mov	r0, r4
 8010438:	9207      	str	r2, [sp, #28]
 801043a:	f000 f923 	bl	8010684 <_Bfree>
 801043e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010442:	ea43 0102 	orr.w	r1, r3, r2
 8010446:	9b04      	ldr	r3, [sp, #16]
 8010448:	430b      	orrs	r3, r1
 801044a:	464d      	mov	r5, r9
 801044c:	d10f      	bne.n	801046e <_dtoa_r+0xa66>
 801044e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010452:	d02a      	beq.n	80104aa <_dtoa_r+0xaa2>
 8010454:	9b03      	ldr	r3, [sp, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	dd02      	ble.n	8010460 <_dtoa_r+0xa58>
 801045a:	9b02      	ldr	r3, [sp, #8]
 801045c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010460:	f88b a000 	strb.w	sl, [fp]
 8010464:	e775      	b.n	8010352 <_dtoa_r+0x94a>
 8010466:	4638      	mov	r0, r7
 8010468:	e7ba      	b.n	80103e0 <_dtoa_r+0x9d8>
 801046a:	2201      	movs	r2, #1
 801046c:	e7e2      	b.n	8010434 <_dtoa_r+0xa2c>
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	db04      	blt.n	801047e <_dtoa_r+0xa76>
 8010474:	9906      	ldr	r1, [sp, #24]
 8010476:	430b      	orrs	r3, r1
 8010478:	9904      	ldr	r1, [sp, #16]
 801047a:	430b      	orrs	r3, r1
 801047c:	d122      	bne.n	80104c4 <_dtoa_r+0xabc>
 801047e:	2a00      	cmp	r2, #0
 8010480:	ddee      	ble.n	8010460 <_dtoa_r+0xa58>
 8010482:	ee18 1a10 	vmov	r1, s16
 8010486:	2201      	movs	r2, #1
 8010488:	4620      	mov	r0, r4
 801048a:	f000 facd 	bl	8010a28 <__lshift>
 801048e:	4631      	mov	r1, r6
 8010490:	ee08 0a10 	vmov	s16, r0
 8010494:	f000 fb38 	bl	8010b08 <__mcmp>
 8010498:	2800      	cmp	r0, #0
 801049a:	dc03      	bgt.n	80104a4 <_dtoa_r+0xa9c>
 801049c:	d1e0      	bne.n	8010460 <_dtoa_r+0xa58>
 801049e:	f01a 0f01 	tst.w	sl, #1
 80104a2:	d0dd      	beq.n	8010460 <_dtoa_r+0xa58>
 80104a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80104a8:	d1d7      	bne.n	801045a <_dtoa_r+0xa52>
 80104aa:	2339      	movs	r3, #57	; 0x39
 80104ac:	f88b 3000 	strb.w	r3, [fp]
 80104b0:	462b      	mov	r3, r5
 80104b2:	461d      	mov	r5, r3
 80104b4:	3b01      	subs	r3, #1
 80104b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80104ba:	2a39      	cmp	r2, #57	; 0x39
 80104bc:	d071      	beq.n	80105a2 <_dtoa_r+0xb9a>
 80104be:	3201      	adds	r2, #1
 80104c0:	701a      	strb	r2, [r3, #0]
 80104c2:	e746      	b.n	8010352 <_dtoa_r+0x94a>
 80104c4:	2a00      	cmp	r2, #0
 80104c6:	dd07      	ble.n	80104d8 <_dtoa_r+0xad0>
 80104c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80104cc:	d0ed      	beq.n	80104aa <_dtoa_r+0xaa2>
 80104ce:	f10a 0301 	add.w	r3, sl, #1
 80104d2:	f88b 3000 	strb.w	r3, [fp]
 80104d6:	e73c      	b.n	8010352 <_dtoa_r+0x94a>
 80104d8:	9b05      	ldr	r3, [sp, #20]
 80104da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80104de:	4599      	cmp	r9, r3
 80104e0:	d047      	beq.n	8010572 <_dtoa_r+0xb6a>
 80104e2:	ee18 1a10 	vmov	r1, s16
 80104e6:	2300      	movs	r3, #0
 80104e8:	220a      	movs	r2, #10
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 f8ec 	bl	80106c8 <__multadd>
 80104f0:	45b8      	cmp	r8, r7
 80104f2:	ee08 0a10 	vmov	s16, r0
 80104f6:	f04f 0300 	mov.w	r3, #0
 80104fa:	f04f 020a 	mov.w	r2, #10
 80104fe:	4641      	mov	r1, r8
 8010500:	4620      	mov	r0, r4
 8010502:	d106      	bne.n	8010512 <_dtoa_r+0xb0a>
 8010504:	f000 f8e0 	bl	80106c8 <__multadd>
 8010508:	4680      	mov	r8, r0
 801050a:	4607      	mov	r7, r0
 801050c:	f109 0901 	add.w	r9, r9, #1
 8010510:	e772      	b.n	80103f8 <_dtoa_r+0x9f0>
 8010512:	f000 f8d9 	bl	80106c8 <__multadd>
 8010516:	4639      	mov	r1, r7
 8010518:	4680      	mov	r8, r0
 801051a:	2300      	movs	r3, #0
 801051c:	220a      	movs	r2, #10
 801051e:	4620      	mov	r0, r4
 8010520:	f000 f8d2 	bl	80106c8 <__multadd>
 8010524:	4607      	mov	r7, r0
 8010526:	e7f1      	b.n	801050c <_dtoa_r+0xb04>
 8010528:	9b03      	ldr	r3, [sp, #12]
 801052a:	9302      	str	r3, [sp, #8]
 801052c:	9d01      	ldr	r5, [sp, #4]
 801052e:	ee18 0a10 	vmov	r0, s16
 8010532:	4631      	mov	r1, r6
 8010534:	f7ff f9da 	bl	800f8ec <quorem>
 8010538:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801053c:	9b01      	ldr	r3, [sp, #4]
 801053e:	f805 ab01 	strb.w	sl, [r5], #1
 8010542:	1aea      	subs	r2, r5, r3
 8010544:	9b02      	ldr	r3, [sp, #8]
 8010546:	4293      	cmp	r3, r2
 8010548:	dd09      	ble.n	801055e <_dtoa_r+0xb56>
 801054a:	ee18 1a10 	vmov	r1, s16
 801054e:	2300      	movs	r3, #0
 8010550:	220a      	movs	r2, #10
 8010552:	4620      	mov	r0, r4
 8010554:	f000 f8b8 	bl	80106c8 <__multadd>
 8010558:	ee08 0a10 	vmov	s16, r0
 801055c:	e7e7      	b.n	801052e <_dtoa_r+0xb26>
 801055e:	9b02      	ldr	r3, [sp, #8]
 8010560:	2b00      	cmp	r3, #0
 8010562:	bfc8      	it	gt
 8010564:	461d      	movgt	r5, r3
 8010566:	9b01      	ldr	r3, [sp, #4]
 8010568:	bfd8      	it	le
 801056a:	2501      	movle	r5, #1
 801056c:	441d      	add	r5, r3
 801056e:	f04f 0800 	mov.w	r8, #0
 8010572:	ee18 1a10 	vmov	r1, s16
 8010576:	2201      	movs	r2, #1
 8010578:	4620      	mov	r0, r4
 801057a:	f000 fa55 	bl	8010a28 <__lshift>
 801057e:	4631      	mov	r1, r6
 8010580:	ee08 0a10 	vmov	s16, r0
 8010584:	f000 fac0 	bl	8010b08 <__mcmp>
 8010588:	2800      	cmp	r0, #0
 801058a:	dc91      	bgt.n	80104b0 <_dtoa_r+0xaa8>
 801058c:	d102      	bne.n	8010594 <_dtoa_r+0xb8c>
 801058e:	f01a 0f01 	tst.w	sl, #1
 8010592:	d18d      	bne.n	80104b0 <_dtoa_r+0xaa8>
 8010594:	462b      	mov	r3, r5
 8010596:	461d      	mov	r5, r3
 8010598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801059c:	2a30      	cmp	r2, #48	; 0x30
 801059e:	d0fa      	beq.n	8010596 <_dtoa_r+0xb8e>
 80105a0:	e6d7      	b.n	8010352 <_dtoa_r+0x94a>
 80105a2:	9a01      	ldr	r2, [sp, #4]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d184      	bne.n	80104b2 <_dtoa_r+0xaaa>
 80105a8:	9b00      	ldr	r3, [sp, #0]
 80105aa:	3301      	adds	r3, #1
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	2331      	movs	r3, #49	; 0x31
 80105b0:	7013      	strb	r3, [r2, #0]
 80105b2:	e6ce      	b.n	8010352 <_dtoa_r+0x94a>
 80105b4:	4b09      	ldr	r3, [pc, #36]	; (80105dc <_dtoa_r+0xbd4>)
 80105b6:	f7ff ba95 	b.w	800fae4 <_dtoa_r+0xdc>
 80105ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f47f aa6e 	bne.w	800fa9e <_dtoa_r+0x96>
 80105c2:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <_dtoa_r+0xbd8>)
 80105c4:	f7ff ba8e 	b.w	800fae4 <_dtoa_r+0xdc>
 80105c8:	9b02      	ldr	r3, [sp, #8]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	dcae      	bgt.n	801052c <_dtoa_r+0xb24>
 80105ce:	9b06      	ldr	r3, [sp, #24]
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	f73f aea8 	bgt.w	8010326 <_dtoa_r+0x91e>
 80105d6:	e7a9      	b.n	801052c <_dtoa_r+0xb24>
 80105d8:	080277c7 	.word	0x080277c7
 80105dc:	08027724 	.word	0x08027724
 80105e0:	08027748 	.word	0x08027748

080105e4 <_localeconv_r>:
 80105e4:	4800      	ldr	r0, [pc, #0]	; (80105e8 <_localeconv_r+0x4>)
 80105e6:	4770      	bx	lr
 80105e8:	20001000 	.word	0x20001000

080105ec <__malloc_lock>:
 80105ec:	4801      	ldr	r0, [pc, #4]	; (80105f4 <__malloc_lock+0x8>)
 80105ee:	f000 bd5e 	b.w	80110ae <__retarget_lock_acquire_recursive>
 80105f2:	bf00      	nop
 80105f4:	2000552c 	.word	0x2000552c

080105f8 <__malloc_unlock>:
 80105f8:	4801      	ldr	r0, [pc, #4]	; (8010600 <__malloc_unlock+0x8>)
 80105fa:	f000 bd59 	b.w	80110b0 <__retarget_lock_release_recursive>
 80105fe:	bf00      	nop
 8010600:	2000552c 	.word	0x2000552c

08010604 <_Balloc>:
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010608:	4604      	mov	r4, r0
 801060a:	460d      	mov	r5, r1
 801060c:	b976      	cbnz	r6, 801062c <_Balloc+0x28>
 801060e:	2010      	movs	r0, #16
 8010610:	f7fe fbcc 	bl	800edac <malloc>
 8010614:	4602      	mov	r2, r0
 8010616:	6260      	str	r0, [r4, #36]	; 0x24
 8010618:	b920      	cbnz	r0, 8010624 <_Balloc+0x20>
 801061a:	4b18      	ldr	r3, [pc, #96]	; (801067c <_Balloc+0x78>)
 801061c:	4818      	ldr	r0, [pc, #96]	; (8010680 <_Balloc+0x7c>)
 801061e:	2166      	movs	r1, #102	; 0x66
 8010620:	f000 fd14 	bl	801104c <__assert_func>
 8010624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010628:	6006      	str	r6, [r0, #0]
 801062a:	60c6      	str	r6, [r0, #12]
 801062c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801062e:	68f3      	ldr	r3, [r6, #12]
 8010630:	b183      	cbz	r3, 8010654 <_Balloc+0x50>
 8010632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801063a:	b9b8      	cbnz	r0, 801066c <_Balloc+0x68>
 801063c:	2101      	movs	r1, #1
 801063e:	fa01 f605 	lsl.w	r6, r1, r5
 8010642:	1d72      	adds	r2, r6, #5
 8010644:	0092      	lsls	r2, r2, #2
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fb60 	bl	8010d0c <_calloc_r>
 801064c:	b160      	cbz	r0, 8010668 <_Balloc+0x64>
 801064e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010652:	e00e      	b.n	8010672 <_Balloc+0x6e>
 8010654:	2221      	movs	r2, #33	; 0x21
 8010656:	2104      	movs	r1, #4
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fb57 	bl	8010d0c <_calloc_r>
 801065e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010660:	60f0      	str	r0, [r6, #12]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1e4      	bne.n	8010632 <_Balloc+0x2e>
 8010668:	2000      	movs	r0, #0
 801066a:	bd70      	pop	{r4, r5, r6, pc}
 801066c:	6802      	ldr	r2, [r0, #0]
 801066e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010672:	2300      	movs	r3, #0
 8010674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010678:	e7f7      	b.n	801066a <_Balloc+0x66>
 801067a:	bf00      	nop
 801067c:	08027755 	.word	0x08027755
 8010680:	080277d8 	.word	0x080277d8

08010684 <_Bfree>:
 8010684:	b570      	push	{r4, r5, r6, lr}
 8010686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010688:	4605      	mov	r5, r0
 801068a:	460c      	mov	r4, r1
 801068c:	b976      	cbnz	r6, 80106ac <_Bfree+0x28>
 801068e:	2010      	movs	r0, #16
 8010690:	f7fe fb8c 	bl	800edac <malloc>
 8010694:	4602      	mov	r2, r0
 8010696:	6268      	str	r0, [r5, #36]	; 0x24
 8010698:	b920      	cbnz	r0, 80106a4 <_Bfree+0x20>
 801069a:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <_Bfree+0x3c>)
 801069c:	4809      	ldr	r0, [pc, #36]	; (80106c4 <_Bfree+0x40>)
 801069e:	218a      	movs	r1, #138	; 0x8a
 80106a0:	f000 fcd4 	bl	801104c <__assert_func>
 80106a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106a8:	6006      	str	r6, [r0, #0]
 80106aa:	60c6      	str	r6, [r0, #12]
 80106ac:	b13c      	cbz	r4, 80106be <_Bfree+0x3a>
 80106ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80106b0:	6862      	ldr	r2, [r4, #4]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106b8:	6021      	str	r1, [r4, #0]
 80106ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106be:	bd70      	pop	{r4, r5, r6, pc}
 80106c0:	08027755 	.word	0x08027755
 80106c4:	080277d8 	.word	0x080277d8

080106c8 <__multadd>:
 80106c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106cc:	690d      	ldr	r5, [r1, #16]
 80106ce:	4607      	mov	r7, r0
 80106d0:	460c      	mov	r4, r1
 80106d2:	461e      	mov	r6, r3
 80106d4:	f101 0c14 	add.w	ip, r1, #20
 80106d8:	2000      	movs	r0, #0
 80106da:	f8dc 3000 	ldr.w	r3, [ip]
 80106de:	b299      	uxth	r1, r3
 80106e0:	fb02 6101 	mla	r1, r2, r1, r6
 80106e4:	0c1e      	lsrs	r6, r3, #16
 80106e6:	0c0b      	lsrs	r3, r1, #16
 80106e8:	fb02 3306 	mla	r3, r2, r6, r3
 80106ec:	b289      	uxth	r1, r1
 80106ee:	3001      	adds	r0, #1
 80106f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106f4:	4285      	cmp	r5, r0
 80106f6:	f84c 1b04 	str.w	r1, [ip], #4
 80106fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106fe:	dcec      	bgt.n	80106da <__multadd+0x12>
 8010700:	b30e      	cbz	r6, 8010746 <__multadd+0x7e>
 8010702:	68a3      	ldr	r3, [r4, #8]
 8010704:	42ab      	cmp	r3, r5
 8010706:	dc19      	bgt.n	801073c <__multadd+0x74>
 8010708:	6861      	ldr	r1, [r4, #4]
 801070a:	4638      	mov	r0, r7
 801070c:	3101      	adds	r1, #1
 801070e:	f7ff ff79 	bl	8010604 <_Balloc>
 8010712:	4680      	mov	r8, r0
 8010714:	b928      	cbnz	r0, 8010722 <__multadd+0x5a>
 8010716:	4602      	mov	r2, r0
 8010718:	4b0c      	ldr	r3, [pc, #48]	; (801074c <__multadd+0x84>)
 801071a:	480d      	ldr	r0, [pc, #52]	; (8010750 <__multadd+0x88>)
 801071c:	21b5      	movs	r1, #181	; 0xb5
 801071e:	f000 fc95 	bl	801104c <__assert_func>
 8010722:	6922      	ldr	r2, [r4, #16]
 8010724:	3202      	adds	r2, #2
 8010726:	f104 010c 	add.w	r1, r4, #12
 801072a:	0092      	lsls	r2, r2, #2
 801072c:	300c      	adds	r0, #12
 801072e:	f7fe fb45 	bl	800edbc <memcpy>
 8010732:	4621      	mov	r1, r4
 8010734:	4638      	mov	r0, r7
 8010736:	f7ff ffa5 	bl	8010684 <_Bfree>
 801073a:	4644      	mov	r4, r8
 801073c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010740:	3501      	adds	r5, #1
 8010742:	615e      	str	r6, [r3, #20]
 8010744:	6125      	str	r5, [r4, #16]
 8010746:	4620      	mov	r0, r4
 8010748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801074c:	080277c7 	.word	0x080277c7
 8010750:	080277d8 	.word	0x080277d8

08010754 <__hi0bits>:
 8010754:	0c03      	lsrs	r3, r0, #16
 8010756:	041b      	lsls	r3, r3, #16
 8010758:	b9d3      	cbnz	r3, 8010790 <__hi0bits+0x3c>
 801075a:	0400      	lsls	r0, r0, #16
 801075c:	2310      	movs	r3, #16
 801075e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010762:	bf04      	itt	eq
 8010764:	0200      	lsleq	r0, r0, #8
 8010766:	3308      	addeq	r3, #8
 8010768:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801076c:	bf04      	itt	eq
 801076e:	0100      	lsleq	r0, r0, #4
 8010770:	3304      	addeq	r3, #4
 8010772:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010776:	bf04      	itt	eq
 8010778:	0080      	lsleq	r0, r0, #2
 801077a:	3302      	addeq	r3, #2
 801077c:	2800      	cmp	r0, #0
 801077e:	db05      	blt.n	801078c <__hi0bits+0x38>
 8010780:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010784:	f103 0301 	add.w	r3, r3, #1
 8010788:	bf08      	it	eq
 801078a:	2320      	moveq	r3, #32
 801078c:	4618      	mov	r0, r3
 801078e:	4770      	bx	lr
 8010790:	2300      	movs	r3, #0
 8010792:	e7e4      	b.n	801075e <__hi0bits+0xa>

08010794 <__lo0bits>:
 8010794:	6803      	ldr	r3, [r0, #0]
 8010796:	f013 0207 	ands.w	r2, r3, #7
 801079a:	4601      	mov	r1, r0
 801079c:	d00b      	beq.n	80107b6 <__lo0bits+0x22>
 801079e:	07da      	lsls	r2, r3, #31
 80107a0:	d423      	bmi.n	80107ea <__lo0bits+0x56>
 80107a2:	0798      	lsls	r0, r3, #30
 80107a4:	bf49      	itett	mi
 80107a6:	085b      	lsrmi	r3, r3, #1
 80107a8:	089b      	lsrpl	r3, r3, #2
 80107aa:	2001      	movmi	r0, #1
 80107ac:	600b      	strmi	r3, [r1, #0]
 80107ae:	bf5c      	itt	pl
 80107b0:	600b      	strpl	r3, [r1, #0]
 80107b2:	2002      	movpl	r0, #2
 80107b4:	4770      	bx	lr
 80107b6:	b298      	uxth	r0, r3
 80107b8:	b9a8      	cbnz	r0, 80107e6 <__lo0bits+0x52>
 80107ba:	0c1b      	lsrs	r3, r3, #16
 80107bc:	2010      	movs	r0, #16
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	b90a      	cbnz	r2, 80107c6 <__lo0bits+0x32>
 80107c2:	3008      	adds	r0, #8
 80107c4:	0a1b      	lsrs	r3, r3, #8
 80107c6:	071a      	lsls	r2, r3, #28
 80107c8:	bf04      	itt	eq
 80107ca:	091b      	lsreq	r3, r3, #4
 80107cc:	3004      	addeq	r0, #4
 80107ce:	079a      	lsls	r2, r3, #30
 80107d0:	bf04      	itt	eq
 80107d2:	089b      	lsreq	r3, r3, #2
 80107d4:	3002      	addeq	r0, #2
 80107d6:	07da      	lsls	r2, r3, #31
 80107d8:	d403      	bmi.n	80107e2 <__lo0bits+0x4e>
 80107da:	085b      	lsrs	r3, r3, #1
 80107dc:	f100 0001 	add.w	r0, r0, #1
 80107e0:	d005      	beq.n	80107ee <__lo0bits+0x5a>
 80107e2:	600b      	str	r3, [r1, #0]
 80107e4:	4770      	bx	lr
 80107e6:	4610      	mov	r0, r2
 80107e8:	e7e9      	b.n	80107be <__lo0bits+0x2a>
 80107ea:	2000      	movs	r0, #0
 80107ec:	4770      	bx	lr
 80107ee:	2020      	movs	r0, #32
 80107f0:	4770      	bx	lr
	...

080107f4 <__i2b>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	460c      	mov	r4, r1
 80107f8:	2101      	movs	r1, #1
 80107fa:	f7ff ff03 	bl	8010604 <_Balloc>
 80107fe:	4602      	mov	r2, r0
 8010800:	b928      	cbnz	r0, 801080e <__i2b+0x1a>
 8010802:	4b05      	ldr	r3, [pc, #20]	; (8010818 <__i2b+0x24>)
 8010804:	4805      	ldr	r0, [pc, #20]	; (801081c <__i2b+0x28>)
 8010806:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801080a:	f000 fc1f 	bl	801104c <__assert_func>
 801080e:	2301      	movs	r3, #1
 8010810:	6144      	str	r4, [r0, #20]
 8010812:	6103      	str	r3, [r0, #16]
 8010814:	bd10      	pop	{r4, pc}
 8010816:	bf00      	nop
 8010818:	080277c7 	.word	0x080277c7
 801081c:	080277d8 	.word	0x080277d8

08010820 <__multiply>:
 8010820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010824:	4691      	mov	r9, r2
 8010826:	690a      	ldr	r2, [r1, #16]
 8010828:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801082c:	429a      	cmp	r2, r3
 801082e:	bfb8      	it	lt
 8010830:	460b      	movlt	r3, r1
 8010832:	460c      	mov	r4, r1
 8010834:	bfbc      	itt	lt
 8010836:	464c      	movlt	r4, r9
 8010838:	4699      	movlt	r9, r3
 801083a:	6927      	ldr	r7, [r4, #16]
 801083c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010840:	68a3      	ldr	r3, [r4, #8]
 8010842:	6861      	ldr	r1, [r4, #4]
 8010844:	eb07 060a 	add.w	r6, r7, sl
 8010848:	42b3      	cmp	r3, r6
 801084a:	b085      	sub	sp, #20
 801084c:	bfb8      	it	lt
 801084e:	3101      	addlt	r1, #1
 8010850:	f7ff fed8 	bl	8010604 <_Balloc>
 8010854:	b930      	cbnz	r0, 8010864 <__multiply+0x44>
 8010856:	4602      	mov	r2, r0
 8010858:	4b44      	ldr	r3, [pc, #272]	; (801096c <__multiply+0x14c>)
 801085a:	4845      	ldr	r0, [pc, #276]	; (8010970 <__multiply+0x150>)
 801085c:	f240 115d 	movw	r1, #349	; 0x15d
 8010860:	f000 fbf4 	bl	801104c <__assert_func>
 8010864:	f100 0514 	add.w	r5, r0, #20
 8010868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801086c:	462b      	mov	r3, r5
 801086e:	2200      	movs	r2, #0
 8010870:	4543      	cmp	r3, r8
 8010872:	d321      	bcc.n	80108b8 <__multiply+0x98>
 8010874:	f104 0314 	add.w	r3, r4, #20
 8010878:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801087c:	f109 0314 	add.w	r3, r9, #20
 8010880:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010884:	9202      	str	r2, [sp, #8]
 8010886:	1b3a      	subs	r2, r7, r4
 8010888:	3a15      	subs	r2, #21
 801088a:	f022 0203 	bic.w	r2, r2, #3
 801088e:	3204      	adds	r2, #4
 8010890:	f104 0115 	add.w	r1, r4, #21
 8010894:	428f      	cmp	r7, r1
 8010896:	bf38      	it	cc
 8010898:	2204      	movcc	r2, #4
 801089a:	9201      	str	r2, [sp, #4]
 801089c:	9a02      	ldr	r2, [sp, #8]
 801089e:	9303      	str	r3, [sp, #12]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d80c      	bhi.n	80108be <__multiply+0x9e>
 80108a4:	2e00      	cmp	r6, #0
 80108a6:	dd03      	ble.n	80108b0 <__multiply+0x90>
 80108a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d05a      	beq.n	8010966 <__multiply+0x146>
 80108b0:	6106      	str	r6, [r0, #16]
 80108b2:	b005      	add	sp, #20
 80108b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b8:	f843 2b04 	str.w	r2, [r3], #4
 80108bc:	e7d8      	b.n	8010870 <__multiply+0x50>
 80108be:	f8b3 a000 	ldrh.w	sl, [r3]
 80108c2:	f1ba 0f00 	cmp.w	sl, #0
 80108c6:	d024      	beq.n	8010912 <__multiply+0xf2>
 80108c8:	f104 0e14 	add.w	lr, r4, #20
 80108cc:	46a9      	mov	r9, r5
 80108ce:	f04f 0c00 	mov.w	ip, #0
 80108d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80108d6:	f8d9 1000 	ldr.w	r1, [r9]
 80108da:	fa1f fb82 	uxth.w	fp, r2
 80108de:	b289      	uxth	r1, r1
 80108e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80108e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80108e8:	f8d9 2000 	ldr.w	r2, [r9]
 80108ec:	4461      	add	r1, ip
 80108ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80108f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80108f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80108fa:	b289      	uxth	r1, r1
 80108fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010900:	4577      	cmp	r7, lr
 8010902:	f849 1b04 	str.w	r1, [r9], #4
 8010906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801090a:	d8e2      	bhi.n	80108d2 <__multiply+0xb2>
 801090c:	9a01      	ldr	r2, [sp, #4]
 801090e:	f845 c002 	str.w	ip, [r5, r2]
 8010912:	9a03      	ldr	r2, [sp, #12]
 8010914:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010918:	3304      	adds	r3, #4
 801091a:	f1b9 0f00 	cmp.w	r9, #0
 801091e:	d020      	beq.n	8010962 <__multiply+0x142>
 8010920:	6829      	ldr	r1, [r5, #0]
 8010922:	f104 0c14 	add.w	ip, r4, #20
 8010926:	46ae      	mov	lr, r5
 8010928:	f04f 0a00 	mov.w	sl, #0
 801092c:	f8bc b000 	ldrh.w	fp, [ip]
 8010930:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010934:	fb09 220b 	mla	r2, r9, fp, r2
 8010938:	4492      	add	sl, r2
 801093a:	b289      	uxth	r1, r1
 801093c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010940:	f84e 1b04 	str.w	r1, [lr], #4
 8010944:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010948:	f8be 1000 	ldrh.w	r1, [lr]
 801094c:	0c12      	lsrs	r2, r2, #16
 801094e:	fb09 1102 	mla	r1, r9, r2, r1
 8010952:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010956:	4567      	cmp	r7, ip
 8010958:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801095c:	d8e6      	bhi.n	801092c <__multiply+0x10c>
 801095e:	9a01      	ldr	r2, [sp, #4]
 8010960:	50a9      	str	r1, [r5, r2]
 8010962:	3504      	adds	r5, #4
 8010964:	e79a      	b.n	801089c <__multiply+0x7c>
 8010966:	3e01      	subs	r6, #1
 8010968:	e79c      	b.n	80108a4 <__multiply+0x84>
 801096a:	bf00      	nop
 801096c:	080277c7 	.word	0x080277c7
 8010970:	080277d8 	.word	0x080277d8

08010974 <__pow5mult>:
 8010974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010978:	4615      	mov	r5, r2
 801097a:	f012 0203 	ands.w	r2, r2, #3
 801097e:	4606      	mov	r6, r0
 8010980:	460f      	mov	r7, r1
 8010982:	d007      	beq.n	8010994 <__pow5mult+0x20>
 8010984:	4c25      	ldr	r4, [pc, #148]	; (8010a1c <__pow5mult+0xa8>)
 8010986:	3a01      	subs	r2, #1
 8010988:	2300      	movs	r3, #0
 801098a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801098e:	f7ff fe9b 	bl	80106c8 <__multadd>
 8010992:	4607      	mov	r7, r0
 8010994:	10ad      	asrs	r5, r5, #2
 8010996:	d03d      	beq.n	8010a14 <__pow5mult+0xa0>
 8010998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801099a:	b97c      	cbnz	r4, 80109bc <__pow5mult+0x48>
 801099c:	2010      	movs	r0, #16
 801099e:	f7fe fa05 	bl	800edac <malloc>
 80109a2:	4602      	mov	r2, r0
 80109a4:	6270      	str	r0, [r6, #36]	; 0x24
 80109a6:	b928      	cbnz	r0, 80109b4 <__pow5mult+0x40>
 80109a8:	4b1d      	ldr	r3, [pc, #116]	; (8010a20 <__pow5mult+0xac>)
 80109aa:	481e      	ldr	r0, [pc, #120]	; (8010a24 <__pow5mult+0xb0>)
 80109ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80109b0:	f000 fb4c 	bl	801104c <__assert_func>
 80109b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109b8:	6004      	str	r4, [r0, #0]
 80109ba:	60c4      	str	r4, [r0, #12]
 80109bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80109c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109c4:	b94c      	cbnz	r4, 80109da <__pow5mult+0x66>
 80109c6:	f240 2171 	movw	r1, #625	; 0x271
 80109ca:	4630      	mov	r0, r6
 80109cc:	f7ff ff12 	bl	80107f4 <__i2b>
 80109d0:	2300      	movs	r3, #0
 80109d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80109d6:	4604      	mov	r4, r0
 80109d8:	6003      	str	r3, [r0, #0]
 80109da:	f04f 0900 	mov.w	r9, #0
 80109de:	07eb      	lsls	r3, r5, #31
 80109e0:	d50a      	bpl.n	80109f8 <__pow5mult+0x84>
 80109e2:	4639      	mov	r1, r7
 80109e4:	4622      	mov	r2, r4
 80109e6:	4630      	mov	r0, r6
 80109e8:	f7ff ff1a 	bl	8010820 <__multiply>
 80109ec:	4639      	mov	r1, r7
 80109ee:	4680      	mov	r8, r0
 80109f0:	4630      	mov	r0, r6
 80109f2:	f7ff fe47 	bl	8010684 <_Bfree>
 80109f6:	4647      	mov	r7, r8
 80109f8:	106d      	asrs	r5, r5, #1
 80109fa:	d00b      	beq.n	8010a14 <__pow5mult+0xa0>
 80109fc:	6820      	ldr	r0, [r4, #0]
 80109fe:	b938      	cbnz	r0, 8010a10 <__pow5mult+0x9c>
 8010a00:	4622      	mov	r2, r4
 8010a02:	4621      	mov	r1, r4
 8010a04:	4630      	mov	r0, r6
 8010a06:	f7ff ff0b 	bl	8010820 <__multiply>
 8010a0a:	6020      	str	r0, [r4, #0]
 8010a0c:	f8c0 9000 	str.w	r9, [r0]
 8010a10:	4604      	mov	r4, r0
 8010a12:	e7e4      	b.n	80109de <__pow5mult+0x6a>
 8010a14:	4638      	mov	r0, r7
 8010a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a1a:	bf00      	nop
 8010a1c:	08027928 	.word	0x08027928
 8010a20:	08027755 	.word	0x08027755
 8010a24:	080277d8 	.word	0x080277d8

08010a28 <__lshift>:
 8010a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	6849      	ldr	r1, [r1, #4]
 8010a30:	6923      	ldr	r3, [r4, #16]
 8010a32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a36:	68a3      	ldr	r3, [r4, #8]
 8010a38:	4607      	mov	r7, r0
 8010a3a:	4691      	mov	r9, r2
 8010a3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a40:	f108 0601 	add.w	r6, r8, #1
 8010a44:	42b3      	cmp	r3, r6
 8010a46:	db0b      	blt.n	8010a60 <__lshift+0x38>
 8010a48:	4638      	mov	r0, r7
 8010a4a:	f7ff fddb 	bl	8010604 <_Balloc>
 8010a4e:	4605      	mov	r5, r0
 8010a50:	b948      	cbnz	r0, 8010a66 <__lshift+0x3e>
 8010a52:	4602      	mov	r2, r0
 8010a54:	4b2a      	ldr	r3, [pc, #168]	; (8010b00 <__lshift+0xd8>)
 8010a56:	482b      	ldr	r0, [pc, #172]	; (8010b04 <__lshift+0xdc>)
 8010a58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010a5c:	f000 faf6 	bl	801104c <__assert_func>
 8010a60:	3101      	adds	r1, #1
 8010a62:	005b      	lsls	r3, r3, #1
 8010a64:	e7ee      	b.n	8010a44 <__lshift+0x1c>
 8010a66:	2300      	movs	r3, #0
 8010a68:	f100 0114 	add.w	r1, r0, #20
 8010a6c:	f100 0210 	add.w	r2, r0, #16
 8010a70:	4618      	mov	r0, r3
 8010a72:	4553      	cmp	r3, sl
 8010a74:	db37      	blt.n	8010ae6 <__lshift+0xbe>
 8010a76:	6920      	ldr	r0, [r4, #16]
 8010a78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a7c:	f104 0314 	add.w	r3, r4, #20
 8010a80:	f019 091f 	ands.w	r9, r9, #31
 8010a84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010a8c:	d02f      	beq.n	8010aee <__lshift+0xc6>
 8010a8e:	f1c9 0e20 	rsb	lr, r9, #32
 8010a92:	468a      	mov	sl, r1
 8010a94:	f04f 0c00 	mov.w	ip, #0
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	fa02 f209 	lsl.w	r2, r2, r9
 8010a9e:	ea42 020c 	orr.w	r2, r2, ip
 8010aa2:	f84a 2b04 	str.w	r2, [sl], #4
 8010aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aaa:	4298      	cmp	r0, r3
 8010aac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010ab0:	d8f2      	bhi.n	8010a98 <__lshift+0x70>
 8010ab2:	1b03      	subs	r3, r0, r4
 8010ab4:	3b15      	subs	r3, #21
 8010ab6:	f023 0303 	bic.w	r3, r3, #3
 8010aba:	3304      	adds	r3, #4
 8010abc:	f104 0215 	add.w	r2, r4, #21
 8010ac0:	4290      	cmp	r0, r2
 8010ac2:	bf38      	it	cc
 8010ac4:	2304      	movcc	r3, #4
 8010ac6:	f841 c003 	str.w	ip, [r1, r3]
 8010aca:	f1bc 0f00 	cmp.w	ip, #0
 8010ace:	d001      	beq.n	8010ad4 <__lshift+0xac>
 8010ad0:	f108 0602 	add.w	r6, r8, #2
 8010ad4:	3e01      	subs	r6, #1
 8010ad6:	4638      	mov	r0, r7
 8010ad8:	612e      	str	r6, [r5, #16]
 8010ada:	4621      	mov	r1, r4
 8010adc:	f7ff fdd2 	bl	8010684 <_Bfree>
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010aea:	3301      	adds	r3, #1
 8010aec:	e7c1      	b.n	8010a72 <__lshift+0x4a>
 8010aee:	3904      	subs	r1, #4
 8010af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010af4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010af8:	4298      	cmp	r0, r3
 8010afa:	d8f9      	bhi.n	8010af0 <__lshift+0xc8>
 8010afc:	e7ea      	b.n	8010ad4 <__lshift+0xac>
 8010afe:	bf00      	nop
 8010b00:	080277c7 	.word	0x080277c7
 8010b04:	080277d8 	.word	0x080277d8

08010b08 <__mcmp>:
 8010b08:	b530      	push	{r4, r5, lr}
 8010b0a:	6902      	ldr	r2, [r0, #16]
 8010b0c:	690c      	ldr	r4, [r1, #16]
 8010b0e:	1b12      	subs	r2, r2, r4
 8010b10:	d10e      	bne.n	8010b30 <__mcmp+0x28>
 8010b12:	f100 0314 	add.w	r3, r0, #20
 8010b16:	3114      	adds	r1, #20
 8010b18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010b24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010b28:	42a5      	cmp	r5, r4
 8010b2a:	d003      	beq.n	8010b34 <__mcmp+0x2c>
 8010b2c:	d305      	bcc.n	8010b3a <__mcmp+0x32>
 8010b2e:	2201      	movs	r2, #1
 8010b30:	4610      	mov	r0, r2
 8010b32:	bd30      	pop	{r4, r5, pc}
 8010b34:	4283      	cmp	r3, r0
 8010b36:	d3f3      	bcc.n	8010b20 <__mcmp+0x18>
 8010b38:	e7fa      	b.n	8010b30 <__mcmp+0x28>
 8010b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b3e:	e7f7      	b.n	8010b30 <__mcmp+0x28>

08010b40 <__mdiff>:
 8010b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b44:	460c      	mov	r4, r1
 8010b46:	4606      	mov	r6, r0
 8010b48:	4611      	mov	r1, r2
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	4690      	mov	r8, r2
 8010b4e:	f7ff ffdb 	bl	8010b08 <__mcmp>
 8010b52:	1e05      	subs	r5, r0, #0
 8010b54:	d110      	bne.n	8010b78 <__mdiff+0x38>
 8010b56:	4629      	mov	r1, r5
 8010b58:	4630      	mov	r0, r6
 8010b5a:	f7ff fd53 	bl	8010604 <_Balloc>
 8010b5e:	b930      	cbnz	r0, 8010b6e <__mdiff+0x2e>
 8010b60:	4b3a      	ldr	r3, [pc, #232]	; (8010c4c <__mdiff+0x10c>)
 8010b62:	4602      	mov	r2, r0
 8010b64:	f240 2132 	movw	r1, #562	; 0x232
 8010b68:	4839      	ldr	r0, [pc, #228]	; (8010c50 <__mdiff+0x110>)
 8010b6a:	f000 fa6f 	bl	801104c <__assert_func>
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b78:	bfa4      	itt	ge
 8010b7a:	4643      	movge	r3, r8
 8010b7c:	46a0      	movge	r8, r4
 8010b7e:	4630      	mov	r0, r6
 8010b80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b84:	bfa6      	itte	ge
 8010b86:	461c      	movge	r4, r3
 8010b88:	2500      	movge	r5, #0
 8010b8a:	2501      	movlt	r5, #1
 8010b8c:	f7ff fd3a 	bl	8010604 <_Balloc>
 8010b90:	b920      	cbnz	r0, 8010b9c <__mdiff+0x5c>
 8010b92:	4b2e      	ldr	r3, [pc, #184]	; (8010c4c <__mdiff+0x10c>)
 8010b94:	4602      	mov	r2, r0
 8010b96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010b9a:	e7e5      	b.n	8010b68 <__mdiff+0x28>
 8010b9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ba0:	6926      	ldr	r6, [r4, #16]
 8010ba2:	60c5      	str	r5, [r0, #12]
 8010ba4:	f104 0914 	add.w	r9, r4, #20
 8010ba8:	f108 0514 	add.w	r5, r8, #20
 8010bac:	f100 0e14 	add.w	lr, r0, #20
 8010bb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010bb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010bb8:	f108 0210 	add.w	r2, r8, #16
 8010bbc:	46f2      	mov	sl, lr
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010bc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010bc8:	fa1f f883 	uxth.w	r8, r3
 8010bcc:	fa11 f18b 	uxtah	r1, r1, fp
 8010bd0:	0c1b      	lsrs	r3, r3, #16
 8010bd2:	eba1 0808 	sub.w	r8, r1, r8
 8010bd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010bda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010bde:	fa1f f888 	uxth.w	r8, r8
 8010be2:	1419      	asrs	r1, r3, #16
 8010be4:	454e      	cmp	r6, r9
 8010be6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010bea:	f84a 3b04 	str.w	r3, [sl], #4
 8010bee:	d8e7      	bhi.n	8010bc0 <__mdiff+0x80>
 8010bf0:	1b33      	subs	r3, r6, r4
 8010bf2:	3b15      	subs	r3, #21
 8010bf4:	f023 0303 	bic.w	r3, r3, #3
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	3415      	adds	r4, #21
 8010bfc:	42a6      	cmp	r6, r4
 8010bfe:	bf38      	it	cc
 8010c00:	2304      	movcc	r3, #4
 8010c02:	441d      	add	r5, r3
 8010c04:	4473      	add	r3, lr
 8010c06:	469e      	mov	lr, r3
 8010c08:	462e      	mov	r6, r5
 8010c0a:	4566      	cmp	r6, ip
 8010c0c:	d30e      	bcc.n	8010c2c <__mdiff+0xec>
 8010c0e:	f10c 0203 	add.w	r2, ip, #3
 8010c12:	1b52      	subs	r2, r2, r5
 8010c14:	f022 0203 	bic.w	r2, r2, #3
 8010c18:	3d03      	subs	r5, #3
 8010c1a:	45ac      	cmp	ip, r5
 8010c1c:	bf38      	it	cc
 8010c1e:	2200      	movcc	r2, #0
 8010c20:	441a      	add	r2, r3
 8010c22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010c26:	b17b      	cbz	r3, 8010c48 <__mdiff+0x108>
 8010c28:	6107      	str	r7, [r0, #16]
 8010c2a:	e7a3      	b.n	8010b74 <__mdiff+0x34>
 8010c2c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010c30:	fa11 f288 	uxtah	r2, r1, r8
 8010c34:	1414      	asrs	r4, r2, #16
 8010c36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010c3a:	b292      	uxth	r2, r2
 8010c3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010c40:	f84e 2b04 	str.w	r2, [lr], #4
 8010c44:	1421      	asrs	r1, r4, #16
 8010c46:	e7e0      	b.n	8010c0a <__mdiff+0xca>
 8010c48:	3f01      	subs	r7, #1
 8010c4a:	e7ea      	b.n	8010c22 <__mdiff+0xe2>
 8010c4c:	080277c7 	.word	0x080277c7
 8010c50:	080277d8 	.word	0x080277d8

08010c54 <__d2b>:
 8010c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c58:	4689      	mov	r9, r1
 8010c5a:	2101      	movs	r1, #1
 8010c5c:	ec57 6b10 	vmov	r6, r7, d0
 8010c60:	4690      	mov	r8, r2
 8010c62:	f7ff fccf 	bl	8010604 <_Balloc>
 8010c66:	4604      	mov	r4, r0
 8010c68:	b930      	cbnz	r0, 8010c78 <__d2b+0x24>
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	4b25      	ldr	r3, [pc, #148]	; (8010d04 <__d2b+0xb0>)
 8010c6e:	4826      	ldr	r0, [pc, #152]	; (8010d08 <__d2b+0xb4>)
 8010c70:	f240 310a 	movw	r1, #778	; 0x30a
 8010c74:	f000 f9ea 	bl	801104c <__assert_func>
 8010c78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010c7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c80:	bb35      	cbnz	r5, 8010cd0 <__d2b+0x7c>
 8010c82:	2e00      	cmp	r6, #0
 8010c84:	9301      	str	r3, [sp, #4]
 8010c86:	d028      	beq.n	8010cda <__d2b+0x86>
 8010c88:	4668      	mov	r0, sp
 8010c8a:	9600      	str	r6, [sp, #0]
 8010c8c:	f7ff fd82 	bl	8010794 <__lo0bits>
 8010c90:	9900      	ldr	r1, [sp, #0]
 8010c92:	b300      	cbz	r0, 8010cd6 <__d2b+0x82>
 8010c94:	9a01      	ldr	r2, [sp, #4]
 8010c96:	f1c0 0320 	rsb	r3, r0, #32
 8010c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010c9e:	430b      	orrs	r3, r1
 8010ca0:	40c2      	lsrs	r2, r0
 8010ca2:	6163      	str	r3, [r4, #20]
 8010ca4:	9201      	str	r2, [sp, #4]
 8010ca6:	9b01      	ldr	r3, [sp, #4]
 8010ca8:	61a3      	str	r3, [r4, #24]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	bf14      	ite	ne
 8010cae:	2202      	movne	r2, #2
 8010cb0:	2201      	moveq	r2, #1
 8010cb2:	6122      	str	r2, [r4, #16]
 8010cb4:	b1d5      	cbz	r5, 8010cec <__d2b+0x98>
 8010cb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010cba:	4405      	add	r5, r0
 8010cbc:	f8c9 5000 	str.w	r5, [r9]
 8010cc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010cc4:	f8c8 0000 	str.w	r0, [r8]
 8010cc8:	4620      	mov	r0, r4
 8010cca:	b003      	add	sp, #12
 8010ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cd4:	e7d5      	b.n	8010c82 <__d2b+0x2e>
 8010cd6:	6161      	str	r1, [r4, #20]
 8010cd8:	e7e5      	b.n	8010ca6 <__d2b+0x52>
 8010cda:	a801      	add	r0, sp, #4
 8010cdc:	f7ff fd5a 	bl	8010794 <__lo0bits>
 8010ce0:	9b01      	ldr	r3, [sp, #4]
 8010ce2:	6163      	str	r3, [r4, #20]
 8010ce4:	2201      	movs	r2, #1
 8010ce6:	6122      	str	r2, [r4, #16]
 8010ce8:	3020      	adds	r0, #32
 8010cea:	e7e3      	b.n	8010cb4 <__d2b+0x60>
 8010cec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010cf4:	f8c9 0000 	str.w	r0, [r9]
 8010cf8:	6918      	ldr	r0, [r3, #16]
 8010cfa:	f7ff fd2b 	bl	8010754 <__hi0bits>
 8010cfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d02:	e7df      	b.n	8010cc4 <__d2b+0x70>
 8010d04:	080277c7 	.word	0x080277c7
 8010d08:	080277d8 	.word	0x080277d8

08010d0c <_calloc_r>:
 8010d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d0e:	fba1 2402 	umull	r2, r4, r1, r2
 8010d12:	b94c      	cbnz	r4, 8010d28 <_calloc_r+0x1c>
 8010d14:	4611      	mov	r1, r2
 8010d16:	9201      	str	r2, [sp, #4]
 8010d18:	f7fe f8d2 	bl	800eec0 <_malloc_r>
 8010d1c:	9a01      	ldr	r2, [sp, #4]
 8010d1e:	4605      	mov	r5, r0
 8010d20:	b930      	cbnz	r0, 8010d30 <_calloc_r+0x24>
 8010d22:	4628      	mov	r0, r5
 8010d24:	b003      	add	sp, #12
 8010d26:	bd30      	pop	{r4, r5, pc}
 8010d28:	220c      	movs	r2, #12
 8010d2a:	6002      	str	r2, [r0, #0]
 8010d2c:	2500      	movs	r5, #0
 8010d2e:	e7f8      	b.n	8010d22 <_calloc_r+0x16>
 8010d30:	4621      	mov	r1, r4
 8010d32:	f7fe f851 	bl	800edd8 <memset>
 8010d36:	e7f4      	b.n	8010d22 <_calloc_r+0x16>

08010d38 <_realloc_r>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	4680      	mov	r8, r0
 8010d3e:	4614      	mov	r4, r2
 8010d40:	460e      	mov	r6, r1
 8010d42:	b921      	cbnz	r1, 8010d4e <_realloc_r+0x16>
 8010d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	4611      	mov	r1, r2
 8010d4a:	f7fe b8b9 	b.w	800eec0 <_malloc_r>
 8010d4e:	b92a      	cbnz	r2, 8010d5c <_realloc_r+0x24>
 8010d50:	f7fe f84a 	bl	800ede8 <_free_r>
 8010d54:	4625      	mov	r5, r4
 8010d56:	4628      	mov	r0, r5
 8010d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d5c:	f000 f9d5 	bl	801110a <_malloc_usable_size_r>
 8010d60:	4284      	cmp	r4, r0
 8010d62:	4607      	mov	r7, r0
 8010d64:	d802      	bhi.n	8010d6c <_realloc_r+0x34>
 8010d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d6a:	d812      	bhi.n	8010d92 <_realloc_r+0x5a>
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	4640      	mov	r0, r8
 8010d70:	f7fe f8a6 	bl	800eec0 <_malloc_r>
 8010d74:	4605      	mov	r5, r0
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d0ed      	beq.n	8010d56 <_realloc_r+0x1e>
 8010d7a:	42bc      	cmp	r4, r7
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	4631      	mov	r1, r6
 8010d80:	bf28      	it	cs
 8010d82:	463a      	movcs	r2, r7
 8010d84:	f7fe f81a 	bl	800edbc <memcpy>
 8010d88:	4631      	mov	r1, r6
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	f7fe f82c 	bl	800ede8 <_free_r>
 8010d90:	e7e1      	b.n	8010d56 <_realloc_r+0x1e>
 8010d92:	4635      	mov	r5, r6
 8010d94:	e7df      	b.n	8010d56 <_realloc_r+0x1e>

08010d96 <__ssputs_r>:
 8010d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d9a:	688e      	ldr	r6, [r1, #8]
 8010d9c:	429e      	cmp	r6, r3
 8010d9e:	4682      	mov	sl, r0
 8010da0:	460c      	mov	r4, r1
 8010da2:	4690      	mov	r8, r2
 8010da4:	461f      	mov	r7, r3
 8010da6:	d838      	bhi.n	8010e1a <__ssputs_r+0x84>
 8010da8:	898a      	ldrh	r2, [r1, #12]
 8010daa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010dae:	d032      	beq.n	8010e16 <__ssputs_r+0x80>
 8010db0:	6825      	ldr	r5, [r4, #0]
 8010db2:	6909      	ldr	r1, [r1, #16]
 8010db4:	eba5 0901 	sub.w	r9, r5, r1
 8010db8:	6965      	ldr	r5, [r4, #20]
 8010dba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	444b      	add	r3, r9
 8010dc6:	106d      	asrs	r5, r5, #1
 8010dc8:	429d      	cmp	r5, r3
 8010dca:	bf38      	it	cc
 8010dcc:	461d      	movcc	r5, r3
 8010dce:	0553      	lsls	r3, r2, #21
 8010dd0:	d531      	bpl.n	8010e36 <__ssputs_r+0xa0>
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	f7fe f874 	bl	800eec0 <_malloc_r>
 8010dd8:	4606      	mov	r6, r0
 8010dda:	b950      	cbnz	r0, 8010df2 <__ssputs_r+0x5c>
 8010ddc:	230c      	movs	r3, #12
 8010dde:	f8ca 3000 	str.w	r3, [sl]
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010de8:	81a3      	strh	r3, [r4, #12]
 8010dea:	f04f 30ff 	mov.w	r0, #4294967295
 8010dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010df2:	6921      	ldr	r1, [r4, #16]
 8010df4:	464a      	mov	r2, r9
 8010df6:	f7fd ffe1 	bl	800edbc <memcpy>
 8010dfa:	89a3      	ldrh	r3, [r4, #12]
 8010dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e04:	81a3      	strh	r3, [r4, #12]
 8010e06:	6126      	str	r6, [r4, #16]
 8010e08:	6165      	str	r5, [r4, #20]
 8010e0a:	444e      	add	r6, r9
 8010e0c:	eba5 0509 	sub.w	r5, r5, r9
 8010e10:	6026      	str	r6, [r4, #0]
 8010e12:	60a5      	str	r5, [r4, #8]
 8010e14:	463e      	mov	r6, r7
 8010e16:	42be      	cmp	r6, r7
 8010e18:	d900      	bls.n	8010e1c <__ssputs_r+0x86>
 8010e1a:	463e      	mov	r6, r7
 8010e1c:	6820      	ldr	r0, [r4, #0]
 8010e1e:	4632      	mov	r2, r6
 8010e20:	4641      	mov	r1, r8
 8010e22:	f000 f958 	bl	80110d6 <memmove>
 8010e26:	68a3      	ldr	r3, [r4, #8]
 8010e28:	1b9b      	subs	r3, r3, r6
 8010e2a:	60a3      	str	r3, [r4, #8]
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	4433      	add	r3, r6
 8010e30:	6023      	str	r3, [r4, #0]
 8010e32:	2000      	movs	r0, #0
 8010e34:	e7db      	b.n	8010dee <__ssputs_r+0x58>
 8010e36:	462a      	mov	r2, r5
 8010e38:	f7ff ff7e 	bl	8010d38 <_realloc_r>
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d1e1      	bne.n	8010e06 <__ssputs_r+0x70>
 8010e42:	6921      	ldr	r1, [r4, #16]
 8010e44:	4650      	mov	r0, sl
 8010e46:	f7fd ffcf 	bl	800ede8 <_free_r>
 8010e4a:	e7c7      	b.n	8010ddc <__ssputs_r+0x46>

08010e4c <_svfiprintf_r>:
 8010e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e50:	4698      	mov	r8, r3
 8010e52:	898b      	ldrh	r3, [r1, #12]
 8010e54:	061b      	lsls	r3, r3, #24
 8010e56:	b09d      	sub	sp, #116	; 0x74
 8010e58:	4607      	mov	r7, r0
 8010e5a:	460d      	mov	r5, r1
 8010e5c:	4614      	mov	r4, r2
 8010e5e:	d50e      	bpl.n	8010e7e <_svfiprintf_r+0x32>
 8010e60:	690b      	ldr	r3, [r1, #16]
 8010e62:	b963      	cbnz	r3, 8010e7e <_svfiprintf_r+0x32>
 8010e64:	2140      	movs	r1, #64	; 0x40
 8010e66:	f7fe f82b 	bl	800eec0 <_malloc_r>
 8010e6a:	6028      	str	r0, [r5, #0]
 8010e6c:	6128      	str	r0, [r5, #16]
 8010e6e:	b920      	cbnz	r0, 8010e7a <_svfiprintf_r+0x2e>
 8010e70:	230c      	movs	r3, #12
 8010e72:	603b      	str	r3, [r7, #0]
 8010e74:	f04f 30ff 	mov.w	r0, #4294967295
 8010e78:	e0d1      	b.n	801101e <_svfiprintf_r+0x1d2>
 8010e7a:	2340      	movs	r3, #64	; 0x40
 8010e7c:	616b      	str	r3, [r5, #20]
 8010e7e:	2300      	movs	r3, #0
 8010e80:	9309      	str	r3, [sp, #36]	; 0x24
 8010e82:	2320      	movs	r3, #32
 8010e84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e8c:	2330      	movs	r3, #48	; 0x30
 8010e8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011038 <_svfiprintf_r+0x1ec>
 8010e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e96:	f04f 0901 	mov.w	r9, #1
 8010e9a:	4623      	mov	r3, r4
 8010e9c:	469a      	mov	sl, r3
 8010e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ea2:	b10a      	cbz	r2, 8010ea8 <_svfiprintf_r+0x5c>
 8010ea4:	2a25      	cmp	r2, #37	; 0x25
 8010ea6:	d1f9      	bne.n	8010e9c <_svfiprintf_r+0x50>
 8010ea8:	ebba 0b04 	subs.w	fp, sl, r4
 8010eac:	d00b      	beq.n	8010ec6 <_svfiprintf_r+0x7a>
 8010eae:	465b      	mov	r3, fp
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	4638      	mov	r0, r7
 8010eb6:	f7ff ff6e 	bl	8010d96 <__ssputs_r>
 8010eba:	3001      	adds	r0, #1
 8010ebc:	f000 80aa 	beq.w	8011014 <_svfiprintf_r+0x1c8>
 8010ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ec2:	445a      	add	r2, fp
 8010ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f000 80a2 	beq.w	8011014 <_svfiprintf_r+0x1c8>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eda:	f10a 0a01 	add.w	sl, sl, #1
 8010ede:	9304      	str	r3, [sp, #16]
 8010ee0:	9307      	str	r3, [sp, #28]
 8010ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8010ee8:	4654      	mov	r4, sl
 8010eea:	2205      	movs	r2, #5
 8010eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ef0:	4851      	ldr	r0, [pc, #324]	; (8011038 <_svfiprintf_r+0x1ec>)
 8010ef2:	f7ef f9a5 	bl	8000240 <memchr>
 8010ef6:	9a04      	ldr	r2, [sp, #16]
 8010ef8:	b9d8      	cbnz	r0, 8010f32 <_svfiprintf_r+0xe6>
 8010efa:	06d0      	lsls	r0, r2, #27
 8010efc:	bf44      	itt	mi
 8010efe:	2320      	movmi	r3, #32
 8010f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f04:	0711      	lsls	r1, r2, #28
 8010f06:	bf44      	itt	mi
 8010f08:	232b      	movmi	r3, #43	; 0x2b
 8010f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f12:	2b2a      	cmp	r3, #42	; 0x2a
 8010f14:	d015      	beq.n	8010f42 <_svfiprintf_r+0xf6>
 8010f16:	9a07      	ldr	r2, [sp, #28]
 8010f18:	4654      	mov	r4, sl
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	f04f 0c0a 	mov.w	ip, #10
 8010f20:	4621      	mov	r1, r4
 8010f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f26:	3b30      	subs	r3, #48	; 0x30
 8010f28:	2b09      	cmp	r3, #9
 8010f2a:	d94e      	bls.n	8010fca <_svfiprintf_r+0x17e>
 8010f2c:	b1b0      	cbz	r0, 8010f5c <_svfiprintf_r+0x110>
 8010f2e:	9207      	str	r2, [sp, #28]
 8010f30:	e014      	b.n	8010f5c <_svfiprintf_r+0x110>
 8010f32:	eba0 0308 	sub.w	r3, r0, r8
 8010f36:	fa09 f303 	lsl.w	r3, r9, r3
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	9304      	str	r3, [sp, #16]
 8010f3e:	46a2      	mov	sl, r4
 8010f40:	e7d2      	b.n	8010ee8 <_svfiprintf_r+0x9c>
 8010f42:	9b03      	ldr	r3, [sp, #12]
 8010f44:	1d19      	adds	r1, r3, #4
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	9103      	str	r1, [sp, #12]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	bfbb      	ittet	lt
 8010f4e:	425b      	neglt	r3, r3
 8010f50:	f042 0202 	orrlt.w	r2, r2, #2
 8010f54:	9307      	strge	r3, [sp, #28]
 8010f56:	9307      	strlt	r3, [sp, #28]
 8010f58:	bfb8      	it	lt
 8010f5a:	9204      	strlt	r2, [sp, #16]
 8010f5c:	7823      	ldrb	r3, [r4, #0]
 8010f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8010f60:	d10c      	bne.n	8010f7c <_svfiprintf_r+0x130>
 8010f62:	7863      	ldrb	r3, [r4, #1]
 8010f64:	2b2a      	cmp	r3, #42	; 0x2a
 8010f66:	d135      	bne.n	8010fd4 <_svfiprintf_r+0x188>
 8010f68:	9b03      	ldr	r3, [sp, #12]
 8010f6a:	1d1a      	adds	r2, r3, #4
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	9203      	str	r2, [sp, #12]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	bfb8      	it	lt
 8010f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f78:	3402      	adds	r4, #2
 8010f7a:	9305      	str	r3, [sp, #20]
 8010f7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011048 <_svfiprintf_r+0x1fc>
 8010f80:	7821      	ldrb	r1, [r4, #0]
 8010f82:	2203      	movs	r2, #3
 8010f84:	4650      	mov	r0, sl
 8010f86:	f7ef f95b 	bl	8000240 <memchr>
 8010f8a:	b140      	cbz	r0, 8010f9e <_svfiprintf_r+0x152>
 8010f8c:	2340      	movs	r3, #64	; 0x40
 8010f8e:	eba0 000a 	sub.w	r0, r0, sl
 8010f92:	fa03 f000 	lsl.w	r0, r3, r0
 8010f96:	9b04      	ldr	r3, [sp, #16]
 8010f98:	4303      	orrs	r3, r0
 8010f9a:	3401      	adds	r4, #1
 8010f9c:	9304      	str	r3, [sp, #16]
 8010f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fa2:	4826      	ldr	r0, [pc, #152]	; (801103c <_svfiprintf_r+0x1f0>)
 8010fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fa8:	2206      	movs	r2, #6
 8010faa:	f7ef f949 	bl	8000240 <memchr>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d038      	beq.n	8011024 <_svfiprintf_r+0x1d8>
 8010fb2:	4b23      	ldr	r3, [pc, #140]	; (8011040 <_svfiprintf_r+0x1f4>)
 8010fb4:	bb1b      	cbnz	r3, 8010ffe <_svfiprintf_r+0x1b2>
 8010fb6:	9b03      	ldr	r3, [sp, #12]
 8010fb8:	3307      	adds	r3, #7
 8010fba:	f023 0307 	bic.w	r3, r3, #7
 8010fbe:	3308      	adds	r3, #8
 8010fc0:	9303      	str	r3, [sp, #12]
 8010fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc4:	4433      	add	r3, r6
 8010fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc8:	e767      	b.n	8010e9a <_svfiprintf_r+0x4e>
 8010fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fce:	460c      	mov	r4, r1
 8010fd0:	2001      	movs	r0, #1
 8010fd2:	e7a5      	b.n	8010f20 <_svfiprintf_r+0xd4>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	3401      	adds	r4, #1
 8010fd8:	9305      	str	r3, [sp, #20]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	f04f 0c0a 	mov.w	ip, #10
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fe6:	3a30      	subs	r2, #48	; 0x30
 8010fe8:	2a09      	cmp	r2, #9
 8010fea:	d903      	bls.n	8010ff4 <_svfiprintf_r+0x1a8>
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d0c5      	beq.n	8010f7c <_svfiprintf_r+0x130>
 8010ff0:	9105      	str	r1, [sp, #20]
 8010ff2:	e7c3      	b.n	8010f7c <_svfiprintf_r+0x130>
 8010ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e7f0      	b.n	8010fe0 <_svfiprintf_r+0x194>
 8010ffe:	ab03      	add	r3, sp, #12
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	462a      	mov	r2, r5
 8011004:	4b0f      	ldr	r3, [pc, #60]	; (8011044 <_svfiprintf_r+0x1f8>)
 8011006:	a904      	add	r1, sp, #16
 8011008:	4638      	mov	r0, r7
 801100a:	f7fe f86d 	bl	800f0e8 <_printf_float>
 801100e:	1c42      	adds	r2, r0, #1
 8011010:	4606      	mov	r6, r0
 8011012:	d1d6      	bne.n	8010fc2 <_svfiprintf_r+0x176>
 8011014:	89ab      	ldrh	r3, [r5, #12]
 8011016:	065b      	lsls	r3, r3, #25
 8011018:	f53f af2c 	bmi.w	8010e74 <_svfiprintf_r+0x28>
 801101c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801101e:	b01d      	add	sp, #116	; 0x74
 8011020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011024:	ab03      	add	r3, sp, #12
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	462a      	mov	r2, r5
 801102a:	4b06      	ldr	r3, [pc, #24]	; (8011044 <_svfiprintf_r+0x1f8>)
 801102c:	a904      	add	r1, sp, #16
 801102e:	4638      	mov	r0, r7
 8011030:	f7fe fafe 	bl	800f630 <_printf_i>
 8011034:	e7eb      	b.n	801100e <_svfiprintf_r+0x1c2>
 8011036:	bf00      	nop
 8011038:	08027934 	.word	0x08027934
 801103c:	0802793e 	.word	0x0802793e
 8011040:	0800f0e9 	.word	0x0800f0e9
 8011044:	08010d97 	.word	0x08010d97
 8011048:	0802793a 	.word	0x0802793a

0801104c <__assert_func>:
 801104c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801104e:	4614      	mov	r4, r2
 8011050:	461a      	mov	r2, r3
 8011052:	4b09      	ldr	r3, [pc, #36]	; (8011078 <__assert_func+0x2c>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4605      	mov	r5, r0
 8011058:	68d8      	ldr	r0, [r3, #12]
 801105a:	b14c      	cbz	r4, 8011070 <__assert_func+0x24>
 801105c:	4b07      	ldr	r3, [pc, #28]	; (801107c <__assert_func+0x30>)
 801105e:	9100      	str	r1, [sp, #0]
 8011060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011064:	4906      	ldr	r1, [pc, #24]	; (8011080 <__assert_func+0x34>)
 8011066:	462b      	mov	r3, r5
 8011068:	f000 f80e 	bl	8011088 <fiprintf>
 801106c:	f000 fa7c 	bl	8011568 <abort>
 8011070:	4b04      	ldr	r3, [pc, #16]	; (8011084 <__assert_func+0x38>)
 8011072:	461c      	mov	r4, r3
 8011074:	e7f3      	b.n	801105e <__assert_func+0x12>
 8011076:	bf00      	nop
 8011078:	20000eac 	.word	0x20000eac
 801107c:	08027945 	.word	0x08027945
 8011080:	08027952 	.word	0x08027952
 8011084:	08027980 	.word	0x08027980

08011088 <fiprintf>:
 8011088:	b40e      	push	{r1, r2, r3}
 801108a:	b503      	push	{r0, r1, lr}
 801108c:	4601      	mov	r1, r0
 801108e:	ab03      	add	r3, sp, #12
 8011090:	4805      	ldr	r0, [pc, #20]	; (80110a8 <fiprintf+0x20>)
 8011092:	f853 2b04 	ldr.w	r2, [r3], #4
 8011096:	6800      	ldr	r0, [r0, #0]
 8011098:	9301      	str	r3, [sp, #4]
 801109a:	f000 f867 	bl	801116c <_vfiprintf_r>
 801109e:	b002      	add	sp, #8
 80110a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80110a4:	b003      	add	sp, #12
 80110a6:	4770      	bx	lr
 80110a8:	20000eac 	.word	0x20000eac

080110ac <__retarget_lock_init_recursive>:
 80110ac:	4770      	bx	lr

080110ae <__retarget_lock_acquire_recursive>:
 80110ae:	4770      	bx	lr

080110b0 <__retarget_lock_release_recursive>:
 80110b0:	4770      	bx	lr

080110b2 <__ascii_mbtowc>:
 80110b2:	b082      	sub	sp, #8
 80110b4:	b901      	cbnz	r1, 80110b8 <__ascii_mbtowc+0x6>
 80110b6:	a901      	add	r1, sp, #4
 80110b8:	b142      	cbz	r2, 80110cc <__ascii_mbtowc+0x1a>
 80110ba:	b14b      	cbz	r3, 80110d0 <__ascii_mbtowc+0x1e>
 80110bc:	7813      	ldrb	r3, [r2, #0]
 80110be:	600b      	str	r3, [r1, #0]
 80110c0:	7812      	ldrb	r2, [r2, #0]
 80110c2:	1e10      	subs	r0, r2, #0
 80110c4:	bf18      	it	ne
 80110c6:	2001      	movne	r0, #1
 80110c8:	b002      	add	sp, #8
 80110ca:	4770      	bx	lr
 80110cc:	4610      	mov	r0, r2
 80110ce:	e7fb      	b.n	80110c8 <__ascii_mbtowc+0x16>
 80110d0:	f06f 0001 	mvn.w	r0, #1
 80110d4:	e7f8      	b.n	80110c8 <__ascii_mbtowc+0x16>

080110d6 <memmove>:
 80110d6:	4288      	cmp	r0, r1
 80110d8:	b510      	push	{r4, lr}
 80110da:	eb01 0402 	add.w	r4, r1, r2
 80110de:	d902      	bls.n	80110e6 <memmove+0x10>
 80110e0:	4284      	cmp	r4, r0
 80110e2:	4623      	mov	r3, r4
 80110e4:	d807      	bhi.n	80110f6 <memmove+0x20>
 80110e6:	1e43      	subs	r3, r0, #1
 80110e8:	42a1      	cmp	r1, r4
 80110ea:	d008      	beq.n	80110fe <memmove+0x28>
 80110ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110f4:	e7f8      	b.n	80110e8 <memmove+0x12>
 80110f6:	4402      	add	r2, r0
 80110f8:	4601      	mov	r1, r0
 80110fa:	428a      	cmp	r2, r1
 80110fc:	d100      	bne.n	8011100 <memmove+0x2a>
 80110fe:	bd10      	pop	{r4, pc}
 8011100:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011104:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011108:	e7f7      	b.n	80110fa <memmove+0x24>

0801110a <_malloc_usable_size_r>:
 801110a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801110e:	1f18      	subs	r0, r3, #4
 8011110:	2b00      	cmp	r3, #0
 8011112:	bfbc      	itt	lt
 8011114:	580b      	ldrlt	r3, [r1, r0]
 8011116:	18c0      	addlt	r0, r0, r3
 8011118:	4770      	bx	lr

0801111a <__sfputc_r>:
 801111a:	6893      	ldr	r3, [r2, #8]
 801111c:	3b01      	subs	r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	b410      	push	{r4}
 8011122:	6093      	str	r3, [r2, #8]
 8011124:	da08      	bge.n	8011138 <__sfputc_r+0x1e>
 8011126:	6994      	ldr	r4, [r2, #24]
 8011128:	42a3      	cmp	r3, r4
 801112a:	db01      	blt.n	8011130 <__sfputc_r+0x16>
 801112c:	290a      	cmp	r1, #10
 801112e:	d103      	bne.n	8011138 <__sfputc_r+0x1e>
 8011130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011134:	f000 b94a 	b.w	80113cc <__swbuf_r>
 8011138:	6813      	ldr	r3, [r2, #0]
 801113a:	1c58      	adds	r0, r3, #1
 801113c:	6010      	str	r0, [r2, #0]
 801113e:	7019      	strb	r1, [r3, #0]
 8011140:	4608      	mov	r0, r1
 8011142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011146:	4770      	bx	lr

08011148 <__sfputs_r>:
 8011148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801114a:	4606      	mov	r6, r0
 801114c:	460f      	mov	r7, r1
 801114e:	4614      	mov	r4, r2
 8011150:	18d5      	adds	r5, r2, r3
 8011152:	42ac      	cmp	r4, r5
 8011154:	d101      	bne.n	801115a <__sfputs_r+0x12>
 8011156:	2000      	movs	r0, #0
 8011158:	e007      	b.n	801116a <__sfputs_r+0x22>
 801115a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801115e:	463a      	mov	r2, r7
 8011160:	4630      	mov	r0, r6
 8011162:	f7ff ffda 	bl	801111a <__sfputc_r>
 8011166:	1c43      	adds	r3, r0, #1
 8011168:	d1f3      	bne.n	8011152 <__sfputs_r+0xa>
 801116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801116c <_vfiprintf_r>:
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	460d      	mov	r5, r1
 8011172:	b09d      	sub	sp, #116	; 0x74
 8011174:	4614      	mov	r4, r2
 8011176:	4698      	mov	r8, r3
 8011178:	4606      	mov	r6, r0
 801117a:	b118      	cbz	r0, 8011184 <_vfiprintf_r+0x18>
 801117c:	6983      	ldr	r3, [r0, #24]
 801117e:	b90b      	cbnz	r3, 8011184 <_vfiprintf_r+0x18>
 8011180:	f000 fb14 	bl	80117ac <__sinit>
 8011184:	4b89      	ldr	r3, [pc, #548]	; (80113ac <_vfiprintf_r+0x240>)
 8011186:	429d      	cmp	r5, r3
 8011188:	d11b      	bne.n	80111c2 <_vfiprintf_r+0x56>
 801118a:	6875      	ldr	r5, [r6, #4]
 801118c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801118e:	07d9      	lsls	r1, r3, #31
 8011190:	d405      	bmi.n	801119e <_vfiprintf_r+0x32>
 8011192:	89ab      	ldrh	r3, [r5, #12]
 8011194:	059a      	lsls	r2, r3, #22
 8011196:	d402      	bmi.n	801119e <_vfiprintf_r+0x32>
 8011198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801119a:	f7ff ff88 	bl	80110ae <__retarget_lock_acquire_recursive>
 801119e:	89ab      	ldrh	r3, [r5, #12]
 80111a0:	071b      	lsls	r3, r3, #28
 80111a2:	d501      	bpl.n	80111a8 <_vfiprintf_r+0x3c>
 80111a4:	692b      	ldr	r3, [r5, #16]
 80111a6:	b9eb      	cbnz	r3, 80111e4 <_vfiprintf_r+0x78>
 80111a8:	4629      	mov	r1, r5
 80111aa:	4630      	mov	r0, r6
 80111ac:	f000 f96e 	bl	801148c <__swsetup_r>
 80111b0:	b1c0      	cbz	r0, 80111e4 <_vfiprintf_r+0x78>
 80111b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111b4:	07dc      	lsls	r4, r3, #31
 80111b6:	d50e      	bpl.n	80111d6 <_vfiprintf_r+0x6a>
 80111b8:	f04f 30ff 	mov.w	r0, #4294967295
 80111bc:	b01d      	add	sp, #116	; 0x74
 80111be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c2:	4b7b      	ldr	r3, [pc, #492]	; (80113b0 <_vfiprintf_r+0x244>)
 80111c4:	429d      	cmp	r5, r3
 80111c6:	d101      	bne.n	80111cc <_vfiprintf_r+0x60>
 80111c8:	68b5      	ldr	r5, [r6, #8]
 80111ca:	e7df      	b.n	801118c <_vfiprintf_r+0x20>
 80111cc:	4b79      	ldr	r3, [pc, #484]	; (80113b4 <_vfiprintf_r+0x248>)
 80111ce:	429d      	cmp	r5, r3
 80111d0:	bf08      	it	eq
 80111d2:	68f5      	ldreq	r5, [r6, #12]
 80111d4:	e7da      	b.n	801118c <_vfiprintf_r+0x20>
 80111d6:	89ab      	ldrh	r3, [r5, #12]
 80111d8:	0598      	lsls	r0, r3, #22
 80111da:	d4ed      	bmi.n	80111b8 <_vfiprintf_r+0x4c>
 80111dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111de:	f7ff ff67 	bl	80110b0 <__retarget_lock_release_recursive>
 80111e2:	e7e9      	b.n	80111b8 <_vfiprintf_r+0x4c>
 80111e4:	2300      	movs	r3, #0
 80111e6:	9309      	str	r3, [sp, #36]	; 0x24
 80111e8:	2320      	movs	r3, #32
 80111ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80111f2:	2330      	movs	r3, #48	; 0x30
 80111f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80113b8 <_vfiprintf_r+0x24c>
 80111f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111fc:	f04f 0901 	mov.w	r9, #1
 8011200:	4623      	mov	r3, r4
 8011202:	469a      	mov	sl, r3
 8011204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011208:	b10a      	cbz	r2, 801120e <_vfiprintf_r+0xa2>
 801120a:	2a25      	cmp	r2, #37	; 0x25
 801120c:	d1f9      	bne.n	8011202 <_vfiprintf_r+0x96>
 801120e:	ebba 0b04 	subs.w	fp, sl, r4
 8011212:	d00b      	beq.n	801122c <_vfiprintf_r+0xc0>
 8011214:	465b      	mov	r3, fp
 8011216:	4622      	mov	r2, r4
 8011218:	4629      	mov	r1, r5
 801121a:	4630      	mov	r0, r6
 801121c:	f7ff ff94 	bl	8011148 <__sfputs_r>
 8011220:	3001      	adds	r0, #1
 8011222:	f000 80aa 	beq.w	801137a <_vfiprintf_r+0x20e>
 8011226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011228:	445a      	add	r2, fp
 801122a:	9209      	str	r2, [sp, #36]	; 0x24
 801122c:	f89a 3000 	ldrb.w	r3, [sl]
 8011230:	2b00      	cmp	r3, #0
 8011232:	f000 80a2 	beq.w	801137a <_vfiprintf_r+0x20e>
 8011236:	2300      	movs	r3, #0
 8011238:	f04f 32ff 	mov.w	r2, #4294967295
 801123c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011240:	f10a 0a01 	add.w	sl, sl, #1
 8011244:	9304      	str	r3, [sp, #16]
 8011246:	9307      	str	r3, [sp, #28]
 8011248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801124c:	931a      	str	r3, [sp, #104]	; 0x68
 801124e:	4654      	mov	r4, sl
 8011250:	2205      	movs	r2, #5
 8011252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011256:	4858      	ldr	r0, [pc, #352]	; (80113b8 <_vfiprintf_r+0x24c>)
 8011258:	f7ee fff2 	bl	8000240 <memchr>
 801125c:	9a04      	ldr	r2, [sp, #16]
 801125e:	b9d8      	cbnz	r0, 8011298 <_vfiprintf_r+0x12c>
 8011260:	06d1      	lsls	r1, r2, #27
 8011262:	bf44      	itt	mi
 8011264:	2320      	movmi	r3, #32
 8011266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801126a:	0713      	lsls	r3, r2, #28
 801126c:	bf44      	itt	mi
 801126e:	232b      	movmi	r3, #43	; 0x2b
 8011270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011274:	f89a 3000 	ldrb.w	r3, [sl]
 8011278:	2b2a      	cmp	r3, #42	; 0x2a
 801127a:	d015      	beq.n	80112a8 <_vfiprintf_r+0x13c>
 801127c:	9a07      	ldr	r2, [sp, #28]
 801127e:	4654      	mov	r4, sl
 8011280:	2000      	movs	r0, #0
 8011282:	f04f 0c0a 	mov.w	ip, #10
 8011286:	4621      	mov	r1, r4
 8011288:	f811 3b01 	ldrb.w	r3, [r1], #1
 801128c:	3b30      	subs	r3, #48	; 0x30
 801128e:	2b09      	cmp	r3, #9
 8011290:	d94e      	bls.n	8011330 <_vfiprintf_r+0x1c4>
 8011292:	b1b0      	cbz	r0, 80112c2 <_vfiprintf_r+0x156>
 8011294:	9207      	str	r2, [sp, #28]
 8011296:	e014      	b.n	80112c2 <_vfiprintf_r+0x156>
 8011298:	eba0 0308 	sub.w	r3, r0, r8
 801129c:	fa09 f303 	lsl.w	r3, r9, r3
 80112a0:	4313      	orrs	r3, r2
 80112a2:	9304      	str	r3, [sp, #16]
 80112a4:	46a2      	mov	sl, r4
 80112a6:	e7d2      	b.n	801124e <_vfiprintf_r+0xe2>
 80112a8:	9b03      	ldr	r3, [sp, #12]
 80112aa:	1d19      	adds	r1, r3, #4
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	9103      	str	r1, [sp, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	bfbb      	ittet	lt
 80112b4:	425b      	neglt	r3, r3
 80112b6:	f042 0202 	orrlt.w	r2, r2, #2
 80112ba:	9307      	strge	r3, [sp, #28]
 80112bc:	9307      	strlt	r3, [sp, #28]
 80112be:	bfb8      	it	lt
 80112c0:	9204      	strlt	r2, [sp, #16]
 80112c2:	7823      	ldrb	r3, [r4, #0]
 80112c4:	2b2e      	cmp	r3, #46	; 0x2e
 80112c6:	d10c      	bne.n	80112e2 <_vfiprintf_r+0x176>
 80112c8:	7863      	ldrb	r3, [r4, #1]
 80112ca:	2b2a      	cmp	r3, #42	; 0x2a
 80112cc:	d135      	bne.n	801133a <_vfiprintf_r+0x1ce>
 80112ce:	9b03      	ldr	r3, [sp, #12]
 80112d0:	1d1a      	adds	r2, r3, #4
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	9203      	str	r2, [sp, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	bfb8      	it	lt
 80112da:	f04f 33ff 	movlt.w	r3, #4294967295
 80112de:	3402      	adds	r4, #2
 80112e0:	9305      	str	r3, [sp, #20]
 80112e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113c8 <_vfiprintf_r+0x25c>
 80112e6:	7821      	ldrb	r1, [r4, #0]
 80112e8:	2203      	movs	r2, #3
 80112ea:	4650      	mov	r0, sl
 80112ec:	f7ee ffa8 	bl	8000240 <memchr>
 80112f0:	b140      	cbz	r0, 8011304 <_vfiprintf_r+0x198>
 80112f2:	2340      	movs	r3, #64	; 0x40
 80112f4:	eba0 000a 	sub.w	r0, r0, sl
 80112f8:	fa03 f000 	lsl.w	r0, r3, r0
 80112fc:	9b04      	ldr	r3, [sp, #16]
 80112fe:	4303      	orrs	r3, r0
 8011300:	3401      	adds	r4, #1
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011308:	482c      	ldr	r0, [pc, #176]	; (80113bc <_vfiprintf_r+0x250>)
 801130a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801130e:	2206      	movs	r2, #6
 8011310:	f7ee ff96 	bl	8000240 <memchr>
 8011314:	2800      	cmp	r0, #0
 8011316:	d03f      	beq.n	8011398 <_vfiprintf_r+0x22c>
 8011318:	4b29      	ldr	r3, [pc, #164]	; (80113c0 <_vfiprintf_r+0x254>)
 801131a:	bb1b      	cbnz	r3, 8011364 <_vfiprintf_r+0x1f8>
 801131c:	9b03      	ldr	r3, [sp, #12]
 801131e:	3307      	adds	r3, #7
 8011320:	f023 0307 	bic.w	r3, r3, #7
 8011324:	3308      	adds	r3, #8
 8011326:	9303      	str	r3, [sp, #12]
 8011328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801132a:	443b      	add	r3, r7
 801132c:	9309      	str	r3, [sp, #36]	; 0x24
 801132e:	e767      	b.n	8011200 <_vfiprintf_r+0x94>
 8011330:	fb0c 3202 	mla	r2, ip, r2, r3
 8011334:	460c      	mov	r4, r1
 8011336:	2001      	movs	r0, #1
 8011338:	e7a5      	b.n	8011286 <_vfiprintf_r+0x11a>
 801133a:	2300      	movs	r3, #0
 801133c:	3401      	adds	r4, #1
 801133e:	9305      	str	r3, [sp, #20]
 8011340:	4619      	mov	r1, r3
 8011342:	f04f 0c0a 	mov.w	ip, #10
 8011346:	4620      	mov	r0, r4
 8011348:	f810 2b01 	ldrb.w	r2, [r0], #1
 801134c:	3a30      	subs	r2, #48	; 0x30
 801134e:	2a09      	cmp	r2, #9
 8011350:	d903      	bls.n	801135a <_vfiprintf_r+0x1ee>
 8011352:	2b00      	cmp	r3, #0
 8011354:	d0c5      	beq.n	80112e2 <_vfiprintf_r+0x176>
 8011356:	9105      	str	r1, [sp, #20]
 8011358:	e7c3      	b.n	80112e2 <_vfiprintf_r+0x176>
 801135a:	fb0c 2101 	mla	r1, ip, r1, r2
 801135e:	4604      	mov	r4, r0
 8011360:	2301      	movs	r3, #1
 8011362:	e7f0      	b.n	8011346 <_vfiprintf_r+0x1da>
 8011364:	ab03      	add	r3, sp, #12
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	462a      	mov	r2, r5
 801136a:	4b16      	ldr	r3, [pc, #88]	; (80113c4 <_vfiprintf_r+0x258>)
 801136c:	a904      	add	r1, sp, #16
 801136e:	4630      	mov	r0, r6
 8011370:	f7fd feba 	bl	800f0e8 <_printf_float>
 8011374:	4607      	mov	r7, r0
 8011376:	1c78      	adds	r0, r7, #1
 8011378:	d1d6      	bne.n	8011328 <_vfiprintf_r+0x1bc>
 801137a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801137c:	07d9      	lsls	r1, r3, #31
 801137e:	d405      	bmi.n	801138c <_vfiprintf_r+0x220>
 8011380:	89ab      	ldrh	r3, [r5, #12]
 8011382:	059a      	lsls	r2, r3, #22
 8011384:	d402      	bmi.n	801138c <_vfiprintf_r+0x220>
 8011386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011388:	f7ff fe92 	bl	80110b0 <__retarget_lock_release_recursive>
 801138c:	89ab      	ldrh	r3, [r5, #12]
 801138e:	065b      	lsls	r3, r3, #25
 8011390:	f53f af12 	bmi.w	80111b8 <_vfiprintf_r+0x4c>
 8011394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011396:	e711      	b.n	80111bc <_vfiprintf_r+0x50>
 8011398:	ab03      	add	r3, sp, #12
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	462a      	mov	r2, r5
 801139e:	4b09      	ldr	r3, [pc, #36]	; (80113c4 <_vfiprintf_r+0x258>)
 80113a0:	a904      	add	r1, sp, #16
 80113a2:	4630      	mov	r0, r6
 80113a4:	f7fe f944 	bl	800f630 <_printf_i>
 80113a8:	e7e4      	b.n	8011374 <_vfiprintf_r+0x208>
 80113aa:	bf00      	nop
 80113ac:	08027aac 	.word	0x08027aac
 80113b0:	08027acc 	.word	0x08027acc
 80113b4:	08027a8c 	.word	0x08027a8c
 80113b8:	08027934 	.word	0x08027934
 80113bc:	0802793e 	.word	0x0802793e
 80113c0:	0800f0e9 	.word	0x0800f0e9
 80113c4:	08011149 	.word	0x08011149
 80113c8:	0802793a 	.word	0x0802793a

080113cc <__swbuf_r>:
 80113cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ce:	460e      	mov	r6, r1
 80113d0:	4614      	mov	r4, r2
 80113d2:	4605      	mov	r5, r0
 80113d4:	b118      	cbz	r0, 80113de <__swbuf_r+0x12>
 80113d6:	6983      	ldr	r3, [r0, #24]
 80113d8:	b90b      	cbnz	r3, 80113de <__swbuf_r+0x12>
 80113da:	f000 f9e7 	bl	80117ac <__sinit>
 80113de:	4b21      	ldr	r3, [pc, #132]	; (8011464 <__swbuf_r+0x98>)
 80113e0:	429c      	cmp	r4, r3
 80113e2:	d12b      	bne.n	801143c <__swbuf_r+0x70>
 80113e4:	686c      	ldr	r4, [r5, #4]
 80113e6:	69a3      	ldr	r3, [r4, #24]
 80113e8:	60a3      	str	r3, [r4, #8]
 80113ea:	89a3      	ldrh	r3, [r4, #12]
 80113ec:	071a      	lsls	r2, r3, #28
 80113ee:	d52f      	bpl.n	8011450 <__swbuf_r+0x84>
 80113f0:	6923      	ldr	r3, [r4, #16]
 80113f2:	b36b      	cbz	r3, 8011450 <__swbuf_r+0x84>
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	6820      	ldr	r0, [r4, #0]
 80113f8:	1ac0      	subs	r0, r0, r3
 80113fa:	6963      	ldr	r3, [r4, #20]
 80113fc:	b2f6      	uxtb	r6, r6
 80113fe:	4283      	cmp	r3, r0
 8011400:	4637      	mov	r7, r6
 8011402:	dc04      	bgt.n	801140e <__swbuf_r+0x42>
 8011404:	4621      	mov	r1, r4
 8011406:	4628      	mov	r0, r5
 8011408:	f000 f93c 	bl	8011684 <_fflush_r>
 801140c:	bb30      	cbnz	r0, 801145c <__swbuf_r+0x90>
 801140e:	68a3      	ldr	r3, [r4, #8]
 8011410:	3b01      	subs	r3, #1
 8011412:	60a3      	str	r3, [r4, #8]
 8011414:	6823      	ldr	r3, [r4, #0]
 8011416:	1c5a      	adds	r2, r3, #1
 8011418:	6022      	str	r2, [r4, #0]
 801141a:	701e      	strb	r6, [r3, #0]
 801141c:	6963      	ldr	r3, [r4, #20]
 801141e:	3001      	adds	r0, #1
 8011420:	4283      	cmp	r3, r0
 8011422:	d004      	beq.n	801142e <__swbuf_r+0x62>
 8011424:	89a3      	ldrh	r3, [r4, #12]
 8011426:	07db      	lsls	r3, r3, #31
 8011428:	d506      	bpl.n	8011438 <__swbuf_r+0x6c>
 801142a:	2e0a      	cmp	r6, #10
 801142c:	d104      	bne.n	8011438 <__swbuf_r+0x6c>
 801142e:	4621      	mov	r1, r4
 8011430:	4628      	mov	r0, r5
 8011432:	f000 f927 	bl	8011684 <_fflush_r>
 8011436:	b988      	cbnz	r0, 801145c <__swbuf_r+0x90>
 8011438:	4638      	mov	r0, r7
 801143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143c:	4b0a      	ldr	r3, [pc, #40]	; (8011468 <__swbuf_r+0x9c>)
 801143e:	429c      	cmp	r4, r3
 8011440:	d101      	bne.n	8011446 <__swbuf_r+0x7a>
 8011442:	68ac      	ldr	r4, [r5, #8]
 8011444:	e7cf      	b.n	80113e6 <__swbuf_r+0x1a>
 8011446:	4b09      	ldr	r3, [pc, #36]	; (801146c <__swbuf_r+0xa0>)
 8011448:	429c      	cmp	r4, r3
 801144a:	bf08      	it	eq
 801144c:	68ec      	ldreq	r4, [r5, #12]
 801144e:	e7ca      	b.n	80113e6 <__swbuf_r+0x1a>
 8011450:	4621      	mov	r1, r4
 8011452:	4628      	mov	r0, r5
 8011454:	f000 f81a 	bl	801148c <__swsetup_r>
 8011458:	2800      	cmp	r0, #0
 801145a:	d0cb      	beq.n	80113f4 <__swbuf_r+0x28>
 801145c:	f04f 37ff 	mov.w	r7, #4294967295
 8011460:	e7ea      	b.n	8011438 <__swbuf_r+0x6c>
 8011462:	bf00      	nop
 8011464:	08027aac 	.word	0x08027aac
 8011468:	08027acc 	.word	0x08027acc
 801146c:	08027a8c 	.word	0x08027a8c

08011470 <__ascii_wctomb>:
 8011470:	b149      	cbz	r1, 8011486 <__ascii_wctomb+0x16>
 8011472:	2aff      	cmp	r2, #255	; 0xff
 8011474:	bf85      	ittet	hi
 8011476:	238a      	movhi	r3, #138	; 0x8a
 8011478:	6003      	strhi	r3, [r0, #0]
 801147a:	700a      	strbls	r2, [r1, #0]
 801147c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011480:	bf98      	it	ls
 8011482:	2001      	movls	r0, #1
 8011484:	4770      	bx	lr
 8011486:	4608      	mov	r0, r1
 8011488:	4770      	bx	lr
	...

0801148c <__swsetup_r>:
 801148c:	4b32      	ldr	r3, [pc, #200]	; (8011558 <__swsetup_r+0xcc>)
 801148e:	b570      	push	{r4, r5, r6, lr}
 8011490:	681d      	ldr	r5, [r3, #0]
 8011492:	4606      	mov	r6, r0
 8011494:	460c      	mov	r4, r1
 8011496:	b125      	cbz	r5, 80114a2 <__swsetup_r+0x16>
 8011498:	69ab      	ldr	r3, [r5, #24]
 801149a:	b913      	cbnz	r3, 80114a2 <__swsetup_r+0x16>
 801149c:	4628      	mov	r0, r5
 801149e:	f000 f985 	bl	80117ac <__sinit>
 80114a2:	4b2e      	ldr	r3, [pc, #184]	; (801155c <__swsetup_r+0xd0>)
 80114a4:	429c      	cmp	r4, r3
 80114a6:	d10f      	bne.n	80114c8 <__swsetup_r+0x3c>
 80114a8:	686c      	ldr	r4, [r5, #4]
 80114aa:	89a3      	ldrh	r3, [r4, #12]
 80114ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114b0:	0719      	lsls	r1, r3, #28
 80114b2:	d42c      	bmi.n	801150e <__swsetup_r+0x82>
 80114b4:	06dd      	lsls	r5, r3, #27
 80114b6:	d411      	bmi.n	80114dc <__swsetup_r+0x50>
 80114b8:	2309      	movs	r3, #9
 80114ba:	6033      	str	r3, [r6, #0]
 80114bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80114c0:	81a3      	strh	r3, [r4, #12]
 80114c2:	f04f 30ff 	mov.w	r0, #4294967295
 80114c6:	e03e      	b.n	8011546 <__swsetup_r+0xba>
 80114c8:	4b25      	ldr	r3, [pc, #148]	; (8011560 <__swsetup_r+0xd4>)
 80114ca:	429c      	cmp	r4, r3
 80114cc:	d101      	bne.n	80114d2 <__swsetup_r+0x46>
 80114ce:	68ac      	ldr	r4, [r5, #8]
 80114d0:	e7eb      	b.n	80114aa <__swsetup_r+0x1e>
 80114d2:	4b24      	ldr	r3, [pc, #144]	; (8011564 <__swsetup_r+0xd8>)
 80114d4:	429c      	cmp	r4, r3
 80114d6:	bf08      	it	eq
 80114d8:	68ec      	ldreq	r4, [r5, #12]
 80114da:	e7e6      	b.n	80114aa <__swsetup_r+0x1e>
 80114dc:	0758      	lsls	r0, r3, #29
 80114de:	d512      	bpl.n	8011506 <__swsetup_r+0x7a>
 80114e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114e2:	b141      	cbz	r1, 80114f6 <__swsetup_r+0x6a>
 80114e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e8:	4299      	cmp	r1, r3
 80114ea:	d002      	beq.n	80114f2 <__swsetup_r+0x66>
 80114ec:	4630      	mov	r0, r6
 80114ee:	f7fd fc7b 	bl	800ede8 <_free_r>
 80114f2:	2300      	movs	r3, #0
 80114f4:	6363      	str	r3, [r4, #52]	; 0x34
 80114f6:	89a3      	ldrh	r3, [r4, #12]
 80114f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114fc:	81a3      	strh	r3, [r4, #12]
 80114fe:	2300      	movs	r3, #0
 8011500:	6063      	str	r3, [r4, #4]
 8011502:	6923      	ldr	r3, [r4, #16]
 8011504:	6023      	str	r3, [r4, #0]
 8011506:	89a3      	ldrh	r3, [r4, #12]
 8011508:	f043 0308 	orr.w	r3, r3, #8
 801150c:	81a3      	strh	r3, [r4, #12]
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	b94b      	cbnz	r3, 8011526 <__swsetup_r+0x9a>
 8011512:	89a3      	ldrh	r3, [r4, #12]
 8011514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801151c:	d003      	beq.n	8011526 <__swsetup_r+0x9a>
 801151e:	4621      	mov	r1, r4
 8011520:	4630      	mov	r0, r6
 8011522:	f000 fa05 	bl	8011930 <__smakebuf_r>
 8011526:	89a0      	ldrh	r0, [r4, #12]
 8011528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801152c:	f010 0301 	ands.w	r3, r0, #1
 8011530:	d00a      	beq.n	8011548 <__swsetup_r+0xbc>
 8011532:	2300      	movs	r3, #0
 8011534:	60a3      	str	r3, [r4, #8]
 8011536:	6963      	ldr	r3, [r4, #20]
 8011538:	425b      	negs	r3, r3
 801153a:	61a3      	str	r3, [r4, #24]
 801153c:	6923      	ldr	r3, [r4, #16]
 801153e:	b943      	cbnz	r3, 8011552 <__swsetup_r+0xc6>
 8011540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011544:	d1ba      	bne.n	80114bc <__swsetup_r+0x30>
 8011546:	bd70      	pop	{r4, r5, r6, pc}
 8011548:	0781      	lsls	r1, r0, #30
 801154a:	bf58      	it	pl
 801154c:	6963      	ldrpl	r3, [r4, #20]
 801154e:	60a3      	str	r3, [r4, #8]
 8011550:	e7f4      	b.n	801153c <__swsetup_r+0xb0>
 8011552:	2000      	movs	r0, #0
 8011554:	e7f7      	b.n	8011546 <__swsetup_r+0xba>
 8011556:	bf00      	nop
 8011558:	20000eac 	.word	0x20000eac
 801155c:	08027aac 	.word	0x08027aac
 8011560:	08027acc 	.word	0x08027acc
 8011564:	08027a8c 	.word	0x08027a8c

08011568 <abort>:
 8011568:	b508      	push	{r3, lr}
 801156a:	2006      	movs	r0, #6
 801156c:	f000 fa48 	bl	8011a00 <raise>
 8011570:	2001      	movs	r0, #1
 8011572:	f000 ff1f 	bl	80123b4 <_exit>
	...

08011578 <__sflush_r>:
 8011578:	898a      	ldrh	r2, [r1, #12]
 801157a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801157e:	4605      	mov	r5, r0
 8011580:	0710      	lsls	r0, r2, #28
 8011582:	460c      	mov	r4, r1
 8011584:	d458      	bmi.n	8011638 <__sflush_r+0xc0>
 8011586:	684b      	ldr	r3, [r1, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	dc05      	bgt.n	8011598 <__sflush_r+0x20>
 801158c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801158e:	2b00      	cmp	r3, #0
 8011590:	dc02      	bgt.n	8011598 <__sflush_r+0x20>
 8011592:	2000      	movs	r0, #0
 8011594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801159a:	2e00      	cmp	r6, #0
 801159c:	d0f9      	beq.n	8011592 <__sflush_r+0x1a>
 801159e:	2300      	movs	r3, #0
 80115a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115a4:	682f      	ldr	r7, [r5, #0]
 80115a6:	602b      	str	r3, [r5, #0]
 80115a8:	d032      	beq.n	8011610 <__sflush_r+0x98>
 80115aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115ac:	89a3      	ldrh	r3, [r4, #12]
 80115ae:	075a      	lsls	r2, r3, #29
 80115b0:	d505      	bpl.n	80115be <__sflush_r+0x46>
 80115b2:	6863      	ldr	r3, [r4, #4]
 80115b4:	1ac0      	subs	r0, r0, r3
 80115b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115b8:	b10b      	cbz	r3, 80115be <__sflush_r+0x46>
 80115ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115bc:	1ac0      	subs	r0, r0, r3
 80115be:	2300      	movs	r3, #0
 80115c0:	4602      	mov	r2, r0
 80115c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115c4:	6a21      	ldr	r1, [r4, #32]
 80115c6:	4628      	mov	r0, r5
 80115c8:	47b0      	blx	r6
 80115ca:	1c43      	adds	r3, r0, #1
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	d106      	bne.n	80115de <__sflush_r+0x66>
 80115d0:	6829      	ldr	r1, [r5, #0]
 80115d2:	291d      	cmp	r1, #29
 80115d4:	d82c      	bhi.n	8011630 <__sflush_r+0xb8>
 80115d6:	4a2a      	ldr	r2, [pc, #168]	; (8011680 <__sflush_r+0x108>)
 80115d8:	40ca      	lsrs	r2, r1
 80115da:	07d6      	lsls	r6, r2, #31
 80115dc:	d528      	bpl.n	8011630 <__sflush_r+0xb8>
 80115de:	2200      	movs	r2, #0
 80115e0:	6062      	str	r2, [r4, #4]
 80115e2:	04d9      	lsls	r1, r3, #19
 80115e4:	6922      	ldr	r2, [r4, #16]
 80115e6:	6022      	str	r2, [r4, #0]
 80115e8:	d504      	bpl.n	80115f4 <__sflush_r+0x7c>
 80115ea:	1c42      	adds	r2, r0, #1
 80115ec:	d101      	bne.n	80115f2 <__sflush_r+0x7a>
 80115ee:	682b      	ldr	r3, [r5, #0]
 80115f0:	b903      	cbnz	r3, 80115f4 <__sflush_r+0x7c>
 80115f2:	6560      	str	r0, [r4, #84]	; 0x54
 80115f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115f6:	602f      	str	r7, [r5, #0]
 80115f8:	2900      	cmp	r1, #0
 80115fa:	d0ca      	beq.n	8011592 <__sflush_r+0x1a>
 80115fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011600:	4299      	cmp	r1, r3
 8011602:	d002      	beq.n	801160a <__sflush_r+0x92>
 8011604:	4628      	mov	r0, r5
 8011606:	f7fd fbef 	bl	800ede8 <_free_r>
 801160a:	2000      	movs	r0, #0
 801160c:	6360      	str	r0, [r4, #52]	; 0x34
 801160e:	e7c1      	b.n	8011594 <__sflush_r+0x1c>
 8011610:	6a21      	ldr	r1, [r4, #32]
 8011612:	2301      	movs	r3, #1
 8011614:	4628      	mov	r0, r5
 8011616:	47b0      	blx	r6
 8011618:	1c41      	adds	r1, r0, #1
 801161a:	d1c7      	bne.n	80115ac <__sflush_r+0x34>
 801161c:	682b      	ldr	r3, [r5, #0]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d0c4      	beq.n	80115ac <__sflush_r+0x34>
 8011622:	2b1d      	cmp	r3, #29
 8011624:	d001      	beq.n	801162a <__sflush_r+0xb2>
 8011626:	2b16      	cmp	r3, #22
 8011628:	d101      	bne.n	801162e <__sflush_r+0xb6>
 801162a:	602f      	str	r7, [r5, #0]
 801162c:	e7b1      	b.n	8011592 <__sflush_r+0x1a>
 801162e:	89a3      	ldrh	r3, [r4, #12]
 8011630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011634:	81a3      	strh	r3, [r4, #12]
 8011636:	e7ad      	b.n	8011594 <__sflush_r+0x1c>
 8011638:	690f      	ldr	r7, [r1, #16]
 801163a:	2f00      	cmp	r7, #0
 801163c:	d0a9      	beq.n	8011592 <__sflush_r+0x1a>
 801163e:	0793      	lsls	r3, r2, #30
 8011640:	680e      	ldr	r6, [r1, #0]
 8011642:	bf08      	it	eq
 8011644:	694b      	ldreq	r3, [r1, #20]
 8011646:	600f      	str	r7, [r1, #0]
 8011648:	bf18      	it	ne
 801164a:	2300      	movne	r3, #0
 801164c:	eba6 0807 	sub.w	r8, r6, r7
 8011650:	608b      	str	r3, [r1, #8]
 8011652:	f1b8 0f00 	cmp.w	r8, #0
 8011656:	dd9c      	ble.n	8011592 <__sflush_r+0x1a>
 8011658:	6a21      	ldr	r1, [r4, #32]
 801165a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801165c:	4643      	mov	r3, r8
 801165e:	463a      	mov	r2, r7
 8011660:	4628      	mov	r0, r5
 8011662:	47b0      	blx	r6
 8011664:	2800      	cmp	r0, #0
 8011666:	dc06      	bgt.n	8011676 <__sflush_r+0xfe>
 8011668:	89a3      	ldrh	r3, [r4, #12]
 801166a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801166e:	81a3      	strh	r3, [r4, #12]
 8011670:	f04f 30ff 	mov.w	r0, #4294967295
 8011674:	e78e      	b.n	8011594 <__sflush_r+0x1c>
 8011676:	4407      	add	r7, r0
 8011678:	eba8 0800 	sub.w	r8, r8, r0
 801167c:	e7e9      	b.n	8011652 <__sflush_r+0xda>
 801167e:	bf00      	nop
 8011680:	20400001 	.word	0x20400001

08011684 <_fflush_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	690b      	ldr	r3, [r1, #16]
 8011688:	4605      	mov	r5, r0
 801168a:	460c      	mov	r4, r1
 801168c:	b913      	cbnz	r3, 8011694 <_fflush_r+0x10>
 801168e:	2500      	movs	r5, #0
 8011690:	4628      	mov	r0, r5
 8011692:	bd38      	pop	{r3, r4, r5, pc}
 8011694:	b118      	cbz	r0, 801169e <_fflush_r+0x1a>
 8011696:	6983      	ldr	r3, [r0, #24]
 8011698:	b90b      	cbnz	r3, 801169e <_fflush_r+0x1a>
 801169a:	f000 f887 	bl	80117ac <__sinit>
 801169e:	4b14      	ldr	r3, [pc, #80]	; (80116f0 <_fflush_r+0x6c>)
 80116a0:	429c      	cmp	r4, r3
 80116a2:	d11b      	bne.n	80116dc <_fflush_r+0x58>
 80116a4:	686c      	ldr	r4, [r5, #4]
 80116a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d0ef      	beq.n	801168e <_fflush_r+0xa>
 80116ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116b0:	07d0      	lsls	r0, r2, #31
 80116b2:	d404      	bmi.n	80116be <_fflush_r+0x3a>
 80116b4:	0599      	lsls	r1, r3, #22
 80116b6:	d402      	bmi.n	80116be <_fflush_r+0x3a>
 80116b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ba:	f7ff fcf8 	bl	80110ae <__retarget_lock_acquire_recursive>
 80116be:	4628      	mov	r0, r5
 80116c0:	4621      	mov	r1, r4
 80116c2:	f7ff ff59 	bl	8011578 <__sflush_r>
 80116c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116c8:	07da      	lsls	r2, r3, #31
 80116ca:	4605      	mov	r5, r0
 80116cc:	d4e0      	bmi.n	8011690 <_fflush_r+0xc>
 80116ce:	89a3      	ldrh	r3, [r4, #12]
 80116d0:	059b      	lsls	r3, r3, #22
 80116d2:	d4dd      	bmi.n	8011690 <_fflush_r+0xc>
 80116d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116d6:	f7ff fceb 	bl	80110b0 <__retarget_lock_release_recursive>
 80116da:	e7d9      	b.n	8011690 <_fflush_r+0xc>
 80116dc:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <_fflush_r+0x70>)
 80116de:	429c      	cmp	r4, r3
 80116e0:	d101      	bne.n	80116e6 <_fflush_r+0x62>
 80116e2:	68ac      	ldr	r4, [r5, #8]
 80116e4:	e7df      	b.n	80116a6 <_fflush_r+0x22>
 80116e6:	4b04      	ldr	r3, [pc, #16]	; (80116f8 <_fflush_r+0x74>)
 80116e8:	429c      	cmp	r4, r3
 80116ea:	bf08      	it	eq
 80116ec:	68ec      	ldreq	r4, [r5, #12]
 80116ee:	e7da      	b.n	80116a6 <_fflush_r+0x22>
 80116f0:	08027aac 	.word	0x08027aac
 80116f4:	08027acc 	.word	0x08027acc
 80116f8:	08027a8c 	.word	0x08027a8c

080116fc <std>:
 80116fc:	2300      	movs	r3, #0
 80116fe:	b510      	push	{r4, lr}
 8011700:	4604      	mov	r4, r0
 8011702:	e9c0 3300 	strd	r3, r3, [r0]
 8011706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801170a:	6083      	str	r3, [r0, #8]
 801170c:	8181      	strh	r1, [r0, #12]
 801170e:	6643      	str	r3, [r0, #100]	; 0x64
 8011710:	81c2      	strh	r2, [r0, #14]
 8011712:	6183      	str	r3, [r0, #24]
 8011714:	4619      	mov	r1, r3
 8011716:	2208      	movs	r2, #8
 8011718:	305c      	adds	r0, #92	; 0x5c
 801171a:	f7fd fb5d 	bl	800edd8 <memset>
 801171e:	4b05      	ldr	r3, [pc, #20]	; (8011734 <std+0x38>)
 8011720:	6263      	str	r3, [r4, #36]	; 0x24
 8011722:	4b05      	ldr	r3, [pc, #20]	; (8011738 <std+0x3c>)
 8011724:	62a3      	str	r3, [r4, #40]	; 0x28
 8011726:	4b05      	ldr	r3, [pc, #20]	; (801173c <std+0x40>)
 8011728:	62e3      	str	r3, [r4, #44]	; 0x2c
 801172a:	4b05      	ldr	r3, [pc, #20]	; (8011740 <std+0x44>)
 801172c:	6224      	str	r4, [r4, #32]
 801172e:	6323      	str	r3, [r4, #48]	; 0x30
 8011730:	bd10      	pop	{r4, pc}
 8011732:	bf00      	nop
 8011734:	08011a39 	.word	0x08011a39
 8011738:	08011a5b 	.word	0x08011a5b
 801173c:	08011a93 	.word	0x08011a93
 8011740:	08011ab7 	.word	0x08011ab7

08011744 <_cleanup_r>:
 8011744:	4901      	ldr	r1, [pc, #4]	; (801174c <_cleanup_r+0x8>)
 8011746:	f000 b8af 	b.w	80118a8 <_fwalk_reent>
 801174a:	bf00      	nop
 801174c:	08011685 	.word	0x08011685

08011750 <__sfmoreglue>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	2268      	movs	r2, #104	; 0x68
 8011754:	1e4d      	subs	r5, r1, #1
 8011756:	4355      	muls	r5, r2
 8011758:	460e      	mov	r6, r1
 801175a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801175e:	f7fd fbaf 	bl	800eec0 <_malloc_r>
 8011762:	4604      	mov	r4, r0
 8011764:	b140      	cbz	r0, 8011778 <__sfmoreglue+0x28>
 8011766:	2100      	movs	r1, #0
 8011768:	e9c0 1600 	strd	r1, r6, [r0]
 801176c:	300c      	adds	r0, #12
 801176e:	60a0      	str	r0, [r4, #8]
 8011770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011774:	f7fd fb30 	bl	800edd8 <memset>
 8011778:	4620      	mov	r0, r4
 801177a:	bd70      	pop	{r4, r5, r6, pc}

0801177c <__sfp_lock_acquire>:
 801177c:	4801      	ldr	r0, [pc, #4]	; (8011784 <__sfp_lock_acquire+0x8>)
 801177e:	f7ff bc96 	b.w	80110ae <__retarget_lock_acquire_recursive>
 8011782:	bf00      	nop
 8011784:	2000552d 	.word	0x2000552d

08011788 <__sfp_lock_release>:
 8011788:	4801      	ldr	r0, [pc, #4]	; (8011790 <__sfp_lock_release+0x8>)
 801178a:	f7ff bc91 	b.w	80110b0 <__retarget_lock_release_recursive>
 801178e:	bf00      	nop
 8011790:	2000552d 	.word	0x2000552d

08011794 <__sinit_lock_acquire>:
 8011794:	4801      	ldr	r0, [pc, #4]	; (801179c <__sinit_lock_acquire+0x8>)
 8011796:	f7ff bc8a 	b.w	80110ae <__retarget_lock_acquire_recursive>
 801179a:	bf00      	nop
 801179c:	2000552e 	.word	0x2000552e

080117a0 <__sinit_lock_release>:
 80117a0:	4801      	ldr	r0, [pc, #4]	; (80117a8 <__sinit_lock_release+0x8>)
 80117a2:	f7ff bc85 	b.w	80110b0 <__retarget_lock_release_recursive>
 80117a6:	bf00      	nop
 80117a8:	2000552e 	.word	0x2000552e

080117ac <__sinit>:
 80117ac:	b510      	push	{r4, lr}
 80117ae:	4604      	mov	r4, r0
 80117b0:	f7ff fff0 	bl	8011794 <__sinit_lock_acquire>
 80117b4:	69a3      	ldr	r3, [r4, #24]
 80117b6:	b11b      	cbz	r3, 80117c0 <__sinit+0x14>
 80117b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117bc:	f7ff bff0 	b.w	80117a0 <__sinit_lock_release>
 80117c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117c4:	6523      	str	r3, [r4, #80]	; 0x50
 80117c6:	4b13      	ldr	r3, [pc, #76]	; (8011814 <__sinit+0x68>)
 80117c8:	4a13      	ldr	r2, [pc, #76]	; (8011818 <__sinit+0x6c>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80117ce:	42a3      	cmp	r3, r4
 80117d0:	bf04      	itt	eq
 80117d2:	2301      	moveq	r3, #1
 80117d4:	61a3      	streq	r3, [r4, #24]
 80117d6:	4620      	mov	r0, r4
 80117d8:	f000 f820 	bl	801181c <__sfp>
 80117dc:	6060      	str	r0, [r4, #4]
 80117de:	4620      	mov	r0, r4
 80117e0:	f000 f81c 	bl	801181c <__sfp>
 80117e4:	60a0      	str	r0, [r4, #8]
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 f818 	bl	801181c <__sfp>
 80117ec:	2200      	movs	r2, #0
 80117ee:	60e0      	str	r0, [r4, #12]
 80117f0:	2104      	movs	r1, #4
 80117f2:	6860      	ldr	r0, [r4, #4]
 80117f4:	f7ff ff82 	bl	80116fc <std>
 80117f8:	68a0      	ldr	r0, [r4, #8]
 80117fa:	2201      	movs	r2, #1
 80117fc:	2109      	movs	r1, #9
 80117fe:	f7ff ff7d 	bl	80116fc <std>
 8011802:	68e0      	ldr	r0, [r4, #12]
 8011804:	2202      	movs	r2, #2
 8011806:	2112      	movs	r1, #18
 8011808:	f7ff ff78 	bl	80116fc <std>
 801180c:	2301      	movs	r3, #1
 801180e:	61a3      	str	r3, [r4, #24]
 8011810:	e7d2      	b.n	80117b8 <__sinit+0xc>
 8011812:	bf00      	nop
 8011814:	08027710 	.word	0x08027710
 8011818:	08011745 	.word	0x08011745

0801181c <__sfp>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	4607      	mov	r7, r0
 8011820:	f7ff ffac 	bl	801177c <__sfp_lock_acquire>
 8011824:	4b1e      	ldr	r3, [pc, #120]	; (80118a0 <__sfp+0x84>)
 8011826:	681e      	ldr	r6, [r3, #0]
 8011828:	69b3      	ldr	r3, [r6, #24]
 801182a:	b913      	cbnz	r3, 8011832 <__sfp+0x16>
 801182c:	4630      	mov	r0, r6
 801182e:	f7ff ffbd 	bl	80117ac <__sinit>
 8011832:	3648      	adds	r6, #72	; 0x48
 8011834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011838:	3b01      	subs	r3, #1
 801183a:	d503      	bpl.n	8011844 <__sfp+0x28>
 801183c:	6833      	ldr	r3, [r6, #0]
 801183e:	b30b      	cbz	r3, 8011884 <__sfp+0x68>
 8011840:	6836      	ldr	r6, [r6, #0]
 8011842:	e7f7      	b.n	8011834 <__sfp+0x18>
 8011844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011848:	b9d5      	cbnz	r5, 8011880 <__sfp+0x64>
 801184a:	4b16      	ldr	r3, [pc, #88]	; (80118a4 <__sfp+0x88>)
 801184c:	60e3      	str	r3, [r4, #12]
 801184e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011852:	6665      	str	r5, [r4, #100]	; 0x64
 8011854:	f7ff fc2a 	bl	80110ac <__retarget_lock_init_recursive>
 8011858:	f7ff ff96 	bl	8011788 <__sfp_lock_release>
 801185c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011864:	6025      	str	r5, [r4, #0]
 8011866:	61a5      	str	r5, [r4, #24]
 8011868:	2208      	movs	r2, #8
 801186a:	4629      	mov	r1, r5
 801186c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011870:	f7fd fab2 	bl	800edd8 <memset>
 8011874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801187c:	4620      	mov	r0, r4
 801187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011880:	3468      	adds	r4, #104	; 0x68
 8011882:	e7d9      	b.n	8011838 <__sfp+0x1c>
 8011884:	2104      	movs	r1, #4
 8011886:	4638      	mov	r0, r7
 8011888:	f7ff ff62 	bl	8011750 <__sfmoreglue>
 801188c:	4604      	mov	r4, r0
 801188e:	6030      	str	r0, [r6, #0]
 8011890:	2800      	cmp	r0, #0
 8011892:	d1d5      	bne.n	8011840 <__sfp+0x24>
 8011894:	f7ff ff78 	bl	8011788 <__sfp_lock_release>
 8011898:	230c      	movs	r3, #12
 801189a:	603b      	str	r3, [r7, #0]
 801189c:	e7ee      	b.n	801187c <__sfp+0x60>
 801189e:	bf00      	nop
 80118a0:	08027710 	.word	0x08027710
 80118a4:	ffff0001 	.word	0xffff0001

080118a8 <_fwalk_reent>:
 80118a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118ac:	4606      	mov	r6, r0
 80118ae:	4688      	mov	r8, r1
 80118b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118b4:	2700      	movs	r7, #0
 80118b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118ba:	f1b9 0901 	subs.w	r9, r9, #1
 80118be:	d505      	bpl.n	80118cc <_fwalk_reent+0x24>
 80118c0:	6824      	ldr	r4, [r4, #0]
 80118c2:	2c00      	cmp	r4, #0
 80118c4:	d1f7      	bne.n	80118b6 <_fwalk_reent+0xe>
 80118c6:	4638      	mov	r0, r7
 80118c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118cc:	89ab      	ldrh	r3, [r5, #12]
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d907      	bls.n	80118e2 <_fwalk_reent+0x3a>
 80118d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118d6:	3301      	adds	r3, #1
 80118d8:	d003      	beq.n	80118e2 <_fwalk_reent+0x3a>
 80118da:	4629      	mov	r1, r5
 80118dc:	4630      	mov	r0, r6
 80118de:	47c0      	blx	r8
 80118e0:	4307      	orrs	r7, r0
 80118e2:	3568      	adds	r5, #104	; 0x68
 80118e4:	e7e9      	b.n	80118ba <_fwalk_reent+0x12>

080118e6 <__swhatbuf_r>:
 80118e6:	b570      	push	{r4, r5, r6, lr}
 80118e8:	460e      	mov	r6, r1
 80118ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118ee:	2900      	cmp	r1, #0
 80118f0:	b096      	sub	sp, #88	; 0x58
 80118f2:	4614      	mov	r4, r2
 80118f4:	461d      	mov	r5, r3
 80118f6:	da08      	bge.n	801190a <__swhatbuf_r+0x24>
 80118f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	602a      	str	r2, [r5, #0]
 8011900:	061a      	lsls	r2, r3, #24
 8011902:	d410      	bmi.n	8011926 <__swhatbuf_r+0x40>
 8011904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011908:	e00e      	b.n	8011928 <__swhatbuf_r+0x42>
 801190a:	466a      	mov	r2, sp
 801190c:	f000 f8fa 	bl	8011b04 <_fstat_r>
 8011910:	2800      	cmp	r0, #0
 8011912:	dbf1      	blt.n	80118f8 <__swhatbuf_r+0x12>
 8011914:	9a01      	ldr	r2, [sp, #4]
 8011916:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801191a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801191e:	425a      	negs	r2, r3
 8011920:	415a      	adcs	r2, r3
 8011922:	602a      	str	r2, [r5, #0]
 8011924:	e7ee      	b.n	8011904 <__swhatbuf_r+0x1e>
 8011926:	2340      	movs	r3, #64	; 0x40
 8011928:	2000      	movs	r0, #0
 801192a:	6023      	str	r3, [r4, #0]
 801192c:	b016      	add	sp, #88	; 0x58
 801192e:	bd70      	pop	{r4, r5, r6, pc}

08011930 <__smakebuf_r>:
 8011930:	898b      	ldrh	r3, [r1, #12]
 8011932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011934:	079d      	lsls	r5, r3, #30
 8011936:	4606      	mov	r6, r0
 8011938:	460c      	mov	r4, r1
 801193a:	d507      	bpl.n	801194c <__smakebuf_r+0x1c>
 801193c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011940:	6023      	str	r3, [r4, #0]
 8011942:	6123      	str	r3, [r4, #16]
 8011944:	2301      	movs	r3, #1
 8011946:	6163      	str	r3, [r4, #20]
 8011948:	b002      	add	sp, #8
 801194a:	bd70      	pop	{r4, r5, r6, pc}
 801194c:	ab01      	add	r3, sp, #4
 801194e:	466a      	mov	r2, sp
 8011950:	f7ff ffc9 	bl	80118e6 <__swhatbuf_r>
 8011954:	9900      	ldr	r1, [sp, #0]
 8011956:	4605      	mov	r5, r0
 8011958:	4630      	mov	r0, r6
 801195a:	f7fd fab1 	bl	800eec0 <_malloc_r>
 801195e:	b948      	cbnz	r0, 8011974 <__smakebuf_r+0x44>
 8011960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011964:	059a      	lsls	r2, r3, #22
 8011966:	d4ef      	bmi.n	8011948 <__smakebuf_r+0x18>
 8011968:	f023 0303 	bic.w	r3, r3, #3
 801196c:	f043 0302 	orr.w	r3, r3, #2
 8011970:	81a3      	strh	r3, [r4, #12]
 8011972:	e7e3      	b.n	801193c <__smakebuf_r+0xc>
 8011974:	4b0d      	ldr	r3, [pc, #52]	; (80119ac <__smakebuf_r+0x7c>)
 8011976:	62b3      	str	r3, [r6, #40]	; 0x28
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	6020      	str	r0, [r4, #0]
 801197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011980:	81a3      	strh	r3, [r4, #12]
 8011982:	9b00      	ldr	r3, [sp, #0]
 8011984:	6163      	str	r3, [r4, #20]
 8011986:	9b01      	ldr	r3, [sp, #4]
 8011988:	6120      	str	r0, [r4, #16]
 801198a:	b15b      	cbz	r3, 80119a4 <__smakebuf_r+0x74>
 801198c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011990:	4630      	mov	r0, r6
 8011992:	f000 f8c9 	bl	8011b28 <_isatty_r>
 8011996:	b128      	cbz	r0, 80119a4 <__smakebuf_r+0x74>
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	f023 0303 	bic.w	r3, r3, #3
 801199e:	f043 0301 	orr.w	r3, r3, #1
 80119a2:	81a3      	strh	r3, [r4, #12]
 80119a4:	89a0      	ldrh	r0, [r4, #12]
 80119a6:	4305      	orrs	r5, r0
 80119a8:	81a5      	strh	r5, [r4, #12]
 80119aa:	e7cd      	b.n	8011948 <__smakebuf_r+0x18>
 80119ac:	08011745 	.word	0x08011745

080119b0 <_raise_r>:
 80119b0:	291f      	cmp	r1, #31
 80119b2:	b538      	push	{r3, r4, r5, lr}
 80119b4:	4604      	mov	r4, r0
 80119b6:	460d      	mov	r5, r1
 80119b8:	d904      	bls.n	80119c4 <_raise_r+0x14>
 80119ba:	2316      	movs	r3, #22
 80119bc:	6003      	str	r3, [r0, #0]
 80119be:	f04f 30ff 	mov.w	r0, #4294967295
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119c6:	b112      	cbz	r2, 80119ce <_raise_r+0x1e>
 80119c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119cc:	b94b      	cbnz	r3, 80119e2 <_raise_r+0x32>
 80119ce:	4620      	mov	r0, r4
 80119d0:	f000 f830 	bl	8011a34 <_getpid_r>
 80119d4:	462a      	mov	r2, r5
 80119d6:	4601      	mov	r1, r0
 80119d8:	4620      	mov	r0, r4
 80119da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119de:	f000 b817 	b.w	8011a10 <_kill_r>
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d00a      	beq.n	80119fc <_raise_r+0x4c>
 80119e6:	1c59      	adds	r1, r3, #1
 80119e8:	d103      	bne.n	80119f2 <_raise_r+0x42>
 80119ea:	2316      	movs	r3, #22
 80119ec:	6003      	str	r3, [r0, #0]
 80119ee:	2001      	movs	r0, #1
 80119f0:	e7e7      	b.n	80119c2 <_raise_r+0x12>
 80119f2:	2400      	movs	r4, #0
 80119f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119f8:	4628      	mov	r0, r5
 80119fa:	4798      	blx	r3
 80119fc:	2000      	movs	r0, #0
 80119fe:	e7e0      	b.n	80119c2 <_raise_r+0x12>

08011a00 <raise>:
 8011a00:	4b02      	ldr	r3, [pc, #8]	; (8011a0c <raise+0xc>)
 8011a02:	4601      	mov	r1, r0
 8011a04:	6818      	ldr	r0, [r3, #0]
 8011a06:	f7ff bfd3 	b.w	80119b0 <_raise_r>
 8011a0a:	bf00      	nop
 8011a0c:	20000eac 	.word	0x20000eac

08011a10 <_kill_r>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4d07      	ldr	r5, [pc, #28]	; (8011a30 <_kill_r+0x20>)
 8011a14:	2300      	movs	r3, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	4608      	mov	r0, r1
 8011a1a:	4611      	mov	r1, r2
 8011a1c:	602b      	str	r3, [r5, #0]
 8011a1e:	f000 fca9 	bl	8012374 <_kill>
 8011a22:	1c43      	adds	r3, r0, #1
 8011a24:	d102      	bne.n	8011a2c <_kill_r+0x1c>
 8011a26:	682b      	ldr	r3, [r5, #0]
 8011a28:	b103      	cbz	r3, 8011a2c <_kill_r+0x1c>
 8011a2a:	6023      	str	r3, [r4, #0]
 8011a2c:	bd38      	pop	{r3, r4, r5, pc}
 8011a2e:	bf00      	nop
 8011a30:	20005528 	.word	0x20005528

08011a34 <_getpid_r>:
 8011a34:	f000 bc8e 	b.w	8012354 <_getpid>

08011a38 <__sread>:
 8011a38:	b510      	push	{r4, lr}
 8011a3a:	460c      	mov	r4, r1
 8011a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a40:	f000 f894 	bl	8011b6c <_read_r>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	bfab      	itete	ge
 8011a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a4c:	181b      	addge	r3, r3, r0
 8011a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a52:	bfac      	ite	ge
 8011a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a56:	81a3      	strhlt	r3, [r4, #12]
 8011a58:	bd10      	pop	{r4, pc}

08011a5a <__swrite>:
 8011a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5e:	461f      	mov	r7, r3
 8011a60:	898b      	ldrh	r3, [r1, #12]
 8011a62:	05db      	lsls	r3, r3, #23
 8011a64:	4605      	mov	r5, r0
 8011a66:	460c      	mov	r4, r1
 8011a68:	4616      	mov	r6, r2
 8011a6a:	d505      	bpl.n	8011a78 <__swrite+0x1e>
 8011a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a70:	2302      	movs	r3, #2
 8011a72:	2200      	movs	r2, #0
 8011a74:	f000 f868 	bl	8011b48 <_lseek_r>
 8011a78:	89a3      	ldrh	r3, [r4, #12]
 8011a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a82:	81a3      	strh	r3, [r4, #12]
 8011a84:	4632      	mov	r2, r6
 8011a86:	463b      	mov	r3, r7
 8011a88:	4628      	mov	r0, r5
 8011a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8e:	f000 b817 	b.w	8011ac0 <_write_r>

08011a92 <__sseek>:
 8011a92:	b510      	push	{r4, lr}
 8011a94:	460c      	mov	r4, r1
 8011a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a9a:	f000 f855 	bl	8011b48 <_lseek_r>
 8011a9e:	1c43      	adds	r3, r0, #1
 8011aa0:	89a3      	ldrh	r3, [r4, #12]
 8011aa2:	bf15      	itete	ne
 8011aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aae:	81a3      	strheq	r3, [r4, #12]
 8011ab0:	bf18      	it	ne
 8011ab2:	81a3      	strhne	r3, [r4, #12]
 8011ab4:	bd10      	pop	{r4, pc}

08011ab6 <__sclose>:
 8011ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aba:	f000 b813 	b.w	8011ae4 <_close_r>
	...

08011ac0 <_write_r>:
 8011ac0:	b538      	push	{r3, r4, r5, lr}
 8011ac2:	4d07      	ldr	r5, [pc, #28]	; (8011ae0 <_write_r+0x20>)
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	4608      	mov	r0, r1
 8011ac8:	4611      	mov	r1, r2
 8011aca:	2200      	movs	r2, #0
 8011acc:	602a      	str	r2, [r5, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	f000 fc68 	bl	80123a4 <_write>
 8011ad4:	1c43      	adds	r3, r0, #1
 8011ad6:	d102      	bne.n	8011ade <_write_r+0x1e>
 8011ad8:	682b      	ldr	r3, [r5, #0]
 8011ada:	b103      	cbz	r3, 8011ade <_write_r+0x1e>
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	bd38      	pop	{r3, r4, r5, pc}
 8011ae0:	20005528 	.word	0x20005528

08011ae4 <_close_r>:
 8011ae4:	b538      	push	{r3, r4, r5, lr}
 8011ae6:	4d06      	ldr	r5, [pc, #24]	; (8011b00 <_close_r+0x1c>)
 8011ae8:	2300      	movs	r3, #0
 8011aea:	4604      	mov	r4, r0
 8011aec:	4608      	mov	r0, r1
 8011aee:	602b      	str	r3, [r5, #0]
 8011af0:	f000 fc20 	bl	8012334 <_close>
 8011af4:	1c43      	adds	r3, r0, #1
 8011af6:	d102      	bne.n	8011afe <_close_r+0x1a>
 8011af8:	682b      	ldr	r3, [r5, #0]
 8011afa:	b103      	cbz	r3, 8011afe <_close_r+0x1a>
 8011afc:	6023      	str	r3, [r4, #0]
 8011afe:	bd38      	pop	{r3, r4, r5, pc}
 8011b00:	20005528 	.word	0x20005528

08011b04 <_fstat_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4d07      	ldr	r5, [pc, #28]	; (8011b24 <_fstat_r+0x20>)
 8011b08:	2300      	movs	r3, #0
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4608      	mov	r0, r1
 8011b0e:	4611      	mov	r1, r2
 8011b10:	602b      	str	r3, [r5, #0]
 8011b12:	f000 fc17 	bl	8012344 <_fstat>
 8011b16:	1c43      	adds	r3, r0, #1
 8011b18:	d102      	bne.n	8011b20 <_fstat_r+0x1c>
 8011b1a:	682b      	ldr	r3, [r5, #0]
 8011b1c:	b103      	cbz	r3, 8011b20 <_fstat_r+0x1c>
 8011b1e:	6023      	str	r3, [r4, #0]
 8011b20:	bd38      	pop	{r3, r4, r5, pc}
 8011b22:	bf00      	nop
 8011b24:	20005528 	.word	0x20005528

08011b28 <_isatty_r>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	4d06      	ldr	r5, [pc, #24]	; (8011b44 <_isatty_r+0x1c>)
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	4604      	mov	r4, r0
 8011b30:	4608      	mov	r0, r1
 8011b32:	602b      	str	r3, [r5, #0]
 8011b34:	f000 fc16 	bl	8012364 <_isatty>
 8011b38:	1c43      	adds	r3, r0, #1
 8011b3a:	d102      	bne.n	8011b42 <_isatty_r+0x1a>
 8011b3c:	682b      	ldr	r3, [r5, #0]
 8011b3e:	b103      	cbz	r3, 8011b42 <_isatty_r+0x1a>
 8011b40:	6023      	str	r3, [r4, #0]
 8011b42:	bd38      	pop	{r3, r4, r5, pc}
 8011b44:	20005528 	.word	0x20005528

08011b48 <_lseek_r>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	4d07      	ldr	r5, [pc, #28]	; (8011b68 <_lseek_r+0x20>)
 8011b4c:	4604      	mov	r4, r0
 8011b4e:	4608      	mov	r0, r1
 8011b50:	4611      	mov	r1, r2
 8011b52:	2200      	movs	r2, #0
 8011b54:	602a      	str	r2, [r5, #0]
 8011b56:	461a      	mov	r2, r3
 8011b58:	f000 fc14 	bl	8012384 <_lseek>
 8011b5c:	1c43      	adds	r3, r0, #1
 8011b5e:	d102      	bne.n	8011b66 <_lseek_r+0x1e>
 8011b60:	682b      	ldr	r3, [r5, #0]
 8011b62:	b103      	cbz	r3, 8011b66 <_lseek_r+0x1e>
 8011b64:	6023      	str	r3, [r4, #0]
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	20005528 	.word	0x20005528

08011b6c <_read_r>:
 8011b6c:	b538      	push	{r3, r4, r5, lr}
 8011b6e:	4d07      	ldr	r5, [pc, #28]	; (8011b8c <_read_r+0x20>)
 8011b70:	4604      	mov	r4, r0
 8011b72:	4608      	mov	r0, r1
 8011b74:	4611      	mov	r1, r2
 8011b76:	2200      	movs	r2, #0
 8011b78:	602a      	str	r2, [r5, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	f000 fc0a 	bl	8012394 <_read>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d102      	bne.n	8011b8a <_read_r+0x1e>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	b103      	cbz	r3, 8011b8a <_read_r+0x1e>
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	20005528 	.word	0x20005528

08011b90 <powf>:
 8011b90:	b508      	push	{r3, lr}
 8011b92:	ed2d 8b04 	vpush	{d8-d9}
 8011b96:	eeb0 8a60 	vmov.f32	s16, s1
 8011b9a:	eeb0 9a40 	vmov.f32	s18, s0
 8011b9e:	f000 f84f 	bl	8011c40 <__ieee754_powf>
 8011ba2:	eeb4 8a48 	vcmp.f32	s16, s16
 8011ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011baa:	eef0 8a40 	vmov.f32	s17, s0
 8011bae:	d63e      	bvs.n	8011c2e <powf+0x9e>
 8011bb0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb8:	d112      	bne.n	8011be0 <powf+0x50>
 8011bba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc2:	d039      	beq.n	8011c38 <powf+0xa8>
 8011bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8011bc8:	f000 fb35 	bl	8012236 <finitef>
 8011bcc:	b378      	cbz	r0, 8011c2e <powf+0x9e>
 8011bce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd6:	d52a      	bpl.n	8011c2e <powf+0x9e>
 8011bd8:	f7fd f8be 	bl	800ed58 <__errno>
 8011bdc:	2322      	movs	r3, #34	; 0x22
 8011bde:	e014      	b.n	8011c0a <powf+0x7a>
 8011be0:	f000 fb29 	bl	8012236 <finitef>
 8011be4:	b998      	cbnz	r0, 8011c0e <powf+0x7e>
 8011be6:	eeb0 0a49 	vmov.f32	s0, s18
 8011bea:	f000 fb24 	bl	8012236 <finitef>
 8011bee:	b170      	cbz	r0, 8011c0e <powf+0x7e>
 8011bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8011bf4:	f000 fb1f 	bl	8012236 <finitef>
 8011bf8:	b148      	cbz	r0, 8011c0e <powf+0x7e>
 8011bfa:	eef4 8a68 	vcmp.f32	s17, s17
 8011bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c02:	d7e9      	bvc.n	8011bd8 <powf+0x48>
 8011c04:	f7fd f8a8 	bl	800ed58 <__errno>
 8011c08:	2321      	movs	r3, #33	; 0x21
 8011c0a:	6003      	str	r3, [r0, #0]
 8011c0c:	e00f      	b.n	8011c2e <powf+0x9e>
 8011c0e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c16:	d10a      	bne.n	8011c2e <powf+0x9e>
 8011c18:	eeb0 0a49 	vmov.f32	s0, s18
 8011c1c:	f000 fb0b 	bl	8012236 <finitef>
 8011c20:	b128      	cbz	r0, 8011c2e <powf+0x9e>
 8011c22:	eeb0 0a48 	vmov.f32	s0, s16
 8011c26:	f000 fb06 	bl	8012236 <finitef>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d1d4      	bne.n	8011bd8 <powf+0x48>
 8011c2e:	eeb0 0a68 	vmov.f32	s0, s17
 8011c32:	ecbd 8b04 	vpop	{d8-d9}
 8011c36:	bd08      	pop	{r3, pc}
 8011c38:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011c3c:	e7f7      	b.n	8011c2e <powf+0x9e>
	...

08011c40 <__ieee754_powf>:
 8011c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c44:	ee10 4a90 	vmov	r4, s1
 8011c48:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8011c4c:	ed2d 8b02 	vpush	{d8}
 8011c50:	ee10 6a10 	vmov	r6, s0
 8011c54:	eeb0 8a40 	vmov.f32	s16, s0
 8011c58:	eef0 8a60 	vmov.f32	s17, s1
 8011c5c:	d10c      	bne.n	8011c78 <__ieee754_powf+0x38>
 8011c5e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8011c62:	0076      	lsls	r6, r6, #1
 8011c64:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8011c68:	f240 8296 	bls.w	8012198 <__ieee754_powf+0x558>
 8011c6c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011c70:	ecbd 8b02 	vpop	{d8}
 8011c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c78:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011c7c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011c80:	dcf4      	bgt.n	8011c6c <__ieee754_powf+0x2c>
 8011c82:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011c86:	dd08      	ble.n	8011c9a <__ieee754_powf+0x5a>
 8011c88:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8011c8c:	d1ee      	bne.n	8011c6c <__ieee754_powf+0x2c>
 8011c8e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8011c92:	0064      	lsls	r4, r4, #1
 8011c94:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011c98:	e7e6      	b.n	8011c68 <__ieee754_powf+0x28>
 8011c9a:	2e00      	cmp	r6, #0
 8011c9c:	da20      	bge.n	8011ce0 <__ieee754_powf+0xa0>
 8011c9e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8011ca2:	da2d      	bge.n	8011d00 <__ieee754_powf+0xc0>
 8011ca4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011ca8:	f2c0 827f 	blt.w	80121aa <__ieee754_powf+0x56a>
 8011cac:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8011cb0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011cb4:	fa48 f703 	asr.w	r7, r8, r3
 8011cb8:	fa07 f303 	lsl.w	r3, r7, r3
 8011cbc:	4543      	cmp	r3, r8
 8011cbe:	f040 8274 	bne.w	80121aa <__ieee754_powf+0x56a>
 8011cc2:	f007 0701 	and.w	r7, r7, #1
 8011cc6:	f1c7 0702 	rsb	r7, r7, #2
 8011cca:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011cce:	d11f      	bne.n	8011d10 <__ieee754_powf+0xd0>
 8011cd0:	2c00      	cmp	r4, #0
 8011cd2:	f280 8267 	bge.w	80121a4 <__ieee754_powf+0x564>
 8011cd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011cda:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011cde:	e7c7      	b.n	8011c70 <__ieee754_powf+0x30>
 8011ce0:	2700      	movs	r7, #0
 8011ce2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011ce6:	d1f0      	bne.n	8011cca <__ieee754_powf+0x8a>
 8011ce8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8011cec:	f000 8254 	beq.w	8012198 <__ieee754_powf+0x558>
 8011cf0:	dd08      	ble.n	8011d04 <__ieee754_powf+0xc4>
 8011cf2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8011ffc <__ieee754_powf+0x3bc>
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	bfa8      	it	ge
 8011cfa:	eeb0 0a68 	vmovge.f32	s0, s17
 8011cfe:	e7b7      	b.n	8011c70 <__ieee754_powf+0x30>
 8011d00:	2702      	movs	r7, #2
 8011d02:	e7ee      	b.n	8011ce2 <__ieee754_powf+0xa2>
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	f280 824a 	bge.w	801219e <__ieee754_powf+0x55e>
 8011d0a:	eeb1 0a68 	vneg.f32	s0, s17
 8011d0e:	e7af      	b.n	8011c70 <__ieee754_powf+0x30>
 8011d10:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8011d14:	d102      	bne.n	8011d1c <__ieee754_powf+0xdc>
 8011d16:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011d1a:	e7a9      	b.n	8011c70 <__ieee754_powf+0x30>
 8011d1c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011d20:	eeb0 0a48 	vmov.f32	s0, s16
 8011d24:	d107      	bne.n	8011d36 <__ieee754_powf+0xf6>
 8011d26:	2e00      	cmp	r6, #0
 8011d28:	db05      	blt.n	8011d36 <__ieee754_powf+0xf6>
 8011d2a:	ecbd 8b02 	vpop	{d8}
 8011d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d32:	f000 ba53 	b.w	80121dc <__ieee754_sqrtf>
 8011d36:	f000 fa77 	bl	8012228 <fabsf>
 8011d3a:	b125      	cbz	r5, 8011d46 <__ieee754_powf+0x106>
 8011d3c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8011d40:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011d44:	d116      	bne.n	8011d74 <__ieee754_powf+0x134>
 8011d46:	2c00      	cmp	r4, #0
 8011d48:	bfbc      	itt	lt
 8011d4a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011d4e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011d52:	2e00      	cmp	r6, #0
 8011d54:	da8c      	bge.n	8011c70 <__ieee754_powf+0x30>
 8011d56:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8011d5a:	ea55 0307 	orrs.w	r3, r5, r7
 8011d5e:	d104      	bne.n	8011d6a <__ieee754_powf+0x12a>
 8011d60:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011d64:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011d68:	e782      	b.n	8011c70 <__ieee754_powf+0x30>
 8011d6a:	2f01      	cmp	r7, #1
 8011d6c:	d180      	bne.n	8011c70 <__ieee754_powf+0x30>
 8011d6e:	eeb1 0a40 	vneg.f32	s0, s0
 8011d72:	e77d      	b.n	8011c70 <__ieee754_powf+0x30>
 8011d74:	0ff0      	lsrs	r0, r6, #31
 8011d76:	3801      	subs	r0, #1
 8011d78:	ea57 0300 	orrs.w	r3, r7, r0
 8011d7c:	d104      	bne.n	8011d88 <__ieee754_powf+0x148>
 8011d7e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011d82:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011d86:	e773      	b.n	8011c70 <__ieee754_powf+0x30>
 8011d88:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8011d8c:	dd74      	ble.n	8011e78 <__ieee754_powf+0x238>
 8011d8e:	4b9c      	ldr	r3, [pc, #624]	; (8012000 <__ieee754_powf+0x3c0>)
 8011d90:	429d      	cmp	r5, r3
 8011d92:	dc08      	bgt.n	8011da6 <__ieee754_powf+0x166>
 8011d94:	2c00      	cmp	r4, #0
 8011d96:	da0b      	bge.n	8011db0 <__ieee754_powf+0x170>
 8011d98:	2000      	movs	r0, #0
 8011d9a:	ecbd 8b02 	vpop	{d8}
 8011d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011da2:	f000 ba3b 	b.w	801221c <__math_oflowf>
 8011da6:	4b97      	ldr	r3, [pc, #604]	; (8012004 <__ieee754_powf+0x3c4>)
 8011da8:	429d      	cmp	r5, r3
 8011daa:	dd08      	ble.n	8011dbe <__ieee754_powf+0x17e>
 8011dac:	2c00      	cmp	r4, #0
 8011dae:	dcf3      	bgt.n	8011d98 <__ieee754_powf+0x158>
 8011db0:	2000      	movs	r0, #0
 8011db2:	ecbd 8b02 	vpop	{d8}
 8011db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dba:	f000 ba29 	b.w	8012210 <__math_uflowf>
 8011dbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011dc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011dc6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012008 <__ieee754_powf+0x3c8>
 8011dca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011dce:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011dd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011dd6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011dda:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011de2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801200c <__ieee754_powf+0x3cc>
 8011de6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8011dea:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012010 <__ieee754_powf+0x3d0>
 8011dee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011df2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8012014 <__ieee754_powf+0x3d4>
 8011df6:	eef0 6a67 	vmov.f32	s13, s15
 8011dfa:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011dfe:	ee16 3a90 	vmov	r3, s13
 8011e02:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011e06:	f023 030f 	bic.w	r3, r3, #15
 8011e0a:	ee00 3a90 	vmov	s1, r3
 8011e0e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8011e12:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011e16:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8011e1a:	f024 040f 	bic.w	r4, r4, #15
 8011e1e:	ee07 4a10 	vmov	s14, r4
 8011e22:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011e26:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011e2a:	ee07 3a90 	vmov	s15, r3
 8011e2e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011e32:	3f01      	subs	r7, #1
 8011e34:	ea57 0200 	orrs.w	r2, r7, r0
 8011e38:	ee07 4a10 	vmov	s14, r4
 8011e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e40:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011e44:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011e48:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011e4c:	ee17 4a10 	vmov	r4, s14
 8011e50:	bf08      	it	eq
 8011e52:	eeb0 8a40 	vmoveq.f32	s16, s0
 8011e56:	2c00      	cmp	r4, #0
 8011e58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011e5c:	f340 817e 	ble.w	801215c <__ieee754_powf+0x51c>
 8011e60:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011e64:	f340 80f8 	ble.w	8012058 <__ieee754_powf+0x418>
 8011e68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e70:	bf4c      	ite	mi
 8011e72:	2001      	movmi	r0, #1
 8011e74:	2000      	movpl	r0, #0
 8011e76:	e790      	b.n	8011d9a <__ieee754_powf+0x15a>
 8011e78:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8011e7c:	bf01      	itttt	eq
 8011e7e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8012018 <__ieee754_powf+0x3d8>
 8011e82:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011e86:	f06f 0217 	mvneq.w	r2, #23
 8011e8a:	ee17 5a90 	vmoveq	r5, s15
 8011e8e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011e92:	bf18      	it	ne
 8011e94:	2200      	movne	r2, #0
 8011e96:	3b7f      	subs	r3, #127	; 0x7f
 8011e98:	4413      	add	r3, r2
 8011e9a:	4a60      	ldr	r2, [pc, #384]	; (801201c <__ieee754_powf+0x3dc>)
 8011e9c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8011ea0:	4295      	cmp	r5, r2
 8011ea2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8011ea6:	dd06      	ble.n	8011eb6 <__ieee754_powf+0x276>
 8011ea8:	4a5d      	ldr	r2, [pc, #372]	; (8012020 <__ieee754_powf+0x3e0>)
 8011eaa:	4295      	cmp	r5, r2
 8011eac:	f340 80a4 	ble.w	8011ff8 <__ieee754_powf+0x3b8>
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011eb6:	2500      	movs	r5, #0
 8011eb8:	4a5a      	ldr	r2, [pc, #360]	; (8012024 <__ieee754_powf+0x3e4>)
 8011eba:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011ebe:	ee07 1a90 	vmov	s15, r1
 8011ec2:	ed92 7a00 	vldr	s14, [r2]
 8011ec6:	4a58      	ldr	r2, [pc, #352]	; (8012028 <__ieee754_powf+0x3e8>)
 8011ec8:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011ecc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011ed0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011ed4:	1049      	asrs	r1, r1, #1
 8011ed6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011eda:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011ede:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8011ee2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8011ee6:	ee06 1a10 	vmov	s12, r1
 8011eea:	ee65 4a26 	vmul.f32	s9, s10, s13
 8011eee:	ee36 7a47 	vsub.f32	s14, s12, s14
 8011ef2:	ee14 6a90 	vmov	r6, s9
 8011ef6:	4016      	ands	r6, r2
 8011ef8:	ee05 6a90 	vmov	s11, r6
 8011efc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8011f00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f04:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801202c <__ieee754_powf+0x3ec>
 8011f08:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8011f0c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011f10:	ee25 6a26 	vmul.f32	s12, s10, s13
 8011f14:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012030 <__ieee754_powf+0x3f0>
 8011f18:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011f1c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012034 <__ieee754_powf+0x3f4>
 8011f20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011f24:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012008 <__ieee754_powf+0x3c8>
 8011f28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f2c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012038 <__ieee754_powf+0x3f8>
 8011f30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011f34:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801203c <__ieee754_powf+0x3fc>
 8011f38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f3c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8011f40:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8011f44:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011f48:	eee5 6a07 	vfma.f32	s13, s10, s14
 8011f4c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011f50:	eef0 7a45 	vmov.f32	s15, s10
 8011f54:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f5c:	ee17 1a90 	vmov	r1, s15
 8011f60:	4011      	ands	r1, r2
 8011f62:	ee07 1a90 	vmov	s15, r1
 8011f66:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8011f6a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8011f6e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f72:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011f76:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011f7a:	eeb0 6a47 	vmov.f32	s12, s14
 8011f7e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011f82:	ee16 1a10 	vmov	r1, s12
 8011f86:	4011      	ands	r1, r2
 8011f88:	ee06 1a90 	vmov	s13, r1
 8011f8c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8011f90:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012040 <__ieee754_powf+0x400>
 8011f94:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8012044 <__ieee754_powf+0x404>
 8011f98:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011f9c:	ee06 1a10 	vmov	s12, r1
 8011fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011fa4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012048 <__ieee754_powf+0x408>
 8011fa8:	4928      	ldr	r1, [pc, #160]	; (801204c <__ieee754_powf+0x40c>)
 8011faa:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011fae:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8011fb2:	edd1 7a00 	vldr	s15, [r1]
 8011fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fba:	ee07 3a90 	vmov	s15, r3
 8011fbe:	4b24      	ldr	r3, [pc, #144]	; (8012050 <__ieee754_powf+0x410>)
 8011fc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011fc4:	eef0 7a47 	vmov.f32	s15, s14
 8011fc8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011fcc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011fd0:	edd5 0a00 	vldr	s1, [r5]
 8011fd4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fdc:	ee17 3a90 	vmov	r3, s15
 8011fe0:	4013      	ands	r3, r2
 8011fe2:	ee07 3a90 	vmov	s15, r3
 8011fe6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011fea:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8011fee:	eee6 6a65 	vfms.f32	s13, s12, s11
 8011ff2:	ee77 7a66 	vsub.f32	s15, s14, s13
 8011ff6:	e70e      	b.n	8011e16 <__ieee754_powf+0x1d6>
 8011ff8:	2501      	movs	r5, #1
 8011ffa:	e75d      	b.n	8011eb8 <__ieee754_powf+0x278>
 8011ffc:	00000000 	.word	0x00000000
 8012000:	3f7ffff3 	.word	0x3f7ffff3
 8012004:	3f800007 	.word	0x3f800007
 8012008:	3eaaaaab 	.word	0x3eaaaaab
 801200c:	3fb8aa3b 	.word	0x3fb8aa3b
 8012010:	36eca570 	.word	0x36eca570
 8012014:	3fb8aa00 	.word	0x3fb8aa00
 8012018:	4b800000 	.word	0x4b800000
 801201c:	001cc471 	.word	0x001cc471
 8012020:	005db3d6 	.word	0x005db3d6
 8012024:	08027aec 	.word	0x08027aec
 8012028:	fffff000 	.word	0xfffff000
 801202c:	3e6c3255 	.word	0x3e6c3255
 8012030:	3e53f142 	.word	0x3e53f142
 8012034:	3e8ba305 	.word	0x3e8ba305
 8012038:	3edb6db7 	.word	0x3edb6db7
 801203c:	3f19999a 	.word	0x3f19999a
 8012040:	3f76384f 	.word	0x3f76384f
 8012044:	3f763800 	.word	0x3f763800
 8012048:	369dc3a0 	.word	0x369dc3a0
 801204c:	08027afc 	.word	0x08027afc
 8012050:	08027af4 	.word	0x08027af4
 8012054:	3338aa3c 	.word	0x3338aa3c
 8012058:	f040 8095 	bne.w	8012186 <__ieee754_powf+0x546>
 801205c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8012054 <__ieee754_powf+0x414>
 8012060:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012064:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012068:	eef4 6ac7 	vcmpe.f32	s13, s14
 801206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012070:	f73f aefa 	bgt.w	8011e68 <__ieee754_powf+0x228>
 8012074:	15db      	asrs	r3, r3, #23
 8012076:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801207a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801207e:	4103      	asrs	r3, r0
 8012080:	4423      	add	r3, r4
 8012082:	494b      	ldr	r1, [pc, #300]	; (80121b0 <__ieee754_powf+0x570>)
 8012084:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012088:	3a7f      	subs	r2, #127	; 0x7f
 801208a:	4111      	asrs	r1, r2
 801208c:	ea23 0101 	bic.w	r1, r3, r1
 8012090:	ee07 1a10 	vmov	s14, r1
 8012094:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012098:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801209c:	f1c2 0217 	rsb	r2, r2, #23
 80120a0:	4110      	asrs	r0, r2
 80120a2:	2c00      	cmp	r4, #0
 80120a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120a8:	bfb8      	it	lt
 80120aa:	4240      	neglt	r0, r0
 80120ac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80120b0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80121b4 <__ieee754_powf+0x574>
 80120b4:	eddf 6a40 	vldr	s13, [pc, #256]	; 80121b8 <__ieee754_powf+0x578>
 80120b8:	ee17 3a10 	vmov	r3, s14
 80120bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80120c0:	f023 030f 	bic.w	r3, r3, #15
 80120c4:	ee07 3a10 	vmov	s14, r3
 80120c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120cc:	ee27 0a00 	vmul.f32	s0, s14, s0
 80120d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80120d4:	eddf 7a39 	vldr	s15, [pc, #228]	; 80121bc <__ieee754_powf+0x57c>
 80120d8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80120dc:	eef0 7a40 	vmov.f32	s15, s0
 80120e0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80120e4:	eeb0 6a67 	vmov.f32	s12, s15
 80120e8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80120ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80120f0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80120f4:	eddf 6a32 	vldr	s13, [pc, #200]	; 80121c0 <__ieee754_powf+0x580>
 80120f8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80121c4 <__ieee754_powf+0x584>
 80120fc:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012100:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80121c8 <__ieee754_powf+0x588>
 8012104:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012108:	eddf 6a30 	vldr	s13, [pc, #192]	; 80121cc <__ieee754_powf+0x58c>
 801210c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012110:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80121d0 <__ieee754_powf+0x590>
 8012114:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012118:	eef0 6a67 	vmov.f32	s13, s15
 801211c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8012120:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8012124:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8012128:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801212c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8012130:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012134:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012138:	ee70 7a67 	vsub.f32	s15, s0, s15
 801213c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012140:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012144:	ee10 3a10 	vmov	r3, s0
 8012148:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801214c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012150:	da1f      	bge.n	8012192 <__ieee754_powf+0x552>
 8012152:	f000 f87d 	bl	8012250 <scalbnf>
 8012156:	ee20 0a08 	vmul.f32	s0, s0, s16
 801215a:	e589      	b.n	8011c70 <__ieee754_powf+0x30>
 801215c:	4a1d      	ldr	r2, [pc, #116]	; (80121d4 <__ieee754_powf+0x594>)
 801215e:	4293      	cmp	r3, r2
 8012160:	dd07      	ble.n	8012172 <__ieee754_powf+0x532>
 8012162:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216a:	bf4c      	ite	mi
 801216c:	2001      	movmi	r0, #1
 801216e:	2000      	movpl	r0, #0
 8012170:	e61f      	b.n	8011db2 <__ieee754_powf+0x172>
 8012172:	d108      	bne.n	8012186 <__ieee754_powf+0x546>
 8012174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012178:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012180:	f6ff af78 	blt.w	8012074 <__ieee754_powf+0x434>
 8012184:	e7ed      	b.n	8012162 <__ieee754_powf+0x522>
 8012186:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801218a:	f73f af73 	bgt.w	8012074 <__ieee754_powf+0x434>
 801218e:	2000      	movs	r0, #0
 8012190:	e78c      	b.n	80120ac <__ieee754_powf+0x46c>
 8012192:	ee00 3a10 	vmov	s0, r3
 8012196:	e7de      	b.n	8012156 <__ieee754_powf+0x516>
 8012198:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801219c:	e568      	b.n	8011c70 <__ieee754_powf+0x30>
 801219e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80121d8 <__ieee754_powf+0x598>
 80121a2:	e565      	b.n	8011c70 <__ieee754_powf+0x30>
 80121a4:	eeb0 0a48 	vmov.f32	s0, s16
 80121a8:	e562      	b.n	8011c70 <__ieee754_powf+0x30>
 80121aa:	2700      	movs	r7, #0
 80121ac:	e58d      	b.n	8011cca <__ieee754_powf+0x8a>
 80121ae:	bf00      	nop
 80121b0:	007fffff 	.word	0x007fffff
 80121b4:	35bfbe8c 	.word	0x35bfbe8c
 80121b8:	3f317200 	.word	0x3f317200
 80121bc:	3f317218 	.word	0x3f317218
 80121c0:	b5ddea0e 	.word	0xb5ddea0e
 80121c4:	3331bb4c 	.word	0x3331bb4c
 80121c8:	388ab355 	.word	0x388ab355
 80121cc:	bb360b61 	.word	0xbb360b61
 80121d0:	3e2aaaab 	.word	0x3e2aaaab
 80121d4:	43160000 	.word	0x43160000
 80121d8:	00000000 	.word	0x00000000

080121dc <__ieee754_sqrtf>:
 80121dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80121e0:	4770      	bx	lr

080121e2 <with_errnof>:
 80121e2:	b513      	push	{r0, r1, r4, lr}
 80121e4:	4604      	mov	r4, r0
 80121e6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80121ea:	f7fc fdb5 	bl	800ed58 <__errno>
 80121ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80121f2:	6004      	str	r4, [r0, #0]
 80121f4:	b002      	add	sp, #8
 80121f6:	bd10      	pop	{r4, pc}

080121f8 <xflowf>:
 80121f8:	b130      	cbz	r0, 8012208 <xflowf+0x10>
 80121fa:	eef1 7a40 	vneg.f32	s15, s0
 80121fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012202:	2022      	movs	r0, #34	; 0x22
 8012204:	f7ff bfed 	b.w	80121e2 <with_errnof>
 8012208:	eef0 7a40 	vmov.f32	s15, s0
 801220c:	e7f7      	b.n	80121fe <xflowf+0x6>
	...

08012210 <__math_uflowf>:
 8012210:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012218 <__math_uflowf+0x8>
 8012214:	f7ff bff0 	b.w	80121f8 <xflowf>
 8012218:	10000000 	.word	0x10000000

0801221c <__math_oflowf>:
 801221c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012224 <__math_oflowf+0x8>
 8012220:	f7ff bfea 	b.w	80121f8 <xflowf>
 8012224:	70000000 	.word	0x70000000

08012228 <fabsf>:
 8012228:	ee10 3a10 	vmov	r3, s0
 801222c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012230:	ee00 3a10 	vmov	s0, r3
 8012234:	4770      	bx	lr

08012236 <finitef>:
 8012236:	b082      	sub	sp, #8
 8012238:	ed8d 0a01 	vstr	s0, [sp, #4]
 801223c:	9801      	ldr	r0, [sp, #4]
 801223e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012242:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012246:	bfac      	ite	ge
 8012248:	2000      	movge	r0, #0
 801224a:	2001      	movlt	r0, #1
 801224c:	b002      	add	sp, #8
 801224e:	4770      	bx	lr

08012250 <scalbnf>:
 8012250:	ee10 3a10 	vmov	r3, s0
 8012254:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012258:	d025      	beq.n	80122a6 <scalbnf+0x56>
 801225a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801225e:	d302      	bcc.n	8012266 <scalbnf+0x16>
 8012260:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012264:	4770      	bx	lr
 8012266:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801226a:	d122      	bne.n	80122b2 <scalbnf+0x62>
 801226c:	4b2a      	ldr	r3, [pc, #168]	; (8012318 <scalbnf+0xc8>)
 801226e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801231c <scalbnf+0xcc>
 8012272:	4298      	cmp	r0, r3
 8012274:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012278:	db16      	blt.n	80122a8 <scalbnf+0x58>
 801227a:	ee10 3a10 	vmov	r3, s0
 801227e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012282:	3a19      	subs	r2, #25
 8012284:	4402      	add	r2, r0
 8012286:	2afe      	cmp	r2, #254	; 0xfe
 8012288:	dd15      	ble.n	80122b6 <scalbnf+0x66>
 801228a:	ee10 3a10 	vmov	r3, s0
 801228e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012320 <scalbnf+0xd0>
 8012292:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012324 <scalbnf+0xd4>
 8012296:	2b00      	cmp	r3, #0
 8012298:	eeb0 7a67 	vmov.f32	s14, s15
 801229c:	bfb8      	it	lt
 801229e:	eef0 7a66 	vmovlt.f32	s15, s13
 80122a2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80122a6:	4770      	bx	lr
 80122a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012328 <scalbnf+0xd8>
 80122ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80122b0:	4770      	bx	lr
 80122b2:	0dd2      	lsrs	r2, r2, #23
 80122b4:	e7e6      	b.n	8012284 <scalbnf+0x34>
 80122b6:	2a00      	cmp	r2, #0
 80122b8:	dd06      	ble.n	80122c8 <scalbnf+0x78>
 80122ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80122c2:	ee00 3a10 	vmov	s0, r3
 80122c6:	4770      	bx	lr
 80122c8:	f112 0f16 	cmn.w	r2, #22
 80122cc:	da1a      	bge.n	8012304 <scalbnf+0xb4>
 80122ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80122d2:	4298      	cmp	r0, r3
 80122d4:	ee10 3a10 	vmov	r3, s0
 80122d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122dc:	dd0a      	ble.n	80122f4 <scalbnf+0xa4>
 80122de:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012320 <scalbnf+0xd0>
 80122e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012324 <scalbnf+0xd4>
 80122e6:	eef0 7a40 	vmov.f32	s15, s0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	bf18      	it	ne
 80122ee:	eeb0 0a47 	vmovne.f32	s0, s14
 80122f2:	e7db      	b.n	80122ac <scalbnf+0x5c>
 80122f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012328 <scalbnf+0xd8>
 80122f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801232c <scalbnf+0xdc>
 80122fc:	eef0 7a40 	vmov.f32	s15, s0
 8012300:	2b00      	cmp	r3, #0
 8012302:	e7f3      	b.n	80122ec <scalbnf+0x9c>
 8012304:	3219      	adds	r2, #25
 8012306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801230a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801230e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012330 <scalbnf+0xe0>
 8012312:	ee07 3a10 	vmov	s14, r3
 8012316:	e7c4      	b.n	80122a2 <scalbnf+0x52>
 8012318:	ffff3cb0 	.word	0xffff3cb0
 801231c:	4c000000 	.word	0x4c000000
 8012320:	7149f2ca 	.word	0x7149f2ca
 8012324:	f149f2ca 	.word	0xf149f2ca
 8012328:	0da24260 	.word	0x0da24260
 801232c:	8da24260 	.word	0x8da24260
 8012330:	33000000 	.word	0x33000000

08012334 <_close>:
 8012334:	4b02      	ldr	r3, [pc, #8]	; (8012340 <_close+0xc>)
 8012336:	2258      	movs	r2, #88	; 0x58
 8012338:	601a      	str	r2, [r3, #0]
 801233a:	f04f 30ff 	mov.w	r0, #4294967295
 801233e:	4770      	bx	lr
 8012340:	20005528 	.word	0x20005528

08012344 <_fstat>:
 8012344:	4b02      	ldr	r3, [pc, #8]	; (8012350 <_fstat+0xc>)
 8012346:	2258      	movs	r2, #88	; 0x58
 8012348:	601a      	str	r2, [r3, #0]
 801234a:	f04f 30ff 	mov.w	r0, #4294967295
 801234e:	4770      	bx	lr
 8012350:	20005528 	.word	0x20005528

08012354 <_getpid>:
 8012354:	4b02      	ldr	r3, [pc, #8]	; (8012360 <_getpid+0xc>)
 8012356:	2258      	movs	r2, #88	; 0x58
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	f04f 30ff 	mov.w	r0, #4294967295
 801235e:	4770      	bx	lr
 8012360:	20005528 	.word	0x20005528

08012364 <_isatty>:
 8012364:	4b02      	ldr	r3, [pc, #8]	; (8012370 <_isatty+0xc>)
 8012366:	2258      	movs	r2, #88	; 0x58
 8012368:	601a      	str	r2, [r3, #0]
 801236a:	2000      	movs	r0, #0
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	20005528 	.word	0x20005528

08012374 <_kill>:
 8012374:	4b02      	ldr	r3, [pc, #8]	; (8012380 <_kill+0xc>)
 8012376:	2258      	movs	r2, #88	; 0x58
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	f04f 30ff 	mov.w	r0, #4294967295
 801237e:	4770      	bx	lr
 8012380:	20005528 	.word	0x20005528

08012384 <_lseek>:
 8012384:	4b02      	ldr	r3, [pc, #8]	; (8012390 <_lseek+0xc>)
 8012386:	2258      	movs	r2, #88	; 0x58
 8012388:	601a      	str	r2, [r3, #0]
 801238a:	f04f 30ff 	mov.w	r0, #4294967295
 801238e:	4770      	bx	lr
 8012390:	20005528 	.word	0x20005528

08012394 <_read>:
 8012394:	4b02      	ldr	r3, [pc, #8]	; (80123a0 <_read+0xc>)
 8012396:	2258      	movs	r2, #88	; 0x58
 8012398:	601a      	str	r2, [r3, #0]
 801239a:	f04f 30ff 	mov.w	r0, #4294967295
 801239e:	4770      	bx	lr
 80123a0:	20005528 	.word	0x20005528

080123a4 <_write>:
 80123a4:	4b02      	ldr	r3, [pc, #8]	; (80123b0 <_write+0xc>)
 80123a6:	2258      	movs	r2, #88	; 0x58
 80123a8:	601a      	str	r2, [r3, #0]
 80123aa:	f04f 30ff 	mov.w	r0, #4294967295
 80123ae:	4770      	bx	lr
 80123b0:	20005528 	.word	0x20005528

080123b4 <_exit>:
 80123b4:	e7fe      	b.n	80123b4 <_exit>
	...

080123b8 <_init>:
 80123b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ba:	bf00      	nop
 80123bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123be:	bc08      	pop	{r3}
 80123c0:	469e      	mov	lr, r3
 80123c2:	4770      	bx	lr

080123c4 <_fini>:
 80123c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c6:	bf00      	nop
 80123c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ca:	bc08      	pop	{r3}
 80123cc:	469e      	mov	lr, r3
 80123ce:	4770      	bx	lr
